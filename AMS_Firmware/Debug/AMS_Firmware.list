
AMS_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d904  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  0800da90  0800da90  0000ea90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e268  0800e268  00010378  2**0
                  CONTENTS
  4 .ARM          00000008  0800e268  0800e268  0000f268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e270  0800e270  00010378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e270  0800e270  0000f270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e274  0800e274  0000f274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000378  20000000  0800e278  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000158c  20000378  0800e5f0  00010378  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001904  0800e5f0  00010904  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010378  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a273  00000000  00000000  000103a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049df  00000000  00000000  0002a614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  0002eff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001191  00000000  00000000  00030720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024023  00000000  00000000  000318b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e846  00000000  00000000  000558d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c551b  00000000  00000000  0007411a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139635  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000705c  00000000  00000000  00139678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001406d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000378 	.word	0x20000378
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800da74 	.word	0x0800da74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000037c 	.word	0x2000037c
 80001c4:	0800da74 	.word	0x0800da74

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b968 	b.w	8000e28 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	460c      	mov	r4, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14e      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b7c:	4694      	mov	ip, r2
 8000b7e:	458c      	cmp	ip, r1
 8000b80:	4686      	mov	lr, r0
 8000b82:	fab2 f282 	clz	r2, r2
 8000b86:	d962      	bls.n	8000c4e <__udivmoddi4+0xde>
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0320 	rsb	r3, r2, #32
 8000b8e:	4091      	lsls	r1, r2
 8000b90:	fa20 f303 	lsr.w	r3, r0, r3
 8000b94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b98:	4319      	orrs	r1, r3
 8000b9a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ba6:	fb07 1114 	mls	r1, r7, r4, r1
 8000baa:	fa1f f68c 	uxth.w	r6, ip
 8000bae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb6:	fb04 f106 	mul.w	r1, r4, r6
 8000bba:	4299      	cmp	r1, r3
 8000bbc:	d90a      	bls.n	8000bd4 <__udivmoddi4+0x64>
 8000bbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bc6:	f080 8110 	bcs.w	8000dea <__udivmoddi4+0x27a>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 810d 	bls.w	8000dea <__udivmoddi4+0x27a>
 8000bd0:	3c02      	subs	r4, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	1a59      	subs	r1, r3, r1
 8000bd6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bda:	fb07 1110 	mls	r1, r7, r0, r1
 8000bde:	fb00 f606 	mul.w	r6, r0, r6
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bea:	429e      	cmp	r6, r3
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x94>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf6:	f080 80fa 	bcs.w	8000dee <__udivmoddi4+0x27e>
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	f240 80f7 	bls.w	8000dee <__udivmoddi4+0x27e>
 8000c00:	4463      	add	r3, ip
 8000c02:	3802      	subs	r0, #2
 8000c04:	2100      	movs	r1, #0
 8000c06:	1b9b      	subs	r3, r3, r6
 8000c08:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c0c:	b11d      	cbz	r5, 8000c16 <__udivmoddi4+0xa6>
 8000c0e:	40d3      	lsrs	r3, r2
 8000c10:	2200      	movs	r2, #0
 8000c12:	e9c5 3200 	strd	r3, r2, [r5]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d905      	bls.n	8000c2a <__udivmoddi4+0xba>
 8000c1e:	b10d      	cbz	r5, 8000c24 <__udivmoddi4+0xb4>
 8000c20:	e9c5 0100 	strd	r0, r1, [r5]
 8000c24:	2100      	movs	r1, #0
 8000c26:	4608      	mov	r0, r1
 8000c28:	e7f5      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c2a:	fab3 f183 	clz	r1, r3
 8000c2e:	2900      	cmp	r1, #0
 8000c30:	d146      	bne.n	8000cc0 <__udivmoddi4+0x150>
 8000c32:	42a3      	cmp	r3, r4
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0xcc>
 8000c36:	4290      	cmp	r0, r2
 8000c38:	f0c0 80ee 	bcc.w	8000e18 <__udivmoddi4+0x2a8>
 8000c3c:	1a86      	subs	r6, r0, r2
 8000c3e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	2d00      	cmp	r5, #0
 8000c46:	d0e6      	beq.n	8000c16 <__udivmoddi4+0xa6>
 8000c48:	e9c5 6300 	strd	r6, r3, [r5]
 8000c4c:	e7e3      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c4e:	2a00      	cmp	r2, #0
 8000c50:	f040 808f 	bne.w	8000d72 <__udivmoddi4+0x202>
 8000c54:	eba1 040c 	sub.w	r4, r1, ip
 8000c58:	2101      	movs	r1, #1
 8000c5a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5e:	fa1f f78c 	uxth.w	r7, ip
 8000c62:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c66:	fb08 4416 	mls	r4, r8, r6, r4
 8000c6a:	fb07 f006 	mul.w	r0, r7, r6
 8000c6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c76:	4298      	cmp	r0, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x11c>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x11a>
 8000c84:	4298      	cmp	r0, r3
 8000c86:	f200 80cb 	bhi.w	8000e20 <__udivmoddi4+0x2b0>
 8000c8a:	4626      	mov	r6, r4
 8000c8c:	1a1c      	subs	r4, r3, r0
 8000c8e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c92:	fb08 4410 	mls	r4, r8, r0, r4
 8000c96:	fb00 f707 	mul.w	r7, r0, r7
 8000c9a:	fa1f f38e 	uxth.w	r3, lr
 8000c9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ca2:	429f      	cmp	r7, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x148>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x146>
 8000cb0:	429f      	cmp	r7, r3
 8000cb2:	f200 80ae 	bhi.w	8000e12 <__udivmoddi4+0x2a2>
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	1bdb      	subs	r3, r3, r7
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	e7a5      	b.n	8000c0c <__udivmoddi4+0x9c>
 8000cc0:	f1c1 0720 	rsb	r7, r1, #32
 8000cc4:	408b      	lsls	r3, r1
 8000cc6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cca:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cce:	fa24 f607 	lsr.w	r6, r4, r7
 8000cd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cd6:	fbb6 f8f9 	udiv	r8, r6, r9
 8000cda:	fa1f fe8c 	uxth.w	lr, ip
 8000cde:	fb09 6618 	mls	r6, r9, r8, r6
 8000ce2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ce6:	408c      	lsls	r4, r1
 8000ce8:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cec:	fb08 f00e 	mul.w	r0, r8, lr
 8000cf0:	431c      	orrs	r4, r3
 8000cf2:	0c23      	lsrs	r3, r4, #16
 8000cf4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfe:	d90a      	bls.n	8000d16 <__udivmoddi4+0x1a6>
 8000d00:	eb1c 0303 	adds.w	r3, ip, r3
 8000d04:	f108 36ff 	add.w	r6, r8, #4294967295
 8000d08:	f080 8081 	bcs.w	8000e0e <__udivmoddi4+0x29e>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	d97e      	bls.n	8000e0e <__udivmoddi4+0x29e>
 8000d10:	f1a8 0802 	sub.w	r8, r8, #2
 8000d14:	4463      	add	r3, ip
 8000d16:	1a1e      	subs	r6, r3, r0
 8000d18:	fbb6 f3f9 	udiv	r3, r6, r9
 8000d1c:	fb09 6613 	mls	r6, r9, r3, r6
 8000d20:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d24:	b2a4      	uxth	r4, r4
 8000d26:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x1d0>
 8000d2e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d32:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d36:	d266      	bcs.n	8000e06 <__udivmoddi4+0x296>
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d964      	bls.n	8000e06 <__udivmoddi4+0x296>
 8000d3c:	3b02      	subs	r3, #2
 8000d3e:	4464      	add	r4, ip
 8000d40:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d44:	fba0 8302 	umull	r8, r3, r0, r2
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	429c      	cmp	r4, r3
 8000d4e:	46c6      	mov	lr, r8
 8000d50:	461e      	mov	r6, r3
 8000d52:	d350      	bcc.n	8000df6 <__udivmoddi4+0x286>
 8000d54:	d04d      	beq.n	8000df2 <__udivmoddi4+0x282>
 8000d56:	b155      	cbz	r5, 8000d6e <__udivmoddi4+0x1fe>
 8000d58:	ebba 030e 	subs.w	r3, sl, lr
 8000d5c:	eb64 0406 	sbc.w	r4, r4, r6
 8000d60:	fa04 f707 	lsl.w	r7, r4, r7
 8000d64:	40cb      	lsrs	r3, r1
 8000d66:	431f      	orrs	r7, r3
 8000d68:	40cc      	lsrs	r4, r1
 8000d6a:	e9c5 7400 	strd	r7, r4, [r5]
 8000d6e:	2100      	movs	r1, #0
 8000d70:	e751      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000d72:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d76:	f1c2 0320 	rsb	r3, r2, #32
 8000d7a:	40d9      	lsrs	r1, r3
 8000d7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d80:	fa20 f303 	lsr.w	r3, r0, r3
 8000d84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d88:	fbb1 f0f8 	udiv	r0, r1, r8
 8000d8c:	fb08 1110 	mls	r1, r8, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	431c      	orrs	r4, r3
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	0c23      	lsrs	r3, r4, #16
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb00 f107 	mul.w	r1, r0, r7
 8000da2:	4299      	cmp	r1, r3
 8000da4:	d908      	bls.n	8000db8 <__udivmoddi4+0x248>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dae:	d22c      	bcs.n	8000e0a <__udivmoddi4+0x29a>
 8000db0:	4299      	cmp	r1, r3
 8000db2:	d92a      	bls.n	8000e0a <__udivmoddi4+0x29a>
 8000db4:	3802      	subs	r0, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dbe:	fb08 3311 	mls	r3, r8, r1, r3
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb01 f307 	mul.w	r3, r1, r7
 8000dcc:	42a3      	cmp	r3, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x272>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dd8:	d213      	bcs.n	8000e02 <__udivmoddi4+0x292>
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	d911      	bls.n	8000e02 <__udivmoddi4+0x292>
 8000dde:	3902      	subs	r1, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	1ae4      	subs	r4, r4, r3
 8000de4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000de8:	e73b      	b.n	8000c62 <__udivmoddi4+0xf2>
 8000dea:	4604      	mov	r4, r0
 8000dec:	e6f2      	b.n	8000bd4 <__udivmoddi4+0x64>
 8000dee:	4608      	mov	r0, r1
 8000df0:	e708      	b.n	8000c04 <__udivmoddi4+0x94>
 8000df2:	45c2      	cmp	sl, r8
 8000df4:	d2af      	bcs.n	8000d56 <__udivmoddi4+0x1e6>
 8000df6:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dfa:	eb63 060c 	sbc.w	r6, r3, ip
 8000dfe:	3801      	subs	r0, #1
 8000e00:	e7a9      	b.n	8000d56 <__udivmoddi4+0x1e6>
 8000e02:	4631      	mov	r1, r6
 8000e04:	e7ed      	b.n	8000de2 <__udivmoddi4+0x272>
 8000e06:	4603      	mov	r3, r0
 8000e08:	e79a      	b.n	8000d40 <__udivmoddi4+0x1d0>
 8000e0a:	4630      	mov	r0, r6
 8000e0c:	e7d4      	b.n	8000db8 <__udivmoddi4+0x248>
 8000e0e:	46b0      	mov	r8, r6
 8000e10:	e781      	b.n	8000d16 <__udivmoddi4+0x1a6>
 8000e12:	4463      	add	r3, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	e74f      	b.n	8000cb8 <__udivmoddi4+0x148>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	e711      	b.n	8000c44 <__udivmoddi4+0xd4>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	e732      	b.n	8000c8c <__udivmoddi4+0x11c>
 8000e26:	bf00      	nop

08000e28 <__aeabi_idiv0>:
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <spi_write_array>:
 * @param len length of the data array
 * @param data pointer to the data array
 */

static inline void spi_write_array(uint8_t len, uint8_t data[])
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi3, data, len, HAL_MAX_DELAY);
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e40:	6839      	ldr	r1, [r7, #0]
 8000e42:	4803      	ldr	r0, [pc, #12]	@ (8000e50 <spi_write_array+0x24>)
 8000e44:	f005 fa87 	bl	8006356 <HAL_SPI_Transmit>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000544 	.word	0x20000544

08000e54 <spi_write_read>:
 * @param tx_len length of the data array to be transmitted
 * @param rx_data pointer to the data array to be received
 * @param rx_len length of the data array to be received
 */
static inline void spi_write_read(uint8_t tx_Data[], uint8_t tx_len, uint8_t *rx_data, uint8_t rx_len)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	460b      	mov	r3, r1
 8000e62:	72fb      	strb	r3, [r7, #11]
 8000e64:	4613      	mov	r3, r2
 8000e66:	72bb      	strb	r3, [r7, #10]
  HAL_SPI_Transmit(&hspi3, tx_Data, tx_len, HAL_MAX_DELAY);
 8000e68:	7afb      	ldrb	r3, [r7, #11]
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e70:	68f9      	ldr	r1, [r7, #12]
 8000e72:	4807      	ldr	r0, [pc, #28]	@ (8000e90 <spi_write_read+0x3c>)
 8000e74:	f005 fa6f 	bl	8006356 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3, rx_data, rx_len, HAL_MAX_DELAY);
 8000e78:	7abb      	ldrb	r3, [r7, #10]
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	4803      	ldr	r0, [pc, #12]	@ (8000e90 <spi_write_read+0x3c>)
 8000e84:	f005 fbaa 	bl	80065dc <HAL_SPI_Receive>

}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000544 	.word	0x20000544

08000e94 <LTC6811_initialize>:
uint8_t wakeup = 0x00;

/*@brief Initializes all command variables
 */
void LTC6811_initialize()
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af02      	add	r7, sp, #8
  set_adc(MD_NORMAL, DCP_DISABLED, CELL_CH_ALL, AUX_CH_ALL, CHST_SC);
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	2002      	movs	r0, #2
 8000ea6:	f000 f81f 	bl	8000ee8 <set_adc>
  //set_selftest(MD_NORMAL, ST_1);
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <wakeup_idle>:

void wakeup_idle()
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eba:	4808      	ldr	r0, [pc, #32]	@ (8000edc <wakeup_idle+0x2c>)
 8000ebc:	f003 fb50 	bl	8004560 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4906      	ldr	r1, [pc, #24]	@ (8000ee0 <wakeup_idle+0x30>)
 8000ec6:	4807      	ldr	r0, [pc, #28]	@ (8000ee4 <wakeup_idle+0x34>)
 8000ec8:	f005 fa45 	bl	8006356 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ed2:	4802      	ldr	r0, [pc, #8]	@ (8000edc <wakeup_idle+0x2c>)
 8000ed4:	f003 fb44 	bl	8004560 <HAL_GPIO_WritePin>
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	2000039a 	.word	0x2000039a
 8000ee4:	20000544 	.word	0x20000544

08000ee8 <set_adc>:
			|-----------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|
			|ADCV:	    |   0   |   1   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CH[2] | CH[1] | CH[0] |
			|ADAX:	    |   1   |   0   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CHG[2]| CHG[1]| CHG[0]|
 ******************************************************************************************************************/
void set_adc(uint8_t MD, uint8_t DCP, uint8_t CH, uint8_t CHG, uint8_t CHST)
{
 8000ee8:	b490      	push	{r4, r7}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4604      	mov	r4, r0
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4623      	mov	r3, r4
 8000ef8:	71fb      	strb	r3, [r7, #7]
 8000efa:	4603      	mov	r3, r0
 8000efc:	71bb      	strb	r3, [r7, #6]
 8000efe:	460b      	mov	r3, r1
 8000f00:	717b      	strb	r3, [r7, #5]
 8000f02:	4613      	mov	r3, r2
 8000f04:	713b      	strb	r3, [r7, #4]
  uint8_t md_bits;

  md_bits = (MD & 0x02) >> 1;
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	105b      	asrs	r3, r3, #1
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]
  ADCV[0] = md_bits | 0x02;
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <set_adc+0x94>)
 8000f1c:	701a      	strb	r2, [r3, #0]
  md_bits = (MD & 0x01) << 7;
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	01db      	lsls	r3, r3, #7
 8000f22:	73fb      	strb	r3, [r7, #15]
  ADCV[1] = md_bits | 0x60 | (DCP << 4) | CH;
 8000f24:	79bb      	ldrb	r3, [r7, #6]
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	797b      	ldrb	r3, [r7, #5]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <set_adc+0x94>)
 8000f3e:	705a      	strb	r2, [r3, #1]

  md_bits = (MD & 0x02) >> 1;
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	105b      	asrs	r3, r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	73fb      	strb	r3, [r7, #15]
  ADAX[0] = md_bits | 0x04;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <set_adc+0x98>)
 8000f56:	701a      	strb	r2, [r3, #0]
  md_bits = (MD & 0x01) << 7;
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	01db      	lsls	r3, r3, #7
 8000f5c:	73fb      	strb	r3, [r7, #15]
  ADAX[1] = md_bits | 0x60 | CHG;
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	793b      	ldrb	r3, [r7, #4]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <set_adc+0x98>)
 8000f6e:	705a      	strb	r2, [r3, #1]
  md_bits = (MD & 0x02) >> 1;
  ADSTAT[0] = md_bits | 0x04;
  md_bits = (MD & 0x01) << 7;
  ADSTAT[1] = md_bits | 0x68 | CHST;
  */
}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc90      	pop	{r4, r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000394 	.word	0x20000394
 8000f80:	20000398 	.word	0x20000398

08000f84 <LTC6811_adcv>:
 | CH     | Determines which cell channels are converted |
 | DCP    | Determines if Discharge is Permitted	     |

***********************************************************************************************/
void LTC6811_adcv()
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;
	//1
	cmd[0] = ADCV[0];
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <LTC6811_adcv+0x74>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADCV[1];
 8000f90:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <LTC6811_adcv+0x74>)
 8000f92:	785b      	ldrb	r3, [r3, #1]
 8000f94:	707b      	strb	r3, [r7, #1]
	//2
	temp_pec = pec15_calc(2, ADCV);
 8000f96:	4918      	ldr	r1, [pc, #96]	@ (8000ff8 <LTC6811_adcv+0x74>)
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f000 fb09 	bl	80015b0 <pec15_calc>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	70fb      	strb	r3, [r7, #3]
	//3
	wakeup_idle();
 8000fb2:	f7ff ff7d 	bl	8000eb0 <wakeup_idle>
	//4
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fbc:	480f      	ldr	r0, [pc, #60]	@ (8000ffc <LTC6811_adcv+0x78>)
 8000fbe:	f003 facf 	bl	8004560 <HAL_GPIO_WritePin>
	spi_write_array(4, cmd);
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	2004      	movs	r0, #4
 8000fc8:	f7ff ff30 	bl	8000e2c <spi_write_array>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fd2:	480a      	ldr	r0, [pc, #40]	@ (8000ffc <LTC6811_adcv+0x78>)
 8000fd4:	f003 fac4 	bl	8004560 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000fd8:	2301      	movs	r3, #1
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4908      	ldr	r1, [pc, #32]	@ (8001000 <LTC6811_adcv+0x7c>)
 8000fde:	4809      	ldr	r0, [pc, #36]	@ (8001004 <LTC6811_adcv+0x80>)
 8000fe0:	f005 f9b9 	bl	8006356 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4905      	ldr	r1, [pc, #20]	@ (8001000 <LTC6811_adcv+0x7c>)
 8000fea:	4806      	ldr	r0, [pc, #24]	@ (8001004 <LTC6811_adcv+0x80>)
 8000fec:	f005 f9b3 	bl	8006356 <HAL_SPI_Transmit>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000394 	.word	0x20000394
 8000ffc:	40020000 	.word	0x40020000
 8001000:	2000039a 	.word	0x2000039a
 8001004:	20000544 	.word	0x20000544

08001008 <LTC6811_adax>:
 | MD     | Determines the filter corner of the ADC      |
 | CHG    | Determines which GPIO channels are converted |

*********************************************************************************************************/
void LTC6811_adax()
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;

	//1
	cmd[0] = ADAX[0];
 800100e:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <LTC6811_adax+0x74>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADAX[1];
 8001014:	4b19      	ldr	r3, [pc, #100]	@ (800107c <LTC6811_adax+0x74>)
 8001016:	785b      	ldrb	r3, [r3, #1]
 8001018:	707b      	strb	r3, [r7, #1]
	//2
	temp_pec = pec15_calc(2, ADAX);
 800101a:	4918      	ldr	r1, [pc, #96]	@ (800107c <LTC6811_adax+0x74>)
 800101c:	2002      	movs	r0, #2
 800101e:	f000 fac7 	bl	80015b0 <pec15_calc>
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	b29b      	uxth	r3, r3
 800102c:	b2db      	uxtb	r3, r3
 800102e:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	70fb      	strb	r3, [r7, #3]
	//3
	wakeup_idle();
 8001036:	f7ff ff3b 	bl	8000eb0 <wakeup_idle>
	//4
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001040:	480f      	ldr	r0, [pc, #60]	@ (8001080 <LTC6811_adax+0x78>)
 8001042:	f003 fa8d 	bl	8004560 <HAL_GPIO_WritePin>
	spi_write_array(4, cmd);
 8001046:	463b      	mov	r3, r7
 8001048:	4619      	mov	r1, r3
 800104a:	2004      	movs	r0, #4
 800104c:	f7ff feee 	bl	8000e2c <spi_write_array>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001056:	480a      	ldr	r0, [pc, #40]	@ (8001080 <LTC6811_adax+0x78>)
 8001058:	f003 fa82 	bl	8004560 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 800105c:	2301      	movs	r3, #1
 800105e:	2201      	movs	r2, #1
 8001060:	4908      	ldr	r1, [pc, #32]	@ (8001084 <LTC6811_adax+0x7c>)
 8001062:	4809      	ldr	r0, [pc, #36]	@ (8001088 <LTC6811_adax+0x80>)
 8001064:	f005 f977 	bl	8006356 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8001068:	2301      	movs	r3, #1
 800106a:	2201      	movs	r2, #1
 800106c:	4905      	ldr	r1, [pc, #20]	@ (8001084 <LTC6811_adax+0x7c>)
 800106e:	4806      	ldr	r0, [pc, #24]	@ (8001088 <LTC6811_adax+0x80>)
 8001070:	f005 f971 	bl	8006356 <HAL_SPI_Transmit>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000398 	.word	0x20000398
 8001080:	40020000 	.word	0x40020000
 8001084:	2000039a 	.word	0x2000039a
 8001088:	20000544 	.word	0x20000544

0800108c <LTC6811_wrcfg>:


void LTC6811_wrcfg(uint8_t nIC, uint8_t config [][6])

{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 8001098:	2306      	movs	r3, #6
 800109a:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * nIC);
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	3304      	adds	r3, #4
 80010a4:	74fb      	strb	r3, [r7, #19]

	uint16_t temp_pec;
	uint8_t current_ic;
	uint8_t WRCFG_index = 4;
 80010a6:	2304      	movs	r3, #4
 80010a8:	75bb      	strb	r3, [r7, #22]
	uint8_t *WRCFG;


	WRCFG = (uint8_t *)malloc(CMD_LEN * sizeof(uint8_t));
 80010aa:	7cfb      	ldrb	r3, [r7, #19]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f009 fe65 	bl	800ad7c <malloc>
 80010b2:	4603      	mov	r3, r0
 80010b4:	60fb      	str	r3, [r7, #12]

	for(current_ic = 0; current_ic < nIC; current_ic++)
 80010b6:	2300      	movs	r3, #0
 80010b8:	75fb      	strb	r3, [r7, #23]
 80010ba:	e03f      	b.n	800113c <LTC6811_wrcfg+0xb0>
	{
		for(uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80010bc:	2300      	movs	r3, #0
 80010be:	757b      	strb	r3, [r7, #21]
 80010c0:	e013      	b.n	80010ea <LTC6811_wrcfg+0x5e>
		{
			WRCFG[WRCFG_index] = config[current_ic][current_byte];
 80010c2:	7dfa      	ldrb	r2, [r7, #23]
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	461a      	mov	r2, r3
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	1899      	adds	r1, r3, r2
 80010d2:	7d7a      	ldrb	r2, [r7, #21]
 80010d4:	7dbb      	ldrb	r3, [r7, #22]
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	4403      	add	r3, r0
 80010da:	5c8a      	ldrb	r2, [r1, r2]
 80010dc:	701a      	strb	r2, [r3, #0]
			WRCFG_index++;
 80010de:	7dbb      	ldrb	r3, [r7, #22]
 80010e0:	3301      	adds	r3, #1
 80010e2:	75bb      	strb	r3, [r7, #22]
		for(uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80010e4:	7d7b      	ldrb	r3, [r7, #21]
 80010e6:	3301      	adds	r3, #1
 80010e8:	757b      	strb	r3, [r7, #21]
 80010ea:	7d7a      	ldrb	r2, [r7, #21]
 80010ec:	7d3b      	ldrb	r3, [r7, #20]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d3e7      	bcc.n	80010c2 <LTC6811_wrcfg+0x36>
		}

		temp_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic][0]);
 80010f2:	7dfa      	ldrb	r2, [r7, #23]
 80010f4:	4613      	mov	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	461a      	mov	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	4413      	add	r3, r2
 8001102:	461a      	mov	r2, r3
 8001104:	7d3b      	ldrb	r3, [r7, #20]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f000 fa51 	bl	80015b0 <pec15_calc>
 800110e:	4603      	mov	r3, r0
 8001110:	817b      	strh	r3, [r7, #10]
		WRCFG[WRCFG_index] = (uint8_t)(temp_pec >> 8);
 8001112:	897b      	ldrh	r3, [r7, #10]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	b299      	uxth	r1, r3
 8001118:	7dbb      	ldrb	r3, [r7, #22]
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	4413      	add	r3, r2
 800111e:	b2ca      	uxtb	r2, r1
 8001120:	701a      	strb	r2, [r3, #0]
		WRCFG[WRCFG_index + 1] = (uint8_t)temp_pec;
 8001122:	7dbb      	ldrb	r3, [r7, #22]
 8001124:	3301      	adds	r3, #1
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	4413      	add	r3, r2
 800112a:	897a      	ldrh	r2, [r7, #10]
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
		WRCFG_index += 2;
 8001130:	7dbb      	ldrb	r3, [r7, #22]
 8001132:	3302      	adds	r3, #2
 8001134:	75bb      	strb	r3, [r7, #22]
	for(current_ic = 0; current_ic < nIC; current_ic++)
 8001136:	7dfb      	ldrb	r3, [r7, #23]
 8001138:	3301      	adds	r3, #1
 800113a:	75fb      	strb	r3, [r7, #23]
 800113c:	7dfa      	ldrb	r2, [r7, #23]
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	429a      	cmp	r2, r3
 8001142:	d3bb      	bcc.n	80010bc <LTC6811_wrcfg+0x30>
	}

	wakeup_idle();
 8001144:	f7ff feb4 	bl	8000eb0 <wakeup_idle>

	for(current_ic = 0; current_ic < nIC; current_ic++)
 8001148:	2300      	movs	r3, #0
 800114a:	75fb      	strb	r3, [r7, #23]
 800114c:	e045      	b.n	80011da <LTC6811_wrcfg+0x14e>
	{
	    WRCFG[0] = 0x80 + (current_ic << 3); //Setting address
 800114e:	7dfb      	ldrb	r3, [r7, #23]
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	3b80      	subs	r3, #128	@ 0x80
 8001156:	b2da      	uxtb	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	701a      	strb	r2, [r3, #0]
	    WRCFG[1] = 0x01;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3301      	adds	r3, #1
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
	    temp_pec = pec15_calc(2, WRCFG);
 8001164:	68f9      	ldr	r1, [r7, #12]
 8001166:	2002      	movs	r0, #2
 8001168:	f000 fa22 	bl	80015b0 <pec15_calc>
 800116c:	4603      	mov	r3, r0
 800116e:	817b      	strh	r3, [r7, #10]
	    WRCFG[2] = (uint8_t)(temp_pec >> 8);
 8001170:	897b      	ldrh	r3, [r7, #10]
 8001172:	0a1b      	lsrs	r3, r3, #8
 8001174:	b29a      	uxth	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	3302      	adds	r3, #2
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	701a      	strb	r2, [r3, #0]
	    WRCFG[3] = (uint8_t)(temp_pec);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	3303      	adds	r3, #3
 8001182:	897a      	ldrh	r2, [r7, #10]
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800118e:	4818      	ldr	r0, [pc, #96]	@ (80011f0 <LTC6811_wrcfg+0x164>)
 8001190:	f003 f9e6 	bl	8004560 <HAL_GPIO_WritePin>
		spi_write_array(4, WRCFG);
 8001194:	68f9      	ldr	r1, [r7, #12]
 8001196:	2004      	movs	r0, #4
 8001198:	f7ff fe48 	bl	8000e2c <spi_write_array>
		spi_write_array(8, &WRCFG[4 + (8 * current_ic)]);
 800119c:	7dfb      	ldrb	r3, [r7, #23]
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	3304      	adds	r3, #4
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	2008      	movs	r0, #8
 80011ac:	f7ff fe3e 	bl	8000e2c <spi_write_array>
		HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011b6:	480e      	ldr	r0, [pc, #56]	@ (80011f0 <LTC6811_wrcfg+0x164>)
 80011b8:	f003 f9d2 	bl	8004560 <HAL_GPIO_WritePin>


		HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 80011bc:	2301      	movs	r3, #1
 80011be:	2201      	movs	r2, #1
 80011c0:	490c      	ldr	r1, [pc, #48]	@ (80011f4 <LTC6811_wrcfg+0x168>)
 80011c2:	480d      	ldr	r0, [pc, #52]	@ (80011f8 <LTC6811_wrcfg+0x16c>)
 80011c4:	f005 f8c7 	bl	8006356 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 80011c8:	2301      	movs	r3, #1
 80011ca:	2201      	movs	r2, #1
 80011cc:	4909      	ldr	r1, [pc, #36]	@ (80011f4 <LTC6811_wrcfg+0x168>)
 80011ce:	480a      	ldr	r0, [pc, #40]	@ (80011f8 <LTC6811_wrcfg+0x16c>)
 80011d0:	f005 f8c1 	bl	8006356 <HAL_SPI_Transmit>
	for(current_ic = 0; current_ic < nIC; current_ic++)
 80011d4:	7dfb      	ldrb	r3, [r7, #23]
 80011d6:	3301      	adds	r3, #1
 80011d8:	75fb      	strb	r3, [r7, #23]
 80011da:	7dfa      	ldrb	r2, [r7, #23]
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d3b5      	bcc.n	800114e <LTC6811_wrcfg+0xc2>

	}

	free(WRCFG);
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f009 fdd2 	bl	800ad8c <free>
}
 80011e8:	bf00      	nop
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40020000 	.word	0x40020000
 80011f4:	2000039a 	.word	0x2000039a
 80011f8:	20000544 	.word	0x20000544

080011fc <LTC6811_rdcv>:
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
}
*/

uint8_t LTC6811_rdcv(uint8_t reg, uint8_t nIC, uint16_t cell_codes[][12])
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	603a      	str	r2, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
 8001208:	460b      	mov	r3, r1
 800120a:	71bb      	strb	r3, [r7, #6]
	const uint8_t NUM_RX_BYT = 8;
 800120c:	2308      	movs	r3, #8
 800120e:	76bb      	strb	r3, [r7, #26]
	const uint8_t BYT_IN_REG = 6;
 8001210:	2306      	movs	r3, #6
 8001212:	767b      	strb	r3, [r7, #25]
	const uint8_t CELL_IN_REG = 3;
 8001214:	2303      	movs	r3, #3
 8001216:	763b      	strb	r3, [r7, #24]

	uint8_t pec_error = 0; //pec Error wenn -1
 8001218:	2300      	movs	r3, #0
 800121a:	77fb      	strb	r3, [r7, #31]
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	77bb      	strb	r3, [r7, #30]
	uint8_t *cell_data;
	cell_data = (uint8_t *)malloc((NUM_RX_BYT * nIC) * sizeof(uint8_t));
 8001220:	7ebb      	ldrb	r3, [r7, #26]
 8001222:	79ba      	ldrb	r2, [r7, #6]
 8001224:	fb02 f303 	mul.w	r3, r2, r3
 8001228:	4618      	mov	r0, r3
 800122a:	f009 fda7 	bl	800ad7c <malloc>
 800122e:	4603      	mov	r3, r0
 8001230:	617b      	str	r3, [r7, #20]

	for(uint8_t cell_reg = 1; cell_reg < 5; cell_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001232:	2301      	movs	r3, #1
 8001234:	777b      	strb	r3, [r7, #29]
 8001236:	e066      	b.n	8001306 <LTC6811_rdcv+0x10a>
	{
		data_counter = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	77bb      	strb	r3, [r7, #30]
		LTC6811_rdcv_reg(cell_reg, nIC, cell_data);
 800123c:	79b9      	ldrb	r1, [r7, #6]
 800123e:	7f7b      	ldrb	r3, [r7, #29]
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f86a 	bl	800131c <LTC6811_rdcv_reg>

		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 8001248:	2300      	movs	r3, #0
 800124a:	773b      	strb	r3, [r7, #28]
 800124c:	e054      	b.n	80012f8 <LTC6811_rdcv+0xfc>
		{
			 // current_ic is used as an IC counter
			for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 800124e:	2300      	movs	r3, #0
 8001250:	76fb      	strb	r3, [r7, #27]
 8001252:	e026      	b.n	80012a2 <LTC6811_rdcv+0xa6>
			{
				uint16_t parsed_cell = cell_data[data_counter] | (cell_data[data_counter + 1] << 8);
 8001254:	7fbb      	ldrb	r3, [r7, #30]
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	4413      	add	r3, r2
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b21a      	sxth	r2, r3
 800125e:	7fbb      	ldrb	r3, [r7, #30]
 8001260:	3301      	adds	r3, #1
 8001262:	6979      	ldr	r1, [r7, #20]
 8001264:	440b      	add	r3, r1
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	021b      	lsls	r3, r3, #8
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21b      	sxth	r3, r3
 8001270:	81fb      	strh	r3, [r7, #14]
				cell_codes[current_ic][current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8001272:	7f3a      	ldrb	r2, [r7, #28]
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	461a      	mov	r2, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	4413      	add	r3, r2
 8001282:	7ef9      	ldrb	r1, [r7, #27]
 8001284:	7f7a      	ldrb	r2, [r7, #29]
 8001286:	3a01      	subs	r2, #1
 8001288:	7e38      	ldrb	r0, [r7, #24]
 800128a:	fb00 f202 	mul.w	r2, r0, r2
 800128e:	440a      	add	r2, r1
 8001290:	89f9      	ldrh	r1, [r7, #14]
 8001292:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter = data_counter + 2;
 8001296:	7fbb      	ldrb	r3, [r7, #30]
 8001298:	3302      	adds	r3, #2
 800129a:	77bb      	strb	r3, [r7, #30]
			for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 800129c:	7efb      	ldrb	r3, [r7, #27]
 800129e:	3301      	adds	r3, #1
 80012a0:	76fb      	strb	r3, [r7, #27]
 80012a2:	7efa      	ldrb	r2, [r7, #27]
 80012a4:	7e3b      	ldrb	r3, [r7, #24]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d3d4      	bcc.n	8001254 <LTC6811_rdcv+0x58>
			}
			received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter + 1];
 80012aa:	7fbb      	ldrb	r3, [r7, #30]
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	4413      	add	r3, r2
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	7fba      	ldrb	r2, [r7, #30]
 80012b8:	3201      	adds	r2, #1
 80012ba:	6979      	ldr	r1, [r7, #20]
 80012bc:	440a      	add	r2, r1
 80012be:	7812      	ldrb	r2, [r2, #0]
 80012c0:	4413      	add	r3, r2
 80012c2:	827b      	strh	r3, [r7, #18]
			data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 80012c4:	7f3b      	ldrb	r3, [r7, #28]
 80012c6:	7eba      	ldrb	r2, [r7, #26]
 80012c8:	fb02 f303 	mul.w	r3, r2, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	441a      	add	r2, r3
 80012d2:	7e7b      	ldrb	r3, [r7, #25]
 80012d4:	4611      	mov	r1, r2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f96a 	bl	80015b0 <pec15_calc>
 80012dc:	4603      	mov	r3, r0
 80012de:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 80012e0:	8a7a      	ldrh	r2, [r7, #18]
 80012e2:	8a3b      	ldrh	r3, [r7, #16]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d001      	beq.n	80012ec <LTC6811_rdcv+0xf0>
			{
			  pec_error = -1;
 80012e8:	23ff      	movs	r3, #255	@ 0xff
 80012ea:	77fb      	strb	r3, [r7, #31]
			}
			data_counter = data_counter + 2;
 80012ec:	7fbb      	ldrb	r3, [r7, #30]
 80012ee:	3302      	adds	r3, #2
 80012f0:	77bb      	strb	r3, [r7, #30]
		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 80012f2:	7f3b      	ldrb	r3, [r7, #28]
 80012f4:	3301      	adds	r3, #1
 80012f6:	773b      	strb	r3, [r7, #28]
 80012f8:	7f3a      	ldrb	r2, [r7, #28]
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d3a6      	bcc.n	800124e <LTC6811_rdcv+0x52>
	for(uint8_t cell_reg = 1; cell_reg < 5; cell_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001300:	7f7b      	ldrb	r3, [r7, #29]
 8001302:	3301      	adds	r3, #1
 8001304:	777b      	strb	r3, [r7, #29]
 8001306:	7f7b      	ldrb	r3, [r7, #29]
 8001308:	2b04      	cmp	r3, #4
 800130a:	d995      	bls.n	8001238 <LTC6811_rdcv+0x3c>
		}
	}

	free(cell_data);
 800130c:	6978      	ldr	r0, [r7, #20]
 800130e:	f009 fd3d 	bl	800ad8c <free>
	return(pec_error);
 8001312:	7ffb      	ldrb	r3, [r7, #31]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3720      	adds	r7, #32
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <LTC6811_rdcv_reg>:

void LTC6811_rdcv_reg(uint8_t reg, uint8_t nIC, uint8_t *data)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	603a      	str	r2, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
 8001328:	460b      	mov	r3, r1
 800132a:	71bb      	strb	r3, [r7, #6]
	uint8_t RDCV[4];
	uint16_t temp_pec;

	switch(reg){
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	3b01      	subs	r3, #1
 8001330:	2b03      	cmp	r3, #3
 8001332:	d817      	bhi.n	8001364 <LTC6811_rdcv_reg+0x48>
 8001334:	a201      	add	r2, pc, #4	@ (adr r2, 800133c <LTC6811_rdcv_reg+0x20>)
 8001336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133a:	bf00      	nop
 800133c:	0800134d 	.word	0x0800134d
 8001340:	08001353 	.word	0x08001353
 8001344:	08001359 	.word	0x08001359
 8001348:	0800135f 	.word	0x0800135f
		case 1: RDCV[1] = 0x04; break;
 800134c:	2304      	movs	r3, #4
 800134e:	727b      	strb	r3, [r7, #9]
 8001350:	e008      	b.n	8001364 <LTC6811_rdcv_reg+0x48>
		case 2: RDCV[1] = 0x06; break;
 8001352:	2306      	movs	r3, #6
 8001354:	727b      	strb	r3, [r7, #9]
 8001356:	e005      	b.n	8001364 <LTC6811_rdcv_reg+0x48>
		case 3: RDCV[1] = 0x08; break;
 8001358:	2308      	movs	r3, #8
 800135a:	727b      	strb	r3, [r7, #9]
 800135c:	e002      	b.n	8001364 <LTC6811_rdcv_reg+0x48>
		case 4: RDCV[1] = 0x0a; break;
 800135e:	230a      	movs	r3, #10
 8001360:	727b      	strb	r3, [r7, #9]
 8001362:	bf00      	nop
	}

	wakeup_idle();
 8001364:	f7ff fda4 	bl	8000eb0 <wakeup_idle>

    //Register A-D = reg 1-4
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	e02f      	b.n	80013ce <LTC6811_rdcv_reg+0xb2>
    {
    	RDCV[0] = 0x80 + (current_ic << 3);
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	b2db      	uxtb	r3, r3
 8001374:	3b80      	subs	r3, #128	@ 0x80
 8001376:	b2db      	uxtb	r3, r3
 8001378:	723b      	strb	r3, [r7, #8]
        temp_pec = pec15_calc(2, RDCV);
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	4619      	mov	r1, r3
 8001380:	2002      	movs	r0, #2
 8001382:	f000 f915 	bl	80015b0 <pec15_calc>
 8001386:	4603      	mov	r3, r0
 8001388:	81bb      	strh	r3, [r7, #12]
        RDCV[2] = (uint8_t)(temp_pec >> 8);
 800138a:	89bb      	ldrh	r3, [r7, #12]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	b29b      	uxth	r3, r3
 8001390:	b2db      	uxtb	r3, r3
 8001392:	72bb      	strb	r3, [r7, #10]
        RDCV[3] = (uint8_t)(temp_pec);
 8001394:	89bb      	ldrh	r3, [r7, #12]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013a0:	480f      	ldr	r0, [pc, #60]	@ (80013e0 <LTC6811_rdcv_reg+0xc4>)
 80013a2:	f003 f8dd 	bl	8004560 <HAL_GPIO_WritePin>
        spi_write_read(RDCV, 4, &data[current_ic * 8], 8);
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	461a      	mov	r2, r3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	441a      	add	r2, r3
 80013b0:	f107 0008 	add.w	r0, r7, #8
 80013b4:	2308      	movs	r3, #8
 80013b6:	2104      	movs	r1, #4
 80013b8:	f7ff fd4c 	bl	8000e54 <spi_write_read>
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013c2:	4807      	ldr	r0, [pc, #28]	@ (80013e0 <LTC6811_rdcv_reg+0xc4>)
 80013c4:	f003 f8cc 	bl	8004560 <HAL_GPIO_WritePin>
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	3301      	adds	r3, #1
 80013cc:	73fb      	strb	r3, [r7, #15]
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	79bb      	ldrb	r3, [r7, #6]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d3cb      	bcc.n	800136e <LTC6811_rdcv_reg+0x52>
    }
}
 80013d6:	bf00      	nop
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40020000 	.word	0x40020000

080013e4 <LTC6811_rdaux>:

int8_t LTC6811_rdaux(uint8_t reg, uint8_t nIC, uint16_t aux_codes[][6])
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	603a      	str	r2, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
 80013f0:	460b      	mov	r3, r1
 80013f2:	71bb      	strb	r3, [r7, #6]
	const uint8_t NUM_RX_BYT = 8;
 80013f4:	2308      	movs	r3, #8
 80013f6:	76bb      	strb	r3, [r7, #26]
	const uint8_t BYT_IN_REG = 6;
 80013f8:	2306      	movs	r3, #6
 80013fa:	767b      	strb	r3, [r7, #25]
	const uint8_t AUX_IN_REG = 3;
 80013fc:	2303      	movs	r3, #3
 80013fe:	763b      	strb	r3, [r7, #24]

	uint8_t pec_error = 0; //pec Error wenn -1
 8001400:	2300      	movs	r3, #0
 8001402:	77fb      	strb	r3, [r7, #31]
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	77bb      	strb	r3, [r7, #30]
	uint8_t *aux_data;

	aux_data = (uint8_t *)malloc((NUM_RX_BYT * nIC) * sizeof(uint8_t));
 8001408:	7ebb      	ldrb	r3, [r7, #26]
 800140a:	79ba      	ldrb	r2, [r7, #6]
 800140c:	fb02 f303 	mul.w	r3, r2, r3
 8001410:	4618      	mov	r0, r3
 8001412:	f009 fcb3 	bl	800ad7c <malloc>
 8001416:	4603      	mov	r3, r0
 8001418:	617b      	str	r3, [r7, #20]

	for(uint8_t aux_reg = 1; aux_reg < AUX_IN_REG; aux_reg++)	//executes once for each of the LTC6804 cell voltage registers
 800141a:	2301      	movs	r3, #1
 800141c:	777b      	strb	r3, [r7, #29]
 800141e:	e066      	b.n	80014ee <LTC6811_rdaux+0x10a>
	{
		data_counter = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	77bb      	strb	r3, [r7, #30]
		LTC6811_rdaux_reg(aux_reg, nIC, aux_data);
 8001424:	79b9      	ldrb	r1, [r7, #6]
 8001426:	7f7b      	ldrb	r3, [r7, #29]
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f86c 	bl	8001508 <LTC6811_rdaux_reg>

		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 8001430:	2300      	movs	r3, #0
 8001432:	773b      	strb	r3, [r7, #28]
 8001434:	e054      	b.n	80014e0 <LTC6811_rdaux+0xfc>
		{
			 // current_ic is used as an IC counter
			for(uint8_t current_cell = 0; current_cell < AUX_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 8001436:	2300      	movs	r3, #0
 8001438:	76fb      	strb	r3, [r7, #27]
 800143a:	e026      	b.n	800148a <LTC6811_rdaux+0xa6>
			{
				uint16_t parsed_cell = aux_data[data_counter] | (aux_data[data_counter + 1] << 8);
 800143c:	7fbb      	ldrb	r3, [r7, #30]
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	4413      	add	r3, r2
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b21a      	sxth	r2, r3
 8001446:	7fbb      	ldrb	r3, [r7, #30]
 8001448:	3301      	adds	r3, #1
 800144a:	6979      	ldr	r1, [r7, #20]
 800144c:	440b      	add	r3, r1
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	b21b      	sxth	r3, r3
 8001454:	4313      	orrs	r3, r2
 8001456:	b21b      	sxth	r3, r3
 8001458:	81fb      	strh	r3, [r7, #14]
				aux_codes[current_ic][current_cell + ((aux_reg - 1) * AUX_IN_REG)] = parsed_cell;
 800145a:	7f3a      	ldrb	r2, [r7, #28]
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	461a      	mov	r2, r3
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	4413      	add	r3, r2
 800146a:	7ef9      	ldrb	r1, [r7, #27]
 800146c:	7f7a      	ldrb	r2, [r7, #29]
 800146e:	3a01      	subs	r2, #1
 8001470:	7e38      	ldrb	r0, [r7, #24]
 8001472:	fb00 f202 	mul.w	r2, r0, r2
 8001476:	440a      	add	r2, r1
 8001478:	89f9      	ldrh	r1, [r7, #14]
 800147a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter += 2;
 800147e:	7fbb      	ldrb	r3, [r7, #30]
 8001480:	3302      	adds	r3, #2
 8001482:	77bb      	strb	r3, [r7, #30]
			for(uint8_t current_cell = 0; current_cell < AUX_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 8001484:	7efb      	ldrb	r3, [r7, #27]
 8001486:	3301      	adds	r3, #1
 8001488:	76fb      	strb	r3, [r7, #27]
 800148a:	7efa      	ldrb	r2, [r7, #27]
 800148c:	7e3b      	ldrb	r3, [r7, #24]
 800148e:	429a      	cmp	r2, r3
 8001490:	d3d4      	bcc.n	800143c <LTC6811_rdaux+0x58>
			}
			received_pec = (aux_data[data_counter] << 8) + aux_data[data_counter + 1];
 8001492:	7fbb      	ldrb	r3, [r7, #30]
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	4413      	add	r3, r2
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	021b      	lsls	r3, r3, #8
 800149c:	b29b      	uxth	r3, r3
 800149e:	7fba      	ldrb	r2, [r7, #30]
 80014a0:	3201      	adds	r2, #1
 80014a2:	6979      	ldr	r1, [r7, #20]
 80014a4:	440a      	add	r2, r1
 80014a6:	7812      	ldrb	r2, [r2, #0]
 80014a8:	4413      	add	r3, r2
 80014aa:	827b      	strh	r3, [r7, #18]
			data_pec = pec15_calc(BYT_IN_REG, &aux_data[current_ic * NUM_RX_BYT]);
 80014ac:	7f3b      	ldrb	r3, [r7, #28]
 80014ae:	7eba      	ldrb	r2, [r7, #26]
 80014b0:	fb02 f303 	mul.w	r3, r2, r3
 80014b4:	461a      	mov	r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	441a      	add	r2, r3
 80014ba:	7e7b      	ldrb	r3, [r7, #25]
 80014bc:	4611      	mov	r1, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f876 	bl	80015b0 <pec15_calc>
 80014c4:	4603      	mov	r3, r0
 80014c6:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 80014c8:	8a7a      	ldrh	r2, [r7, #18]
 80014ca:	8a3b      	ldrh	r3, [r7, #16]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d001      	beq.n	80014d4 <LTC6811_rdaux+0xf0>
			{
			  pec_error = -1;
 80014d0:	23ff      	movs	r3, #255	@ 0xff
 80014d2:	77fb      	strb	r3, [r7, #31]
			}
			data_counter += 2;
 80014d4:	7fbb      	ldrb	r3, [r7, #30]
 80014d6:	3302      	adds	r3, #2
 80014d8:	77bb      	strb	r3, [r7, #30]
		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 80014da:	7f3b      	ldrb	r3, [r7, #28]
 80014dc:	3301      	adds	r3, #1
 80014de:	773b      	strb	r3, [r7, #28]
 80014e0:	7f3a      	ldrb	r2, [r7, #28]
 80014e2:	79bb      	ldrb	r3, [r7, #6]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d3a6      	bcc.n	8001436 <LTC6811_rdaux+0x52>
	for(uint8_t aux_reg = 1; aux_reg < AUX_IN_REG; aux_reg++)	//executes once for each of the LTC6804 cell voltage registers
 80014e8:	7f7b      	ldrb	r3, [r7, #29]
 80014ea:	3301      	adds	r3, #1
 80014ec:	777b      	strb	r3, [r7, #29]
 80014ee:	7f7a      	ldrb	r2, [r7, #29]
 80014f0:	7e3b      	ldrb	r3, [r7, #24]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d394      	bcc.n	8001420 <LTC6811_rdaux+0x3c>
		}
	}

	free(aux_data);
 80014f6:	6978      	ldr	r0, [r7, #20]
 80014f8:	f009 fc48 	bl	800ad8c <free>
	return(pec_error);
 80014fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3720      	adds	r7, #32
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <LTC6811_rdaux_reg>:

void LTC6811_rdaux_reg(uint8_t reg, uint8_t nIC, uint8_t *data)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	603a      	str	r2, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
 8001514:	460b      	mov	r3, r1
 8001516:	71bb      	strb	r3, [r7, #6]
	uint8_t RDAUX[4];
	uint16_t temp_pec;

	switch(reg){
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d002      	beq.n	8001524 <LTC6811_rdaux_reg+0x1c>
 800151e:	2b02      	cmp	r3, #2
 8001520:	d003      	beq.n	800152a <LTC6811_rdaux_reg+0x22>
 8001522:	e005      	b.n	8001530 <LTC6811_rdaux_reg+0x28>
		case 1: RDAUX[1] = 0xC; break;
 8001524:	230c      	movs	r3, #12
 8001526:	727b      	strb	r3, [r7, #9]
 8001528:	e002      	b.n	8001530 <LTC6811_rdaux_reg+0x28>
		case 2: RDAUX[1] = 0xE; break;
 800152a:	230e      	movs	r3, #14
 800152c:	727b      	strb	r3, [r7, #9]
 800152e:	bf00      	nop
	}

	wakeup_idle();
 8001530:	f7ff fcbe 	bl	8000eb0 <wakeup_idle>

    //Register A-D = reg 1-4
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 8001534:	2300      	movs	r3, #0
 8001536:	73fb      	strb	r3, [r7, #15]
 8001538:	e02f      	b.n	800159a <LTC6811_rdaux_reg+0x92>
    {
    	RDAUX[0] = 0x80 + (current_ic << 3);
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	b2db      	uxtb	r3, r3
 8001540:	3b80      	subs	r3, #128	@ 0x80
 8001542:	b2db      	uxtb	r3, r3
 8001544:	723b      	strb	r3, [r7, #8]
        temp_pec = pec15_calc(2, RDAUX);
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	4619      	mov	r1, r3
 800154c:	2002      	movs	r0, #2
 800154e:	f000 f82f 	bl	80015b0 <pec15_calc>
 8001552:	4603      	mov	r3, r0
 8001554:	81bb      	strh	r3, [r7, #12]
        RDAUX[2] = (uint8_t)(temp_pec >> 8);
 8001556:	89bb      	ldrh	r3, [r7, #12]
 8001558:	0a1b      	lsrs	r3, r3, #8
 800155a:	b29b      	uxth	r3, r3
 800155c:	b2db      	uxtb	r3, r3
 800155e:	72bb      	strb	r3, [r7, #10]
        RDAUX[3] = (uint8_t)(temp_pec);
 8001560:	89bb      	ldrh	r3, [r7, #12]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800156c:	480f      	ldr	r0, [pc, #60]	@ (80015ac <LTC6811_rdaux_reg+0xa4>)
 800156e:	f002 fff7 	bl	8004560 <HAL_GPIO_WritePin>
        spi_write_read(RDAUX, 4, &data[current_ic * 8], 8);
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	461a      	mov	r2, r3
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	441a      	add	r2, r3
 800157c:	f107 0008 	add.w	r0, r7, #8
 8001580:	2308      	movs	r3, #8
 8001582:	2104      	movs	r1, #4
 8001584:	f7ff fc66 	bl	8000e54 <spi_write_read>
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800158e:	4807      	ldr	r0, [pc, #28]	@ (80015ac <LTC6811_rdaux_reg+0xa4>)
 8001590:	f002 ffe6 	bl	8004560 <HAL_GPIO_WritePin>
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	3301      	adds	r3, #1
 8001598:	73fb      	strb	r3, [r7, #15]
 800159a:	7bfa      	ldrb	r2, [r7, #15]
 800159c:	79bb      	ldrb	r3, [r7, #6]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d3cb      	bcc.n	800153a <LTC6811_rdaux_reg+0x32>
    }
}
 80015a2:	bf00      	nop
 80015a4:	bf00      	nop
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40020000 	.word	0x40020000

080015b0 <pec15_calc>:
}
*/

//char *data uint8_t *data , uint8_t len
uint16_t pec15_calc(uint8_t len, uint8_t *data)
 {
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	6039      	str	r1, [r7, #0]
 80015ba:	71fb      	strb	r3, [r7, #7]
 uint16_t remainder, address;

 remainder = 16;//PEC seed
 80015bc:	2310      	movs	r3, #16
 80015be:	82fb      	strh	r3, [r7, #22]
 for (int i = 0; i < len; i++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	e017      	b.n	80015f6 <pec15_calc+0x46>
 {
 address = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 80015c6:	8afb      	ldrh	r3, [r7, #22]
 80015c8:	09db      	lsrs	r3, r3, #7
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	6839      	ldr	r1, [r7, #0]
 80015d0:	440a      	add	r2, r1
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	4053      	eors	r3, r2
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	81fb      	strh	r3, [r7, #14]
 remainder = (remainder << 8 ) ^ pec15Table[address];
 80015dc:	8afb      	ldrh	r3, [r7, #22]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	89fb      	ldrh	r3, [r7, #14]
 80015e4:	490a      	ldr	r1, [pc, #40]	@ (8001610 <pec15_calc+0x60>)
 80015e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	4053      	eors	r3, r2
 80015ee:	82fb      	strh	r3, [r7, #22]
 for (int i = 0; i < len; i++)
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	3301      	adds	r3, #1
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	dbe3      	blt.n	80015c6 <pec15_calc+0x16>
 }
 return (remainder*2);//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 80015fe:	8afb      	ldrh	r3, [r7, #22]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	b29b      	uxth	r3, r3
 }
 8001604:	4618      	mov	r0, r3
 8001606:	371c      	adds	r7, #28
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	0800dae4 	.word	0x0800dae4

08001614 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800161a:	463b      	mov	r3, r7
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001626:	4b21      	ldr	r3, [pc, #132]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001628:	4a21      	ldr	r2, [pc, #132]	@ (80016b0 <MX_ADC1_Init+0x9c>)
 800162a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800162c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ac <MX_ADC1_Init+0x98>)
 800162e:	2200      	movs	r2, #0
 8001630:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001632:	4b1e      	ldr	r3, [pc, #120]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001638:	4b1c      	ldr	r3, [pc, #112]	@ (80016ac <MX_ADC1_Init+0x98>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800163e:	4b1b      	ldr	r3, [pc, #108]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001640:	2200      	movs	r2, #0
 8001642:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001644:	4b19      	ldr	r3, [pc, #100]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800164c:	4b17      	ldr	r3, [pc, #92]	@ (80016ac <MX_ADC1_Init+0x98>)
 800164e:	2200      	movs	r2, #0
 8001650:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001652:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001654:	4a17      	ldr	r2, [pc, #92]	@ (80016b4 <MX_ADC1_Init+0xa0>)
 8001656:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001658:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <MX_ADC1_Init+0x98>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800165e:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001660:	2201      	movs	r2, #1
 8001662:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001664:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800166c:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <MX_ADC1_Init+0x98>)
 800166e:	2201      	movs	r2, #1
 8001670:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001672:	480e      	ldr	r0, [pc, #56]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001674:	f001 fb74 	bl	8002d60 <HAL_ADC_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800167e:	f001 f870 	bl	8002762 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001682:	230a      	movs	r3, #10
 8001684:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001686:	2301      	movs	r3, #1
 8001688:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800168e:	463b      	mov	r3, r7
 8001690:	4619      	mov	r1, r3
 8001692:	4806      	ldr	r0, [pc, #24]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001694:	f001 fd1a 	bl	80030cc <HAL_ADC_ConfigChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800169e:	f001 f860 	bl	8002762 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	2000039c 	.word	0x2000039c
 80016b0:	40012000 	.word	0x40012000
 80016b4:	0f000001 	.word	0x0f000001

080016b8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016be:	463b      	mov	r3, r7
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80016ca:	4b21      	ldr	r3, [pc, #132]	@ (8001750 <MX_ADC2_Init+0x98>)
 80016cc:	4a21      	ldr	r2, [pc, #132]	@ (8001754 <MX_ADC2_Init+0x9c>)
 80016ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001750 <MX_ADC2_Init+0x98>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <MX_ADC2_Init+0x98>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80016dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001750 <MX_ADC2_Init+0x98>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80016e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001750 <MX_ADC2_Init+0x98>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80016e8:	4b19      	ldr	r3, [pc, #100]	@ (8001750 <MX_ADC2_Init+0x98>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016f0:	4b17      	ldr	r3, [pc, #92]	@ (8001750 <MX_ADC2_Init+0x98>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016f6:	4b16      	ldr	r3, [pc, #88]	@ (8001750 <MX_ADC2_Init+0x98>)
 80016f8:	4a17      	ldr	r2, [pc, #92]	@ (8001758 <MX_ADC2_Init+0xa0>)
 80016fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016fc:	4b14      	ldr	r3, [pc, #80]	@ (8001750 <MX_ADC2_Init+0x98>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001702:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <MX_ADC2_Init+0x98>)
 8001704:	2201      	movs	r2, #1
 8001706:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001708:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <MX_ADC2_Init+0x98>)
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001710:	4b0f      	ldr	r3, [pc, #60]	@ (8001750 <MX_ADC2_Init+0x98>)
 8001712:	2201      	movs	r2, #1
 8001714:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001716:	480e      	ldr	r0, [pc, #56]	@ (8001750 <MX_ADC2_Init+0x98>)
 8001718:	f001 fb22 	bl	8002d60 <HAL_ADC_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001722:	f001 f81e 	bl	8002762 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001726:	230b      	movs	r3, #11
 8001728:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800172a:	2301      	movs	r3, #1
 800172c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001732:	463b      	mov	r3, r7
 8001734:	4619      	mov	r1, r3
 8001736:	4806      	ldr	r0, [pc, #24]	@ (8001750 <MX_ADC2_Init+0x98>)
 8001738:	f001 fcc8 	bl	80030cc <HAL_ADC_ConfigChannel>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001742:	f001 f80e 	bl	8002762 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200003e4 	.word	0x200003e4
 8001754:	40012100 	.word	0x40012100
 8001758:	0f000001 	.word	0x0f000001

0800175c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08c      	sub	sp, #48	@ 0x30
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a2e      	ldr	r2, [pc, #184]	@ (8001834 <HAL_ADC_MspInit+0xd8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d128      	bne.n	80017d0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	4b2d      	ldr	r3, [pc, #180]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001786:	4a2c      	ldr	r2, [pc, #176]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 8001788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800178c:	6453      	str	r3, [r2, #68]	@ 0x44
 800178e:	4b2a      	ldr	r3, [pc, #168]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	4b26      	ldr	r3, [pc, #152]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	4a25      	ldr	r2, [pc, #148]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017aa:	4b23      	ldr	r3, [pc, #140]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017b6:	2301      	movs	r3, #1
 80017b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ba:	2303      	movs	r3, #3
 80017bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	4619      	mov	r1, r3
 80017c8:	481c      	ldr	r0, [pc, #112]	@ (800183c <HAL_ADC_MspInit+0xe0>)
 80017ca:	f002 fd2b 	bl	8004224 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80017ce:	e02c      	b.n	800182a <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001840 <HAL_ADC_MspInit+0xe4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d127      	bne.n	800182a <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e2:	4a15      	ldr	r2, [pc, #84]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 80017e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ea:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001812:	2302      	movs	r3, #2
 8001814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001816:	2303      	movs	r3, #3
 8001818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	@ (800183c <HAL_ADC_MspInit+0xe0>)
 8001826:	f002 fcfd 	bl	8004224 <HAL_GPIO_Init>
}
 800182a:	bf00      	nop
 800182c:	3730      	adds	r7, #48	@ 0x30
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40012000 	.word	0x40012000
 8001838:	40023800 	.word	0x40023800
 800183c:	40020800 	.word	0x40020800
 8001840:	40012100 	.word	0x40012100
 8001844:	00000000 	.word	0x00000000

08001848 <ADC_TS_Voltage>:
uint16_t adc_vehic_volt;
uint16_t diff_volt;
uint8_t pre = 0;

uint8_t ADC_TS_Voltage(uint16_t MAX_TS_VOLTAGE)
{
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	80fb      	strh	r3, [r7, #6]
	//Vehicle side
	HAL_ADC_Start(&hadc1);
 8001852:	484b      	ldr	r0, [pc, #300]	@ (8001980 <ADC_TS_Voltage+0x138>)
 8001854:	f001 fac8 	bl	8002de8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 8001858:	2164      	movs	r1, #100	@ 0x64
 800185a:	4849      	ldr	r0, [pc, #292]	@ (8001980 <ADC_TS_Voltage+0x138>)
 800185c:	f001 fba6 	bl	8002fac <HAL_ADC_PollForConversion>
	raw_adc_vehic_volt = HAL_ADC_GetValue(&hadc1); // get the adc value
 8001860:	4847      	ldr	r0, [pc, #284]	@ (8001980 <ADC_TS_Voltage+0x138>)
 8001862:	f001 fc27 	bl	80030b4 <HAL_ADC_GetValue>
 8001866:	4603      	mov	r3, r0
 8001868:	b29a      	uxth	r2, r3
 800186a:	4b46      	ldr	r3, [pc, #280]	@ (8001984 <ADC_TS_Voltage+0x13c>)
 800186c:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1); // stop adc
 800186e:	4844      	ldr	r0, [pc, #272]	@ (8001980 <ADC_TS_Voltage+0x138>)
 8001870:	f001 fb6a 	bl	8002f48 <HAL_ADC_Stop>
	//Accu side
	HAL_ADC_Start(&hadc2);
 8001874:	4844      	ldr	r0, [pc, #272]	@ (8001988 <ADC_TS_Voltage+0x140>)
 8001876:	f001 fab7 	bl	8002de8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100); // poll for conversion
 800187a:	2164      	movs	r1, #100	@ 0x64
 800187c:	4842      	ldr	r0, [pc, #264]	@ (8001988 <ADC_TS_Voltage+0x140>)
 800187e:	f001 fb95 	bl	8002fac <HAL_ADC_PollForConversion>
	raw_adc_accu_volt = HAL_ADC_GetValue(&hadc2); // get the adc value
 8001882:	4841      	ldr	r0, [pc, #260]	@ (8001988 <ADC_TS_Voltage+0x140>)
 8001884:	f001 fc16 	bl	80030b4 <HAL_ADC_GetValue>
 8001888:	4603      	mov	r3, r0
 800188a:	b29a      	uxth	r2, r3
 800188c:	4b3f      	ldr	r3, [pc, #252]	@ (800198c <ADC_TS_Voltage+0x144>)
 800188e:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2); // stop adc
 8001890:	483d      	ldr	r0, [pc, #244]	@ (8001988 <ADC_TS_Voltage+0x140>)
 8001892:	f001 fb59 	bl	8002f48 <HAL_ADC_Stop>

	adc_accu_volt = (3.3/4095.0)* raw_adc_accu_volt * 175.5;
 8001896:	4b3d      	ldr	r3, [pc, #244]	@ (800198c <ADC_TS_Voltage+0x144>)
 8001898:	881b      	ldrh	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fdee 	bl	800047c <__aeabi_i2d>
 80018a0:	a331      	add	r3, pc, #196	@ (adr r3, 8001968 <ADC_TS_Voltage+0x120>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe fe53 	bl	8000550 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	a32f      	add	r3, pc, #188	@ (adr r3, 8001970 <ADC_TS_Voltage+0x128>)
 80018b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b8:	f7fe fe4a 	bl	8000550 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f7ff f91c 	bl	8000b00 <__aeabi_d2uiz>
 80018c8:	4603      	mov	r3, r0
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	4b30      	ldr	r3, [pc, #192]	@ (8001990 <ADC_TS_Voltage+0x148>)
 80018ce:	801a      	strh	r2, [r3, #0]
	adc_vehic_volt = (3.3/4095.0)* raw_adc_vehic_volt * 175.5;
 80018d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001984 <ADC_TS_Voltage+0x13c>)
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fdd1 	bl	800047c <__aeabi_i2d>
 80018da:	a323      	add	r3, pc, #140	@ (adr r3, 8001968 <ADC_TS_Voltage+0x120>)
 80018dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e0:	f7fe fe36 	bl	8000550 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	a320      	add	r3, pc, #128	@ (adr r3, 8001970 <ADC_TS_Voltage+0x128>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7fe fe2d 	bl	8000550 <__aeabi_dmul>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	f7ff f8ff 	bl	8000b00 <__aeabi_d2uiz>
 8001902:	4603      	mov	r3, r0
 8001904:	b29a      	uxth	r2, r3
 8001906:	4b23      	ldr	r3, [pc, #140]	@ (8001994 <ADC_TS_Voltage+0x14c>)
 8001908:	801a      	strh	r2, [r3, #0]
	diff_volt = adc_accu_volt - adc_vehic_volt;
 800190a:	4b21      	ldr	r3, [pc, #132]	@ (8001990 <ADC_TS_Voltage+0x148>)
 800190c:	881a      	ldrh	r2, [r3, #0]
 800190e:	4b21      	ldr	r3, [pc, #132]	@ (8001994 <ADC_TS_Voltage+0x14c>)
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	b29a      	uxth	r2, r3
 8001916:	4b20      	ldr	r3, [pc, #128]	@ (8001998 <ADC_TS_Voltage+0x150>)
 8001918:	801a      	strh	r2, [r3, #0]

	if(diff_volt >= 0.1 * MAX_TS_VOLTAGE)
 800191a:	4b1f      	ldr	r3, [pc, #124]	@ (8001998 <ADC_TS_Voltage+0x150>)
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fdac 	bl	800047c <__aeabi_i2d>
 8001924:	4604      	mov	r4, r0
 8001926:	460d      	mov	r5, r1
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fda6 	bl	800047c <__aeabi_i2d>
 8001930:	a311      	add	r3, pc, #68	@ (adr r3, 8001978 <ADC_TS_Voltage+0x130>)
 8001932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001936:	f7fe fe0b 	bl	8000550 <__aeabi_dmul>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4620      	mov	r0, r4
 8001940:	4629      	mov	r1, r5
 8001942:	f7ff f88b 	bl	8000a5c <__aeabi_dcmpge>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <ADC_TS_Voltage+0x10c>
		pre = 1;
 800194c:	4b13      	ldr	r3, [pc, #76]	@ (800199c <ADC_TS_Voltage+0x154>)
 800194e:	2201      	movs	r2, #1
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	e002      	b.n	800195a <ADC_TS_Voltage+0x112>
	else
		pre = 0;
 8001954:	4b11      	ldr	r3, [pc, #68]	@ (800199c <ADC_TS_Voltage+0x154>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]


	return pre;
 800195a:	4b10      	ldr	r3, [pc, #64]	@ (800199c <ADC_TS_Voltage+0x154>)
 800195c:	781b      	ldrb	r3, [r3, #0]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bdb0      	pop	{r4, r5, r7, pc}
 8001966:	bf00      	nop
 8001968:	e734d9b4 	.word	0xe734d9b4
 800196c:	3f4a680c 	.word	0x3f4a680c
 8001970:	00000000 	.word	0x00000000
 8001974:	4065f000 	.word	0x4065f000
 8001978:	9999999a 	.word	0x9999999a
 800197c:	3fb99999 	.word	0x3fb99999
 8001980:	2000039c 	.word	0x2000039c
 8001984:	20000430 	.word	0x20000430
 8001988:	200003e4 	.word	0x200003e4
 800198c:	2000042c 	.word	0x2000042c
 8001990:	2000042e 	.word	0x2000042e
 8001994:	20000432 	.word	0x20000432
 8001998:	20000434 	.word	0x20000434
 800199c:	20000436 	.word	0x20000436

080019a0 <HAL_TIM_PeriodElapsedCallback>:
 * HLCK 96 MHz
 * APB1 48 MHz
 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

CAN_interrupt();
 80019a8:	f000 fa26 	bl	8001df8 <CAN_interrupt>
}
 80019ac:	bf00      	nop
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
   {
 80019b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019b6:	b089      	sub	sp, #36	@ 0x24
 80019b8:	af06      	add	r7, sp, #24
 80019ba:	6078      	str	r0, [r7, #4]
    CAN_RX(hcan1);
 80019bc:	4e08      	ldr	r6, [pc, #32]	@ (80019e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80019be:	466d      	mov	r5, sp
 80019c0:	f106 0410 	add.w	r4, r6, #16
 80019c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80019d0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80019d4:	f000 fb9a 	bl	800210c <CAN_RX>
   }
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019e0:	200004ec 	.word	0x200004ec

080019e4 <BMS_init>:


void BMS_init()
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	LTC6811_initialize();
 80019e8:	f7ff fa54 	bl	8000e94 <LTC6811_initialize>
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <BMS>:

void BMS()		// Battery Management System function for main loop.
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
	uint8_t pec = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	713b      	strb	r3, [r7, #4]
	static uint8_t selTemp = 0;
	//uint16_t VOV = MAX_VOLTAGE/16;					// Formeln aus Datenblatt S.65
	//uint16_t VUV = (MIN_VOLTAGE/16)-1;

	precharge = ADC_TS_Voltage(MAX_TS_VOLTAGE);
 80019fa:	f240 202a 	movw	r0, #554	@ 0x22a
 80019fe:	f7ff ff23 	bl	8001848 <ADC_TS_Voltage>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b81      	ldr	r3, [pc, #516]	@ (8001c0c <BMS+0x21c>)
 8001a08:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < NUM_STACK; i++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	71fb      	strb	r3, [r7, #7]
 8001a0e:	e0b2      	b.n	8001b76 <BMS+0x186>
		cfg[i][4] = 0x00 | OV_flag[i];
		cfg[i][5] = 0x00 | (OV_flag[i]>>8);

*/
		//Balancing without flags
		cfg[i][0] = 0x3C | ((selTemp << 6) & 0xC0);		//cfg : Databytes in config register of the LTC6811
 8001a10:	4b7f      	ldr	r3, [pc, #508]	@ (8001c10 <BMS+0x220>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	019b      	lsls	r3, r3, #6
 8001a16:	b25b      	sxtb	r3, r3
 8001a18:	f043 033c 	orr.w	r3, r3, #60	@ 0x3c
 8001a1c:	b25b      	sxtb	r3, r3
 8001a1e:	79fa      	ldrb	r2, [r7, #7]
 8001a20:	b2d8      	uxtb	r0, r3
 8001a22:	497c      	ldr	r1, [pc, #496]	@ (8001c14 <BMS+0x224>)
 8001a24:	4613      	mov	r3, r2
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	440b      	add	r3, r1
 8001a2e:	4602      	mov	r2, r0
 8001a30:	701a      	strb	r2, [r3, #0]
		cfg[i][1] = 0x00;
 8001a32:	79fa      	ldrb	r2, [r7, #7]
 8001a34:	4977      	ldr	r1, [pc, #476]	@ (8001c14 <BMS+0x224>)
 8001a36:	4613      	mov	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	440b      	add	r3, r1
 8001a40:	3301      	adds	r3, #1
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
		cfg[i][2] = 0x00;
 8001a46:	79fa      	ldrb	r2, [r7, #7]
 8001a48:	4972      	ldr	r1, [pc, #456]	@ (8001c14 <BMS+0x224>)
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	440b      	add	r3, r1
 8001a54:	3302      	adds	r3, #2
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
		cfg[i][3] = 0x00;
 8001a5a:	79fa      	ldrb	r2, [r7, #7]
 8001a5c:	496d      	ldr	r1, [pc, #436]	@ (8001c14 <BMS+0x224>)
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	440b      	add	r3, r1
 8001a68:	3303      	adds	r3, #3
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
		cfg[i][4] = 0x00;
 8001a6e:	79fa      	ldrb	r2, [r7, #7]
 8001a70:	4968      	ldr	r1, [pc, #416]	@ (8001c14 <BMS+0x224>)
 8001a72:	4613      	mov	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4413      	add	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	440b      	add	r3, r1
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
		cfg[i][5] = 0x00;
 8001a82:	79fa      	ldrb	r2, [r7, #7]
 8001a84:	4963      	ldr	r1, [pc, #396]	@ (8001c14 <BMS+0x224>)
 8001a86:	4613      	mov	r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	4413      	add	r3, r2
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	440b      	add	r3, r1
 8001a90:	3305      	adds	r3, #5
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]

		if(balancing)
 8001a96:	4b60      	ldr	r3, [pc, #384]	@ (8001c18 <BMS+0x228>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d068      	beq.n	8001b70 <BMS+0x180>
		{
			if(selTemp < 3)
 8001a9e:	4b5c      	ldr	r3, [pc, #368]	@ (8001c10 <BMS+0x220>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d864      	bhi.n	8001b70 <BMS+0x180>
			{
				for(uint8_t j = 0; j < 8; j++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	71bb      	strb	r3, [r7, #6]
 8001aaa:	e02b      	b.n	8001b04 <BMS+0x114>
				{
					if(cellVoltages[i * NUM_STACK + j] - MAX_VOLTAGE > balanceMargin)cfg[i][4] |= 1 << j;
 8001aac:	79fa      	ldrb	r2, [r7, #7]
 8001aae:	79bb      	ldrb	r3, [r7, #6]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	4a5a      	ldr	r2, [pc, #360]	@ (8001c1c <BMS+0x22c>)
 8001ab4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ab8:	f5a3 4318 	sub.w	r3, r3, #38912	@ 0x9800
 8001abc:	3b58      	subs	r3, #88	@ 0x58
 8001abe:	4a58      	ldr	r2, [pc, #352]	@ (8001c20 <BMS+0x230>)
 8001ac0:	8812      	ldrh	r2, [r2, #0]
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	dd1b      	ble.n	8001afe <BMS+0x10e>
 8001ac6:	79fa      	ldrb	r2, [r7, #7]
 8001ac8:	4952      	ldr	r1, [pc, #328]	@ (8001c14 <BMS+0x224>)
 8001aca:	4613      	mov	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	4413      	add	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	440b      	add	r3, r1
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	b25a      	sxtb	r2, r3
 8001ada:	79bb      	ldrb	r3, [r7, #6]
 8001adc:	2101      	movs	r1, #1
 8001ade:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae2:	b25b      	sxtb	r3, r3
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	b25b      	sxtb	r3, r3
 8001ae8:	79fa      	ldrb	r2, [r7, #7]
 8001aea:	b2d8      	uxtb	r0, r3
 8001aec:	4949      	ldr	r1, [pc, #292]	@ (8001c14 <BMS+0x224>)
 8001aee:	4613      	mov	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	440b      	add	r3, r1
 8001af8:	3304      	adds	r3, #4
 8001afa:	4602      	mov	r2, r0
 8001afc:	701a      	strb	r2, [r3, #0]
				for(uint8_t j = 0; j < 8; j++)
 8001afe:	79bb      	ldrb	r3, [r7, #6]
 8001b00:	3301      	adds	r3, #1
 8001b02:	71bb      	strb	r3, [r7, #6]
 8001b04:	79bb      	ldrb	r3, [r7, #6]
 8001b06:	2b07      	cmp	r3, #7
 8001b08:	d9d0      	bls.n	8001aac <BMS+0xbc>
				}
				for(uint8_t j = 0; j < 3; j++)
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	717b      	strb	r3, [r7, #5]
 8001b0e:	e02c      	b.n	8001b6a <BMS+0x17a>
				{
					if(cellVoltages[i * NUM_STACK + j + 8] - MAX_VOLTAGE > balanceMargin)cfg[i][5] |= 1 << j;
 8001b10:	79fa      	ldrb	r2, [r7, #7]
 8001b12:	797b      	ldrb	r3, [r7, #5]
 8001b14:	4413      	add	r3, r2
 8001b16:	3308      	adds	r3, #8
 8001b18:	4a40      	ldr	r2, [pc, #256]	@ (8001c1c <BMS+0x22c>)
 8001b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b1e:	f5a3 4318 	sub.w	r3, r3, #38912	@ 0x9800
 8001b22:	3b58      	subs	r3, #88	@ 0x58
 8001b24:	4a3e      	ldr	r2, [pc, #248]	@ (8001c20 <BMS+0x230>)
 8001b26:	8812      	ldrh	r2, [r2, #0]
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	dd1b      	ble.n	8001b64 <BMS+0x174>
 8001b2c:	79fa      	ldrb	r2, [r7, #7]
 8001b2e:	4939      	ldr	r1, [pc, #228]	@ (8001c14 <BMS+0x224>)
 8001b30:	4613      	mov	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4413      	add	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	440b      	add	r3, r1
 8001b3a:	3305      	adds	r3, #5
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b25a      	sxtb	r2, r3
 8001b40:	797b      	ldrb	r3, [r7, #5]
 8001b42:	2101      	movs	r1, #1
 8001b44:	fa01 f303 	lsl.w	r3, r1, r3
 8001b48:	b25b      	sxtb	r3, r3
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	b25b      	sxtb	r3, r3
 8001b4e:	79fa      	ldrb	r2, [r7, #7]
 8001b50:	b2d8      	uxtb	r0, r3
 8001b52:	4930      	ldr	r1, [pc, #192]	@ (8001c14 <BMS+0x224>)
 8001b54:	4613      	mov	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	4413      	add	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	440b      	add	r3, r1
 8001b5e:	3305      	adds	r3, #5
 8001b60:	4602      	mov	r2, r0
 8001b62:	701a      	strb	r2, [r3, #0]
				for(uint8_t j = 0; j < 3; j++)
 8001b64:	797b      	ldrb	r3, [r7, #5]
 8001b66:	3301      	adds	r3, #1
 8001b68:	717b      	strb	r3, [r7, #5]
 8001b6a:	797b      	ldrb	r3, [r7, #5]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d9cf      	bls.n	8001b10 <BMS+0x120>
	for (uint8_t i = 0; i < NUM_STACK; i++)
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	3301      	adds	r3, #1
 8001b74:	71fb      	strb	r3, [r7, #7]
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f43f af49 	beq.w	8001a10 <BMS+0x20>
	/*
	LTC6811_clrstat();
	HAL_Delay(3);
*/

	LTC6811_wrcfg(NUM_STACK, (uint8_t(*)[6])cfg);		// Write config
 8001b7e:	4925      	ldr	r1, [pc, #148]	@ (8001c14 <BMS+0x224>)
 8001b80:	2001      	movs	r0, #1
 8001b82:	f7ff fa83 	bl	800108c <LTC6811_wrcfg>
	HAL_Delay(3);
 8001b86:	2003      	movs	r0, #3
 8001b88:	f001 f8c6 	bl	8002d18 <HAL_Delay>

	//wakeup_idle();									// read config
	//LTC6811_rdcfg();
	//HAL_Delay(3);

	LTC6811_adcv();										// measure voltages
 8001b8c:	f7ff f9fa 	bl	8000f84 <LTC6811_adcv>
	HAL_Delay(3);
 8001b90:	2003      	movs	r0, #3
 8001b92:	f001 f8c1 	bl	8002d18 <HAL_Delay>

	pec += LTC6811_rdcv(0, NUM_STACK, (uint16_t(*)[12])cellVoltages);	//read voltages
 8001b96:	4a21      	ldr	r2, [pc, #132]	@ (8001c1c <BMS+0x22c>)
 8001b98:	2101      	movs	r1, #1
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f7ff fb2e 	bl	80011fc <LTC6811_rdcv>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	793b      	ldrb	r3, [r7, #4]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	713b      	strb	r3, [r7, #4]
	HAL_Delay(3);
 8001baa:	2003      	movs	r0, #3
 8001bac:	f001 f8b4 	bl	8002d18 <HAL_Delay>

	//CAN_interrupt();

	LTC6811_adax();										// measure 3 celltemp
 8001bb0:	f7ff fa2a 	bl	8001008 <LTC6811_adax>
	HAL_Delay(3);
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	f001 f8af 	bl	8002d18 <HAL_Delay>

	pec += LTC6811_rdaux(0, NUM_STACK, (uint16_t(*)[6])slaveGPIOs);	// read celltemp
 8001bba:	4a1a      	ldr	r2, [pc, #104]	@ (8001c24 <BMS+0x234>)
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f7ff fc10 	bl	80013e4 <LTC6811_rdaux>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	793b      	ldrb	r3, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	713b      	strb	r3, [r7, #4]
	HAL_Delay(3);
 8001bce:	2003      	movs	r0, #3
 8001bd0:	f001 f8a2 	bl	8002d18 <HAL_Delay>

	//pec += LTC6811_rdstatb(NUM_STACK, OV_flag, UV_flag, r_statb);
	//HAL_Delay(3);


	convertVoltage();
 8001bd4:	f000 f828 	bl	8001c28 <convertVoltage>

	convertTemperature(selTemp);
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c10 <BMS+0x220>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 f967 	bl	8001eb0 <convertTemperature>

	wakeup_idle();
	LTC6811_rdstat();
*/

	if (selTemp < 3)		// Variable for cycling the multiplexers for temp measurement.
 8001be2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c10 <BMS+0x220>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d806      	bhi.n	8001bf8 <BMS+0x208>
	{
		selTemp++;
 8001bea:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <BMS+0x220>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <BMS+0x220>)
 8001bf4:	701a      	strb	r2, [r3, #0]
 8001bf6:	e002      	b.n	8001bfe <BMS+0x20e>
		//CAN_interrupt();
	}


	else
		selTemp = 0;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <BMS+0x220>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]


	send_usb();
 8001bfe:	f000 fa27 	bl	8002050 <send_usb>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000437 	.word	0x20000437
 8001c10:	200004d0 	.word	0x200004d0
 8001c14:	20000454 	.word	0x20000454
 8001c18:	20000438 	.word	0x20000438
 8001c1c:	2000043c 	.word	0x2000043c
 8001c20:	20000000 	.word	0x20000000
 8001c24:	2000045c 	.word	0x2000045c

08001c28 <convertVoltage>:

void convertVoltage()		//convert and sort Voltages
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
	//double voltage[NUM_CELLS];


	for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	71fb      	strb	r3, [r7, #7]
 8001c32:	e00f      	b.n	8001c54 <convertVoltage+0x2c>
	{
		usb_voltages[i] = cellVoltages[i]/1000;
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	4a3a      	ldr	r2, [pc, #232]	@ (8001d20 <convertVoltage+0xf8>)
 8001c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c3c:	4a39      	ldr	r2, [pc, #228]	@ (8001d24 <convertVoltage+0xfc>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	099b      	lsrs	r3, r3, #6
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	b2d1      	uxtb	r1, r2
 8001c4a:	4a37      	ldr	r2, [pc, #220]	@ (8001d28 <convertVoltage+0x100>)
 8001c4c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	3301      	adds	r3, #1
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	2b0b      	cmp	r3, #11
 8001c58:	d9ec      	bls.n	8001c34 <convertVoltage+0xc>
	}

	//uint16_t cell_max = 42890;
	//uint16_t cell_min = 37789;

	uint16_t cell_max = cellVoltages[0];
 8001c5a:	4b31      	ldr	r3, [pc, #196]	@ (8001d20 <convertVoltage+0xf8>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	80bb      	strh	r3, [r7, #4]
	uint16_t cell_min = cellVoltages[0];
 8001c60:	4b2f      	ldr	r3, [pc, #188]	@ (8001d20 <convertVoltage+0xf8>)
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	807b      	strh	r3, [r7, #2]
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001c66:	2300      	movs	r3, #0
 8001c68:	707b      	strb	r3, [r7, #1]
 8001c6a:	e03c      	b.n	8001ce6 <convertVoltage+0xbe>
	{
		for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	703b      	strb	r3, [r7, #0]
 8001c70:	e033      	b.n	8001cda <convertVoltage+0xb2>
		{
			if(cellVoltages[i + k * 12] > cell_max) cell_max = cellVoltages[i + k * 12];
 8001c72:	7839      	ldrb	r1, [r7, #0]
 8001c74:	787a      	ldrb	r2, [r7, #1]
 8001c76:	4613      	mov	r3, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	440b      	add	r3, r1
 8001c80:	4a27      	ldr	r2, [pc, #156]	@ (8001d20 <convertVoltage+0xf8>)
 8001c82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c86:	88ba      	ldrh	r2, [r7, #4]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d20b      	bcs.n	8001ca4 <convertVoltage+0x7c>
 8001c8c:	7839      	ldrb	r1, [r7, #0]
 8001c8e:	787a      	ldrb	r2, [r7, #1]
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	4a21      	ldr	r2, [pc, #132]	@ (8001d20 <convertVoltage+0xf8>)
 8001c9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ca0:	80bb      	strh	r3, [r7, #4]
 8001ca2:	e017      	b.n	8001cd4 <convertVoltage+0xac>
			else if(cellVoltages[i + k * 12] < cell_min) cell_min = cellVoltages[i + k * 12];
 8001ca4:	7839      	ldrb	r1, [r7, #0]
 8001ca6:	787a      	ldrb	r2, [r7, #1]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	4a1b      	ldr	r2, [pc, #108]	@ (8001d20 <convertVoltage+0xf8>)
 8001cb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cb8:	887a      	ldrh	r2, [r7, #2]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d90a      	bls.n	8001cd4 <convertVoltage+0xac>
 8001cbe:	7839      	ldrb	r1, [r7, #0]
 8001cc0:	787a      	ldrb	r2, [r7, #1]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	440b      	add	r3, r1
 8001ccc:	4a14      	ldr	r2, [pc, #80]	@ (8001d20 <convertVoltage+0xf8>)
 8001cce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cd2:	807b      	strh	r3, [r7, #2]
		for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 8001cd4:	783b      	ldrb	r3, [r7, #0]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	703b      	strb	r3, [r7, #0]
 8001cda:	783b      	ldrb	r3, [r7, #0]
 8001cdc:	2b0b      	cmp	r3, #11
 8001cde:	d9c8      	bls.n	8001c72 <convertVoltage+0x4a>
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001ce0:	787b      	ldrb	r3, [r7, #1]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	707b      	strb	r3, [r7, #1]
 8001ce6:	787b      	ldrb	r3, [r7, #1]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0bf      	beq.n	8001c6c <convertVoltage+0x44>
			//voltage[i + k * 12] = (double)cellVoltages[i + k * 12]/10000;
			//printf(" Stack %d Cell %d = %.4f V \r\n", k, i, voltage[i + k * 12]);
		}
	}

	AMS2_databytes[0] = cell_min;
 8001cec:	887b      	ldrh	r3, [r7, #2]
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <convertVoltage+0x104>)
 8001cf2:	701a      	strb	r2, [r3, #0]
	AMS2_databytes[1] = (cell_min >> 8);
 8001cf4:	887b      	ldrh	r3, [r7, #2]
 8001cf6:	0a1b      	lsrs	r3, r3, #8
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <convertVoltage+0x104>)
 8001cfe:	705a      	strb	r2, [r3, #1]
	AMS2_databytes[2] = cell_max;
 8001d00:	88bb      	ldrh	r3, [r7, #4]
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	4b09      	ldr	r3, [pc, #36]	@ (8001d2c <convertVoltage+0x104>)
 8001d06:	709a      	strb	r2, [r3, #2]
	AMS2_databytes[3] = (cell_max >> 8);
 8001d08:	88bb      	ldrh	r3, [r7, #4]
 8001d0a:	0a1b      	lsrs	r3, r3, #8
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <convertVoltage+0x104>)
 8001d12:	70da      	strb	r2, [r3, #3]



}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	2000043c 	.word	0x2000043c
 8001d24:	10624dd3 	.word	0x10624dd3
 8001d28:	2000049c 	.word	0x2000049c
 8001d2c:	200004b4 	.word	0x200004b4

08001d30 <calculateTemperature>:


uint16_t calculateTemperature(uint16_t voltageCode, uint16_t referenceCode)		//convert temp
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	460a      	mov	r2, r1
 8001d3a:	80fb      	strh	r3, [r7, #6]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	80bb      	strh	r3, [r7, #4]
	if(referenceCode - voltageCode != 0)
 8001d40:	88ba      	ldrh	r2, [r7, #4]
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d03e      	beq.n	8001dc6 <calculateTemperature+0x96>
	{
		uint32_t convert_R = (voltageCode * 100000)/(referenceCode - voltageCode);
 8001d48:	88fb      	ldrh	r3, [r7, #6]
 8001d4a:	4a29      	ldr	r2, [pc, #164]	@ (8001df0 <calculateTemperature+0xc0>)
 8001d4c:	fb03 f202 	mul.w	r2, r3, r2
 8001d50:	88b9      	ldrh	r1, [r7, #4]
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	1acb      	subs	r3, r1, r3
 8001d56:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d5a:	60fb      	str	r3, [r7, #12]
		return 1000.0 / ((1.0 / 298.15) - (log(10000.0 / convert_R) / 3435.0)) - 273150.0;
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f7fe fb7d 	bl	800045c <__aeabi_ui2d>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	a11a      	add	r1, pc, #104	@ (adr r1, 8001dd0 <calculateTemperature+0xa0>)
 8001d68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d6c:	f7fe fd1a 	bl	80007a4 <__aeabi_ddiv>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	f00b fc92 	bl	800d6a0 <log>
 8001d7c:	a316      	add	r3, pc, #88	@ (adr r3, 8001dd8 <calculateTemperature+0xa8>)
 8001d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d82:	f7fe fd0f 	bl	80007a4 <__aeabi_ddiv>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	a115      	add	r1, pc, #84	@ (adr r1, 8001de0 <calculateTemperature+0xb0>)
 8001d8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d90:	f7fe fa26 	bl	80001e0 <__aeabi_dsub>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	f04f 0000 	mov.w	r0, #0
 8001d9c:	4915      	ldr	r1, [pc, #84]	@ (8001df4 <calculateTemperature+0xc4>)
 8001d9e:	f7fe fd01 	bl	80007a4 <__aeabi_ddiv>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4610      	mov	r0, r2
 8001da8:	4619      	mov	r1, r3
 8001daa:	a30f      	add	r3, pc, #60	@ (adr r3, 8001de8 <calculateTemperature+0xb8>)
 8001dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db0:	f7fe fa16 	bl	80001e0 <__aeabi_dsub>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f7fe fea0 	bl	8000b00 <__aeabi_d2uiz>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	e000      	b.n	8001dc8 <calculateTemperature+0x98>
	}
	else
		return 0x00;
 8001dc6:	2300      	movs	r3, #0


}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	00000000 	.word	0x00000000
 8001dd4:	40c38800 	.word	0x40c38800
 8001dd8:	00000000 	.word	0x00000000
 8001ddc:	40aad600 	.word	0x40aad600
 8001de0:	dcb5db83 	.word	0xdcb5db83
 8001de4:	3f6b79e1 	.word	0x3f6b79e1
 8001de8:	00000000 	.word	0x00000000
 8001dec:	4110abf8 	.word	0x4110abf8
 8001df0:	000186a0 	.word	0x000186a0
 8001df4:	408f4000 	.word	0x408f4000

08001df8 <CAN_interrupt>:

void CAN_interrupt()
{
 8001df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0

	if (HAL_GetTick()>= last10 + 10)
 8001e00:	f000 ff80 	bl	8002d04 <HAL_GetTick>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2200      	movs	r2, #0
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	617a      	str	r2, [r7, #20]
 8001e0c:	4b23      	ldr	r3, [pc, #140]	@ (8001e9c <CAN_interrupt+0xa4>)
 8001e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e12:	f112 080a 	adds.w	r8, r2, #10
 8001e16:	f143 0900 	adc.w	r9, r3, #0
 8001e1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4541      	cmp	r1, r8
 8001e22:	eb73 0309 	sbcs.w	r3, r3, r9
 8001e26:	d30c      	bcc.n	8001e42 <CAN_interrupt+0x4a>
	{
		CAN_100();
 8001e28:	f000 f9ac 	bl	8002184 <CAN_100>
		last10 = HAL_GetTick();
 8001e2c:	f000 ff6a 	bl	8002d04 <HAL_GetTick>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2200      	movs	r2, #0
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	60fa      	str	r2, [r7, #12]
 8001e38:	4b18      	ldr	r3, [pc, #96]	@ (8001e9c <CAN_interrupt+0xa4>)
 8001e3a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001e3e:	e9c3 1200 	strd	r1, r2, [r3]

	}
	if (HAL_GetTick()>= last100 + 100)
 8001e42:	f000 ff5f 	bl	8002d04 <HAL_GetTick>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2200      	movs	r2, #0
 8001e4a:	469a      	mov	sl, r3
 8001e4c:	4693      	mov	fp, r2
 8001e4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ea0 <CAN_interrupt+0xa8>)
 8001e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e54:	f112 0464 	adds.w	r4, r2, #100	@ 0x64
 8001e58:	f143 0500 	adc.w	r5, r3, #0
 8001e5c:	45a2      	cmp	sl, r4
 8001e5e:	eb7b 0305 	sbcs.w	r3, fp, r5
 8001e62:	d316      	bcc.n	8001e92 <CAN_interrupt+0x9a>
	{
		CAN_10(AMS2_databytes);
 8001e64:	480f      	ldr	r0, [pc, #60]	@ (8001ea4 <CAN_interrupt+0xac>)
 8001e66:	f000 f9b3 	bl	80021d0 <CAN_10>

		HAL_GPIO_TogglePin(GPIOA, WDI_Pin);		// toggle watchdog
 8001e6a:	2110      	movs	r1, #16
 8001e6c:	480e      	ldr	r0, [pc, #56]	@ (8001ea8 <CAN_interrupt+0xb0>)
 8001e6e:	f002 fb8f 	bl	8004590 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, LED_GN_Pin);	// toggle LED
 8001e72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e76:	480d      	ldr	r0, [pc, #52]	@ (8001eac <CAN_interrupt+0xb4>)
 8001e78:	f002 fb8a 	bl	8004590 <HAL_GPIO_TogglePin>
		last100 = HAL_GetTick();
 8001e7c:	f000 ff42 	bl	8002d04 <HAL_GetTick>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2200      	movs	r2, #0
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	607a      	str	r2, [r7, #4]
 8001e88:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <CAN_interrupt+0xa8>)
 8001e8a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001e8e:	e9c3 1200 	strd	r1, r2, [r3]
	}
}
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e9c:	200004c0 	.word	0x200004c0
 8001ea0:	200004c8 	.word	0x200004c8
 8001ea4:	200004b4 	.word	0x200004b4
 8001ea8:	40020000 	.word	0x40020000
 8001eac:	40020800 	.word	0x40020800

08001eb0 <convertTemperature>:


void convertTemperature(uint8_t selTemp)		// sort temp
{
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
*/

	//min und max Werte noch finden


	uint8_t indexOffset[12] = {9, 4, 11, 7, 6, 1, 0, 3, 10, 2, 5, 8};
 8001eba:	4a5f      	ldr	r2, [pc, #380]	@ (8002038 <convertTemperature+0x188>)
 8001ebc:	f107 0308 	add.w	r3, r7, #8
 8001ec0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ec2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	77fb      	strb	r3, [r7, #31]
 8001eca:	e037      	b.n	8001f3c <convertTemperature+0x8c>
	{
			for(uint8_t j = 0; j < 3; j++)
 8001ecc:	2300      	movs	r3, #0
 8001ece:	77bb      	strb	r3, [r7, #30]
 8001ed0:	e02e      	b.n	8001f30 <convertTemperature+0x80>
			{
				temperature[k * NUM_CELLS_STACK + indexOffset[j + selTemp * 3]] = calculateTemperature(slaveGPIOs[j + k * 6], slaveGPIOs[5 + k * NUM_GPIO_STACK]);
 8001ed2:	7fb9      	ldrb	r1, [r7, #30]
 8001ed4:	7ffa      	ldrb	r2, [r7, #31]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	440b      	add	r3, r1
 8001ee0:	4a56      	ldr	r2, [pc, #344]	@ (800203c <convertTemperature+0x18c>)
 8001ee2:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8001ee6:	7ffa      	ldrb	r2, [r7, #31]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	3305      	adds	r3, #5
 8001ef2:	4a52      	ldr	r2, [pc, #328]	@ (800203c <convertTemperature+0x18c>)
 8001ef4:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8001ef8:	7ffa      	ldrb	r2, [r7, #31]
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	461c      	mov	r4, r3
 8001f04:	7fb9      	ldrb	r1, [r7, #30]
 8001f06:	79fa      	ldrb	r2, [r7, #7]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	440b      	add	r3, r1
 8001f10:	3320      	adds	r3, #32
 8001f12:	443b      	add	r3, r7
 8001f14:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001f18:	441c      	add	r4, r3
 8001f1a:	4629      	mov	r1, r5
 8001f1c:	f7ff ff08 	bl	8001d30 <calculateTemperature>
 8001f20:	4603      	mov	r3, r0
 8001f22:	461a      	mov	r2, r3
 8001f24:	4b46      	ldr	r3, [pc, #280]	@ (8002040 <convertTemperature+0x190>)
 8001f26:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			for(uint8_t j = 0; j < 3; j++)
 8001f2a:	7fbb      	ldrb	r3, [r7, #30]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	77bb      	strb	r3, [r7, #30]
 8001f30:	7fbb      	ldrb	r3, [r7, #30]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d9cd      	bls.n	8001ed2 <convertTemperature+0x22>
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001f36:	7ffb      	ldrb	r3, [r7, #31]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	77fb      	strb	r3, [r7, #31]
 8001f3c:	7ffb      	ldrb	r3, [r7, #31]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0c4      	beq.n	8001ecc <convertTemperature+0x1c>
				}
			}
			*/
		//USB STUFF

	if(selTemp == 3)
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d172      	bne.n	800202e <convertTemperature+0x17e>
	{
		for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	777b      	strb	r3, [r7, #29]
 8001f4c:	e00f      	b.n	8001f6e <convertTemperature+0xbe>
		{
			usb_temperatures[i] = temperature[i]/1000;
 8001f4e:	7f7b      	ldrb	r3, [r7, #29]
 8001f50:	4a3b      	ldr	r2, [pc, #236]	@ (8002040 <convertTemperature+0x190>)
 8001f52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f56:	4a3b      	ldr	r2, [pc, #236]	@ (8002044 <convertTemperature+0x194>)
 8001f58:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5c:	099b      	lsrs	r3, r3, #6
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	7f7b      	ldrb	r3, [r7, #29]
 8001f62:	b2d1      	uxtb	r1, r2
 8001f64:	4a38      	ldr	r2, [pc, #224]	@ (8002048 <convertTemperature+0x198>)
 8001f66:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001f68:	7f7b      	ldrb	r3, [r7, #29]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	777b      	strb	r3, [r7, #29]
 8001f6e:	7f7b      	ldrb	r3, [r7, #29]
 8001f70:	2b0b      	cmp	r3, #11
 8001f72:	d9ec      	bls.n	8001f4e <convertTemperature+0x9e>
		}

		//CAN stuff


		uint16_t temp_min = temperature[0];
 8001f74:	4b32      	ldr	r3, [pc, #200]	@ (8002040 <convertTemperature+0x190>)
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	837b      	strh	r3, [r7, #26]
			uint16_t temp_max = temperature[0];
 8001f7a:	4b31      	ldr	r3, [pc, #196]	@ (8002040 <convertTemperature+0x190>)
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	833b      	strh	r3, [r7, #24]
		for(uint8_t k = 0; k < NUM_STACK; k++)
 8001f80:	2300      	movs	r3, #0
 8001f82:	75fb      	strb	r3, [r7, #23]
 8001f84:	e050      	b.n	8002028 <convertTemperature+0x178>
			{
				for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	75bb      	strb	r3, [r7, #22]
 8001f8a:	e033      	b.n	8001ff4 <convertTemperature+0x144>
				{
					if(temperature[i + k * 12] > temp_max) temp_max = temperature[i + k * 12];
 8001f8c:	7db9      	ldrb	r1, [r7, #22]
 8001f8e:	7dfa      	ldrb	r2, [r7, #23]
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	4a29      	ldr	r2, [pc, #164]	@ (8002040 <convertTemperature+0x190>)
 8001f9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fa0:	8b3a      	ldrh	r2, [r7, #24]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d20b      	bcs.n	8001fbe <convertTemperature+0x10e>
 8001fa6:	7db9      	ldrb	r1, [r7, #22]
 8001fa8:	7dfa      	ldrb	r2, [r7, #23]
 8001faa:	4613      	mov	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4413      	add	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	4a22      	ldr	r2, [pc, #136]	@ (8002040 <convertTemperature+0x190>)
 8001fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fba:	833b      	strh	r3, [r7, #24]
 8001fbc:	e017      	b.n	8001fee <convertTemperature+0x13e>
					else if(temperature[i + k * 12] < temp_min) temp_min = temperature[i + k * 12];
 8001fbe:	7db9      	ldrb	r1, [r7, #22]
 8001fc0:	7dfa      	ldrb	r2, [r7, #23]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8002040 <convertTemperature+0x190>)
 8001fce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fd2:	8b7a      	ldrh	r2, [r7, #26]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d90a      	bls.n	8001fee <convertTemperature+0x13e>
 8001fd8:	7db9      	ldrb	r1, [r7, #22]
 8001fda:	7dfa      	ldrb	r2, [r7, #23]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	4a16      	ldr	r2, [pc, #88]	@ (8002040 <convertTemperature+0x190>)
 8001fe8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fec:	837b      	strh	r3, [r7, #26]
				for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 8001fee:	7dbb      	ldrb	r3, [r7, #22]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	75bb      	strb	r3, [r7, #22]
 8001ff4:	7dbb      	ldrb	r3, [r7, #22]
 8001ff6:	2b0b      	cmp	r3, #11
 8001ff8:	d9c8      	bls.n	8001f8c <convertTemperature+0xdc>
				}

		AMS2_databytes[4] = temp_min;
 8001ffa:	8b7b      	ldrh	r3, [r7, #26]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4b13      	ldr	r3, [pc, #76]	@ (800204c <convertTemperature+0x19c>)
 8002000:	711a      	strb	r2, [r3, #4]
		AMS2_databytes[5] = (temp_min >> 8);
 8002002:	8b7b      	ldrh	r3, [r7, #26]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	b29b      	uxth	r3, r3
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4b10      	ldr	r3, [pc, #64]	@ (800204c <convertTemperature+0x19c>)
 800200c:	715a      	strb	r2, [r3, #5]
		AMS2_databytes[6] = temp_max;
 800200e:	8b3b      	ldrh	r3, [r7, #24]
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4b0e      	ldr	r3, [pc, #56]	@ (800204c <convertTemperature+0x19c>)
 8002014:	719a      	strb	r2, [r3, #6]
		AMS2_databytes[7] = (temp_max >> 8);
 8002016:	8b3b      	ldrh	r3, [r7, #24]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	b29b      	uxth	r3, r3
 800201c:	b2da      	uxtb	r2, r3
 800201e:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <convertTemperature+0x19c>)
 8002020:	71da      	strb	r2, [r3, #7]
		for(uint8_t k = 0; k < NUM_STACK; k++)
 8002022:	7dfb      	ldrb	r3, [r7, #23]
 8002024:	3301      	adds	r3, #1
 8002026:	75fb      	strb	r3, [r7, #23]
 8002028:	7dfb      	ldrb	r3, [r7, #23]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0ab      	beq.n	8001f86 <convertTemperature+0xd6>


			}
	}
}
 800202e:	bf00      	nop
 8002030:	3720      	adds	r7, #32
 8002032:	46bd      	mov	sp, r7
 8002034:	bdb0      	pop	{r4, r5, r7, pc}
 8002036:	bf00      	nop
 8002038:	0800da90 	.word	0x0800da90
 800203c:	2000045c 	.word	0x2000045c
 8002040:	20000468 	.word	0x20000468
 8002044:	10624dd3 	.word	0x10624dd3
 8002048:	200004a8 	.word	0x200004a8
 800204c:	200004b4 	.word	0x200004b4

08002050 <send_usb>:

void send_usb()
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
	usb_data[NUM_CELLS * 2] = 0xff;
 8002056:	4b10      	ldr	r3, [pc, #64]	@ (8002098 <send_usb+0x48>)
 8002058:	22ff      	movs	r2, #255	@ 0xff
 800205a:	761a      	strb	r2, [r3, #24]
	for(uint8_t i = 0; i < NUM_CELLS; i++)
 800205c:	2300      	movs	r3, #0
 800205e:	71fb      	strb	r3, [r7, #7]
 8002060:	e00f      	b.n	8002082 <send_usb+0x32>
	{
		usb_data[i] = usb_voltages[i];
 8002062:	79fa      	ldrb	r2, [r7, #7]
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	490d      	ldr	r1, [pc, #52]	@ (800209c <send_usb+0x4c>)
 8002068:	5c89      	ldrb	r1, [r1, r2]
 800206a:	4a0b      	ldr	r2, [pc, #44]	@ (8002098 <send_usb+0x48>)
 800206c:	54d1      	strb	r1, [r2, r3]
		usb_data[NUM_CELLS + i] = usb_temperatures[i];
 800206e:	79fa      	ldrb	r2, [r7, #7]
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	330c      	adds	r3, #12
 8002074:	490a      	ldr	r1, [pc, #40]	@ (80020a0 <send_usb+0x50>)
 8002076:	5c89      	ldrb	r1, [r1, r2]
 8002078:	4a07      	ldr	r2, [pc, #28]	@ (8002098 <send_usb+0x48>)
 800207a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < NUM_CELLS; i++)
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	3301      	adds	r3, #1
 8002080:	71fb      	strb	r3, [r7, #7]
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	2b0b      	cmp	r3, #11
 8002086:	d9ec      	bls.n	8002062 <send_usb+0x12>

	}

	CDC_Transmit_FS(usb_data, NUM_CELLS * 2 + 1);
 8002088:	2119      	movs	r1, #25
 800208a:	4803      	ldr	r0, [pc, #12]	@ (8002098 <send_usb+0x48>)
 800208c:	f008 fa36 	bl	800a4fc <CDC_Transmit_FS>
	//CDC_Transmit_FS(usb_voltages, NUM_CELLS + 1);

}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000480 	.word	0x20000480
 800209c:	2000049c 	.word	0x2000049c
 80020a0:	200004a8 	.word	0x200004a8

080020a4 <CAN_TX>:

uint32_t RxFifo;

	// transmit CAN Message
void CAN_TX(CAN_HandleTypeDef hcan, CAN_TxHeaderTypeDef TxHeader, uint8_t* TxData)
{
 80020a4:	b084      	sub	sp, #16
 80020a6:	b5b0      	push	{r4, r5, r7, lr}
 80020a8:	b090      	sub	sp, #64	@ 0x40
 80020aa:	af0e      	add	r7, sp, #56	@ 0x38
 80020ac:	f107 0418 	add.w	r4, r7, #24
 80020b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t TxMailbox;
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80020b4:	1d3b      	adds	r3, r7, #4
 80020b6:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80020ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80020bc:	f107 0018 	add.w	r0, r7, #24
 80020c0:	f001 fb69 	bl	8003796 <HAL_CAN_AddTxMessage>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d018      	beq.n	80020fc <CAN_TX+0x58>
	{
		CAN_TX(hcan, TxHeader, TxData);		//retry when failed
 80020ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80020cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80020ce:	ad06      	add	r5, sp, #24
 80020d0:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80020d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020dc:	e885 0003 	stmia.w	r5, {r0, r1}
 80020e0:	466d      	mov	r5, sp
 80020e2:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80020e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80020f2:	f107 0318 	add.w	r3, r7, #24
 80020f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020f8:	f7ff ffd4 	bl	80020a4 <CAN_TX>
	}
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002106:	b004      	add	sp, #16
 8002108:	4770      	bx	lr
	...

0800210c <CAN_RX>:

	// receive CAN Message
void CAN_RX(CAN_HandleTypeDef hcan)
{
 800210c:	b084      	sub	sp, #16
 800210e:	b580      	push	{r7, lr}
 8002110:	b08a      	sub	sp, #40	@ 0x28
 8002112:	af00      	add	r7, sp, #0
 8002114:	f107 0c30 	add.w	ip, r7, #48	@ 0x30
 8002118:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];


	if (HAL_CAN_GetRxMessage(&hcan, RxFifo, &RxHeader, RxData) != HAL_OK)
 800211c:	4b15      	ldr	r3, [pc, #84]	@ (8002174 <CAN_RX+0x68>)
 800211e:	6819      	ldr	r1, [r3, #0]
 8002120:	1d3b      	adds	r3, r7, #4
 8002122:	f107 020c 	add.w	r2, r7, #12
 8002126:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800212a:	f001 fc03 	bl	8003934 <HAL_CAN_GetRxMessage>
	{

	}

	if( RxHeader.StdId == 0x500)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8002134:	d117      	bne.n	8002166 <CAN_RX+0x5a>
	{

		DIC0_databytes[8] = RxData[8];
 8002136:	7b3a      	ldrb	r2, [r7, #12]
 8002138:	4b0f      	ldr	r3, [pc, #60]	@ (8002178 <CAN_RX+0x6c>)
 800213a:	721a      	strb	r2, [r3, #8]

		AIR_Logic(DIC0_databytes[0], ts_ready, DIC0_databytes[1]);
 800213c:	4b0e      	ldr	r3, [pc, #56]	@ (8002178 <CAN_RX+0x6c>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	4a0e      	ldr	r2, [pc, #56]	@ (800217c <CAN_RX+0x70>)
 8002142:	7811      	ldrb	r1, [r2, #0]
 8002144:	4a0c      	ldr	r2, [pc, #48]	@ (8002178 <CAN_RX+0x6c>)
 8002146:	7852      	ldrb	r2, [r2, #1]
 8002148:	4618      	mov	r0, r3
 800214a:	f000 f995 	bl	8002478 <AIR_Logic>
		AMS0_databytes[6]|= (ts_ready << 3);
 800214e:	4b0c      	ldr	r3, [pc, #48]	@ (8002180 <CAN_RX+0x74>)
 8002150:	799b      	ldrb	r3, [r3, #6]
 8002152:	b25a      	sxtb	r2, r3
 8002154:	4b09      	ldr	r3, [pc, #36]	@ (800217c <CAN_RX+0x70>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	b25b      	sxtb	r3, r3
 800215c:	4313      	orrs	r3, r2
 800215e:	b25b      	sxtb	r3, r3
 8002160:	b2da      	uxtb	r2, r3
 8002162:	4b07      	ldr	r3, [pc, #28]	@ (8002180 <CAN_RX+0x74>)
 8002164:	719a      	strb	r2, [r3, #6]

	}

	// hier kann man weitere Nachrichten zum Empfangen hinzufügen

}
 8002166:	bf00      	nop
 8002168:	3728      	adds	r7, #40	@ 0x28
 800216a:	46bd      	mov	sp, r7
 800216c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002170:	b004      	add	sp, #16
 8002172:	4770      	bx	lr
 8002174:	200004e8 	.word	0x200004e8
 8002178:	200004dc 	.word	0x200004dc
 800217c:	200004e4 	.word	0x200004e4
 8002180:	200004d4 	.word	0x200004d4

08002184 <CAN_100>:




void CAN_100()		// CAN Messages transmitted with 100 Hz
{
 8002184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002186:	b08f      	sub	sp, #60	@ 0x3c
 8002188:	af0e      	add	r7, sp, #56	@ 0x38

	CAN_TX(hcan1, AMS0_header, AMS0_databytes);
 800218a:	4e0e      	ldr	r6, [pc, #56]	@ (80021c4 <CAN_100+0x40>)
 800218c:	4b0e      	ldr	r3, [pc, #56]	@ (80021c8 <CAN_100+0x44>)
 800218e:	930c      	str	r3, [sp, #48]	@ 0x30
 8002190:	4b0e      	ldr	r3, [pc, #56]	@ (80021cc <CAN_100+0x48>)
 8002192:	ac06      	add	r4, sp, #24
 8002194:	461d      	mov	r5, r3
 8002196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800219a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800219e:	e884 0003 	stmia.w	r4, {r0, r1}
 80021a2:	466d      	mov	r5, sp
 80021a4:	f106 0410 	add.w	r4, r6, #16
 80021a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80021b4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80021b8:	f7ff ff74 	bl	80020a4 <CAN_TX>
}
 80021bc:	bf00      	nop
 80021be:	3704      	adds	r7, #4
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021c4:	200004ec 	.word	0x200004ec
 80021c8:	200004d4 	.word	0x200004d4
 80021cc:	20000004 	.word	0x20000004

080021d0 <CAN_10>:

void CAN_10(uint8_t bms_data[])		// CAN Messages transmitted with 10 Hz
{
 80021d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d2:	b091      	sub	sp, #68	@ 0x44
 80021d4:	af0e      	add	r7, sp, #56	@ 0x38
 80021d6:	6078      	str	r0, [r7, #4]
	CAN_TX(hcan1, AMS1_header, bms_data);
 80021d8:	4e0e      	ldr	r6, [pc, #56]	@ (8002214 <CAN_10+0x44>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80021de:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <CAN_10+0x48>)
 80021e0:	ac06      	add	r4, sp, #24
 80021e2:	461d      	mov	r5, r3
 80021e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80021ec:	e884 0003 	stmia.w	r4, {r0, r1}
 80021f0:	466d      	mov	r5, sp
 80021f2:	f106 0410 	add.w	r4, r6, #16
 80021f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002202:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002206:	f7ff ff4d 	bl	80020a4 <CAN_TX>
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002212:	bf00      	nop
 8002214:	200004ec 	.word	0x200004ec
 8002218:	2000001c 	.word	0x2000001c

0800221c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002220:	4b1c      	ldr	r3, [pc, #112]	@ (8002294 <MX_CAN1_Init+0x78>)
 8002222:	4a1d      	ldr	r2, [pc, #116]	@ (8002298 <MX_CAN1_Init+0x7c>)
 8002224:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8002226:	4b1b      	ldr	r3, [pc, #108]	@ (8002294 <MX_CAN1_Init+0x78>)
 8002228:	2204      	movs	r2, #4
 800222a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800222c:	4b19      	ldr	r3, [pc, #100]	@ (8002294 <MX_CAN1_Init+0x78>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002232:	4b18      	ldr	r3, [pc, #96]	@ (8002294 <MX_CAN1_Init+0x78>)
 8002234:	2200      	movs	r2, #0
 8002236:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8002238:	4b16      	ldr	r3, [pc, #88]	@ (8002294 <MX_CAN1_Init+0x78>)
 800223a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800223e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002240:	4b14      	ldr	r3, [pc, #80]	@ (8002294 <MX_CAN1_Init+0x78>)
 8002242:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002246:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002248:	4b12      	ldr	r3, [pc, #72]	@ (8002294 <MX_CAN1_Init+0x78>)
 800224a:	2200      	movs	r2, #0
 800224c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800224e:	4b11      	ldr	r3, [pc, #68]	@ (8002294 <MX_CAN1_Init+0x78>)
 8002250:	2200      	movs	r2, #0
 8002252:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002254:	4b0f      	ldr	r3, [pc, #60]	@ (8002294 <MX_CAN1_Init+0x78>)
 8002256:	2200      	movs	r2, #0
 8002258:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800225a:	4b0e      	ldr	r3, [pc, #56]	@ (8002294 <MX_CAN1_Init+0x78>)
 800225c:	2200      	movs	r2, #0
 800225e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002260:	4b0c      	ldr	r3, [pc, #48]	@ (8002294 <MX_CAN1_Init+0x78>)
 8002262:	2200      	movs	r2, #0
 8002264:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002266:	4b0b      	ldr	r3, [pc, #44]	@ (8002294 <MX_CAN1_Init+0x78>)
 8002268:	2200      	movs	r2, #0
 800226a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800226c:	4809      	ldr	r0, [pc, #36]	@ (8002294 <MX_CAN1_Init+0x78>)
 800226e:	f001 f953 	bl	8003518 <HAL_CAN_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002278:	f000 fa73 	bl	8002762 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800227c:	2102      	movs	r1, #2
 800227e:	4805      	ldr	r0, [pc, #20]	@ (8002294 <MX_CAN1_Init+0x78>)
 8002280:	f001 fc79 	bl	8003b76 <HAL_CAN_ActivateNotification>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_CAN1_Init+0x72>
    {
  	  Error_Handler();
 800228a:	f000 fa6a 	bl	8002762 <Error_Handler>
    }
  /* USER CODE END CAN1_Init 2 */

}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200004ec 	.word	0x200004ec
 8002298:	40006400 	.word	0x40006400

0800229c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80022a0:	4b17      	ldr	r3, [pc, #92]	@ (8002300 <MX_CAN2_Init+0x64>)
 80022a2:	4a18      	ldr	r2, [pc, #96]	@ (8002304 <MX_CAN2_Init+0x68>)
 80022a4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 80022a6:	4b16      	ldr	r3, [pc, #88]	@ (8002300 <MX_CAN2_Init+0x64>)
 80022a8:	2204      	movs	r2, #4
 80022aa:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80022ac:	4b14      	ldr	r3, [pc, #80]	@ (8002300 <MX_CAN2_Init+0x64>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80022b2:	4b13      	ldr	r3, [pc, #76]	@ (8002300 <MX_CAN2_Init+0x64>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 80022b8:	4b11      	ldr	r3, [pc, #68]	@ (8002300 <MX_CAN2_Init+0x64>)
 80022ba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022be:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80022c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002300 <MX_CAN2_Init+0x64>)
 80022c2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80022c6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80022c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002300 <MX_CAN2_Init+0x64>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80022ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002300 <MX_CAN2_Init+0x64>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80022d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002300 <MX_CAN2_Init+0x64>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80022da:	4b09      	ldr	r3, [pc, #36]	@ (8002300 <MX_CAN2_Init+0x64>)
 80022dc:	2200      	movs	r2, #0
 80022de:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80022e0:	4b07      	ldr	r3, [pc, #28]	@ (8002300 <MX_CAN2_Init+0x64>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80022e6:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <MX_CAN2_Init+0x64>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80022ec:	4804      	ldr	r0, [pc, #16]	@ (8002300 <MX_CAN2_Init+0x64>)
 80022ee:	f001 f913 	bl	8003518 <HAL_CAN_Init>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80022f8:	f000 fa33 	bl	8002762 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	20000514 	.word	0x20000514
 8002304:	40006800 	.word	0x40006800

08002308 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08c      	sub	sp, #48	@ 0x30
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 031c 	add.w	r3, r7, #28
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a4f      	ldr	r2, [pc, #316]	@ (8002464 <HAL_CAN_MspInit+0x15c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d146      	bne.n	80023b8 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800232a:	4b4f      	ldr	r3, [pc, #316]	@ (8002468 <HAL_CAN_MspInit+0x160>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	3301      	adds	r3, #1
 8002330:	4a4d      	ldr	r2, [pc, #308]	@ (8002468 <HAL_CAN_MspInit+0x160>)
 8002332:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002334:	4b4c      	ldr	r3, [pc, #304]	@ (8002468 <HAL_CAN_MspInit+0x160>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d10d      	bne.n	8002358 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800233c:	2300      	movs	r3, #0
 800233e:	61bb      	str	r3, [r7, #24]
 8002340:	4b4a      	ldr	r3, [pc, #296]	@ (800246c <HAL_CAN_MspInit+0x164>)
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	4a49      	ldr	r2, [pc, #292]	@ (800246c <HAL_CAN_MspInit+0x164>)
 8002346:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800234a:	6413      	str	r3, [r2, #64]	@ 0x40
 800234c:	4b47      	ldr	r3, [pc, #284]	@ (800246c <HAL_CAN_MspInit+0x164>)
 800234e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002350:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002354:	61bb      	str	r3, [r7, #24]
 8002356:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	4b43      	ldr	r3, [pc, #268]	@ (800246c <HAL_CAN_MspInit+0x164>)
 800235e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002360:	4a42      	ldr	r2, [pc, #264]	@ (800246c <HAL_CAN_MspInit+0x164>)
 8002362:	f043 0302 	orr.w	r3, r3, #2
 8002366:	6313      	str	r3, [r2, #48]	@ 0x30
 8002368:	4b40      	ldr	r3, [pc, #256]	@ (800246c <HAL_CAN_MspInit+0x164>)
 800236a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	617b      	str	r3, [r7, #20]
 8002372:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002374:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002382:	2303      	movs	r3, #3
 8002384:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002386:	2309      	movs	r3, #9
 8002388:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238a:	f107 031c 	add.w	r3, r7, #28
 800238e:	4619      	mov	r1, r3
 8002390:	4837      	ldr	r0, [pc, #220]	@ (8002470 <HAL_CAN_MspInit+0x168>)
 8002392:	f001 ff47 	bl	8004224 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8002396:	2200      	movs	r2, #0
 8002398:	2100      	movs	r1, #0
 800239a:	2013      	movs	r0, #19
 800239c:	f001 ff0b 	bl	80041b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80023a0:	2013      	movs	r0, #19
 80023a2:	f001 ff24 	bl	80041ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2100      	movs	r1, #0
 80023aa:	2014      	movs	r0, #20
 80023ac:	f001 ff03 	bl	80041b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80023b0:	2014      	movs	r0, #20
 80023b2:	f001 ff1c 	bl	80041ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80023b6:	e050      	b.n	800245a <HAL_CAN_MspInit+0x152>
  else if(canHandle->Instance==CAN2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002474 <HAL_CAN_MspInit+0x16c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d14b      	bne.n	800245a <HAL_CAN_MspInit+0x152>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	4b29      	ldr	r3, [pc, #164]	@ (800246c <HAL_CAN_MspInit+0x164>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ca:	4a28      	ldr	r2, [pc, #160]	@ (800246c <HAL_CAN_MspInit+0x164>)
 80023cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80023d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023d2:	4b26      	ldr	r3, [pc, #152]	@ (800246c <HAL_CAN_MspInit+0x164>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80023de:	4b22      	ldr	r3, [pc, #136]	@ (8002468 <HAL_CAN_MspInit+0x160>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	3301      	adds	r3, #1
 80023e4:	4a20      	ldr	r2, [pc, #128]	@ (8002468 <HAL_CAN_MspInit+0x160>)
 80023e6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80023e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002468 <HAL_CAN_MspInit+0x160>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d10d      	bne.n	800240c <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	4b1d      	ldr	r3, [pc, #116]	@ (800246c <HAL_CAN_MspInit+0x164>)
 80023f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f8:	4a1c      	ldr	r2, [pc, #112]	@ (800246c <HAL_CAN_MspInit+0x164>)
 80023fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002400:	4b1a      	ldr	r3, [pc, #104]	@ (800246c <HAL_CAN_MspInit+0x164>)
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800240c:	2300      	movs	r3, #0
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	4b16      	ldr	r3, [pc, #88]	@ (800246c <HAL_CAN_MspInit+0x164>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002414:	4a15      	ldr	r2, [pc, #84]	@ (800246c <HAL_CAN_MspInit+0x164>)
 8002416:	f043 0302 	orr.w	r3, r3, #2
 800241a:	6313      	str	r3, [r2, #48]	@ 0x30
 800241c:	4b13      	ldr	r3, [pc, #76]	@ (800246c <HAL_CAN_MspInit+0x164>)
 800241e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002428:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800242c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242e:	2302      	movs	r3, #2
 8002430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002436:	2303      	movs	r3, #3
 8002438:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800243a:	2309      	movs	r3, #9
 800243c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243e:	f107 031c 	add.w	r3, r7, #28
 8002442:	4619      	mov	r1, r3
 8002444:	480a      	ldr	r0, [pc, #40]	@ (8002470 <HAL_CAN_MspInit+0x168>)
 8002446:	f001 feed 	bl	8004224 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800244a:	2200      	movs	r2, #0
 800244c:	2100      	movs	r1, #0
 800244e:	2040      	movs	r0, #64	@ 0x40
 8002450:	f001 feb1 	bl	80041b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002454:	2040      	movs	r0, #64	@ 0x40
 8002456:	f001 feca 	bl	80041ee <HAL_NVIC_EnableIRQ>
}
 800245a:	bf00      	nop
 800245c:	3730      	adds	r7, #48	@ 0x30
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40006400 	.word	0x40006400
 8002468:	2000053c 	.word	0x2000053c
 800246c:	40023800 	.word	0x40023800
 8002470:	40020400 	.word	0x40020400
 8002474:	40006800 	.word	0x40006800

08002478 <AIR_Logic>:
	// returns 0 if open
	return HAL_GPIO_ReadPin(GPIOC,AIR_N_INT_Pin);
}

void AIR_Logic(uint8_t ts_on, uint8_t ts_ready, uint8_t ts_start)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
 8002482:	460b      	mov	r3, r1
 8002484:	71bb      	strb	r3, [r7, #6]
 8002486:	4613      	mov	r3, r2
 8002488:	717b      	strb	r3, [r7, #5]

	 if (error == 0)
 800248a:	4b0e      	ldr	r3, [pc, #56]	@ (80024c4 <AIR_Logic+0x4c>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d113      	bne.n	80024ba <AIR_Logic+0x42>
	 {
		 if (ts_on>= 1)
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d007      	beq.n	80024a8 <AIR_Logic+0x30>
		 {

			 HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_SET);
 8002498:	2201      	movs	r2, #1
 800249a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800249e:	480a      	ldr	r0, [pc, #40]	@ (80024c8 <AIR_Logic+0x50>)
 80024a0:	f002 f85e 	bl	8004560 <HAL_GPIO_WritePin>
			 ts_ready = 1;
 80024a4:	2301      	movs	r3, #1
 80024a6:	71bb      	strb	r3, [r7, #6]

		 }

		 if (ts_start>= 1)
 80024a8:	797b      	ldrb	r3, [r7, #5]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d005      	beq.n	80024ba <AIR_Logic+0x42>
		 {
			 HAL_GPIO_WritePin(GPIOC,AIR_P_SW_Pin, GPIO_PIN_SET);
 80024ae:	2201      	movs	r2, #1
 80024b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024b4:	4805      	ldr	r0, [pc, #20]	@ (80024cc <AIR_Logic+0x54>)
 80024b6:	f002 f853 	bl	8004560 <HAL_GPIO_WritePin>
		 }
	}
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000540 	.word	0x20000540
 80024c8:	40020400 	.word	0x40020400
 80024cc:	40020800 	.word	0x40020800

080024d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08a      	sub	sp, #40	@ 0x28
 80024d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d6:	f107 0314 	add.w	r3, r7, #20
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	609a      	str	r2, [r3, #8]
 80024e2:	60da      	str	r2, [r3, #12]
 80024e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	4b5e      	ldr	r3, [pc, #376]	@ (8002664 <MX_GPIO_Init+0x194>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	4a5d      	ldr	r2, [pc, #372]	@ (8002664 <MX_GPIO_Init+0x194>)
 80024f0:	f043 0304 	orr.w	r3, r3, #4
 80024f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002664 <MX_GPIO_Init+0x194>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b57      	ldr	r3, [pc, #348]	@ (8002664 <MX_GPIO_Init+0x194>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	4a56      	ldr	r2, [pc, #344]	@ (8002664 <MX_GPIO_Init+0x194>)
 800250c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002510:	6313      	str	r3, [r2, #48]	@ 0x30
 8002512:	4b54      	ldr	r3, [pc, #336]	@ (8002664 <MX_GPIO_Init+0x194>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	4b50      	ldr	r3, [pc, #320]	@ (8002664 <MX_GPIO_Init+0x194>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	4a4f      	ldr	r2, [pc, #316]	@ (8002664 <MX_GPIO_Init+0x194>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	6313      	str	r3, [r2, #48]	@ 0x30
 800252e:	4b4d      	ldr	r3, [pc, #308]	@ (8002664 <MX_GPIO_Init+0x194>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	607b      	str	r3, [r7, #4]
 800253e:	4b49      	ldr	r3, [pc, #292]	@ (8002664 <MX_GPIO_Init+0x194>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002542:	4a48      	ldr	r2, [pc, #288]	@ (8002664 <MX_GPIO_Init+0x194>)
 8002544:	f043 0302 	orr.w	r3, r3, #2
 8002548:	6313      	str	r3, [r2, #48]	@ 0x30
 800254a:	4b46      	ldr	r3, [pc, #280]	@ (8002664 <MX_GPIO_Init+0x194>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	607b      	str	r3, [r7, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	603b      	str	r3, [r7, #0]
 800255a:	4b42      	ldr	r3, [pc, #264]	@ (8002664 <MX_GPIO_Init+0x194>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	4a41      	ldr	r2, [pc, #260]	@ (8002664 <MX_GPIO_Init+0x194>)
 8002560:	f043 0308 	orr.w	r3, r3, #8
 8002564:	6313      	str	r3, [r2, #48]	@ 0x30
 8002566:	4b3f      	ldr	r3, [pc, #252]	@ (8002664 <MX_GPIO_Init+0x194>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GN_Pin|LED_YW_Pin|LED_RD_Pin|AIR_P_SW_Pin, GPIO_PIN_RESET);
 8002572:	2200      	movs	r2, #0
 8002574:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8002578:	483b      	ldr	r0, [pc, #236]	@ (8002668 <MX_GPIO_Init+0x198>)
 800257a:	f001 fff1 	bl	8004560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WDI_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 800257e:	2200      	movs	r2, #0
 8002580:	f248 0110 	movw	r1, #32784	@ 0x8010
 8002584:	4839      	ldr	r0, [pc, #228]	@ (800266c <MX_GPIO_Init+0x19c>)
 8002586:	f001 ffeb 	bl	8004560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SC_OPEN_GPIO_Port, SC_OPEN_Pin, GPIO_PIN_SET);
 800258a:	2201      	movs	r2, #1
 800258c:	2180      	movs	r1, #128	@ 0x80
 800258e:	4837      	ldr	r0, [pc, #220]	@ (800266c <MX_GPIO_Init+0x19c>)
 8002590:	f001 ffe6 	bl	8004560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_RESET);
 8002594:	2200      	movs	r2, #0
 8002596:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800259a:	4835      	ldr	r0, [pc, #212]	@ (8002670 <MX_GPIO_Init+0x1a0>)
 800259c:	f001 ffe0 	bl	8004560 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_GN_Pin|LED_YW_Pin|LED_RD_Pin|AIR_P_SW_Pin;
 80025a0:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 80025a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a6:	2301      	movs	r3, #1
 80025a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ae:	2300      	movs	r3, #0
 80025b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b2:	f107 0314 	add.w	r3, r7, #20
 80025b6:	4619      	mov	r1, r3
 80025b8:	482b      	ldr	r0, [pc, #172]	@ (8002668 <MX_GPIO_Init+0x198>)
 80025ba:	f001 fe33 	bl	8004224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_STATE_Pin|IMD_SAFE_Pin|SC_OPENING_Pin;
 80025be:	2368      	movs	r3, #104	@ 0x68
 80025c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c2:	2300      	movs	r3, #0
 80025c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ca:	f107 0314 	add.w	r3, r7, #20
 80025ce:	4619      	mov	r1, r3
 80025d0:	4826      	ldr	r0, [pc, #152]	@ (800266c <MX_GPIO_Init+0x19c>)
 80025d2:	f001 fe27 	bl	8004224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WDI_Pin|SC_OPEN_Pin|SPI3_CS_Pin;
 80025d6:	f248 0390 	movw	r3, #32912	@ 0x8090
 80025da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025dc:	2301      	movs	r3, #1
 80025de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e4:	2300      	movs	r3, #0
 80025e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	4619      	mov	r1, r3
 80025ee:	481f      	ldr	r0, [pc, #124]	@ (800266c <MX_GPIO_Init+0x19c>)
 80025f0:	f001 fe18 	bl	8004224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SC_CLOSING_Pin|SC_STATE_Pin|AIR_N_ACT_Pin|AIR_N_INT_Pin;
 80025f4:	23f0      	movs	r3, #240	@ 0xf0
 80025f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	4619      	mov	r1, r3
 8002606:	4818      	ldr	r0, [pc, #96]	@ (8002668 <MX_GPIO_Init+0x198>)
 8002608:	f001 fe0c 	bl	8004224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_ACTIVATE_Pin;
 800260c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002612:	2301      	movs	r3, #1
 8002614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261a:	2300      	movs	r3, #0
 800261c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TS_ACTIVATE_GPIO_Port, &GPIO_InitStruct);
 800261e:	f107 0314 	add.w	r3, r7, #20
 8002622:	4619      	mov	r1, r3
 8002624:	4812      	ldr	r0, [pc, #72]	@ (8002670 <MX_GPIO_Init+0x1a0>)
 8002626:	f001 fdfd 	bl	8004224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DANGER_V_Pin|AIR_P_ACT_Pin|AIR_P_INT_Pin;
 800262a:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 800262e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002630:	2300      	movs	r3, #0
 8002632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002638:	f107 0314 	add.w	r3, r7, #20
 800263c:	4619      	mov	r1, r3
 800263e:	480c      	ldr	r0, [pc, #48]	@ (8002670 <MX_GPIO_Init+0x1a0>)
 8002640:	f001 fdf0 	bl	8004224 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PCHRG_ACT_Pin;
 8002644:	2304      	movs	r3, #4
 8002646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002648:	2300      	movs	r3, #0
 800264a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PCHRG_ACT_GPIO_Port, &GPIO_InitStruct);
 8002650:	f107 0314 	add.w	r3, r7, #20
 8002654:	4619      	mov	r1, r3
 8002656:	4807      	ldr	r0, [pc, #28]	@ (8002674 <MX_GPIO_Init+0x1a4>)
 8002658:	f001 fde4 	bl	8004224 <HAL_GPIO_Init>

}
 800265c:	bf00      	nop
 800265e:	3728      	adds	r7, #40	@ 0x28
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40023800 	.word	0x40023800
 8002668:	40020800 	.word	0x40020800
 800266c:	40020000 	.word	0x40020000
 8002670:	40020400 	.word	0x40020400
 8002674:	40020c00 	.word	0x40020c00

08002678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800267c:	f000 fade 	bl	8002c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002680:	f000 f828 	bl	80026d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002684:	f7ff ff24 	bl	80024d0 <MX_GPIO_Init>
  MX_SPI3_Init();
 8002688:	f000 f872 	bl	8002770 <MX_SPI3_Init>
  MX_TIM2_Init();
 800268c:	f000 fa3a 	bl	8002b04 <MX_TIM2_Init>
  MX_CAN1_Init();
 8002690:	f7ff fdc4 	bl	800221c <MX_CAN1_Init>
  MX_CAN2_Init();
 8002694:	f7ff fe02 	bl	800229c <MX_CAN2_Init>
  MX_USB_DEVICE_Init();
 8002698:	f007 fe72 	bl	800a380 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800269c:	f7fe ffba 	bl	8001614 <MX_ADC1_Init>
  MX_ADC2_Init();
 80026a0:	f7ff f80a 	bl	80016b8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  // Start timer
  HAL_TIM_Base_Start_IT(&htim2);
 80026a4:	4809      	ldr	r0, [pc, #36]	@ (80026cc <main+0x54>)
 80026a6:	f004 fb8b 	bl	8006dc0 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan1);
 80026aa:	4809      	ldr	r0, [pc, #36]	@ (80026d0 <main+0x58>)
 80026ac:	f001 f82f 	bl	800370e <HAL_CAN_Start>
  BMS_init();
 80026b0:	f7ff f998 	bl	80019e4 <BMS_init>

    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80026b4:	2102      	movs	r1, #2
 80026b6:	4806      	ldr	r0, [pc, #24]	@ (80026d0 <main+0x58>)
 80026b8:	f001 fa5d 	bl	8003b76 <HAL_CAN_ActivateNotification>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <main+0x4e>
    {
  	  Error_Handler();
 80026c2:	f000 f84e 	bl	8002762 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 BMS();
 80026c6:	f7ff f993 	bl	80019f0 <BMS>
 80026ca:	e7fc      	b.n	80026c6 <main+0x4e>
 80026cc:	200005a0 	.word	0x200005a0
 80026d0:	200004ec 	.word	0x200004ec

080026d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b092      	sub	sp, #72	@ 0x48
 80026d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026da:	f107 0318 	add.w	r3, r7, #24
 80026de:	2230      	movs	r2, #48	@ 0x30
 80026e0:	2100      	movs	r1, #0
 80026e2:	4618      	mov	r0, r3
 80026e4:	f009 f969 	bl	800b9ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026e8:	1d3b      	adds	r3, r7, #4
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	60da      	str	r2, [r3, #12]
 80026f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026f6:	2302      	movs	r3, #2
 80026f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026fa:	2301      	movs	r3, #1
 80026fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026fe:	2310      	movs	r3, #16
 8002700:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002702:	2302      	movs	r3, #2
 8002704:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002706:	2300      	movs	r3, #0
 8002708:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 800270a:	2308      	movs	r3, #8
 800270c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 800270e:	23c0      	movs	r3, #192	@ 0xc0
 8002710:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002712:	2304      	movs	r3, #4
 8002714:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002716:	2308      	movs	r3, #8
 8002718:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800271a:	f107 0318 	add.w	r3, r7, #24
 800271e:	4618      	mov	r0, r3
 8002720:	f003 f980 	bl	8005a24 <HAL_RCC_OscConfig>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800272a:	f000 f81a 	bl	8002762 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800272e:	230f      	movs	r3, #15
 8002730:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002732:	2302      	movs	r3, #2
 8002734:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800273a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800273e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002740:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002744:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	2103      	movs	r1, #3
 800274a:	4618      	mov	r0, r3
 800274c:	f003 fbbe 	bl	8005ecc <HAL_RCC_ClockConfig>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002756:	f000 f804 	bl	8002762 <Error_Handler>
  }
}
 800275a:	bf00      	nop
 800275c:	3748      	adds	r7, #72	@ 0x48
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002766:	b672      	cpsid	i
}
 8002768:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800276a:	bf00      	nop
 800276c:	e7fd      	b.n	800276a <Error_Handler+0x8>
	...

08002770 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002774:	4b17      	ldr	r3, [pc, #92]	@ (80027d4 <MX_SPI3_Init+0x64>)
 8002776:	4a18      	ldr	r2, [pc, #96]	@ (80027d8 <MX_SPI3_Init+0x68>)
 8002778:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800277a:	4b16      	ldr	r3, [pc, #88]	@ (80027d4 <MX_SPI3_Init+0x64>)
 800277c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002780:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002782:	4b14      	ldr	r3, [pc, #80]	@ (80027d4 <MX_SPI3_Init+0x64>)
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002788:	4b12      	ldr	r3, [pc, #72]	@ (80027d4 <MX_SPI3_Init+0x64>)
 800278a:	2200      	movs	r2, #0
 800278c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800278e:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <MX_SPI3_Init+0x64>)
 8002790:	2200      	movs	r2, #0
 8002792:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002794:	4b0f      	ldr	r3, [pc, #60]	@ (80027d4 <MX_SPI3_Init+0x64>)
 8002796:	2200      	movs	r2, #0
 8002798:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800279a:	4b0e      	ldr	r3, [pc, #56]	@ (80027d4 <MX_SPI3_Init+0x64>)
 800279c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027a0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80027a2:	4b0c      	ldr	r3, [pc, #48]	@ (80027d4 <MX_SPI3_Init+0x64>)
 80027a4:	2220      	movs	r2, #32
 80027a6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027a8:	4b0a      	ldr	r3, [pc, #40]	@ (80027d4 <MX_SPI3_Init+0x64>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80027ae:	4b09      	ldr	r3, [pc, #36]	@ (80027d4 <MX_SPI3_Init+0x64>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027b4:	4b07      	ldr	r3, [pc, #28]	@ (80027d4 <MX_SPI3_Init+0x64>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80027ba:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <MX_SPI3_Init+0x64>)
 80027bc:	220a      	movs	r2, #10
 80027be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80027c0:	4804      	ldr	r0, [pc, #16]	@ (80027d4 <MX_SPI3_Init+0x64>)
 80027c2:	f003 fd3f 	bl	8006244 <HAL_SPI_Init>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80027cc:	f7ff ffc9 	bl	8002762 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	20000544 	.word	0x20000544
 80027d8:	40003c00 	.word	0x40003c00

080027dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b08a      	sub	sp, #40	@ 0x28
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a19      	ldr	r2, [pc, #100]	@ (8002860 <HAL_SPI_MspInit+0x84>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d12c      	bne.n	8002858 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	4b18      	ldr	r3, [pc, #96]	@ (8002864 <HAL_SPI_MspInit+0x88>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	4a17      	ldr	r2, [pc, #92]	@ (8002864 <HAL_SPI_MspInit+0x88>)
 8002808:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800280c:	6413      	str	r3, [r2, #64]	@ 0x40
 800280e:	4b15      	ldr	r3, [pc, #84]	@ (8002864 <HAL_SPI_MspInit+0x88>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	4b11      	ldr	r3, [pc, #68]	@ (8002864 <HAL_SPI_MspInit+0x88>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	4a10      	ldr	r2, [pc, #64]	@ (8002864 <HAL_SPI_MspInit+0x88>)
 8002824:	f043 0304 	orr.w	r3, r3, #4
 8002828:	6313      	str	r3, [r2, #48]	@ 0x30
 800282a:	4b0e      	ldr	r3, [pc, #56]	@ (8002864 <HAL_SPI_MspInit+0x88>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002836:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800283a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283c:	2302      	movs	r3, #2
 800283e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002840:	2300      	movs	r3, #0
 8002842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002844:	2303      	movs	r3, #3
 8002846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002848:	2306      	movs	r3, #6
 800284a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	4619      	mov	r1, r3
 8002852:	4805      	ldr	r0, [pc, #20]	@ (8002868 <HAL_SPI_MspInit+0x8c>)
 8002854:	f001 fce6 	bl	8004224 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002858:	bf00      	nop
 800285a:	3728      	adds	r7, #40	@ 0x28
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40003c00 	.word	0x40003c00
 8002864:	40023800 	.word	0x40023800
 8002868:	40020800 	.word	0x40020800

0800286c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002872:	2300      	movs	r3, #0
 8002874:	607b      	str	r3, [r7, #4]
 8002876:	4b0f      	ldr	r3, [pc, #60]	@ (80028b4 <HAL_MspInit+0x48>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287a:	4a0e      	ldr	r2, [pc, #56]	@ (80028b4 <HAL_MspInit+0x48>)
 800287c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002880:	6453      	str	r3, [r2, #68]	@ 0x44
 8002882:	4b0c      	ldr	r3, [pc, #48]	@ (80028b4 <HAL_MspInit+0x48>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800288a:	607b      	str	r3, [r7, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	603b      	str	r3, [r7, #0]
 8002892:	4b08      	ldr	r3, [pc, #32]	@ (80028b4 <HAL_MspInit+0x48>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	4a07      	ldr	r2, [pc, #28]	@ (80028b4 <HAL_MspInit+0x48>)
 8002898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800289c:	6413      	str	r3, [r2, #64]	@ 0x40
 800289e:	4b05      	ldr	r3, [pc, #20]	@ (80028b4 <HAL_MspInit+0x48>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr
 80028b4:	40023800 	.word	0x40023800

080028b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028bc:	bf00      	nop
 80028be:	e7fd      	b.n	80028bc <NMI_Handler+0x4>

080028c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028c4:	bf00      	nop
 80028c6:	e7fd      	b.n	80028c4 <HardFault_Handler+0x4>

080028c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028cc:	bf00      	nop
 80028ce:	e7fd      	b.n	80028cc <MemManage_Handler+0x4>

080028d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028d4:	bf00      	nop
 80028d6:	e7fd      	b.n	80028d4 <BusFault_Handler+0x4>

080028d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028dc:	bf00      	nop
 80028de:	e7fd      	b.n	80028dc <UsageFault_Handler+0x4>

080028e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr

080028f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002908:	f000 f9ea 	bl	8002ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}

08002910 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002914:	4802      	ldr	r0, [pc, #8]	@ (8002920 <CAN1_TX_IRQHandler+0x10>)
 8002916:	f001 f953 	bl	8003bc0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	200004ec 	.word	0x200004ec

08002924 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002928:	4802      	ldr	r0, [pc, #8]	@ (8002934 <CAN1_RX0_IRQHandler+0x10>)
 800292a:	f001 f949 	bl	8003bc0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	200004ec 	.word	0x200004ec

08002938 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800293c:	4802      	ldr	r0, [pc, #8]	@ (8002948 <TIM2_IRQHandler+0x10>)
 800293e:	f004 faad 	bl	8006e9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002942:	bf00      	nop
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	200005a0 	.word	0x200005a0

0800294c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002950:	4802      	ldr	r0, [pc, #8]	@ (800295c <CAN2_RX0_IRQHandler+0x10>)
 8002952:	f001 f935 	bl	8003bc0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000514 	.word	0x20000514

08002960 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002964:	4802      	ldr	r0, [pc, #8]	@ (8002970 <OTG_FS_IRQHandler+0x10>)
 8002966:	f001 ff6b 	bl	8004840 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	200012b4 	.word	0x200012b4

08002974 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return 1;
 8002978:	2301      	movs	r3, #1
}
 800297a:	4618      	mov	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr

08002982 <_kill>:

int _kill(int pid, int sig)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800298c:	f009 f878 	bl	800ba80 <__errno>
 8002990:	4603      	mov	r3, r0
 8002992:	2216      	movs	r2, #22
 8002994:	601a      	str	r2, [r3, #0]
  return -1;
 8002996:	f04f 33ff 	mov.w	r3, #4294967295
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <_exit>:

void _exit (int status)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029aa:	f04f 31ff 	mov.w	r1, #4294967295
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ffe7 	bl	8002982 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029b4:	bf00      	nop
 80029b6:	e7fd      	b.n	80029b4 <_exit+0x12>

080029b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	e00a      	b.n	80029e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029ca:	f3af 8000 	nop.w
 80029ce:	4601      	mov	r1, r0
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	60ba      	str	r2, [r7, #8]
 80029d6:	b2ca      	uxtb	r2, r1
 80029d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	3301      	adds	r3, #1
 80029de:	617b      	str	r3, [r7, #20]
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	dbf0      	blt.n	80029ca <_read+0x12>
  }

  return len;
 80029e8:	687b      	ldr	r3, [r7, #4]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b086      	sub	sp, #24
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	e009      	b.n	8002a18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	1c5a      	adds	r2, r3, #1
 8002a08:	60ba      	str	r2, [r7, #8]
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	3301      	adds	r3, #1
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	dbf1      	blt.n	8002a04 <_write+0x12>
    //ITM_SendChar(*ptr++); //Diese Zeile kann gelöscht werden wenn kein printf über SWV mehr gewollt ist
  }
  return len;
 8002a20:	687b      	ldr	r3, [r7, #4]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <_close>:

int _close(int file)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a50:	605a      	str	r2, [r3, #4]
  return 0;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr

08002a5e <_isatty>:

int _isatty(int file)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a66:	2301      	movs	r3, #1
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b085      	sub	sp, #20
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr
	...

08002a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a94:	4a14      	ldr	r2, [pc, #80]	@ (8002ae8 <_sbrk+0x5c>)
 8002a96:	4b15      	ldr	r3, [pc, #84]	@ (8002aec <_sbrk+0x60>)
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002aa0:	4b13      	ldr	r3, [pc, #76]	@ (8002af0 <_sbrk+0x64>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d102      	bne.n	8002aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002aa8:	4b11      	ldr	r3, [pc, #68]	@ (8002af0 <_sbrk+0x64>)
 8002aaa:	4a12      	ldr	r2, [pc, #72]	@ (8002af4 <_sbrk+0x68>)
 8002aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aae:	4b10      	ldr	r3, [pc, #64]	@ (8002af0 <_sbrk+0x64>)
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d207      	bcs.n	8002acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002abc:	f008 ffe0 	bl	800ba80 <__errno>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	220c      	movs	r2, #12
 8002ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aca:	e009      	b.n	8002ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002acc:	4b08      	ldr	r3, [pc, #32]	@ (8002af0 <_sbrk+0x64>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ad2:	4b07      	ldr	r3, [pc, #28]	@ (8002af0 <_sbrk+0x64>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4413      	add	r3, r2
 8002ada:	4a05      	ldr	r2, [pc, #20]	@ (8002af0 <_sbrk+0x64>)
 8002adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ade:	68fb      	ldr	r3, [r7, #12]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	2000c000 	.word	0x2000c000
 8002aec:	00000400 	.word	0x00000400
 8002af0:	2000059c 	.word	0x2000059c
 8002af4:	20001908 	.word	0x20001908

08002af8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002afc:	bf00      	nop
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b0a:	f107 0308 	add.w	r3, r7, #8
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	605a      	str	r2, [r3, #4]
 8002b14:	609a      	str	r2, [r3, #8]
 8002b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b18:	463b      	mov	r3, r7
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b20:	4b1d      	ldr	r3, [pc, #116]	@ (8002b98 <MX_TIM2_Init+0x94>)
 8002b22:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002b26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8002b28:	4b1b      	ldr	r3, [pc, #108]	@ (8002b98 <MX_TIM2_Init+0x94>)
 8002b2a:	222f      	movs	r2, #47	@ 0x2f
 8002b2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b98 <MX_TIM2_Init+0x94>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8002b34:	4b18      	ldr	r3, [pc, #96]	@ (8002b98 <MX_TIM2_Init+0x94>)
 8002b36:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002b3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b3c:	4b16      	ldr	r3, [pc, #88]	@ (8002b98 <MX_TIM2_Init+0x94>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b42:	4b15      	ldr	r3, [pc, #84]	@ (8002b98 <MX_TIM2_Init+0x94>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b48:	4813      	ldr	r0, [pc, #76]	@ (8002b98 <MX_TIM2_Init+0x94>)
 8002b4a:	f004 f8ea 	bl	8006d22 <HAL_TIM_Base_Init>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002b54:	f7ff fe05 	bl	8002762 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b5e:	f107 0308 	add.w	r3, r7, #8
 8002b62:	4619      	mov	r1, r3
 8002b64:	480c      	ldr	r0, [pc, #48]	@ (8002b98 <MX_TIM2_Init+0x94>)
 8002b66:	f004 faa1 	bl	80070ac <HAL_TIM_ConfigClockSource>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002b70:	f7ff fdf7 	bl	8002762 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b74:	2300      	movs	r3, #0
 8002b76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b7c:	463b      	mov	r3, r7
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4805      	ldr	r0, [pc, #20]	@ (8002b98 <MX_TIM2_Init+0x94>)
 8002b82:	f004 fcb3 	bl	80074ec <HAL_TIMEx_MasterConfigSynchronization>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002b8c:	f7ff fde9 	bl	8002762 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b90:	bf00      	nop
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	200005a0 	.word	0x200005a0

08002b9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bac:	d115      	bne.n	8002bda <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8002be4 <HAL_TIM_Base_MspInit+0x48>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb6:	4a0b      	ldr	r2, [pc, #44]	@ (8002be4 <HAL_TIM_Base_MspInit+0x48>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bbe:	4b09      	ldr	r3, [pc, #36]	@ (8002be4 <HAL_TIM_Base_MspInit+0x48>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2100      	movs	r1, #0
 8002bce:	201c      	movs	r0, #28
 8002bd0:	f001 faf1 	bl	80041b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bd4:	201c      	movs	r0, #28
 8002bd6:	f001 fb0a 	bl	80041ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800

08002be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002be8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8002bec:	f7ff ff84 	bl	8002af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bf0:	480c      	ldr	r0, [pc, #48]	@ (8002c24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bf2:	490d      	ldr	r1, [pc, #52]	@ (8002c28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8002c2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf8:	e002      	b.n	8002c00 <LoopCopyDataInit>

08002bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bfe:	3304      	adds	r3, #4

08002c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c04:	d3f9      	bcc.n	8002bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c06:	4a0a      	ldr	r2, [pc, #40]	@ (8002c30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c08:	4c0a      	ldr	r4, [pc, #40]	@ (8002c34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c0c:	e001      	b.n	8002c12 <LoopFillZerobss>

08002c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c10:	3204      	adds	r2, #4

08002c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c14:	d3fb      	bcc.n	8002c0e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002c16:	f008 ff39 	bl	800ba8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c1a:	f7ff fd2d 	bl	8002678 <main>
  bx  lr    
 8002c1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c20:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c28:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 8002c2c:	0800e278 	.word	0x0800e278
  ldr r2, =_sbss
 8002c30:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 8002c34:	20001904 	.word	0x20001904

08002c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c38:	e7fe      	b.n	8002c38 <ADC_IRQHandler>
	...

08002c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c40:	4b0e      	ldr	r3, [pc, #56]	@ (8002c7c <HAL_Init+0x40>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a0d      	ldr	r2, [pc, #52]	@ (8002c7c <HAL_Init+0x40>)
 8002c46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c7c <HAL_Init+0x40>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a0a      	ldr	r2, [pc, #40]	@ (8002c7c <HAL_Init+0x40>)
 8002c52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c58:	4b08      	ldr	r3, [pc, #32]	@ (8002c7c <HAL_Init+0x40>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a07      	ldr	r2, [pc, #28]	@ (8002c7c <HAL_Init+0x40>)
 8002c5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c64:	2003      	movs	r0, #3
 8002c66:	f001 fa9b 	bl	80041a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c6a:	200f      	movs	r0, #15
 8002c6c:	f000 f808 	bl	8002c80 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002c70:	f7ff fdfc 	bl	800286c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40023c00 	.word	0x40023c00

08002c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c88:	4b12      	ldr	r3, [pc, #72]	@ (8002cd4 <HAL_InitTick+0x54>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	4b12      	ldr	r3, [pc, #72]	@ (8002cd8 <HAL_InitTick+0x58>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	4619      	mov	r1, r3
 8002c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f001 fab3 	bl	800420a <HAL_SYSTICK_Config>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e00e      	b.n	8002ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b0f      	cmp	r3, #15
 8002cb2:	d80a      	bhi.n	8002cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cbc:	f001 fa7b 	bl	80041b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cc0:	4a06      	ldr	r2, [pc, #24]	@ (8002cdc <HAL_InitTick+0x5c>)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	e000      	b.n	8002ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	20000034 	.word	0x20000034
 8002cd8:	2000003c 	.word	0x2000003c
 8002cdc:	20000038 	.word	0x20000038

08002ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ce4:	4b05      	ldr	r3, [pc, #20]	@ (8002cfc <HAL_IncTick+0x1c>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4b05      	ldr	r3, [pc, #20]	@ (8002d00 <HAL_IncTick+0x20>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4413      	add	r3, r2
 8002cf0:	4a03      	ldr	r2, [pc, #12]	@ (8002d00 <HAL_IncTick+0x20>)
 8002cf2:	6013      	str	r3, [r2, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	2000003c 	.word	0x2000003c
 8002d00:	200005e8 	.word	0x200005e8

08002d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return uwTick;
 8002d08:	4b02      	ldr	r3, [pc, #8]	@ (8002d14 <HAL_GetTick+0x10>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr
 8002d14:	200005e8 	.word	0x200005e8

08002d18 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d20:	f7ff fff0 	bl	8002d04 <HAL_GetTick>
 8002d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d30:	d005      	beq.n	8002d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d32:	4b0a      	ldr	r3, [pc, #40]	@ (8002d5c <HAL_Delay+0x44>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d3e:	bf00      	nop
 8002d40:	f7ff ffe0 	bl	8002d04 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d8f7      	bhi.n	8002d40 <HAL_Delay+0x28>
  {
  }
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	2000003c 	.word	0x2000003c

08002d60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e033      	b.n	8002dde <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fe fcec 	bl	800175c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	f003 0310 	and.w	r3, r3, #16
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d118      	bne.n	8002dd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002da6:	f023 0302 	bic.w	r3, r3, #2
 8002daa:	f043 0202 	orr.w	r2, r3, #2
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 faaa 	bl	800330c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	f023 0303 	bic.w	r3, r3, #3
 8002dc6:	f043 0201 	orr.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002dce:	e001      	b.n	8002dd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
	...

08002de8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_Start+0x1a>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e095      	b.n	8002f2e <HAL_ADC_Start+0x146>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d018      	beq.n	8002e4a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e28:	4b43      	ldr	r3, [pc, #268]	@ (8002f38 <HAL_ADC_Start+0x150>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a43      	ldr	r2, [pc, #268]	@ (8002f3c <HAL_ADC_Start+0x154>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	0c9a      	lsrs	r2, r3, #18
 8002e34:	4613      	mov	r3, r2
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8002e3c:	e002      	b.n	8002e44 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f9      	bne.n	8002e3e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d15d      	bne.n	8002f14 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002e60:	f023 0301 	bic.w	r3, r3, #1
 8002e64:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d007      	beq.n	8002e8a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002e82:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e96:	d106      	bne.n	8002ea6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9c:	f023 0206 	bic.w	r2, r3, #6
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ea4:	e002      	b.n	8002eac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002ebc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002ebe:	4b20      	ldr	r3, [pc, #128]	@ (8002f40 <HAL_ADC_Start+0x158>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10f      	bne.n	8002eea <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d129      	bne.n	8002f2c <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	e020      	b.n	8002f2c <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a15      	ldr	r2, [pc, #84]	@ (8002f44 <HAL_ADC_Start+0x15c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d11b      	bne.n	8002f2c <HAL_ADC_Start+0x144>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d114      	bne.n	8002f2c <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002f10:	609a      	str	r2, [r3, #8]
 8002f12:	e00b      	b.n	8002f2c <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f18:	f043 0210 	orr.w	r2, r3, #16
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f24:	f043 0201 	orr.w	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr
 8002f38:	20000034 	.word	0x20000034
 8002f3c:	431bde83 	.word	0x431bde83
 8002f40:	40012300 	.word	0x40012300
 8002f44:	40012000 	.word	0x40012000

08002f48 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_ADC_Stop+0x16>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e021      	b.n	8002fa2 <HAL_ADC_Stop+0x5a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0201 	bic.w	r2, r2, #1
 8002f74:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d109      	bne.n	8002f98 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f88:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f8c:	f023 0301 	bic.w	r3, r3, #1
 8002f90:	f043 0201 	orr.w	r2, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fc8:	d113      	bne.n	8002ff2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002fd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fd8:	d10b      	bne.n	8002ff2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	f043 0220 	orr.w	r2, r3, #32
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e05c      	b.n	80030ac <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002ff2:	f7ff fe87 	bl	8002d04 <HAL_GetTick>
 8002ff6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ff8:	e01a      	b.n	8003030 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d016      	beq.n	8003030 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d007      	beq.n	8003018 <HAL_ADC_PollForConversion+0x6c>
 8003008:	f7ff fe7c 	bl	8002d04 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d20b      	bcs.n	8003030 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301c:	f043 0204 	orr.w	r2, r3, #4
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e03d      	b.n	80030ac <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b02      	cmp	r3, #2
 800303c:	d1dd      	bne.n	8002ffa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f06f 0212 	mvn.w	r2, #18
 8003046:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F2, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d123      	bne.n	80030aa <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003066:	2b00      	cmp	r3, #0
 8003068:	d11f      	bne.n	80030aa <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003070:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003074:	2b00      	cmp	r3, #0
 8003076:	d006      	beq.n	8003086 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003082:	2b00      	cmp	r3, #0
 8003084:	d111      	bne.n	80030aa <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003096:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d105      	bne.n	80030aa <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a2:	f043 0201 	orr.w	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d101      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x1c>
 80030e4:	2302      	movs	r3, #2
 80030e6:	e103      	b.n	80032f0 <HAL_ADC_ConfigChannel+0x224>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2b09      	cmp	r3, #9
 80030f6:	d925      	bls.n	8003144 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68d9      	ldr	r1, [r3, #12]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	b29b      	uxth	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	4613      	mov	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	4413      	add	r3, r2
 800310c:	3b1e      	subs	r3, #30
 800310e:	2207      	movs	r2, #7
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43da      	mvns	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	400a      	ands	r2, r1
 800311c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68d9      	ldr	r1, [r3, #12]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	b29b      	uxth	r3, r3
 800312e:	4618      	mov	r0, r3
 8003130:	4603      	mov	r3, r0
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4403      	add	r3, r0
 8003136:	3b1e      	subs	r3, #30
 8003138:	409a      	lsls	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	e022      	b.n	800318a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6919      	ldr	r1, [r3, #16]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	b29b      	uxth	r3, r3
 8003150:	461a      	mov	r2, r3
 8003152:	4613      	mov	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4413      	add	r3, r2
 8003158:	2207      	movs	r2, #7
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43da      	mvns	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	400a      	ands	r2, r1
 8003166:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6919      	ldr	r1, [r3, #16]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	b29b      	uxth	r3, r3
 8003178:	4618      	mov	r0, r3
 800317a:	4603      	mov	r3, r0
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	4403      	add	r3, r0
 8003180:	409a      	lsls	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b06      	cmp	r3, #6
 8003190:	d824      	bhi.n	80031dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	3b05      	subs	r3, #5
 80031a4:	221f      	movs	r2, #31
 80031a6:	fa02 f303 	lsl.w	r3, r2, r3
 80031aa:	43da      	mvns	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	400a      	ands	r2, r1
 80031b2:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	4618      	mov	r0, r3
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	3b05      	subs	r3, #5
 80031ce:	fa00 f203 	lsl.w	r2, r0, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80031da:	e04c      	b.n	8003276 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b0c      	cmp	r3, #12
 80031e2:	d824      	bhi.n	800322e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	3b23      	subs	r3, #35	@ 0x23
 80031f6:	221f      	movs	r2, #31
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43da      	mvns	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	400a      	ands	r2, r1
 8003204:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	b29b      	uxth	r3, r3
 8003212:	4618      	mov	r0, r3
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	3b23      	subs	r3, #35	@ 0x23
 8003220:	fa00 f203 	lsl.w	r2, r0, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	631a      	str	r2, [r3, #48]	@ 0x30
 800322c:	e023      	b.n	8003276 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	3b41      	subs	r3, #65	@ 0x41
 8003240:	221f      	movs	r2, #31
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43da      	mvns	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	400a      	ands	r2, r1
 800324e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	b29b      	uxth	r3, r3
 800325c:	4618      	mov	r0, r3
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	3b41      	subs	r3, #65	@ 0x41
 800326a:	fa00 f203 	lsl.w	r2, r0, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a20      	ldr	r2, [pc, #128]	@ (80032fc <HAL_ADC_ConfigChannel+0x230>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d109      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x1c8>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b12      	cmp	r3, #18
 8003286:	d105      	bne.n	8003294 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003288:	4b1d      	ldr	r3, [pc, #116]	@ (8003300 <HAL_ADC_ConfigChannel+0x234>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4a1c      	ldr	r2, [pc, #112]	@ (8003300 <HAL_ADC_ConfigChannel+0x234>)
 800328e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003292:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a18      	ldr	r2, [pc, #96]	@ (80032fc <HAL_ADC_ConfigChannel+0x230>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d123      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x21a>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d003      	beq.n	80032ae <HAL_ADC_ConfigChannel+0x1e2>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b11      	cmp	r3, #17
 80032ac:	d11b      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80032ae:	4b14      	ldr	r3, [pc, #80]	@ (8003300 <HAL_ADC_ConfigChannel+0x234>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	4a13      	ldr	r2, [pc, #76]	@ (8003300 <HAL_ADC_ConfigChannel+0x234>)
 80032b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032b8:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b10      	cmp	r3, #16
 80032c0:	d111      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032c2:	4b10      	ldr	r3, [pc, #64]	@ (8003304 <HAL_ADC_ConfigChannel+0x238>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a10      	ldr	r2, [pc, #64]	@ (8003308 <HAL_ADC_ConfigChannel+0x23c>)
 80032c8:	fba2 2303 	umull	r2, r3, r2, r3
 80032cc:	0c9a      	lsrs	r2, r3, #18
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80032d8:	e002      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	3b01      	subs	r3, #1
 80032de:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f9      	bne.n	80032da <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bc80      	pop	{r7}
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40012000 	.word	0x40012000
 8003300:	40012300 	.word	0x40012300
 8003304:	20000034 	.word	0x20000034
 8003308:	431bde83 	.word	0x431bde83

0800330c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003314:	4b7e      	ldr	r3, [pc, #504]	@ (8003510 <ADC_Init+0x204>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	4a7d      	ldr	r2, [pc, #500]	@ (8003510 <ADC_Init+0x204>)
 800331a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800331e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003320:	4b7b      	ldr	r3, [pc, #492]	@ (8003510 <ADC_Init+0x204>)
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	4979      	ldr	r1, [pc, #484]	@ (8003510 <ADC_Init+0x204>)
 800332a:	4313      	orrs	r3, r2
 800332c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800333c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6859      	ldr	r1, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	021a      	lsls	r2, r3, #8
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003360:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6859      	ldr	r1, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6899      	ldr	r1, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68da      	ldr	r2, [r3, #12]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339a:	4a5e      	ldr	r2, [pc, #376]	@ (8003514 <ADC_Init+0x208>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d022      	beq.n	80033e6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6899      	ldr	r1, [r3, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80033d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6899      	ldr	r1, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	e00f      	b.n	8003406 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003404:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0202 	bic.w	r2, r2, #2
 8003414:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6899      	ldr	r1, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	7e1b      	ldrb	r3, [r3, #24]
 8003420:	005a      	lsls	r2, r3, #1
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d027      	beq.n	8003484 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003442:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003452:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003458:	3b01      	subs	r3, #1
 800345a:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 800345e:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	fa92 f2a2 	rbit	r2, r2
 8003466:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	fab2 f282 	clz	r2, r2
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	fa03 f102 	lsl.w	r1, r3, r2
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	e007      	b.n	8003494 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003492:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80034a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69db      	ldr	r3, [r3, #28]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	051a      	lsls	r2, r3, #20
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80034c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6899      	ldr	r1, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80034d6:	025a      	lsls	r2, r3, #9
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6899      	ldr	r1, [r3, #8]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	029a      	lsls	r2, r3, #10
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	609a      	str	r2, [r3, #8]
}
 8003504:	bf00      	nop
 8003506:	3714      	adds	r7, #20
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40012300 	.word	0x40012300
 8003514:	0f000001 	.word	0x0f000001

08003518 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e0ed      	b.n	8003706 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d102      	bne.n	800353c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7fe fee6 	bl	8002308 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0201 	orr.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800354c:	f7ff fbda 	bl	8002d04 <HAL_GetTick>
 8003550:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003552:	e012      	b.n	800357a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003554:	f7ff fbd6 	bl	8002d04 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b0a      	cmp	r3, #10
 8003560:	d90b      	bls.n	800357a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003566:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2205      	movs	r2, #5
 8003572:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e0c5      	b.n	8003706 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0e5      	beq.n	8003554 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0202 	bic.w	r2, r2, #2
 8003596:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003598:	f7ff fbb4 	bl	8002d04 <HAL_GetTick>
 800359c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800359e:	e012      	b.n	80035c6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035a0:	f7ff fbb0 	bl	8002d04 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b0a      	cmp	r3, #10
 80035ac:	d90b      	bls.n	80035c6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2205      	movs	r2, #5
 80035be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e09f      	b.n	8003706 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1e5      	bne.n	80035a0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	7e1b      	ldrb	r3, [r3, #24]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d108      	bne.n	80035ee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	e007      	b.n	80035fe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80035fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	7e5b      	ldrb	r3, [r3, #25]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d108      	bne.n	8003618 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	e007      	b.n	8003628 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003626:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	7e9b      	ldrb	r3, [r3, #26]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d108      	bne.n	8003642 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0220 	orr.w	r2, r2, #32
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	e007      	b.n	8003652 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0220 	bic.w	r2, r2, #32
 8003650:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	7edb      	ldrb	r3, [r3, #27]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d108      	bne.n	800366c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0210 	bic.w	r2, r2, #16
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	e007      	b.n	800367c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0210 	orr.w	r2, r2, #16
 800367a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	7f1b      	ldrb	r3, [r3, #28]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d108      	bne.n	8003696 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0208 	orr.w	r2, r2, #8
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	e007      	b.n	80036a6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0208 	bic.w	r2, r2, #8
 80036a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	7f5b      	ldrb	r3, [r3, #29]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d108      	bne.n	80036c0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0204 	orr.w	r2, r2, #4
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	e007      	b.n	80036d0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0204 	bic.w	r2, r2, #4
 80036ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	431a      	orrs	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	ea42 0103 	orr.w	r1, r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	1e5a      	subs	r2, r3, #1
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b084      	sub	sp, #16
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b01      	cmp	r3, #1
 8003720:	d12e      	bne.n	8003780 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2202      	movs	r2, #2
 8003726:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0201 	bic.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800373a:	f7ff fae3 	bl	8002d04 <HAL_GetTick>
 800373e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003740:	e012      	b.n	8003768 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003742:	f7ff fadf 	bl	8002d04 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b0a      	cmp	r3, #10
 800374e:	d90b      	bls.n	8003768 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003754:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2205      	movs	r2, #5
 8003760:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e012      	b.n	800378e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1e5      	bne.n	8003742 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	e006      	b.n	800378e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003784:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
  }
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003796:	b480      	push	{r7}
 8003798:	b089      	sub	sp, #36	@ 0x24
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
 80037a2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037aa:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80037b4:	7ffb      	ldrb	r3, [r7, #31]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d003      	beq.n	80037c2 <HAL_CAN_AddTxMessage+0x2c>
 80037ba:	7ffb      	ldrb	r3, [r7, #31]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	f040 80ad 	bne.w	800391c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10a      	bne.n	80037e2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d105      	bne.n	80037e2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 8095 	beq.w	800390c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	0e1b      	lsrs	r3, r3, #24
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80037ec:	2201      	movs	r2, #1
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	409a      	lsls	r2, r3
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10d      	bne.n	800381a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003808:	68f9      	ldr	r1, [r7, #12]
 800380a:	6809      	ldr	r1, [r1, #0]
 800380c:	431a      	orrs	r2, r3
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	3318      	adds	r3, #24
 8003812:	011b      	lsls	r3, r3, #4
 8003814:	440b      	add	r3, r1
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	e00f      	b.n	800383a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003824:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800382a:	68f9      	ldr	r1, [r7, #12]
 800382c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800382e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	3318      	adds	r3, #24
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	440b      	add	r3, r1
 8003838:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6819      	ldr	r1, [r3, #0]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	3318      	adds	r3, #24
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	440b      	add	r3, r1
 800384a:	3304      	adds	r3, #4
 800384c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	7d1b      	ldrb	r3, [r3, #20]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d111      	bne.n	800387a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	3318      	adds	r3, #24
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	4413      	add	r3, r2
 8003862:	3304      	adds	r3, #4
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	6811      	ldr	r1, [r2, #0]
 800386a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	3318      	adds	r3, #24
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	440b      	add	r3, r1
 8003876:	3304      	adds	r3, #4
 8003878:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3307      	adds	r3, #7
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	061a      	lsls	r2, r3, #24
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3306      	adds	r3, #6
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	041b      	lsls	r3, r3, #16
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3305      	adds	r3, #5
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	021b      	lsls	r3, r3, #8
 8003894:	4313      	orrs	r3, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	3204      	adds	r2, #4
 800389a:	7812      	ldrb	r2, [r2, #0]
 800389c:	4610      	mov	r0, r2
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	6811      	ldr	r1, [r2, #0]
 80038a2:	ea43 0200 	orr.w	r2, r3, r0
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	440b      	add	r3, r1
 80038ac:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80038b0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3303      	adds	r3, #3
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	061a      	lsls	r2, r3, #24
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3302      	adds	r3, #2
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	041b      	lsls	r3, r3, #16
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3301      	adds	r3, #1
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	4313      	orrs	r3, r2
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	7812      	ldrb	r2, [r2, #0]
 80038d2:	4610      	mov	r0, r2
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	6811      	ldr	r1, [r2, #0]
 80038d8:	ea43 0200 	orr.w	r2, r3, r0
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	440b      	add	r3, r1
 80038e2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80038e6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	3318      	adds	r3, #24
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	4413      	add	r3, r2
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	6811      	ldr	r1, [r2, #0]
 80038fa:	f043 0201 	orr.w	r2, r3, #1
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	3318      	adds	r3, #24
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	440b      	add	r3, r1
 8003906:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	e00e      	b.n	800392a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e006      	b.n	800392a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003920:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
  }
}
 800392a:	4618      	mov	r0, r3
 800392c:	3724      	adds	r7, #36	@ 0x24
 800392e:	46bd      	mov	sp, r7
 8003930:	bc80      	pop	{r7}
 8003932:	4770      	bx	lr

08003934 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003934:	b480      	push	{r7}
 8003936:	b087      	sub	sp, #28
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003948:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800394a:	7dfb      	ldrb	r3, [r7, #23]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d003      	beq.n	8003958 <HAL_CAN_GetRxMessage+0x24>
 8003950:	7dfb      	ldrb	r3, [r7, #23]
 8003952:	2b02      	cmp	r3, #2
 8003954:	f040 8103 	bne.w	8003b5e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10e      	bne.n	800397c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d116      	bne.n	800399a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003970:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e0f7      	b.n	8003b6c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d107      	bne.n	800399a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e0e8      	b.n	8003b6c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	331b      	adds	r3, #27
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	4413      	add	r3, r2
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0204 	and.w	r2, r3, #4
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10c      	bne.n	80039d2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	331b      	adds	r3, #27
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	4413      	add	r3, r2
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	0d5b      	lsrs	r3, r3, #21
 80039c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	e00b      	b.n	80039ea <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	331b      	adds	r3, #27
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	4413      	add	r3, r2
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	08db      	lsrs	r3, r3, #3
 80039e2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	331b      	adds	r3, #27
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	4413      	add	r3, r2
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0202 	and.w	r2, r3, #2
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	331b      	adds	r3, #27
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0308 	and.w	r3, r3, #8
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	611a      	str	r2, [r3, #16]
 8003a1e:	e00b      	b.n	8003a38 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	331b      	adds	r3, #27
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	4413      	add	r3, r2
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 020f 	and.w	r2, r3, #15
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	331b      	adds	r3, #27
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	4413      	add	r3, r2
 8003a44:	3304      	adds	r3, #4
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	0a1b      	lsrs	r3, r3, #8
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	331b      	adds	r3, #27
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	4413      	add	r3, r2
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	0c1b      	lsrs	r3, r3, #16
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	0a1a      	lsrs	r2, r3, #8
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	3301      	adds	r3, #1
 8003a94:	b2d2      	uxtb	r2, r2
 8003a96:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	0c1a      	lsrs	r2, r3, #16
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	3302      	adds	r3, #2
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	0e1a      	lsrs	r2, r3, #24
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	3303      	adds	r3, #3
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	0a1a      	lsrs	r2, r3, #8
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	3305      	adds	r3, #5
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	0c1a      	lsrs	r2, r3, #16
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	3306      	adds	r3, #6
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	0e1a      	lsrs	r2, r3, #24
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	3307      	adds	r3, #7
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d108      	bne.n	8003b4a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0220 	orr.w	r2, r2, #32
 8003b46:	60da      	str	r2, [r3, #12]
 8003b48:	e007      	b.n	8003b5a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 0220 	orr.w	r2, r2, #32
 8003b58:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	e006      	b.n	8003b6c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b62:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
  }
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr

08003b76 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b085      	sub	sp, #20
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b86:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d002      	beq.n	8003b94 <HAL_CAN_ActivateNotification+0x1e>
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d109      	bne.n	8003ba8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6959      	ldr	r1, [r3, #20]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	e006      	b.n	8003bb6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
  }
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	@ 0x28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d07c      	beq.n	8003d00 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d023      	beq.n	8003c58 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2201      	movs	r2, #1
 8003c16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f983 	bl	8003f2e <HAL_CAN_TxMailbox0CompleteCallback>
 8003c28:	e016      	b.n	8003c58 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d004      	beq.n	8003c3e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c36:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c3c:	e00c      	b.n	8003c58 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d004      	beq.n	8003c52 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c50:	e002      	b.n	8003c58 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f986 	bl	8003f64 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d024      	beq.n	8003cac <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c6a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f962 	bl	8003f40 <HAL_CAN_TxMailbox1CompleteCallback>
 8003c7c:	e016      	b.n	8003cac <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d004      	beq.n	8003c92 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c90:	e00c      	b.n	8003cac <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d004      	beq.n	8003ca6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ca2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ca4:	e002      	b.n	8003cac <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f965 	bl	8003f76 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d024      	beq.n	8003d00 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003cbe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f941 	bl	8003f52 <HAL_CAN_TxMailbox2CompleteCallback>
 8003cd0:	e016      	b.n	8003d00 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d004      	beq.n	8003ce6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ce4:	e00c      	b.n	8003d00 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d004      	beq.n	8003cfa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf8:	e002      	b.n	8003d00 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f944 	bl	8003f88 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00c      	beq.n	8003d24 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d007      	beq.n	8003d24 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d1a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2210      	movs	r2, #16
 8003d22:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00b      	beq.n	8003d46 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f003 0308 	and.w	r3, r3, #8
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d006      	beq.n	8003d46 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2208      	movs	r2, #8
 8003d3e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f92a 	bl	8003f9a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d009      	beq.n	8003d64 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fd fe28 	bl	80019b4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00c      	beq.n	8003d88 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f003 0310 	and.w	r3, r3, #16
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d007      	beq.n	8003d88 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2210      	movs	r2, #16
 8003d86:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00b      	beq.n	8003daa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d006      	beq.n	8003daa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2208      	movs	r2, #8
 8003da2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f90a 	bl	8003fbe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	f003 0310 	and.w	r3, r3, #16
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d009      	beq.n	8003dc8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f8f2 	bl	8003fac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00b      	beq.n	8003dea <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	f003 0310 	and.w	r3, r3, #16
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d006      	beq.n	8003dea <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2210      	movs	r2, #16
 8003de2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 f8f3 	bl	8003fd0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00b      	beq.n	8003e0c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d006      	beq.n	8003e0c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2208      	movs	r2, #8
 8003e04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f8eb 	bl	8003fe2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d07b      	beq.n	8003f0e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d072      	beq.n	8003f06 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d008      	beq.n	8003e3c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d008      	beq.n	8003e58 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e52:	f043 0302 	orr.w	r3, r3, #2
 8003e56:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6e:	f043 0304 	orr.w	r3, r3, #4
 8003e72:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d043      	beq.n	8003f06 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d03e      	beq.n	8003f06 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003e8e:	2b60      	cmp	r3, #96	@ 0x60
 8003e90:	d02b      	beq.n	8003eea <HAL_CAN_IRQHandler+0x32a>
 8003e92:	2b60      	cmp	r3, #96	@ 0x60
 8003e94:	d82e      	bhi.n	8003ef4 <HAL_CAN_IRQHandler+0x334>
 8003e96:	2b50      	cmp	r3, #80	@ 0x50
 8003e98:	d022      	beq.n	8003ee0 <HAL_CAN_IRQHandler+0x320>
 8003e9a:	2b50      	cmp	r3, #80	@ 0x50
 8003e9c:	d82a      	bhi.n	8003ef4 <HAL_CAN_IRQHandler+0x334>
 8003e9e:	2b40      	cmp	r3, #64	@ 0x40
 8003ea0:	d019      	beq.n	8003ed6 <HAL_CAN_IRQHandler+0x316>
 8003ea2:	2b40      	cmp	r3, #64	@ 0x40
 8003ea4:	d826      	bhi.n	8003ef4 <HAL_CAN_IRQHandler+0x334>
 8003ea6:	2b30      	cmp	r3, #48	@ 0x30
 8003ea8:	d010      	beq.n	8003ecc <HAL_CAN_IRQHandler+0x30c>
 8003eaa:	2b30      	cmp	r3, #48	@ 0x30
 8003eac:	d822      	bhi.n	8003ef4 <HAL_CAN_IRQHandler+0x334>
 8003eae:	2b10      	cmp	r3, #16
 8003eb0:	d002      	beq.n	8003eb8 <HAL_CAN_IRQHandler+0x2f8>
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	d005      	beq.n	8003ec2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003eb6:	e01d      	b.n	8003ef4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eba:	f043 0308 	orr.w	r3, r3, #8
 8003ebe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ec0:	e019      	b.n	8003ef6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	f043 0310 	orr.w	r3, r3, #16
 8003ec8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003eca:	e014      	b.n	8003ef6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ece:	f043 0320 	orr.w	r3, r3, #32
 8003ed2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ed4:	e00f      	b.n	8003ef6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003edc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ede:	e00a      	b.n	8003ef6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ee6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ee8:	e005      	b.n	8003ef6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ef0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ef2:	e000      	b.n	8003ef6 <HAL_CAN_IRQHandler+0x336>
            break;
 8003ef4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699a      	ldr	r2, [r3, #24]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003f04:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f867 	bl	8003ff4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003f26:	bf00      	nop
 8003f28:	3728      	adds	r7, #40	@ 0x28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr

08003f40 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bc80      	pop	{r7}
 8003f50:	4770      	bx	lr

08003f52 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr

08003f64 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bc80      	pop	{r7}
 8003f74:	4770      	bx	lr

08003f76 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr

08003f88 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr

08003f9a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc80      	pop	{r7}
 8003faa:	4770      	bx	lr

08003fac <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr

08003fbe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr

08003fe2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003fea:	bf00      	nop
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr
	...

08004008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004018:	4b0c      	ldr	r3, [pc, #48]	@ (800404c <__NVIC_SetPriorityGrouping+0x44>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004024:	4013      	ands	r3, r2
 8004026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004030:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004034:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800403a:	4a04      	ldr	r2, [pc, #16]	@ (800404c <__NVIC_SetPriorityGrouping+0x44>)
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	60d3      	str	r3, [r2, #12]
}
 8004040:	bf00      	nop
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	e000ed00 	.word	0xe000ed00

08004050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004054:	4b04      	ldr	r3, [pc, #16]	@ (8004068 <__NVIC_GetPriorityGrouping+0x18>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	0a1b      	lsrs	r3, r3, #8
 800405a:	f003 0307 	and.w	r3, r3, #7
}
 800405e:	4618      	mov	r0, r3
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	e000ed00 	.word	0xe000ed00

0800406c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407a:	2b00      	cmp	r3, #0
 800407c:	db0b      	blt.n	8004096 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	f003 021f 	and.w	r2, r3, #31
 8004084:	4906      	ldr	r1, [pc, #24]	@ (80040a0 <__NVIC_EnableIRQ+0x34>)
 8004086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408a:	095b      	lsrs	r3, r3, #5
 800408c:	2001      	movs	r0, #1
 800408e:	fa00 f202 	lsl.w	r2, r0, r2
 8004092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	bc80      	pop	{r7}
 800409e:	4770      	bx	lr
 80040a0:	e000e100 	.word	0xe000e100

080040a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4603      	mov	r3, r0
 80040ac:	6039      	str	r1, [r7, #0]
 80040ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	db0a      	blt.n	80040ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	490c      	ldr	r1, [pc, #48]	@ (80040f0 <__NVIC_SetPriority+0x4c>)
 80040be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040c2:	0112      	lsls	r2, r2, #4
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	440b      	add	r3, r1
 80040c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040cc:	e00a      	b.n	80040e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	4908      	ldr	r1, [pc, #32]	@ (80040f4 <__NVIC_SetPriority+0x50>)
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	3b04      	subs	r3, #4
 80040dc:	0112      	lsls	r2, r2, #4
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	440b      	add	r3, r1
 80040e2:	761a      	strb	r2, [r3, #24]
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	e000e100 	.word	0xe000e100
 80040f4:	e000ed00 	.word	0xe000ed00

080040f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b089      	sub	sp, #36	@ 0x24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f1c3 0307 	rsb	r3, r3, #7
 8004112:	2b04      	cmp	r3, #4
 8004114:	bf28      	it	cs
 8004116:	2304      	movcs	r3, #4
 8004118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	3304      	adds	r3, #4
 800411e:	2b06      	cmp	r3, #6
 8004120:	d902      	bls.n	8004128 <NVIC_EncodePriority+0x30>
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	3b03      	subs	r3, #3
 8004126:	e000      	b.n	800412a <NVIC_EncodePriority+0x32>
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800412c:	f04f 32ff 	mov.w	r2, #4294967295
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	fa02 f303 	lsl.w	r3, r2, r3
 8004136:	43da      	mvns	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	401a      	ands	r2, r3
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004140:	f04f 31ff 	mov.w	r1, #4294967295
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	fa01 f303 	lsl.w	r3, r1, r3
 800414a:	43d9      	mvns	r1, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004150:	4313      	orrs	r3, r2
         );
}
 8004152:	4618      	mov	r0, r3
 8004154:	3724      	adds	r7, #36	@ 0x24
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr

0800415c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3b01      	subs	r3, #1
 8004168:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800416c:	d301      	bcc.n	8004172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800416e:	2301      	movs	r3, #1
 8004170:	e00f      	b.n	8004192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004172:	4a0a      	ldr	r2, [pc, #40]	@ (800419c <SysTick_Config+0x40>)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3b01      	subs	r3, #1
 8004178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800417a:	210f      	movs	r1, #15
 800417c:	f04f 30ff 	mov.w	r0, #4294967295
 8004180:	f7ff ff90 	bl	80040a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004184:	4b05      	ldr	r3, [pc, #20]	@ (800419c <SysTick_Config+0x40>)
 8004186:	2200      	movs	r2, #0
 8004188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800418a:	4b04      	ldr	r3, [pc, #16]	@ (800419c <SysTick_Config+0x40>)
 800418c:	2207      	movs	r2, #7
 800418e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3708      	adds	r7, #8
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	e000e010 	.word	0xe000e010

080041a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff ff2d 	bl	8004008 <__NVIC_SetPriorityGrouping>
}
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b086      	sub	sp, #24
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	4603      	mov	r3, r0
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
 80041c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041c8:	f7ff ff42 	bl	8004050 <__NVIC_GetPriorityGrouping>
 80041cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	68b9      	ldr	r1, [r7, #8]
 80041d2:	6978      	ldr	r0, [r7, #20]
 80041d4:	f7ff ff90 	bl	80040f8 <NVIC_EncodePriority>
 80041d8:	4602      	mov	r2, r0
 80041da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041de:	4611      	mov	r1, r2
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff ff5f 	bl	80040a4 <__NVIC_SetPriority>
}
 80041e6:	bf00      	nop
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b082      	sub	sp, #8
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	4603      	mov	r3, r0
 80041f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7ff ff35 	bl	800406c <__NVIC_EnableIRQ>
}
 8004202:	bf00      	nop
 8004204:	3708      	adds	r7, #8
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b082      	sub	sp, #8
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7ff ffa2 	bl	800415c <SysTick_Config>
 8004218:	4603      	mov	r3, r0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800422e:	2300      	movs	r3, #0
 8004230:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004232:	e16f      	b.n	8004514 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	2101      	movs	r1, #1
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	fa01 f303 	lsl.w	r3, r1, r3
 8004240:	4013      	ands	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 8161 	beq.w	800450e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 0303 	and.w	r3, r3, #3
 8004254:	2b01      	cmp	r3, #1
 8004256:	d005      	beq.n	8004264 <HAL_GPIO_Init+0x40>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 0303 	and.w	r3, r3, #3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d130      	bne.n	80042c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	2203      	movs	r2, #3
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	4013      	ands	r3, r2
 800427a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	68da      	ldr	r2, [r3, #12]
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	4313      	orrs	r3, r2
 800428c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800429a:	2201      	movs	r2, #1
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	43db      	mvns	r3, r3
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4013      	ands	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	091b      	lsrs	r3, r3, #4
 80042b0:	f003 0201 	and.w	r2, r3, #1
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d017      	beq.n	8004302 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	2203      	movs	r2, #3
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	43db      	mvns	r3, r3
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	4013      	ands	r3, r2
 80042e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d123      	bne.n	8004356 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	08da      	lsrs	r2, r3, #3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3208      	adds	r2, #8
 8004316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800431a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	220f      	movs	r2, #15
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	43db      	mvns	r3, r3
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	4013      	ands	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	691a      	ldr	r2, [r3, #16]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	08da      	lsrs	r2, r3, #3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	3208      	adds	r2, #8
 8004350:	6939      	ldr	r1, [r7, #16]
 8004352:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	2203      	movs	r2, #3
 8004362:	fa02 f303 	lsl.w	r3, r2, r3
 8004366:	43db      	mvns	r3, r3
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	4013      	ands	r3, r2
 800436c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f003 0203 	and.w	r2, r3, #3
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 80bb 	beq.w	800450e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004398:	2300      	movs	r3, #0
 800439a:	60bb      	str	r3, [r7, #8]
 800439c:	4b64      	ldr	r3, [pc, #400]	@ (8004530 <HAL_GPIO_Init+0x30c>)
 800439e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a0:	4a63      	ldr	r2, [pc, #396]	@ (8004530 <HAL_GPIO_Init+0x30c>)
 80043a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80043a8:	4b61      	ldr	r3, [pc, #388]	@ (8004530 <HAL_GPIO_Init+0x30c>)
 80043aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043b0:	60bb      	str	r3, [r7, #8]
 80043b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80043b4:	4a5f      	ldr	r2, [pc, #380]	@ (8004534 <HAL_GPIO_Init+0x310>)
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	089b      	lsrs	r3, r3, #2
 80043ba:	3302      	adds	r3, #2
 80043bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f003 0303 	and.w	r3, r3, #3
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	220f      	movs	r2, #15
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	43db      	mvns	r3, r3
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4013      	ands	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a57      	ldr	r2, [pc, #348]	@ (8004538 <HAL_GPIO_Init+0x314>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d031      	beq.n	8004444 <HAL_GPIO_Init+0x220>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a56      	ldr	r2, [pc, #344]	@ (800453c <HAL_GPIO_Init+0x318>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d02b      	beq.n	8004440 <HAL_GPIO_Init+0x21c>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a55      	ldr	r2, [pc, #340]	@ (8004540 <HAL_GPIO_Init+0x31c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d025      	beq.n	800443c <HAL_GPIO_Init+0x218>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a54      	ldr	r2, [pc, #336]	@ (8004544 <HAL_GPIO_Init+0x320>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d01f      	beq.n	8004438 <HAL_GPIO_Init+0x214>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a53      	ldr	r2, [pc, #332]	@ (8004548 <HAL_GPIO_Init+0x324>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d019      	beq.n	8004434 <HAL_GPIO_Init+0x210>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a52      	ldr	r2, [pc, #328]	@ (800454c <HAL_GPIO_Init+0x328>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d013      	beq.n	8004430 <HAL_GPIO_Init+0x20c>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a51      	ldr	r2, [pc, #324]	@ (8004550 <HAL_GPIO_Init+0x32c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00d      	beq.n	800442c <HAL_GPIO_Init+0x208>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a50      	ldr	r2, [pc, #320]	@ (8004554 <HAL_GPIO_Init+0x330>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d007      	beq.n	8004428 <HAL_GPIO_Init+0x204>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a4f      	ldr	r2, [pc, #316]	@ (8004558 <HAL_GPIO_Init+0x334>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d101      	bne.n	8004424 <HAL_GPIO_Init+0x200>
 8004420:	2308      	movs	r3, #8
 8004422:	e010      	b.n	8004446 <HAL_GPIO_Init+0x222>
 8004424:	2309      	movs	r3, #9
 8004426:	e00e      	b.n	8004446 <HAL_GPIO_Init+0x222>
 8004428:	2307      	movs	r3, #7
 800442a:	e00c      	b.n	8004446 <HAL_GPIO_Init+0x222>
 800442c:	2306      	movs	r3, #6
 800442e:	e00a      	b.n	8004446 <HAL_GPIO_Init+0x222>
 8004430:	2305      	movs	r3, #5
 8004432:	e008      	b.n	8004446 <HAL_GPIO_Init+0x222>
 8004434:	2304      	movs	r3, #4
 8004436:	e006      	b.n	8004446 <HAL_GPIO_Init+0x222>
 8004438:	2303      	movs	r3, #3
 800443a:	e004      	b.n	8004446 <HAL_GPIO_Init+0x222>
 800443c:	2302      	movs	r3, #2
 800443e:	e002      	b.n	8004446 <HAL_GPIO_Init+0x222>
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <HAL_GPIO_Init+0x222>
 8004444:	2300      	movs	r3, #0
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	f002 0203 	and.w	r2, r2, #3
 800444c:	0092      	lsls	r2, r2, #2
 800444e:	4093      	lsls	r3, r2
 8004450:	461a      	mov	r2, r3
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004458:	4936      	ldr	r1, [pc, #216]	@ (8004534 <HAL_GPIO_Init+0x310>)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	089b      	lsrs	r3, r3, #2
 800445e:	3302      	adds	r3, #2
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004466:	4b3d      	ldr	r3, [pc, #244]	@ (800455c <HAL_GPIO_Init+0x338>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	43db      	mvns	r3, r3
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4013      	ands	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800448a:	4a34      	ldr	r2, [pc, #208]	@ (800455c <HAL_GPIO_Init+0x338>)
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004490:	4b32      	ldr	r3, [pc, #200]	@ (800455c <HAL_GPIO_Init+0x338>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	43db      	mvns	r3, r3
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4013      	ands	r3, r2
 800449e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80044b4:	4a29      	ldr	r2, [pc, #164]	@ (800455c <HAL_GPIO_Init+0x338>)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044ba:	4b28      	ldr	r3, [pc, #160]	@ (800455c <HAL_GPIO_Init+0x338>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	43db      	mvns	r3, r3
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	4013      	ands	r3, r2
 80044c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80044de:	4a1f      	ldr	r2, [pc, #124]	@ (800455c <HAL_GPIO_Init+0x338>)
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044e4:	4b1d      	ldr	r3, [pc, #116]	@ (800455c <HAL_GPIO_Init+0x338>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4013      	ands	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004508:	4a14      	ldr	r2, [pc, #80]	@ (800455c <HAL_GPIO_Init+0x338>)
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	3301      	adds	r3, #1
 8004512:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	fa22 f303 	lsr.w	r3, r2, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	f47f ae88 	bne.w	8004234 <HAL_GPIO_Init+0x10>
  }
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop
 8004528:	371c      	adds	r7, #28
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr
 8004530:	40023800 	.word	0x40023800
 8004534:	40013800 	.word	0x40013800
 8004538:	40020000 	.word	0x40020000
 800453c:	40020400 	.word	0x40020400
 8004540:	40020800 	.word	0x40020800
 8004544:	40020c00 	.word	0x40020c00
 8004548:	40021000 	.word	0x40021000
 800454c:	40021400 	.word	0x40021400
 8004550:	40021800 	.word	0x40021800
 8004554:	40021c00 	.word	0x40021c00
 8004558:	40022000 	.word	0x40022000
 800455c:	40013c00 	.word	0x40013c00

08004560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	807b      	strh	r3, [r7, #2]
 800456c:	4613      	mov	r3, r2
 800456e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004570:	787b      	ldrb	r3, [r7, #1]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004576:	887a      	ldrh	r2, [r7, #2]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800457c:	e003      	b.n	8004586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800457e:	887b      	ldrh	r3, [r7, #2]
 8004580:	041a      	lsls	r2, r3, #16
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	619a      	str	r2, [r3, #24]
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	bc80      	pop	{r7}
 800458e:	4770      	bx	lr

08004590 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045a2:	887a      	ldrh	r2, [r7, #2]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4013      	ands	r3, r2
 80045a8:	041a      	lsls	r2, r3, #16
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	43d9      	mvns	r1, r3
 80045ae:	887b      	ldrh	r3, [r7, #2]
 80045b0:	400b      	ands	r3, r1
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	619a      	str	r2, [r3, #24]
}
 80045b8:	bf00      	nop
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr

080045c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045c4:	b08f      	sub	sp, #60	@ 0x3c
 80045c6:	af0a      	add	r7, sp, #40	@ 0x28
 80045c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e10f      	b.n	80047f4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f006 f8b8 	bl	800a764 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2203      	movs	r2, #3
 80045f8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004604:	2b00      	cmp	r3, #0
 8004606:	d102      	bne.n	800460e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f003 f900 	bl	8007818 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	603b      	str	r3, [r7, #0]
 800461e:	687e      	ldr	r6, [r7, #4]
 8004620:	466d      	mov	r5, sp
 8004622:	f106 0410 	add.w	r4, r6, #16
 8004626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800462a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800462c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800462e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004632:	e885 0003 	stmia.w	r5, {r0, r1}
 8004636:	1d33      	adds	r3, r6, #4
 8004638:	cb0e      	ldmia	r3, {r1, r2, r3}
 800463a:	6838      	ldr	r0, [r7, #0]
 800463c:	f002 ffe2 	bl	8007604 <USB_CoreInit>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d005      	beq.n	8004652 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2202      	movs	r2, #2
 800464a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e0d0      	b.n	80047f4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	2100      	movs	r1, #0
 8004658:	4618      	mov	r0, r3
 800465a:	f003 f8ed 	bl	8007838 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800465e:	2300      	movs	r3, #0
 8004660:	73fb      	strb	r3, [r7, #15]
 8004662:	e04a      	b.n	80046fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004664:	7bfa      	ldrb	r2, [r7, #15]
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	4613      	mov	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	4413      	add	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	333d      	adds	r3, #61	@ 0x3d
 8004674:	2201      	movs	r2, #1
 8004676:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004678:	7bfa      	ldrb	r2, [r7, #15]
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	4613      	mov	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	4413      	add	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	333c      	adds	r3, #60	@ 0x3c
 8004688:	7bfa      	ldrb	r2, [r7, #15]
 800468a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800468c:	7bfa      	ldrb	r2, [r7, #15]
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	b298      	uxth	r0, r3
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	4613      	mov	r3, r2
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	3356      	adds	r3, #86	@ 0x56
 80046a0:	4602      	mov	r2, r0
 80046a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046a4:	7bfa      	ldrb	r2, [r7, #15]
 80046a6:	6879      	ldr	r1, [r7, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	3340      	adds	r3, #64	@ 0x40
 80046b4:	2200      	movs	r2, #0
 80046b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046b8:	7bfa      	ldrb	r2, [r7, #15]
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	3344      	adds	r3, #68	@ 0x44
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80046cc:	7bfa      	ldrb	r2, [r7, #15]
 80046ce:	6879      	ldr	r1, [r7, #4]
 80046d0:	4613      	mov	r3, r2
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4413      	add	r3, r2
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	440b      	add	r3, r1
 80046da:	3348      	adds	r3, #72	@ 0x48
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046e0:	7bfa      	ldrb	r2, [r7, #15]
 80046e2:	6879      	ldr	r1, [r7, #4]
 80046e4:	4613      	mov	r3, r2
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	334c      	adds	r3, #76	@ 0x4c
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
 80046f6:	3301      	adds	r3, #1
 80046f8:	73fb      	strb	r3, [r7, #15]
 80046fa:	7bfa      	ldrb	r2, [r7, #15]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	429a      	cmp	r2, r3
 8004702:	d3af      	bcc.n	8004664 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004704:	2300      	movs	r3, #0
 8004706:	73fb      	strb	r3, [r7, #15]
 8004708:	e044      	b.n	8004794 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800470a:	7bfa      	ldrb	r2, [r7, #15]
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 800471c:	2200      	movs	r2, #0
 800471e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004720:	7bfa      	ldrb	r2, [r7, #15]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8004732:	7bfa      	ldrb	r2, [r7, #15]
 8004734:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004736:	7bfa      	ldrb	r2, [r7, #15]
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	4613      	mov	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004748:	2200      	movs	r2, #0
 800474a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800474c:	7bfa      	ldrb	r2, [r7, #15]
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	4613      	mov	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004762:	7bfa      	ldrb	r2, [r7, #15]
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	00db      	lsls	r3, r3, #3
 800476a:	4413      	add	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004778:	7bfa      	ldrb	r2, [r7, #15]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	3301      	adds	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
 8004794:	7bfa      	ldrb	r2, [r7, #15]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	429a      	cmp	r2, r3
 800479c:	d3b5      	bcc.n	800470a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	687e      	ldr	r6, [r7, #4]
 80047a6:	466d      	mov	r5, sp
 80047a8:	f106 0410 	add.w	r4, r6, #16
 80047ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80047bc:	1d33      	adds	r3, r6, #4
 80047be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047c0:	6838      	ldr	r0, [r7, #0]
 80047c2:	f003 f885 	bl	80078d0 <USB_DevInit>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d005      	beq.n	80047d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e00d      	b.n	80047f4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f004 f8b7 	bl	8008960 <USB_DevDisconnect>

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047fc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800480a:	2b01      	cmp	r3, #1
 800480c:	d101      	bne.n	8004812 <HAL_PCD_Start+0x16>
 800480e:	2302      	movs	r3, #2
 8004810:	e012      	b.n	8004838 <HAL_PCD_Start+0x3c>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4618      	mov	r0, r3
 8004820:	f002 ffea 	bl	80077f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f004 f879 	bl	8008920 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004840:	b590      	push	{r4, r7, lr}
 8004842:	b08d      	sub	sp, #52	@ 0x34
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f004 f930 	bl	8008abc <USB_GetMode>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	f040 847c 	bne.w	800515c <HAL_PCD_IRQHandler+0x91c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f004 f899 	bl	80089a0 <USB_ReadInterrupts>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 8472 	beq.w	800515a <HAL_PCD_IRQHandler+0x91a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	0a1b      	lsrs	r3, r3, #8
 8004880:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f004 f886 	bl	80089a0 <USB_ReadInterrupts>
 8004894:	4603      	mov	r3, r0
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b02      	cmp	r3, #2
 800489c:	d107      	bne.n	80048ae <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695a      	ldr	r2, [r3, #20]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f002 0202 	and.w	r2, r2, #2
 80048ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f004 f874 	bl	80089a0 <USB_ReadInterrupts>
 80048b8:	4603      	mov	r3, r0
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	2b10      	cmp	r3, #16
 80048c0:	d161      	bne.n	8004986 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699a      	ldr	r2, [r3, #24]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0210 	bic.w	r2, r2, #16
 80048d0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80048d8:	69bb      	ldr	r3, [r7, #24]
 80048da:	f003 020f 	and.w	r2, r3, #15
 80048de:	4613      	mov	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	4413      	add	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	4413      	add	r3, r2
 80048ee:	3304      	adds	r3, #4
 80048f0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	0c5b      	lsrs	r3, r3, #17
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d124      	bne.n	8004948 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004904:	4013      	ands	r3, r2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d035      	beq.n	8004976 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	091b      	lsrs	r3, r3, #4
 8004912:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004914:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004918:	b29b      	uxth	r3, r3
 800491a:	461a      	mov	r2, r3
 800491c:	6a38      	ldr	r0, [r7, #32]
 800491e:	f003 feb1 	bl	8008684 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	091b      	lsrs	r3, r3, #4
 800492a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800492e:	441a      	add	r2, r3
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	695a      	ldr	r2, [r3, #20]
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	091b      	lsrs	r3, r3, #4
 800493c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004940:	441a      	add	r2, r3
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	615a      	str	r2, [r3, #20]
 8004946:	e016      	b.n	8004976 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	0c5b      	lsrs	r3, r3, #17
 800494c:	f003 030f 	and.w	r3, r3, #15
 8004950:	2b06      	cmp	r3, #6
 8004952:	d110      	bne.n	8004976 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800495a:	2208      	movs	r2, #8
 800495c:	4619      	mov	r1, r3
 800495e:	6a38      	ldr	r0, [r7, #32]
 8004960:	f003 fe90 	bl	8008684 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	695a      	ldr	r2, [r3, #20]
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	091b      	lsrs	r3, r3, #4
 800496c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004970:	441a      	add	r2, r3
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699a      	ldr	r2, [r3, #24]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0210 	orr.w	r2, r2, #16
 8004984:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f004 f808 	bl	80089a0 <USB_ReadInterrupts>
 8004990:	4603      	mov	r3, r0
 8004992:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004996:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800499a:	f040 80a7 	bne.w	8004aec <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800499e:	2300      	movs	r3, #0
 80049a0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f004 f80c 	bl	80089c4 <USB_ReadDevAllOutEpInterrupt>
 80049ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80049ae:	e099      	b.n	8004ae4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80049b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 808e 	beq.w	8004ad8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	4611      	mov	r1, r2
 80049c6:	4618      	mov	r0, r3
 80049c8:	f004 f82e 	bl	8008a28 <USB_ReadDevOutEPInterrupt>
 80049cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00c      	beq.n	80049f2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80049d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e4:	461a      	mov	r2, r3
 80049e6:	2301      	movs	r3, #1
 80049e8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80049ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 fe95 	bl	800571c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00c      	beq.n	8004a16 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80049fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a08:	461a      	mov	r2, r3
 8004a0a:	2308      	movs	r3, #8
 8004a0c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004a0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 ff6b 	bl	80058ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f003 0310 	and.w	r3, r3, #16
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d008      	beq.n	8004a32 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	2310      	movs	r3, #16
 8004a30:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d030      	beq.n	8004a9e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a44:	2b80      	cmp	r3, #128	@ 0x80
 8004a46:	d109      	bne.n	8004a5c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	69fa      	ldr	r2, [r7, #28]
 8004a52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a5a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004a5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a5e:	4613      	mov	r3, r2
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3304      	adds	r3, #4
 8004a70:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	78db      	ldrb	r3, [r3, #3]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d108      	bne.n	8004a8c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	4619      	mov	r1, r3
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f005 ff80 	bl	800a98c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8e:	015a      	lsls	r2, r3, #5
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	4413      	add	r3, r2
 8004a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a98:	461a      	mov	r2, r3
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	2320      	movs	r3, #32
 8004ab8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d009      	beq.n	8004ad8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ad6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ada:	3301      	adds	r3, #1
 8004adc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae0:	085b      	lsrs	r3, r3, #1
 8004ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f47f af62 	bne.w	80049b0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f003 ff55 	bl	80089a0 <USB_ReadInterrupts>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004afc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004b00:	f040 80db 	bne.w	8004cba <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f003 ff74 	bl	80089f6 <USB_ReadDevAllInEpInterrupt>
 8004b0e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004b14:	e0cd      	b.n	8004cb2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 80c2 	beq.w	8004ca6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b28:	b2d2      	uxtb	r2, r2
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f003 ff98 	bl	8008a62 <USB_ReadDevInEPInterrupt>
 8004b32:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d057      	beq.n	8004bee <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	2201      	movs	r2, #1
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	43db      	mvns	r3, r3
 8004b58:	69f9      	ldr	r1, [r7, #28]
 8004b5a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b5e:	4013      	ands	r3, r2
 8004b60:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	015a      	lsls	r2, r3, #5
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	4413      	add	r3, r2
 8004b6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b6e:	461a      	mov	r2, r3
 8004b70:	2301      	movs	r3, #1
 8004b72:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d132      	bne.n	8004be2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b80:	4613      	mov	r3, r2
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	4413      	add	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	3348      	adds	r3, #72	@ 0x48
 8004b8c:	6819      	ldr	r1, [r3, #0]
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b92:	4613      	mov	r3, r2
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4403      	add	r3, r0
 8004b9c:	3344      	adds	r3, #68	@ 0x44
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4419      	add	r1, r3
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4403      	add	r3, r0
 8004bb0:	3348      	adds	r3, #72	@ 0x48
 8004bb2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d113      	bne.n	8004be2 <HAL_PCD_IRQHandler+0x3a2>
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	334c      	adds	r3, #76	@ 0x4c
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d108      	bne.n	8004be2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6818      	ldr	r0, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004bda:	461a      	mov	r2, r3
 8004bdc:	2101      	movs	r1, #1
 8004bde:	f003 ff9d 	bl	8008b1c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	4619      	mov	r1, r3
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f005 fe4a 	bl	800a882 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c04:	461a      	mov	r2, r3
 8004c06:	2308      	movs	r3, #8
 8004c08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f003 0310 	and.w	r3, r3, #16
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d008      	beq.n	8004c26 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c20:	461a      	mov	r2, r3
 8004c22:	2310      	movs	r3, #16
 8004c24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d008      	beq.n	8004c42 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	2340      	movs	r3, #64	@ 0x40
 8004c40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d023      	beq.n	8004c94 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004c4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c4e:	6a38      	ldr	r0, [r7, #32]
 8004c50:	f002 ff98 	bl	8007b84 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c56:	4613      	mov	r3, r2
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	4413      	add	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	3338      	adds	r3, #56	@ 0x38
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	4413      	add	r3, r2
 8004c64:	3304      	adds	r3, #4
 8004c66:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	78db      	ldrb	r3, [r3, #3]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d108      	bne.n	8004c82 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2200      	movs	r2, #0
 8004c74:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f005 fe97 	bl	800a9b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c8e:	461a      	mov	r2, r3
 8004c90:	2302      	movs	r3, #2
 8004c92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004c9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fcae 	bl	8005602 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca8:	3301      	adds	r3, #1
 8004caa:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cae:	085b      	lsrs	r3, r3, #1
 8004cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f47f af2e 	bne.w	8004b16 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f003 fe6e 	bl	80089a0 <USB_ReadInterrupts>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cce:	d114      	bne.n	8004cfa <HAL_PCD_IRQHandler+0x4ba>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	69fa      	ldr	r2, [r7, #28]
 8004cda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cde:	f023 0301 	bic.w	r3, r3, #1
 8004ce2:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f005 fe43 	bl	800a970 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695a      	ldr	r2, [r3, #20]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004cf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f003 fe4e 	bl	80089a0 <USB_ReadInterrupts>
 8004d04:	4603      	mov	r3, r0
 8004d06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d0e:	d112      	bne.n	8004d36 <HAL_PCD_IRQHandler+0x4f6>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d102      	bne.n	8004d26 <HAL_PCD_IRQHandler+0x4e6>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f005 fdff 	bl	800a924 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695a      	ldr	r2, [r3, #20]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004d34:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f003 fe30 	bl	80089a0 <USB_ReadInterrupts>
 8004d40:	4603      	mov	r3, r0
 8004d42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d4a:	f040 80b7 	bne.w	8004ebc <HAL_PCD_IRQHandler+0x67c>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d5c:	f023 0301 	bic.w	r3, r3, #1
 8004d60:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2110      	movs	r1, #16
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f002 ff0b 	bl	8007b84 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d6e:	2300      	movs	r3, #0
 8004d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d72:	e046      	b.n	8004e02 <HAL_PCD_IRQHandler+0x5c2>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d80:	461a      	mov	r2, r3
 8004d82:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d86:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d98:	0151      	lsls	r1, r2, #5
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	440a      	add	r2, r1
 8004d9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004da2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004da6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db4:	461a      	mov	r2, r3
 8004db6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004dba:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dcc:	0151      	lsls	r1, r2, #5
 8004dce:	69fa      	ldr	r2, [r7, #28]
 8004dd0:	440a      	add	r2, r1
 8004dd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004dda:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dec:	0151      	lsls	r1, r2, #5
 8004dee:	69fa      	ldr	r2, [r7, #28]
 8004df0:	440a      	add	r2, r1
 8004df2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004df6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004dfa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dfe:	3301      	adds	r3, #1
 8004e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d3b3      	bcc.n	8004d74 <HAL_PCD_IRQHandler+0x534>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	69fa      	ldr	r2, [r7, #28]
 8004e16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e1a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004e1e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d016      	beq.n	8004e56 <HAL_PCD_IRQHandler+0x616>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e32:	69fa      	ldr	r2, [r7, #28]
 8004e34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e38:	f043 030b 	orr.w	r3, r3, #11
 8004e3c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e4e:	f043 030b 	orr.w	r3, r3, #11
 8004e52:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e54:	e015      	b.n	8004e82 <HAL_PCD_IRQHandler+0x642>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	69fa      	ldr	r2, [r7, #28]
 8004e60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e64:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004e68:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004e6c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	69fa      	ldr	r2, [r7, #28]
 8004e78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e7c:	f043 030b 	orr.w	r3, r3, #11
 8004e80:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69fa      	ldr	r2, [r7, #28]
 8004e8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e90:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004e94:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f003 fe38 	bl	8008b1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	695a      	ldr	r2, [r3, #20]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004eba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f003 fd6d 	bl	80089a0 <USB_ReadInterrupts>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ecc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ed0:	d124      	bne.n	8004f1c <HAL_PCD_IRQHandler+0x6dc>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f003 fdfd 	bl	8008ad6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f002 fecb 	bl	8007c7c <USB_GetDevSpeed>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	461a      	mov	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681c      	ldr	r4, [r3, #0]
 8004ef2:	f001 f99d 	bl	8006230 <HAL_RCC_GetHCLKFreq>
 8004ef6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	461a      	mov	r2, r3
 8004f00:	4620      	mov	r0, r4
 8004f02:	f002 fbd7 	bl	80076b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f005 fce3 	bl	800a8d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695a      	ldr	r2, [r3, #20]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004f1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f003 fd3d 	bl	80089a0 <USB_ReadInterrupts>
 8004f26:	4603      	mov	r3, r0
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d10a      	bne.n	8004f46 <HAL_PCD_IRQHandler+0x706>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f005 fcc0 	bl	800a8b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695a      	ldr	r2, [r3, #20]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f002 0208 	and.w	r2, r2, #8
 8004f44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f003 fd28 	bl	80089a0 <USB_ReadInterrupts>
 8004f50:	4603      	mov	r3, r0
 8004f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f56:	2b80      	cmp	r3, #128	@ 0x80
 8004f58:	d122      	bne.n	8004fa0 <HAL_PCD_IRQHandler+0x760>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f66:	2301      	movs	r3, #1
 8004f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f6a:	e014      	b.n	8004f96 <HAL_PCD_IRQHandler+0x756>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004f6c:	6879      	ldr	r1, [r7, #4]
 8004f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f70:	4613      	mov	r3, r2
 8004f72:	00db      	lsls	r3, r3, #3
 8004f74:	4413      	add	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d105      	bne.n	8004f90 <HAL_PCD_IRQHandler+0x750>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	4619      	mov	r1, r3
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fb08 	bl	80055a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f92:	3301      	adds	r3, #1
 8004f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d3e5      	bcc.n	8004f6c <HAL_PCD_IRQHandler+0x72c>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f003 fcfb 	bl	80089a0 <USB_ReadInterrupts>
 8004faa:	4603      	mov	r3, r0
 8004fac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fb0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fb4:	d13b      	bne.n	800502e <HAL_PCD_IRQHandler+0x7ee>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fba:	e02b      	b.n	8005014 <HAL_PCD_IRQHandler+0x7d4>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	3340      	adds	r3, #64	@ 0x40
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d115      	bne.n	800500e <HAL_PCD_IRQHandler+0x7ce>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004fe2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	da12      	bge.n	800500e <HAL_PCD_IRQHandler+0x7ce>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004fe8:	6879      	ldr	r1, [r7, #4]
 8004fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fec:	4613      	mov	r3, r2
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	333f      	adds	r3, #63	@ 0x3f
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005004:	b2db      	uxtb	r3, r3
 8005006:	4619      	mov	r1, r3
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fac9 	bl	80055a0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800500e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005010:	3301      	adds	r3, #1
 8005012:	627b      	str	r3, [r7, #36]	@ 0x24
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800501a:	429a      	cmp	r2, r3
 800501c:	d3ce      	bcc.n	8004fbc <HAL_PCD_IRQHandler+0x77c>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	695a      	ldr	r2, [r3, #20]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800502c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f003 fcb4 	bl	80089a0 <USB_ReadInterrupts>
 8005038:	4603      	mov	r3, r0
 800503a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800503e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005042:	d155      	bne.n	80050f0 <HAL_PCD_IRQHandler+0x8b0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005044:	2301      	movs	r3, #1
 8005046:	627b      	str	r3, [r7, #36]	@ 0x24
 8005048:	e045      	b.n	80050d6 <HAL_PCD_IRQHandler+0x896>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800505e:	4613      	mov	r3, r2
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	4413      	add	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	440b      	add	r3, r1
 8005068:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d12e      	bne.n	80050d0 <HAL_PCD_IRQHandler+0x890>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005072:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005074:	2b00      	cmp	r3, #0
 8005076:	da2b      	bge.n	80050d0 <HAL_PCD_IRQHandler+0x890>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8005084:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005088:	429a      	cmp	r2, r3
 800508a:	d121      	bne.n	80050d0 <HAL_PCD_IRQHandler+0x890>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005090:	4613      	mov	r3, r2
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	4413      	add	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	440b      	add	r3, r1
 800509a:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800509e:	2201      	movs	r2, #1
 80050a0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10a      	bne.n	80050d0 <HAL_PCD_IRQHandler+0x890>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050c8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80050cc:	6053      	str	r3, [r2, #4]
            break;
 80050ce:	e007      	b.n	80050e0 <HAL_PCD_IRQHandler+0x8a0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d2:	3301      	adds	r3, #1
 80050d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050dc:	429a      	cmp	r2, r3
 80050de:	d3b4      	bcc.n	800504a <HAL_PCD_IRQHandler+0x80a>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695a      	ldr	r2, [r3, #20]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80050ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f003 fc53 	bl	80089a0 <USB_ReadInterrupts>
 80050fa:	4603      	mov	r3, r0
 80050fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005104:	d10a      	bne.n	800511c <HAL_PCD_IRQHandler+0x8dc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f005 fc64 	bl	800a9d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695a      	ldr	r2, [r3, #20]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800511a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4618      	mov	r0, r3
 8005122:	f003 fc3d 	bl	80089a0 <USB_ReadInterrupts>
 8005126:	4603      	mov	r3, r0
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b04      	cmp	r3, #4
 800512e:	d115      	bne.n	800515c <HAL_PCD_IRQHandler+0x91c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	f003 0304 	and.w	r3, r3, #4
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <HAL_PCD_IRQHandler+0x908>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f005 fc54 	bl	800a9f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6859      	ldr	r1, [r3, #4]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	430a      	orrs	r2, r1
 8005156:	605a      	str	r2, [r3, #4]
 8005158:	e000      	b.n	800515c <HAL_PCD_IRQHandler+0x91c>
      return;
 800515a:	bf00      	nop
    }
  }
}
 800515c:	3734      	adds	r7, #52	@ 0x34
 800515e:	46bd      	mov	sp, r7
 8005160:	bd90      	pop	{r4, r7, pc}

08005162 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	460b      	mov	r3, r1
 800516c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_PCD_SetAddress+0x1a>
 8005178:	2302      	movs	r3, #2
 800517a:	e013      	b.n	80051a4 <HAL_PCD_SetAddress+0x42>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	78fa      	ldrb	r2, [r7, #3]
 8005188:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	78fa      	ldrb	r2, [r7, #3]
 8005192:	4611      	mov	r1, r2
 8005194:	4618      	mov	r0, r3
 8005196:	f003 fb9e 	bl	80088d6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	4608      	mov	r0, r1
 80051b6:	4611      	mov	r1, r2
 80051b8:	461a      	mov	r2, r3
 80051ba:	4603      	mov	r3, r0
 80051bc:	70fb      	strb	r3, [r7, #3]
 80051be:	460b      	mov	r3, r1
 80051c0:	803b      	strh	r3, [r7, #0]
 80051c2:	4613      	mov	r3, r2
 80051c4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80051ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	da0f      	bge.n	80051f2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051d2:	78fb      	ldrb	r3, [r7, #3]
 80051d4:	f003 020f 	and.w	r2, r3, #15
 80051d8:	4613      	mov	r3, r2
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	3338      	adds	r3, #56	@ 0x38
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	4413      	add	r3, r2
 80051e6:	3304      	adds	r3, #4
 80051e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	705a      	strb	r2, [r3, #1]
 80051f0:	e00f      	b.n	8005212 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051f2:	78fb      	ldrb	r3, [r7, #3]
 80051f4:	f003 020f 	and.w	r2, r3, #15
 80051f8:	4613      	mov	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	4413      	add	r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	4413      	add	r3, r2
 8005208:	3304      	adds	r3, #4
 800520a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005212:	78fb      	ldrb	r3, [r7, #3]
 8005214:	f003 030f 	and.w	r3, r3, #15
 8005218:	b2da      	uxtb	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800521e:	883a      	ldrh	r2, [r7, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	78ba      	ldrb	r2, [r7, #2]
 8005228:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	785b      	ldrb	r3, [r3, #1]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d004      	beq.n	800523c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800523c:	78bb      	ldrb	r3, [r7, #2]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d102      	bne.n	8005248 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800524e:	2b01      	cmp	r3, #1
 8005250:	d101      	bne.n	8005256 <HAL_PCD_EP_Open+0xaa>
 8005252:	2302      	movs	r3, #2
 8005254:	e00e      	b.n	8005274 <HAL_PCD_EP_Open+0xc8>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68f9      	ldr	r1, [r7, #12]
 8005264:	4618      	mov	r0, r3
 8005266:	f002 fd2d 	bl	8007cc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8005272:	7afb      	ldrb	r3, [r7, #11]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	460b      	mov	r3, r1
 8005286:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005288:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800528c:	2b00      	cmp	r3, #0
 800528e:	da0f      	bge.n	80052b0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005290:	78fb      	ldrb	r3, [r7, #3]
 8005292:	f003 020f 	and.w	r2, r3, #15
 8005296:	4613      	mov	r3, r2
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	4413      	add	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	3338      	adds	r3, #56	@ 0x38
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	4413      	add	r3, r2
 80052a4:	3304      	adds	r3, #4
 80052a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2201      	movs	r2, #1
 80052ac:	705a      	strb	r2, [r3, #1]
 80052ae:	e00f      	b.n	80052d0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	f003 020f 	and.w	r2, r3, #15
 80052b6:	4613      	mov	r3, r2
 80052b8:	00db      	lsls	r3, r3, #3
 80052ba:	4413      	add	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	4413      	add	r3, r2
 80052c6:	3304      	adds	r3, #4
 80052c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_PCD_EP_Close+0x6e>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e00e      	b.n	8005308 <HAL_PCD_EP_Close+0x8c>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68f9      	ldr	r1, [r7, #12]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f002 fd69 	bl	8007dd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	607a      	str	r2, [r7, #4]
 800531a:	603b      	str	r3, [r7, #0]
 800531c:	460b      	mov	r3, r1
 800531e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005320:	7afb      	ldrb	r3, [r7, #11]
 8005322:	f003 020f 	and.w	r2, r3, #15
 8005326:	4613      	mov	r3, r2
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	4413      	add	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4413      	add	r3, r2
 8005336:	3304      	adds	r3, #4
 8005338:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	2200      	movs	r2, #0
 800534a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	2200      	movs	r2, #0
 8005350:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005352:	7afb      	ldrb	r3, [r7, #11]
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	b2da      	uxtb	r2, r3
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d102      	bne.n	800536c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6818      	ldr	r0, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	b2db      	uxtb	r3, r3
 8005376:	461a      	mov	r2, r3
 8005378:	6979      	ldr	r1, [r7, #20]
 800537a:	f002 fe05 	bl	8007f88 <USB_EPStartXfer>

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	460b      	mov	r3, r1
 8005392:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005394:	78fb      	ldrb	r3, [r7, #3]
 8005396:	f003 020f 	and.w	r2, r3, #15
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	4613      	mov	r3, r2
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	4413      	add	r3, r2
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	440b      	add	r3, r1
 80053a6:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 80053aa:	681b      	ldr	r3, [r3, #0]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bc80      	pop	{r7}
 80053b4:	4770      	bx	lr

080053b6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b086      	sub	sp, #24
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	60f8      	str	r0, [r7, #12]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]
 80053c2:	460b      	mov	r3, r1
 80053c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053c6:	7afb      	ldrb	r3, [r7, #11]
 80053c8:	f003 020f 	and.w	r2, r3, #15
 80053cc:	4613      	mov	r3, r2
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	4413      	add	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	3338      	adds	r3, #56	@ 0x38
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4413      	add	r3, r2
 80053da:	3304      	adds	r3, #4
 80053dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2200      	movs	r2, #0
 80053ee:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	2201      	movs	r2, #1
 80053f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053f6:	7afb      	ldrb	r3, [r7, #11]
 80053f8:	f003 030f 	and.w	r3, r3, #15
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d102      	bne.n	8005410 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6818      	ldr	r0, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	b2db      	uxtb	r3, r3
 800541a:	461a      	mov	r2, r3
 800541c:	6979      	ldr	r1, [r7, #20]
 800541e:	f002 fdb3 	bl	8007f88 <USB_EPStartXfer>

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	460b      	mov	r3, r1
 8005436:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	f003 020f 	and.w	r2, r3, #15
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	429a      	cmp	r2, r3
 8005444:	d901      	bls.n	800544a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e050      	b.n	80054ec <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800544a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800544e:	2b00      	cmp	r3, #0
 8005450:	da0f      	bge.n	8005472 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005452:	78fb      	ldrb	r3, [r7, #3]
 8005454:	f003 020f 	and.w	r2, r3, #15
 8005458:	4613      	mov	r3, r2
 800545a:	00db      	lsls	r3, r3, #3
 800545c:	4413      	add	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	3338      	adds	r3, #56	@ 0x38
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	4413      	add	r3, r2
 8005466:	3304      	adds	r3, #4
 8005468:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2201      	movs	r2, #1
 800546e:	705a      	strb	r2, [r3, #1]
 8005470:	e00d      	b.n	800548e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005472:	78fa      	ldrb	r2, [r7, #3]
 8005474:	4613      	mov	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	4413      	add	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	4413      	add	r3, r2
 8005484:	3304      	adds	r3, #4
 8005486:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2201      	movs	r2, #1
 8005492:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005494:	78fb      	ldrb	r3, [r7, #3]
 8005496:	f003 030f 	and.w	r3, r3, #15
 800549a:	b2da      	uxtb	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d101      	bne.n	80054ae <HAL_PCD_EP_SetStall+0x82>
 80054aa:	2302      	movs	r3, #2
 80054ac:	e01e      	b.n	80054ec <HAL_PCD_EP_SetStall+0xc0>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68f9      	ldr	r1, [r7, #12]
 80054bc:	4618      	mov	r0, r3
 80054be:	f003 f938 	bl	8008732 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054c2:	78fb      	ldrb	r3, [r7, #3]
 80054c4:	f003 030f 	and.w	r3, r3, #15
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d10a      	bne.n	80054e2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6818      	ldr	r0, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	b2d9      	uxtb	r1, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80054dc:	461a      	mov	r2, r3
 80054de:	f003 fb1d 	bl	8008b1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	460b      	mov	r3, r1
 80054fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	f003 020f 	and.w	r2, r3, #15
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	429a      	cmp	r2, r3
 800550c:	d901      	bls.n	8005512 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e042      	b.n	8005598 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005512:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005516:	2b00      	cmp	r3, #0
 8005518:	da0f      	bge.n	800553a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	f003 020f 	and.w	r2, r3, #15
 8005520:	4613      	mov	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	3338      	adds	r3, #56	@ 0x38
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	4413      	add	r3, r2
 800552e:	3304      	adds	r3, #4
 8005530:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2201      	movs	r2, #1
 8005536:	705a      	strb	r2, [r3, #1]
 8005538:	e00f      	b.n	800555a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	f003 020f 	and.w	r2, r3, #15
 8005540:	4613      	mov	r3, r2
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	4413      	add	r3, r2
 8005550:	3304      	adds	r3, #4
 8005552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005560:	78fb      	ldrb	r3, [r7, #3]
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	b2da      	uxtb	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <HAL_PCD_EP_ClrStall+0x86>
 8005576:	2302      	movs	r3, #2
 8005578:	e00e      	b.n	8005598 <HAL_PCD_EP_ClrStall+0xa4>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68f9      	ldr	r1, [r7, #12]
 8005588:	4618      	mov	r0, r3
 800558a:	f003 f93f 	bl	800880c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	460b      	mov	r3, r1
 80055aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80055ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	da0c      	bge.n	80055ce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	f003 020f 	and.w	r2, r3, #15
 80055ba:	4613      	mov	r3, r2
 80055bc:	00db      	lsls	r3, r3, #3
 80055be:	4413      	add	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	3338      	adds	r3, #56	@ 0x38
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	4413      	add	r3, r2
 80055c8:	3304      	adds	r3, #4
 80055ca:	60fb      	str	r3, [r7, #12]
 80055cc:	e00c      	b.n	80055e8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055ce:	78fb      	ldrb	r3, [r7, #3]
 80055d0:	f003 020f 	and.w	r2, r3, #15
 80055d4:	4613      	mov	r3, r2
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	4413      	add	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	4413      	add	r3, r2
 80055e4:	3304      	adds	r3, #4
 80055e6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68f9      	ldr	r1, [r7, #12]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f002 ff62 	bl	80084b8 <USB_EPStopXfer>
 80055f4:	4603      	mov	r3, r0
 80055f6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80055f8:	7afb      	ldrb	r3, [r7, #11]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005602:	b580      	push	{r7, lr}
 8005604:	b08a      	sub	sp, #40	@ 0x28
 8005606:	af02      	add	r7, sp, #8
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	4613      	mov	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	4413      	add	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	3338      	adds	r3, #56	@ 0x38
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	4413      	add	r3, r2
 8005626:	3304      	adds	r3, #4
 8005628:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	695a      	ldr	r2, [r3, #20]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	429a      	cmp	r2, r3
 8005634:	d901      	bls.n	800563a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e06c      	b.n	8005714 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	691a      	ldr	r2, [r3, #16]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	69fa      	ldr	r2, [r7, #28]
 800564c:	429a      	cmp	r2, r3
 800564e:	d902      	bls.n	8005656 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	3303      	adds	r3, #3
 800565a:	089b      	lsrs	r3, r3, #2
 800565c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800565e:	e02b      	b.n	80056b8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	691a      	ldr	r2, [r3, #16]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	429a      	cmp	r2, r3
 8005674:	d902      	bls.n	800567c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	3303      	adds	r3, #3
 8005680:	089b      	lsrs	r3, r3, #2
 8005682:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	68d9      	ldr	r1, [r3, #12]
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	b2da      	uxtb	r2, r3
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005694:	b2db      	uxtb	r3, r3
 8005696:	9300      	str	r3, [sp, #0]
 8005698:	4603      	mov	r3, r0
 800569a:	6978      	ldr	r0, [r7, #20]
 800569c:	f002 ffb5 	bl	800860a <USB_WritePacket>

    ep->xfer_buff  += len;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	441a      	add	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	695a      	ldr	r2, [r3, #20]
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	441a      	add	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d809      	bhi.n	80056e2 <PCD_WriteEmptyTxFifo+0xe0>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	695a      	ldr	r2, [r3, #20]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d203      	bcs.n	80056e2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1be      	bne.n	8005660 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	691a      	ldr	r2, [r3, #16]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d811      	bhi.n	8005712 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	f003 030f 	and.w	r3, r3, #15
 80056f4:	2201      	movs	r2, #1
 80056f6:	fa02 f303 	lsl.w	r3, r2, r3
 80056fa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005702:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	43db      	mvns	r3, r3
 8005708:	6939      	ldr	r1, [r7, #16]
 800570a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800570e:	4013      	ands	r3, r2
 8005710:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3720      	adds	r7, #32
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b088      	sub	sp, #32
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	333c      	adds	r3, #60	@ 0x3c
 8005734:	3304      	adds	r3, #4
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d17b      	bne.n	800584a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f003 0308 	and.w	r3, r3, #8
 8005758:	2b00      	cmp	r3, #0
 800575a:	d015      	beq.n	8005788 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	4a61      	ldr	r2, [pc, #388]	@ (80058e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005760:	4293      	cmp	r3, r2
 8005762:	f240 80b9 	bls.w	80058d8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 80b3 	beq.w	80058d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800577e:	461a      	mov	r2, r3
 8005780:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005784:	6093      	str	r3, [r2, #8]
 8005786:	e0a7      	b.n	80058d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f003 0320 	and.w	r3, r3, #32
 800578e:	2b00      	cmp	r3, #0
 8005790:	d009      	beq.n	80057a6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800579e:	461a      	mov	r2, r3
 80057a0:	2320      	movs	r3, #32
 80057a2:	6093      	str	r3, [r2, #8]
 80057a4:	e098      	b.n	80058d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f040 8093 	bne.w	80058d8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	4a4b      	ldr	r2, [pc, #300]	@ (80058e4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d90f      	bls.n	80057da <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00a      	beq.n	80057da <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057d0:	461a      	mov	r2, r3
 80057d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057d6:	6093      	str	r3, [r2, #8]
 80057d8:	e07e      	b.n	80058d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	4613      	mov	r3, r2
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	4413      	add	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	4413      	add	r3, r2
 80057ec:	3304      	adds	r3, #4
 80057ee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6a1a      	ldr	r2, [r3, #32]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	0159      	lsls	r1, r3, #5
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	440b      	add	r3, r1
 80057fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005806:	1ad2      	subs	r2, r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d114      	bne.n	800583c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d109      	bne.n	800582e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005824:	461a      	mov	r2, r3
 8005826:	2101      	movs	r1, #1
 8005828:	f003 f978 	bl	8008b1c <USB_EP0_OutStart>
 800582c:	e006      	b.n	800583c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	441a      	add	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	4619      	mov	r1, r3
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f005 f802 	bl	800a84c <HAL_PCD_DataOutStageCallback>
 8005848:	e046      	b.n	80058d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	4a26      	ldr	r2, [pc, #152]	@ (80058e8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d124      	bne.n	800589c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d00a      	beq.n	8005872 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005868:	461a      	mov	r2, r3
 800586a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800586e:	6093      	str	r3, [r2, #8]
 8005870:	e032      	b.n	80058d8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f003 0320 	and.w	r3, r3, #32
 8005878:	2b00      	cmp	r3, #0
 800587a:	d008      	beq.n	800588e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005888:	461a      	mov	r2, r3
 800588a:	2320      	movs	r3, #32
 800588c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	b2db      	uxtb	r3, r3
 8005892:	4619      	mov	r1, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f004 ffd9 	bl	800a84c <HAL_PCD_DataOutStageCallback>
 800589a:	e01d      	b.n	80058d8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d114      	bne.n	80058cc <PCD_EP_OutXfrComplete_int+0x1b0>
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	683a      	ldr	r2, [r7, #0]
 80058a6:	4613      	mov	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	4413      	add	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	440b      	add	r3, r1
 80058b0:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d108      	bne.n	80058cc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6818      	ldr	r0, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80058c4:	461a      	mov	r2, r3
 80058c6:	2100      	movs	r1, #0
 80058c8:	f003 f928 	bl	8008b1c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	4619      	mov	r1, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f004 ffba 	bl	800a84c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3720      	adds	r7, #32
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	4f54300a 	.word	0x4f54300a
 80058e8:	4f54310a 	.word	0x4f54310a

080058ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	333c      	adds	r3, #60	@ 0x3c
 8005904:	3304      	adds	r3, #4
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	4a15      	ldr	r2, [pc, #84]	@ (8005974 <PCD_EP_OutSetupPacket_int+0x88>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d90e      	bls.n	8005940 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005928:	2b00      	cmp	r3, #0
 800592a:	d009      	beq.n	8005940 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005938:	461a      	mov	r2, r3
 800593a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800593e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f004 ff71 	bl	800a828 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4a0a      	ldr	r2, [pc, #40]	@ (8005974 <PCD_EP_OutSetupPacket_int+0x88>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d90c      	bls.n	8005968 <PCD_EP_OutSetupPacket_int+0x7c>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d108      	bne.n	8005968 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6818      	ldr	r0, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005960:	461a      	mov	r2, r3
 8005962:	2101      	movs	r1, #1
 8005964:	f003 f8da 	bl	8008b1c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	4f54300a 	.word	0x4f54300a

08005978 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	70fb      	strb	r3, [r7, #3]
 8005984:	4613      	mov	r3, r2
 8005986:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005990:	78fb      	ldrb	r3, [r7, #3]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d107      	bne.n	80059a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005996:	883b      	ldrh	r3, [r7, #0]
 8005998:	0419      	lsls	r1, r3, #16
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80059a4:	e028      	b.n	80059f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ac:	0c1b      	lsrs	r3, r3, #16
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	4413      	add	r3, r2
 80059b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059b4:	2300      	movs	r3, #0
 80059b6:	73fb      	strb	r3, [r7, #15]
 80059b8:	e00d      	b.n	80059d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	3340      	adds	r3, #64	@ 0x40
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	0c1b      	lsrs	r3, r3, #16
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	4413      	add	r3, r2
 80059ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
 80059d2:	3301      	adds	r3, #1
 80059d4:	73fb      	strb	r3, [r7, #15]
 80059d6:	7bfa      	ldrb	r2, [r7, #15]
 80059d8:	78fb      	ldrb	r3, [r7, #3]
 80059da:	3b01      	subs	r3, #1
 80059dc:	429a      	cmp	r2, r3
 80059de:	d3ec      	bcc.n	80059ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80059e0:	883b      	ldrh	r3, [r7, #0]
 80059e2:	0418      	lsls	r0, r3, #16
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6819      	ldr	r1, [r3, #0]
 80059e8:	78fb      	ldrb	r3, [r7, #3]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	4302      	orrs	r2, r0
 80059f0:	3340      	adds	r3, #64	@ 0x40
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bc80      	pop	{r7}
 8005a02:	4770      	bx	lr

08005a04 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	887a      	ldrh	r2, [r7, #2]
 8005a16:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bc80      	pop	{r7}
 8005a22:	4770      	bx	lr

08005a24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08a      	sub	sp, #40	@ 0x28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e23b      	b.n	8005eae <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d050      	beq.n	8005ae4 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a42:	4b9e      	ldr	r3, [pc, #632]	@ (8005cbc <HAL_RCC_OscConfig+0x298>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 030c 	and.w	r3, r3, #12
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d00c      	beq.n	8005a68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a4e:	4b9b      	ldr	r3, [pc, #620]	@ (8005cbc <HAL_RCC_OscConfig+0x298>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a56:	2b08      	cmp	r3, #8
 8005a58:	d112      	bne.n	8005a80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a5a:	4b98      	ldr	r3, [pc, #608]	@ (8005cbc <HAL_RCC_OscConfig+0x298>)
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a66:	d10b      	bne.n	8005a80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a68:	4b94      	ldr	r3, [pc, #592]	@ (8005cbc <HAL_RCC_OscConfig+0x298>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d036      	beq.n	8005ae2 <HAL_RCC_OscConfig+0xbe>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d132      	bne.n	8005ae2 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e216      	b.n	8005eae <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	4b8e      	ldr	r3, [pc, #568]	@ (8005cc0 <HAL_RCC_OscConfig+0x29c>)
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d013      	beq.n	8005aba <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a92:	f7fd f937 	bl	8002d04 <HAL_GetTick>
 8005a96:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a98:	e008      	b.n	8005aac <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a9a:	f7fd f933 	bl	8002d04 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	2b64      	cmp	r3, #100	@ 0x64
 8005aa6:	d901      	bls.n	8005aac <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e200      	b.n	8005eae <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aac:	4b83      	ldr	r3, [pc, #524]	@ (8005cbc <HAL_RCC_OscConfig+0x298>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d0f0      	beq.n	8005a9a <HAL_RCC_OscConfig+0x76>
 8005ab8:	e014      	b.n	8005ae4 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aba:	f7fd f923 	bl	8002d04 <HAL_GetTick>
 8005abe:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ac2:	f7fd f91f 	bl	8002d04 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b64      	cmp	r3, #100	@ 0x64
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e1ec      	b.n	8005eae <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ad4:	4b79      	ldr	r3, [pc, #484]	@ (8005cbc <HAL_RCC_OscConfig+0x298>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1f0      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x9e>
 8005ae0:	e000      	b.n	8005ae4 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ae2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d077      	beq.n	8005be0 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005af0:	4b72      	ldr	r3, [pc, #456]	@ (8005cbc <HAL_RCC_OscConfig+0x298>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f003 030c 	and.w	r3, r3, #12
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00b      	beq.n	8005b14 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005afc:	4b6f      	ldr	r3, [pc, #444]	@ (8005cbc <HAL_RCC_OscConfig+0x298>)
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b04:	2b08      	cmp	r3, #8
 8005b06:	d126      	bne.n	8005b56 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b08:	4b6c      	ldr	r3, [pc, #432]	@ (8005cbc <HAL_RCC_OscConfig+0x298>)
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d120      	bne.n	8005b56 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b14:	4b69      	ldr	r3, [pc, #420]	@ (8005cbc <HAL_RCC_OscConfig+0x298>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d005      	beq.n	8005b2c <HAL_RCC_OscConfig+0x108>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d001      	beq.n	8005b2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e1c0      	b.n	8005eae <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b2c:	4b63      	ldr	r3, [pc, #396]	@ (8005cbc <HAL_RCC_OscConfig+0x298>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	21f8      	movs	r1, #248	@ 0xf8
 8005b3a:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b3c:	69b9      	ldr	r1, [r7, #24]
 8005b3e:	fa91 f1a1 	rbit	r1, r1
 8005b42:	6179      	str	r1, [r7, #20]
  return result;
 8005b44:	6979      	ldr	r1, [r7, #20]
 8005b46:	fab1 f181 	clz	r1, r1
 8005b4a:	b2c9      	uxtb	r1, r1
 8005b4c:	408b      	lsls	r3, r1
 8005b4e:	495b      	ldr	r1, [pc, #364]	@ (8005cbc <HAL_RCC_OscConfig+0x298>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b54:	e044      	b.n	8005be0 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d02a      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b5e:	4b59      	ldr	r3, [pc, #356]	@ (8005cc4 <HAL_RCC_OscConfig+0x2a0>)
 8005b60:	2201      	movs	r2, #1
 8005b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b64:	f7fd f8ce 	bl	8002d04 <HAL_GetTick>
 8005b68:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b6c:	f7fd f8ca 	bl	8002d04 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e197      	b.n	8005eae <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b7e:	4b4f      	ldr	r3, [pc, #316]	@ (8005cbc <HAL_RCC_OscConfig+0x298>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0f0      	beq.n	8005b6c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b8a:	4b4c      	ldr	r3, [pc, #304]	@ (8005cbc <HAL_RCC_OscConfig+0x298>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	21f8      	movs	r1, #248	@ 0xf8
 8005b98:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b9a:	6939      	ldr	r1, [r7, #16]
 8005b9c:	fa91 f1a1 	rbit	r1, r1
 8005ba0:	60f9      	str	r1, [r7, #12]
  return result;
 8005ba2:	68f9      	ldr	r1, [r7, #12]
 8005ba4:	fab1 f181 	clz	r1, r1
 8005ba8:	b2c9      	uxtb	r1, r1
 8005baa:	408b      	lsls	r3, r1
 8005bac:	4943      	ldr	r1, [pc, #268]	@ (8005cbc <HAL_RCC_OscConfig+0x298>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	600b      	str	r3, [r1, #0]
 8005bb2:	e015      	b.n	8005be0 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bb4:	4b43      	ldr	r3, [pc, #268]	@ (8005cc4 <HAL_RCC_OscConfig+0x2a0>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bba:	f7fd f8a3 	bl	8002d04 <HAL_GetTick>
 8005bbe:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bc0:	e008      	b.n	8005bd4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bc2:	f7fd f89f 	bl	8002d04 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d901      	bls.n	8005bd4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e16c      	b.n	8005eae <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bd4:	4b39      	ldr	r3, [pc, #228]	@ (8005cbc <HAL_RCC_OscConfig+0x298>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1f0      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0308 	and.w	r3, r3, #8
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d030      	beq.n	8005c4e <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d016      	beq.n	8005c22 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bf4:	4b34      	ldr	r3, [pc, #208]	@ (8005cc8 <HAL_RCC_OscConfig+0x2a4>)
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bfa:	f7fd f883 	bl	8002d04 <HAL_GetTick>
 8005bfe:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c00:	e008      	b.n	8005c14 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c02:	f7fd f87f 	bl	8002d04 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d901      	bls.n	8005c14 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e14c      	b.n	8005eae <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c14:	4b29      	ldr	r3, [pc, #164]	@ (8005cbc <HAL_RCC_OscConfig+0x298>)
 8005c16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0f0      	beq.n	8005c02 <HAL_RCC_OscConfig+0x1de>
 8005c20:	e015      	b.n	8005c4e <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c22:	4b29      	ldr	r3, [pc, #164]	@ (8005cc8 <HAL_RCC_OscConfig+0x2a4>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c28:	f7fd f86c 	bl	8002d04 <HAL_GetTick>
 8005c2c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c2e:	e008      	b.n	8005c42 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c30:	f7fd f868 	bl	8002d04 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e135      	b.n	8005eae <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c42:	4b1e      	ldr	r3, [pc, #120]	@ (8005cbc <HAL_RCC_OscConfig+0x298>)
 8005c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1f0      	bne.n	8005c30 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0304 	and.w	r3, r3, #4
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 8087 	beq.w	8005d6a <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c62:	4b16      	ldr	r3, [pc, #88]	@ (8005cbc <HAL_RCC_OscConfig+0x298>)
 8005c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d110      	bne.n	8005c90 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60bb      	str	r3, [r7, #8]
 8005c72:	4b12      	ldr	r3, [pc, #72]	@ (8005cbc <HAL_RCC_OscConfig+0x298>)
 8005c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c76:	4a11      	ldr	r2, [pc, #68]	@ (8005cbc <HAL_RCC_OscConfig+0x298>)
 8005c78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8005cbc <HAL_RCC_OscConfig+0x298>)
 8005c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c86:	60bb      	str	r3, [r7, #8]
 8005c88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c90:	4b0e      	ldr	r3, [pc, #56]	@ (8005ccc <HAL_RCC_OscConfig+0x2a8>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a0d      	ldr	r2, [pc, #52]	@ (8005ccc <HAL_RCC_OscConfig+0x2a8>)
 8005c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c9a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005ccc <HAL_RCC_OscConfig+0x2a8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d122      	bne.n	8005cee <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ca8:	4b08      	ldr	r3, [pc, #32]	@ (8005ccc <HAL_RCC_OscConfig+0x2a8>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a07      	ldr	r2, [pc, #28]	@ (8005ccc <HAL_RCC_OscConfig+0x2a8>)
 8005cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cb4:	f7fd f826 	bl	8002d04 <HAL_GetTick>
 8005cb8:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cba:	e012      	b.n	8005ce2 <HAL_RCC_OscConfig+0x2be>
 8005cbc:	40023800 	.word	0x40023800
 8005cc0:	40023802 	.word	0x40023802
 8005cc4:	42470000 	.word	0x42470000
 8005cc8:	42470e80 	.word	0x42470e80
 8005ccc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cd0:	f7fd f818 	bl	8002d04 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d901      	bls.n	8005ce2 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e0e5      	b.n	8005eae <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce2:	4b75      	ldr	r3, [pc, #468]	@ (8005eb8 <HAL_RCC_OscConfig+0x494>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d0f0      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689a      	ldr	r2, [r3, #8]
 8005cf2:	4b72      	ldr	r3, [pc, #456]	@ (8005ebc <HAL_RCC_OscConfig+0x498>)
 8005cf4:	b2d2      	uxtb	r2, r2
 8005cf6:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d015      	beq.n	8005d2c <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d00:	f7fd f800 	bl	8002d04 <HAL_GetTick>
 8005d04:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d06:	e00a      	b.n	8005d1e <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d08:	f7fc fffc 	bl	8002d04 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	6a3b      	ldr	r3, [r7, #32]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e0c7      	b.n	8005eae <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d1e:	4b68      	ldr	r3, [pc, #416]	@ (8005ec0 <HAL_RCC_OscConfig+0x49c>)
 8005d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d22:	f003 0302 	and.w	r3, r3, #2
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d0ee      	beq.n	8005d08 <HAL_RCC_OscConfig+0x2e4>
 8005d2a:	e014      	b.n	8005d56 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d2c:	f7fc ffea 	bl	8002d04 <HAL_GetTick>
 8005d30:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d32:	e00a      	b.n	8005d4a <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d34:	f7fc ffe6 	bl	8002d04 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d901      	bls.n	8005d4a <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8005d46:	2303      	movs	r3, #3
 8005d48:	e0b1      	b.n	8005eae <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d4a:	4b5d      	ldr	r3, [pc, #372]	@ (8005ec0 <HAL_RCC_OscConfig+0x49c>)
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1ee      	bne.n	8005d34 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d105      	bne.n	8005d6a <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d5e:	4b58      	ldr	r3, [pc, #352]	@ (8005ec0 <HAL_RCC_OscConfig+0x49c>)
 8005d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d62:	4a57      	ldr	r2, [pc, #348]	@ (8005ec0 <HAL_RCC_OscConfig+0x49c>)
 8005d64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d68:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 809c 	beq.w	8005eac <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d74:	4b52      	ldr	r3, [pc, #328]	@ (8005ec0 <HAL_RCC_OscConfig+0x49c>)
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f003 030c 	and.w	r3, r3, #12
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	d061      	beq.n	8005e44 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d146      	bne.n	8005e16 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d88:	4b4e      	ldr	r3, [pc, #312]	@ (8005ec4 <HAL_RCC_OscConfig+0x4a0>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d8e:	f7fc ffb9 	bl	8002d04 <HAL_GetTick>
 8005d92:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d94:	e008      	b.n	8005da8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d96:	f7fc ffb5 	bl	8002d04 <HAL_GetTick>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	1ad3      	subs	r3, r2, r3
 8005da0:	2b64      	cmp	r3, #100	@ 0x64
 8005da2:	d901      	bls.n	8005da8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e082      	b.n	8005eae <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005da8:	4b45      	ldr	r3, [pc, #276]	@ (8005ec0 <HAL_RCC_OscConfig+0x49c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1f0      	bne.n	8005d96 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005db4:	4b42      	ldr	r3, [pc, #264]	@ (8005ec0 <HAL_RCC_OscConfig+0x49c>)
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	4b43      	ldr	r3, [pc, #268]	@ (8005ec8 <HAL_RCC_OscConfig+0x4a4>)
 8005dba:	4013      	ands	r3, r2
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	69d1      	ldr	r1, [r2, #28]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6a12      	ldr	r2, [r2, #32]
 8005dc4:	4311      	orrs	r1, r2
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005dca:	0192      	lsls	r2, r2, #6
 8005dcc:	4311      	orrs	r1, r2
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005dd2:	0612      	lsls	r2, r2, #24
 8005dd4:	4311      	orrs	r1, r2
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005dda:	0852      	lsrs	r2, r2, #1
 8005ddc:	3a01      	subs	r2, #1
 8005dde:	0412      	lsls	r2, r2, #16
 8005de0:	430a      	orrs	r2, r1
 8005de2:	4937      	ldr	r1, [pc, #220]	@ (8005ec0 <HAL_RCC_OscConfig+0x49c>)
 8005de4:	4313      	orrs	r3, r2
 8005de6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005de8:	4b36      	ldr	r3, [pc, #216]	@ (8005ec4 <HAL_RCC_OscConfig+0x4a0>)
 8005dea:	2201      	movs	r2, #1
 8005dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dee:	f7fc ff89 	bl	8002d04 <HAL_GetTick>
 8005df2:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005df4:	e008      	b.n	8005e08 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005df6:	f7fc ff85 	bl	8002d04 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b64      	cmp	r3, #100	@ 0x64
 8005e02:	d901      	bls.n	8005e08 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e052      	b.n	8005eae <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e08:	4b2d      	ldr	r3, [pc, #180]	@ (8005ec0 <HAL_RCC_OscConfig+0x49c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0f0      	beq.n	8005df6 <HAL_RCC_OscConfig+0x3d2>
 8005e14:	e04a      	b.n	8005eac <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e16:	4b2b      	ldr	r3, [pc, #172]	@ (8005ec4 <HAL_RCC_OscConfig+0x4a0>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e1c:	f7fc ff72 	bl	8002d04 <HAL_GetTick>
 8005e20:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e22:	e008      	b.n	8005e36 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e24:	f7fc ff6e 	bl	8002d04 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b64      	cmp	r3, #100	@ 0x64
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e03b      	b.n	8005eae <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e36:	4b22      	ldr	r3, [pc, #136]	@ (8005ec0 <HAL_RCC_OscConfig+0x49c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1f0      	bne.n	8005e24 <HAL_RCC_OscConfig+0x400>
 8005e42:	e033      	b.n	8005eac <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d101      	bne.n	8005e50 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e02e      	b.n	8005eae <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8005e50:	4b1b      	ldr	r3, [pc, #108]	@ (8005ec0 <HAL_RCC_OscConfig+0x49c>)
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d121      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d11a      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005e78:	4013      	ands	r3, r2
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e7e:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d111      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8e:	085b      	lsrs	r3, r3, #1
 8005e90:	3b01      	subs	r3, #1
 8005e92:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d107      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea2:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d001      	beq.n	8005eac <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e000      	b.n	8005eae <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3728      	adds	r7, #40	@ 0x28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	40007000 	.word	0x40007000
 8005ebc:	40023870 	.word	0x40023870
 8005ec0:	40023800 	.word	0x40023800
 8005ec4:	42470060 	.word	0x42470060
 8005ec8:	f0bc8000 	.word	0xf0bc8000

08005ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e0d2      	b.n	8006086 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ee0:	4b6b      	ldr	r3, [pc, #428]	@ (8006090 <HAL_RCC_ClockConfig+0x1c4>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 030f 	and.w	r3, r3, #15
 8005ee8:	683a      	ldr	r2, [r7, #0]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d90c      	bls.n	8005f08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005eee:	4b68      	ldr	r3, [pc, #416]	@ (8006090 <HAL_RCC_ClockConfig+0x1c4>)
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	b2d2      	uxtb	r2, r2
 8005ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ef6:	4b66      	ldr	r3, [pc, #408]	@ (8006090 <HAL_RCC_ClockConfig+0x1c4>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d001      	beq.n	8005f08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e0be      	b.n	8006086 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d020      	beq.n	8005f56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0304 	and.w	r3, r3, #4
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d005      	beq.n	8005f2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f20:	4b5c      	ldr	r3, [pc, #368]	@ (8006094 <HAL_RCC_ClockConfig+0x1c8>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	4a5b      	ldr	r2, [pc, #364]	@ (8006094 <HAL_RCC_ClockConfig+0x1c8>)
 8005f26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0308 	and.w	r3, r3, #8
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d005      	beq.n	8005f44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8005f38:	4b56      	ldr	r3, [pc, #344]	@ (8006094 <HAL_RCC_ClockConfig+0x1c8>)
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	4a55      	ldr	r2, [pc, #340]	@ (8006094 <HAL_RCC_ClockConfig+0x1c8>)
 8005f3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005f42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f44:	4b53      	ldr	r3, [pc, #332]	@ (8006094 <HAL_RCC_ClockConfig+0x1c8>)
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	4950      	ldr	r1, [pc, #320]	@ (8006094 <HAL_RCC_ClockConfig+0x1c8>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0301 	and.w	r3, r3, #1
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d040      	beq.n	8005fe4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d107      	bne.n	8005f7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f6a:	4b4a      	ldr	r3, [pc, #296]	@ (8006094 <HAL_RCC_ClockConfig+0x1c8>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d115      	bne.n	8005fa2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e085      	b.n	8006086 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d107      	bne.n	8005f92 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f82:	4b44      	ldr	r3, [pc, #272]	@ (8006094 <HAL_RCC_ClockConfig+0x1c8>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d109      	bne.n	8005fa2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e079      	b.n	8006086 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f92:	4b40      	ldr	r3, [pc, #256]	@ (8006094 <HAL_RCC_ClockConfig+0x1c8>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0302 	and.w	r3, r3, #2
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e071      	b.n	8006086 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fa2:	4b3c      	ldr	r3, [pc, #240]	@ (8006094 <HAL_RCC_ClockConfig+0x1c8>)
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f023 0203 	bic.w	r2, r3, #3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	4939      	ldr	r1, [pc, #228]	@ (8006094 <HAL_RCC_ClockConfig+0x1c8>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fb4:	f7fc fea6 	bl	8002d04 <HAL_GetTick>
 8005fb8:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fba:	e00a      	b.n	8005fd2 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fbc:	f7fc fea2 	bl	8002d04 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e059      	b.n	8006086 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fd2:	4b30      	ldr	r3, [pc, #192]	@ (8006094 <HAL_RCC_ClockConfig+0x1c8>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f003 020c 	and.w	r2, r3, #12
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d1eb      	bne.n	8005fbc <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fe4:	4b2a      	ldr	r3, [pc, #168]	@ (8006090 <HAL_RCC_ClockConfig+0x1c4>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 030f 	and.w	r3, r3, #15
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d20c      	bcs.n	800600c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ff2:	4b27      	ldr	r3, [pc, #156]	@ (8006090 <HAL_RCC_ClockConfig+0x1c4>)
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	b2d2      	uxtb	r2, r2
 8005ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ffa:	4b25      	ldr	r3, [pc, #148]	@ (8006090 <HAL_RCC_ClockConfig+0x1c4>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	429a      	cmp	r2, r3
 8006006:	d001      	beq.n	800600c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e03c      	b.n	8006086 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 0304 	and.w	r3, r3, #4
 8006014:	2b00      	cmp	r3, #0
 8006016:	d008      	beq.n	800602a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006018:	4b1e      	ldr	r3, [pc, #120]	@ (8006094 <HAL_RCC_ClockConfig+0x1c8>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	491b      	ldr	r1, [pc, #108]	@ (8006094 <HAL_RCC_ClockConfig+0x1c8>)
 8006026:	4313      	orrs	r3, r2
 8006028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0308 	and.w	r3, r3, #8
 8006032:	2b00      	cmp	r3, #0
 8006034:	d009      	beq.n	800604a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006036:	4b17      	ldr	r3, [pc, #92]	@ (8006094 <HAL_RCC_ClockConfig+0x1c8>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	00db      	lsls	r3, r3, #3
 8006044:	4913      	ldr	r1, [pc, #76]	@ (8006094 <HAL_RCC_ClockConfig+0x1c8>)
 8006046:	4313      	orrs	r3, r2
 8006048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800604a:	f000 f82b 	bl	80060a4 <HAL_RCC_GetSysClockFreq>
 800604e:	4601      	mov	r1, r0
 8006050:	4b10      	ldr	r3, [pc, #64]	@ (8006094 <HAL_RCC_ClockConfig+0x1c8>)
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006058:	22f0      	movs	r2, #240	@ 0xf0
 800605a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	fa92 f2a2 	rbit	r2, r2
 8006062:	60fa      	str	r2, [r7, #12]
  return result;
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	fab2 f282 	clz	r2, r2
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	40d3      	lsrs	r3, r2
 800606e:	4a0a      	ldr	r2, [pc, #40]	@ (8006098 <HAL_RCC_ClockConfig+0x1cc>)
 8006070:	5cd3      	ldrb	r3, [r2, r3]
 8006072:	fa21 f303 	lsr.w	r3, r1, r3
 8006076:	4a09      	ldr	r2, [pc, #36]	@ (800609c <HAL_RCC_ClockConfig+0x1d0>)
 8006078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800607a:	4b09      	ldr	r3, [pc, #36]	@ (80060a0 <HAL_RCC_ClockConfig+0x1d4>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4618      	mov	r0, r3
 8006080:	f7fc fdfe 	bl	8002c80 <HAL_InitTick>

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
 800608e:	bf00      	nop
 8006090:	40023c00 	.word	0x40023c00
 8006094:	40023800 	.word	0x40023800
 8006098:	0800dee4 	.word	0x0800dee4
 800609c:	20000034 	.word	0x20000034
 80060a0:	20000038 	.word	0x20000038

080060a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060a8:	b090      	sub	sp, #64	@ 0x40
 80060aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80060b0:	2300      	movs	r3, #0
 80060b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060b4:	2300      	movs	r3, #0
 80060b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80060b8:	2300      	movs	r3, #0
 80060ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060bc:	4b59      	ldr	r3, [pc, #356]	@ (8006224 <HAL_RCC_GetSysClockFreq+0x180>)
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f003 030c 	and.w	r3, r3, #12
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	d00d      	beq.n	80060e4 <HAL_RCC_GetSysClockFreq+0x40>
 80060c8:	2b08      	cmp	r3, #8
 80060ca:	f200 80a2 	bhi.w	8006212 <HAL_RCC_GetSysClockFreq+0x16e>
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <HAL_RCC_GetSysClockFreq+0x34>
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d003      	beq.n	80060de <HAL_RCC_GetSysClockFreq+0x3a>
 80060d6:	e09c      	b.n	8006212 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060d8:	4b53      	ldr	r3, [pc, #332]	@ (8006228 <HAL_RCC_GetSysClockFreq+0x184>)
 80060da:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80060dc:	e09c      	b.n	8006218 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060de:	4b53      	ldr	r3, [pc, #332]	@ (800622c <HAL_RCC_GetSysClockFreq+0x188>)
 80060e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80060e2:	e099      	b.n	8006218 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060e4:	4b4f      	ldr	r3, [pc, #316]	@ (8006224 <HAL_RCC_GetSysClockFreq+0x180>)
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060ee:	4b4d      	ldr	r3, [pc, #308]	@ (8006224 <HAL_RCC_GetSysClockFreq+0x180>)
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d027      	beq.n	800614a <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060fa:	4b4a      	ldr	r3, [pc, #296]	@ (8006224 <HAL_RCC_GetSysClockFreq+0x180>)
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	099b      	lsrs	r3, r3, #6
 8006100:	2200      	movs	r2, #0
 8006102:	623b      	str	r3, [r7, #32]
 8006104:	627a      	str	r2, [r7, #36]	@ 0x24
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800610c:	2100      	movs	r1, #0
 800610e:	4b47      	ldr	r3, [pc, #284]	@ (800622c <HAL_RCC_GetSysClockFreq+0x188>)
 8006110:	fb03 f201 	mul.w	r2, r3, r1
 8006114:	2300      	movs	r3, #0
 8006116:	fb00 f303 	mul.w	r3, r0, r3
 800611a:	4413      	add	r3, r2
 800611c:	4a43      	ldr	r2, [pc, #268]	@ (800622c <HAL_RCC_GetSysClockFreq+0x188>)
 800611e:	fba0 2102 	umull	r2, r1, r0, r2
 8006122:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006124:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006126:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006128:	4413      	add	r3, r2
 800612a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800612c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800612e:	2200      	movs	r2, #0
 8006130:	61bb      	str	r3, [r7, #24]
 8006132:	61fa      	str	r2, [r7, #28]
 8006134:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006138:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800613c:	f7fa fd00 	bl	8000b40 <__aeabi_uldivmod>
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	4613      	mov	r3, r2
 8006146:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006148:	e055      	b.n	80061f6 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800614a:	4b36      	ldr	r3, [pc, #216]	@ (8006224 <HAL_RCC_GetSysClockFreq+0x180>)
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	099b      	lsrs	r3, r3, #6
 8006150:	2200      	movs	r2, #0
 8006152:	613b      	str	r3, [r7, #16]
 8006154:	617a      	str	r2, [r7, #20]
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800615c:	f04f 0b00 	mov.w	fp, #0
 8006160:	4652      	mov	r2, sl
 8006162:	465b      	mov	r3, fp
 8006164:	f04f 0000 	mov.w	r0, #0
 8006168:	f04f 0100 	mov.w	r1, #0
 800616c:	0159      	lsls	r1, r3, #5
 800616e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006172:	0150      	lsls	r0, r2, #5
 8006174:	4602      	mov	r2, r0
 8006176:	460b      	mov	r3, r1
 8006178:	ebb2 080a 	subs.w	r8, r2, sl
 800617c:	eb63 090b 	sbc.w	r9, r3, fp
 8006180:	f04f 0200 	mov.w	r2, #0
 8006184:	f04f 0300 	mov.w	r3, #0
 8006188:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800618c:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006190:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006194:	ebb2 0408 	subs.w	r4, r2, r8
 8006198:	eb63 0509 	sbc.w	r5, r3, r9
 800619c:	f04f 0200 	mov.w	r2, #0
 80061a0:	f04f 0300 	mov.w	r3, #0
 80061a4:	00eb      	lsls	r3, r5, #3
 80061a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061aa:	00e2      	lsls	r2, r4, #3
 80061ac:	4614      	mov	r4, r2
 80061ae:	461d      	mov	r5, r3
 80061b0:	eb14 030a 	adds.w	r3, r4, sl
 80061b4:	603b      	str	r3, [r7, #0]
 80061b6:	eb45 030b 	adc.w	r3, r5, fp
 80061ba:	607b      	str	r3, [r7, #4]
 80061bc:	f04f 0200 	mov.w	r2, #0
 80061c0:	f04f 0300 	mov.w	r3, #0
 80061c4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061c8:	4629      	mov	r1, r5
 80061ca:	028b      	lsls	r3, r1, #10
 80061cc:	4620      	mov	r0, r4
 80061ce:	4629      	mov	r1, r5
 80061d0:	4604      	mov	r4, r0
 80061d2:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80061d6:	4601      	mov	r1, r0
 80061d8:	028a      	lsls	r2, r1, #10
 80061da:	4610      	mov	r0, r2
 80061dc:	4619      	mov	r1, r3
 80061de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061e0:	2200      	movs	r2, #0
 80061e2:	60bb      	str	r3, [r7, #8]
 80061e4:	60fa      	str	r2, [r7, #12]
 80061e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061ea:	f7fa fca9 	bl	8000b40 <__aeabi_uldivmod>
 80061ee:	4602      	mov	r2, r0
 80061f0:	460b      	mov	r3, r1
 80061f2:	4613      	mov	r3, r2
 80061f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006224 <HAL_RCC_GetSysClockFreq+0x180>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	0c1b      	lsrs	r3, r3, #16
 80061fc:	f003 0303 	and.w	r3, r3, #3
 8006200:	3301      	adds	r3, #1
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006206:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620a:	fbb2 f3f3 	udiv	r3, r2, r3
 800620e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006210:	e002      	b.n	8006218 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006212:	4b05      	ldr	r3, [pc, #20]	@ (8006228 <HAL_RCC_GetSysClockFreq+0x184>)
 8006214:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006216:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800621a:	4618      	mov	r0, r3
 800621c:	3740      	adds	r7, #64	@ 0x40
 800621e:	46bd      	mov	sp, r7
 8006220:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006224:	40023800 	.word	0x40023800
 8006228:	00f42400 	.word	0x00f42400
 800622c:	017d7840 	.word	0x017d7840

08006230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006230:	b480      	push	{r7}
 8006232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006234:	4b02      	ldr	r3, [pc, #8]	@ (8006240 <HAL_RCC_GetHCLKFreq+0x10>)
 8006236:	681b      	ldr	r3, [r3, #0]
}
 8006238:	4618      	mov	r0, r3
 800623a:	46bd      	mov	sp, r7
 800623c:	bc80      	pop	{r7}
 800623e:	4770      	bx	lr
 8006240:	20000034 	.word	0x20000034

08006244 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e07b      	b.n	800634e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625a:	2b00      	cmp	r3, #0
 800625c:	d108      	bne.n	8006270 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006266:	d009      	beq.n	800627c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	61da      	str	r2, [r3, #28]
 800626e:	e005      	b.n	800627c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d106      	bne.n	800629c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7fc faa0 	bl	80027dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80062c4:	431a      	orrs	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062ce:	431a      	orrs	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	431a      	orrs	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062ec:	431a      	orrs	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062f6:	431a      	orrs	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006300:	ea42 0103 	orr.w	r1, r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006308:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	0c1b      	lsrs	r3, r3, #16
 800631a:	f003 0104 	and.w	r1, r3, #4
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006322:	f003 0210 	and.w	r2, r3, #16
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69da      	ldr	r2, [r3, #28]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800633c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b088      	sub	sp, #32
 800635a:	af00      	add	r7, sp, #0
 800635c:	60f8      	str	r0, [r7, #12]
 800635e:	60b9      	str	r1, [r7, #8]
 8006360:	603b      	str	r3, [r7, #0]
 8006362:	4613      	mov	r3, r2
 8006364:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_SPI_Transmit+0x22>
 8006374:	2302      	movs	r3, #2
 8006376:	e12d      	b.n	80065d4 <HAL_SPI_Transmit+0x27e>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006380:	f7fc fcc0 	bl	8002d04 <HAL_GetTick>
 8006384:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006386:	88fb      	ldrh	r3, [r7, #6]
 8006388:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b01      	cmp	r3, #1
 8006394:	d002      	beq.n	800639c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006396:	2302      	movs	r3, #2
 8006398:	77fb      	strb	r3, [r7, #31]
    goto error;
 800639a:	e116      	b.n	80065ca <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <HAL_SPI_Transmit+0x52>
 80063a2:	88fb      	ldrh	r3, [r7, #6]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d102      	bne.n	80063ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063ac:	e10d      	b.n	80065ca <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2203      	movs	r2, #3
 80063b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	88fa      	ldrh	r2, [r7, #6]
 80063c6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	88fa      	ldrh	r2, [r7, #6]
 80063cc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063f4:	d10f      	bne.n	8006416 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006404:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006414:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006420:	2b40      	cmp	r3, #64	@ 0x40
 8006422:	d007      	beq.n	8006434 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006432:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800643c:	d14f      	bne.n	80064de <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d002      	beq.n	800644c <HAL_SPI_Transmit+0xf6>
 8006446:	8afb      	ldrh	r3, [r7, #22]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d142      	bne.n	80064d2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006450:	881a      	ldrh	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800645c:	1c9a      	adds	r2, r3, #2
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006466:	b29b      	uxth	r3, r3
 8006468:	3b01      	subs	r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006470:	e02f      	b.n	80064d2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f003 0302 	and.w	r3, r3, #2
 800647c:	2b02      	cmp	r3, #2
 800647e:	d112      	bne.n	80064a6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006484:	881a      	ldrh	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006490:	1c9a      	adds	r2, r3, #2
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800649a:	b29b      	uxth	r3, r3
 800649c:	3b01      	subs	r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80064a4:	e015      	b.n	80064d2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064a6:	f7fc fc2d 	bl	8002d04 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d803      	bhi.n	80064be <HAL_SPI_Transmit+0x168>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064bc:	d102      	bne.n	80064c4 <HAL_SPI_Transmit+0x16e>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d106      	bne.n	80064d2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80064d0:	e07b      	b.n	80065ca <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1ca      	bne.n	8006472 <HAL_SPI_Transmit+0x11c>
 80064dc:	e050      	b.n	8006580 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d002      	beq.n	80064ec <HAL_SPI_Transmit+0x196>
 80064e6:	8afb      	ldrh	r3, [r7, #22]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d144      	bne.n	8006576 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	330c      	adds	r3, #12
 80064f6:	7812      	ldrb	r2, [r2, #0]
 80064f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fe:	1c5a      	adds	r2, r3, #1
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006508:	b29b      	uxth	r3, r3
 800650a:	3b01      	subs	r3, #1
 800650c:	b29a      	uxth	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006512:	e030      	b.n	8006576 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b02      	cmp	r3, #2
 8006520:	d113      	bne.n	800654a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	330c      	adds	r3, #12
 800652c:	7812      	ldrb	r2, [r2, #0]
 800652e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006534:	1c5a      	adds	r2, r3, #1
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800653e:	b29b      	uxth	r3, r3
 8006540:	3b01      	subs	r3, #1
 8006542:	b29a      	uxth	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006548:	e015      	b.n	8006576 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800654a:	f7fc fbdb 	bl	8002d04 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	429a      	cmp	r2, r3
 8006558:	d803      	bhi.n	8006562 <HAL_SPI_Transmit+0x20c>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006560:	d102      	bne.n	8006568 <HAL_SPI_Transmit+0x212>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d106      	bne.n	8006576 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006574:	e029      	b.n	80065ca <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800657a:	b29b      	uxth	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1c9      	bne.n	8006514 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	6839      	ldr	r1, [r7, #0]
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 fbae 	bl	8006ce6 <SPI_EndRxTxTransaction>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2220      	movs	r2, #32
 8006594:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10a      	bne.n	80065b4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800659e:	2300      	movs	r3, #0
 80065a0:	613b      	str	r3, [r7, #16]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	613b      	str	r3, [r7, #16]
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	613b      	str	r3, [r7, #16]
 80065b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d002      	beq.n	80065c2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	77fb      	strb	r3, [r7, #31]
 80065c0:	e003      	b.n	80065ca <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80065d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3720      	adds	r7, #32
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b088      	sub	sp, #32
 80065e0:	af02      	add	r7, sp, #8
 80065e2:	60f8      	str	r0, [r7, #12]
 80065e4:	60b9      	str	r1, [r7, #8]
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	4613      	mov	r3, r2
 80065ea:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d002      	beq.n	8006602 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80065fc:	2302      	movs	r3, #2
 80065fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006600:	e0fb      	b.n	80067fa <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800660a:	d112      	bne.n	8006632 <HAL_SPI_Receive+0x56>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10e      	bne.n	8006632 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2204      	movs	r2, #4
 8006618:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800661c:	88fa      	ldrh	r2, [r7, #6]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	4613      	mov	r3, r2
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	68b9      	ldr	r1, [r7, #8]
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 f8ef 	bl	800680c <HAL_SPI_TransmitReceive>
 800662e:	4603      	mov	r3, r0
 8006630:	e0e8      	b.n	8006804 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_SPI_Receive+0x64>
 800663c:	2302      	movs	r3, #2
 800663e:	e0e1      	b.n	8006804 <HAL_SPI_Receive+0x228>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006648:	f7fc fb5c 	bl	8002d04 <HAL_GetTick>
 800664c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <HAL_SPI_Receive+0x7e>
 8006654:	88fb      	ldrh	r3, [r7, #6]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d102      	bne.n	8006660 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800665e:	e0cc      	b.n	80067fa <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2204      	movs	r2, #4
 8006664:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	88fa      	ldrh	r2, [r7, #6]
 8006678:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	88fa      	ldrh	r2, [r7, #6]
 800667e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2200      	movs	r2, #0
 8006684:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2200      	movs	r2, #0
 8006690:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066a6:	d10f      	bne.n	80066c8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80066c6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d2:	2b40      	cmp	r3, #64	@ 0x40
 80066d4:	d007      	beq.n	80066e6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066e4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d16a      	bne.n	80067c4 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80066ee:	e032      	b.n	8006756 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d115      	bne.n	800672a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f103 020c 	add.w	r2, r3, #12
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800670a:	7812      	ldrb	r2, [r2, #0]
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800671e:	b29b      	uxth	r3, r3
 8006720:	3b01      	subs	r3, #1
 8006722:	b29a      	uxth	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006728:	e015      	b.n	8006756 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800672a:	f7fc faeb 	bl	8002d04 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	429a      	cmp	r2, r3
 8006738:	d803      	bhi.n	8006742 <HAL_SPI_Receive+0x166>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006740:	d102      	bne.n	8006748 <HAL_SPI_Receive+0x16c>
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d106      	bne.n	8006756 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006754:	e051      	b.n	80067fa <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800675a:	b29b      	uxth	r3, r3
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1c7      	bne.n	80066f0 <HAL_SPI_Receive+0x114>
 8006760:	e035      	b.n	80067ce <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	2b01      	cmp	r3, #1
 800676e:	d113      	bne.n	8006798 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800677a:	b292      	uxth	r2, r2
 800677c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006782:	1c9a      	adds	r2, r3, #2
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800678c:	b29b      	uxth	r3, r3
 800678e:	3b01      	subs	r3, #1
 8006790:	b29a      	uxth	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006796:	e015      	b.n	80067c4 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006798:	f7fc fab4 	bl	8002d04 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d803      	bhi.n	80067b0 <HAL_SPI_Receive+0x1d4>
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ae:	d102      	bne.n	80067b6 <HAL_SPI_Receive+0x1da>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d106      	bne.n	80067c4 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80067c2:	e01a      	b.n	80067fa <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1c9      	bne.n	8006762 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 fa52 	bl	8006c7c <SPI_EndRxTransaction>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d002      	beq.n	80067e4 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2220      	movs	r2, #32
 80067e2:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	75fb      	strb	r3, [r7, #23]
 80067f0:	e003      	b.n	80067fa <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006802:	7dfb      	ldrb	r3, [r7, #23]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3718      	adds	r7, #24
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08c      	sub	sp, #48	@ 0x30
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
 8006818:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800681a:	2301      	movs	r3, #1
 800681c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800682a:	2b01      	cmp	r3, #1
 800682c:	d101      	bne.n	8006832 <HAL_SPI_TransmitReceive+0x26>
 800682e:	2302      	movs	r3, #2
 8006830:	e198      	b.n	8006b64 <HAL_SPI_TransmitReceive+0x358>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800683a:	f7fc fa63 	bl	8002d04 <HAL_GetTick>
 800683e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006850:	887b      	ldrh	r3, [r7, #2]
 8006852:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006854:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006858:	2b01      	cmp	r3, #1
 800685a:	d00f      	beq.n	800687c <HAL_SPI_TransmitReceive+0x70>
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006862:	d107      	bne.n	8006874 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d103      	bne.n	8006874 <HAL_SPI_TransmitReceive+0x68>
 800686c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006870:	2b04      	cmp	r3, #4
 8006872:	d003      	beq.n	800687c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006874:	2302      	movs	r3, #2
 8006876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800687a:	e16d      	b.n	8006b58 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d005      	beq.n	800688e <HAL_SPI_TransmitReceive+0x82>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <HAL_SPI_TransmitReceive+0x82>
 8006888:	887b      	ldrh	r3, [r7, #2]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d103      	bne.n	8006896 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006894:	e160      	b.n	8006b58 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d003      	beq.n	80068aa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2205      	movs	r2, #5
 80068a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	887a      	ldrh	r2, [r7, #2]
 80068ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	887a      	ldrh	r2, [r7, #2]
 80068c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	887a      	ldrh	r2, [r7, #2]
 80068cc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	887a      	ldrh	r2, [r7, #2]
 80068d2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2200      	movs	r2, #0
 80068de:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ea:	2b40      	cmp	r3, #64	@ 0x40
 80068ec:	d007      	beq.n	80068fe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006906:	d17c      	bne.n	8006a02 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <HAL_SPI_TransmitReceive+0x10a>
 8006910:	8b7b      	ldrh	r3, [r7, #26]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d16a      	bne.n	80069ec <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800691a:	881a      	ldrh	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006926:	1c9a      	adds	r2, r3, #2
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006930:	b29b      	uxth	r3, r3
 8006932:	3b01      	subs	r3, #1
 8006934:	b29a      	uxth	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800693a:	e057      	b.n	80069ec <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b02      	cmp	r3, #2
 8006948:	d11b      	bne.n	8006982 <HAL_SPI_TransmitReceive+0x176>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800694e:	b29b      	uxth	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d016      	beq.n	8006982 <HAL_SPI_TransmitReceive+0x176>
 8006954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006956:	2b01      	cmp	r3, #1
 8006958:	d113      	bne.n	8006982 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800695e:	881a      	ldrh	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800696a:	1c9a      	adds	r2, r3, #2
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006974:	b29b      	uxth	r3, r3
 8006976:	3b01      	subs	r3, #1
 8006978:	b29a      	uxth	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800697e:	2300      	movs	r3, #0
 8006980:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b01      	cmp	r3, #1
 800698e:	d119      	bne.n	80069c4 <HAL_SPI_TransmitReceive+0x1b8>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006994:	b29b      	uxth	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d014      	beq.n	80069c4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069a4:	b292      	uxth	r2, r2
 80069a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ac:	1c9a      	adds	r2, r3, #2
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069c0:	2301      	movs	r3, #1
 80069c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069c4:	f7fc f99e 	bl	8002d04 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d80b      	bhi.n	80069ec <HAL_SPI_TransmitReceive+0x1e0>
 80069d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069da:	d007      	beq.n	80069ec <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80069ea:	e0b5      	b.n	8006b58 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1a2      	bne.n	800693c <HAL_SPI_TransmitReceive+0x130>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d19d      	bne.n	800693c <HAL_SPI_TransmitReceive+0x130>
 8006a00:	e080      	b.n	8006b04 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d002      	beq.n	8006a10 <HAL_SPI_TransmitReceive+0x204>
 8006a0a:	8b7b      	ldrh	r3, [r7, #26]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d16f      	bne.n	8006af0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	330c      	adds	r3, #12
 8006a1a:	7812      	ldrb	r2, [r2, #0]
 8006a1c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a36:	e05b      	b.n	8006af0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d11c      	bne.n	8006a80 <HAL_SPI_TransmitReceive+0x274>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d017      	beq.n	8006a80 <HAL_SPI_TransmitReceive+0x274>
 8006a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d114      	bne.n	8006a80 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	330c      	adds	r3, #12
 8006a60:	7812      	ldrb	r2, [r2, #0]
 8006a62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a68:	1c5a      	adds	r2, r3, #1
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	3b01      	subs	r3, #1
 8006a76:	b29a      	uxth	r2, r3
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d119      	bne.n	8006ac2 <HAL_SPI_TransmitReceive+0x2b6>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d014      	beq.n	8006ac2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ac2:	f7fc f91f 	bl	8002d04 <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d803      	bhi.n	8006ada <HAL_SPI_TransmitReceive+0x2ce>
 8006ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad8:	d102      	bne.n	8006ae0 <HAL_SPI_TransmitReceive+0x2d4>
 8006ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d107      	bne.n	8006af0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006aee:	e033      	b.n	8006b58 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d19e      	bne.n	8006a38 <HAL_SPI_TransmitReceive+0x22c>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d199      	bne.n	8006a38 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006b08:	68f8      	ldr	r0, [r7, #12]
 8006b0a:	f000 f8ec 	bl	8006ce6 <SPI_EndRxTxTransaction>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d006      	beq.n	8006b22 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2220      	movs	r2, #32
 8006b1e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006b20:	e01a      	b.n	8006b58 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10a      	bne.n	8006b40 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	617b      	str	r3, [r7, #20]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d003      	beq.n	8006b50 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b4e:	e003      	b.n	8006b58 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006b60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3730      	adds	r7, #48	@ 0x30
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b088      	sub	sp, #32
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	603b      	str	r3, [r7, #0]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006b7c:	f7fc f8c2 	bl	8002d04 <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b84:	1a9b      	subs	r3, r3, r2
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	4413      	add	r3, r2
 8006b8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006b8c:	f7fc f8ba 	bl	8002d04 <HAL_GetTick>
 8006b90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006b92:	4b39      	ldr	r3, [pc, #228]	@ (8006c78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	015b      	lsls	r3, r3, #5
 8006b98:	0d1b      	lsrs	r3, r3, #20
 8006b9a:	69fa      	ldr	r2, [r7, #28]
 8006b9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ba0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ba2:	e054      	b.n	8006c4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006baa:	d050      	beq.n	8006c4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bac:	f7fc f8aa 	bl	8002d04 <HAL_GetTick>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	69fa      	ldr	r2, [r7, #28]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d902      	bls.n	8006bc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d13d      	bne.n	8006c3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006bd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bda:	d111      	bne.n	8006c00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006be4:	d004      	beq.n	8006bf0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bee:	d107      	bne.n	8006c00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006bfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c08:	d10f      	bne.n	8006c2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e017      	b.n	8006c6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d101      	bne.n	8006c48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c44:	2300      	movs	r3, #0
 8006c46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	4013      	ands	r3, r2
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	bf0c      	ite	eq
 8006c5e:	2301      	moveq	r3, #1
 8006c60:	2300      	movne	r3, #0
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	461a      	mov	r2, r3
 8006c66:	79fb      	ldrb	r3, [r7, #7]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d19b      	bne.n	8006ba4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3720      	adds	r7, #32
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20000034 	.word	0x20000034

08006c7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af02      	add	r7, sp, #8
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c90:	d111      	bne.n	8006cb6 <SPI_EndRxTransaction+0x3a>
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c9a:	d004      	beq.n	8006ca6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ca4:	d107      	bne.n	8006cb6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cb4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	2180      	movs	r1, #128	@ 0x80
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f7ff ff53 	bl	8006b6c <SPI_WaitFlagStateUntilTimeout>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d007      	beq.n	8006cdc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd0:	f043 0220 	orr.w	r2, r3, #32
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e000      	b.n	8006cde <SPI_EndRxTransaction+0x62>
  }
  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b086      	sub	sp, #24
 8006cea:	af02      	add	r7, sp, #8
 8006cec:	60f8      	str	r0, [r7, #12]
 8006cee:	60b9      	str	r1, [r7, #8]
 8006cf0:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	2180      	movs	r1, #128	@ 0x80
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f7ff ff35 	bl	8006b6c <SPI_WaitFlagStateUntilTimeout>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d007      	beq.n	8006d18 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d0c:	f043 0220 	orr.w	r2, r3, #32
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e000      	b.n	8006d1a <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b082      	sub	sp, #8
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e041      	b.n	8006db8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d106      	bne.n	8006d4e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7fb ff27 	bl	8002b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2202      	movs	r2, #2
 8006d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4610      	mov	r0, r2
 8006d62:	f000 fa8f 	bl	8007284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d001      	beq.n	8006dd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e04e      	b.n	8006e76 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2202      	movs	r2, #2
 8006ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68da      	ldr	r2, [r3, #12]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f042 0201 	orr.w	r2, r2, #1
 8006dee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a22      	ldr	r2, [pc, #136]	@ (8006e80 <HAL_TIM_Base_Start_IT+0xc0>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d022      	beq.n	8006e40 <HAL_TIM_Base_Start_IT+0x80>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e02:	d01d      	beq.n	8006e40 <HAL_TIM_Base_Start_IT+0x80>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a1e      	ldr	r2, [pc, #120]	@ (8006e84 <HAL_TIM_Base_Start_IT+0xc4>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d018      	beq.n	8006e40 <HAL_TIM_Base_Start_IT+0x80>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a1d      	ldr	r2, [pc, #116]	@ (8006e88 <HAL_TIM_Base_Start_IT+0xc8>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d013      	beq.n	8006e40 <HAL_TIM_Base_Start_IT+0x80>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8006e8c <HAL_TIM_Base_Start_IT+0xcc>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d00e      	beq.n	8006e40 <HAL_TIM_Base_Start_IT+0x80>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a1a      	ldr	r2, [pc, #104]	@ (8006e90 <HAL_TIM_Base_Start_IT+0xd0>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d009      	beq.n	8006e40 <HAL_TIM_Base_Start_IT+0x80>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a18      	ldr	r2, [pc, #96]	@ (8006e94 <HAL_TIM_Base_Start_IT+0xd4>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d004      	beq.n	8006e40 <HAL_TIM_Base_Start_IT+0x80>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a17      	ldr	r2, [pc, #92]	@ (8006e98 <HAL_TIM_Base_Start_IT+0xd8>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d111      	bne.n	8006e64 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f003 0307 	and.w	r3, r3, #7
 8006e4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2b06      	cmp	r3, #6
 8006e50:	d010      	beq.n	8006e74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f042 0201 	orr.w	r2, r2, #1
 8006e60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e62:	e007      	b.n	8006e74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f042 0201 	orr.w	r2, r2, #1
 8006e72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bc80      	pop	{r7}
 8006e7e:	4770      	bx	lr
 8006e80:	40010000 	.word	0x40010000
 8006e84:	40000400 	.word	0x40000400
 8006e88:	40000800 	.word	0x40000800
 8006e8c:	40000c00 	.word	0x40000c00
 8006e90:	40010400 	.word	0x40010400
 8006e94:	40014000 	.word	0x40014000
 8006e98:	40001800 	.word	0x40001800

08006e9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	f003 0302 	and.w	r3, r3, #2
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d122      	bne.n	8006ef8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f003 0302 	and.w	r3, r3, #2
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d11b      	bne.n	8006ef8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f06f 0202 	mvn.w	r2, #2
 8006ec8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2201      	movs	r2, #1
 8006ece:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	f003 0303 	and.w	r3, r3, #3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f9b4 	bl	800724c <HAL_TIM_IC_CaptureCallback>
 8006ee4:	e005      	b.n	8006ef2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f9a7 	bl	800723a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f9b6 	bl	800725e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	f003 0304 	and.w	r3, r3, #4
 8006f02:	2b04      	cmp	r3, #4
 8006f04:	d122      	bne.n	8006f4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	f003 0304 	and.w	r3, r3, #4
 8006f10:	2b04      	cmp	r3, #4
 8006f12:	d11b      	bne.n	8006f4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f06f 0204 	mvn.w	r2, #4
 8006f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2202      	movs	r2, #2
 8006f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f98a 	bl	800724c <HAL_TIM_IC_CaptureCallback>
 8006f38:	e005      	b.n	8006f46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f97d 	bl	800723a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f98c 	bl	800725e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	f003 0308 	and.w	r3, r3, #8
 8006f56:	2b08      	cmp	r3, #8
 8006f58:	d122      	bne.n	8006fa0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f003 0308 	and.w	r3, r3, #8
 8006f64:	2b08      	cmp	r3, #8
 8006f66:	d11b      	bne.n	8006fa0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f06f 0208 	mvn.w	r2, #8
 8006f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2204      	movs	r2, #4
 8006f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	69db      	ldr	r3, [r3, #28]
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d003      	beq.n	8006f8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f960 	bl	800724c <HAL_TIM_IC_CaptureCallback>
 8006f8c:	e005      	b.n	8006f9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 f953 	bl	800723a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 f962 	bl	800725e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	f003 0310 	and.w	r3, r3, #16
 8006faa:	2b10      	cmp	r3, #16
 8006fac:	d122      	bne.n	8006ff4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f003 0310 	and.w	r3, r3, #16
 8006fb8:	2b10      	cmp	r3, #16
 8006fba:	d11b      	bne.n	8006ff4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f06f 0210 	mvn.w	r2, #16
 8006fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2208      	movs	r2, #8
 8006fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f936 	bl	800724c <HAL_TIM_IC_CaptureCallback>
 8006fe0:	e005      	b.n	8006fee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f929 	bl	800723a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f938 	bl	800725e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d10e      	bne.n	8007020 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b01      	cmp	r3, #1
 800700e:	d107      	bne.n	8007020 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f06f 0201 	mvn.w	r2, #1
 8007018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f7fa fcc0 	bl	80019a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800702a:	2b80      	cmp	r3, #128	@ 0x80
 800702c:	d10e      	bne.n	800704c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007038:	2b80      	cmp	r3, #128	@ 0x80
 800703a:	d107      	bne.n	800704c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fad3 	bl	80075f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007056:	2b40      	cmp	r3, #64	@ 0x40
 8007058:	d10e      	bne.n	8007078 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007064:	2b40      	cmp	r3, #64	@ 0x40
 8007066:	d107      	bne.n	8007078 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f8fc 	bl	8007270 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	f003 0320 	and.w	r3, r3, #32
 8007082:	2b20      	cmp	r3, #32
 8007084:	d10e      	bne.n	80070a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	f003 0320 	and.w	r3, r3, #32
 8007090:	2b20      	cmp	r3, #32
 8007092:	d107      	bne.n	80070a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f06f 0220 	mvn.w	r2, #32
 800709c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fa9e 	bl	80075e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070a4:	bf00      	nop
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070b6:	2300      	movs	r3, #0
 80070b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d101      	bne.n	80070c8 <HAL_TIM_ConfigClockSource+0x1c>
 80070c4:	2302      	movs	r3, #2
 80070c6:	e0b4      	b.n	8007232 <HAL_TIM_ConfigClockSource+0x186>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2202      	movs	r2, #2
 80070d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80070e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68ba      	ldr	r2, [r7, #8]
 80070f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007100:	d03e      	beq.n	8007180 <HAL_TIM_ConfigClockSource+0xd4>
 8007102:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007106:	f200 8087 	bhi.w	8007218 <HAL_TIM_ConfigClockSource+0x16c>
 800710a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800710e:	f000 8086 	beq.w	800721e <HAL_TIM_ConfigClockSource+0x172>
 8007112:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007116:	d87f      	bhi.n	8007218 <HAL_TIM_ConfigClockSource+0x16c>
 8007118:	2b70      	cmp	r3, #112	@ 0x70
 800711a:	d01a      	beq.n	8007152 <HAL_TIM_ConfigClockSource+0xa6>
 800711c:	2b70      	cmp	r3, #112	@ 0x70
 800711e:	d87b      	bhi.n	8007218 <HAL_TIM_ConfigClockSource+0x16c>
 8007120:	2b60      	cmp	r3, #96	@ 0x60
 8007122:	d050      	beq.n	80071c6 <HAL_TIM_ConfigClockSource+0x11a>
 8007124:	2b60      	cmp	r3, #96	@ 0x60
 8007126:	d877      	bhi.n	8007218 <HAL_TIM_ConfigClockSource+0x16c>
 8007128:	2b50      	cmp	r3, #80	@ 0x50
 800712a:	d03c      	beq.n	80071a6 <HAL_TIM_ConfigClockSource+0xfa>
 800712c:	2b50      	cmp	r3, #80	@ 0x50
 800712e:	d873      	bhi.n	8007218 <HAL_TIM_ConfigClockSource+0x16c>
 8007130:	2b40      	cmp	r3, #64	@ 0x40
 8007132:	d058      	beq.n	80071e6 <HAL_TIM_ConfigClockSource+0x13a>
 8007134:	2b40      	cmp	r3, #64	@ 0x40
 8007136:	d86f      	bhi.n	8007218 <HAL_TIM_ConfigClockSource+0x16c>
 8007138:	2b30      	cmp	r3, #48	@ 0x30
 800713a:	d064      	beq.n	8007206 <HAL_TIM_ConfigClockSource+0x15a>
 800713c:	2b30      	cmp	r3, #48	@ 0x30
 800713e:	d86b      	bhi.n	8007218 <HAL_TIM_ConfigClockSource+0x16c>
 8007140:	2b20      	cmp	r3, #32
 8007142:	d060      	beq.n	8007206 <HAL_TIM_ConfigClockSource+0x15a>
 8007144:	2b20      	cmp	r3, #32
 8007146:	d867      	bhi.n	8007218 <HAL_TIM_ConfigClockSource+0x16c>
 8007148:	2b00      	cmp	r3, #0
 800714a:	d05c      	beq.n	8007206 <HAL_TIM_ConfigClockSource+0x15a>
 800714c:	2b10      	cmp	r3, #16
 800714e:	d05a      	beq.n	8007206 <HAL_TIM_ConfigClockSource+0x15a>
 8007150:	e062      	b.n	8007218 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007162:	f000 f9a4 	bl	80074ae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007174:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	609a      	str	r2, [r3, #8]
      break;
 800717e:	e04f      	b.n	8007220 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007190:	f000 f98d 	bl	80074ae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689a      	ldr	r2, [r3, #8]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071a2:	609a      	str	r2, [r3, #8]
      break;
 80071a4:	e03c      	b.n	8007220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071b2:	461a      	mov	r2, r3
 80071b4:	f000 f904 	bl	80073c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2150      	movs	r1, #80	@ 0x50
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 f95b 	bl	800747a <TIM_ITRx_SetConfig>
      break;
 80071c4:	e02c      	b.n	8007220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071d2:	461a      	mov	r2, r3
 80071d4:	f000 f922 	bl	800741c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2160      	movs	r1, #96	@ 0x60
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 f94b 	bl	800747a <TIM_ITRx_SetConfig>
      break;
 80071e4:	e01c      	b.n	8007220 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071f2:	461a      	mov	r2, r3
 80071f4:	f000 f8e4 	bl	80073c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2140      	movs	r1, #64	@ 0x40
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 f93b 	bl	800747a <TIM_ITRx_SetConfig>
      break;
 8007204:	e00c      	b.n	8007220 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4619      	mov	r1, r3
 8007210:	4610      	mov	r0, r2
 8007212:	f000 f932 	bl	800747a <TIM_ITRx_SetConfig>
      break;
 8007216:	e003      	b.n	8007220 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	73fb      	strb	r3, [r7, #15]
      break;
 800721c:	e000      	b.n	8007220 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800721e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007230:	7bfb      	ldrb	r3, [r7, #15]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}

0800723a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800723a:	b480      	push	{r7}
 800723c:	b083      	sub	sp, #12
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007242:	bf00      	nop
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	bc80      	pop	{r7}
 800724a:	4770      	bx	lr

0800724c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	bc80      	pop	{r7}
 800725c:	4770      	bx	lr

0800725e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800725e:	b480      	push	{r7}
 8007260:	b083      	sub	sp, #12
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	bc80      	pop	{r7}
 800726e:	4770      	bx	lr

08007270 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	bc80      	pop	{r7}
 8007280:	4770      	bx	lr
	...

08007284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a3f      	ldr	r2, [pc, #252]	@ (8007394 <TIM_Base_SetConfig+0x110>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d013      	beq.n	80072c4 <TIM_Base_SetConfig+0x40>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072a2:	d00f      	beq.n	80072c4 <TIM_Base_SetConfig+0x40>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a3c      	ldr	r2, [pc, #240]	@ (8007398 <TIM_Base_SetConfig+0x114>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d00b      	beq.n	80072c4 <TIM_Base_SetConfig+0x40>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a3b      	ldr	r2, [pc, #236]	@ (800739c <TIM_Base_SetConfig+0x118>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d007      	beq.n	80072c4 <TIM_Base_SetConfig+0x40>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4a3a      	ldr	r2, [pc, #232]	@ (80073a0 <TIM_Base_SetConfig+0x11c>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d003      	beq.n	80072c4 <TIM_Base_SetConfig+0x40>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4a39      	ldr	r2, [pc, #228]	@ (80073a4 <TIM_Base_SetConfig+0x120>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d108      	bne.n	80072d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a2e      	ldr	r2, [pc, #184]	@ (8007394 <TIM_Base_SetConfig+0x110>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d02b      	beq.n	8007336 <TIM_Base_SetConfig+0xb2>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072e4:	d027      	beq.n	8007336 <TIM_Base_SetConfig+0xb2>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	4a2b      	ldr	r2, [pc, #172]	@ (8007398 <TIM_Base_SetConfig+0x114>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d023      	beq.n	8007336 <TIM_Base_SetConfig+0xb2>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a2a      	ldr	r2, [pc, #168]	@ (800739c <TIM_Base_SetConfig+0x118>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d01f      	beq.n	8007336 <TIM_Base_SetConfig+0xb2>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4a29      	ldr	r2, [pc, #164]	@ (80073a0 <TIM_Base_SetConfig+0x11c>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d01b      	beq.n	8007336 <TIM_Base_SetConfig+0xb2>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	4a28      	ldr	r2, [pc, #160]	@ (80073a4 <TIM_Base_SetConfig+0x120>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d017      	beq.n	8007336 <TIM_Base_SetConfig+0xb2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a27      	ldr	r2, [pc, #156]	@ (80073a8 <TIM_Base_SetConfig+0x124>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d013      	beq.n	8007336 <TIM_Base_SetConfig+0xb2>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a26      	ldr	r2, [pc, #152]	@ (80073ac <TIM_Base_SetConfig+0x128>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d00f      	beq.n	8007336 <TIM_Base_SetConfig+0xb2>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a25      	ldr	r2, [pc, #148]	@ (80073b0 <TIM_Base_SetConfig+0x12c>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00b      	beq.n	8007336 <TIM_Base_SetConfig+0xb2>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a24      	ldr	r2, [pc, #144]	@ (80073b4 <TIM_Base_SetConfig+0x130>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d007      	beq.n	8007336 <TIM_Base_SetConfig+0xb2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a23      	ldr	r2, [pc, #140]	@ (80073b8 <TIM_Base_SetConfig+0x134>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d003      	beq.n	8007336 <TIM_Base_SetConfig+0xb2>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a22      	ldr	r2, [pc, #136]	@ (80073bc <TIM_Base_SetConfig+0x138>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d108      	bne.n	8007348 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800733c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	4313      	orrs	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	4313      	orrs	r3, r2
 8007354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	689a      	ldr	r2, [r3, #8]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a09      	ldr	r2, [pc, #36]	@ (8007394 <TIM_Base_SetConfig+0x110>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d003      	beq.n	800737c <TIM_Base_SetConfig+0xf8>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a0b      	ldr	r2, [pc, #44]	@ (80073a4 <TIM_Base_SetConfig+0x120>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d103      	bne.n	8007384 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	691a      	ldr	r2, [r3, #16]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	615a      	str	r2, [r3, #20]
}
 800738a:	bf00      	nop
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	bc80      	pop	{r7}
 8007392:	4770      	bx	lr
 8007394:	40010000 	.word	0x40010000
 8007398:	40000400 	.word	0x40000400
 800739c:	40000800 	.word	0x40000800
 80073a0:	40000c00 	.word	0x40000c00
 80073a4:	40010400 	.word	0x40010400
 80073a8:	40014000 	.word	0x40014000
 80073ac:	40014400 	.word	0x40014400
 80073b0:	40014800 	.word	0x40014800
 80073b4:	40001800 	.word	0x40001800
 80073b8:	40001c00 	.word	0x40001c00
 80073bc:	40002000 	.word	0x40002000

080073c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	f023 0201 	bic.w	r2, r3, #1
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	011b      	lsls	r3, r3, #4
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	f023 030a 	bic.w	r3, r3, #10
 80073fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	4313      	orrs	r3, r2
 8007404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	621a      	str	r2, [r3, #32]
}
 8007412:	bf00      	nop
 8007414:	371c      	adds	r7, #28
 8007416:	46bd      	mov	sp, r7
 8007418:	bc80      	pop	{r7}
 800741a:	4770      	bx	lr

0800741c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6a1b      	ldr	r3, [r3, #32]
 800742c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	f023 0210 	bic.w	r2, r3, #16
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	699b      	ldr	r3, [r3, #24]
 800743e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	031b      	lsls	r3, r3, #12
 800744c:	693a      	ldr	r2, [r7, #16]
 800744e:	4313      	orrs	r3, r2
 8007450:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007458:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	011b      	lsls	r3, r3, #4
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	4313      	orrs	r3, r2
 8007462:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	693a      	ldr	r2, [r7, #16]
 8007468:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	621a      	str	r2, [r3, #32]
}
 8007470:	bf00      	nop
 8007472:	371c      	adds	r7, #28
 8007474:	46bd      	mov	sp, r7
 8007476:	bc80      	pop	{r7}
 8007478:	4770      	bx	lr

0800747a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800747a:	b480      	push	{r7}
 800747c:	b085      	sub	sp, #20
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007490:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4313      	orrs	r3, r2
 8007498:	f043 0307 	orr.w	r3, r3, #7
 800749c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	609a      	str	r2, [r3, #8]
}
 80074a4:	bf00      	nop
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bc80      	pop	{r7}
 80074ac:	4770      	bx	lr

080074ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b087      	sub	sp, #28
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	60f8      	str	r0, [r7, #12]
 80074b6:	60b9      	str	r1, [r7, #8]
 80074b8:	607a      	str	r2, [r7, #4]
 80074ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	021a      	lsls	r2, r3, #8
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	431a      	orrs	r2, r3
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	4313      	orrs	r3, r2
 80074da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	609a      	str	r2, [r3, #8]
}
 80074e2:	bf00      	nop
 80074e4:	371c      	adds	r7, #28
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bc80      	pop	{r7}
 80074ea:	4770      	bx	lr

080074ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d101      	bne.n	8007504 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007500:	2302      	movs	r3, #2
 8007502:	e05a      	b.n	80075ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800752a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	4313      	orrs	r3, r2
 8007534:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a20      	ldr	r2, [pc, #128]	@ (80075c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d022      	beq.n	800758e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007550:	d01d      	beq.n	800758e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a1c      	ldr	r2, [pc, #112]	@ (80075c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d018      	beq.n	800758e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a1a      	ldr	r2, [pc, #104]	@ (80075cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d013      	beq.n	800758e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a19      	ldr	r2, [pc, #100]	@ (80075d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d00e      	beq.n	800758e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a17      	ldr	r2, [pc, #92]	@ (80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d009      	beq.n	800758e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a16      	ldr	r2, [pc, #88]	@ (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d004      	beq.n	800758e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a14      	ldr	r2, [pc, #80]	@ (80075dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d10c      	bne.n	80075a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007594:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	4313      	orrs	r3, r2
 800759e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3714      	adds	r7, #20
 80075be:	46bd      	mov	sp, r7
 80075c0:	bc80      	pop	{r7}
 80075c2:	4770      	bx	lr
 80075c4:	40010000 	.word	0x40010000
 80075c8:	40000400 	.word	0x40000400
 80075cc:	40000800 	.word	0x40000800
 80075d0:	40000c00 	.word	0x40000c00
 80075d4:	40010400 	.word	0x40010400
 80075d8:	40014000 	.word	0x40014000
 80075dc:	40001800 	.word	0x40001800

080075e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bc80      	pop	{r7}
 80075f0:	4770      	bx	lr

080075f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b083      	sub	sp, #12
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075fa:	bf00      	nop
 80075fc:	370c      	adds	r7, #12
 80075fe:	46bd      	mov	sp, r7
 8007600:	bc80      	pop	{r7}
 8007602:	4770      	bx	lr

08007604 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007604:	b084      	sub	sp, #16
 8007606:	b580      	push	{r7, lr}
 8007608:	b084      	sub	sp, #16
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
 800760e:	f107 001c 	add.w	r0, r7, #28
 8007612:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007618:	2b01      	cmp	r3, #1
 800761a:	d122      	bne.n	8007662 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007620:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007630:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007644:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007646:	2b01      	cmp	r3, #1
 8007648:	d105      	bne.n	8007656 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f001 fabc 	bl	8008bd4 <USB_CoreReset>
 800765c:	4603      	mov	r3, r0
 800765e:	73fb      	strb	r3, [r7, #15]
 8007660:	e010      	b.n	8007684 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f001 fab0 	bl	8008bd4 <USB_CoreReset>
 8007674:	4603      	mov	r3, r0
 8007676:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8007684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007686:	2b01      	cmp	r3, #1
 8007688:	d10b      	bne.n	80076a2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f043 0206 	orr.w	r2, r3, #6
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f043 0220 	orr.w	r2, r3, #32
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076ae:	b004      	add	sp, #16
 80076b0:	4770      	bx	lr
	...

080076b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	4613      	mov	r3, r2
 80076c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80076c2:	79fb      	ldrb	r3, [r7, #7]
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d165      	bne.n	8007794 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	4a41      	ldr	r2, [pc, #260]	@ (80077d0 <USB_SetTurnaroundTime+0x11c>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d906      	bls.n	80076de <USB_SetTurnaroundTime+0x2a>
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	4a40      	ldr	r2, [pc, #256]	@ (80077d4 <USB_SetTurnaroundTime+0x120>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d202      	bcs.n	80076de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80076d8:	230f      	movs	r3, #15
 80076da:	617b      	str	r3, [r7, #20]
 80076dc:	e062      	b.n	80077a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	4a3c      	ldr	r2, [pc, #240]	@ (80077d4 <USB_SetTurnaroundTime+0x120>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d306      	bcc.n	80076f4 <USB_SetTurnaroundTime+0x40>
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	4a3b      	ldr	r2, [pc, #236]	@ (80077d8 <USB_SetTurnaroundTime+0x124>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d202      	bcs.n	80076f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80076ee:	230e      	movs	r3, #14
 80076f0:	617b      	str	r3, [r7, #20]
 80076f2:	e057      	b.n	80077a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	4a38      	ldr	r2, [pc, #224]	@ (80077d8 <USB_SetTurnaroundTime+0x124>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d306      	bcc.n	800770a <USB_SetTurnaroundTime+0x56>
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	4a37      	ldr	r2, [pc, #220]	@ (80077dc <USB_SetTurnaroundTime+0x128>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d202      	bcs.n	800770a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007704:	230d      	movs	r3, #13
 8007706:	617b      	str	r3, [r7, #20]
 8007708:	e04c      	b.n	80077a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	4a33      	ldr	r2, [pc, #204]	@ (80077dc <USB_SetTurnaroundTime+0x128>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d306      	bcc.n	8007720 <USB_SetTurnaroundTime+0x6c>
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	4a32      	ldr	r2, [pc, #200]	@ (80077e0 <USB_SetTurnaroundTime+0x12c>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d802      	bhi.n	8007720 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800771a:	230c      	movs	r3, #12
 800771c:	617b      	str	r3, [r7, #20]
 800771e:	e041      	b.n	80077a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	4a2f      	ldr	r2, [pc, #188]	@ (80077e0 <USB_SetTurnaroundTime+0x12c>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d906      	bls.n	8007736 <USB_SetTurnaroundTime+0x82>
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	4a2e      	ldr	r2, [pc, #184]	@ (80077e4 <USB_SetTurnaroundTime+0x130>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d802      	bhi.n	8007736 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007730:	230b      	movs	r3, #11
 8007732:	617b      	str	r3, [r7, #20]
 8007734:	e036      	b.n	80077a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	4a2a      	ldr	r2, [pc, #168]	@ (80077e4 <USB_SetTurnaroundTime+0x130>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d906      	bls.n	800774c <USB_SetTurnaroundTime+0x98>
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	4a29      	ldr	r2, [pc, #164]	@ (80077e8 <USB_SetTurnaroundTime+0x134>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d802      	bhi.n	800774c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007746:	230a      	movs	r3, #10
 8007748:	617b      	str	r3, [r7, #20]
 800774a:	e02b      	b.n	80077a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	4a26      	ldr	r2, [pc, #152]	@ (80077e8 <USB_SetTurnaroundTime+0x134>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d906      	bls.n	8007762 <USB_SetTurnaroundTime+0xae>
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	4a25      	ldr	r2, [pc, #148]	@ (80077ec <USB_SetTurnaroundTime+0x138>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d202      	bcs.n	8007762 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800775c:	2309      	movs	r3, #9
 800775e:	617b      	str	r3, [r7, #20]
 8007760:	e020      	b.n	80077a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	4a21      	ldr	r2, [pc, #132]	@ (80077ec <USB_SetTurnaroundTime+0x138>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d306      	bcc.n	8007778 <USB_SetTurnaroundTime+0xc4>
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	4a20      	ldr	r2, [pc, #128]	@ (80077f0 <USB_SetTurnaroundTime+0x13c>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d802      	bhi.n	8007778 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007772:	2308      	movs	r3, #8
 8007774:	617b      	str	r3, [r7, #20]
 8007776:	e015      	b.n	80077a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	4a1d      	ldr	r2, [pc, #116]	@ (80077f0 <USB_SetTurnaroundTime+0x13c>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d906      	bls.n	800778e <USB_SetTurnaroundTime+0xda>
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	4a1c      	ldr	r2, [pc, #112]	@ (80077f4 <USB_SetTurnaroundTime+0x140>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d202      	bcs.n	800778e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007788:	2307      	movs	r3, #7
 800778a:	617b      	str	r3, [r7, #20]
 800778c:	e00a      	b.n	80077a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800778e:	2306      	movs	r3, #6
 8007790:	617b      	str	r3, [r7, #20]
 8007792:	e007      	b.n	80077a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007794:	79fb      	ldrb	r3, [r7, #7]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d102      	bne.n	80077a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800779a:	2309      	movs	r3, #9
 800779c:	617b      	str	r3, [r7, #20]
 800779e:	e001      	b.n	80077a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80077a0:	2309      	movs	r3, #9
 80077a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	68da      	ldr	r2, [r3, #12]
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	029b      	lsls	r3, r3, #10
 80077b8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80077bc:	431a      	orrs	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	371c      	adds	r7, #28
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bc80      	pop	{r7}
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	00d8acbf 	.word	0x00d8acbf
 80077d4:	00e4e1c0 	.word	0x00e4e1c0
 80077d8:	00f42400 	.word	0x00f42400
 80077dc:	01067380 	.word	0x01067380
 80077e0:	011a499f 	.word	0x011a499f
 80077e4:	01312cff 	.word	0x01312cff
 80077e8:	014ca43f 	.word	0x014ca43f
 80077ec:	016e3600 	.word	0x016e3600
 80077f0:	01a6ab1f 	.word	0x01a6ab1f
 80077f4:	01e84800 	.word	0x01e84800

080077f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	f043 0201 	orr.w	r2, r3, #1
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	bc80      	pop	{r7}
 8007816:	4770      	bx	lr

08007818 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f023 0201 	bic.w	r2, r3, #1
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	bc80      	pop	{r7}
 8007836:	4770      	bx	lr

08007838 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	460b      	mov	r3, r1
 8007842:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007854:	78fb      	ldrb	r3, [r7, #3]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d115      	bne.n	8007886 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007866:	2001      	movs	r0, #1
 8007868:	f7fb fa56 	bl	8002d18 <HAL_Delay>
      ms++;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3301      	adds	r3, #1
 8007870:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f001 f922 	bl	8008abc <USB_GetMode>
 8007878:	4603      	mov	r3, r0
 800787a:	2b01      	cmp	r3, #1
 800787c:	d01e      	beq.n	80078bc <USB_SetCurrentMode+0x84>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2b31      	cmp	r3, #49	@ 0x31
 8007882:	d9f0      	bls.n	8007866 <USB_SetCurrentMode+0x2e>
 8007884:	e01a      	b.n	80078bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007886:	78fb      	ldrb	r3, [r7, #3]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d115      	bne.n	80078b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007898:	2001      	movs	r0, #1
 800789a:	f7fb fa3d 	bl	8002d18 <HAL_Delay>
      ms++;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	3301      	adds	r3, #1
 80078a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f001 f909 	bl	8008abc <USB_GetMode>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d005      	beq.n	80078bc <USB_SetCurrentMode+0x84>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2b31      	cmp	r3, #49	@ 0x31
 80078b4:	d9f0      	bls.n	8007898 <USB_SetCurrentMode+0x60>
 80078b6:	e001      	b.n	80078bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e005      	b.n	80078c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2b32      	cmp	r3, #50	@ 0x32
 80078c0:	d101      	bne.n	80078c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e000      	b.n	80078c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80078c6:	2300      	movs	r3, #0
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80078d0:	b084      	sub	sp, #16
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b086      	sub	sp, #24
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80078de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80078ea:	2300      	movs	r3, #0
 80078ec:	613b      	str	r3, [r7, #16]
 80078ee:	e009      	b.n	8007904 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	3340      	adds	r3, #64	@ 0x40
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	2200      	movs	r2, #0
 80078fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	3301      	adds	r3, #1
 8007902:	613b      	str	r3, [r7, #16]
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	2b0e      	cmp	r3, #14
 8007908:	d9f2      	bls.n	80078f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800790a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800790c:	2b00      	cmp	r3, #0
 800790e:	d11c      	bne.n	800794a <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800791e:	f043 0302 	orr.w	r3, r3, #2
 8007922:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007928:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007934:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007940:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	639a      	str	r2, [r3, #56]	@ 0x38
 8007948:	e00b      	b.n	8007962 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800794e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800795a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007968:	461a      	mov	r2, r3
 800796a:	2300      	movs	r3, #0
 800796c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800796e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007970:	2b01      	cmp	r3, #1
 8007972:	d10c      	bne.n	800798e <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007976:	2b00      	cmp	r3, #0
 8007978:	d104      	bne.n	8007984 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800797a:	2100      	movs	r1, #0
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 f965 	bl	8007c4c <USB_SetDevSpeed>
 8007982:	e008      	b.n	8007996 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007984:	2101      	movs	r1, #1
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f960 	bl	8007c4c <USB_SetDevSpeed>
 800798c:	e003      	b.n	8007996 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800798e:	2103      	movs	r1, #3
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 f95b 	bl	8007c4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007996:	2110      	movs	r1, #16
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f8f3 	bl	8007b84 <USB_FlushTxFifo>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f91f 	bl	8007bec <USB_FlushRxFifo>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d001      	beq.n	80079b8 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079be:	461a      	mov	r2, r3
 80079c0:	2300      	movs	r3, #0
 80079c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079ca:	461a      	mov	r2, r3
 80079cc:	2300      	movs	r3, #0
 80079ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079d6:	461a      	mov	r2, r3
 80079d8:	2300      	movs	r3, #0
 80079da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079dc:	2300      	movs	r3, #0
 80079de:	613b      	str	r3, [r7, #16]
 80079e0:	e043      	b.n	8007a6a <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079f8:	d118      	bne.n	8007a2c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10a      	bne.n	8007a16 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	015a      	lsls	r2, r3, #5
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	4413      	add	r3, r2
 8007a08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007a12:	6013      	str	r3, [r2, #0]
 8007a14:	e013      	b.n	8007a3e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	015a      	lsls	r2, r3, #5
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a22:	461a      	mov	r2, r3
 8007a24:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007a28:	6013      	str	r3, [r2, #0]
 8007a2a:	e008      	b.n	8007a3e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a38:	461a      	mov	r2, r3
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	015a      	lsls	r2, r3, #5
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	4413      	add	r3, r2
 8007a46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007a62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	3301      	adds	r3, #1
 8007a68:	613b      	str	r3, [r7, #16]
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d3b7      	bcc.n	80079e2 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a72:	2300      	movs	r3, #0
 8007a74:	613b      	str	r3, [r7, #16]
 8007a76:	e043      	b.n	8007b00 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a8e:	d118      	bne.n	8007ac2 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10a      	bne.n	8007aac <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	015a      	lsls	r2, r3, #5
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007aa8:	6013      	str	r3, [r2, #0]
 8007aaa:	e013      	b.n	8007ad4 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	015a      	lsls	r2, r3, #5
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ab8:	461a      	mov	r2, r3
 8007aba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007abe:	6013      	str	r3, [r2, #0]
 8007ac0:	e008      	b.n	8007ad4 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	015a      	lsls	r2, r3, #5
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ace:	461a      	mov	r2, r3
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	015a      	lsls	r2, r3, #5
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	4413      	add	r3, r2
 8007adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007af2:	461a      	mov	r2, r3
 8007af4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007af8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	3301      	adds	r3, #1
 8007afe:	613b      	str	r3, [r7, #16]
 8007b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d3b7      	bcc.n	8007a78 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b1a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007b28:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d105      	bne.n	8007b3c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	f043 0210 	orr.w	r2, r3, #16
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	699a      	ldr	r2, [r3, #24]
 8007b40:	4b0f      	ldr	r3, [pc, #60]	@ (8007b80 <USB_DevInit+0x2b0>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d005      	beq.n	8007b5a <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	f043 0208 	orr.w	r2, r3, #8
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007b5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d107      	bne.n	8007b70 <USB_DevInit+0x2a0>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b68:	f043 0304 	orr.w	r3, r3, #4
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b7c:	b004      	add	sp, #16
 8007b7e:	4770      	bx	lr
 8007b80:	803c3800 	.word	0x803c3800

08007b84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	3301      	adds	r3, #1
 8007b96:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4a13      	ldr	r2, [pc, #76]	@ (8007be8 <USB_FlushTxFifo+0x64>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d901      	bls.n	8007ba4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e01b      	b.n	8007bdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	daf2      	bge.n	8007b92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007bac:	2300      	movs	r3, #0
 8007bae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	019b      	lsls	r3, r3, #6
 8007bb4:	f043 0220 	orr.w	r2, r3, #32
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4a08      	ldr	r2, [pc, #32]	@ (8007be8 <USB_FlushTxFifo+0x64>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d901      	bls.n	8007bce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e006      	b.n	8007bdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	f003 0320 	and.w	r3, r3, #32
 8007bd6:	2b20      	cmp	r3, #32
 8007bd8:	d0f0      	beq.n	8007bbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3714      	adds	r7, #20
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bc80      	pop	{r7}
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	00030d40 	.word	0x00030d40

08007bec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	4a11      	ldr	r2, [pc, #68]	@ (8007c48 <USB_FlushRxFifo+0x5c>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d901      	bls.n	8007c0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c06:	2303      	movs	r3, #3
 8007c08:	e018      	b.n	8007c3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	daf2      	bge.n	8007bf8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2210      	movs	r2, #16
 8007c1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	4a08      	ldr	r2, [pc, #32]	@ (8007c48 <USB_FlushRxFifo+0x5c>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d901      	bls.n	8007c2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e006      	b.n	8007c3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	f003 0310 	and.w	r3, r3, #16
 8007c36:	2b10      	cmp	r3, #16
 8007c38:	d0f0      	beq.n	8007c1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3714      	adds	r7, #20
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bc80      	pop	{r7}
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	00030d40 	.word	0x00030d40

08007c4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	460b      	mov	r3, r1
 8007c56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	78fb      	ldrb	r3, [r7, #3]
 8007c66:	68f9      	ldr	r1, [r7, #12]
 8007c68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bc80      	pop	{r7}
 8007c7a:	4770      	bx	lr

08007c7c <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f003 0306 	and.w	r3, r3, #6
 8007c94:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d102      	bne.n	8007ca2 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	75fb      	strb	r3, [r7, #23]
 8007ca0:	e00a      	b.n	8007cb8 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d002      	beq.n	8007cae <USB_GetDevSpeed+0x32>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2b06      	cmp	r3, #6
 8007cac:	d102      	bne.n	8007cb4 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007cae:	2302      	movs	r3, #2
 8007cb0:	75fb      	strb	r3, [r7, #23]
 8007cb2:	e001      	b.n	8007cb8 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007cb4:	230f      	movs	r3, #15
 8007cb6:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	371c      	adds	r7, #28
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bc80      	pop	{r7}
 8007cc2:	4770      	bx	lr

08007cc4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	785b      	ldrb	r3, [r3, #1]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d13a      	bne.n	8007d56 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ce6:	69da      	ldr	r2, [r3, #28]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	f003 030f 	and.w	r3, r3, #15
 8007cf0:	2101      	movs	r1, #1
 8007cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	68f9      	ldr	r1, [r7, #12]
 8007cfa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	015a      	lsls	r2, r3, #5
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d155      	bne.n	8007dc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	791b      	ldrb	r3, [r3, #4]
 8007d32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	059b      	lsls	r3, r3, #22
 8007d3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	0151      	lsls	r1, r2, #5
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	440a      	add	r2, r1
 8007d46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d52:	6013      	str	r3, [r2, #0]
 8007d54:	e036      	b.n	8007dc4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d5c:	69da      	ldr	r2, [r3, #28]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	f003 030f 	and.w	r3, r3, #15
 8007d66:	2101      	movs	r1, #1
 8007d68:	fa01 f303 	lsl.w	r3, r1, r3
 8007d6c:	041b      	lsls	r3, r3, #16
 8007d6e:	68f9      	ldr	r1, [r7, #12]
 8007d70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d74:	4313      	orrs	r3, r2
 8007d76:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d11a      	bne.n	8007dc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	015a      	lsls	r2, r3, #5
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	4413      	add	r3, r2
 8007d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	791b      	ldrb	r3, [r3, #4]
 8007da8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007daa:	430b      	orrs	r3, r1
 8007dac:	4313      	orrs	r3, r2
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	0151      	lsls	r1, r2, #5
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	440a      	add	r2, r1
 8007db6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dc2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bc80      	pop	{r7}
 8007dce:	4770      	bx	lr

08007dd0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	785b      	ldrb	r3, [r3, #1]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d161      	bne.n	8007eb0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e02:	d11f      	bne.n	8007e44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	0151      	lsls	r1, r2, #5
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	440a      	add	r2, r1
 8007e1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e1e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007e22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	015a      	lsls	r2, r3, #5
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	0151      	lsls	r1, r2, #5
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	440a      	add	r2, r1
 8007e3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	f003 030f 	and.w	r3, r3, #15
 8007e54:	2101      	movs	r1, #1
 8007e56:	fa01 f303 	lsl.w	r3, r1, r3
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	43db      	mvns	r3, r3
 8007e5e:	68f9      	ldr	r1, [r7, #12]
 8007e60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e64:	4013      	ands	r3, r2
 8007e66:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e6e:	69da      	ldr	r2, [r3, #28]
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	f003 030f 	and.w	r3, r3, #15
 8007e78:	2101      	movs	r1, #1
 8007e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	43db      	mvns	r3, r3
 8007e82:	68f9      	ldr	r1, [r7, #12]
 8007e84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007e88:	4013      	ands	r3, r2
 8007e8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	015a      	lsls	r2, r3, #5
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4413      	add	r3, r2
 8007e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	0159      	lsls	r1, r3, #5
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	440b      	add	r3, r1
 8007ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	4b35      	ldr	r3, [pc, #212]	@ (8007f80 <USB_DeactivateEndpoint+0x1b0>)
 8007eaa:	4013      	ands	r3, r2
 8007eac:	600b      	str	r3, [r1, #0]
 8007eae:	e060      	b.n	8007f72 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	015a      	lsls	r2, r3, #5
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ec2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ec6:	d11f      	bne.n	8007f08 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	015a      	lsls	r2, r3, #5
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	0151      	lsls	r1, r2, #5
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	440a      	add	r2, r1
 8007ede:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ee2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ee6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	015a      	lsls	r2, r3, #5
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	4413      	add	r3, r2
 8007ef0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68ba      	ldr	r2, [r7, #8]
 8007ef8:	0151      	lsls	r1, r2, #5
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	440a      	add	r2, r1
 8007efe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	f003 030f 	and.w	r3, r3, #15
 8007f18:	2101      	movs	r1, #1
 8007f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f1e:	041b      	lsls	r3, r3, #16
 8007f20:	43db      	mvns	r3, r3
 8007f22:	68f9      	ldr	r1, [r7, #12]
 8007f24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f28:	4013      	ands	r3, r2
 8007f2a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f32:	69da      	ldr	r2, [r3, #28]
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	f003 030f 	and.w	r3, r3, #15
 8007f3c:	2101      	movs	r1, #1
 8007f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f42:	041b      	lsls	r3, r3, #16
 8007f44:	43db      	mvns	r3, r3
 8007f46:	68f9      	ldr	r1, [r7, #12]
 8007f48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	015a      	lsls	r2, r3, #5
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	4413      	add	r3, r2
 8007f58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	0159      	lsls	r1, r3, #5
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	440b      	add	r3, r1
 8007f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	4b05      	ldr	r3, [pc, #20]	@ (8007f84 <USB_DeactivateEndpoint+0x1b4>)
 8007f6e:	4013      	ands	r3, r2
 8007f70:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bc80      	pop	{r7}
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	ec337800 	.word	0xec337800
 8007f84:	eff37800 	.word	0xeff37800

08007f88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b08a      	sub	sp, #40	@ 0x28
 8007f8c:	af02      	add	r7, sp, #8
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	4613      	mov	r3, r2
 8007f94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	785b      	ldrb	r3, [r3, #1]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	f040 817a 	bne.w	800829e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d132      	bne.n	8008018 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	015a      	lsls	r2, r3, #5
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	4413      	add	r3, r2
 8007fba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	69ba      	ldr	r2, [r7, #24]
 8007fc2:	0151      	lsls	r1, r2, #5
 8007fc4:	69fa      	ldr	r2, [r7, #28]
 8007fc6:	440a      	add	r2, r1
 8007fc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fcc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007fd0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007fd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	0151      	lsls	r1, r2, #5
 8007fe8:	69fa      	ldr	r2, [r7, #28]
 8007fea:	440a      	add	r2, r1
 8007fec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ff0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ff4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	69ba      	ldr	r2, [r7, #24]
 8008006:	0151      	lsls	r1, r2, #5
 8008008:	69fa      	ldr	r2, [r7, #28]
 800800a:	440a      	add	r2, r1
 800800c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008010:	0cdb      	lsrs	r3, r3, #19
 8008012:	04db      	lsls	r3, r3, #19
 8008014:	6113      	str	r3, [r2, #16]
 8008016:	e092      	b.n	800813e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	4413      	add	r3, r2
 8008020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	69fa      	ldr	r2, [r7, #28]
 800802c:	440a      	add	r2, r1
 800802e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008032:	0cdb      	lsrs	r3, r3, #19
 8008034:	04db      	lsls	r3, r3, #19
 8008036:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	015a      	lsls	r2, r3, #5
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	4413      	add	r3, r2
 8008040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	0151      	lsls	r1, r2, #5
 800804a:	69fa      	ldr	r2, [r7, #28]
 800804c:	440a      	add	r2, r1
 800804e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008052:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008056:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800805a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d11a      	bne.n	8008098 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	691a      	ldr	r2, [r3, #16]
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	429a      	cmp	r2, r3
 800806c:	d903      	bls.n	8008076 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	689a      	ldr	r2, [r3, #8]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	015a      	lsls	r2, r3, #5
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	4413      	add	r3, r2
 800807e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	69ba      	ldr	r2, [r7, #24]
 8008086:	0151      	lsls	r1, r2, #5
 8008088:	69fa      	ldr	r2, [r7, #28]
 800808a:	440a      	add	r2, r1
 800808c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008090:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008094:	6113      	str	r3, [r2, #16]
 8008096:	e01b      	b.n	80080d0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	015a      	lsls	r2, r3, #5
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	4413      	add	r3, r2
 80080a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080a4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	6919      	ldr	r1, [r3, #16]
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	440b      	add	r3, r1
 80080b0:	1e59      	subs	r1, r3, #1
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80080ba:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80080bc:	4ba2      	ldr	r3, [pc, #648]	@ (8008348 <USB_EPStartXfer+0x3c0>)
 80080be:	400b      	ands	r3, r1
 80080c0:	69b9      	ldr	r1, [r7, #24]
 80080c2:	0148      	lsls	r0, r1, #5
 80080c4:	69f9      	ldr	r1, [r7, #28]
 80080c6:	4401      	add	r1, r0
 80080c8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80080cc:	4313      	orrs	r3, r2
 80080ce:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080dc:	691a      	ldr	r2, [r3, #16]
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080e6:	69b9      	ldr	r1, [r7, #24]
 80080e8:	0148      	lsls	r0, r1, #5
 80080ea:	69f9      	ldr	r1, [r7, #28]
 80080ec:	4401      	add	r1, r0
 80080ee:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80080f2:	4313      	orrs	r3, r2
 80080f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	791b      	ldrb	r3, [r3, #4]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d11f      	bne.n	800813e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	015a      	lsls	r2, r3, #5
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	4413      	add	r3, r2
 8008106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	69ba      	ldr	r2, [r7, #24]
 800810e:	0151      	lsls	r1, r2, #5
 8008110:	69fa      	ldr	r2, [r7, #28]
 8008112:	440a      	add	r2, r1
 8008114:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008118:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800811c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	015a      	lsls	r2, r3, #5
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	4413      	add	r3, r2
 8008126:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	69ba      	ldr	r2, [r7, #24]
 800812e:	0151      	lsls	r1, r2, #5
 8008130:	69fa      	ldr	r2, [r7, #28]
 8008132:	440a      	add	r2, r1
 8008134:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008138:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800813c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800813e:	79fb      	ldrb	r3, [r7, #7]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d14b      	bne.n	80081dc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	69db      	ldr	r3, [r3, #28]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d009      	beq.n	8008160 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	015a      	lsls	r2, r3, #5
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	4413      	add	r3, r2
 8008154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008158:	461a      	mov	r2, r3
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	69db      	ldr	r3, [r3, #28]
 800815e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	791b      	ldrb	r3, [r3, #4]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d128      	bne.n	80081ba <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008174:	2b00      	cmp	r3, #0
 8008176:	d110      	bne.n	800819a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	015a      	lsls	r2, r3, #5
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	4413      	add	r3, r2
 8008180:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	69ba      	ldr	r2, [r7, #24]
 8008188:	0151      	lsls	r1, r2, #5
 800818a:	69fa      	ldr	r2, [r7, #28]
 800818c:	440a      	add	r2, r1
 800818e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008192:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008196:	6013      	str	r3, [r2, #0]
 8008198:	e00f      	b.n	80081ba <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	0151      	lsls	r1, r2, #5
 80081ac:	69fa      	ldr	r2, [r7, #28]
 80081ae:	440a      	add	r2, r1
 80081b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081b8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	69ba      	ldr	r2, [r7, #24]
 80081ca:	0151      	lsls	r1, r2, #5
 80081cc:	69fa      	ldr	r2, [r7, #28]
 80081ce:	440a      	add	r2, r1
 80081d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081d4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80081d8:	6013      	str	r3, [r2, #0]
 80081da:	e165      	b.n	80084a8 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	015a      	lsls	r2, r3, #5
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	4413      	add	r3, r2
 80081e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	69ba      	ldr	r2, [r7, #24]
 80081ec:	0151      	lsls	r1, r2, #5
 80081ee:	69fa      	ldr	r2, [r7, #28]
 80081f0:	440a      	add	r2, r1
 80081f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081f6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80081fa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	791b      	ldrb	r3, [r3, #4]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d015      	beq.n	8008230 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 814d 	beq.w	80084a8 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008214:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	f003 030f 	and.w	r3, r3, #15
 800821e:	2101      	movs	r1, #1
 8008220:	fa01 f303 	lsl.w	r3, r1, r3
 8008224:	69f9      	ldr	r1, [r7, #28]
 8008226:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800822a:	4313      	orrs	r3, r2
 800822c:	634b      	str	r3, [r1, #52]	@ 0x34
 800822e:	e13b      	b.n	80084a8 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800823c:	2b00      	cmp	r3, #0
 800823e:	d110      	bne.n	8008262 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	015a      	lsls	r2, r3, #5
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	4413      	add	r3, r2
 8008248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	69ba      	ldr	r2, [r7, #24]
 8008250:	0151      	lsls	r1, r2, #5
 8008252:	69fa      	ldr	r2, [r7, #28]
 8008254:	440a      	add	r2, r1
 8008256:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800825a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800825e:	6013      	str	r3, [r2, #0]
 8008260:	e00f      	b.n	8008282 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	015a      	lsls	r2, r3, #5
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	4413      	add	r3, r2
 800826a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	69ba      	ldr	r2, [r7, #24]
 8008272:	0151      	lsls	r1, r2, #5
 8008274:	69fa      	ldr	r2, [r7, #28]
 8008276:	440a      	add	r2, r1
 8008278:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800827c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008280:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	68d9      	ldr	r1, [r3, #12]
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	781a      	ldrb	r2, [r3, #0]
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	b298      	uxth	r0, r3
 8008290:	79fb      	ldrb	r3, [r7, #7]
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	4603      	mov	r3, r0
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f000 f9b7 	bl	800860a <USB_WritePacket>
 800829c:	e104      	b.n	80084a8 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	015a      	lsls	r2, r3, #5
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	4413      	add	r3, r2
 80082a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	69ba      	ldr	r2, [r7, #24]
 80082ae:	0151      	lsls	r1, r2, #5
 80082b0:	69fa      	ldr	r2, [r7, #28]
 80082b2:	440a      	add	r2, r1
 80082b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082b8:	0cdb      	lsrs	r3, r3, #19
 80082ba:	04db      	lsls	r3, r3, #19
 80082bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	015a      	lsls	r2, r3, #5
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	4413      	add	r3, r2
 80082c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	69ba      	ldr	r2, [r7, #24]
 80082ce:	0151      	lsls	r1, r2, #5
 80082d0:	69fa      	ldr	r2, [r7, #28]
 80082d2:	440a      	add	r2, r1
 80082d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082d8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80082dc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80082e0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d131      	bne.n	800834c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d003      	beq.n	80082f8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	689a      	ldr	r2, [r3, #8]
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	689a      	ldr	r2, [r3, #8]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	015a      	lsls	r2, r3, #5
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	4413      	add	r3, r2
 8008308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800830c:	691a      	ldr	r2, [r3, #16]
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008316:	69b9      	ldr	r1, [r7, #24]
 8008318:	0148      	lsls	r0, r1, #5
 800831a:	69f9      	ldr	r1, [r7, #28]
 800831c:	4401      	add	r1, r0
 800831e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008322:	4313      	orrs	r3, r2
 8008324:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	015a      	lsls	r2, r3, #5
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	4413      	add	r3, r2
 800832e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	69ba      	ldr	r2, [r7, #24]
 8008336:	0151      	lsls	r1, r2, #5
 8008338:	69fa      	ldr	r2, [r7, #28]
 800833a:	440a      	add	r2, r1
 800833c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008340:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008344:	6113      	str	r3, [r2, #16]
 8008346:	e061      	b.n	800840c <USB_EPStartXfer+0x484>
 8008348:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d123      	bne.n	800839c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	015a      	lsls	r2, r3, #5
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	4413      	add	r3, r2
 800835c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008360:	691a      	ldr	r2, [r3, #16]
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800836a:	69b9      	ldr	r1, [r7, #24]
 800836c:	0148      	lsls	r0, r1, #5
 800836e:	69f9      	ldr	r1, [r7, #28]
 8008370:	4401      	add	r1, r0
 8008372:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008376:	4313      	orrs	r3, r2
 8008378:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	015a      	lsls	r2, r3, #5
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	4413      	add	r3, r2
 8008382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	0151      	lsls	r1, r2, #5
 800838c:	69fa      	ldr	r2, [r7, #28]
 800838e:	440a      	add	r2, r1
 8008390:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008394:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008398:	6113      	str	r3, [r2, #16]
 800839a:	e037      	b.n	800840c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	691a      	ldr	r2, [r3, #16]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	4413      	add	r3, r2
 80083a6:	1e5a      	subs	r2, r3, #1
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80083b0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	8afa      	ldrh	r2, [r7, #22]
 80083b8:	fb03 f202 	mul.w	r2, r3, r2
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	69fb      	ldr	r3, [r7, #28]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083cc:	691a      	ldr	r2, [r3, #16]
 80083ce:	8afb      	ldrh	r3, [r7, #22]
 80083d0:	04d9      	lsls	r1, r3, #19
 80083d2:	4b38      	ldr	r3, [pc, #224]	@ (80084b4 <USB_EPStartXfer+0x52c>)
 80083d4:	400b      	ands	r3, r1
 80083d6:	69b9      	ldr	r1, [r7, #24]
 80083d8:	0148      	lsls	r0, r1, #5
 80083da:	69f9      	ldr	r1, [r7, #28]
 80083dc:	4401      	add	r1, r0
 80083de:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80083e2:	4313      	orrs	r3, r2
 80083e4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	015a      	lsls	r2, r3, #5
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083f2:	691a      	ldr	r2, [r3, #16]
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083fc:	69b9      	ldr	r1, [r7, #24]
 80083fe:	0148      	lsls	r0, r1, #5
 8008400:	69f9      	ldr	r1, [r7, #28]
 8008402:	4401      	add	r1, r0
 8008404:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008408:	4313      	orrs	r3, r2
 800840a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800840c:	79fb      	ldrb	r3, [r7, #7]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d10d      	bne.n	800842e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d009      	beq.n	800842e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	68d9      	ldr	r1, [r3, #12]
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	015a      	lsls	r2, r3, #5
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	4413      	add	r3, r2
 8008426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800842a:	460a      	mov	r2, r1
 800842c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	791b      	ldrb	r3, [r3, #4]
 8008432:	2b01      	cmp	r3, #1
 8008434:	d128      	bne.n	8008488 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008442:	2b00      	cmp	r3, #0
 8008444:	d110      	bne.n	8008468 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	015a      	lsls	r2, r3, #5
 800844a:	69fb      	ldr	r3, [r7, #28]
 800844c:	4413      	add	r3, r2
 800844e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	69ba      	ldr	r2, [r7, #24]
 8008456:	0151      	lsls	r1, r2, #5
 8008458:	69fa      	ldr	r2, [r7, #28]
 800845a:	440a      	add	r2, r1
 800845c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008460:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008464:	6013      	str	r3, [r2, #0]
 8008466:	e00f      	b.n	8008488 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	015a      	lsls	r2, r3, #5
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	4413      	add	r3, r2
 8008470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69ba      	ldr	r2, [r7, #24]
 8008478:	0151      	lsls	r1, r2, #5
 800847a:	69fa      	ldr	r2, [r7, #28]
 800847c:	440a      	add	r2, r1
 800847e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008482:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008486:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	015a      	lsls	r2, r3, #5
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	4413      	add	r3, r2
 8008490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	69ba      	ldr	r2, [r7, #24]
 8008498:	0151      	lsls	r1, r2, #5
 800849a:	69fa      	ldr	r2, [r7, #28]
 800849c:	440a      	add	r2, r1
 800849e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084a2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80084a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3720      	adds	r7, #32
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	1ff80000 	.word	0x1ff80000

080084b8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80084c2:	2300      	movs	r3, #0
 80084c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	785b      	ldrb	r3, [r3, #1]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d14a      	bne.n	800856c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084ee:	f040 8086 	bne.w	80085fe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	7812      	ldrb	r2, [r2, #0]
 8008506:	0151      	lsls	r1, r2, #5
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	440a      	add	r2, r1
 800850c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008510:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008514:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	015a      	lsls	r2, r3, #5
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	4413      	add	r3, r2
 8008520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	7812      	ldrb	r2, [r2, #0]
 800852a:	0151      	lsls	r1, r2, #5
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	440a      	add	r2, r1
 8008530:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008534:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008538:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	3301      	adds	r3, #1
 800853e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008546:	4293      	cmp	r3, r2
 8008548:	d902      	bls.n	8008550 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	75fb      	strb	r3, [r7, #23]
          break;
 800854e:	e056      	b.n	80085fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	015a      	lsls	r2, r3, #5
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	4413      	add	r3, r2
 800855a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008564:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008568:	d0e7      	beq.n	800853a <USB_EPStopXfer+0x82>
 800856a:	e048      	b.n	80085fe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	4413      	add	r3, r2
 8008576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008580:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008584:	d13b      	bne.n	80085fe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	4413      	add	r3, r2
 8008590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	7812      	ldrb	r2, [r2, #0]
 800859a:	0151      	lsls	r1, r2, #5
 800859c:	693a      	ldr	r2, [r7, #16]
 800859e:	440a      	add	r2, r1
 80085a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085a4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80085a8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	015a      	lsls	r2, r3, #5
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	4413      	add	r3, r2
 80085b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	7812      	ldrb	r2, [r2, #0]
 80085be:	0151      	lsls	r1, r2, #5
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	440a      	add	r2, r1
 80085c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	3301      	adds	r3, #1
 80085d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80085da:	4293      	cmp	r3, r2
 80085dc:	d902      	bls.n	80085e4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	75fb      	strb	r3, [r7, #23]
          break;
 80085e2:	e00c      	b.n	80085fe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	015a      	lsls	r2, r3, #5
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	4413      	add	r3, r2
 80085ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085fc:	d0e7      	beq.n	80085ce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008600:	4618      	mov	r0, r3
 8008602:	371c      	adds	r7, #28
 8008604:	46bd      	mov	sp, r7
 8008606:	bc80      	pop	{r7}
 8008608:	4770      	bx	lr

0800860a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800860a:	b480      	push	{r7}
 800860c:	b089      	sub	sp, #36	@ 0x24
 800860e:	af00      	add	r7, sp, #0
 8008610:	60f8      	str	r0, [r7, #12]
 8008612:	60b9      	str	r1, [r7, #8]
 8008614:	4611      	mov	r1, r2
 8008616:	461a      	mov	r2, r3
 8008618:	460b      	mov	r3, r1
 800861a:	71fb      	strb	r3, [r7, #7]
 800861c:	4613      	mov	r3, r2
 800861e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008628:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800862c:	2b00      	cmp	r3, #0
 800862e:	d123      	bne.n	8008678 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008630:	88bb      	ldrh	r3, [r7, #4]
 8008632:	3303      	adds	r3, #3
 8008634:	089b      	lsrs	r3, r3, #2
 8008636:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008638:	2300      	movs	r3, #0
 800863a:	61bb      	str	r3, [r7, #24]
 800863c:	e018      	b.n	8008670 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800863e:	79fb      	ldrb	r3, [r7, #7]
 8008640:	031a      	lsls	r2, r3, #12
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	4413      	add	r3, r2
 8008646:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800864a:	461a      	mov	r2, r3
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	3301      	adds	r3, #1
 8008656:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	3301      	adds	r3, #1
 800865c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	3301      	adds	r3, #1
 8008662:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	3301      	adds	r3, #1
 8008668:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	3301      	adds	r3, #1
 800866e:	61bb      	str	r3, [r7, #24]
 8008670:	69ba      	ldr	r2, [r7, #24]
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	429a      	cmp	r2, r3
 8008676:	d3e2      	bcc.n	800863e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3724      	adds	r7, #36	@ 0x24
 800867e:	46bd      	mov	sp, r7
 8008680:	bc80      	pop	{r7}
 8008682:	4770      	bx	lr

08008684 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008684:	b480      	push	{r7}
 8008686:	b08b      	sub	sp, #44	@ 0x2c
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	4613      	mov	r3, r2
 8008690:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800869a:	88fb      	ldrh	r3, [r7, #6]
 800869c:	089b      	lsrs	r3, r3, #2
 800869e:	b29b      	uxth	r3, r3
 80086a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80086a2:	88fb      	ldrh	r3, [r7, #6]
 80086a4:	f003 0303 	and.w	r3, r3, #3
 80086a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80086aa:	2300      	movs	r3, #0
 80086ac:	623b      	str	r3, [r7, #32]
 80086ae:	e014      	b.n	80086da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80086bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086be:	3301      	adds	r3, #1
 80086c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80086c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c4:	3301      	adds	r3, #1
 80086c6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80086c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ca:	3301      	adds	r3, #1
 80086cc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80086ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d0:	3301      	adds	r3, #1
 80086d2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80086d4:	6a3b      	ldr	r3, [r7, #32]
 80086d6:	3301      	adds	r3, #1
 80086d8:	623b      	str	r3, [r7, #32]
 80086da:	6a3a      	ldr	r2, [r7, #32]
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d3e6      	bcc.n	80086b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80086e2:	8bfb      	ldrh	r3, [r7, #30]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d01e      	beq.n	8008726 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80086e8:	2300      	movs	r3, #0
 80086ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80086ec:	69bb      	ldr	r3, [r7, #24]
 80086ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80086f2:	461a      	mov	r2, r3
 80086f4:	f107 0310 	add.w	r3, r7, #16
 80086f8:	6812      	ldr	r2, [r2, #0]
 80086fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	6a3b      	ldr	r3, [r7, #32]
 8008700:	b2db      	uxtb	r3, r3
 8008702:	00db      	lsls	r3, r3, #3
 8008704:	fa22 f303 	lsr.w	r3, r2, r3
 8008708:	b2da      	uxtb	r2, r3
 800870a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870c:	701a      	strb	r2, [r3, #0]
      i++;
 800870e:	6a3b      	ldr	r3, [r7, #32]
 8008710:	3301      	adds	r3, #1
 8008712:	623b      	str	r3, [r7, #32]
      pDest++;
 8008714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008716:	3301      	adds	r3, #1
 8008718:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800871a:	8bfb      	ldrh	r3, [r7, #30]
 800871c:	3b01      	subs	r3, #1
 800871e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008720:	8bfb      	ldrh	r3, [r7, #30]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1ea      	bne.n	80086fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008728:	4618      	mov	r0, r3
 800872a:	372c      	adds	r7, #44	@ 0x2c
 800872c:	46bd      	mov	sp, r7
 800872e:	bc80      	pop	{r7}
 8008730:	4770      	bx	lr

08008732 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008732:	b480      	push	{r7}
 8008734:	b085      	sub	sp, #20
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
 800873a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	785b      	ldrb	r3, [r3, #1]
 800874a:	2b01      	cmp	r3, #1
 800874c:	d12c      	bne.n	80087a8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	015a      	lsls	r2, r3, #5
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	4413      	add	r3, r2
 8008756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	db12      	blt.n	8008786 <USB_EPSetStall+0x54>
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00f      	beq.n	8008786 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	015a      	lsls	r2, r3, #5
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	4413      	add	r3, r2
 800876e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	0151      	lsls	r1, r2, #5
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	440a      	add	r2, r1
 800877c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008780:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008784:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	015a      	lsls	r2, r3, #5
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	4413      	add	r3, r2
 800878e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	0151      	lsls	r1, r2, #5
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	440a      	add	r2, r1
 800879c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80087a4:	6013      	str	r3, [r2, #0]
 80087a6:	e02b      	b.n	8008800 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	015a      	lsls	r2, r3, #5
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	4413      	add	r3, r2
 80087b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	db12      	blt.n	80087e0 <USB_EPSetStall+0xae>
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00f      	beq.n	80087e0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	015a      	lsls	r2, r3, #5
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	4413      	add	r3, r2
 80087c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	0151      	lsls	r1, r2, #5
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	440a      	add	r2, r1
 80087d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80087de:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	015a      	lsls	r2, r3, #5
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	0151      	lsls	r1, r2, #5
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	440a      	add	r2, r1
 80087f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80087fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3714      	adds	r7, #20
 8008806:	46bd      	mov	sp, r7
 8008808:	bc80      	pop	{r7}
 800880a:	4770      	bx	lr

0800880c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800880c:	b480      	push	{r7}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	785b      	ldrb	r3, [r3, #1]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d128      	bne.n	800887a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	015a      	lsls	r2, r3, #5
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	4413      	add	r3, r2
 8008830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	0151      	lsls	r1, r2, #5
 800883a:	68fa      	ldr	r2, [r7, #12]
 800883c:	440a      	add	r2, r1
 800883e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008842:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008846:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	791b      	ldrb	r3, [r3, #4]
 800884c:	2b03      	cmp	r3, #3
 800884e:	d003      	beq.n	8008858 <USB_EPClearStall+0x4c>
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	791b      	ldrb	r3, [r3, #4]
 8008854:	2b02      	cmp	r3, #2
 8008856:	d138      	bne.n	80088ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	015a      	lsls	r2, r3, #5
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	4413      	add	r3, r2
 8008860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68ba      	ldr	r2, [r7, #8]
 8008868:	0151      	lsls	r1, r2, #5
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	440a      	add	r2, r1
 800886e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008872:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008876:	6013      	str	r3, [r2, #0]
 8008878:	e027      	b.n	80088ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	015a      	lsls	r2, r3, #5
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	4413      	add	r3, r2
 8008882:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	0151      	lsls	r1, r2, #5
 800888c:	68fa      	ldr	r2, [r7, #12]
 800888e:	440a      	add	r2, r1
 8008890:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008894:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008898:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	791b      	ldrb	r3, [r3, #4]
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d003      	beq.n	80088aa <USB_EPClearStall+0x9e>
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	791b      	ldrb	r3, [r3, #4]
 80088a6:	2b02      	cmp	r3, #2
 80088a8:	d10f      	bne.n	80088ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	015a      	lsls	r2, r3, #5
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	4413      	add	r3, r2
 80088b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	0151      	lsls	r1, r2, #5
 80088bc:	68fa      	ldr	r2, [r7, #12]
 80088be:	440a      	add	r2, r1
 80088c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3714      	adds	r7, #20
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bc80      	pop	{r7}
 80088d4:	4770      	bx	lr

080088d6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b085      	sub	sp, #20
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	460b      	mov	r3, r1
 80088e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80088f4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80088f8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	78fb      	ldrb	r3, [r7, #3]
 8008904:	011b      	lsls	r3, r3, #4
 8008906:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800890a:	68f9      	ldr	r1, [r7, #12]
 800890c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008910:	4313      	orrs	r3, r2
 8008912:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3714      	adds	r7, #20
 800891a:	46bd      	mov	sp, r7
 800891c:	bc80      	pop	{r7}
 800891e:	4770      	bx	lr

08008920 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800893a:	f023 0303 	bic.w	r3, r3, #3
 800893e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800894e:	f023 0302 	bic.w	r3, r3, #2
 8008952:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3714      	adds	r7, #20
 800895a:	46bd      	mov	sp, r7
 800895c:	bc80      	pop	{r7}
 800895e:	4770      	bx	lr

08008960 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800897a:	f023 0303 	bic.w	r3, r3, #3
 800897e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800898e:	f043 0302 	orr.w	r3, r3, #2
 8008992:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3714      	adds	r7, #20
 800899a:	46bd      	mov	sp, r7
 800899c:	bc80      	pop	{r7}
 800899e:	4770      	bx	lr

080089a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	695b      	ldr	r3, [r3, #20]
 80089ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	699b      	ldr	r3, [r3, #24]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	4013      	ands	r3, r2
 80089b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80089b8:	68fb      	ldr	r3, [r7, #12]
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3714      	adds	r7, #20
 80089be:	46bd      	mov	sp, r7
 80089c0:	bc80      	pop	{r7}
 80089c2:	4770      	bx	lr

080089c4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089e0:	69db      	ldr	r3, [r3, #28]
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	4013      	ands	r3, r2
 80089e6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	0c1b      	lsrs	r3, r3, #16
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3714      	adds	r7, #20
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bc80      	pop	{r7}
 80089f4:	4770      	bx	lr

080089f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b085      	sub	sp, #20
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	4013      	ands	r3, r2
 8008a18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	b29b      	uxth	r3, r3
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bc80      	pop	{r7}
 8008a26:	4770      	bx	lr

08008a28 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	460b      	mov	r3, r1
 8008a32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008a38:	78fb      	ldrb	r3, [r7, #3]
 8008a3a:	015a      	lsls	r2, r3, #5
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	4413      	add	r3, r2
 8008a40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a4e:	695b      	ldr	r3, [r3, #20]
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	4013      	ands	r3, r2
 8008a54:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008a56:	68bb      	ldr	r3, [r7, #8]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bc80      	pop	{r7}
 8008a60:	4770      	bx	lr

08008a62 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008a62:	b480      	push	{r7}
 8008a64:	b087      	sub	sp, #28
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
 8008a6a:	460b      	mov	r3, r1
 8008a6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a84:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008a86:	78fb      	ldrb	r3, [r7, #3]
 8008a88:	f003 030f 	and.w	r3, r3, #15
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a92:	01db      	lsls	r3, r3, #7
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008a9c:	78fb      	ldrb	r3, [r7, #3]
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	4013      	ands	r3, r2
 8008aae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008ab0:	68bb      	ldr	r3, [r7, #8]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	371c      	adds	r7, #28
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bc80      	pop	{r7}
 8008aba:	4770      	bx	lr

08008abc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	695b      	ldr	r3, [r3, #20]
 8008ac8:	f003 0301 	and.w	r3, r3, #1
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bc80      	pop	{r7}
 8008ad4:	4770      	bx	lr

08008ad6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b085      	sub	sp, #20
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68fa      	ldr	r2, [r7, #12]
 8008aec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008af0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008af4:	f023 0307 	bic.w	r3, r3, #7
 8008af8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bc80      	pop	{r7}
 8008b18:	4770      	bx	lr
	...

08008b1c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b087      	sub	sp, #28
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	460b      	mov	r3, r1
 8008b26:	607a      	str	r2, [r7, #4]
 8008b28:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	333c      	adds	r3, #60	@ 0x3c
 8008b32:	3304      	adds	r3, #4
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	4a25      	ldr	r2, [pc, #148]	@ (8008bd0 <USB_EP0_OutStart+0xb4>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d90a      	bls.n	8008b56 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b50:	d101      	bne.n	8008b56 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	e037      	b.n	8008bc6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b5c:	461a      	mov	r2, r3
 8008b5e:	2300      	movs	r3, #0
 8008b60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	697a      	ldr	r2, [r7, #20]
 8008b6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	697a      	ldr	r2, [r7, #20]
 8008b80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b84:	f043 0318 	orr.w	r3, r3, #24
 8008b88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	697a      	ldr	r2, [r7, #20]
 8008b94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b98:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008b9c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008b9e:	7afb      	ldrb	r3, [r7, #11]
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d10f      	bne.n	8008bc4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008baa:	461a      	mov	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	697a      	ldr	r2, [r7, #20]
 8008bba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bbe:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008bc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	371c      	adds	r7, #28
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bc80      	pop	{r7}
 8008bce:	4770      	bx	lr
 8008bd0:	4f54300a 	.word	0x4f54300a

08008bd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	3301      	adds	r3, #1
 8008be4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	4a12      	ldr	r2, [pc, #72]	@ (8008c34 <USB_CoreReset+0x60>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d901      	bls.n	8008bf2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	e01b      	b.n	8008c2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	daf2      	bge.n	8008be0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	f043 0201 	orr.w	r2, r3, #1
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	4a08      	ldr	r2, [pc, #32]	@ (8008c34 <USB_CoreReset+0x60>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d901      	bls.n	8008c1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008c18:	2303      	movs	r3, #3
 8008c1a:	e006      	b.n	8008c2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	691b      	ldr	r3, [r3, #16]
 8008c20:	f003 0301 	and.w	r3, r3, #1
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d0f0      	beq.n	8008c0a <USB_CoreReset+0x36>

  return HAL_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bc80      	pop	{r7}
 8008c32:	4770      	bx	lr
 8008c34:	00030d40 	.word	0x00030d40

08008c38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	460b      	mov	r3, r1
 8008c42:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008c44:	2300      	movs	r3, #0
 8008c46:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	7c1b      	ldrb	r3, [r3, #16]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d115      	bne.n	8008c7c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c54:	2202      	movs	r2, #2
 8008c56:	2181      	movs	r1, #129	@ 0x81
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f001 ff3c 	bl	800aad6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2201      	movs	r2, #1
 8008c62:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c68:	2202      	movs	r2, #2
 8008c6a:	2101      	movs	r1, #1
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f001 ff32 	bl	800aad6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8008c7a:	e012      	b.n	8008ca2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008c7c:	2340      	movs	r3, #64	@ 0x40
 8008c7e:	2202      	movs	r2, #2
 8008c80:	2181      	movs	r1, #129	@ 0x81
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f001 ff27 	bl	800aad6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008c8e:	2340      	movs	r3, #64	@ 0x40
 8008c90:	2202      	movs	r2, #2
 8008c92:	2101      	movs	r1, #1
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f001 ff1e 	bl	800aad6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008ca2:	2308      	movs	r3, #8
 8008ca4:	2203      	movs	r2, #3
 8008ca6:	2182      	movs	r1, #130	@ 0x82
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f001 ff14 	bl	800aad6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008cb4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008cb8:	f002 f860 	bl	800ad7c <malloc>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d102      	bne.n	8008cd6 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	73fb      	strb	r3, [r7, #15]
 8008cd4:	e026      	b.n	8008d24 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cdc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	7c1b      	ldrb	r3, [r3, #16]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d109      	bne.n	8008d14 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008d0a:	2101      	movs	r1, #1
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f001 ffd2 	bl	800acb6 <USBD_LL_PrepareReceive>
 8008d12:	e007      	b.n	8008d24 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008d1a:	2340      	movs	r3, #64	@ 0x40
 8008d1c:	2101      	movs	r1, #1
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f001 ffc9 	bl	800acb6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b084      	sub	sp, #16
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	460b      	mov	r3, r1
 8008d38:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008d3e:	2181      	movs	r1, #129	@ 0x81
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f001 feee 	bl	800ab22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008d4c:	2101      	movs	r1, #1
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f001 fee7 	bl	800ab22 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008d5c:	2182      	movs	r1, #130	@ 0x82
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f001 fedf 	bl	800ab22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00e      	beq.n	8008d92 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d84:	4618      	mov	r0, r3
 8008d86:	f002 f801 	bl	800ad8c <free>
    pdev->pClassData = NULL;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008dac:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008dae:	2300      	movs	r3, #0
 8008db0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008db2:	2300      	movs	r3, #0
 8008db4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	781b      	ldrb	r3, [r3, #0]
 8008dbe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d039      	beq.n	8008e3a <USBD_CDC_Setup+0x9e>
 8008dc6:	2b20      	cmp	r3, #32
 8008dc8:	d17f      	bne.n	8008eca <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	88db      	ldrh	r3, [r3, #6]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d029      	beq.n	8008e26 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	b25b      	sxtb	r3, r3
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	da11      	bge.n	8008e00 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008de8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008dea:	683a      	ldr	r2, [r7, #0]
 8008dec:	88d2      	ldrh	r2, [r2, #6]
 8008dee:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008df0:	6939      	ldr	r1, [r7, #16]
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	88db      	ldrh	r3, [r3, #6]
 8008df6:	461a      	mov	r2, r3
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f001 fa3d 	bl	800a278 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008dfe:	e06b      	b.n	8008ed8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	785a      	ldrb	r2, [r3, #1]
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	88db      	ldrh	r3, [r3, #6]
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e16:	6939      	ldr	r1, [r7, #16]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	88db      	ldrh	r3, [r3, #6]
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f001 fa58 	bl	800a2d4 <USBD_CtlPrepareRx>
      break;
 8008e24:	e058      	b.n	8008ed8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	683a      	ldr	r2, [r7, #0]
 8008e30:	7850      	ldrb	r0, [r2, #1]
 8008e32:	2200      	movs	r2, #0
 8008e34:	6839      	ldr	r1, [r7, #0]
 8008e36:	4798      	blx	r3
      break;
 8008e38:	e04e      	b.n	8008ed8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	785b      	ldrb	r3, [r3, #1]
 8008e3e:	2b0b      	cmp	r3, #11
 8008e40:	d02e      	beq.n	8008ea0 <USBD_CDC_Setup+0x104>
 8008e42:	2b0b      	cmp	r3, #11
 8008e44:	dc38      	bgt.n	8008eb8 <USBD_CDC_Setup+0x11c>
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d002      	beq.n	8008e50 <USBD_CDC_Setup+0xb4>
 8008e4a:	2b0a      	cmp	r3, #10
 8008e4c:	d014      	beq.n	8008e78 <USBD_CDC_Setup+0xdc>
 8008e4e:	e033      	b.n	8008eb8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e56:	2b03      	cmp	r3, #3
 8008e58:	d107      	bne.n	8008e6a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008e5a:	f107 030c 	add.w	r3, r7, #12
 8008e5e:	2202      	movs	r2, #2
 8008e60:	4619      	mov	r1, r3
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f001 fa08 	bl	800a278 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e68:	e02e      	b.n	8008ec8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008e6a:	6839      	ldr	r1, [r7, #0]
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f001 f999 	bl	800a1a4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e72:	2302      	movs	r3, #2
 8008e74:	75fb      	strb	r3, [r7, #23]
          break;
 8008e76:	e027      	b.n	8008ec8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e7e:	2b03      	cmp	r3, #3
 8008e80:	d107      	bne.n	8008e92 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008e82:	f107 030f 	add.w	r3, r7, #15
 8008e86:	2201      	movs	r2, #1
 8008e88:	4619      	mov	r1, r3
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f001 f9f4 	bl	800a278 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e90:	e01a      	b.n	8008ec8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f001 f985 	bl	800a1a4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008e9a:	2302      	movs	r3, #2
 8008e9c:	75fb      	strb	r3, [r7, #23]
          break;
 8008e9e:	e013      	b.n	8008ec8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ea6:	2b03      	cmp	r3, #3
 8008ea8:	d00d      	beq.n	8008ec6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f001 f979 	bl	800a1a4 <USBD_CtlError>
            ret = USBD_FAIL;
 8008eb2:	2302      	movs	r3, #2
 8008eb4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008eb6:	e006      	b.n	8008ec6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008eb8:	6839      	ldr	r1, [r7, #0]
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f001 f972 	bl	800a1a4 <USBD_CtlError>
          ret = USBD_FAIL;
 8008ec0:	2302      	movs	r3, #2
 8008ec2:	75fb      	strb	r3, [r7, #23]
          break;
 8008ec4:	e000      	b.n	8008ec8 <USBD_CDC_Setup+0x12c>
          break;
 8008ec6:	bf00      	nop
      }
      break;
 8008ec8:	e006      	b.n	8008ed8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f001 f969 	bl	800a1a4 <USBD_CtlError>
      ret = USBD_FAIL;
 8008ed2:	2302      	movs	r3, #2
 8008ed4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ed6:	bf00      	nop
  }

  return ret;
 8008ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3718      	adds	r7, #24
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b084      	sub	sp, #16
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
 8008eea:	460b      	mov	r3, r1
 8008eec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ef4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008efc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d03a      	beq.n	8008f7e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008f08:	78fa      	ldrb	r2, [r7, #3]
 8008f0a:	6879      	ldr	r1, [r7, #4]
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	440b      	add	r3, r1
 8008f16:	331c      	adds	r3, #28
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d029      	beq.n	8008f72 <USBD_CDC_DataIn+0x90>
 8008f1e:	78fa      	ldrb	r2, [r7, #3]
 8008f20:	6879      	ldr	r1, [r7, #4]
 8008f22:	4613      	mov	r3, r2
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	4413      	add	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	440b      	add	r3, r1
 8008f2c:	331c      	adds	r3, #28
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	78f9      	ldrb	r1, [r7, #3]
 8008f32:	68b8      	ldr	r0, [r7, #8]
 8008f34:	460b      	mov	r3, r1
 8008f36:	00db      	lsls	r3, r3, #3
 8008f38:	440b      	add	r3, r1
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	4403      	add	r3, r0
 8008f3e:	3344      	adds	r3, #68	@ 0x44
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	fbb2 f1f3 	udiv	r1, r2, r3
 8008f46:	fb01 f303 	mul.w	r3, r1, r3
 8008f4a:	1ad3      	subs	r3, r2, r3
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d110      	bne.n	8008f72 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008f50:	78fa      	ldrb	r2, [r7, #3]
 8008f52:	6879      	ldr	r1, [r7, #4]
 8008f54:	4613      	mov	r3, r2
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	4413      	add	r3, r2
 8008f5a:	009b      	lsls	r3, r3, #2
 8008f5c:	440b      	add	r3, r1
 8008f5e:	331c      	adds	r3, #28
 8008f60:	2200      	movs	r2, #0
 8008f62:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008f64:	78f9      	ldrb	r1, [r7, #3]
 8008f66:	2300      	movs	r3, #0
 8008f68:	2200      	movs	r2, #0
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f001 fe80 	bl	800ac70 <USBD_LL_Transmit>
 8008f70:	e003      	b.n	8008f7a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	e000      	b.n	8008f80 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008f7e:	2302      	movs	r3, #2
  }
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	460b      	mov	r3, r1
 8008f92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f9a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008f9c:	78fb      	ldrb	r3, [r7, #3]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f001 feab 	bl	800acfc <USBD_LL_GetRxDataSize>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d00d      	beq.n	8008fd4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008fcc:	4611      	mov	r1, r2
 8008fce:	4798      	blx	r3

    return USBD_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	e000      	b.n	8008fd6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008fd4:	2302      	movs	r3, #2
  }
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b084      	sub	sp, #16
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008fec:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d014      	beq.n	8009022 <USBD_CDC_EP0_RxReady+0x44>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008ffe:	2bff      	cmp	r3, #255	@ 0xff
 8009000:	d00f      	beq.n	8009022 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	68fa      	ldr	r2, [r7, #12]
 800900c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009010:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009018:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	22ff      	movs	r2, #255	@ 0xff
 800901e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8009022:	2300      	movs	r3, #0
}
 8009024:	4618      	mov	r0, r3
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2243      	movs	r2, #67	@ 0x43
 8009038:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800903a:	4b03      	ldr	r3, [pc, #12]	@ (8009048 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800903c:	4618      	mov	r0, r3
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	bc80      	pop	{r7}
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	200000c8 	.word	0x200000c8

0800904c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2243      	movs	r2, #67	@ 0x43
 8009058:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800905a:	4b03      	ldr	r3, [pc, #12]	@ (8009068 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800905c:	4618      	mov	r0, r3
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	bc80      	pop	{r7}
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	20000084 	.word	0x20000084

0800906c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2243      	movs	r2, #67	@ 0x43
 8009078:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800907a:	4b03      	ldr	r3, [pc, #12]	@ (8009088 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800907c:	4618      	mov	r0, r3
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	bc80      	pop	{r7}
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	2000010c 	.word	0x2000010c

0800908c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	220a      	movs	r2, #10
 8009098:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800909a:	4b03      	ldr	r3, [pc, #12]	@ (80090a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800909c:	4618      	mov	r0, r3
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bc80      	pop	{r7}
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	20000040 	.word	0x20000040

080090ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80090b6:	2302      	movs	r3, #2
 80090b8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d005      	beq.n	80090cc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	683a      	ldr	r2, [r7, #0]
 80090c4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80090cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3714      	adds	r7, #20
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bc80      	pop	{r7}
 80090d6:	4770      	bx	lr

080090d8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80090d8:	b480      	push	{r7}
 80090da:	b087      	sub	sp, #28
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	4613      	mov	r3, r2
 80090e4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090ec:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80090f6:	88fa      	ldrh	r2, [r7, #6]
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	371c      	adds	r7, #28
 8009104:	46bd      	mov	sp, r7
 8009106:	bc80      	pop	{r7}
 8009108:	4770      	bx	lr

0800910a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800910a:	b480      	push	{r7}
 800910c:	b085      	sub	sp, #20
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800911a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	683a      	ldr	r2, [r7, #0]
 8009120:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	bc80      	pop	{r7}
 800912e:	4770      	bx	lr

08009130 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800913e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009146:	2b00      	cmp	r3, #0
 8009148:	d01c      	beq.n	8009184 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009150:	2b00      	cmp	r3, #0
 8009152:	d115      	bne.n	8009180 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2201      	movs	r2, #1
 8009158:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009172:	b29b      	uxth	r3, r3
 8009174:	2181      	movs	r1, #129	@ 0x81
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f001 fd7a 	bl	800ac70 <USBD_LL_Transmit>

      return USBD_OK;
 800917c:	2300      	movs	r3, #0
 800917e:	e002      	b.n	8009186 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009180:	2301      	movs	r3, #1
 8009182:	e000      	b.n	8009186 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009184:	2302      	movs	r3, #2
  }
}
 8009186:	4618      	mov	r0, r3
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}

0800918e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800918e:	b580      	push	{r7, lr}
 8009190:	b084      	sub	sp, #16
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800919c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d017      	beq.n	80091d8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	7c1b      	ldrb	r3, [r3, #16]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d109      	bne.n	80091c4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80091b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80091ba:	2101      	movs	r1, #1
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f001 fd7a 	bl	800acb6 <USBD_LL_PrepareReceive>
 80091c2:	e007      	b.n	80091d4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80091ca:	2340      	movs	r3, #64	@ 0x40
 80091cc:	2101      	movs	r1, #1
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f001 fd71 	bl	800acb6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80091d4:	2300      	movs	r3, #0
 80091d6:	e000      	b.n	80091da <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80091d8:	2302      	movs	r3, #2
  }
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b084      	sub	sp, #16
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	60f8      	str	r0, [r7, #12]
 80091ea:	60b9      	str	r1, [r7, #8]
 80091ec:	4613      	mov	r3, r2
 80091ee:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80091f6:	2302      	movs	r3, #2
 80091f8:	e01a      	b.n	8009230 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009200:	2b00      	cmp	r3, #0
 8009202:	d003      	beq.n	800920c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2200      	movs	r2, #0
 8009208:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d003      	beq.n	800921a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2201      	movs	r2, #1
 800921e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	79fa      	ldrb	r2, [r7, #7]
 8009226:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	f001 fbef 	bl	800aa0c <USBD_LL_Init>

  return USBD_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009242:	2300      	movs	r3, #0
 8009244:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d006      	beq.n	800925a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	683a      	ldr	r2, [r7, #0]
 8009250:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8009254:	2300      	movs	r3, #0
 8009256:	73fb      	strb	r3, [r7, #15]
 8009258:	e001      	b.n	800925e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800925a:	2302      	movs	r3, #2
 800925c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800925e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3714      	adds	r7, #20
 8009264:	46bd      	mov	sp, r7
 8009266:	bc80      	pop	{r7}
 8009268:	4770      	bx	lr

0800926a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b082      	sub	sp, #8
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f001 fc14 	bl	800aaa0 <USBD_LL_Start>

  return USBD_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009282:	b480      	push	{r7}
 8009284:	b083      	sub	sp, #12
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	bc80      	pop	{r7}
 8009294:	4770      	bx	lr

08009296 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009296:	b580      	push	{r7, lr}
 8009298:	b084      	sub	sp, #16
 800929a:	af00      	add	r7, sp, #0
 800929c:	6078      	str	r0, [r7, #4]
 800929e:	460b      	mov	r3, r1
 80092a0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80092a2:	2302      	movs	r3, #2
 80092a4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00c      	beq.n	80092ca <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	78fa      	ldrb	r2, [r7, #3]
 80092ba:	4611      	mov	r1, r2
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	4798      	blx	r3
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80092ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	78fa      	ldrb	r2, [r7, #3]
 80092ea:	4611      	mov	r1, r2
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	4798      	blx	r3

  return USBD_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b082      	sub	sp, #8
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
 8009302:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800930a:	6839      	ldr	r1, [r7, #0]
 800930c:	4618      	mov	r0, r3
 800930e:	f000 ff10 	bl	800a132 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009320:	461a      	mov	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800932e:	f003 031f 	and.w	r3, r3, #31
 8009332:	2b02      	cmp	r3, #2
 8009334:	d016      	beq.n	8009364 <USBD_LL_SetupStage+0x6a>
 8009336:	2b02      	cmp	r3, #2
 8009338:	d81c      	bhi.n	8009374 <USBD_LL_SetupStage+0x7a>
 800933a:	2b00      	cmp	r3, #0
 800933c:	d002      	beq.n	8009344 <USBD_LL_SetupStage+0x4a>
 800933e:	2b01      	cmp	r3, #1
 8009340:	d008      	beq.n	8009354 <USBD_LL_SetupStage+0x5a>
 8009342:	e017      	b.n	8009374 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800934a:	4619      	mov	r1, r3
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 fa03 	bl	8009758 <USBD_StdDevReq>
      break;
 8009352:	e01a      	b.n	800938a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800935a:	4619      	mov	r1, r3
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fa65 	bl	800982c <USBD_StdItfReq>
      break;
 8009362:	e012      	b.n	800938a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800936a:	4619      	mov	r1, r3
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 faa5 	bl	80098bc <USBD_StdEPReq>
      break;
 8009372:	e00a      	b.n	800938a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800937a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800937e:	b2db      	uxtb	r3, r3
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f001 fbec 	bl	800ab60 <USBD_LL_StallEP>
      break;
 8009388:	bf00      	nop
  }

  return USBD_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b086      	sub	sp, #24
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	460b      	mov	r3, r1
 800939e:	607a      	str	r2, [r7, #4]
 80093a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80093a2:	7afb      	ldrb	r3, [r7, #11]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d14b      	bne.n	8009440 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80093ae:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80093b6:	2b03      	cmp	r3, #3
 80093b8:	d134      	bne.n	8009424 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	68da      	ldr	r2, [r3, #12]
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d919      	bls.n	80093fa <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	68da      	ldr	r2, [r3, #12]
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	1ad2      	subs	r2, r2, r3
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	68da      	ldr	r2, [r3, #12]
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80093dc:	429a      	cmp	r2, r3
 80093de:	d203      	bcs.n	80093e8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80093e4:	b29b      	uxth	r3, r3
 80093e6:	e002      	b.n	80093ee <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	461a      	mov	r2, r3
 80093f0:	6879      	ldr	r1, [r7, #4]
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f000 ff8c 	bl	800a310 <USBD_CtlContinueRx>
 80093f8:	e038      	b.n	800946c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009400:	691b      	ldr	r3, [r3, #16]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d00a      	beq.n	800941c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800940c:	2b03      	cmp	r3, #3
 800940e:	d105      	bne.n	800941c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009416:	691b      	ldr	r3, [r3, #16]
 8009418:	68f8      	ldr	r0, [r7, #12]
 800941a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	f000 ff89 	bl	800a334 <USBD_CtlSendStatus>
 8009422:	e023      	b.n	800946c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800942a:	2b05      	cmp	r3, #5
 800942c:	d11e      	bne.n	800946c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2200      	movs	r2, #0
 8009432:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009436:	2100      	movs	r1, #0
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f001 fb91 	bl	800ab60 <USBD_LL_StallEP>
 800943e:	e015      	b.n	800946c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009446:	699b      	ldr	r3, [r3, #24]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d00d      	beq.n	8009468 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009452:	2b03      	cmp	r3, #3
 8009454:	d108      	bne.n	8009468 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800945c:	699b      	ldr	r3, [r3, #24]
 800945e:	7afa      	ldrb	r2, [r7, #11]
 8009460:	4611      	mov	r1, r2
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	4798      	blx	r3
 8009466:	e001      	b.n	800946c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009468:	2302      	movs	r3, #2
 800946a:	e000      	b.n	800946e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3718      	adds	r7, #24
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b086      	sub	sp, #24
 800947a:	af00      	add	r7, sp, #0
 800947c:	60f8      	str	r0, [r7, #12]
 800947e:	460b      	mov	r3, r1
 8009480:	607a      	str	r2, [r7, #4]
 8009482:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009484:	7afb      	ldrb	r3, [r7, #11]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d17f      	bne.n	800958a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	3314      	adds	r3, #20
 800948e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009496:	2b02      	cmp	r3, #2
 8009498:	d15c      	bne.n	8009554 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	68da      	ldr	r2, [r3, #12]
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d915      	bls.n	80094d2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	68da      	ldr	r2, [r3, #12]
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	1ad2      	subs	r2, r2, r3
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	68db      	ldr	r3, [r3, #12]
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	461a      	mov	r2, r3
 80094bc:	6879      	ldr	r1, [r7, #4]
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f000 fef6 	bl	800a2b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094c4:	2300      	movs	r3, #0
 80094c6:	2200      	movs	r2, #0
 80094c8:	2100      	movs	r1, #0
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f001 fbf3 	bl	800acb6 <USBD_LL_PrepareReceive>
 80094d0:	e04e      	b.n	8009570 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	6912      	ldr	r2, [r2, #16]
 80094da:	fbb3 f1f2 	udiv	r1, r3, r2
 80094de:	fb01 f202 	mul.w	r2, r1, r2
 80094e2:	1a9b      	subs	r3, r3, r2
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d11c      	bne.n	8009522 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	689a      	ldr	r2, [r3, #8]
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d316      	bcc.n	8009522 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	689a      	ldr	r2, [r3, #8]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80094fe:	429a      	cmp	r2, r3
 8009500:	d20f      	bcs.n	8009522 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009502:	2200      	movs	r2, #0
 8009504:	2100      	movs	r1, #0
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f000 fed2 	bl	800a2b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2200      	movs	r2, #0
 8009510:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009514:	2300      	movs	r3, #0
 8009516:	2200      	movs	r2, #0
 8009518:	2100      	movs	r1, #0
 800951a:	68f8      	ldr	r0, [r7, #12]
 800951c:	f001 fbcb 	bl	800acb6 <USBD_LL_PrepareReceive>
 8009520:	e026      	b.n	8009570 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00a      	beq.n	8009544 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009534:	2b03      	cmp	r3, #3
 8009536:	d105      	bne.n	8009544 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009544:	2180      	movs	r1, #128	@ 0x80
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	f001 fb0a 	bl	800ab60 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 ff04 	bl	800a35a <USBD_CtlReceiveStatus>
 8009552:	e00d      	b.n	8009570 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800955a:	2b04      	cmp	r3, #4
 800955c:	d004      	beq.n	8009568 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009564:	2b00      	cmp	r3, #0
 8009566:	d103      	bne.n	8009570 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009568:	2180      	movs	r1, #128	@ 0x80
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f001 faf8 	bl	800ab60 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009576:	2b01      	cmp	r3, #1
 8009578:	d11d      	bne.n	80095b6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f7ff fe81 	bl	8009282 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2200      	movs	r2, #0
 8009584:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009588:	e015      	b.n	80095b6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009590:	695b      	ldr	r3, [r3, #20]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00d      	beq.n	80095b2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800959c:	2b03      	cmp	r3, #3
 800959e:	d108      	bne.n	80095b2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095a6:	695b      	ldr	r3, [r3, #20]
 80095a8:	7afa      	ldrb	r2, [r7, #11]
 80095aa:	4611      	mov	r1, r2
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	4798      	blx	r3
 80095b0:	e001      	b.n	80095b6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80095b2:	2302      	movs	r3, #2
 80095b4:	e000      	b.n	80095b8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3718      	adds	r7, #24
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095c8:	2340      	movs	r3, #64	@ 0x40
 80095ca:	2200      	movs	r2, #0
 80095cc:	2100      	movs	r1, #0
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f001 fa81 	bl	800aad6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2240      	movs	r2, #64	@ 0x40
 80095e0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095e4:	2340      	movs	r3, #64	@ 0x40
 80095e6:	2200      	movs	r2, #0
 80095e8:	2180      	movs	r1, #128	@ 0x80
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f001 fa73 	bl	800aad6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2201      	movs	r2, #1
 80095f4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2240      	movs	r2, #64	@ 0x40
 80095fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009620:	2b00      	cmp	r3, #0
 8009622:	d009      	beq.n	8009638 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	6852      	ldr	r2, [r2, #4]
 8009630:	b2d2      	uxtb	r2, r2
 8009632:	4611      	mov	r1, r2
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	4798      	blx	r3
  }

  return USBD_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009642:	b480      	push	{r7}
 8009644:	b083      	sub	sp, #12
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
 800964a:	460b      	mov	r3, r1
 800964c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	78fa      	ldrb	r2, [r7, #3]
 8009652:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	370c      	adds	r7, #12
 800965a:	46bd      	mov	sp, r7
 800965c:	bc80      	pop	{r7}
 800965e:	4770      	bx	lr

08009660 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2204      	movs	r2, #4
 8009678:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800967c:	2300      	movs	r3, #0
}
 800967e:	4618      	mov	r0, r3
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	bc80      	pop	{r7}
 8009686:	4770      	bx	lr

08009688 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009696:	2b04      	cmp	r3, #4
 8009698:	d105      	bne.n	80096a6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bc80      	pop	{r7}
 80096b0:	4770      	bx	lr

080096b2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b082      	sub	sp, #8
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096c0:	2b03      	cmp	r3, #3
 80096c2:	d10b      	bne.n	80096dc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096ca:	69db      	ldr	r3, [r3, #28]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d005      	beq.n	80096dc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80096d6:	69db      	ldr	r3, [r3, #28]
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b083      	sub	sp, #12
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	460b      	mov	r3, r1
 80096f0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bc80      	pop	{r7}
 80096fc:	4770      	bx	lr

080096fe <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80096fe:	b480      	push	{r7}
 8009700:	b083      	sub	sp, #12
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	460b      	mov	r3, r1
 8009708:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	bc80      	pop	{r7}
 8009714:	4770      	bx	lr

08009716 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009716:	b480      	push	{r7}
 8009718:	b083      	sub	sp, #12
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800971e:	2300      	movs	r3, #0
}
 8009720:	4618      	mov	r0, r3
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	bc80      	pop	{r7}
 8009728:	4770      	bx	lr

0800972a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b082      	sub	sp, #8
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2201      	movs	r2, #1
 8009736:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	6852      	ldr	r2, [r2, #4]
 8009746:	b2d2      	uxtb	r2, r2
 8009748:	4611      	mov	r1, r2
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	4798      	blx	r3

  return USBD_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009762:	2300      	movs	r3, #0
 8009764:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800976e:	2b40      	cmp	r3, #64	@ 0x40
 8009770:	d005      	beq.n	800977e <USBD_StdDevReq+0x26>
 8009772:	2b40      	cmp	r3, #64	@ 0x40
 8009774:	d84f      	bhi.n	8009816 <USBD_StdDevReq+0xbe>
 8009776:	2b00      	cmp	r3, #0
 8009778:	d009      	beq.n	800978e <USBD_StdDevReq+0x36>
 800977a:	2b20      	cmp	r3, #32
 800977c:	d14b      	bne.n	8009816 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	6839      	ldr	r1, [r7, #0]
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	4798      	blx	r3
      break;
 800978c:	e048      	b.n	8009820 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	785b      	ldrb	r3, [r3, #1]
 8009792:	2b09      	cmp	r3, #9
 8009794:	d839      	bhi.n	800980a <USBD_StdDevReq+0xb2>
 8009796:	a201      	add	r2, pc, #4	@ (adr r2, 800979c <USBD_StdDevReq+0x44>)
 8009798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800979c:	080097ed 	.word	0x080097ed
 80097a0:	08009801 	.word	0x08009801
 80097a4:	0800980b 	.word	0x0800980b
 80097a8:	080097f7 	.word	0x080097f7
 80097ac:	0800980b 	.word	0x0800980b
 80097b0:	080097cf 	.word	0x080097cf
 80097b4:	080097c5 	.word	0x080097c5
 80097b8:	0800980b 	.word	0x0800980b
 80097bc:	080097e3 	.word	0x080097e3
 80097c0:	080097d9 	.word	0x080097d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80097c4:	6839      	ldr	r1, [r7, #0]
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 f9dc 	bl	8009b84 <USBD_GetDescriptor>
          break;
 80097cc:	e022      	b.n	8009814 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80097ce:	6839      	ldr	r1, [r7, #0]
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fb3f 	bl	8009e54 <USBD_SetAddress>
          break;
 80097d6:	e01d      	b.n	8009814 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80097d8:	6839      	ldr	r1, [r7, #0]
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 fb7e 	bl	8009edc <USBD_SetConfig>
          break;
 80097e0:	e018      	b.n	8009814 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80097e2:	6839      	ldr	r1, [r7, #0]
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 fc07 	bl	8009ff8 <USBD_GetConfig>
          break;
 80097ea:	e013      	b.n	8009814 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fc37 	bl	800a062 <USBD_GetStatus>
          break;
 80097f4:	e00e      	b.n	8009814 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80097f6:	6839      	ldr	r1, [r7, #0]
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 fc65 	bl	800a0c8 <USBD_SetFeature>
          break;
 80097fe:	e009      	b.n	8009814 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009800:	6839      	ldr	r1, [r7, #0]
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fc74 	bl	800a0f0 <USBD_ClrFeature>
          break;
 8009808:	e004      	b.n	8009814 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800980a:	6839      	ldr	r1, [r7, #0]
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fcc9 	bl	800a1a4 <USBD_CtlError>
          break;
 8009812:	bf00      	nop
      }
      break;
 8009814:	e004      	b.n	8009820 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009816:	6839      	ldr	r1, [r7, #0]
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fcc3 	bl	800a1a4 <USBD_CtlError>
      break;
 800981e:	bf00      	nop
  }

  return ret;
 8009820:	7bfb      	ldrb	r3, [r7, #15]
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop

0800982c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009842:	2b40      	cmp	r3, #64	@ 0x40
 8009844:	d005      	beq.n	8009852 <USBD_StdItfReq+0x26>
 8009846:	2b40      	cmp	r3, #64	@ 0x40
 8009848:	d82e      	bhi.n	80098a8 <USBD_StdItfReq+0x7c>
 800984a:	2b00      	cmp	r3, #0
 800984c:	d001      	beq.n	8009852 <USBD_StdItfReq+0x26>
 800984e:	2b20      	cmp	r3, #32
 8009850:	d12a      	bne.n	80098a8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009858:	3b01      	subs	r3, #1
 800985a:	2b02      	cmp	r3, #2
 800985c:	d81d      	bhi.n	800989a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	889b      	ldrh	r3, [r3, #4]
 8009862:	b2db      	uxtb	r3, r3
 8009864:	2b01      	cmp	r3, #1
 8009866:	d813      	bhi.n	8009890 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	6839      	ldr	r1, [r7, #0]
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	4798      	blx	r3
 8009876:	4603      	mov	r3, r0
 8009878:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	88db      	ldrh	r3, [r3, #6]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d110      	bne.n	80098a4 <USBD_StdItfReq+0x78>
 8009882:	7bfb      	ldrb	r3, [r7, #15]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d10d      	bne.n	80098a4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 fd53 	bl	800a334 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800988e:	e009      	b.n	80098a4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009890:	6839      	ldr	r1, [r7, #0]
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fc86 	bl	800a1a4 <USBD_CtlError>
          break;
 8009898:	e004      	b.n	80098a4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800989a:	6839      	ldr	r1, [r7, #0]
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 fc81 	bl	800a1a4 <USBD_CtlError>
          break;
 80098a2:	e000      	b.n	80098a6 <USBD_StdItfReq+0x7a>
          break;
 80098a4:	bf00      	nop
      }
      break;
 80098a6:	e004      	b.n	80098b2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80098a8:	6839      	ldr	r1, [r7, #0]
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 fc7a 	bl	800a1a4 <USBD_CtlError>
      break;
 80098b0:	bf00      	nop
  }

  return USBD_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80098c6:	2300      	movs	r3, #0
 80098c8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	889b      	ldrh	r3, [r3, #4]
 80098ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098d8:	2b40      	cmp	r3, #64	@ 0x40
 80098da:	d007      	beq.n	80098ec <USBD_StdEPReq+0x30>
 80098dc:	2b40      	cmp	r3, #64	@ 0x40
 80098de:	f200 8146 	bhi.w	8009b6e <USBD_StdEPReq+0x2b2>
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00a      	beq.n	80098fc <USBD_StdEPReq+0x40>
 80098e6:	2b20      	cmp	r3, #32
 80098e8:	f040 8141 	bne.w	8009b6e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	6839      	ldr	r1, [r7, #0]
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	4798      	blx	r3
      break;
 80098fa:	e13d      	b.n	8009b78 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009904:	2b20      	cmp	r3, #32
 8009906:	d10a      	bne.n	800991e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800990e:	689b      	ldr	r3, [r3, #8]
 8009910:	6839      	ldr	r1, [r7, #0]
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	4798      	blx	r3
 8009916:	4603      	mov	r3, r0
 8009918:	73fb      	strb	r3, [r7, #15]

        return ret;
 800991a:	7bfb      	ldrb	r3, [r7, #15]
 800991c:	e12d      	b.n	8009b7a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	785b      	ldrb	r3, [r3, #1]
 8009922:	2b03      	cmp	r3, #3
 8009924:	d007      	beq.n	8009936 <USBD_StdEPReq+0x7a>
 8009926:	2b03      	cmp	r3, #3
 8009928:	f300 811b 	bgt.w	8009b62 <USBD_StdEPReq+0x2a6>
 800992c:	2b00      	cmp	r3, #0
 800992e:	d072      	beq.n	8009a16 <USBD_StdEPReq+0x15a>
 8009930:	2b01      	cmp	r3, #1
 8009932:	d03a      	beq.n	80099aa <USBD_StdEPReq+0xee>
 8009934:	e115      	b.n	8009b62 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800993c:	2b02      	cmp	r3, #2
 800993e:	d002      	beq.n	8009946 <USBD_StdEPReq+0x8a>
 8009940:	2b03      	cmp	r3, #3
 8009942:	d015      	beq.n	8009970 <USBD_StdEPReq+0xb4>
 8009944:	e02b      	b.n	800999e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009946:	7bbb      	ldrb	r3, [r7, #14]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00c      	beq.n	8009966 <USBD_StdEPReq+0xaa>
 800994c:	7bbb      	ldrb	r3, [r7, #14]
 800994e:	2b80      	cmp	r3, #128	@ 0x80
 8009950:	d009      	beq.n	8009966 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009952:	7bbb      	ldrb	r3, [r7, #14]
 8009954:	4619      	mov	r1, r3
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f001 f902 	bl	800ab60 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800995c:	2180      	movs	r1, #128	@ 0x80
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f001 f8fe 	bl	800ab60 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009964:	e020      	b.n	80099a8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009966:	6839      	ldr	r1, [r7, #0]
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 fc1b 	bl	800a1a4 <USBD_CtlError>
              break;
 800996e:	e01b      	b.n	80099a8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	885b      	ldrh	r3, [r3, #2]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d10e      	bne.n	8009996 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009978:	7bbb      	ldrb	r3, [r7, #14]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00b      	beq.n	8009996 <USBD_StdEPReq+0xda>
 800997e:	7bbb      	ldrb	r3, [r7, #14]
 8009980:	2b80      	cmp	r3, #128	@ 0x80
 8009982:	d008      	beq.n	8009996 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	88db      	ldrh	r3, [r3, #6]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d104      	bne.n	8009996 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800998c:	7bbb      	ldrb	r3, [r7, #14]
 800998e:	4619      	mov	r1, r3
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f001 f8e5 	bl	800ab60 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 fccc 	bl	800a334 <USBD_CtlSendStatus>

              break;
 800999c:	e004      	b.n	80099a8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800999e:	6839      	ldr	r1, [r7, #0]
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fbff 	bl	800a1a4 <USBD_CtlError>
              break;
 80099a6:	bf00      	nop
          }
          break;
 80099a8:	e0e0      	b.n	8009b6c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	d002      	beq.n	80099ba <USBD_StdEPReq+0xfe>
 80099b4:	2b03      	cmp	r3, #3
 80099b6:	d015      	beq.n	80099e4 <USBD_StdEPReq+0x128>
 80099b8:	e026      	b.n	8009a08 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099ba:	7bbb      	ldrb	r3, [r7, #14]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00c      	beq.n	80099da <USBD_StdEPReq+0x11e>
 80099c0:	7bbb      	ldrb	r3, [r7, #14]
 80099c2:	2b80      	cmp	r3, #128	@ 0x80
 80099c4:	d009      	beq.n	80099da <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80099c6:	7bbb      	ldrb	r3, [r7, #14]
 80099c8:	4619      	mov	r1, r3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f001 f8c8 	bl	800ab60 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80099d0:	2180      	movs	r1, #128	@ 0x80
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f001 f8c4 	bl	800ab60 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099d8:	e01c      	b.n	8009a14 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80099da:	6839      	ldr	r1, [r7, #0]
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 fbe1 	bl	800a1a4 <USBD_CtlError>
              break;
 80099e2:	e017      	b.n	8009a14 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	885b      	ldrh	r3, [r3, #2]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d112      	bne.n	8009a12 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80099ec:	7bbb      	ldrb	r3, [r7, #14]
 80099ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d004      	beq.n	8009a00 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80099f6:	7bbb      	ldrb	r3, [r7, #14]
 80099f8:	4619      	mov	r1, r3
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f001 f8cf 	bl	800ab9e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 fc97 	bl	800a334 <USBD_CtlSendStatus>
              }
              break;
 8009a06:	e004      	b.n	8009a12 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009a08:	6839      	ldr	r1, [r7, #0]
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 fbca 	bl	800a1a4 <USBD_CtlError>
              break;
 8009a10:	e000      	b.n	8009a14 <USBD_StdEPReq+0x158>
              break;
 8009a12:	bf00      	nop
          }
          break;
 8009a14:	e0aa      	b.n	8009b6c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	d002      	beq.n	8009a26 <USBD_StdEPReq+0x16a>
 8009a20:	2b03      	cmp	r3, #3
 8009a22:	d032      	beq.n	8009a8a <USBD_StdEPReq+0x1ce>
 8009a24:	e097      	b.n	8009b56 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a26:	7bbb      	ldrb	r3, [r7, #14]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d007      	beq.n	8009a3c <USBD_StdEPReq+0x180>
 8009a2c:	7bbb      	ldrb	r3, [r7, #14]
 8009a2e:	2b80      	cmp	r3, #128	@ 0x80
 8009a30:	d004      	beq.n	8009a3c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009a32:	6839      	ldr	r1, [r7, #0]
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 fbb5 	bl	800a1a4 <USBD_CtlError>
                break;
 8009a3a:	e091      	b.n	8009b60 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	da0b      	bge.n	8009a5c <USBD_StdEPReq+0x1a0>
 8009a44:	7bbb      	ldrb	r3, [r7, #14]
 8009a46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4413      	add	r3, r2
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	3310      	adds	r3, #16
 8009a54:	687a      	ldr	r2, [r7, #4]
 8009a56:	4413      	add	r3, r2
 8009a58:	3304      	adds	r3, #4
 8009a5a:	e00b      	b.n	8009a74 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a5c:	7bbb      	ldrb	r3, [r7, #14]
 8009a5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a62:	4613      	mov	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	4413      	add	r3, r2
 8009a72:	3304      	adds	r3, #4
 8009a74:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	2202      	movs	r2, #2
 8009a80:	4619      	mov	r1, r3
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 fbf8 	bl	800a278 <USBD_CtlSendData>
              break;
 8009a88:	e06a      	b.n	8009b60 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	da11      	bge.n	8009ab6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a92:	7bbb      	ldrb	r3, [r7, #14]
 8009a94:	f003 020f 	and.w	r2, r3, #15
 8009a98:	6879      	ldr	r1, [r7, #4]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4413      	add	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	440b      	add	r3, r1
 8009aa4:	3318      	adds	r3, #24
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d117      	bne.n	8009adc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009aac:	6839      	ldr	r1, [r7, #0]
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 fb78 	bl	800a1a4 <USBD_CtlError>
                  break;
 8009ab4:	e054      	b.n	8009b60 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ab6:	7bbb      	ldrb	r3, [r7, #14]
 8009ab8:	f003 020f 	and.w	r2, r3, #15
 8009abc:	6879      	ldr	r1, [r7, #4]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	440b      	add	r3, r1
 8009ac8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d104      	bne.n	8009adc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009ad2:	6839      	ldr	r1, [r7, #0]
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 fb65 	bl	800a1a4 <USBD_CtlError>
                  break;
 8009ada:	e041      	b.n	8009b60 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009adc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	da0b      	bge.n	8009afc <USBD_StdEPReq+0x240>
 8009ae4:	7bbb      	ldrb	r3, [r7, #14]
 8009ae6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009aea:	4613      	mov	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4413      	add	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	3310      	adds	r3, #16
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	4413      	add	r3, r2
 8009af8:	3304      	adds	r3, #4
 8009afa:	e00b      	b.n	8009b14 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009afc:	7bbb      	ldrb	r3, [r7, #14]
 8009afe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b02:	4613      	mov	r3, r2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	4413      	add	r3, r2
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009b0e:	687a      	ldr	r2, [r7, #4]
 8009b10:	4413      	add	r3, r2
 8009b12:	3304      	adds	r3, #4
 8009b14:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009b16:	7bbb      	ldrb	r3, [r7, #14]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d002      	beq.n	8009b22 <USBD_StdEPReq+0x266>
 8009b1c:	7bbb      	ldrb	r3, [r7, #14]
 8009b1e:	2b80      	cmp	r3, #128	@ 0x80
 8009b20:	d103      	bne.n	8009b2a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	2200      	movs	r2, #0
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	e00e      	b.n	8009b48 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009b2a:	7bbb      	ldrb	r3, [r7, #14]
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f001 f854 	bl	800abdc <USBD_LL_IsStallEP>
 8009b34:	4603      	mov	r3, r0
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d003      	beq.n	8009b42 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	601a      	str	r2, [r3, #0]
 8009b40:	e002      	b.n	8009b48 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	2200      	movs	r2, #0
 8009b46:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fb92 	bl	800a278 <USBD_CtlSendData>
              break;
 8009b54:	e004      	b.n	8009b60 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 fb23 	bl	800a1a4 <USBD_CtlError>
              break;
 8009b5e:	bf00      	nop
          }
          break;
 8009b60:	e004      	b.n	8009b6c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009b62:	6839      	ldr	r1, [r7, #0]
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 fb1d 	bl	800a1a4 <USBD_CtlError>
          break;
 8009b6a:	bf00      	nop
      }
      break;
 8009b6c:	e004      	b.n	8009b78 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009b6e:	6839      	ldr	r1, [r7, #0]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 fb17 	bl	800a1a4 <USBD_CtlError>
      break;
 8009b76:	bf00      	nop
  }

  return ret;
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
	...

08009b84 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b92:	2300      	movs	r3, #0
 8009b94:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009b96:	2300      	movs	r3, #0
 8009b98:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	885b      	ldrh	r3, [r3, #2]
 8009b9e:	0a1b      	lsrs	r3, r3, #8
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	3b01      	subs	r3, #1
 8009ba4:	2b06      	cmp	r3, #6
 8009ba6:	f200 8128 	bhi.w	8009dfa <USBD_GetDescriptor+0x276>
 8009baa:	a201      	add	r2, pc, #4	@ (adr r2, 8009bb0 <USBD_GetDescriptor+0x2c>)
 8009bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb0:	08009bcd 	.word	0x08009bcd
 8009bb4:	08009be5 	.word	0x08009be5
 8009bb8:	08009c25 	.word	0x08009c25
 8009bbc:	08009dfb 	.word	0x08009dfb
 8009bc0:	08009dfb 	.word	0x08009dfb
 8009bc4:	08009d9b 	.word	0x08009d9b
 8009bc8:	08009dc7 	.word	0x08009dc7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	7c12      	ldrb	r2, [r2, #16]
 8009bd8:	f107 0108 	add.w	r1, r7, #8
 8009bdc:	4610      	mov	r0, r2
 8009bde:	4798      	blx	r3
 8009be0:	60f8      	str	r0, [r7, #12]
      break;
 8009be2:	e112      	b.n	8009e0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	7c1b      	ldrb	r3, [r3, #16]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d10d      	bne.n	8009c08 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bf4:	f107 0208 	add.w	r2, r7, #8
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	4798      	blx	r3
 8009bfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	3301      	adds	r3, #1
 8009c02:	2202      	movs	r2, #2
 8009c04:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009c06:	e100      	b.n	8009e0a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c10:	f107 0208 	add.w	r2, r7, #8
 8009c14:	4610      	mov	r0, r2
 8009c16:	4798      	blx	r3
 8009c18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	2202      	movs	r2, #2
 8009c20:	701a      	strb	r2, [r3, #0]
      break;
 8009c22:	e0f2      	b.n	8009e0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	885b      	ldrh	r3, [r3, #2]
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	2b05      	cmp	r3, #5
 8009c2c:	f200 80ac 	bhi.w	8009d88 <USBD_GetDescriptor+0x204>
 8009c30:	a201      	add	r2, pc, #4	@ (adr r2, 8009c38 <USBD_GetDescriptor+0xb4>)
 8009c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c36:	bf00      	nop
 8009c38:	08009c51 	.word	0x08009c51
 8009c3c:	08009c85 	.word	0x08009c85
 8009c40:	08009cb9 	.word	0x08009cb9
 8009c44:	08009ced 	.word	0x08009ced
 8009c48:	08009d21 	.word	0x08009d21
 8009c4c:	08009d55 	.word	0x08009d55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00b      	beq.n	8009c74 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	7c12      	ldrb	r2, [r2, #16]
 8009c68:	f107 0108 	add.w	r1, r7, #8
 8009c6c:	4610      	mov	r0, r2
 8009c6e:	4798      	blx	r3
 8009c70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c72:	e091      	b.n	8009d98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c74:	6839      	ldr	r1, [r7, #0]
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 fa94 	bl	800a1a4 <USBD_CtlError>
            err++;
 8009c7c:	7afb      	ldrb	r3, [r7, #11]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	72fb      	strb	r3, [r7, #11]
          break;
 8009c82:	e089      	b.n	8009d98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00b      	beq.n	8009ca8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	7c12      	ldrb	r2, [r2, #16]
 8009c9c:	f107 0108 	add.w	r1, r7, #8
 8009ca0:	4610      	mov	r0, r2
 8009ca2:	4798      	blx	r3
 8009ca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ca6:	e077      	b.n	8009d98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ca8:	6839      	ldr	r1, [r7, #0]
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 fa7a 	bl	800a1a4 <USBD_CtlError>
            err++;
 8009cb0:	7afb      	ldrb	r3, [r7, #11]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	72fb      	strb	r3, [r7, #11]
          break;
 8009cb6:	e06f      	b.n	8009d98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cbe:	68db      	ldr	r3, [r3, #12]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d00b      	beq.n	8009cdc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	7c12      	ldrb	r2, [r2, #16]
 8009cd0:	f107 0108 	add.w	r1, r7, #8
 8009cd4:	4610      	mov	r0, r2
 8009cd6:	4798      	blx	r3
 8009cd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cda:	e05d      	b.n	8009d98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fa60 	bl	800a1a4 <USBD_CtlError>
            err++;
 8009ce4:	7afb      	ldrb	r3, [r7, #11]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	72fb      	strb	r3, [r7, #11]
          break;
 8009cea:	e055      	b.n	8009d98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d00b      	beq.n	8009d10 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	7c12      	ldrb	r2, [r2, #16]
 8009d04:	f107 0108 	add.w	r1, r7, #8
 8009d08:	4610      	mov	r0, r2
 8009d0a:	4798      	blx	r3
 8009d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d0e:	e043      	b.n	8009d98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d10:	6839      	ldr	r1, [r7, #0]
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 fa46 	bl	800a1a4 <USBD_CtlError>
            err++;
 8009d18:	7afb      	ldrb	r3, [r7, #11]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8009d1e:	e03b      	b.n	8009d98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d26:	695b      	ldr	r3, [r3, #20]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d00b      	beq.n	8009d44 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d32:	695b      	ldr	r3, [r3, #20]
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	7c12      	ldrb	r2, [r2, #16]
 8009d38:	f107 0108 	add.w	r1, r7, #8
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	4798      	blx	r3
 8009d40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d42:	e029      	b.n	8009d98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d44:	6839      	ldr	r1, [r7, #0]
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fa2c 	bl	800a1a4 <USBD_CtlError>
            err++;
 8009d4c:	7afb      	ldrb	r3, [r7, #11]
 8009d4e:	3301      	adds	r3, #1
 8009d50:	72fb      	strb	r3, [r7, #11]
          break;
 8009d52:	e021      	b.n	8009d98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d5a:	699b      	ldr	r3, [r3, #24]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00b      	beq.n	8009d78 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009d66:	699b      	ldr	r3, [r3, #24]
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	7c12      	ldrb	r2, [r2, #16]
 8009d6c:	f107 0108 	add.w	r1, r7, #8
 8009d70:	4610      	mov	r0, r2
 8009d72:	4798      	blx	r3
 8009d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d76:	e00f      	b.n	8009d98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d78:	6839      	ldr	r1, [r7, #0]
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 fa12 	bl	800a1a4 <USBD_CtlError>
            err++;
 8009d80:	7afb      	ldrb	r3, [r7, #11]
 8009d82:	3301      	adds	r3, #1
 8009d84:	72fb      	strb	r3, [r7, #11]
          break;
 8009d86:	e007      	b.n	8009d98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009d88:	6839      	ldr	r1, [r7, #0]
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 fa0a 	bl	800a1a4 <USBD_CtlError>
          err++;
 8009d90:	7afb      	ldrb	r3, [r7, #11]
 8009d92:	3301      	adds	r3, #1
 8009d94:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009d96:	e038      	b.n	8009e0a <USBD_GetDescriptor+0x286>
 8009d98:	e037      	b.n	8009e0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	7c1b      	ldrb	r3, [r3, #16]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d109      	bne.n	8009db6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009daa:	f107 0208 	add.w	r2, r7, #8
 8009dae:	4610      	mov	r0, r2
 8009db0:	4798      	blx	r3
 8009db2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009db4:	e029      	b.n	8009e0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009db6:	6839      	ldr	r1, [r7, #0]
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f9f3 	bl	800a1a4 <USBD_CtlError>
        err++;
 8009dbe:	7afb      	ldrb	r3, [r7, #11]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	72fb      	strb	r3, [r7, #11]
      break;
 8009dc4:	e021      	b.n	8009e0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	7c1b      	ldrb	r3, [r3, #16]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d10d      	bne.n	8009dea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dd6:	f107 0208 	add.w	r2, r7, #8
 8009dda:	4610      	mov	r0, r2
 8009ddc:	4798      	blx	r3
 8009dde:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	3301      	adds	r3, #1
 8009de4:	2207      	movs	r2, #7
 8009de6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009de8:	e00f      	b.n	8009e0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dea:	6839      	ldr	r1, [r7, #0]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f9d9 	bl	800a1a4 <USBD_CtlError>
        err++;
 8009df2:	7afb      	ldrb	r3, [r7, #11]
 8009df4:	3301      	adds	r3, #1
 8009df6:	72fb      	strb	r3, [r7, #11]
      break;
 8009df8:	e007      	b.n	8009e0a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009dfa:	6839      	ldr	r1, [r7, #0]
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f000 f9d1 	bl	800a1a4 <USBD_CtlError>
      err++;
 8009e02:	7afb      	ldrb	r3, [r7, #11]
 8009e04:	3301      	adds	r3, #1
 8009e06:	72fb      	strb	r3, [r7, #11]
      break;
 8009e08:	bf00      	nop
  }

  if (err != 0U)
 8009e0a:	7afb      	ldrb	r3, [r7, #11]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d11c      	bne.n	8009e4a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009e10:	893b      	ldrh	r3, [r7, #8]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d011      	beq.n	8009e3a <USBD_GetDescriptor+0x2b6>
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	88db      	ldrh	r3, [r3, #6]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00d      	beq.n	8009e3a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	88da      	ldrh	r2, [r3, #6]
 8009e22:	893b      	ldrh	r3, [r7, #8]
 8009e24:	4293      	cmp	r3, r2
 8009e26:	bf28      	it	cs
 8009e28:	4613      	movcs	r3, r2
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e2e:	893b      	ldrh	r3, [r7, #8]
 8009e30:	461a      	mov	r2, r3
 8009e32:	68f9      	ldr	r1, [r7, #12]
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 fa1f 	bl	800a278 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	88db      	ldrh	r3, [r3, #6]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d104      	bne.n	8009e4c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fa76 	bl	800a334 <USBD_CtlSendStatus>
 8009e48:	e000      	b.n	8009e4c <USBD_GetDescriptor+0x2c8>
    return;
 8009e4a:	bf00      	nop
    }
  }
}
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop

08009e54 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	889b      	ldrh	r3, [r3, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d130      	bne.n	8009ec8 <USBD_SetAddress+0x74>
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	88db      	ldrh	r3, [r3, #6]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d12c      	bne.n	8009ec8 <USBD_SetAddress+0x74>
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	885b      	ldrh	r3, [r3, #2]
 8009e72:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e74:	d828      	bhi.n	8009ec8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	885b      	ldrh	r3, [r3, #2]
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e88:	2b03      	cmp	r3, #3
 8009e8a:	d104      	bne.n	8009e96 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f988 	bl	800a1a4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e94:	e01d      	b.n	8009ed2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	7bfa      	ldrb	r2, [r7, #15]
 8009e9a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009e9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fec5 	bl	800ac32 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 fa43 	bl	800a334 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009eae:	7bfb      	ldrb	r3, [r7, #15]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d004      	beq.n	8009ebe <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2202      	movs	r2, #2
 8009eb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ebc:	e009      	b.n	8009ed2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ec6:	e004      	b.n	8009ed2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ec8:	6839      	ldr	r1, [r7, #0]
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f96a 	bl	800a1a4 <USBD_CtlError>
  }
}
 8009ed0:	bf00      	nop
 8009ed2:	bf00      	nop
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
	...

08009edc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	885b      	ldrh	r3, [r3, #2]
 8009eea:	b2da      	uxtb	r2, r3
 8009eec:	4b41      	ldr	r3, [pc, #260]	@ (8009ff4 <USBD_SetConfig+0x118>)
 8009eee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ef0:	4b40      	ldr	r3, [pc, #256]	@ (8009ff4 <USBD_SetConfig+0x118>)
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d904      	bls.n	8009f02 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f952 	bl	800a1a4 <USBD_CtlError>
 8009f00:	e075      	b.n	8009fee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f08:	2b02      	cmp	r3, #2
 8009f0a:	d002      	beq.n	8009f12 <USBD_SetConfig+0x36>
 8009f0c:	2b03      	cmp	r3, #3
 8009f0e:	d023      	beq.n	8009f58 <USBD_SetConfig+0x7c>
 8009f10:	e062      	b.n	8009fd8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009f12:	4b38      	ldr	r3, [pc, #224]	@ (8009ff4 <USBD_SetConfig+0x118>)
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d01a      	beq.n	8009f50 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009f1a:	4b36      	ldr	r3, [pc, #216]	@ (8009ff4 <USBD_SetConfig+0x118>)
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	461a      	mov	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2203      	movs	r2, #3
 8009f28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009f2c:	4b31      	ldr	r3, [pc, #196]	@ (8009ff4 <USBD_SetConfig+0x118>)
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	4619      	mov	r1, r3
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f7ff f9af 	bl	8009296 <USBD_SetClassConfig>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d104      	bne.n	8009f48 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009f3e:	6839      	ldr	r1, [r7, #0]
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 f92f 	bl	800a1a4 <USBD_CtlError>
            return;
 8009f46:	e052      	b.n	8009fee <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 f9f3 	bl	800a334 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f4e:	e04e      	b.n	8009fee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 f9ef 	bl	800a334 <USBD_CtlSendStatus>
        break;
 8009f56:	e04a      	b.n	8009fee <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009f58:	4b26      	ldr	r3, [pc, #152]	@ (8009ff4 <USBD_SetConfig+0x118>)
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d112      	bne.n	8009f86 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2202      	movs	r2, #2
 8009f64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009f68:	4b22      	ldr	r3, [pc, #136]	@ (8009ff4 <USBD_SetConfig+0x118>)
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	461a      	mov	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009f72:	4b20      	ldr	r3, [pc, #128]	@ (8009ff4 <USBD_SetConfig+0x118>)
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	4619      	mov	r1, r3
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f7ff f9ab 	bl	80092d4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 f9d8 	bl	800a334 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f84:	e033      	b.n	8009fee <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009f86:	4b1b      	ldr	r3, [pc, #108]	@ (8009ff4 <USBD_SetConfig+0x118>)
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d01d      	beq.n	8009fd0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f7ff f999 	bl	80092d4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009fa2:	4b14      	ldr	r3, [pc, #80]	@ (8009ff4 <USBD_SetConfig+0x118>)
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009fac:	4b11      	ldr	r3, [pc, #68]	@ (8009ff4 <USBD_SetConfig+0x118>)
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f7ff f96f 	bl	8009296 <USBD_SetClassConfig>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d104      	bne.n	8009fc8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009fbe:	6839      	ldr	r1, [r7, #0]
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 f8ef 	bl	800a1a4 <USBD_CtlError>
            return;
 8009fc6:	e012      	b.n	8009fee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 f9b3 	bl	800a334 <USBD_CtlSendStatus>
        break;
 8009fce:	e00e      	b.n	8009fee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 f9af 	bl	800a334 <USBD_CtlSendStatus>
        break;
 8009fd6:	e00a      	b.n	8009fee <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009fd8:	6839      	ldr	r1, [r7, #0]
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 f8e2 	bl	800a1a4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009fe0:	4b04      	ldr	r3, [pc, #16]	@ (8009ff4 <USBD_SetConfig+0x118>)
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f7ff f974 	bl	80092d4 <USBD_ClrClassConfig>
        break;
 8009fec:	bf00      	nop
    }
  }
}
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	200005ec 	.word	0x200005ec

08009ff8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	88db      	ldrh	r3, [r3, #6]
 800a006:	2b01      	cmp	r3, #1
 800a008:	d004      	beq.n	800a014 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a00a:	6839      	ldr	r1, [r7, #0]
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 f8c9 	bl	800a1a4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a012:	e022      	b.n	800a05a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	dc02      	bgt.n	800a024 <USBD_GetConfig+0x2c>
 800a01e:	2b00      	cmp	r3, #0
 800a020:	dc03      	bgt.n	800a02a <USBD_GetConfig+0x32>
 800a022:	e015      	b.n	800a050 <USBD_GetConfig+0x58>
 800a024:	2b03      	cmp	r3, #3
 800a026:	d00b      	beq.n	800a040 <USBD_GetConfig+0x48>
 800a028:	e012      	b.n	800a050 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	3308      	adds	r3, #8
 800a034:	2201      	movs	r2, #1
 800a036:	4619      	mov	r1, r3
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 f91d 	bl	800a278 <USBD_CtlSendData>
        break;
 800a03e:	e00c      	b.n	800a05a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	3304      	adds	r3, #4
 800a044:	2201      	movs	r2, #1
 800a046:	4619      	mov	r1, r3
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f915 	bl	800a278 <USBD_CtlSendData>
        break;
 800a04e:	e004      	b.n	800a05a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f8a6 	bl	800a1a4 <USBD_CtlError>
        break;
 800a058:	bf00      	nop
}
 800a05a:	bf00      	nop
 800a05c:	3708      	adds	r7, #8
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b082      	sub	sp, #8
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
 800a06a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a072:	3b01      	subs	r3, #1
 800a074:	2b02      	cmp	r3, #2
 800a076:	d81e      	bhi.n	800a0b6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	88db      	ldrh	r3, [r3, #6]
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d004      	beq.n	800a08a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a080:	6839      	ldr	r1, [r7, #0]
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f000 f88e 	bl	800a1a4 <USBD_CtlError>
        break;
 800a088:	e01a      	b.n	800a0c0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a096:	2b00      	cmp	r3, #0
 800a098:	d005      	beq.n	800a0a6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	f043 0202 	orr.w	r2, r3, #2
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	330c      	adds	r3, #12
 800a0aa:	2202      	movs	r2, #2
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f000 f8e2 	bl	800a278 <USBD_CtlSendData>
      break;
 800a0b4:	e004      	b.n	800a0c0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a0b6:	6839      	ldr	r1, [r7, #0]
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 f873 	bl	800a1a4 <USBD_CtlError>
      break;
 800a0be:	bf00      	nop
  }
}
 800a0c0:	bf00      	nop
 800a0c2:	3708      	adds	r7, #8
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	885b      	ldrh	r3, [r3, #2]
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d106      	bne.n	800a0e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 f926 	bl	800a334 <USBD_CtlSendStatus>
  }
}
 800a0e8:	bf00      	nop
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a100:	3b01      	subs	r3, #1
 800a102:	2b02      	cmp	r3, #2
 800a104:	d80b      	bhi.n	800a11e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	885b      	ldrh	r3, [r3, #2]
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d10c      	bne.n	800a128 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 f90c 	bl	800a334 <USBD_CtlSendStatus>
      }
      break;
 800a11c:	e004      	b.n	800a128 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a11e:	6839      	ldr	r1, [r7, #0]
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f000 f83f 	bl	800a1a4 <USBD_CtlError>
      break;
 800a126:	e000      	b.n	800a12a <USBD_ClrFeature+0x3a>
      break;
 800a128:	bf00      	nop
  }
}
 800a12a:	bf00      	nop
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a132:	b480      	push	{r7}
 800a134:	b083      	sub	sp, #12
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
 800a13a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	781a      	ldrb	r2, [r3, #0]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	785a      	ldrb	r2, [r3, #1]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	3302      	adds	r3, #2
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	461a      	mov	r2, r3
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	3303      	adds	r3, #3
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	021b      	lsls	r3, r3, #8
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	4413      	add	r3, r2
 800a160:	b29a      	uxth	r2, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	3304      	adds	r3, #4
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	461a      	mov	r2, r3
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	3305      	adds	r3, #5
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	021b      	lsls	r3, r3, #8
 800a176:	b29b      	uxth	r3, r3
 800a178:	4413      	add	r3, r2
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	3306      	adds	r3, #6
 800a184:	781b      	ldrb	r3, [r3, #0]
 800a186:	461a      	mov	r2, r3
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	3307      	adds	r3, #7
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	021b      	lsls	r3, r3, #8
 800a190:	b29b      	uxth	r3, r3
 800a192:	4413      	add	r3, r2
 800a194:	b29a      	uxth	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	80da      	strh	r2, [r3, #6]

}
 800a19a:	bf00      	nop
 800a19c:	370c      	adds	r7, #12
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bc80      	pop	{r7}
 800a1a2:	4770      	bx	lr

0800a1a4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b082      	sub	sp, #8
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a1ae:	2180      	movs	r1, #128	@ 0x80
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 fcd5 	bl	800ab60 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 fcd1 	bl	800ab60 <USBD_LL_StallEP>
}
 800a1be:	bf00      	nop
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b086      	sub	sp, #24
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	60f8      	str	r0, [r7, #12]
 800a1ce:	60b9      	str	r1, [r7, #8]
 800a1d0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d032      	beq.n	800a242 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f000 f834 	bl	800a24a <USBD_GetLen>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	005b      	lsls	r3, r3, #1
 800a1ea:	b29a      	uxth	r2, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a1f0:	7dfb      	ldrb	r3, [r7, #23]
 800a1f2:	1c5a      	adds	r2, r3, #1
 800a1f4:	75fa      	strb	r2, [r7, #23]
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	7812      	ldrb	r2, [r2, #0]
 800a200:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a202:	7dfb      	ldrb	r3, [r7, #23]
 800a204:	1c5a      	adds	r2, r3, #1
 800a206:	75fa      	strb	r2, [r7, #23]
 800a208:	461a      	mov	r2, r3
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	4413      	add	r3, r2
 800a20e:	2203      	movs	r2, #3
 800a210:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a212:	e012      	b.n	800a23a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	1c5a      	adds	r2, r3, #1
 800a218:	60fa      	str	r2, [r7, #12]
 800a21a:	7dfa      	ldrb	r2, [r7, #23]
 800a21c:	1c51      	adds	r1, r2, #1
 800a21e:	75f9      	strb	r1, [r7, #23]
 800a220:	4611      	mov	r1, r2
 800a222:	68ba      	ldr	r2, [r7, #8]
 800a224:	440a      	add	r2, r1
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a22a:	7dfb      	ldrb	r3, [r7, #23]
 800a22c:	1c5a      	adds	r2, r3, #1
 800a22e:	75fa      	strb	r2, [r7, #23]
 800a230:	461a      	mov	r2, r3
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	4413      	add	r3, r2
 800a236:	2200      	movs	r2, #0
 800a238:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d1e8      	bne.n	800a214 <USBD_GetString+0x4e>
    }
  }
}
 800a242:	bf00      	nop
 800a244:	3718      	adds	r7, #24
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a24a:	b480      	push	{r7}
 800a24c:	b085      	sub	sp, #20
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a252:	2300      	movs	r3, #0
 800a254:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a256:	e005      	b.n	800a264 <USBD_GetLen+0x1a>
  {
    len++;
 800a258:	7bfb      	ldrb	r3, [r7, #15]
 800a25a:	3301      	adds	r3, #1
 800a25c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	3301      	adds	r3, #1
 800a262:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d1f5      	bne.n	800a258 <USBD_GetLen+0xe>
  }

  return len;
 800a26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3714      	adds	r7, #20
 800a272:	46bd      	mov	sp, r7
 800a274:	bc80      	pop	{r7}
 800a276:	4770      	bx	lr

0800a278 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	4613      	mov	r3, r2
 800a284:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2202      	movs	r2, #2
 800a28a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a28e:	88fa      	ldrh	r2, [r7, #6]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a294:	88fa      	ldrh	r2, [r7, #6]
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a29a:	88fb      	ldrh	r3, [r7, #6]
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	2100      	movs	r1, #0
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f000 fce5 	bl	800ac70 <USBD_LL_Transmit>

  return USBD_OK;
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3710      	adds	r7, #16
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2be:	88fb      	ldrh	r3, [r7, #6]
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f000 fcd3 	bl	800ac70 <USBD_LL_Transmit>

  return USBD_OK;
 800a2ca:	2300      	movs	r3, #0
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3710      	adds	r7, #16
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	4613      	mov	r3, r2
 800a2e0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2203      	movs	r2, #3
 800a2e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a2ea:	88fa      	ldrh	r2, [r7, #6]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a2f2:	88fa      	ldrh	r2, [r7, #6]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a2fa:	88fb      	ldrh	r3, [r7, #6]
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	2100      	movs	r1, #0
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f000 fcd8 	bl	800acb6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a306:	2300      	movs	r3, #0
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3710      	adds	r7, #16
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	60f8      	str	r0, [r7, #12]
 800a318:	60b9      	str	r1, [r7, #8]
 800a31a:	4613      	mov	r3, r2
 800a31c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a31e:	88fb      	ldrh	r3, [r7, #6]
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	2100      	movs	r1, #0
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f000 fcc6 	bl	800acb6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2204      	movs	r2, #4
 800a340:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a344:	2300      	movs	r3, #0
 800a346:	2200      	movs	r2, #0
 800a348:	2100      	movs	r1, #0
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 fc90 	bl	800ac70 <USBD_LL_Transmit>

  return USBD_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b082      	sub	sp, #8
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2205      	movs	r2, #5
 800a366:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a36a:	2300      	movs	r3, #0
 800a36c:	2200      	movs	r2, #0
 800a36e:	2100      	movs	r1, #0
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 fca0 	bl	800acb6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a384:	2200      	movs	r2, #0
 800a386:	4912      	ldr	r1, [pc, #72]	@ (800a3d0 <MX_USB_DEVICE_Init+0x50>)
 800a388:	4812      	ldr	r0, [pc, #72]	@ (800a3d4 <MX_USB_DEVICE_Init+0x54>)
 800a38a:	f7fe ff2a 	bl	80091e2 <USBD_Init>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d001      	beq.n	800a398 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a394:	f7f8 f9e5 	bl	8002762 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a398:	490f      	ldr	r1, [pc, #60]	@ (800a3d8 <MX_USB_DEVICE_Init+0x58>)
 800a39a:	480e      	ldr	r0, [pc, #56]	@ (800a3d4 <MX_USB_DEVICE_Init+0x54>)
 800a39c:	f7fe ff4c 	bl	8009238 <USBD_RegisterClass>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d001      	beq.n	800a3aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a3a6:	f7f8 f9dc 	bl	8002762 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a3aa:	490c      	ldr	r1, [pc, #48]	@ (800a3dc <MX_USB_DEVICE_Init+0x5c>)
 800a3ac:	4809      	ldr	r0, [pc, #36]	@ (800a3d4 <MX_USB_DEVICE_Init+0x54>)
 800a3ae:	f7fe fe7d 	bl	80090ac <USBD_CDC_RegisterInterface>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d001      	beq.n	800a3bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a3b8:	f7f8 f9d3 	bl	8002762 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a3bc:	4805      	ldr	r0, [pc, #20]	@ (800a3d4 <MX_USB_DEVICE_Init+0x54>)
 800a3be:	f7fe ff54 	bl	800926a <USBD_Start>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d001      	beq.n	800a3cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a3c8:	f7f8 f9cb 	bl	8002762 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a3cc:	bf00      	nop
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	20000160 	.word	0x20000160
 800a3d4:	200005f0 	.word	0x200005f0
 800a3d8:	2000004c 	.word	0x2000004c
 800a3dc:	20000150 	.word	0x20000150

0800a3e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	4905      	ldr	r1, [pc, #20]	@ (800a3fc <CDC_Init_FS+0x1c>)
 800a3e8:	4805      	ldr	r0, [pc, #20]	@ (800a400 <CDC_Init_FS+0x20>)
 800a3ea:	f7fe fe75 	bl	80090d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a3ee:	4905      	ldr	r1, [pc, #20]	@ (800a404 <CDC_Init_FS+0x24>)
 800a3f0:	4803      	ldr	r0, [pc, #12]	@ (800a400 <CDC_Init_FS+0x20>)
 800a3f2:	f7fe fe8a 	bl	800910a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a3f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	20000cb4 	.word	0x20000cb4
 800a400:	200005f0 	.word	0x200005f0
 800a404:	200008b4 	.word	0x200008b4

0800a408 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a408:	b480      	push	{r7}
 800a40a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a40c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a40e:	4618      	mov	r0, r3
 800a410:	46bd      	mov	sp, r7
 800a412:	bc80      	pop	{r7}
 800a414:	4770      	bx	lr
	...

0800a418 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	4603      	mov	r3, r0
 800a420:	6039      	str	r1, [r7, #0]
 800a422:	71fb      	strb	r3, [r7, #7]
 800a424:	4613      	mov	r3, r2
 800a426:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a428:	79fb      	ldrb	r3, [r7, #7]
 800a42a:	2b23      	cmp	r3, #35	@ 0x23
 800a42c:	d84a      	bhi.n	800a4c4 <CDC_Control_FS+0xac>
 800a42e:	a201      	add	r2, pc, #4	@ (adr r2, 800a434 <CDC_Control_FS+0x1c>)
 800a430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a434:	0800a4c5 	.word	0x0800a4c5
 800a438:	0800a4c5 	.word	0x0800a4c5
 800a43c:	0800a4c5 	.word	0x0800a4c5
 800a440:	0800a4c5 	.word	0x0800a4c5
 800a444:	0800a4c5 	.word	0x0800a4c5
 800a448:	0800a4c5 	.word	0x0800a4c5
 800a44c:	0800a4c5 	.word	0x0800a4c5
 800a450:	0800a4c5 	.word	0x0800a4c5
 800a454:	0800a4c5 	.word	0x0800a4c5
 800a458:	0800a4c5 	.word	0x0800a4c5
 800a45c:	0800a4c5 	.word	0x0800a4c5
 800a460:	0800a4c5 	.word	0x0800a4c5
 800a464:	0800a4c5 	.word	0x0800a4c5
 800a468:	0800a4c5 	.word	0x0800a4c5
 800a46c:	0800a4c5 	.word	0x0800a4c5
 800a470:	0800a4c5 	.word	0x0800a4c5
 800a474:	0800a4c5 	.word	0x0800a4c5
 800a478:	0800a4c5 	.word	0x0800a4c5
 800a47c:	0800a4c5 	.word	0x0800a4c5
 800a480:	0800a4c5 	.word	0x0800a4c5
 800a484:	0800a4c5 	.word	0x0800a4c5
 800a488:	0800a4c5 	.word	0x0800a4c5
 800a48c:	0800a4c5 	.word	0x0800a4c5
 800a490:	0800a4c5 	.word	0x0800a4c5
 800a494:	0800a4c5 	.word	0x0800a4c5
 800a498:	0800a4c5 	.word	0x0800a4c5
 800a49c:	0800a4c5 	.word	0x0800a4c5
 800a4a0:	0800a4c5 	.word	0x0800a4c5
 800a4a4:	0800a4c5 	.word	0x0800a4c5
 800a4a8:	0800a4c5 	.word	0x0800a4c5
 800a4ac:	0800a4c5 	.word	0x0800a4c5
 800a4b0:	0800a4c5 	.word	0x0800a4c5
 800a4b4:	0800a4c5 	.word	0x0800a4c5
 800a4b8:	0800a4c5 	.word	0x0800a4c5
 800a4bc:	0800a4c5 	.word	0x0800a4c5
 800a4c0:	0800a4c5 	.word	0x0800a4c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a4c4:	bf00      	nop
  }

  return (USBD_OK);
 800a4c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bc80      	pop	{r7}
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop

0800a4d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
 800a4dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a4de:	6879      	ldr	r1, [r7, #4]
 800a4e0:	4805      	ldr	r0, [pc, #20]	@ (800a4f8 <CDC_Receive_FS+0x24>)
 800a4e2:	f7fe fe12 	bl	800910a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a4e6:	4804      	ldr	r0, [pc, #16]	@ (800a4f8 <CDC_Receive_FS+0x24>)
 800a4e8:	f7fe fe51 	bl	800918e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a4ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	200005f0 	.word	0x200005f0

0800a4fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	460b      	mov	r3, r1
 800a506:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a508:	2300      	movs	r3, #0
 800a50a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a50c:	4b0d      	ldr	r3, [pc, #52]	@ (800a544 <CDC_Transmit_FS+0x48>)
 800a50e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a512:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d001      	beq.n	800a522 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a51e:	2301      	movs	r3, #1
 800a520:	e00b      	b.n	800a53a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a522:	887b      	ldrh	r3, [r7, #2]
 800a524:	461a      	mov	r2, r3
 800a526:	6879      	ldr	r1, [r7, #4]
 800a528:	4806      	ldr	r0, [pc, #24]	@ (800a544 <CDC_Transmit_FS+0x48>)
 800a52a:	f7fe fdd5 	bl	80090d8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a52e:	4805      	ldr	r0, [pc, #20]	@ (800a544 <CDC_Transmit_FS+0x48>)
 800a530:	f7fe fdfe 	bl	8009130 <USBD_CDC_TransmitPacket>
 800a534:	4603      	mov	r3, r0
 800a536:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a538:	7bfb      	ldrb	r3, [r7, #15]
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3710      	adds	r7, #16
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	200005f0 	.word	0x200005f0

0800a548 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	4603      	mov	r3, r0
 800a550:	6039      	str	r1, [r7, #0]
 800a552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	2212      	movs	r2, #18
 800a558:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a55a:	4b03      	ldr	r3, [pc, #12]	@ (800a568 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	bc80      	pop	{r7}
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	2000017c 	.word	0x2000017c

0800a56c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b083      	sub	sp, #12
 800a570:	af00      	add	r7, sp, #0
 800a572:	4603      	mov	r3, r0
 800a574:	6039      	str	r1, [r7, #0]
 800a576:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	2204      	movs	r2, #4
 800a57c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a57e:	4b03      	ldr	r3, [pc, #12]	@ (800a58c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a580:	4618      	mov	r0, r3
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	bc80      	pop	{r7}
 800a588:	4770      	bx	lr
 800a58a:	bf00      	nop
 800a58c:	20000190 	.word	0x20000190

0800a590 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	4603      	mov	r3, r0
 800a598:	6039      	str	r1, [r7, #0]
 800a59a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a59c:	79fb      	ldrb	r3, [r7, #7]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d105      	bne.n	800a5ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a5a2:	683a      	ldr	r2, [r7, #0]
 800a5a4:	4907      	ldr	r1, [pc, #28]	@ (800a5c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a5a6:	4808      	ldr	r0, [pc, #32]	@ (800a5c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a5a8:	f7ff fe0d 	bl	800a1c6 <USBD_GetString>
 800a5ac:	e004      	b.n	800a5b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	4904      	ldr	r1, [pc, #16]	@ (800a5c4 <USBD_FS_ProductStrDescriptor+0x34>)
 800a5b2:	4805      	ldr	r0, [pc, #20]	@ (800a5c8 <USBD_FS_ProductStrDescriptor+0x38>)
 800a5b4:	f7ff fe07 	bl	800a1c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5b8:	4b02      	ldr	r3, [pc, #8]	@ (800a5c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3708      	adds	r7, #8
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	200010b4 	.word	0x200010b4
 800a5c8:	0800da9c 	.word	0x0800da9c

0800a5cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	6039      	str	r1, [r7, #0]
 800a5d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a5d8:	683a      	ldr	r2, [r7, #0]
 800a5da:	4904      	ldr	r1, [pc, #16]	@ (800a5ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a5dc:	4804      	ldr	r0, [pc, #16]	@ (800a5f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a5de:	f7ff fdf2 	bl	800a1c6 <USBD_GetString>
  return USBD_StrDesc;
 800a5e2:	4b02      	ldr	r3, [pc, #8]	@ (800a5ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	200010b4 	.word	0x200010b4
 800a5f0:	0800dab4 	.word	0x0800dab4

0800a5f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	6039      	str	r1, [r7, #0]
 800a5fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	221a      	movs	r2, #26
 800a604:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a606:	f000 f843 	bl	800a690 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a60a:	4b02      	ldr	r3, [pc, #8]	@ (800a614 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	20000194 	.word	0x20000194

0800a618 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	4603      	mov	r3, r0
 800a620:	6039      	str	r1, [r7, #0]
 800a622:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a624:	79fb      	ldrb	r3, [r7, #7]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d105      	bne.n	800a636 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a62a:	683a      	ldr	r2, [r7, #0]
 800a62c:	4907      	ldr	r1, [pc, #28]	@ (800a64c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a62e:	4808      	ldr	r0, [pc, #32]	@ (800a650 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a630:	f7ff fdc9 	bl	800a1c6 <USBD_GetString>
 800a634:	e004      	b.n	800a640 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a636:	683a      	ldr	r2, [r7, #0]
 800a638:	4904      	ldr	r1, [pc, #16]	@ (800a64c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a63a:	4805      	ldr	r0, [pc, #20]	@ (800a650 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a63c:	f7ff fdc3 	bl	800a1c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a640:	4b02      	ldr	r3, [pc, #8]	@ (800a64c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a642:	4618      	mov	r0, r3
 800a644:	3708      	adds	r7, #8
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	200010b4 	.word	0x200010b4
 800a650:	0800dac8 	.word	0x0800dac8

0800a654 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	4603      	mov	r3, r0
 800a65c:	6039      	str	r1, [r7, #0]
 800a65e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a660:	79fb      	ldrb	r3, [r7, #7]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d105      	bne.n	800a672 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a666:	683a      	ldr	r2, [r7, #0]
 800a668:	4907      	ldr	r1, [pc, #28]	@ (800a688 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a66a:	4808      	ldr	r0, [pc, #32]	@ (800a68c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a66c:	f7ff fdab 	bl	800a1c6 <USBD_GetString>
 800a670:	e004      	b.n	800a67c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	4904      	ldr	r1, [pc, #16]	@ (800a688 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a676:	4805      	ldr	r0, [pc, #20]	@ (800a68c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a678:	f7ff fda5 	bl	800a1c6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a67c:	4b02      	ldr	r3, [pc, #8]	@ (800a688 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3708      	adds	r7, #8
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	200010b4 	.word	0x200010b4
 800a68c:	0800dad4 	.word	0x0800dad4

0800a690 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a696:	4b0f      	ldr	r3, [pc, #60]	@ (800a6d4 <Get_SerialNum+0x44>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a69c:	4b0e      	ldr	r3, [pc, #56]	@ (800a6d8 <Get_SerialNum+0x48>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a6a2:	4b0e      	ldr	r3, [pc, #56]	@ (800a6dc <Get_SerialNum+0x4c>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a6a8:	68fa      	ldr	r2, [r7, #12]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d009      	beq.n	800a6ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a6b6:	2208      	movs	r2, #8
 800a6b8:	4909      	ldr	r1, [pc, #36]	@ (800a6e0 <Get_SerialNum+0x50>)
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f000 f814 	bl	800a6e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a6c0:	2204      	movs	r2, #4
 800a6c2:	4908      	ldr	r1, [pc, #32]	@ (800a6e4 <Get_SerialNum+0x54>)
 800a6c4:	68b8      	ldr	r0, [r7, #8]
 800a6c6:	f000 f80f 	bl	800a6e8 <IntToUnicode>
  }
}
 800a6ca:	bf00      	nop
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	1fff7a10 	.word	0x1fff7a10
 800a6d8:	1fff7a14 	.word	0x1fff7a14
 800a6dc:	1fff7a18 	.word	0x1fff7a18
 800a6e0:	20000196 	.word	0x20000196
 800a6e4:	200001a6 	.word	0x200001a6

0800a6e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b087      	sub	sp, #28
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	75fb      	strb	r3, [r7, #23]
 800a6fe:	e027      	b.n	800a750 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	0f1b      	lsrs	r3, r3, #28
 800a704:	2b09      	cmp	r3, #9
 800a706:	d80b      	bhi.n	800a720 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	0f1b      	lsrs	r3, r3, #28
 800a70c:	b2da      	uxtb	r2, r3
 800a70e:	7dfb      	ldrb	r3, [r7, #23]
 800a710:	005b      	lsls	r3, r3, #1
 800a712:	4619      	mov	r1, r3
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	440b      	add	r3, r1
 800a718:	3230      	adds	r2, #48	@ 0x30
 800a71a:	b2d2      	uxtb	r2, r2
 800a71c:	701a      	strb	r2, [r3, #0]
 800a71e:	e00a      	b.n	800a736 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	0f1b      	lsrs	r3, r3, #28
 800a724:	b2da      	uxtb	r2, r3
 800a726:	7dfb      	ldrb	r3, [r7, #23]
 800a728:	005b      	lsls	r3, r3, #1
 800a72a:	4619      	mov	r1, r3
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	440b      	add	r3, r1
 800a730:	3237      	adds	r2, #55	@ 0x37
 800a732:	b2d2      	uxtb	r2, r2
 800a734:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	011b      	lsls	r3, r3, #4
 800a73a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a73c:	7dfb      	ldrb	r3, [r7, #23]
 800a73e:	005b      	lsls	r3, r3, #1
 800a740:	3301      	adds	r3, #1
 800a742:	68ba      	ldr	r2, [r7, #8]
 800a744:	4413      	add	r3, r2
 800a746:	2200      	movs	r2, #0
 800a748:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a74a:	7dfb      	ldrb	r3, [r7, #23]
 800a74c:	3301      	adds	r3, #1
 800a74e:	75fb      	strb	r3, [r7, #23]
 800a750:	7dfa      	ldrb	r2, [r7, #23]
 800a752:	79fb      	ldrb	r3, [r7, #7]
 800a754:	429a      	cmp	r2, r3
 800a756:	d3d3      	bcc.n	800a700 <IntToUnicode+0x18>
  }
}
 800a758:	bf00      	nop
 800a75a:	bf00      	nop
 800a75c:	371c      	adds	r7, #28
 800a75e:	46bd      	mov	sp, r7
 800a760:	bc80      	pop	{r7}
 800a762:	4770      	bx	lr

0800a764 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b08a      	sub	sp, #40	@ 0x28
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a76c:	f107 0314 	add.w	r3, r7, #20
 800a770:	2200      	movs	r2, #0
 800a772:	601a      	str	r2, [r3, #0]
 800a774:	605a      	str	r2, [r3, #4]
 800a776:	609a      	str	r2, [r3, #8]
 800a778:	60da      	str	r2, [r3, #12]
 800a77a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a784:	d147      	bne.n	800a816 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a786:	2300      	movs	r3, #0
 800a788:	613b      	str	r3, [r7, #16]
 800a78a:	4b25      	ldr	r3, [pc, #148]	@ (800a820 <HAL_PCD_MspInit+0xbc>)
 800a78c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a78e:	4a24      	ldr	r2, [pc, #144]	@ (800a820 <HAL_PCD_MspInit+0xbc>)
 800a790:	f043 0301 	orr.w	r3, r3, #1
 800a794:	6313      	str	r3, [r2, #48]	@ 0x30
 800a796:	4b22      	ldr	r3, [pc, #136]	@ (800a820 <HAL_PCD_MspInit+0xbc>)
 800a798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a79a:	f003 0301 	and.w	r3, r3, #1
 800a79e:	613b      	str	r3, [r7, #16]
 800a7a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a7a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a7a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7b0:	f107 0314 	add.w	r3, r7, #20
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	481b      	ldr	r0, [pc, #108]	@ (800a824 <HAL_PCD_MspInit+0xc0>)
 800a7b8:	f7f9 fd34 	bl	8004224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a7bc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a7c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7c2:	2302      	movs	r3, #2
 800a7c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a7ce:	230a      	movs	r3, #10
 800a7d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7d2:	f107 0314 	add.w	r3, r7, #20
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	4812      	ldr	r0, [pc, #72]	@ (800a824 <HAL_PCD_MspInit+0xc0>)
 800a7da:	f7f9 fd23 	bl	8004224 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a7de:	4b10      	ldr	r3, [pc, #64]	@ (800a820 <HAL_PCD_MspInit+0xbc>)
 800a7e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7e2:	4a0f      	ldr	r2, [pc, #60]	@ (800a820 <HAL_PCD_MspInit+0xbc>)
 800a7e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7e8:	6353      	str	r3, [r2, #52]	@ 0x34
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	60fb      	str	r3, [r7, #12]
 800a7ee:	4b0c      	ldr	r3, [pc, #48]	@ (800a820 <HAL_PCD_MspInit+0xbc>)
 800a7f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7f2:	4a0b      	ldr	r2, [pc, #44]	@ (800a820 <HAL_PCD_MspInit+0xbc>)
 800a7f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a7f8:	6453      	str	r3, [r2, #68]	@ 0x44
 800a7fa:	4b09      	ldr	r3, [pc, #36]	@ (800a820 <HAL_PCD_MspInit+0xbc>)
 800a7fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a802:	60fb      	str	r3, [r7, #12]
 800a804:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a806:	2200      	movs	r2, #0
 800a808:	2100      	movs	r1, #0
 800a80a:	2043      	movs	r0, #67	@ 0x43
 800a80c:	f7f9 fcd3 	bl	80041b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a810:	2043      	movs	r0, #67	@ 0x43
 800a812:	f7f9 fcec 	bl	80041ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a816:	bf00      	nop
 800a818:	3728      	adds	r7, #40	@ 0x28
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	40023800 	.word	0x40023800
 800a824:	40020000 	.word	0x40020000

0800a828 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b082      	sub	sp, #8
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800a83c:	4619      	mov	r1, r3
 800a83e:	4610      	mov	r0, r2
 800a840:	f7fe fd5b 	bl	80092fa <USBD_LL_SetupStage>
}
 800a844:	bf00      	nop
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	460b      	mov	r3, r1
 800a856:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 0500 	ldr.w	r0, [r3, #1280]	@ 0x500
 800a85e:	78fa      	ldrb	r2, [r7, #3]
 800a860:	6879      	ldr	r1, [r7, #4]
 800a862:	4613      	mov	r3, r2
 800a864:	00db      	lsls	r3, r3, #3
 800a866:	4413      	add	r3, r2
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	440b      	add	r3, r1
 800a86c:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	78fb      	ldrb	r3, [r7, #3]
 800a874:	4619      	mov	r1, r3
 800a876:	f7fe fd8d 	bl	8009394 <USBD_LL_DataOutStage>
}
 800a87a:	bf00      	nop
 800a87c:	3708      	adds	r7, #8
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}

0800a882 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b082      	sub	sp, #8
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
 800a88a:	460b      	mov	r3, r1
 800a88c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 0500 	ldr.w	r0, [r3, #1280]	@ 0x500
 800a894:	78fa      	ldrb	r2, [r7, #3]
 800a896:	6879      	ldr	r1, [r7, #4]
 800a898:	4613      	mov	r3, r2
 800a89a:	00db      	lsls	r3, r3, #3
 800a89c:	4413      	add	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	440b      	add	r3, r1
 800a8a2:	3348      	adds	r3, #72	@ 0x48
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	78fb      	ldrb	r3, [r7, #3]
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	f7fe fde4 	bl	8009476 <USBD_LL_DataInStage>
}
 800a8ae:	bf00      	nop
 800a8b0:	3708      	adds	r7, #8
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b082      	sub	sp, #8
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7fe fef4 	bl	80096b2 <USBD_LL_SOF>
}
 800a8ca:	bf00      	nop
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b084      	sub	sp, #16
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d102      	bne.n	800a8ec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	73fb      	strb	r3, [r7, #15]
 800a8ea:	e008      	b.n	800a8fe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	691b      	ldr	r3, [r3, #16]
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	d102      	bne.n	800a8fa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	73fb      	strb	r3, [r7, #15]
 800a8f8:	e001      	b.n	800a8fe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a8fa:	f7f7 ff32 	bl	8002762 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 800a904:	7bfa      	ldrb	r2, [r7, #15]
 800a906:	4611      	mov	r1, r2
 800a908:	4618      	mov	r0, r3
 800a90a:	f7fe fe9a 	bl	8009642 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 800a914:	4618      	mov	r0, r3
 800a916:	f7fe fe53 	bl	80095c0 <USBD_LL_Reset>
}
 800a91a:	bf00      	nop
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
	...

0800a924 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 800a932:	4618      	mov	r0, r3
 800a934:	f7fe fe94 	bl	8009660 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	6812      	ldr	r2, [r2, #0]
 800a946:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a94a:	f043 0301 	orr.w	r3, r3, #1
 800a94e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6a1b      	ldr	r3, [r3, #32]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d005      	beq.n	800a964 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a958:	4b04      	ldr	r3, [pc, #16]	@ (800a96c <HAL_PCD_SuspendCallback+0x48>)
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	4a03      	ldr	r2, [pc, #12]	@ (800a96c <HAL_PCD_SuspendCallback+0x48>)
 800a95e:	f043 0306 	orr.w	r3, r3, #6
 800a962:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a964:	bf00      	nop
 800a966:	3708      	adds	r7, #8
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}
 800a96c:	e000ed00 	.word	0xe000ed00

0800a970 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b082      	sub	sp, #8
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 800a97e:	4618      	mov	r0, r3
 800a980:	f7fe fe82 	bl	8009688 <USBD_LL_Resume>
}
 800a984:	bf00      	nop
 800a986:	3708      	adds	r7, #8
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	460b      	mov	r3, r1
 800a996:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 800a99e:	78fa      	ldrb	r2, [r7, #3]
 800a9a0:	4611      	mov	r1, r2
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7fe feab 	bl	80096fe <USBD_LL_IsoOUTIncomplete>
}
 800a9a8:	bf00      	nop
 800a9aa:	3708      	adds	r7, #8
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b082      	sub	sp, #8
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 800a9c2:	78fa      	ldrb	r2, [r7, #3]
 800a9c4:	4611      	mov	r1, r2
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7fe fe8d 	bl	80096e6 <USBD_LL_IsoINIncomplete>
}
 800a9cc:	bf00      	nop
 800a9ce:	3708      	adds	r7, #8
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b082      	sub	sp, #8
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7fe fe97 	bl	8009716 <USBD_LL_DevConnected>
}
 800a9e8:	bf00      	nop
 800a9ea:	3708      	adds	r7, #8
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7fe fe93 	bl	800972a <USBD_LL_DevDisconnected>
}
 800aa04:	bf00      	nop
 800aa06:	3708      	adds	r7, #8
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d139      	bne.n	800aa90 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800aa1c:	4a1f      	ldr	r2, [pc, #124]	@ (800aa9c <USBD_LL_Init+0x90>)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8c2 3500 	str.w	r3, [r2, #1280]	@ 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	4a1d      	ldr	r2, [pc, #116]	@ (800aa9c <USBD_LL_Init+0x90>)
 800aa28:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aa2c:	4b1b      	ldr	r3, [pc, #108]	@ (800aa9c <USBD_LL_Init+0x90>)
 800aa2e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800aa32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800aa34:	4b19      	ldr	r3, [pc, #100]	@ (800aa9c <USBD_LL_Init+0x90>)
 800aa36:	2204      	movs	r2, #4
 800aa38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800aa3a:	4b18      	ldr	r3, [pc, #96]	@ (800aa9c <USBD_LL_Init+0x90>)
 800aa3c:	2202      	movs	r2, #2
 800aa3e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aa40:	4b16      	ldr	r3, [pc, #88]	@ (800aa9c <USBD_LL_Init+0x90>)
 800aa42:	2200      	movs	r2, #0
 800aa44:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aa46:	4b15      	ldr	r3, [pc, #84]	@ (800aa9c <USBD_LL_Init+0x90>)
 800aa48:	2202      	movs	r2, #2
 800aa4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aa4c:	4b13      	ldr	r3, [pc, #76]	@ (800aa9c <USBD_LL_Init+0x90>)
 800aa4e:	2200      	movs	r2, #0
 800aa50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800aa52:	4b12      	ldr	r3, [pc, #72]	@ (800aa9c <USBD_LL_Init+0x90>)
 800aa54:	2200      	movs	r2, #0
 800aa56:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800aa58:	4b10      	ldr	r3, [pc, #64]	@ (800aa9c <USBD_LL_Init+0x90>)
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800aa5e:	4b0f      	ldr	r3, [pc, #60]	@ (800aa9c <USBD_LL_Init+0x90>)
 800aa60:	2200      	movs	r2, #0
 800aa62:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800aa64:	480d      	ldr	r0, [pc, #52]	@ (800aa9c <USBD_LL_Init+0x90>)
 800aa66:	f7f9 fdac 	bl	80045c2 <HAL_PCD_Init>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d001      	beq.n	800aa74 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800aa70:	f7f7 fe77 	bl	8002762 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800aa74:	2180      	movs	r1, #128	@ 0x80
 800aa76:	4809      	ldr	r0, [pc, #36]	@ (800aa9c <USBD_LL_Init+0x90>)
 800aa78:	f7fa ffc4 	bl	8005a04 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800aa7c:	2240      	movs	r2, #64	@ 0x40
 800aa7e:	2100      	movs	r1, #0
 800aa80:	4806      	ldr	r0, [pc, #24]	@ (800aa9c <USBD_LL_Init+0x90>)
 800aa82:	f7fa ff79 	bl	8005978 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800aa86:	2280      	movs	r2, #128	@ 0x80
 800aa88:	2101      	movs	r1, #1
 800aa8a:	4804      	ldr	r0, [pc, #16]	@ (800aa9c <USBD_LL_Init+0x90>)
 800aa8c:	f7fa ff74 	bl	8005978 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800aa90:	2300      	movs	r3, #0
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3708      	adds	r7, #8
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	200012b4 	.word	0x200012b4

0800aaa0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaac:	2300      	movs	r3, #0
 800aaae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7f9 fea0 	bl	80047fc <HAL_PCD_Start>
 800aabc:	4603      	mov	r3, r0
 800aabe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aac0:	7bfb      	ldrb	r3, [r7, #15]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f000 f92e 	bl	800ad24 <USBD_Get_USB_Status>
 800aac8:	4603      	mov	r3, r0
 800aaca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aacc:	7bbb      	ldrb	r3, [r7, #14]
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3710      	adds	r7, #16
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b084      	sub	sp, #16
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
 800aade:	4608      	mov	r0, r1
 800aae0:	4611      	mov	r1, r2
 800aae2:	461a      	mov	r2, r3
 800aae4:	4603      	mov	r3, r0
 800aae6:	70fb      	strb	r3, [r7, #3]
 800aae8:	460b      	mov	r3, r1
 800aaea:	70bb      	strb	r3, [r7, #2]
 800aaec:	4613      	mov	r3, r2
 800aaee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800aafe:	78bb      	ldrb	r3, [r7, #2]
 800ab00:	883a      	ldrh	r2, [r7, #0]
 800ab02:	78f9      	ldrb	r1, [r7, #3]
 800ab04:	f7fa fb52 	bl	80051ac <HAL_PCD_EP_Open>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab0c:	7bfb      	ldrb	r3, [r7, #15]
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f000 f908 	bl	800ad24 <USBD_Get_USB_Status>
 800ab14:	4603      	mov	r3, r0
 800ab16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab18:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3710      	adds	r7, #16
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab22:	b580      	push	{r7, lr}
 800ab24:	b084      	sub	sp, #16
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab32:	2300      	movs	r3, #0
 800ab34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ab3c:	78fa      	ldrb	r2, [r7, #3]
 800ab3e:	4611      	mov	r1, r2
 800ab40:	4618      	mov	r0, r3
 800ab42:	f7fa fb9b 	bl	800527c <HAL_PCD_EP_Close>
 800ab46:	4603      	mov	r3, r0
 800ab48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab4a:	7bfb      	ldrb	r3, [r7, #15]
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f000 f8e9 	bl	800ad24 <USBD_Get_USB_Status>
 800ab52:	4603      	mov	r3, r0
 800ab54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab56:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3710      	adds	r7, #16
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	460b      	mov	r3, r1
 800ab6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab70:	2300      	movs	r3, #0
 800ab72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ab7a:	78fa      	ldrb	r2, [r7, #3]
 800ab7c:	4611      	mov	r1, r2
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7fa fc54 	bl	800542c <HAL_PCD_EP_SetStall>
 800ab84:	4603      	mov	r3, r0
 800ab86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab88:	7bfb      	ldrb	r3, [r7, #15]
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	f000 f8ca 	bl	800ad24 <USBD_Get_USB_Status>
 800ab90:	4603      	mov	r3, r0
 800ab92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab94:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}

0800ab9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b084      	sub	sp, #16
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
 800aba6:	460b      	mov	r3, r1
 800aba8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abaa:	2300      	movs	r3, #0
 800abac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abae:	2300      	movs	r3, #0
 800abb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800abb8:	78fa      	ldrb	r2, [r7, #3]
 800abba:	4611      	mov	r1, r2
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7fa fc99 	bl	80054f4 <HAL_PCD_EP_ClrStall>
 800abc2:	4603      	mov	r3, r0
 800abc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abc6:	7bfb      	ldrb	r3, [r7, #15]
 800abc8:	4618      	mov	r0, r3
 800abca:	f000 f8ab 	bl	800ad24 <USBD_Get_USB_Status>
 800abce:	4603      	mov	r3, r0
 800abd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3710      	adds	r7, #16
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abdc:	b480      	push	{r7}
 800abde:	b085      	sub	sp, #20
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	460b      	mov	r3, r1
 800abe6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800abee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800abf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	da0b      	bge.n	800ac10 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800abf8:	78fb      	ldrb	r3, [r7, #3]
 800abfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800abfe:	68f9      	ldr	r1, [r7, #12]
 800ac00:	4613      	mov	r3, r2
 800ac02:	00db      	lsls	r3, r3, #3
 800ac04:	4413      	add	r3, r2
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	440b      	add	r3, r1
 800ac0a:	333e      	adds	r3, #62	@ 0x3e
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	e00b      	b.n	800ac28 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ac10:	78fb      	ldrb	r3, [r7, #3]
 800ac12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ac16:	68f9      	ldr	r1, [r7, #12]
 800ac18:	4613      	mov	r3, r2
 800ac1a:	00db      	lsls	r3, r3, #3
 800ac1c:	4413      	add	r3, r2
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	440b      	add	r3, r1
 800ac22:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800ac26:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3714      	adds	r7, #20
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bc80      	pop	{r7}
 800ac30:	4770      	bx	lr

0800ac32 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b084      	sub	sp, #16
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	6078      	str	r0, [r7, #4]
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac42:	2300      	movs	r3, #0
 800ac44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ac4c:	78fa      	ldrb	r2, [r7, #3]
 800ac4e:	4611      	mov	r1, r2
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7fa fa86 	bl	8005162 <HAL_PCD_SetAddress>
 800ac56:	4603      	mov	r3, r0
 800ac58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac5a:	7bfb      	ldrb	r3, [r7, #15]
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f000 f861 	bl	800ad24 <USBD_Get_USB_Status>
 800ac62:	4603      	mov	r3, r0
 800ac64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac66:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3710      	adds	r7, #16
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b086      	sub	sp, #24
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	607a      	str	r2, [r7, #4]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	72fb      	strb	r3, [r7, #11]
 800ac80:	4613      	mov	r3, r2
 800ac82:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac84:	2300      	movs	r3, #0
 800ac86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800ac92:	893b      	ldrh	r3, [r7, #8]
 800ac94:	7af9      	ldrb	r1, [r7, #11]
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	f7fa fb8d 	bl	80053b6 <HAL_PCD_EP_Transmit>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aca0:	7dfb      	ldrb	r3, [r7, #23]
 800aca2:	4618      	mov	r0, r3
 800aca4:	f000 f83e 	bl	800ad24 <USBD_Get_USB_Status>
 800aca8:	4603      	mov	r3, r0
 800acaa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800acac:	7dbb      	ldrb	r3, [r7, #22]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3718      	adds	r7, #24
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b086      	sub	sp, #24
 800acba:	af00      	add	r7, sp, #0
 800acbc:	60f8      	str	r0, [r7, #12]
 800acbe:	607a      	str	r2, [r7, #4]
 800acc0:	461a      	mov	r2, r3
 800acc2:	460b      	mov	r3, r1
 800acc4:	72fb      	strb	r3, [r7, #11]
 800acc6:	4613      	mov	r3, r2
 800acc8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acca:	2300      	movs	r3, #0
 800accc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acce:	2300      	movs	r3, #0
 800acd0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800acd8:	893b      	ldrh	r3, [r7, #8]
 800acda:	7af9      	ldrb	r1, [r7, #11]
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	f7fa fb17 	bl	8005310 <HAL_PCD_EP_Receive>
 800ace2:	4603      	mov	r3, r0
 800ace4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ace6:	7dfb      	ldrb	r3, [r7, #23]
 800ace8:	4618      	mov	r0, r3
 800acea:	f000 f81b 	bl	800ad24 <USBD_Get_USB_Status>
 800acee:	4603      	mov	r3, r0
 800acf0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800acf2:	7dbb      	ldrb	r3, [r7, #22]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3718      	adds	r7, #24
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	460b      	mov	r3, r1
 800ad06:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ad0e:	78fa      	ldrb	r2, [r7, #3]
 800ad10:	4611      	mov	r1, r2
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7fa fb38 	bl	8005388 <HAL_PCD_EP_GetRxCount>
 800ad18:	4603      	mov	r3, r0
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3708      	adds	r7, #8
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
	...

0800ad24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b085      	sub	sp, #20
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ad32:	79fb      	ldrb	r3, [r7, #7]
 800ad34:	2b03      	cmp	r3, #3
 800ad36:	d817      	bhi.n	800ad68 <USBD_Get_USB_Status+0x44>
 800ad38:	a201      	add	r2, pc, #4	@ (adr r2, 800ad40 <USBD_Get_USB_Status+0x1c>)
 800ad3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad3e:	bf00      	nop
 800ad40:	0800ad51 	.word	0x0800ad51
 800ad44:	0800ad57 	.word	0x0800ad57
 800ad48:	0800ad5d 	.word	0x0800ad5d
 800ad4c:	0800ad63 	.word	0x0800ad63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ad50:	2300      	movs	r3, #0
 800ad52:	73fb      	strb	r3, [r7, #15]
    break;
 800ad54:	e00b      	b.n	800ad6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ad56:	2302      	movs	r3, #2
 800ad58:	73fb      	strb	r3, [r7, #15]
    break;
 800ad5a:	e008      	b.n	800ad6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad60:	e005      	b.n	800ad6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ad62:	2302      	movs	r3, #2
 800ad64:	73fb      	strb	r3, [r7, #15]
    break;
 800ad66:	e002      	b.n	800ad6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ad68:	2302      	movs	r3, #2
 800ad6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ad6c:	bf00      	nop
  }
  return usb_status;
 800ad6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3714      	adds	r7, #20
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bc80      	pop	{r7}
 800ad78:	4770      	bx	lr
 800ad7a:	bf00      	nop

0800ad7c <malloc>:
 800ad7c:	4b02      	ldr	r3, [pc, #8]	@ (800ad88 <malloc+0xc>)
 800ad7e:	4601      	mov	r1, r0
 800ad80:	6818      	ldr	r0, [r3, #0]
 800ad82:	f000 b82d 	b.w	800ade0 <_malloc_r>
 800ad86:	bf00      	nop
 800ad88:	200001bc 	.word	0x200001bc

0800ad8c <free>:
 800ad8c:	4b02      	ldr	r3, [pc, #8]	@ (800ad98 <free+0xc>)
 800ad8e:	4601      	mov	r1, r0
 800ad90:	6818      	ldr	r0, [r3, #0]
 800ad92:	f001 bd01 	b.w	800c798 <_free_r>
 800ad96:	bf00      	nop
 800ad98:	200001bc 	.word	0x200001bc

0800ad9c <sbrk_aligned>:
 800ad9c:	b570      	push	{r4, r5, r6, lr}
 800ad9e:	4e0f      	ldr	r6, [pc, #60]	@ (800addc <sbrk_aligned+0x40>)
 800ada0:	460c      	mov	r4, r1
 800ada2:	6831      	ldr	r1, [r6, #0]
 800ada4:	4605      	mov	r5, r0
 800ada6:	b911      	cbnz	r1, 800adae <sbrk_aligned+0x12>
 800ada8:	f000 fe48 	bl	800ba3c <_sbrk_r>
 800adac:	6030      	str	r0, [r6, #0]
 800adae:	4621      	mov	r1, r4
 800adb0:	4628      	mov	r0, r5
 800adb2:	f000 fe43 	bl	800ba3c <_sbrk_r>
 800adb6:	1c43      	adds	r3, r0, #1
 800adb8:	d103      	bne.n	800adc2 <sbrk_aligned+0x26>
 800adba:	f04f 34ff 	mov.w	r4, #4294967295
 800adbe:	4620      	mov	r0, r4
 800adc0:	bd70      	pop	{r4, r5, r6, pc}
 800adc2:	1cc4      	adds	r4, r0, #3
 800adc4:	f024 0403 	bic.w	r4, r4, #3
 800adc8:	42a0      	cmp	r0, r4
 800adca:	d0f8      	beq.n	800adbe <sbrk_aligned+0x22>
 800adcc:	1a21      	subs	r1, r4, r0
 800adce:	4628      	mov	r0, r5
 800add0:	f000 fe34 	bl	800ba3c <_sbrk_r>
 800add4:	3001      	adds	r0, #1
 800add6:	d1f2      	bne.n	800adbe <sbrk_aligned+0x22>
 800add8:	e7ef      	b.n	800adba <sbrk_aligned+0x1e>
 800adda:	bf00      	nop
 800addc:	200017b8 	.word	0x200017b8

0800ade0 <_malloc_r>:
 800ade0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ade4:	1ccd      	adds	r5, r1, #3
 800ade6:	f025 0503 	bic.w	r5, r5, #3
 800adea:	3508      	adds	r5, #8
 800adec:	2d0c      	cmp	r5, #12
 800adee:	bf38      	it	cc
 800adf0:	250c      	movcc	r5, #12
 800adf2:	2d00      	cmp	r5, #0
 800adf4:	4606      	mov	r6, r0
 800adf6:	db01      	blt.n	800adfc <_malloc_r+0x1c>
 800adf8:	42a9      	cmp	r1, r5
 800adfa:	d904      	bls.n	800ae06 <_malloc_r+0x26>
 800adfc:	230c      	movs	r3, #12
 800adfe:	6033      	str	r3, [r6, #0]
 800ae00:	2000      	movs	r0, #0
 800ae02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aedc <_malloc_r+0xfc>
 800ae0a:	f000 f869 	bl	800aee0 <__malloc_lock>
 800ae0e:	f8d8 3000 	ldr.w	r3, [r8]
 800ae12:	461c      	mov	r4, r3
 800ae14:	bb44      	cbnz	r4, 800ae68 <_malloc_r+0x88>
 800ae16:	4629      	mov	r1, r5
 800ae18:	4630      	mov	r0, r6
 800ae1a:	f7ff ffbf 	bl	800ad9c <sbrk_aligned>
 800ae1e:	1c43      	adds	r3, r0, #1
 800ae20:	4604      	mov	r4, r0
 800ae22:	d158      	bne.n	800aed6 <_malloc_r+0xf6>
 800ae24:	f8d8 4000 	ldr.w	r4, [r8]
 800ae28:	4627      	mov	r7, r4
 800ae2a:	2f00      	cmp	r7, #0
 800ae2c:	d143      	bne.n	800aeb6 <_malloc_r+0xd6>
 800ae2e:	2c00      	cmp	r4, #0
 800ae30:	d04b      	beq.n	800aeca <_malloc_r+0xea>
 800ae32:	6823      	ldr	r3, [r4, #0]
 800ae34:	4639      	mov	r1, r7
 800ae36:	4630      	mov	r0, r6
 800ae38:	eb04 0903 	add.w	r9, r4, r3
 800ae3c:	f000 fdfe 	bl	800ba3c <_sbrk_r>
 800ae40:	4581      	cmp	r9, r0
 800ae42:	d142      	bne.n	800aeca <_malloc_r+0xea>
 800ae44:	6821      	ldr	r1, [r4, #0]
 800ae46:	4630      	mov	r0, r6
 800ae48:	1a6d      	subs	r5, r5, r1
 800ae4a:	4629      	mov	r1, r5
 800ae4c:	f7ff ffa6 	bl	800ad9c <sbrk_aligned>
 800ae50:	3001      	adds	r0, #1
 800ae52:	d03a      	beq.n	800aeca <_malloc_r+0xea>
 800ae54:	6823      	ldr	r3, [r4, #0]
 800ae56:	442b      	add	r3, r5
 800ae58:	6023      	str	r3, [r4, #0]
 800ae5a:	f8d8 3000 	ldr.w	r3, [r8]
 800ae5e:	685a      	ldr	r2, [r3, #4]
 800ae60:	bb62      	cbnz	r2, 800aebc <_malloc_r+0xdc>
 800ae62:	f8c8 7000 	str.w	r7, [r8]
 800ae66:	e00f      	b.n	800ae88 <_malloc_r+0xa8>
 800ae68:	6822      	ldr	r2, [r4, #0]
 800ae6a:	1b52      	subs	r2, r2, r5
 800ae6c:	d420      	bmi.n	800aeb0 <_malloc_r+0xd0>
 800ae6e:	2a0b      	cmp	r2, #11
 800ae70:	d917      	bls.n	800aea2 <_malloc_r+0xc2>
 800ae72:	1961      	adds	r1, r4, r5
 800ae74:	42a3      	cmp	r3, r4
 800ae76:	6025      	str	r5, [r4, #0]
 800ae78:	bf18      	it	ne
 800ae7a:	6059      	strne	r1, [r3, #4]
 800ae7c:	6863      	ldr	r3, [r4, #4]
 800ae7e:	bf08      	it	eq
 800ae80:	f8c8 1000 	streq.w	r1, [r8]
 800ae84:	5162      	str	r2, [r4, r5]
 800ae86:	604b      	str	r3, [r1, #4]
 800ae88:	4630      	mov	r0, r6
 800ae8a:	f000 f82f 	bl	800aeec <__malloc_unlock>
 800ae8e:	f104 000b 	add.w	r0, r4, #11
 800ae92:	1d23      	adds	r3, r4, #4
 800ae94:	f020 0007 	bic.w	r0, r0, #7
 800ae98:	1ac2      	subs	r2, r0, r3
 800ae9a:	bf1c      	itt	ne
 800ae9c:	1a1b      	subne	r3, r3, r0
 800ae9e:	50a3      	strne	r3, [r4, r2]
 800aea0:	e7af      	b.n	800ae02 <_malloc_r+0x22>
 800aea2:	6862      	ldr	r2, [r4, #4]
 800aea4:	42a3      	cmp	r3, r4
 800aea6:	bf0c      	ite	eq
 800aea8:	f8c8 2000 	streq.w	r2, [r8]
 800aeac:	605a      	strne	r2, [r3, #4]
 800aeae:	e7eb      	b.n	800ae88 <_malloc_r+0xa8>
 800aeb0:	4623      	mov	r3, r4
 800aeb2:	6864      	ldr	r4, [r4, #4]
 800aeb4:	e7ae      	b.n	800ae14 <_malloc_r+0x34>
 800aeb6:	463c      	mov	r4, r7
 800aeb8:	687f      	ldr	r7, [r7, #4]
 800aeba:	e7b6      	b.n	800ae2a <_malloc_r+0x4a>
 800aebc:	461a      	mov	r2, r3
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	42a3      	cmp	r3, r4
 800aec2:	d1fb      	bne.n	800aebc <_malloc_r+0xdc>
 800aec4:	2300      	movs	r3, #0
 800aec6:	6053      	str	r3, [r2, #4]
 800aec8:	e7de      	b.n	800ae88 <_malloc_r+0xa8>
 800aeca:	230c      	movs	r3, #12
 800aecc:	4630      	mov	r0, r6
 800aece:	6033      	str	r3, [r6, #0]
 800aed0:	f000 f80c 	bl	800aeec <__malloc_unlock>
 800aed4:	e794      	b.n	800ae00 <_malloc_r+0x20>
 800aed6:	6005      	str	r5, [r0, #0]
 800aed8:	e7d6      	b.n	800ae88 <_malloc_r+0xa8>
 800aeda:	bf00      	nop
 800aedc:	200017bc 	.word	0x200017bc

0800aee0 <__malloc_lock>:
 800aee0:	4801      	ldr	r0, [pc, #4]	@ (800aee8 <__malloc_lock+0x8>)
 800aee2:	f000 bdf8 	b.w	800bad6 <__retarget_lock_acquire_recursive>
 800aee6:	bf00      	nop
 800aee8:	20001900 	.word	0x20001900

0800aeec <__malloc_unlock>:
 800aeec:	4801      	ldr	r0, [pc, #4]	@ (800aef4 <__malloc_unlock+0x8>)
 800aeee:	f000 bdf3 	b.w	800bad8 <__retarget_lock_release_recursive>
 800aef2:	bf00      	nop
 800aef4:	20001900 	.word	0x20001900

0800aef8 <__cvt>:
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aefe:	461d      	mov	r5, r3
 800af00:	bfbb      	ittet	lt
 800af02:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800af06:	461d      	movlt	r5, r3
 800af08:	2300      	movge	r3, #0
 800af0a:	232d      	movlt	r3, #45	@ 0x2d
 800af0c:	b088      	sub	sp, #32
 800af0e:	4614      	mov	r4, r2
 800af10:	bfb8      	it	lt
 800af12:	4614      	movlt	r4, r2
 800af14:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800af16:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800af18:	7013      	strb	r3, [r2, #0]
 800af1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800af1c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800af20:	f023 0820 	bic.w	r8, r3, #32
 800af24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800af28:	d005      	beq.n	800af36 <__cvt+0x3e>
 800af2a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800af2e:	d100      	bne.n	800af32 <__cvt+0x3a>
 800af30:	3601      	adds	r6, #1
 800af32:	2302      	movs	r3, #2
 800af34:	e000      	b.n	800af38 <__cvt+0x40>
 800af36:	2303      	movs	r3, #3
 800af38:	aa07      	add	r2, sp, #28
 800af3a:	9204      	str	r2, [sp, #16]
 800af3c:	aa06      	add	r2, sp, #24
 800af3e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800af42:	e9cd 3600 	strd	r3, r6, [sp]
 800af46:	4622      	mov	r2, r4
 800af48:	462b      	mov	r3, r5
 800af4a:	f000 fe5d 	bl	800bc08 <_dtoa_r>
 800af4e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800af52:	4607      	mov	r7, r0
 800af54:	d119      	bne.n	800af8a <__cvt+0x92>
 800af56:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800af58:	07db      	lsls	r3, r3, #31
 800af5a:	d50e      	bpl.n	800af7a <__cvt+0x82>
 800af5c:	eb00 0906 	add.w	r9, r0, r6
 800af60:	2200      	movs	r2, #0
 800af62:	2300      	movs	r3, #0
 800af64:	4620      	mov	r0, r4
 800af66:	4629      	mov	r1, r5
 800af68:	f7f5 fd5a 	bl	8000a20 <__aeabi_dcmpeq>
 800af6c:	b108      	cbz	r0, 800af72 <__cvt+0x7a>
 800af6e:	f8cd 901c 	str.w	r9, [sp, #28]
 800af72:	2230      	movs	r2, #48	@ 0x30
 800af74:	9b07      	ldr	r3, [sp, #28]
 800af76:	454b      	cmp	r3, r9
 800af78:	d31e      	bcc.n	800afb8 <__cvt+0xc0>
 800af7a:	4638      	mov	r0, r7
 800af7c:	9b07      	ldr	r3, [sp, #28]
 800af7e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800af80:	1bdb      	subs	r3, r3, r7
 800af82:	6013      	str	r3, [r2, #0]
 800af84:	b008      	add	sp, #32
 800af86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af8a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800af8e:	eb00 0906 	add.w	r9, r0, r6
 800af92:	d1e5      	bne.n	800af60 <__cvt+0x68>
 800af94:	7803      	ldrb	r3, [r0, #0]
 800af96:	2b30      	cmp	r3, #48	@ 0x30
 800af98:	d10a      	bne.n	800afb0 <__cvt+0xb8>
 800af9a:	2200      	movs	r2, #0
 800af9c:	2300      	movs	r3, #0
 800af9e:	4620      	mov	r0, r4
 800afa0:	4629      	mov	r1, r5
 800afa2:	f7f5 fd3d 	bl	8000a20 <__aeabi_dcmpeq>
 800afa6:	b918      	cbnz	r0, 800afb0 <__cvt+0xb8>
 800afa8:	f1c6 0601 	rsb	r6, r6, #1
 800afac:	f8ca 6000 	str.w	r6, [sl]
 800afb0:	f8da 3000 	ldr.w	r3, [sl]
 800afb4:	4499      	add	r9, r3
 800afb6:	e7d3      	b.n	800af60 <__cvt+0x68>
 800afb8:	1c59      	adds	r1, r3, #1
 800afba:	9107      	str	r1, [sp, #28]
 800afbc:	701a      	strb	r2, [r3, #0]
 800afbe:	e7d9      	b.n	800af74 <__cvt+0x7c>

0800afc0 <__exponent>:
 800afc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afc2:	2900      	cmp	r1, #0
 800afc4:	bfb6      	itet	lt
 800afc6:	232d      	movlt	r3, #45	@ 0x2d
 800afc8:	232b      	movge	r3, #43	@ 0x2b
 800afca:	4249      	neglt	r1, r1
 800afcc:	2909      	cmp	r1, #9
 800afce:	7002      	strb	r2, [r0, #0]
 800afd0:	7043      	strb	r3, [r0, #1]
 800afd2:	dd29      	ble.n	800b028 <__exponent+0x68>
 800afd4:	f10d 0307 	add.w	r3, sp, #7
 800afd8:	461d      	mov	r5, r3
 800afda:	270a      	movs	r7, #10
 800afdc:	fbb1 f6f7 	udiv	r6, r1, r7
 800afe0:	461a      	mov	r2, r3
 800afe2:	fb07 1416 	mls	r4, r7, r6, r1
 800afe6:	3430      	adds	r4, #48	@ 0x30
 800afe8:	f802 4c01 	strb.w	r4, [r2, #-1]
 800afec:	460c      	mov	r4, r1
 800afee:	2c63      	cmp	r4, #99	@ 0x63
 800aff0:	4631      	mov	r1, r6
 800aff2:	f103 33ff 	add.w	r3, r3, #4294967295
 800aff6:	dcf1      	bgt.n	800afdc <__exponent+0x1c>
 800aff8:	3130      	adds	r1, #48	@ 0x30
 800affa:	1e94      	subs	r4, r2, #2
 800affc:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b000:	4623      	mov	r3, r4
 800b002:	1c41      	adds	r1, r0, #1
 800b004:	42ab      	cmp	r3, r5
 800b006:	d30a      	bcc.n	800b01e <__exponent+0x5e>
 800b008:	f10d 0309 	add.w	r3, sp, #9
 800b00c:	1a9b      	subs	r3, r3, r2
 800b00e:	42ac      	cmp	r4, r5
 800b010:	bf88      	it	hi
 800b012:	2300      	movhi	r3, #0
 800b014:	3302      	adds	r3, #2
 800b016:	4403      	add	r3, r0
 800b018:	1a18      	subs	r0, r3, r0
 800b01a:	b003      	add	sp, #12
 800b01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b01e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b022:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b026:	e7ed      	b.n	800b004 <__exponent+0x44>
 800b028:	2330      	movs	r3, #48	@ 0x30
 800b02a:	3130      	adds	r1, #48	@ 0x30
 800b02c:	7083      	strb	r3, [r0, #2]
 800b02e:	70c1      	strb	r1, [r0, #3]
 800b030:	1d03      	adds	r3, r0, #4
 800b032:	e7f1      	b.n	800b018 <__exponent+0x58>

0800b034 <_printf_float>:
 800b034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b038:	b091      	sub	sp, #68	@ 0x44
 800b03a:	460c      	mov	r4, r1
 800b03c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b040:	4616      	mov	r6, r2
 800b042:	461f      	mov	r7, r3
 800b044:	4605      	mov	r5, r0
 800b046:	f000 fcc1 	bl	800b9cc <_localeconv_r>
 800b04a:	6803      	ldr	r3, [r0, #0]
 800b04c:	4618      	mov	r0, r3
 800b04e:	9308      	str	r3, [sp, #32]
 800b050:	f7f5 f8ba 	bl	80001c8 <strlen>
 800b054:	2300      	movs	r3, #0
 800b056:	930e      	str	r3, [sp, #56]	@ 0x38
 800b058:	f8d8 3000 	ldr.w	r3, [r8]
 800b05c:	9009      	str	r0, [sp, #36]	@ 0x24
 800b05e:	3307      	adds	r3, #7
 800b060:	f023 0307 	bic.w	r3, r3, #7
 800b064:	f103 0208 	add.w	r2, r3, #8
 800b068:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b06c:	f8d4 b000 	ldr.w	fp, [r4]
 800b070:	f8c8 2000 	str.w	r2, [r8]
 800b074:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b078:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b07c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b07e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b082:	f04f 32ff 	mov.w	r2, #4294967295
 800b086:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b08a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b08e:	4b9c      	ldr	r3, [pc, #624]	@ (800b300 <_printf_float+0x2cc>)
 800b090:	f7f5 fcf8 	bl	8000a84 <__aeabi_dcmpun>
 800b094:	bb70      	cbnz	r0, 800b0f4 <_printf_float+0xc0>
 800b096:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b09a:	f04f 32ff 	mov.w	r2, #4294967295
 800b09e:	4b98      	ldr	r3, [pc, #608]	@ (800b300 <_printf_float+0x2cc>)
 800b0a0:	f7f5 fcd2 	bl	8000a48 <__aeabi_dcmple>
 800b0a4:	bb30      	cbnz	r0, 800b0f4 <_printf_float+0xc0>
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	4640      	mov	r0, r8
 800b0ac:	4649      	mov	r1, r9
 800b0ae:	f7f5 fcc1 	bl	8000a34 <__aeabi_dcmplt>
 800b0b2:	b110      	cbz	r0, 800b0ba <_printf_float+0x86>
 800b0b4:	232d      	movs	r3, #45	@ 0x2d
 800b0b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0ba:	4a92      	ldr	r2, [pc, #584]	@ (800b304 <_printf_float+0x2d0>)
 800b0bc:	4b92      	ldr	r3, [pc, #584]	@ (800b308 <_printf_float+0x2d4>)
 800b0be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b0c2:	bf94      	ite	ls
 800b0c4:	4690      	movls	r8, r2
 800b0c6:	4698      	movhi	r8, r3
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	f04f 0900 	mov.w	r9, #0
 800b0ce:	6123      	str	r3, [r4, #16]
 800b0d0:	f02b 0304 	bic.w	r3, fp, #4
 800b0d4:	6023      	str	r3, [r4, #0]
 800b0d6:	4633      	mov	r3, r6
 800b0d8:	4621      	mov	r1, r4
 800b0da:	4628      	mov	r0, r5
 800b0dc:	9700      	str	r7, [sp, #0]
 800b0de:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b0e0:	f000 f9d4 	bl	800b48c <_printf_common>
 800b0e4:	3001      	adds	r0, #1
 800b0e6:	f040 8090 	bne.w	800b20a <_printf_float+0x1d6>
 800b0ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ee:	b011      	add	sp, #68	@ 0x44
 800b0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0f4:	4642      	mov	r2, r8
 800b0f6:	464b      	mov	r3, r9
 800b0f8:	4640      	mov	r0, r8
 800b0fa:	4649      	mov	r1, r9
 800b0fc:	f7f5 fcc2 	bl	8000a84 <__aeabi_dcmpun>
 800b100:	b148      	cbz	r0, 800b116 <_printf_float+0xe2>
 800b102:	464b      	mov	r3, r9
 800b104:	2b00      	cmp	r3, #0
 800b106:	bfb8      	it	lt
 800b108:	232d      	movlt	r3, #45	@ 0x2d
 800b10a:	4a80      	ldr	r2, [pc, #512]	@ (800b30c <_printf_float+0x2d8>)
 800b10c:	bfb8      	it	lt
 800b10e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b112:	4b7f      	ldr	r3, [pc, #508]	@ (800b310 <_printf_float+0x2dc>)
 800b114:	e7d3      	b.n	800b0be <_printf_float+0x8a>
 800b116:	6863      	ldr	r3, [r4, #4]
 800b118:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800b11c:	1c5a      	adds	r2, r3, #1
 800b11e:	d13f      	bne.n	800b1a0 <_printf_float+0x16c>
 800b120:	2306      	movs	r3, #6
 800b122:	6063      	str	r3, [r4, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800b12a:	6023      	str	r3, [r4, #0]
 800b12c:	9206      	str	r2, [sp, #24]
 800b12e:	aa0e      	add	r2, sp, #56	@ 0x38
 800b130:	e9cd a204 	strd	sl, r2, [sp, #16]
 800b134:	aa0d      	add	r2, sp, #52	@ 0x34
 800b136:	9203      	str	r2, [sp, #12]
 800b138:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800b13c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b140:	6863      	ldr	r3, [r4, #4]
 800b142:	4642      	mov	r2, r8
 800b144:	9300      	str	r3, [sp, #0]
 800b146:	4628      	mov	r0, r5
 800b148:	464b      	mov	r3, r9
 800b14a:	910a      	str	r1, [sp, #40]	@ 0x28
 800b14c:	f7ff fed4 	bl	800aef8 <__cvt>
 800b150:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b152:	4680      	mov	r8, r0
 800b154:	2947      	cmp	r1, #71	@ 0x47
 800b156:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b158:	d128      	bne.n	800b1ac <_printf_float+0x178>
 800b15a:	1cc8      	adds	r0, r1, #3
 800b15c:	db02      	blt.n	800b164 <_printf_float+0x130>
 800b15e:	6863      	ldr	r3, [r4, #4]
 800b160:	4299      	cmp	r1, r3
 800b162:	dd40      	ble.n	800b1e6 <_printf_float+0x1b2>
 800b164:	f1aa 0a02 	sub.w	sl, sl, #2
 800b168:	fa5f fa8a 	uxtb.w	sl, sl
 800b16c:	4652      	mov	r2, sl
 800b16e:	3901      	subs	r1, #1
 800b170:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b174:	910d      	str	r1, [sp, #52]	@ 0x34
 800b176:	f7ff ff23 	bl	800afc0 <__exponent>
 800b17a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b17c:	4681      	mov	r9, r0
 800b17e:	1813      	adds	r3, r2, r0
 800b180:	2a01      	cmp	r2, #1
 800b182:	6123      	str	r3, [r4, #16]
 800b184:	dc02      	bgt.n	800b18c <_printf_float+0x158>
 800b186:	6822      	ldr	r2, [r4, #0]
 800b188:	07d2      	lsls	r2, r2, #31
 800b18a:	d501      	bpl.n	800b190 <_printf_float+0x15c>
 800b18c:	3301      	adds	r3, #1
 800b18e:	6123      	str	r3, [r4, #16]
 800b190:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b194:	2b00      	cmp	r3, #0
 800b196:	d09e      	beq.n	800b0d6 <_printf_float+0xa2>
 800b198:	232d      	movs	r3, #45	@ 0x2d
 800b19a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b19e:	e79a      	b.n	800b0d6 <_printf_float+0xa2>
 800b1a0:	2947      	cmp	r1, #71	@ 0x47
 800b1a2:	d1bf      	bne.n	800b124 <_printf_float+0xf0>
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d1bd      	bne.n	800b124 <_printf_float+0xf0>
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	e7ba      	b.n	800b122 <_printf_float+0xee>
 800b1ac:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b1b0:	d9dc      	bls.n	800b16c <_printf_float+0x138>
 800b1b2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b1b6:	d118      	bne.n	800b1ea <_printf_float+0x1b6>
 800b1b8:	2900      	cmp	r1, #0
 800b1ba:	6863      	ldr	r3, [r4, #4]
 800b1bc:	dd0b      	ble.n	800b1d6 <_printf_float+0x1a2>
 800b1be:	6121      	str	r1, [r4, #16]
 800b1c0:	b913      	cbnz	r3, 800b1c8 <_printf_float+0x194>
 800b1c2:	6822      	ldr	r2, [r4, #0]
 800b1c4:	07d0      	lsls	r0, r2, #31
 800b1c6:	d502      	bpl.n	800b1ce <_printf_float+0x19a>
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	440b      	add	r3, r1
 800b1cc:	6123      	str	r3, [r4, #16]
 800b1ce:	f04f 0900 	mov.w	r9, #0
 800b1d2:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b1d4:	e7dc      	b.n	800b190 <_printf_float+0x15c>
 800b1d6:	b913      	cbnz	r3, 800b1de <_printf_float+0x1aa>
 800b1d8:	6822      	ldr	r2, [r4, #0]
 800b1da:	07d2      	lsls	r2, r2, #31
 800b1dc:	d501      	bpl.n	800b1e2 <_printf_float+0x1ae>
 800b1de:	3302      	adds	r3, #2
 800b1e0:	e7f4      	b.n	800b1cc <_printf_float+0x198>
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e7f2      	b.n	800b1cc <_printf_float+0x198>
 800b1e6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b1ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1ec:	4299      	cmp	r1, r3
 800b1ee:	db05      	blt.n	800b1fc <_printf_float+0x1c8>
 800b1f0:	6823      	ldr	r3, [r4, #0]
 800b1f2:	6121      	str	r1, [r4, #16]
 800b1f4:	07d8      	lsls	r0, r3, #31
 800b1f6:	d5ea      	bpl.n	800b1ce <_printf_float+0x19a>
 800b1f8:	1c4b      	adds	r3, r1, #1
 800b1fa:	e7e7      	b.n	800b1cc <_printf_float+0x198>
 800b1fc:	2900      	cmp	r1, #0
 800b1fe:	bfcc      	ite	gt
 800b200:	2201      	movgt	r2, #1
 800b202:	f1c1 0202 	rsble	r2, r1, #2
 800b206:	4413      	add	r3, r2
 800b208:	e7e0      	b.n	800b1cc <_printf_float+0x198>
 800b20a:	6823      	ldr	r3, [r4, #0]
 800b20c:	055a      	lsls	r2, r3, #21
 800b20e:	d407      	bmi.n	800b220 <_printf_float+0x1ec>
 800b210:	6923      	ldr	r3, [r4, #16]
 800b212:	4642      	mov	r2, r8
 800b214:	4631      	mov	r1, r6
 800b216:	4628      	mov	r0, r5
 800b218:	47b8      	blx	r7
 800b21a:	3001      	adds	r0, #1
 800b21c:	d12b      	bne.n	800b276 <_printf_float+0x242>
 800b21e:	e764      	b.n	800b0ea <_printf_float+0xb6>
 800b220:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b224:	f240 80dc 	bls.w	800b3e0 <_printf_float+0x3ac>
 800b228:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b22c:	2200      	movs	r2, #0
 800b22e:	2300      	movs	r3, #0
 800b230:	f7f5 fbf6 	bl	8000a20 <__aeabi_dcmpeq>
 800b234:	2800      	cmp	r0, #0
 800b236:	d033      	beq.n	800b2a0 <_printf_float+0x26c>
 800b238:	2301      	movs	r3, #1
 800b23a:	4631      	mov	r1, r6
 800b23c:	4628      	mov	r0, r5
 800b23e:	4a35      	ldr	r2, [pc, #212]	@ (800b314 <_printf_float+0x2e0>)
 800b240:	47b8      	blx	r7
 800b242:	3001      	adds	r0, #1
 800b244:	f43f af51 	beq.w	800b0ea <_printf_float+0xb6>
 800b248:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b24c:	4543      	cmp	r3, r8
 800b24e:	db02      	blt.n	800b256 <_printf_float+0x222>
 800b250:	6823      	ldr	r3, [r4, #0]
 800b252:	07d8      	lsls	r0, r3, #31
 800b254:	d50f      	bpl.n	800b276 <_printf_float+0x242>
 800b256:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b25a:	4631      	mov	r1, r6
 800b25c:	4628      	mov	r0, r5
 800b25e:	47b8      	blx	r7
 800b260:	3001      	adds	r0, #1
 800b262:	f43f af42 	beq.w	800b0ea <_printf_float+0xb6>
 800b266:	f04f 0900 	mov.w	r9, #0
 800b26a:	f108 38ff 	add.w	r8, r8, #4294967295
 800b26e:	f104 0a1a 	add.w	sl, r4, #26
 800b272:	45c8      	cmp	r8, r9
 800b274:	dc09      	bgt.n	800b28a <_printf_float+0x256>
 800b276:	6823      	ldr	r3, [r4, #0]
 800b278:	079b      	lsls	r3, r3, #30
 800b27a:	f100 8102 	bmi.w	800b482 <_printf_float+0x44e>
 800b27e:	68e0      	ldr	r0, [r4, #12]
 800b280:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b282:	4298      	cmp	r0, r3
 800b284:	bfb8      	it	lt
 800b286:	4618      	movlt	r0, r3
 800b288:	e731      	b.n	800b0ee <_printf_float+0xba>
 800b28a:	2301      	movs	r3, #1
 800b28c:	4652      	mov	r2, sl
 800b28e:	4631      	mov	r1, r6
 800b290:	4628      	mov	r0, r5
 800b292:	47b8      	blx	r7
 800b294:	3001      	adds	r0, #1
 800b296:	f43f af28 	beq.w	800b0ea <_printf_float+0xb6>
 800b29a:	f109 0901 	add.w	r9, r9, #1
 800b29e:	e7e8      	b.n	800b272 <_printf_float+0x23e>
 800b2a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	dc38      	bgt.n	800b318 <_printf_float+0x2e4>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	4631      	mov	r1, r6
 800b2aa:	4628      	mov	r0, r5
 800b2ac:	4a19      	ldr	r2, [pc, #100]	@ (800b314 <_printf_float+0x2e0>)
 800b2ae:	47b8      	blx	r7
 800b2b0:	3001      	adds	r0, #1
 800b2b2:	f43f af1a 	beq.w	800b0ea <_printf_float+0xb6>
 800b2b6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b2ba:	ea59 0303 	orrs.w	r3, r9, r3
 800b2be:	d102      	bne.n	800b2c6 <_printf_float+0x292>
 800b2c0:	6823      	ldr	r3, [r4, #0]
 800b2c2:	07d9      	lsls	r1, r3, #31
 800b2c4:	d5d7      	bpl.n	800b276 <_printf_float+0x242>
 800b2c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b2ca:	4631      	mov	r1, r6
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	47b8      	blx	r7
 800b2d0:	3001      	adds	r0, #1
 800b2d2:	f43f af0a 	beq.w	800b0ea <_printf_float+0xb6>
 800b2d6:	f04f 0a00 	mov.w	sl, #0
 800b2da:	f104 0b1a 	add.w	fp, r4, #26
 800b2de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b2e0:	425b      	negs	r3, r3
 800b2e2:	4553      	cmp	r3, sl
 800b2e4:	dc01      	bgt.n	800b2ea <_printf_float+0x2b6>
 800b2e6:	464b      	mov	r3, r9
 800b2e8:	e793      	b.n	800b212 <_printf_float+0x1de>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	465a      	mov	r2, fp
 800b2ee:	4631      	mov	r1, r6
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	47b8      	blx	r7
 800b2f4:	3001      	adds	r0, #1
 800b2f6:	f43f aef8 	beq.w	800b0ea <_printf_float+0xb6>
 800b2fa:	f10a 0a01 	add.w	sl, sl, #1
 800b2fe:	e7ee      	b.n	800b2de <_printf_float+0x2aa>
 800b300:	7fefffff 	.word	0x7fefffff
 800b304:	0800def4 	.word	0x0800def4
 800b308:	0800def8 	.word	0x0800def8
 800b30c:	0800defc 	.word	0x0800defc
 800b310:	0800df00 	.word	0x0800df00
 800b314:	0800df04 	.word	0x0800df04
 800b318:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b31a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b31e:	4553      	cmp	r3, sl
 800b320:	bfa8      	it	ge
 800b322:	4653      	movge	r3, sl
 800b324:	2b00      	cmp	r3, #0
 800b326:	4699      	mov	r9, r3
 800b328:	dc36      	bgt.n	800b398 <_printf_float+0x364>
 800b32a:	f04f 0b00 	mov.w	fp, #0
 800b32e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b332:	f104 021a 	add.w	r2, r4, #26
 800b336:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b338:	930a      	str	r3, [sp, #40]	@ 0x28
 800b33a:	eba3 0309 	sub.w	r3, r3, r9
 800b33e:	455b      	cmp	r3, fp
 800b340:	dc31      	bgt.n	800b3a6 <_printf_float+0x372>
 800b342:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b344:	459a      	cmp	sl, r3
 800b346:	dc3a      	bgt.n	800b3be <_printf_float+0x38a>
 800b348:	6823      	ldr	r3, [r4, #0]
 800b34a:	07da      	lsls	r2, r3, #31
 800b34c:	d437      	bmi.n	800b3be <_printf_float+0x38a>
 800b34e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b350:	ebaa 0903 	sub.w	r9, sl, r3
 800b354:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b356:	ebaa 0303 	sub.w	r3, sl, r3
 800b35a:	4599      	cmp	r9, r3
 800b35c:	bfa8      	it	ge
 800b35e:	4699      	movge	r9, r3
 800b360:	f1b9 0f00 	cmp.w	r9, #0
 800b364:	dc33      	bgt.n	800b3ce <_printf_float+0x39a>
 800b366:	f04f 0800 	mov.w	r8, #0
 800b36a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b36e:	f104 0b1a 	add.w	fp, r4, #26
 800b372:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b374:	ebaa 0303 	sub.w	r3, sl, r3
 800b378:	eba3 0309 	sub.w	r3, r3, r9
 800b37c:	4543      	cmp	r3, r8
 800b37e:	f77f af7a 	ble.w	800b276 <_printf_float+0x242>
 800b382:	2301      	movs	r3, #1
 800b384:	465a      	mov	r2, fp
 800b386:	4631      	mov	r1, r6
 800b388:	4628      	mov	r0, r5
 800b38a:	47b8      	blx	r7
 800b38c:	3001      	adds	r0, #1
 800b38e:	f43f aeac 	beq.w	800b0ea <_printf_float+0xb6>
 800b392:	f108 0801 	add.w	r8, r8, #1
 800b396:	e7ec      	b.n	800b372 <_printf_float+0x33e>
 800b398:	4642      	mov	r2, r8
 800b39a:	4631      	mov	r1, r6
 800b39c:	4628      	mov	r0, r5
 800b39e:	47b8      	blx	r7
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	d1c2      	bne.n	800b32a <_printf_float+0x2f6>
 800b3a4:	e6a1      	b.n	800b0ea <_printf_float+0xb6>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	4631      	mov	r1, r6
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	920a      	str	r2, [sp, #40]	@ 0x28
 800b3ae:	47b8      	blx	r7
 800b3b0:	3001      	adds	r0, #1
 800b3b2:	f43f ae9a 	beq.w	800b0ea <_printf_float+0xb6>
 800b3b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3b8:	f10b 0b01 	add.w	fp, fp, #1
 800b3bc:	e7bb      	b.n	800b336 <_printf_float+0x302>
 800b3be:	4631      	mov	r1, r6
 800b3c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	47b8      	blx	r7
 800b3c8:	3001      	adds	r0, #1
 800b3ca:	d1c0      	bne.n	800b34e <_printf_float+0x31a>
 800b3cc:	e68d      	b.n	800b0ea <_printf_float+0xb6>
 800b3ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3d0:	464b      	mov	r3, r9
 800b3d2:	4631      	mov	r1, r6
 800b3d4:	4628      	mov	r0, r5
 800b3d6:	4442      	add	r2, r8
 800b3d8:	47b8      	blx	r7
 800b3da:	3001      	adds	r0, #1
 800b3dc:	d1c3      	bne.n	800b366 <_printf_float+0x332>
 800b3de:	e684      	b.n	800b0ea <_printf_float+0xb6>
 800b3e0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b3e4:	f1ba 0f01 	cmp.w	sl, #1
 800b3e8:	dc01      	bgt.n	800b3ee <_printf_float+0x3ba>
 800b3ea:	07db      	lsls	r3, r3, #31
 800b3ec:	d536      	bpl.n	800b45c <_printf_float+0x428>
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	4642      	mov	r2, r8
 800b3f2:	4631      	mov	r1, r6
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	47b8      	blx	r7
 800b3f8:	3001      	adds	r0, #1
 800b3fa:	f43f ae76 	beq.w	800b0ea <_printf_float+0xb6>
 800b3fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b402:	4631      	mov	r1, r6
 800b404:	4628      	mov	r0, r5
 800b406:	47b8      	blx	r7
 800b408:	3001      	adds	r0, #1
 800b40a:	f43f ae6e 	beq.w	800b0ea <_printf_float+0xb6>
 800b40e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b412:	2200      	movs	r2, #0
 800b414:	2300      	movs	r3, #0
 800b416:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b41a:	f7f5 fb01 	bl	8000a20 <__aeabi_dcmpeq>
 800b41e:	b9c0      	cbnz	r0, 800b452 <_printf_float+0x41e>
 800b420:	4653      	mov	r3, sl
 800b422:	f108 0201 	add.w	r2, r8, #1
 800b426:	4631      	mov	r1, r6
 800b428:	4628      	mov	r0, r5
 800b42a:	47b8      	blx	r7
 800b42c:	3001      	adds	r0, #1
 800b42e:	d10c      	bne.n	800b44a <_printf_float+0x416>
 800b430:	e65b      	b.n	800b0ea <_printf_float+0xb6>
 800b432:	2301      	movs	r3, #1
 800b434:	465a      	mov	r2, fp
 800b436:	4631      	mov	r1, r6
 800b438:	4628      	mov	r0, r5
 800b43a:	47b8      	blx	r7
 800b43c:	3001      	adds	r0, #1
 800b43e:	f43f ae54 	beq.w	800b0ea <_printf_float+0xb6>
 800b442:	f108 0801 	add.w	r8, r8, #1
 800b446:	45d0      	cmp	r8, sl
 800b448:	dbf3      	blt.n	800b432 <_printf_float+0x3fe>
 800b44a:	464b      	mov	r3, r9
 800b44c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b450:	e6e0      	b.n	800b214 <_printf_float+0x1e0>
 800b452:	f04f 0800 	mov.w	r8, #0
 800b456:	f104 0b1a 	add.w	fp, r4, #26
 800b45a:	e7f4      	b.n	800b446 <_printf_float+0x412>
 800b45c:	2301      	movs	r3, #1
 800b45e:	4642      	mov	r2, r8
 800b460:	e7e1      	b.n	800b426 <_printf_float+0x3f2>
 800b462:	2301      	movs	r3, #1
 800b464:	464a      	mov	r2, r9
 800b466:	4631      	mov	r1, r6
 800b468:	4628      	mov	r0, r5
 800b46a:	47b8      	blx	r7
 800b46c:	3001      	adds	r0, #1
 800b46e:	f43f ae3c 	beq.w	800b0ea <_printf_float+0xb6>
 800b472:	f108 0801 	add.w	r8, r8, #1
 800b476:	68e3      	ldr	r3, [r4, #12]
 800b478:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b47a:	1a5b      	subs	r3, r3, r1
 800b47c:	4543      	cmp	r3, r8
 800b47e:	dcf0      	bgt.n	800b462 <_printf_float+0x42e>
 800b480:	e6fd      	b.n	800b27e <_printf_float+0x24a>
 800b482:	f04f 0800 	mov.w	r8, #0
 800b486:	f104 0919 	add.w	r9, r4, #25
 800b48a:	e7f4      	b.n	800b476 <_printf_float+0x442>

0800b48c <_printf_common>:
 800b48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b490:	4616      	mov	r6, r2
 800b492:	4698      	mov	r8, r3
 800b494:	688a      	ldr	r2, [r1, #8]
 800b496:	690b      	ldr	r3, [r1, #16]
 800b498:	4607      	mov	r7, r0
 800b49a:	4293      	cmp	r3, r2
 800b49c:	bfb8      	it	lt
 800b49e:	4613      	movlt	r3, r2
 800b4a0:	6033      	str	r3, [r6, #0]
 800b4a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b4a6:	460c      	mov	r4, r1
 800b4a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b4ac:	b10a      	cbz	r2, 800b4b2 <_printf_common+0x26>
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	6033      	str	r3, [r6, #0]
 800b4b2:	6823      	ldr	r3, [r4, #0]
 800b4b4:	0699      	lsls	r1, r3, #26
 800b4b6:	bf42      	ittt	mi
 800b4b8:	6833      	ldrmi	r3, [r6, #0]
 800b4ba:	3302      	addmi	r3, #2
 800b4bc:	6033      	strmi	r3, [r6, #0]
 800b4be:	6825      	ldr	r5, [r4, #0]
 800b4c0:	f015 0506 	ands.w	r5, r5, #6
 800b4c4:	d106      	bne.n	800b4d4 <_printf_common+0x48>
 800b4c6:	f104 0a19 	add.w	sl, r4, #25
 800b4ca:	68e3      	ldr	r3, [r4, #12]
 800b4cc:	6832      	ldr	r2, [r6, #0]
 800b4ce:	1a9b      	subs	r3, r3, r2
 800b4d0:	42ab      	cmp	r3, r5
 800b4d2:	dc2b      	bgt.n	800b52c <_printf_common+0xa0>
 800b4d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b4d8:	6822      	ldr	r2, [r4, #0]
 800b4da:	3b00      	subs	r3, #0
 800b4dc:	bf18      	it	ne
 800b4de:	2301      	movne	r3, #1
 800b4e0:	0692      	lsls	r2, r2, #26
 800b4e2:	d430      	bmi.n	800b546 <_printf_common+0xba>
 800b4e4:	4641      	mov	r1, r8
 800b4e6:	4638      	mov	r0, r7
 800b4e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b4ec:	47c8      	blx	r9
 800b4ee:	3001      	adds	r0, #1
 800b4f0:	d023      	beq.n	800b53a <_printf_common+0xae>
 800b4f2:	6823      	ldr	r3, [r4, #0]
 800b4f4:	6922      	ldr	r2, [r4, #16]
 800b4f6:	f003 0306 	and.w	r3, r3, #6
 800b4fa:	2b04      	cmp	r3, #4
 800b4fc:	bf14      	ite	ne
 800b4fe:	2500      	movne	r5, #0
 800b500:	6833      	ldreq	r3, [r6, #0]
 800b502:	f04f 0600 	mov.w	r6, #0
 800b506:	bf08      	it	eq
 800b508:	68e5      	ldreq	r5, [r4, #12]
 800b50a:	f104 041a 	add.w	r4, r4, #26
 800b50e:	bf08      	it	eq
 800b510:	1aed      	subeq	r5, r5, r3
 800b512:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b516:	bf08      	it	eq
 800b518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b51c:	4293      	cmp	r3, r2
 800b51e:	bfc4      	itt	gt
 800b520:	1a9b      	subgt	r3, r3, r2
 800b522:	18ed      	addgt	r5, r5, r3
 800b524:	42b5      	cmp	r5, r6
 800b526:	d11a      	bne.n	800b55e <_printf_common+0xd2>
 800b528:	2000      	movs	r0, #0
 800b52a:	e008      	b.n	800b53e <_printf_common+0xb2>
 800b52c:	2301      	movs	r3, #1
 800b52e:	4652      	mov	r2, sl
 800b530:	4641      	mov	r1, r8
 800b532:	4638      	mov	r0, r7
 800b534:	47c8      	blx	r9
 800b536:	3001      	adds	r0, #1
 800b538:	d103      	bne.n	800b542 <_printf_common+0xb6>
 800b53a:	f04f 30ff 	mov.w	r0, #4294967295
 800b53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b542:	3501      	adds	r5, #1
 800b544:	e7c1      	b.n	800b4ca <_printf_common+0x3e>
 800b546:	2030      	movs	r0, #48	@ 0x30
 800b548:	18e1      	adds	r1, r4, r3
 800b54a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b54e:	1c5a      	adds	r2, r3, #1
 800b550:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b554:	4422      	add	r2, r4
 800b556:	3302      	adds	r3, #2
 800b558:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b55c:	e7c2      	b.n	800b4e4 <_printf_common+0x58>
 800b55e:	2301      	movs	r3, #1
 800b560:	4622      	mov	r2, r4
 800b562:	4641      	mov	r1, r8
 800b564:	4638      	mov	r0, r7
 800b566:	47c8      	blx	r9
 800b568:	3001      	adds	r0, #1
 800b56a:	d0e6      	beq.n	800b53a <_printf_common+0xae>
 800b56c:	3601      	adds	r6, #1
 800b56e:	e7d9      	b.n	800b524 <_printf_common+0x98>

0800b570 <_printf_i>:
 800b570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b574:	7e0f      	ldrb	r7, [r1, #24]
 800b576:	4691      	mov	r9, r2
 800b578:	2f78      	cmp	r7, #120	@ 0x78
 800b57a:	4680      	mov	r8, r0
 800b57c:	460c      	mov	r4, r1
 800b57e:	469a      	mov	sl, r3
 800b580:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b582:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b586:	d807      	bhi.n	800b598 <_printf_i+0x28>
 800b588:	2f62      	cmp	r7, #98	@ 0x62
 800b58a:	d80a      	bhi.n	800b5a2 <_printf_i+0x32>
 800b58c:	2f00      	cmp	r7, #0
 800b58e:	f000 80d3 	beq.w	800b738 <_printf_i+0x1c8>
 800b592:	2f58      	cmp	r7, #88	@ 0x58
 800b594:	f000 80ba 	beq.w	800b70c <_printf_i+0x19c>
 800b598:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b59c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b5a0:	e03a      	b.n	800b618 <_printf_i+0xa8>
 800b5a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b5a6:	2b15      	cmp	r3, #21
 800b5a8:	d8f6      	bhi.n	800b598 <_printf_i+0x28>
 800b5aa:	a101      	add	r1, pc, #4	@ (adr r1, 800b5b0 <_printf_i+0x40>)
 800b5ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b5b0:	0800b609 	.word	0x0800b609
 800b5b4:	0800b61d 	.word	0x0800b61d
 800b5b8:	0800b599 	.word	0x0800b599
 800b5bc:	0800b599 	.word	0x0800b599
 800b5c0:	0800b599 	.word	0x0800b599
 800b5c4:	0800b599 	.word	0x0800b599
 800b5c8:	0800b61d 	.word	0x0800b61d
 800b5cc:	0800b599 	.word	0x0800b599
 800b5d0:	0800b599 	.word	0x0800b599
 800b5d4:	0800b599 	.word	0x0800b599
 800b5d8:	0800b599 	.word	0x0800b599
 800b5dc:	0800b71f 	.word	0x0800b71f
 800b5e0:	0800b647 	.word	0x0800b647
 800b5e4:	0800b6d9 	.word	0x0800b6d9
 800b5e8:	0800b599 	.word	0x0800b599
 800b5ec:	0800b599 	.word	0x0800b599
 800b5f0:	0800b741 	.word	0x0800b741
 800b5f4:	0800b599 	.word	0x0800b599
 800b5f8:	0800b647 	.word	0x0800b647
 800b5fc:	0800b599 	.word	0x0800b599
 800b600:	0800b599 	.word	0x0800b599
 800b604:	0800b6e1 	.word	0x0800b6e1
 800b608:	6833      	ldr	r3, [r6, #0]
 800b60a:	1d1a      	adds	r2, r3, #4
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	6032      	str	r2, [r6, #0]
 800b610:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b614:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b618:	2301      	movs	r3, #1
 800b61a:	e09e      	b.n	800b75a <_printf_i+0x1ea>
 800b61c:	6833      	ldr	r3, [r6, #0]
 800b61e:	6820      	ldr	r0, [r4, #0]
 800b620:	1d19      	adds	r1, r3, #4
 800b622:	6031      	str	r1, [r6, #0]
 800b624:	0606      	lsls	r6, r0, #24
 800b626:	d501      	bpl.n	800b62c <_printf_i+0xbc>
 800b628:	681d      	ldr	r5, [r3, #0]
 800b62a:	e003      	b.n	800b634 <_printf_i+0xc4>
 800b62c:	0645      	lsls	r5, r0, #25
 800b62e:	d5fb      	bpl.n	800b628 <_printf_i+0xb8>
 800b630:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b634:	2d00      	cmp	r5, #0
 800b636:	da03      	bge.n	800b640 <_printf_i+0xd0>
 800b638:	232d      	movs	r3, #45	@ 0x2d
 800b63a:	426d      	negs	r5, r5
 800b63c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b640:	230a      	movs	r3, #10
 800b642:	4859      	ldr	r0, [pc, #356]	@ (800b7a8 <_printf_i+0x238>)
 800b644:	e011      	b.n	800b66a <_printf_i+0xfa>
 800b646:	6821      	ldr	r1, [r4, #0]
 800b648:	6833      	ldr	r3, [r6, #0]
 800b64a:	0608      	lsls	r0, r1, #24
 800b64c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b650:	d402      	bmi.n	800b658 <_printf_i+0xe8>
 800b652:	0649      	lsls	r1, r1, #25
 800b654:	bf48      	it	mi
 800b656:	b2ad      	uxthmi	r5, r5
 800b658:	2f6f      	cmp	r7, #111	@ 0x6f
 800b65a:	6033      	str	r3, [r6, #0]
 800b65c:	bf14      	ite	ne
 800b65e:	230a      	movne	r3, #10
 800b660:	2308      	moveq	r3, #8
 800b662:	4851      	ldr	r0, [pc, #324]	@ (800b7a8 <_printf_i+0x238>)
 800b664:	2100      	movs	r1, #0
 800b666:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b66a:	6866      	ldr	r6, [r4, #4]
 800b66c:	2e00      	cmp	r6, #0
 800b66e:	bfa8      	it	ge
 800b670:	6821      	ldrge	r1, [r4, #0]
 800b672:	60a6      	str	r6, [r4, #8]
 800b674:	bfa4      	itt	ge
 800b676:	f021 0104 	bicge.w	r1, r1, #4
 800b67a:	6021      	strge	r1, [r4, #0]
 800b67c:	b90d      	cbnz	r5, 800b682 <_printf_i+0x112>
 800b67e:	2e00      	cmp	r6, #0
 800b680:	d04b      	beq.n	800b71a <_printf_i+0x1aa>
 800b682:	4616      	mov	r6, r2
 800b684:	fbb5 f1f3 	udiv	r1, r5, r3
 800b688:	fb03 5711 	mls	r7, r3, r1, r5
 800b68c:	5dc7      	ldrb	r7, [r0, r7]
 800b68e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b692:	462f      	mov	r7, r5
 800b694:	42bb      	cmp	r3, r7
 800b696:	460d      	mov	r5, r1
 800b698:	d9f4      	bls.n	800b684 <_printf_i+0x114>
 800b69a:	2b08      	cmp	r3, #8
 800b69c:	d10b      	bne.n	800b6b6 <_printf_i+0x146>
 800b69e:	6823      	ldr	r3, [r4, #0]
 800b6a0:	07df      	lsls	r7, r3, #31
 800b6a2:	d508      	bpl.n	800b6b6 <_printf_i+0x146>
 800b6a4:	6923      	ldr	r3, [r4, #16]
 800b6a6:	6861      	ldr	r1, [r4, #4]
 800b6a8:	4299      	cmp	r1, r3
 800b6aa:	bfde      	ittt	le
 800b6ac:	2330      	movle	r3, #48	@ 0x30
 800b6ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b6b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b6b6:	1b92      	subs	r2, r2, r6
 800b6b8:	6122      	str	r2, [r4, #16]
 800b6ba:	464b      	mov	r3, r9
 800b6bc:	4621      	mov	r1, r4
 800b6be:	4640      	mov	r0, r8
 800b6c0:	f8cd a000 	str.w	sl, [sp]
 800b6c4:	aa03      	add	r2, sp, #12
 800b6c6:	f7ff fee1 	bl	800b48c <_printf_common>
 800b6ca:	3001      	adds	r0, #1
 800b6cc:	d14a      	bne.n	800b764 <_printf_i+0x1f4>
 800b6ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d2:	b004      	add	sp, #16
 800b6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6d8:	6823      	ldr	r3, [r4, #0]
 800b6da:	f043 0320 	orr.w	r3, r3, #32
 800b6de:	6023      	str	r3, [r4, #0]
 800b6e0:	2778      	movs	r7, #120	@ 0x78
 800b6e2:	4832      	ldr	r0, [pc, #200]	@ (800b7ac <_printf_i+0x23c>)
 800b6e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b6e8:	6823      	ldr	r3, [r4, #0]
 800b6ea:	6831      	ldr	r1, [r6, #0]
 800b6ec:	061f      	lsls	r7, r3, #24
 800b6ee:	f851 5b04 	ldr.w	r5, [r1], #4
 800b6f2:	d402      	bmi.n	800b6fa <_printf_i+0x18a>
 800b6f4:	065f      	lsls	r7, r3, #25
 800b6f6:	bf48      	it	mi
 800b6f8:	b2ad      	uxthmi	r5, r5
 800b6fa:	6031      	str	r1, [r6, #0]
 800b6fc:	07d9      	lsls	r1, r3, #31
 800b6fe:	bf44      	itt	mi
 800b700:	f043 0320 	orrmi.w	r3, r3, #32
 800b704:	6023      	strmi	r3, [r4, #0]
 800b706:	b11d      	cbz	r5, 800b710 <_printf_i+0x1a0>
 800b708:	2310      	movs	r3, #16
 800b70a:	e7ab      	b.n	800b664 <_printf_i+0xf4>
 800b70c:	4826      	ldr	r0, [pc, #152]	@ (800b7a8 <_printf_i+0x238>)
 800b70e:	e7e9      	b.n	800b6e4 <_printf_i+0x174>
 800b710:	6823      	ldr	r3, [r4, #0]
 800b712:	f023 0320 	bic.w	r3, r3, #32
 800b716:	6023      	str	r3, [r4, #0]
 800b718:	e7f6      	b.n	800b708 <_printf_i+0x198>
 800b71a:	4616      	mov	r6, r2
 800b71c:	e7bd      	b.n	800b69a <_printf_i+0x12a>
 800b71e:	6833      	ldr	r3, [r6, #0]
 800b720:	6825      	ldr	r5, [r4, #0]
 800b722:	1d18      	adds	r0, r3, #4
 800b724:	6961      	ldr	r1, [r4, #20]
 800b726:	6030      	str	r0, [r6, #0]
 800b728:	062e      	lsls	r6, r5, #24
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	d501      	bpl.n	800b732 <_printf_i+0x1c2>
 800b72e:	6019      	str	r1, [r3, #0]
 800b730:	e002      	b.n	800b738 <_printf_i+0x1c8>
 800b732:	0668      	lsls	r0, r5, #25
 800b734:	d5fb      	bpl.n	800b72e <_printf_i+0x1be>
 800b736:	8019      	strh	r1, [r3, #0]
 800b738:	2300      	movs	r3, #0
 800b73a:	4616      	mov	r6, r2
 800b73c:	6123      	str	r3, [r4, #16]
 800b73e:	e7bc      	b.n	800b6ba <_printf_i+0x14a>
 800b740:	6833      	ldr	r3, [r6, #0]
 800b742:	2100      	movs	r1, #0
 800b744:	1d1a      	adds	r2, r3, #4
 800b746:	6032      	str	r2, [r6, #0]
 800b748:	681e      	ldr	r6, [r3, #0]
 800b74a:	6862      	ldr	r2, [r4, #4]
 800b74c:	4630      	mov	r0, r6
 800b74e:	f000 f9c4 	bl	800bada <memchr>
 800b752:	b108      	cbz	r0, 800b758 <_printf_i+0x1e8>
 800b754:	1b80      	subs	r0, r0, r6
 800b756:	6060      	str	r0, [r4, #4]
 800b758:	6863      	ldr	r3, [r4, #4]
 800b75a:	6123      	str	r3, [r4, #16]
 800b75c:	2300      	movs	r3, #0
 800b75e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b762:	e7aa      	b.n	800b6ba <_printf_i+0x14a>
 800b764:	4632      	mov	r2, r6
 800b766:	4649      	mov	r1, r9
 800b768:	4640      	mov	r0, r8
 800b76a:	6923      	ldr	r3, [r4, #16]
 800b76c:	47d0      	blx	sl
 800b76e:	3001      	adds	r0, #1
 800b770:	d0ad      	beq.n	800b6ce <_printf_i+0x15e>
 800b772:	6823      	ldr	r3, [r4, #0]
 800b774:	079b      	lsls	r3, r3, #30
 800b776:	d413      	bmi.n	800b7a0 <_printf_i+0x230>
 800b778:	68e0      	ldr	r0, [r4, #12]
 800b77a:	9b03      	ldr	r3, [sp, #12]
 800b77c:	4298      	cmp	r0, r3
 800b77e:	bfb8      	it	lt
 800b780:	4618      	movlt	r0, r3
 800b782:	e7a6      	b.n	800b6d2 <_printf_i+0x162>
 800b784:	2301      	movs	r3, #1
 800b786:	4632      	mov	r2, r6
 800b788:	4649      	mov	r1, r9
 800b78a:	4640      	mov	r0, r8
 800b78c:	47d0      	blx	sl
 800b78e:	3001      	adds	r0, #1
 800b790:	d09d      	beq.n	800b6ce <_printf_i+0x15e>
 800b792:	3501      	adds	r5, #1
 800b794:	68e3      	ldr	r3, [r4, #12]
 800b796:	9903      	ldr	r1, [sp, #12]
 800b798:	1a5b      	subs	r3, r3, r1
 800b79a:	42ab      	cmp	r3, r5
 800b79c:	dcf2      	bgt.n	800b784 <_printf_i+0x214>
 800b79e:	e7eb      	b.n	800b778 <_printf_i+0x208>
 800b7a0:	2500      	movs	r5, #0
 800b7a2:	f104 0619 	add.w	r6, r4, #25
 800b7a6:	e7f5      	b.n	800b794 <_printf_i+0x224>
 800b7a8:	0800df06 	.word	0x0800df06
 800b7ac:	0800df17 	.word	0x0800df17

0800b7b0 <std>:
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	b510      	push	{r4, lr}
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	e9c0 3300 	strd	r3, r3, [r0]
 800b7ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7be:	6083      	str	r3, [r0, #8]
 800b7c0:	8181      	strh	r1, [r0, #12]
 800b7c2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b7c4:	81c2      	strh	r2, [r0, #14]
 800b7c6:	6183      	str	r3, [r0, #24]
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	2208      	movs	r2, #8
 800b7cc:	305c      	adds	r0, #92	@ 0x5c
 800b7ce:	f000 f8f4 	bl	800b9ba <memset>
 800b7d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b808 <std+0x58>)
 800b7d4:	6224      	str	r4, [r4, #32]
 800b7d6:	6263      	str	r3, [r4, #36]	@ 0x24
 800b7d8:	4b0c      	ldr	r3, [pc, #48]	@ (800b80c <std+0x5c>)
 800b7da:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b7dc:	4b0c      	ldr	r3, [pc, #48]	@ (800b810 <std+0x60>)
 800b7de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b7e0:	4b0c      	ldr	r3, [pc, #48]	@ (800b814 <std+0x64>)
 800b7e2:	6323      	str	r3, [r4, #48]	@ 0x30
 800b7e4:	4b0c      	ldr	r3, [pc, #48]	@ (800b818 <std+0x68>)
 800b7e6:	429c      	cmp	r4, r3
 800b7e8:	d006      	beq.n	800b7f8 <std+0x48>
 800b7ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b7ee:	4294      	cmp	r4, r2
 800b7f0:	d002      	beq.n	800b7f8 <std+0x48>
 800b7f2:	33d0      	adds	r3, #208	@ 0xd0
 800b7f4:	429c      	cmp	r4, r3
 800b7f6:	d105      	bne.n	800b804 <std+0x54>
 800b7f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b7fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b800:	f000 b968 	b.w	800bad4 <__retarget_lock_init_recursive>
 800b804:	bd10      	pop	{r4, pc}
 800b806:	bf00      	nop
 800b808:	0800b935 	.word	0x0800b935
 800b80c:	0800b957 	.word	0x0800b957
 800b810:	0800b98f 	.word	0x0800b98f
 800b814:	0800b9b3 	.word	0x0800b9b3
 800b818:	200017c0 	.word	0x200017c0

0800b81c <stdio_exit_handler>:
 800b81c:	4a02      	ldr	r2, [pc, #8]	@ (800b828 <stdio_exit_handler+0xc>)
 800b81e:	4903      	ldr	r1, [pc, #12]	@ (800b82c <stdio_exit_handler+0x10>)
 800b820:	4803      	ldr	r0, [pc, #12]	@ (800b830 <stdio_exit_handler+0x14>)
 800b822:	f000 b869 	b.w	800b8f8 <_fwalk_sglue>
 800b826:	bf00      	nop
 800b828:	200001b0 	.word	0x200001b0
 800b82c:	0800d029 	.word	0x0800d029
 800b830:	200001c0 	.word	0x200001c0

0800b834 <cleanup_stdio>:
 800b834:	6841      	ldr	r1, [r0, #4]
 800b836:	4b0c      	ldr	r3, [pc, #48]	@ (800b868 <cleanup_stdio+0x34>)
 800b838:	b510      	push	{r4, lr}
 800b83a:	4299      	cmp	r1, r3
 800b83c:	4604      	mov	r4, r0
 800b83e:	d001      	beq.n	800b844 <cleanup_stdio+0x10>
 800b840:	f001 fbf2 	bl	800d028 <_fflush_r>
 800b844:	68a1      	ldr	r1, [r4, #8]
 800b846:	4b09      	ldr	r3, [pc, #36]	@ (800b86c <cleanup_stdio+0x38>)
 800b848:	4299      	cmp	r1, r3
 800b84a:	d002      	beq.n	800b852 <cleanup_stdio+0x1e>
 800b84c:	4620      	mov	r0, r4
 800b84e:	f001 fbeb 	bl	800d028 <_fflush_r>
 800b852:	68e1      	ldr	r1, [r4, #12]
 800b854:	4b06      	ldr	r3, [pc, #24]	@ (800b870 <cleanup_stdio+0x3c>)
 800b856:	4299      	cmp	r1, r3
 800b858:	d004      	beq.n	800b864 <cleanup_stdio+0x30>
 800b85a:	4620      	mov	r0, r4
 800b85c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b860:	f001 bbe2 	b.w	800d028 <_fflush_r>
 800b864:	bd10      	pop	{r4, pc}
 800b866:	bf00      	nop
 800b868:	200017c0 	.word	0x200017c0
 800b86c:	20001828 	.word	0x20001828
 800b870:	20001890 	.word	0x20001890

0800b874 <global_stdio_init.part.0>:
 800b874:	b510      	push	{r4, lr}
 800b876:	4b0b      	ldr	r3, [pc, #44]	@ (800b8a4 <global_stdio_init.part.0+0x30>)
 800b878:	4c0b      	ldr	r4, [pc, #44]	@ (800b8a8 <global_stdio_init.part.0+0x34>)
 800b87a:	4a0c      	ldr	r2, [pc, #48]	@ (800b8ac <global_stdio_init.part.0+0x38>)
 800b87c:	4620      	mov	r0, r4
 800b87e:	601a      	str	r2, [r3, #0]
 800b880:	2104      	movs	r1, #4
 800b882:	2200      	movs	r2, #0
 800b884:	f7ff ff94 	bl	800b7b0 <std>
 800b888:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b88c:	2201      	movs	r2, #1
 800b88e:	2109      	movs	r1, #9
 800b890:	f7ff ff8e 	bl	800b7b0 <std>
 800b894:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b898:	2202      	movs	r2, #2
 800b89a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b89e:	2112      	movs	r1, #18
 800b8a0:	f7ff bf86 	b.w	800b7b0 <std>
 800b8a4:	200018f8 	.word	0x200018f8
 800b8a8:	200017c0 	.word	0x200017c0
 800b8ac:	0800b81d 	.word	0x0800b81d

0800b8b0 <__sfp_lock_acquire>:
 800b8b0:	4801      	ldr	r0, [pc, #4]	@ (800b8b8 <__sfp_lock_acquire+0x8>)
 800b8b2:	f000 b910 	b.w	800bad6 <__retarget_lock_acquire_recursive>
 800b8b6:	bf00      	nop
 800b8b8:	20001901 	.word	0x20001901

0800b8bc <__sfp_lock_release>:
 800b8bc:	4801      	ldr	r0, [pc, #4]	@ (800b8c4 <__sfp_lock_release+0x8>)
 800b8be:	f000 b90b 	b.w	800bad8 <__retarget_lock_release_recursive>
 800b8c2:	bf00      	nop
 800b8c4:	20001901 	.word	0x20001901

0800b8c8 <__sinit>:
 800b8c8:	b510      	push	{r4, lr}
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	f7ff fff0 	bl	800b8b0 <__sfp_lock_acquire>
 800b8d0:	6a23      	ldr	r3, [r4, #32]
 800b8d2:	b11b      	cbz	r3, 800b8dc <__sinit+0x14>
 800b8d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8d8:	f7ff bff0 	b.w	800b8bc <__sfp_lock_release>
 800b8dc:	4b04      	ldr	r3, [pc, #16]	@ (800b8f0 <__sinit+0x28>)
 800b8de:	6223      	str	r3, [r4, #32]
 800b8e0:	4b04      	ldr	r3, [pc, #16]	@ (800b8f4 <__sinit+0x2c>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d1f5      	bne.n	800b8d4 <__sinit+0xc>
 800b8e8:	f7ff ffc4 	bl	800b874 <global_stdio_init.part.0>
 800b8ec:	e7f2      	b.n	800b8d4 <__sinit+0xc>
 800b8ee:	bf00      	nop
 800b8f0:	0800b835 	.word	0x0800b835
 800b8f4:	200018f8 	.word	0x200018f8

0800b8f8 <_fwalk_sglue>:
 800b8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8fc:	4607      	mov	r7, r0
 800b8fe:	4688      	mov	r8, r1
 800b900:	4614      	mov	r4, r2
 800b902:	2600      	movs	r6, #0
 800b904:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b908:	f1b9 0901 	subs.w	r9, r9, #1
 800b90c:	d505      	bpl.n	800b91a <_fwalk_sglue+0x22>
 800b90e:	6824      	ldr	r4, [r4, #0]
 800b910:	2c00      	cmp	r4, #0
 800b912:	d1f7      	bne.n	800b904 <_fwalk_sglue+0xc>
 800b914:	4630      	mov	r0, r6
 800b916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b91a:	89ab      	ldrh	r3, [r5, #12]
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d907      	bls.n	800b930 <_fwalk_sglue+0x38>
 800b920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b924:	3301      	adds	r3, #1
 800b926:	d003      	beq.n	800b930 <_fwalk_sglue+0x38>
 800b928:	4629      	mov	r1, r5
 800b92a:	4638      	mov	r0, r7
 800b92c:	47c0      	blx	r8
 800b92e:	4306      	orrs	r6, r0
 800b930:	3568      	adds	r5, #104	@ 0x68
 800b932:	e7e9      	b.n	800b908 <_fwalk_sglue+0x10>

0800b934 <__sread>:
 800b934:	b510      	push	{r4, lr}
 800b936:	460c      	mov	r4, r1
 800b938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b93c:	f000 f86c 	bl	800ba18 <_read_r>
 800b940:	2800      	cmp	r0, #0
 800b942:	bfab      	itete	ge
 800b944:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b946:	89a3      	ldrhlt	r3, [r4, #12]
 800b948:	181b      	addge	r3, r3, r0
 800b94a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b94e:	bfac      	ite	ge
 800b950:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b952:	81a3      	strhlt	r3, [r4, #12]
 800b954:	bd10      	pop	{r4, pc}

0800b956 <__swrite>:
 800b956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b95a:	461f      	mov	r7, r3
 800b95c:	898b      	ldrh	r3, [r1, #12]
 800b95e:	4605      	mov	r5, r0
 800b960:	05db      	lsls	r3, r3, #23
 800b962:	460c      	mov	r4, r1
 800b964:	4616      	mov	r6, r2
 800b966:	d505      	bpl.n	800b974 <__swrite+0x1e>
 800b968:	2302      	movs	r3, #2
 800b96a:	2200      	movs	r2, #0
 800b96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b970:	f000 f840 	bl	800b9f4 <_lseek_r>
 800b974:	89a3      	ldrh	r3, [r4, #12]
 800b976:	4632      	mov	r2, r6
 800b978:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b97c:	81a3      	strh	r3, [r4, #12]
 800b97e:	4628      	mov	r0, r5
 800b980:	463b      	mov	r3, r7
 800b982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b98a:	f000 b867 	b.w	800ba5c <_write_r>

0800b98e <__sseek>:
 800b98e:	b510      	push	{r4, lr}
 800b990:	460c      	mov	r4, r1
 800b992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b996:	f000 f82d 	bl	800b9f4 <_lseek_r>
 800b99a:	1c43      	adds	r3, r0, #1
 800b99c:	89a3      	ldrh	r3, [r4, #12]
 800b99e:	bf15      	itete	ne
 800b9a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b9a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b9a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b9aa:	81a3      	strheq	r3, [r4, #12]
 800b9ac:	bf18      	it	ne
 800b9ae:	81a3      	strhne	r3, [r4, #12]
 800b9b0:	bd10      	pop	{r4, pc}

0800b9b2 <__sclose>:
 800b9b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9b6:	f000 b80d 	b.w	800b9d4 <_close_r>

0800b9ba <memset>:
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	4402      	add	r2, r0
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d100      	bne.n	800b9c4 <memset+0xa>
 800b9c2:	4770      	bx	lr
 800b9c4:	f803 1b01 	strb.w	r1, [r3], #1
 800b9c8:	e7f9      	b.n	800b9be <memset+0x4>
	...

0800b9cc <_localeconv_r>:
 800b9cc:	4800      	ldr	r0, [pc, #0]	@ (800b9d0 <_localeconv_r+0x4>)
 800b9ce:	4770      	bx	lr
 800b9d0:	200002fc 	.word	0x200002fc

0800b9d4 <_close_r>:
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	4d05      	ldr	r5, [pc, #20]	@ (800b9f0 <_close_r+0x1c>)
 800b9da:	4604      	mov	r4, r0
 800b9dc:	4608      	mov	r0, r1
 800b9de:	602b      	str	r3, [r5, #0]
 800b9e0:	f7f7 f823 	bl	8002a2a <_close>
 800b9e4:	1c43      	adds	r3, r0, #1
 800b9e6:	d102      	bne.n	800b9ee <_close_r+0x1a>
 800b9e8:	682b      	ldr	r3, [r5, #0]
 800b9ea:	b103      	cbz	r3, 800b9ee <_close_r+0x1a>
 800b9ec:	6023      	str	r3, [r4, #0]
 800b9ee:	bd38      	pop	{r3, r4, r5, pc}
 800b9f0:	200018fc 	.word	0x200018fc

0800b9f4 <_lseek_r>:
 800b9f4:	b538      	push	{r3, r4, r5, lr}
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	4608      	mov	r0, r1
 800b9fa:	4611      	mov	r1, r2
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	4d05      	ldr	r5, [pc, #20]	@ (800ba14 <_lseek_r+0x20>)
 800ba00:	602a      	str	r2, [r5, #0]
 800ba02:	461a      	mov	r2, r3
 800ba04:	f7f7 f835 	bl	8002a72 <_lseek>
 800ba08:	1c43      	adds	r3, r0, #1
 800ba0a:	d102      	bne.n	800ba12 <_lseek_r+0x1e>
 800ba0c:	682b      	ldr	r3, [r5, #0]
 800ba0e:	b103      	cbz	r3, 800ba12 <_lseek_r+0x1e>
 800ba10:	6023      	str	r3, [r4, #0]
 800ba12:	bd38      	pop	{r3, r4, r5, pc}
 800ba14:	200018fc 	.word	0x200018fc

0800ba18 <_read_r>:
 800ba18:	b538      	push	{r3, r4, r5, lr}
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	4608      	mov	r0, r1
 800ba1e:	4611      	mov	r1, r2
 800ba20:	2200      	movs	r2, #0
 800ba22:	4d05      	ldr	r5, [pc, #20]	@ (800ba38 <_read_r+0x20>)
 800ba24:	602a      	str	r2, [r5, #0]
 800ba26:	461a      	mov	r2, r3
 800ba28:	f7f6 ffc6 	bl	80029b8 <_read>
 800ba2c:	1c43      	adds	r3, r0, #1
 800ba2e:	d102      	bne.n	800ba36 <_read_r+0x1e>
 800ba30:	682b      	ldr	r3, [r5, #0]
 800ba32:	b103      	cbz	r3, 800ba36 <_read_r+0x1e>
 800ba34:	6023      	str	r3, [r4, #0]
 800ba36:	bd38      	pop	{r3, r4, r5, pc}
 800ba38:	200018fc 	.word	0x200018fc

0800ba3c <_sbrk_r>:
 800ba3c:	b538      	push	{r3, r4, r5, lr}
 800ba3e:	2300      	movs	r3, #0
 800ba40:	4d05      	ldr	r5, [pc, #20]	@ (800ba58 <_sbrk_r+0x1c>)
 800ba42:	4604      	mov	r4, r0
 800ba44:	4608      	mov	r0, r1
 800ba46:	602b      	str	r3, [r5, #0]
 800ba48:	f7f7 f820 	bl	8002a8c <_sbrk>
 800ba4c:	1c43      	adds	r3, r0, #1
 800ba4e:	d102      	bne.n	800ba56 <_sbrk_r+0x1a>
 800ba50:	682b      	ldr	r3, [r5, #0]
 800ba52:	b103      	cbz	r3, 800ba56 <_sbrk_r+0x1a>
 800ba54:	6023      	str	r3, [r4, #0]
 800ba56:	bd38      	pop	{r3, r4, r5, pc}
 800ba58:	200018fc 	.word	0x200018fc

0800ba5c <_write_r>:
 800ba5c:	b538      	push	{r3, r4, r5, lr}
 800ba5e:	4604      	mov	r4, r0
 800ba60:	4608      	mov	r0, r1
 800ba62:	4611      	mov	r1, r2
 800ba64:	2200      	movs	r2, #0
 800ba66:	4d05      	ldr	r5, [pc, #20]	@ (800ba7c <_write_r+0x20>)
 800ba68:	602a      	str	r2, [r5, #0]
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	f7f6 ffc1 	bl	80029f2 <_write>
 800ba70:	1c43      	adds	r3, r0, #1
 800ba72:	d102      	bne.n	800ba7a <_write_r+0x1e>
 800ba74:	682b      	ldr	r3, [r5, #0]
 800ba76:	b103      	cbz	r3, 800ba7a <_write_r+0x1e>
 800ba78:	6023      	str	r3, [r4, #0]
 800ba7a:	bd38      	pop	{r3, r4, r5, pc}
 800ba7c:	200018fc 	.word	0x200018fc

0800ba80 <__errno>:
 800ba80:	4b01      	ldr	r3, [pc, #4]	@ (800ba88 <__errno+0x8>)
 800ba82:	6818      	ldr	r0, [r3, #0]
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	200001bc 	.word	0x200001bc

0800ba8c <__libc_init_array>:
 800ba8c:	b570      	push	{r4, r5, r6, lr}
 800ba8e:	2600      	movs	r6, #0
 800ba90:	4d0c      	ldr	r5, [pc, #48]	@ (800bac4 <__libc_init_array+0x38>)
 800ba92:	4c0d      	ldr	r4, [pc, #52]	@ (800bac8 <__libc_init_array+0x3c>)
 800ba94:	1b64      	subs	r4, r4, r5
 800ba96:	10a4      	asrs	r4, r4, #2
 800ba98:	42a6      	cmp	r6, r4
 800ba9a:	d109      	bne.n	800bab0 <__libc_init_array+0x24>
 800ba9c:	f001 ffea 	bl	800da74 <_init>
 800baa0:	2600      	movs	r6, #0
 800baa2:	4d0a      	ldr	r5, [pc, #40]	@ (800bacc <__libc_init_array+0x40>)
 800baa4:	4c0a      	ldr	r4, [pc, #40]	@ (800bad0 <__libc_init_array+0x44>)
 800baa6:	1b64      	subs	r4, r4, r5
 800baa8:	10a4      	asrs	r4, r4, #2
 800baaa:	42a6      	cmp	r6, r4
 800baac:	d105      	bne.n	800baba <__libc_init_array+0x2e>
 800baae:	bd70      	pop	{r4, r5, r6, pc}
 800bab0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bab4:	4798      	blx	r3
 800bab6:	3601      	adds	r6, #1
 800bab8:	e7ee      	b.n	800ba98 <__libc_init_array+0xc>
 800baba:	f855 3b04 	ldr.w	r3, [r5], #4
 800babe:	4798      	blx	r3
 800bac0:	3601      	adds	r6, #1
 800bac2:	e7f2      	b.n	800baaa <__libc_init_array+0x1e>
 800bac4:	0800e270 	.word	0x0800e270
 800bac8:	0800e270 	.word	0x0800e270
 800bacc:	0800e270 	.word	0x0800e270
 800bad0:	0800e274 	.word	0x0800e274

0800bad4 <__retarget_lock_init_recursive>:
 800bad4:	4770      	bx	lr

0800bad6 <__retarget_lock_acquire_recursive>:
 800bad6:	4770      	bx	lr

0800bad8 <__retarget_lock_release_recursive>:
 800bad8:	4770      	bx	lr

0800bada <memchr>:
 800bada:	4603      	mov	r3, r0
 800badc:	b510      	push	{r4, lr}
 800bade:	b2c9      	uxtb	r1, r1
 800bae0:	4402      	add	r2, r0
 800bae2:	4293      	cmp	r3, r2
 800bae4:	4618      	mov	r0, r3
 800bae6:	d101      	bne.n	800baec <memchr+0x12>
 800bae8:	2000      	movs	r0, #0
 800baea:	e003      	b.n	800baf4 <memchr+0x1a>
 800baec:	7804      	ldrb	r4, [r0, #0]
 800baee:	3301      	adds	r3, #1
 800baf0:	428c      	cmp	r4, r1
 800baf2:	d1f6      	bne.n	800bae2 <memchr+0x8>
 800baf4:	bd10      	pop	{r4, pc}

0800baf6 <quorem>:
 800baf6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bafa:	6903      	ldr	r3, [r0, #16]
 800bafc:	690c      	ldr	r4, [r1, #16]
 800bafe:	4607      	mov	r7, r0
 800bb00:	42a3      	cmp	r3, r4
 800bb02:	db7e      	blt.n	800bc02 <quorem+0x10c>
 800bb04:	3c01      	subs	r4, #1
 800bb06:	00a3      	lsls	r3, r4, #2
 800bb08:	f100 0514 	add.w	r5, r0, #20
 800bb0c:	f101 0814 	add.w	r8, r1, #20
 800bb10:	9300      	str	r3, [sp, #0]
 800bb12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb16:	9301      	str	r3, [sp, #4]
 800bb18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb20:	3301      	adds	r3, #1
 800bb22:	429a      	cmp	r2, r3
 800bb24:	fbb2 f6f3 	udiv	r6, r2, r3
 800bb28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb2c:	d32e      	bcc.n	800bb8c <quorem+0x96>
 800bb2e:	f04f 0a00 	mov.w	sl, #0
 800bb32:	46c4      	mov	ip, r8
 800bb34:	46ae      	mov	lr, r5
 800bb36:	46d3      	mov	fp, sl
 800bb38:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bb3c:	b298      	uxth	r0, r3
 800bb3e:	fb06 a000 	mla	r0, r6, r0, sl
 800bb42:	0c1b      	lsrs	r3, r3, #16
 800bb44:	0c02      	lsrs	r2, r0, #16
 800bb46:	fb06 2303 	mla	r3, r6, r3, r2
 800bb4a:	f8de 2000 	ldr.w	r2, [lr]
 800bb4e:	b280      	uxth	r0, r0
 800bb50:	b292      	uxth	r2, r2
 800bb52:	1a12      	subs	r2, r2, r0
 800bb54:	445a      	add	r2, fp
 800bb56:	f8de 0000 	ldr.w	r0, [lr]
 800bb5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb5e:	b29b      	uxth	r3, r3
 800bb60:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bb64:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bb68:	b292      	uxth	r2, r2
 800bb6a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bb6e:	45e1      	cmp	r9, ip
 800bb70:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bb74:	f84e 2b04 	str.w	r2, [lr], #4
 800bb78:	d2de      	bcs.n	800bb38 <quorem+0x42>
 800bb7a:	9b00      	ldr	r3, [sp, #0]
 800bb7c:	58eb      	ldr	r3, [r5, r3]
 800bb7e:	b92b      	cbnz	r3, 800bb8c <quorem+0x96>
 800bb80:	9b01      	ldr	r3, [sp, #4]
 800bb82:	3b04      	subs	r3, #4
 800bb84:	429d      	cmp	r5, r3
 800bb86:	461a      	mov	r2, r3
 800bb88:	d32f      	bcc.n	800bbea <quorem+0xf4>
 800bb8a:	613c      	str	r4, [r7, #16]
 800bb8c:	4638      	mov	r0, r7
 800bb8e:	f001 f8c3 	bl	800cd18 <__mcmp>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	db25      	blt.n	800bbe2 <quorem+0xec>
 800bb96:	4629      	mov	r1, r5
 800bb98:	2000      	movs	r0, #0
 800bb9a:	f858 2b04 	ldr.w	r2, [r8], #4
 800bb9e:	f8d1 c000 	ldr.w	ip, [r1]
 800bba2:	fa1f fe82 	uxth.w	lr, r2
 800bba6:	fa1f f38c 	uxth.w	r3, ip
 800bbaa:	eba3 030e 	sub.w	r3, r3, lr
 800bbae:	4403      	add	r3, r0
 800bbb0:	0c12      	lsrs	r2, r2, #16
 800bbb2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bbb6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbc0:	45c1      	cmp	r9, r8
 800bbc2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bbc6:	f841 3b04 	str.w	r3, [r1], #4
 800bbca:	d2e6      	bcs.n	800bb9a <quorem+0xa4>
 800bbcc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbd0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbd4:	b922      	cbnz	r2, 800bbe0 <quorem+0xea>
 800bbd6:	3b04      	subs	r3, #4
 800bbd8:	429d      	cmp	r5, r3
 800bbda:	461a      	mov	r2, r3
 800bbdc:	d30b      	bcc.n	800bbf6 <quorem+0x100>
 800bbde:	613c      	str	r4, [r7, #16]
 800bbe0:	3601      	adds	r6, #1
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	b003      	add	sp, #12
 800bbe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbea:	6812      	ldr	r2, [r2, #0]
 800bbec:	3b04      	subs	r3, #4
 800bbee:	2a00      	cmp	r2, #0
 800bbf0:	d1cb      	bne.n	800bb8a <quorem+0x94>
 800bbf2:	3c01      	subs	r4, #1
 800bbf4:	e7c6      	b.n	800bb84 <quorem+0x8e>
 800bbf6:	6812      	ldr	r2, [r2, #0]
 800bbf8:	3b04      	subs	r3, #4
 800bbfa:	2a00      	cmp	r2, #0
 800bbfc:	d1ef      	bne.n	800bbde <quorem+0xe8>
 800bbfe:	3c01      	subs	r4, #1
 800bc00:	e7ea      	b.n	800bbd8 <quorem+0xe2>
 800bc02:	2000      	movs	r0, #0
 800bc04:	e7ee      	b.n	800bbe4 <quorem+0xee>
	...

0800bc08 <_dtoa_r>:
 800bc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0c:	4614      	mov	r4, r2
 800bc0e:	461d      	mov	r5, r3
 800bc10:	69c7      	ldr	r7, [r0, #28]
 800bc12:	b097      	sub	sp, #92	@ 0x5c
 800bc14:	4683      	mov	fp, r0
 800bc16:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bc1a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800bc1c:	b97f      	cbnz	r7, 800bc3e <_dtoa_r+0x36>
 800bc1e:	2010      	movs	r0, #16
 800bc20:	f7ff f8ac 	bl	800ad7c <malloc>
 800bc24:	4602      	mov	r2, r0
 800bc26:	f8cb 001c 	str.w	r0, [fp, #28]
 800bc2a:	b920      	cbnz	r0, 800bc36 <_dtoa_r+0x2e>
 800bc2c:	21ef      	movs	r1, #239	@ 0xef
 800bc2e:	4ba8      	ldr	r3, [pc, #672]	@ (800bed0 <_dtoa_r+0x2c8>)
 800bc30:	48a8      	ldr	r0, [pc, #672]	@ (800bed4 <_dtoa_r+0x2cc>)
 800bc32:	f001 fa2f 	bl	800d094 <__assert_func>
 800bc36:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bc3a:	6007      	str	r7, [r0, #0]
 800bc3c:	60c7      	str	r7, [r0, #12]
 800bc3e:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bc42:	6819      	ldr	r1, [r3, #0]
 800bc44:	b159      	cbz	r1, 800bc5e <_dtoa_r+0x56>
 800bc46:	685a      	ldr	r2, [r3, #4]
 800bc48:	2301      	movs	r3, #1
 800bc4a:	4093      	lsls	r3, r2
 800bc4c:	604a      	str	r2, [r1, #4]
 800bc4e:	608b      	str	r3, [r1, #8]
 800bc50:	4658      	mov	r0, fp
 800bc52:	f000 fe29 	bl	800c8a8 <_Bfree>
 800bc56:	2200      	movs	r2, #0
 800bc58:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bc5c:	601a      	str	r2, [r3, #0]
 800bc5e:	1e2b      	subs	r3, r5, #0
 800bc60:	bfaf      	iteee	ge
 800bc62:	2300      	movge	r3, #0
 800bc64:	2201      	movlt	r2, #1
 800bc66:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bc6a:	9303      	strlt	r3, [sp, #12]
 800bc6c:	bfa8      	it	ge
 800bc6e:	6033      	strge	r3, [r6, #0]
 800bc70:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bc74:	4b98      	ldr	r3, [pc, #608]	@ (800bed8 <_dtoa_r+0x2d0>)
 800bc76:	bfb8      	it	lt
 800bc78:	6032      	strlt	r2, [r6, #0]
 800bc7a:	ea33 0308 	bics.w	r3, r3, r8
 800bc7e:	d112      	bne.n	800bca6 <_dtoa_r+0x9e>
 800bc80:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bc84:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bc86:	6013      	str	r3, [r2, #0]
 800bc88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bc8c:	4323      	orrs	r3, r4
 800bc8e:	f000 8550 	beq.w	800c732 <_dtoa_r+0xb2a>
 800bc92:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bc94:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800bedc <_dtoa_r+0x2d4>
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	f000 8552 	beq.w	800c742 <_dtoa_r+0xb3a>
 800bc9e:	f10a 0303 	add.w	r3, sl, #3
 800bca2:	f000 bd4c 	b.w	800c73e <_dtoa_r+0xb36>
 800bca6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcaa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bcae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	f7f4 feb3 	bl	8000a20 <__aeabi_dcmpeq>
 800bcba:	4607      	mov	r7, r0
 800bcbc:	b158      	cbz	r0, 800bcd6 <_dtoa_r+0xce>
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bcc2:	6013      	str	r3, [r2, #0]
 800bcc4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bcc6:	b113      	cbz	r3, 800bcce <_dtoa_r+0xc6>
 800bcc8:	4b85      	ldr	r3, [pc, #532]	@ (800bee0 <_dtoa_r+0x2d8>)
 800bcca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bccc:	6013      	str	r3, [r2, #0]
 800bcce:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800bee4 <_dtoa_r+0x2dc>
 800bcd2:	f000 bd36 	b.w	800c742 <_dtoa_r+0xb3a>
 800bcd6:	ab14      	add	r3, sp, #80	@ 0x50
 800bcd8:	9301      	str	r3, [sp, #4]
 800bcda:	ab15      	add	r3, sp, #84	@ 0x54
 800bcdc:	9300      	str	r3, [sp, #0]
 800bcde:	4658      	mov	r0, fp
 800bce0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bce4:	f001 f8c8 	bl	800ce78 <__d2b>
 800bce8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800bcec:	4681      	mov	r9, r0
 800bcee:	2e00      	cmp	r6, #0
 800bcf0:	d077      	beq.n	800bde2 <_dtoa_r+0x1da>
 800bcf2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bcf8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bcfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd00:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bd04:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bd08:	9712      	str	r7, [sp, #72]	@ 0x48
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	4b76      	ldr	r3, [pc, #472]	@ (800bee8 <_dtoa_r+0x2e0>)
 800bd10:	f7f4 fa66 	bl	80001e0 <__aeabi_dsub>
 800bd14:	a368      	add	r3, pc, #416	@ (adr r3, 800beb8 <_dtoa_r+0x2b0>)
 800bd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1a:	f7f4 fc19 	bl	8000550 <__aeabi_dmul>
 800bd1e:	a368      	add	r3, pc, #416	@ (adr r3, 800bec0 <_dtoa_r+0x2b8>)
 800bd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd24:	f7f4 fa5e 	bl	80001e4 <__adddf3>
 800bd28:	4604      	mov	r4, r0
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	460d      	mov	r5, r1
 800bd2e:	f7f4 fba5 	bl	800047c <__aeabi_i2d>
 800bd32:	a365      	add	r3, pc, #404	@ (adr r3, 800bec8 <_dtoa_r+0x2c0>)
 800bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd38:	f7f4 fc0a 	bl	8000550 <__aeabi_dmul>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	460b      	mov	r3, r1
 800bd40:	4620      	mov	r0, r4
 800bd42:	4629      	mov	r1, r5
 800bd44:	f7f4 fa4e 	bl	80001e4 <__adddf3>
 800bd48:	4604      	mov	r4, r0
 800bd4a:	460d      	mov	r5, r1
 800bd4c:	f7f4 feb0 	bl	8000ab0 <__aeabi_d2iz>
 800bd50:	2200      	movs	r2, #0
 800bd52:	4607      	mov	r7, r0
 800bd54:	2300      	movs	r3, #0
 800bd56:	4620      	mov	r0, r4
 800bd58:	4629      	mov	r1, r5
 800bd5a:	f7f4 fe6b 	bl	8000a34 <__aeabi_dcmplt>
 800bd5e:	b140      	cbz	r0, 800bd72 <_dtoa_r+0x16a>
 800bd60:	4638      	mov	r0, r7
 800bd62:	f7f4 fb8b 	bl	800047c <__aeabi_i2d>
 800bd66:	4622      	mov	r2, r4
 800bd68:	462b      	mov	r3, r5
 800bd6a:	f7f4 fe59 	bl	8000a20 <__aeabi_dcmpeq>
 800bd6e:	b900      	cbnz	r0, 800bd72 <_dtoa_r+0x16a>
 800bd70:	3f01      	subs	r7, #1
 800bd72:	2f16      	cmp	r7, #22
 800bd74:	d853      	bhi.n	800be1e <_dtoa_r+0x216>
 800bd76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd7a:	4b5c      	ldr	r3, [pc, #368]	@ (800beec <_dtoa_r+0x2e4>)
 800bd7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd84:	f7f4 fe56 	bl	8000a34 <__aeabi_dcmplt>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	d04a      	beq.n	800be22 <_dtoa_r+0x21a>
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	3f01      	subs	r7, #1
 800bd90:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd92:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bd94:	1b9b      	subs	r3, r3, r6
 800bd96:	1e5a      	subs	r2, r3, #1
 800bd98:	bf46      	itte	mi
 800bd9a:	f1c3 0801 	rsbmi	r8, r3, #1
 800bd9e:	2300      	movmi	r3, #0
 800bda0:	f04f 0800 	movpl.w	r8, #0
 800bda4:	9209      	str	r2, [sp, #36]	@ 0x24
 800bda6:	bf48      	it	mi
 800bda8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800bdaa:	2f00      	cmp	r7, #0
 800bdac:	db3b      	blt.n	800be26 <_dtoa_r+0x21e>
 800bdae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdb0:	970e      	str	r7, [sp, #56]	@ 0x38
 800bdb2:	443b      	add	r3, r7
 800bdb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	930a      	str	r3, [sp, #40]	@ 0x28
 800bdba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bdbc:	2b09      	cmp	r3, #9
 800bdbe:	d866      	bhi.n	800be8e <_dtoa_r+0x286>
 800bdc0:	2b05      	cmp	r3, #5
 800bdc2:	bfc4      	itt	gt
 800bdc4:	3b04      	subgt	r3, #4
 800bdc6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800bdc8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bdca:	bfc8      	it	gt
 800bdcc:	2400      	movgt	r4, #0
 800bdce:	f1a3 0302 	sub.w	r3, r3, #2
 800bdd2:	bfd8      	it	le
 800bdd4:	2401      	movle	r4, #1
 800bdd6:	2b03      	cmp	r3, #3
 800bdd8:	d864      	bhi.n	800bea4 <_dtoa_r+0x29c>
 800bdda:	e8df f003 	tbb	[pc, r3]
 800bdde:	382b      	.short	0x382b
 800bde0:	5636      	.short	0x5636
 800bde2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bde6:	441e      	add	r6, r3
 800bde8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bdec:	2b20      	cmp	r3, #32
 800bdee:	bfc1      	itttt	gt
 800bdf0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bdf4:	fa08 f803 	lslgt.w	r8, r8, r3
 800bdf8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bdfc:	fa24 f303 	lsrgt.w	r3, r4, r3
 800be00:	bfd6      	itet	le
 800be02:	f1c3 0320 	rsble	r3, r3, #32
 800be06:	ea48 0003 	orrgt.w	r0, r8, r3
 800be0a:	fa04 f003 	lslle.w	r0, r4, r3
 800be0e:	f7f4 fb25 	bl	800045c <__aeabi_ui2d>
 800be12:	2201      	movs	r2, #1
 800be14:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800be18:	3e01      	subs	r6, #1
 800be1a:	9212      	str	r2, [sp, #72]	@ 0x48
 800be1c:	e775      	b.n	800bd0a <_dtoa_r+0x102>
 800be1e:	2301      	movs	r3, #1
 800be20:	e7b6      	b.n	800bd90 <_dtoa_r+0x188>
 800be22:	900f      	str	r0, [sp, #60]	@ 0x3c
 800be24:	e7b5      	b.n	800bd92 <_dtoa_r+0x18a>
 800be26:	427b      	negs	r3, r7
 800be28:	930a      	str	r3, [sp, #40]	@ 0x28
 800be2a:	2300      	movs	r3, #0
 800be2c:	eba8 0807 	sub.w	r8, r8, r7
 800be30:	930e      	str	r3, [sp, #56]	@ 0x38
 800be32:	e7c2      	b.n	800bdba <_dtoa_r+0x1b2>
 800be34:	2300      	movs	r3, #0
 800be36:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	dc35      	bgt.n	800beaa <_dtoa_r+0x2a2>
 800be3e:	2301      	movs	r3, #1
 800be40:	461a      	mov	r2, r3
 800be42:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800be46:	9221      	str	r2, [sp, #132]	@ 0x84
 800be48:	e00b      	b.n	800be62 <_dtoa_r+0x25a>
 800be4a:	2301      	movs	r3, #1
 800be4c:	e7f3      	b.n	800be36 <_dtoa_r+0x22e>
 800be4e:	2300      	movs	r3, #0
 800be50:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be52:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be54:	18fb      	adds	r3, r7, r3
 800be56:	9308      	str	r3, [sp, #32]
 800be58:	3301      	adds	r3, #1
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	9307      	str	r3, [sp, #28]
 800be5e:	bfb8      	it	lt
 800be60:	2301      	movlt	r3, #1
 800be62:	2100      	movs	r1, #0
 800be64:	2204      	movs	r2, #4
 800be66:	f8db 001c 	ldr.w	r0, [fp, #28]
 800be6a:	f102 0514 	add.w	r5, r2, #20
 800be6e:	429d      	cmp	r5, r3
 800be70:	d91f      	bls.n	800beb2 <_dtoa_r+0x2aa>
 800be72:	6041      	str	r1, [r0, #4]
 800be74:	4658      	mov	r0, fp
 800be76:	f000 fcd7 	bl	800c828 <_Balloc>
 800be7a:	4682      	mov	sl, r0
 800be7c:	2800      	cmp	r0, #0
 800be7e:	d139      	bne.n	800bef4 <_dtoa_r+0x2ec>
 800be80:	4602      	mov	r2, r0
 800be82:	f240 11af 	movw	r1, #431	@ 0x1af
 800be86:	4b1a      	ldr	r3, [pc, #104]	@ (800bef0 <_dtoa_r+0x2e8>)
 800be88:	e6d2      	b.n	800bc30 <_dtoa_r+0x28>
 800be8a:	2301      	movs	r3, #1
 800be8c:	e7e0      	b.n	800be50 <_dtoa_r+0x248>
 800be8e:	2401      	movs	r4, #1
 800be90:	2300      	movs	r3, #0
 800be92:	940b      	str	r4, [sp, #44]	@ 0x2c
 800be94:	9320      	str	r3, [sp, #128]	@ 0x80
 800be96:	f04f 33ff 	mov.w	r3, #4294967295
 800be9a:	2200      	movs	r2, #0
 800be9c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800bea0:	2312      	movs	r3, #18
 800bea2:	e7d0      	b.n	800be46 <_dtoa_r+0x23e>
 800bea4:	2301      	movs	r3, #1
 800bea6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bea8:	e7f5      	b.n	800be96 <_dtoa_r+0x28e>
 800beaa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800beac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800beb0:	e7d7      	b.n	800be62 <_dtoa_r+0x25a>
 800beb2:	3101      	adds	r1, #1
 800beb4:	0052      	lsls	r2, r2, #1
 800beb6:	e7d8      	b.n	800be6a <_dtoa_r+0x262>
 800beb8:	636f4361 	.word	0x636f4361
 800bebc:	3fd287a7 	.word	0x3fd287a7
 800bec0:	8b60c8b3 	.word	0x8b60c8b3
 800bec4:	3fc68a28 	.word	0x3fc68a28
 800bec8:	509f79fb 	.word	0x509f79fb
 800becc:	3fd34413 	.word	0x3fd34413
 800bed0:	0800df35 	.word	0x0800df35
 800bed4:	0800df4c 	.word	0x0800df4c
 800bed8:	7ff00000 	.word	0x7ff00000
 800bedc:	0800df31 	.word	0x0800df31
 800bee0:	0800df05 	.word	0x0800df05
 800bee4:	0800df04 	.word	0x0800df04
 800bee8:	3ff80000 	.word	0x3ff80000
 800beec:	0800e048 	.word	0x0800e048
 800bef0:	0800dfa4 	.word	0x0800dfa4
 800bef4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bef8:	6018      	str	r0, [r3, #0]
 800befa:	9b07      	ldr	r3, [sp, #28]
 800befc:	2b0e      	cmp	r3, #14
 800befe:	f200 80a4 	bhi.w	800c04a <_dtoa_r+0x442>
 800bf02:	2c00      	cmp	r4, #0
 800bf04:	f000 80a1 	beq.w	800c04a <_dtoa_r+0x442>
 800bf08:	2f00      	cmp	r7, #0
 800bf0a:	dd33      	ble.n	800bf74 <_dtoa_r+0x36c>
 800bf0c:	4b86      	ldr	r3, [pc, #536]	@ (800c128 <_dtoa_r+0x520>)
 800bf0e:	f007 020f 	and.w	r2, r7, #15
 800bf12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf16:	05f8      	lsls	r0, r7, #23
 800bf18:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bf1c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bf20:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bf24:	d516      	bpl.n	800bf54 <_dtoa_r+0x34c>
 800bf26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf2a:	4b80      	ldr	r3, [pc, #512]	@ (800c12c <_dtoa_r+0x524>)
 800bf2c:	2603      	movs	r6, #3
 800bf2e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bf32:	f7f4 fc37 	bl	80007a4 <__aeabi_ddiv>
 800bf36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf3a:	f004 040f 	and.w	r4, r4, #15
 800bf3e:	4d7b      	ldr	r5, [pc, #492]	@ (800c12c <_dtoa_r+0x524>)
 800bf40:	b954      	cbnz	r4, 800bf58 <_dtoa_r+0x350>
 800bf42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf4a:	f7f4 fc2b 	bl	80007a4 <__aeabi_ddiv>
 800bf4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf52:	e028      	b.n	800bfa6 <_dtoa_r+0x39e>
 800bf54:	2602      	movs	r6, #2
 800bf56:	e7f2      	b.n	800bf3e <_dtoa_r+0x336>
 800bf58:	07e1      	lsls	r1, r4, #31
 800bf5a:	d508      	bpl.n	800bf6e <_dtoa_r+0x366>
 800bf5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf60:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf64:	f7f4 faf4 	bl	8000550 <__aeabi_dmul>
 800bf68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf6c:	3601      	adds	r6, #1
 800bf6e:	1064      	asrs	r4, r4, #1
 800bf70:	3508      	adds	r5, #8
 800bf72:	e7e5      	b.n	800bf40 <_dtoa_r+0x338>
 800bf74:	f000 80d2 	beq.w	800c11c <_dtoa_r+0x514>
 800bf78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf7c:	427c      	negs	r4, r7
 800bf7e:	4b6a      	ldr	r3, [pc, #424]	@ (800c128 <_dtoa_r+0x520>)
 800bf80:	f004 020f 	and.w	r2, r4, #15
 800bf84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8c:	f7f4 fae0 	bl	8000550 <__aeabi_dmul>
 800bf90:	2602      	movs	r6, #2
 800bf92:	2300      	movs	r3, #0
 800bf94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf98:	4d64      	ldr	r5, [pc, #400]	@ (800c12c <_dtoa_r+0x524>)
 800bf9a:	1124      	asrs	r4, r4, #4
 800bf9c:	2c00      	cmp	r4, #0
 800bf9e:	f040 80b2 	bne.w	800c106 <_dtoa_r+0x4fe>
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d1d3      	bne.n	800bf4e <_dtoa_r+0x346>
 800bfa6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bfaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	f000 80b7 	beq.w	800c120 <_dtoa_r+0x518>
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	4b5d      	ldr	r3, [pc, #372]	@ (800c130 <_dtoa_r+0x528>)
 800bfba:	f7f4 fd3b 	bl	8000a34 <__aeabi_dcmplt>
 800bfbe:	2800      	cmp	r0, #0
 800bfc0:	f000 80ae 	beq.w	800c120 <_dtoa_r+0x518>
 800bfc4:	9b07      	ldr	r3, [sp, #28]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	f000 80aa 	beq.w	800c120 <_dtoa_r+0x518>
 800bfcc:	9b08      	ldr	r3, [sp, #32]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	dd37      	ble.n	800c042 <_dtoa_r+0x43a>
 800bfd2:	1e7b      	subs	r3, r7, #1
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	9304      	str	r3, [sp, #16]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	4629      	mov	r1, r5
 800bfdc:	4b55      	ldr	r3, [pc, #340]	@ (800c134 <_dtoa_r+0x52c>)
 800bfde:	f7f4 fab7 	bl	8000550 <__aeabi_dmul>
 800bfe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfe6:	9c08      	ldr	r4, [sp, #32]
 800bfe8:	3601      	adds	r6, #1
 800bfea:	4630      	mov	r0, r6
 800bfec:	f7f4 fa46 	bl	800047c <__aeabi_i2d>
 800bff0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bff4:	f7f4 faac 	bl	8000550 <__aeabi_dmul>
 800bff8:	2200      	movs	r2, #0
 800bffa:	4b4f      	ldr	r3, [pc, #316]	@ (800c138 <_dtoa_r+0x530>)
 800bffc:	f7f4 f8f2 	bl	80001e4 <__adddf3>
 800c000:	4605      	mov	r5, r0
 800c002:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c006:	2c00      	cmp	r4, #0
 800c008:	f040 809a 	bne.w	800c140 <_dtoa_r+0x538>
 800c00c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c010:	2200      	movs	r2, #0
 800c012:	4b4a      	ldr	r3, [pc, #296]	@ (800c13c <_dtoa_r+0x534>)
 800c014:	f7f4 f8e4 	bl	80001e0 <__aeabi_dsub>
 800c018:	4602      	mov	r2, r0
 800c01a:	460b      	mov	r3, r1
 800c01c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c020:	462a      	mov	r2, r5
 800c022:	4633      	mov	r3, r6
 800c024:	f7f4 fd24 	bl	8000a70 <__aeabi_dcmpgt>
 800c028:	2800      	cmp	r0, #0
 800c02a:	f040 828e 	bne.w	800c54a <_dtoa_r+0x942>
 800c02e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c032:	462a      	mov	r2, r5
 800c034:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c038:	f7f4 fcfc 	bl	8000a34 <__aeabi_dcmplt>
 800c03c:	2800      	cmp	r0, #0
 800c03e:	f040 8127 	bne.w	800c290 <_dtoa_r+0x688>
 800c042:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c046:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c04a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	f2c0 8163 	blt.w	800c318 <_dtoa_r+0x710>
 800c052:	2f0e      	cmp	r7, #14
 800c054:	f300 8160 	bgt.w	800c318 <_dtoa_r+0x710>
 800c058:	4b33      	ldr	r3, [pc, #204]	@ (800c128 <_dtoa_r+0x520>)
 800c05a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c05e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c062:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c066:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c068:	2b00      	cmp	r3, #0
 800c06a:	da03      	bge.n	800c074 <_dtoa_r+0x46c>
 800c06c:	9b07      	ldr	r3, [sp, #28]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	f340 8100 	ble.w	800c274 <_dtoa_r+0x66c>
 800c074:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c078:	4656      	mov	r6, sl
 800c07a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c07e:	4620      	mov	r0, r4
 800c080:	4629      	mov	r1, r5
 800c082:	f7f4 fb8f 	bl	80007a4 <__aeabi_ddiv>
 800c086:	f7f4 fd13 	bl	8000ab0 <__aeabi_d2iz>
 800c08a:	4680      	mov	r8, r0
 800c08c:	f7f4 f9f6 	bl	800047c <__aeabi_i2d>
 800c090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c094:	f7f4 fa5c 	bl	8000550 <__aeabi_dmul>
 800c098:	4602      	mov	r2, r0
 800c09a:	460b      	mov	r3, r1
 800c09c:	4620      	mov	r0, r4
 800c09e:	4629      	mov	r1, r5
 800c0a0:	f7f4 f89e 	bl	80001e0 <__aeabi_dsub>
 800c0a4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c0a8:	9d07      	ldr	r5, [sp, #28]
 800c0aa:	f806 4b01 	strb.w	r4, [r6], #1
 800c0ae:	eba6 040a 	sub.w	r4, r6, sl
 800c0b2:	42a5      	cmp	r5, r4
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	f040 8116 	bne.w	800c2e8 <_dtoa_r+0x6e0>
 800c0bc:	f7f4 f892 	bl	80001e4 <__adddf3>
 800c0c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0c4:	4604      	mov	r4, r0
 800c0c6:	460d      	mov	r5, r1
 800c0c8:	f7f4 fcd2 	bl	8000a70 <__aeabi_dcmpgt>
 800c0cc:	2800      	cmp	r0, #0
 800c0ce:	f040 80f8 	bne.w	800c2c2 <_dtoa_r+0x6ba>
 800c0d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	4629      	mov	r1, r5
 800c0da:	f7f4 fca1 	bl	8000a20 <__aeabi_dcmpeq>
 800c0de:	b118      	cbz	r0, 800c0e8 <_dtoa_r+0x4e0>
 800c0e0:	f018 0f01 	tst.w	r8, #1
 800c0e4:	f040 80ed 	bne.w	800c2c2 <_dtoa_r+0x6ba>
 800c0e8:	4649      	mov	r1, r9
 800c0ea:	4658      	mov	r0, fp
 800c0ec:	f000 fbdc 	bl	800c8a8 <_Bfree>
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	7033      	strb	r3, [r6, #0]
 800c0f4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c0f6:	3701      	adds	r7, #1
 800c0f8:	601f      	str	r7, [r3, #0]
 800c0fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	f000 8320 	beq.w	800c742 <_dtoa_r+0xb3a>
 800c102:	601e      	str	r6, [r3, #0]
 800c104:	e31d      	b.n	800c742 <_dtoa_r+0xb3a>
 800c106:	07e2      	lsls	r2, r4, #31
 800c108:	d505      	bpl.n	800c116 <_dtoa_r+0x50e>
 800c10a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c10e:	f7f4 fa1f 	bl	8000550 <__aeabi_dmul>
 800c112:	2301      	movs	r3, #1
 800c114:	3601      	adds	r6, #1
 800c116:	1064      	asrs	r4, r4, #1
 800c118:	3508      	adds	r5, #8
 800c11a:	e73f      	b.n	800bf9c <_dtoa_r+0x394>
 800c11c:	2602      	movs	r6, #2
 800c11e:	e742      	b.n	800bfa6 <_dtoa_r+0x39e>
 800c120:	9c07      	ldr	r4, [sp, #28]
 800c122:	9704      	str	r7, [sp, #16]
 800c124:	e761      	b.n	800bfea <_dtoa_r+0x3e2>
 800c126:	bf00      	nop
 800c128:	0800e048 	.word	0x0800e048
 800c12c:	0800e020 	.word	0x0800e020
 800c130:	3ff00000 	.word	0x3ff00000
 800c134:	40240000 	.word	0x40240000
 800c138:	401c0000 	.word	0x401c0000
 800c13c:	40140000 	.word	0x40140000
 800c140:	4b70      	ldr	r3, [pc, #448]	@ (800c304 <_dtoa_r+0x6fc>)
 800c142:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c144:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c148:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c14c:	4454      	add	r4, sl
 800c14e:	2900      	cmp	r1, #0
 800c150:	d045      	beq.n	800c1de <_dtoa_r+0x5d6>
 800c152:	2000      	movs	r0, #0
 800c154:	496c      	ldr	r1, [pc, #432]	@ (800c308 <_dtoa_r+0x700>)
 800c156:	f7f4 fb25 	bl	80007a4 <__aeabi_ddiv>
 800c15a:	4633      	mov	r3, r6
 800c15c:	462a      	mov	r2, r5
 800c15e:	f7f4 f83f 	bl	80001e0 <__aeabi_dsub>
 800c162:	4656      	mov	r6, sl
 800c164:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c168:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c16c:	f7f4 fca0 	bl	8000ab0 <__aeabi_d2iz>
 800c170:	4605      	mov	r5, r0
 800c172:	f7f4 f983 	bl	800047c <__aeabi_i2d>
 800c176:	4602      	mov	r2, r0
 800c178:	460b      	mov	r3, r1
 800c17a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c17e:	f7f4 f82f 	bl	80001e0 <__aeabi_dsub>
 800c182:	4602      	mov	r2, r0
 800c184:	460b      	mov	r3, r1
 800c186:	3530      	adds	r5, #48	@ 0x30
 800c188:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c18c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c190:	f806 5b01 	strb.w	r5, [r6], #1
 800c194:	f7f4 fc4e 	bl	8000a34 <__aeabi_dcmplt>
 800c198:	2800      	cmp	r0, #0
 800c19a:	d163      	bne.n	800c264 <_dtoa_r+0x65c>
 800c19c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1a0:	2000      	movs	r0, #0
 800c1a2:	495a      	ldr	r1, [pc, #360]	@ (800c30c <_dtoa_r+0x704>)
 800c1a4:	f7f4 f81c 	bl	80001e0 <__aeabi_dsub>
 800c1a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c1ac:	f7f4 fc42 	bl	8000a34 <__aeabi_dcmplt>
 800c1b0:	2800      	cmp	r0, #0
 800c1b2:	f040 8087 	bne.w	800c2c4 <_dtoa_r+0x6bc>
 800c1b6:	42a6      	cmp	r6, r4
 800c1b8:	f43f af43 	beq.w	800c042 <_dtoa_r+0x43a>
 800c1bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	4b53      	ldr	r3, [pc, #332]	@ (800c310 <_dtoa_r+0x708>)
 800c1c4:	f7f4 f9c4 	bl	8000550 <__aeabi_dmul>
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c1ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1d2:	4b4f      	ldr	r3, [pc, #316]	@ (800c310 <_dtoa_r+0x708>)
 800c1d4:	f7f4 f9bc 	bl	8000550 <__aeabi_dmul>
 800c1d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1dc:	e7c4      	b.n	800c168 <_dtoa_r+0x560>
 800c1de:	4631      	mov	r1, r6
 800c1e0:	4628      	mov	r0, r5
 800c1e2:	f7f4 f9b5 	bl	8000550 <__aeabi_dmul>
 800c1e6:	4656      	mov	r6, sl
 800c1e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c1ec:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c1ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1f2:	f7f4 fc5d 	bl	8000ab0 <__aeabi_d2iz>
 800c1f6:	4605      	mov	r5, r0
 800c1f8:	f7f4 f940 	bl	800047c <__aeabi_i2d>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	460b      	mov	r3, r1
 800c200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c204:	f7f3 ffec 	bl	80001e0 <__aeabi_dsub>
 800c208:	4602      	mov	r2, r0
 800c20a:	460b      	mov	r3, r1
 800c20c:	3530      	adds	r5, #48	@ 0x30
 800c20e:	f806 5b01 	strb.w	r5, [r6], #1
 800c212:	42a6      	cmp	r6, r4
 800c214:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c218:	f04f 0200 	mov.w	r2, #0
 800c21c:	d124      	bne.n	800c268 <_dtoa_r+0x660>
 800c21e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c222:	4b39      	ldr	r3, [pc, #228]	@ (800c308 <_dtoa_r+0x700>)
 800c224:	f7f3 ffde 	bl	80001e4 <__adddf3>
 800c228:	4602      	mov	r2, r0
 800c22a:	460b      	mov	r3, r1
 800c22c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c230:	f7f4 fc1e 	bl	8000a70 <__aeabi_dcmpgt>
 800c234:	2800      	cmp	r0, #0
 800c236:	d145      	bne.n	800c2c4 <_dtoa_r+0x6bc>
 800c238:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c23c:	2000      	movs	r0, #0
 800c23e:	4932      	ldr	r1, [pc, #200]	@ (800c308 <_dtoa_r+0x700>)
 800c240:	f7f3 ffce 	bl	80001e0 <__aeabi_dsub>
 800c244:	4602      	mov	r2, r0
 800c246:	460b      	mov	r3, r1
 800c248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c24c:	f7f4 fbf2 	bl	8000a34 <__aeabi_dcmplt>
 800c250:	2800      	cmp	r0, #0
 800c252:	f43f aef6 	beq.w	800c042 <_dtoa_r+0x43a>
 800c256:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c258:	1e73      	subs	r3, r6, #1
 800c25a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c25c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c260:	2b30      	cmp	r3, #48	@ 0x30
 800c262:	d0f8      	beq.n	800c256 <_dtoa_r+0x64e>
 800c264:	9f04      	ldr	r7, [sp, #16]
 800c266:	e73f      	b.n	800c0e8 <_dtoa_r+0x4e0>
 800c268:	4b29      	ldr	r3, [pc, #164]	@ (800c310 <_dtoa_r+0x708>)
 800c26a:	f7f4 f971 	bl	8000550 <__aeabi_dmul>
 800c26e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c272:	e7bc      	b.n	800c1ee <_dtoa_r+0x5e6>
 800c274:	d10c      	bne.n	800c290 <_dtoa_r+0x688>
 800c276:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c27a:	2200      	movs	r2, #0
 800c27c:	4b25      	ldr	r3, [pc, #148]	@ (800c314 <_dtoa_r+0x70c>)
 800c27e:	f7f4 f967 	bl	8000550 <__aeabi_dmul>
 800c282:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c286:	f7f4 fbe9 	bl	8000a5c <__aeabi_dcmpge>
 800c28a:	2800      	cmp	r0, #0
 800c28c:	f000 815b 	beq.w	800c546 <_dtoa_r+0x93e>
 800c290:	2400      	movs	r4, #0
 800c292:	4625      	mov	r5, r4
 800c294:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c296:	4656      	mov	r6, sl
 800c298:	43db      	mvns	r3, r3
 800c29a:	9304      	str	r3, [sp, #16]
 800c29c:	2700      	movs	r7, #0
 800c29e:	4621      	mov	r1, r4
 800c2a0:	4658      	mov	r0, fp
 800c2a2:	f000 fb01 	bl	800c8a8 <_Bfree>
 800c2a6:	2d00      	cmp	r5, #0
 800c2a8:	d0dc      	beq.n	800c264 <_dtoa_r+0x65c>
 800c2aa:	b12f      	cbz	r7, 800c2b8 <_dtoa_r+0x6b0>
 800c2ac:	42af      	cmp	r7, r5
 800c2ae:	d003      	beq.n	800c2b8 <_dtoa_r+0x6b0>
 800c2b0:	4639      	mov	r1, r7
 800c2b2:	4658      	mov	r0, fp
 800c2b4:	f000 faf8 	bl	800c8a8 <_Bfree>
 800c2b8:	4629      	mov	r1, r5
 800c2ba:	4658      	mov	r0, fp
 800c2bc:	f000 faf4 	bl	800c8a8 <_Bfree>
 800c2c0:	e7d0      	b.n	800c264 <_dtoa_r+0x65c>
 800c2c2:	9704      	str	r7, [sp, #16]
 800c2c4:	4633      	mov	r3, r6
 800c2c6:	461e      	mov	r6, r3
 800c2c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2cc:	2a39      	cmp	r2, #57	@ 0x39
 800c2ce:	d107      	bne.n	800c2e0 <_dtoa_r+0x6d8>
 800c2d0:	459a      	cmp	sl, r3
 800c2d2:	d1f8      	bne.n	800c2c6 <_dtoa_r+0x6be>
 800c2d4:	9a04      	ldr	r2, [sp, #16]
 800c2d6:	3201      	adds	r2, #1
 800c2d8:	9204      	str	r2, [sp, #16]
 800c2da:	2230      	movs	r2, #48	@ 0x30
 800c2dc:	f88a 2000 	strb.w	r2, [sl]
 800c2e0:	781a      	ldrb	r2, [r3, #0]
 800c2e2:	3201      	adds	r2, #1
 800c2e4:	701a      	strb	r2, [r3, #0]
 800c2e6:	e7bd      	b.n	800c264 <_dtoa_r+0x65c>
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	4b09      	ldr	r3, [pc, #36]	@ (800c310 <_dtoa_r+0x708>)
 800c2ec:	f7f4 f930 	bl	8000550 <__aeabi_dmul>
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	460d      	mov	r5, r1
 800c2f8:	f7f4 fb92 	bl	8000a20 <__aeabi_dcmpeq>
 800c2fc:	2800      	cmp	r0, #0
 800c2fe:	f43f aebc 	beq.w	800c07a <_dtoa_r+0x472>
 800c302:	e6f1      	b.n	800c0e8 <_dtoa_r+0x4e0>
 800c304:	0800e048 	.word	0x0800e048
 800c308:	3fe00000 	.word	0x3fe00000
 800c30c:	3ff00000 	.word	0x3ff00000
 800c310:	40240000 	.word	0x40240000
 800c314:	40140000 	.word	0x40140000
 800c318:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c31a:	2a00      	cmp	r2, #0
 800c31c:	f000 80db 	beq.w	800c4d6 <_dtoa_r+0x8ce>
 800c320:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c322:	2a01      	cmp	r2, #1
 800c324:	f300 80bf 	bgt.w	800c4a6 <_dtoa_r+0x89e>
 800c328:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c32a:	2a00      	cmp	r2, #0
 800c32c:	f000 80b7 	beq.w	800c49e <_dtoa_r+0x896>
 800c330:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c334:	4646      	mov	r6, r8
 800c336:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c338:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c33a:	2101      	movs	r1, #1
 800c33c:	441a      	add	r2, r3
 800c33e:	4658      	mov	r0, fp
 800c340:	4498      	add	r8, r3
 800c342:	9209      	str	r2, [sp, #36]	@ 0x24
 800c344:	f000 fb64 	bl	800ca10 <__i2b>
 800c348:	4605      	mov	r5, r0
 800c34a:	b15e      	cbz	r6, 800c364 <_dtoa_r+0x75c>
 800c34c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c34e:	2b00      	cmp	r3, #0
 800c350:	dd08      	ble.n	800c364 <_dtoa_r+0x75c>
 800c352:	42b3      	cmp	r3, r6
 800c354:	bfa8      	it	ge
 800c356:	4633      	movge	r3, r6
 800c358:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c35a:	eba8 0803 	sub.w	r8, r8, r3
 800c35e:	1af6      	subs	r6, r6, r3
 800c360:	1ad3      	subs	r3, r2, r3
 800c362:	9309      	str	r3, [sp, #36]	@ 0x24
 800c364:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c366:	b1f3      	cbz	r3, 800c3a6 <_dtoa_r+0x79e>
 800c368:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f000 80b7 	beq.w	800c4de <_dtoa_r+0x8d6>
 800c370:	b18c      	cbz	r4, 800c396 <_dtoa_r+0x78e>
 800c372:	4629      	mov	r1, r5
 800c374:	4622      	mov	r2, r4
 800c376:	4658      	mov	r0, fp
 800c378:	f000 fc08 	bl	800cb8c <__pow5mult>
 800c37c:	464a      	mov	r2, r9
 800c37e:	4601      	mov	r1, r0
 800c380:	4605      	mov	r5, r0
 800c382:	4658      	mov	r0, fp
 800c384:	f000 fb5a 	bl	800ca3c <__multiply>
 800c388:	4649      	mov	r1, r9
 800c38a:	9004      	str	r0, [sp, #16]
 800c38c:	4658      	mov	r0, fp
 800c38e:	f000 fa8b 	bl	800c8a8 <_Bfree>
 800c392:	9b04      	ldr	r3, [sp, #16]
 800c394:	4699      	mov	r9, r3
 800c396:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c398:	1b1a      	subs	r2, r3, r4
 800c39a:	d004      	beq.n	800c3a6 <_dtoa_r+0x79e>
 800c39c:	4649      	mov	r1, r9
 800c39e:	4658      	mov	r0, fp
 800c3a0:	f000 fbf4 	bl	800cb8c <__pow5mult>
 800c3a4:	4681      	mov	r9, r0
 800c3a6:	2101      	movs	r1, #1
 800c3a8:	4658      	mov	r0, fp
 800c3aa:	f000 fb31 	bl	800ca10 <__i2b>
 800c3ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3b0:	4604      	mov	r4, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	f000 81c9 	beq.w	800c74a <_dtoa_r+0xb42>
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	4601      	mov	r1, r0
 800c3bc:	4658      	mov	r0, fp
 800c3be:	f000 fbe5 	bl	800cb8c <__pow5mult>
 800c3c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c3c4:	4604      	mov	r4, r0
 800c3c6:	2b01      	cmp	r3, #1
 800c3c8:	f300 808f 	bgt.w	800c4ea <_dtoa_r+0x8e2>
 800c3cc:	9b02      	ldr	r3, [sp, #8]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	f040 8087 	bne.w	800c4e2 <_dtoa_r+0x8da>
 800c3d4:	9b03      	ldr	r3, [sp, #12]
 800c3d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	f040 8083 	bne.w	800c4e6 <_dtoa_r+0x8de>
 800c3e0:	9b03      	ldr	r3, [sp, #12]
 800c3e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c3e6:	0d1b      	lsrs	r3, r3, #20
 800c3e8:	051b      	lsls	r3, r3, #20
 800c3ea:	b12b      	cbz	r3, 800c3f8 <_dtoa_r+0x7f0>
 800c3ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3ee:	f108 0801 	add.w	r8, r8, #1
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	f000 81aa 	beq.w	800c756 <_dtoa_r+0xb4e>
 800c402:	6923      	ldr	r3, [r4, #16]
 800c404:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c408:	6918      	ldr	r0, [r3, #16]
 800c40a:	f000 fab5 	bl	800c978 <__hi0bits>
 800c40e:	f1c0 0020 	rsb	r0, r0, #32
 800c412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c414:	4418      	add	r0, r3
 800c416:	f010 001f 	ands.w	r0, r0, #31
 800c41a:	d071      	beq.n	800c500 <_dtoa_r+0x8f8>
 800c41c:	f1c0 0320 	rsb	r3, r0, #32
 800c420:	2b04      	cmp	r3, #4
 800c422:	dd65      	ble.n	800c4f0 <_dtoa_r+0x8e8>
 800c424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c426:	f1c0 001c 	rsb	r0, r0, #28
 800c42a:	4403      	add	r3, r0
 800c42c:	4480      	add	r8, r0
 800c42e:	4406      	add	r6, r0
 800c430:	9309      	str	r3, [sp, #36]	@ 0x24
 800c432:	f1b8 0f00 	cmp.w	r8, #0
 800c436:	dd05      	ble.n	800c444 <_dtoa_r+0x83c>
 800c438:	4649      	mov	r1, r9
 800c43a:	4642      	mov	r2, r8
 800c43c:	4658      	mov	r0, fp
 800c43e:	f000 fbff 	bl	800cc40 <__lshift>
 800c442:	4681      	mov	r9, r0
 800c444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c446:	2b00      	cmp	r3, #0
 800c448:	dd05      	ble.n	800c456 <_dtoa_r+0x84e>
 800c44a:	4621      	mov	r1, r4
 800c44c:	461a      	mov	r2, r3
 800c44e:	4658      	mov	r0, fp
 800c450:	f000 fbf6 	bl	800cc40 <__lshift>
 800c454:	4604      	mov	r4, r0
 800c456:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d053      	beq.n	800c504 <_dtoa_r+0x8fc>
 800c45c:	4621      	mov	r1, r4
 800c45e:	4648      	mov	r0, r9
 800c460:	f000 fc5a 	bl	800cd18 <__mcmp>
 800c464:	2800      	cmp	r0, #0
 800c466:	da4d      	bge.n	800c504 <_dtoa_r+0x8fc>
 800c468:	1e7b      	subs	r3, r7, #1
 800c46a:	4649      	mov	r1, r9
 800c46c:	9304      	str	r3, [sp, #16]
 800c46e:	220a      	movs	r2, #10
 800c470:	2300      	movs	r3, #0
 800c472:	4658      	mov	r0, fp
 800c474:	f000 fa3a 	bl	800c8ec <__multadd>
 800c478:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c47a:	4681      	mov	r9, r0
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f000 816c 	beq.w	800c75a <_dtoa_r+0xb52>
 800c482:	2300      	movs	r3, #0
 800c484:	4629      	mov	r1, r5
 800c486:	220a      	movs	r2, #10
 800c488:	4658      	mov	r0, fp
 800c48a:	f000 fa2f 	bl	800c8ec <__multadd>
 800c48e:	9b08      	ldr	r3, [sp, #32]
 800c490:	4605      	mov	r5, r0
 800c492:	2b00      	cmp	r3, #0
 800c494:	dc61      	bgt.n	800c55a <_dtoa_r+0x952>
 800c496:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c498:	2b02      	cmp	r3, #2
 800c49a:	dc3b      	bgt.n	800c514 <_dtoa_r+0x90c>
 800c49c:	e05d      	b.n	800c55a <_dtoa_r+0x952>
 800c49e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c4a0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c4a4:	e746      	b.n	800c334 <_dtoa_r+0x72c>
 800c4a6:	9b07      	ldr	r3, [sp, #28]
 800c4a8:	1e5c      	subs	r4, r3, #1
 800c4aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4ac:	42a3      	cmp	r3, r4
 800c4ae:	bfbf      	itttt	lt
 800c4b0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c4b2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800c4b4:	1ae3      	sublt	r3, r4, r3
 800c4b6:	18d2      	addlt	r2, r2, r3
 800c4b8:	bfa8      	it	ge
 800c4ba:	1b1c      	subge	r4, r3, r4
 800c4bc:	9b07      	ldr	r3, [sp, #28]
 800c4be:	bfbe      	ittt	lt
 800c4c0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c4c2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800c4c4:	2400      	movlt	r4, #0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	bfb5      	itete	lt
 800c4ca:	eba8 0603 	sublt.w	r6, r8, r3
 800c4ce:	4646      	movge	r6, r8
 800c4d0:	2300      	movlt	r3, #0
 800c4d2:	9b07      	ldrge	r3, [sp, #28]
 800c4d4:	e730      	b.n	800c338 <_dtoa_r+0x730>
 800c4d6:	4646      	mov	r6, r8
 800c4d8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c4da:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c4dc:	e735      	b.n	800c34a <_dtoa_r+0x742>
 800c4de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c4e0:	e75c      	b.n	800c39c <_dtoa_r+0x794>
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	e788      	b.n	800c3f8 <_dtoa_r+0x7f0>
 800c4e6:	9b02      	ldr	r3, [sp, #8]
 800c4e8:	e786      	b.n	800c3f8 <_dtoa_r+0x7f0>
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4ee:	e788      	b.n	800c402 <_dtoa_r+0x7fa>
 800c4f0:	d09f      	beq.n	800c432 <_dtoa_r+0x82a>
 800c4f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4f4:	331c      	adds	r3, #28
 800c4f6:	441a      	add	r2, r3
 800c4f8:	4498      	add	r8, r3
 800c4fa:	441e      	add	r6, r3
 800c4fc:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4fe:	e798      	b.n	800c432 <_dtoa_r+0x82a>
 800c500:	4603      	mov	r3, r0
 800c502:	e7f6      	b.n	800c4f2 <_dtoa_r+0x8ea>
 800c504:	9b07      	ldr	r3, [sp, #28]
 800c506:	9704      	str	r7, [sp, #16]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	dc20      	bgt.n	800c54e <_dtoa_r+0x946>
 800c50c:	9308      	str	r3, [sp, #32]
 800c50e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c510:	2b02      	cmp	r3, #2
 800c512:	dd1e      	ble.n	800c552 <_dtoa_r+0x94a>
 800c514:	9b08      	ldr	r3, [sp, #32]
 800c516:	2b00      	cmp	r3, #0
 800c518:	f47f aebc 	bne.w	800c294 <_dtoa_r+0x68c>
 800c51c:	4621      	mov	r1, r4
 800c51e:	2205      	movs	r2, #5
 800c520:	4658      	mov	r0, fp
 800c522:	f000 f9e3 	bl	800c8ec <__multadd>
 800c526:	4601      	mov	r1, r0
 800c528:	4604      	mov	r4, r0
 800c52a:	4648      	mov	r0, r9
 800c52c:	f000 fbf4 	bl	800cd18 <__mcmp>
 800c530:	2800      	cmp	r0, #0
 800c532:	f77f aeaf 	ble.w	800c294 <_dtoa_r+0x68c>
 800c536:	2331      	movs	r3, #49	@ 0x31
 800c538:	4656      	mov	r6, sl
 800c53a:	f806 3b01 	strb.w	r3, [r6], #1
 800c53e:	9b04      	ldr	r3, [sp, #16]
 800c540:	3301      	adds	r3, #1
 800c542:	9304      	str	r3, [sp, #16]
 800c544:	e6aa      	b.n	800c29c <_dtoa_r+0x694>
 800c546:	9c07      	ldr	r4, [sp, #28]
 800c548:	9704      	str	r7, [sp, #16]
 800c54a:	4625      	mov	r5, r4
 800c54c:	e7f3      	b.n	800c536 <_dtoa_r+0x92e>
 800c54e:	9b07      	ldr	r3, [sp, #28]
 800c550:	9308      	str	r3, [sp, #32]
 800c552:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c554:	2b00      	cmp	r3, #0
 800c556:	f000 8104 	beq.w	800c762 <_dtoa_r+0xb5a>
 800c55a:	2e00      	cmp	r6, #0
 800c55c:	dd05      	ble.n	800c56a <_dtoa_r+0x962>
 800c55e:	4629      	mov	r1, r5
 800c560:	4632      	mov	r2, r6
 800c562:	4658      	mov	r0, fp
 800c564:	f000 fb6c 	bl	800cc40 <__lshift>
 800c568:	4605      	mov	r5, r0
 800c56a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d05a      	beq.n	800c626 <_dtoa_r+0xa1e>
 800c570:	4658      	mov	r0, fp
 800c572:	6869      	ldr	r1, [r5, #4]
 800c574:	f000 f958 	bl	800c828 <_Balloc>
 800c578:	4606      	mov	r6, r0
 800c57a:	b928      	cbnz	r0, 800c588 <_dtoa_r+0x980>
 800c57c:	4602      	mov	r2, r0
 800c57e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c582:	4b83      	ldr	r3, [pc, #524]	@ (800c790 <_dtoa_r+0xb88>)
 800c584:	f7ff bb54 	b.w	800bc30 <_dtoa_r+0x28>
 800c588:	692a      	ldr	r2, [r5, #16]
 800c58a:	f105 010c 	add.w	r1, r5, #12
 800c58e:	3202      	adds	r2, #2
 800c590:	0092      	lsls	r2, r2, #2
 800c592:	300c      	adds	r0, #12
 800c594:	f000 fd70 	bl	800d078 <memcpy>
 800c598:	2201      	movs	r2, #1
 800c59a:	4631      	mov	r1, r6
 800c59c:	4658      	mov	r0, fp
 800c59e:	f000 fb4f 	bl	800cc40 <__lshift>
 800c5a2:	462f      	mov	r7, r5
 800c5a4:	4605      	mov	r5, r0
 800c5a6:	f10a 0301 	add.w	r3, sl, #1
 800c5aa:	9307      	str	r3, [sp, #28]
 800c5ac:	9b08      	ldr	r3, [sp, #32]
 800c5ae:	4453      	add	r3, sl
 800c5b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c5b2:	9b02      	ldr	r3, [sp, #8]
 800c5b4:	f003 0301 	and.w	r3, r3, #1
 800c5b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5ba:	9b07      	ldr	r3, [sp, #28]
 800c5bc:	4621      	mov	r1, r4
 800c5be:	3b01      	subs	r3, #1
 800c5c0:	4648      	mov	r0, r9
 800c5c2:	9302      	str	r3, [sp, #8]
 800c5c4:	f7ff fa97 	bl	800baf6 <quorem>
 800c5c8:	4639      	mov	r1, r7
 800c5ca:	9008      	str	r0, [sp, #32]
 800c5cc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c5d0:	4648      	mov	r0, r9
 800c5d2:	f000 fba1 	bl	800cd18 <__mcmp>
 800c5d6:	462a      	mov	r2, r5
 800c5d8:	9009      	str	r0, [sp, #36]	@ 0x24
 800c5da:	4621      	mov	r1, r4
 800c5dc:	4658      	mov	r0, fp
 800c5de:	f000 fbb7 	bl	800cd50 <__mdiff>
 800c5e2:	68c2      	ldr	r2, [r0, #12]
 800c5e4:	4606      	mov	r6, r0
 800c5e6:	bb02      	cbnz	r2, 800c62a <_dtoa_r+0xa22>
 800c5e8:	4601      	mov	r1, r0
 800c5ea:	4648      	mov	r0, r9
 800c5ec:	f000 fb94 	bl	800cd18 <__mcmp>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	4631      	mov	r1, r6
 800c5f4:	4658      	mov	r0, fp
 800c5f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c5f8:	f000 f956 	bl	800c8a8 <_Bfree>
 800c5fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c5fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c600:	9e07      	ldr	r6, [sp, #28]
 800c602:	ea43 0102 	orr.w	r1, r3, r2
 800c606:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c608:	4319      	orrs	r1, r3
 800c60a:	d110      	bne.n	800c62e <_dtoa_r+0xa26>
 800c60c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c610:	d029      	beq.n	800c666 <_dtoa_r+0xa5e>
 800c612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c614:	2b00      	cmp	r3, #0
 800c616:	dd02      	ble.n	800c61e <_dtoa_r+0xa16>
 800c618:	9b08      	ldr	r3, [sp, #32]
 800c61a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c61e:	9b02      	ldr	r3, [sp, #8]
 800c620:	f883 8000 	strb.w	r8, [r3]
 800c624:	e63b      	b.n	800c29e <_dtoa_r+0x696>
 800c626:	4628      	mov	r0, r5
 800c628:	e7bb      	b.n	800c5a2 <_dtoa_r+0x99a>
 800c62a:	2201      	movs	r2, #1
 800c62c:	e7e1      	b.n	800c5f2 <_dtoa_r+0x9ea>
 800c62e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c630:	2b00      	cmp	r3, #0
 800c632:	db04      	blt.n	800c63e <_dtoa_r+0xa36>
 800c634:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800c636:	430b      	orrs	r3, r1
 800c638:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c63a:	430b      	orrs	r3, r1
 800c63c:	d120      	bne.n	800c680 <_dtoa_r+0xa78>
 800c63e:	2a00      	cmp	r2, #0
 800c640:	dded      	ble.n	800c61e <_dtoa_r+0xa16>
 800c642:	4649      	mov	r1, r9
 800c644:	2201      	movs	r2, #1
 800c646:	4658      	mov	r0, fp
 800c648:	f000 fafa 	bl	800cc40 <__lshift>
 800c64c:	4621      	mov	r1, r4
 800c64e:	4681      	mov	r9, r0
 800c650:	f000 fb62 	bl	800cd18 <__mcmp>
 800c654:	2800      	cmp	r0, #0
 800c656:	dc03      	bgt.n	800c660 <_dtoa_r+0xa58>
 800c658:	d1e1      	bne.n	800c61e <_dtoa_r+0xa16>
 800c65a:	f018 0f01 	tst.w	r8, #1
 800c65e:	d0de      	beq.n	800c61e <_dtoa_r+0xa16>
 800c660:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c664:	d1d8      	bne.n	800c618 <_dtoa_r+0xa10>
 800c666:	2339      	movs	r3, #57	@ 0x39
 800c668:	9a02      	ldr	r2, [sp, #8]
 800c66a:	7013      	strb	r3, [r2, #0]
 800c66c:	4633      	mov	r3, r6
 800c66e:	461e      	mov	r6, r3
 800c670:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c674:	3b01      	subs	r3, #1
 800c676:	2a39      	cmp	r2, #57	@ 0x39
 800c678:	d052      	beq.n	800c720 <_dtoa_r+0xb18>
 800c67a:	3201      	adds	r2, #1
 800c67c:	701a      	strb	r2, [r3, #0]
 800c67e:	e60e      	b.n	800c29e <_dtoa_r+0x696>
 800c680:	2a00      	cmp	r2, #0
 800c682:	dd07      	ble.n	800c694 <_dtoa_r+0xa8c>
 800c684:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c688:	d0ed      	beq.n	800c666 <_dtoa_r+0xa5e>
 800c68a:	9a02      	ldr	r2, [sp, #8]
 800c68c:	f108 0301 	add.w	r3, r8, #1
 800c690:	7013      	strb	r3, [r2, #0]
 800c692:	e604      	b.n	800c29e <_dtoa_r+0x696>
 800c694:	9b07      	ldr	r3, [sp, #28]
 800c696:	9a07      	ldr	r2, [sp, #28]
 800c698:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c69c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d028      	beq.n	800c6f4 <_dtoa_r+0xaec>
 800c6a2:	4649      	mov	r1, r9
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	220a      	movs	r2, #10
 800c6a8:	4658      	mov	r0, fp
 800c6aa:	f000 f91f 	bl	800c8ec <__multadd>
 800c6ae:	42af      	cmp	r7, r5
 800c6b0:	4681      	mov	r9, r0
 800c6b2:	f04f 0300 	mov.w	r3, #0
 800c6b6:	f04f 020a 	mov.w	r2, #10
 800c6ba:	4639      	mov	r1, r7
 800c6bc:	4658      	mov	r0, fp
 800c6be:	d107      	bne.n	800c6d0 <_dtoa_r+0xac8>
 800c6c0:	f000 f914 	bl	800c8ec <__multadd>
 800c6c4:	4607      	mov	r7, r0
 800c6c6:	4605      	mov	r5, r0
 800c6c8:	9b07      	ldr	r3, [sp, #28]
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	9307      	str	r3, [sp, #28]
 800c6ce:	e774      	b.n	800c5ba <_dtoa_r+0x9b2>
 800c6d0:	f000 f90c 	bl	800c8ec <__multadd>
 800c6d4:	4629      	mov	r1, r5
 800c6d6:	4607      	mov	r7, r0
 800c6d8:	2300      	movs	r3, #0
 800c6da:	220a      	movs	r2, #10
 800c6dc:	4658      	mov	r0, fp
 800c6de:	f000 f905 	bl	800c8ec <__multadd>
 800c6e2:	4605      	mov	r5, r0
 800c6e4:	e7f0      	b.n	800c6c8 <_dtoa_r+0xac0>
 800c6e6:	9b08      	ldr	r3, [sp, #32]
 800c6e8:	2700      	movs	r7, #0
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	bfcc      	ite	gt
 800c6ee:	461e      	movgt	r6, r3
 800c6f0:	2601      	movle	r6, #1
 800c6f2:	4456      	add	r6, sl
 800c6f4:	4649      	mov	r1, r9
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	4658      	mov	r0, fp
 800c6fa:	f000 faa1 	bl	800cc40 <__lshift>
 800c6fe:	4621      	mov	r1, r4
 800c700:	4681      	mov	r9, r0
 800c702:	f000 fb09 	bl	800cd18 <__mcmp>
 800c706:	2800      	cmp	r0, #0
 800c708:	dcb0      	bgt.n	800c66c <_dtoa_r+0xa64>
 800c70a:	d102      	bne.n	800c712 <_dtoa_r+0xb0a>
 800c70c:	f018 0f01 	tst.w	r8, #1
 800c710:	d1ac      	bne.n	800c66c <_dtoa_r+0xa64>
 800c712:	4633      	mov	r3, r6
 800c714:	461e      	mov	r6, r3
 800c716:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c71a:	2a30      	cmp	r2, #48	@ 0x30
 800c71c:	d0fa      	beq.n	800c714 <_dtoa_r+0xb0c>
 800c71e:	e5be      	b.n	800c29e <_dtoa_r+0x696>
 800c720:	459a      	cmp	sl, r3
 800c722:	d1a4      	bne.n	800c66e <_dtoa_r+0xa66>
 800c724:	9b04      	ldr	r3, [sp, #16]
 800c726:	3301      	adds	r3, #1
 800c728:	9304      	str	r3, [sp, #16]
 800c72a:	2331      	movs	r3, #49	@ 0x31
 800c72c:	f88a 3000 	strb.w	r3, [sl]
 800c730:	e5b5      	b.n	800c29e <_dtoa_r+0x696>
 800c732:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c734:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c794 <_dtoa_r+0xb8c>
 800c738:	b11b      	cbz	r3, 800c742 <_dtoa_r+0xb3a>
 800c73a:	f10a 0308 	add.w	r3, sl, #8
 800c73e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c740:	6013      	str	r3, [r2, #0]
 800c742:	4650      	mov	r0, sl
 800c744:	b017      	add	sp, #92	@ 0x5c
 800c746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	f77f ae3d 	ble.w	800c3cc <_dtoa_r+0x7c4>
 800c752:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c754:	930a      	str	r3, [sp, #40]	@ 0x28
 800c756:	2001      	movs	r0, #1
 800c758:	e65b      	b.n	800c412 <_dtoa_r+0x80a>
 800c75a:	9b08      	ldr	r3, [sp, #32]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	f77f aed6 	ble.w	800c50e <_dtoa_r+0x906>
 800c762:	4656      	mov	r6, sl
 800c764:	4621      	mov	r1, r4
 800c766:	4648      	mov	r0, r9
 800c768:	f7ff f9c5 	bl	800baf6 <quorem>
 800c76c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c770:	9b08      	ldr	r3, [sp, #32]
 800c772:	f806 8b01 	strb.w	r8, [r6], #1
 800c776:	eba6 020a 	sub.w	r2, r6, sl
 800c77a:	4293      	cmp	r3, r2
 800c77c:	ddb3      	ble.n	800c6e6 <_dtoa_r+0xade>
 800c77e:	4649      	mov	r1, r9
 800c780:	2300      	movs	r3, #0
 800c782:	220a      	movs	r2, #10
 800c784:	4658      	mov	r0, fp
 800c786:	f000 f8b1 	bl	800c8ec <__multadd>
 800c78a:	4681      	mov	r9, r0
 800c78c:	e7ea      	b.n	800c764 <_dtoa_r+0xb5c>
 800c78e:	bf00      	nop
 800c790:	0800dfa4 	.word	0x0800dfa4
 800c794:	0800df28 	.word	0x0800df28

0800c798 <_free_r>:
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	4605      	mov	r5, r0
 800c79c:	2900      	cmp	r1, #0
 800c79e:	d040      	beq.n	800c822 <_free_r+0x8a>
 800c7a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7a4:	1f0c      	subs	r4, r1, #4
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	bfb8      	it	lt
 800c7aa:	18e4      	addlt	r4, r4, r3
 800c7ac:	f7fe fb98 	bl	800aee0 <__malloc_lock>
 800c7b0:	4a1c      	ldr	r2, [pc, #112]	@ (800c824 <_free_r+0x8c>)
 800c7b2:	6813      	ldr	r3, [r2, #0]
 800c7b4:	b933      	cbnz	r3, 800c7c4 <_free_r+0x2c>
 800c7b6:	6063      	str	r3, [r4, #4]
 800c7b8:	6014      	str	r4, [r2, #0]
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7c0:	f7fe bb94 	b.w	800aeec <__malloc_unlock>
 800c7c4:	42a3      	cmp	r3, r4
 800c7c6:	d908      	bls.n	800c7da <_free_r+0x42>
 800c7c8:	6820      	ldr	r0, [r4, #0]
 800c7ca:	1821      	adds	r1, r4, r0
 800c7cc:	428b      	cmp	r3, r1
 800c7ce:	bf01      	itttt	eq
 800c7d0:	6819      	ldreq	r1, [r3, #0]
 800c7d2:	685b      	ldreq	r3, [r3, #4]
 800c7d4:	1809      	addeq	r1, r1, r0
 800c7d6:	6021      	streq	r1, [r4, #0]
 800c7d8:	e7ed      	b.n	800c7b6 <_free_r+0x1e>
 800c7da:	461a      	mov	r2, r3
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	b10b      	cbz	r3, 800c7e4 <_free_r+0x4c>
 800c7e0:	42a3      	cmp	r3, r4
 800c7e2:	d9fa      	bls.n	800c7da <_free_r+0x42>
 800c7e4:	6811      	ldr	r1, [r2, #0]
 800c7e6:	1850      	adds	r0, r2, r1
 800c7e8:	42a0      	cmp	r0, r4
 800c7ea:	d10b      	bne.n	800c804 <_free_r+0x6c>
 800c7ec:	6820      	ldr	r0, [r4, #0]
 800c7ee:	4401      	add	r1, r0
 800c7f0:	1850      	adds	r0, r2, r1
 800c7f2:	4283      	cmp	r3, r0
 800c7f4:	6011      	str	r1, [r2, #0]
 800c7f6:	d1e0      	bne.n	800c7ba <_free_r+0x22>
 800c7f8:	6818      	ldr	r0, [r3, #0]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	4408      	add	r0, r1
 800c7fe:	6010      	str	r0, [r2, #0]
 800c800:	6053      	str	r3, [r2, #4]
 800c802:	e7da      	b.n	800c7ba <_free_r+0x22>
 800c804:	d902      	bls.n	800c80c <_free_r+0x74>
 800c806:	230c      	movs	r3, #12
 800c808:	602b      	str	r3, [r5, #0]
 800c80a:	e7d6      	b.n	800c7ba <_free_r+0x22>
 800c80c:	6820      	ldr	r0, [r4, #0]
 800c80e:	1821      	adds	r1, r4, r0
 800c810:	428b      	cmp	r3, r1
 800c812:	bf01      	itttt	eq
 800c814:	6819      	ldreq	r1, [r3, #0]
 800c816:	685b      	ldreq	r3, [r3, #4]
 800c818:	1809      	addeq	r1, r1, r0
 800c81a:	6021      	streq	r1, [r4, #0]
 800c81c:	6063      	str	r3, [r4, #4]
 800c81e:	6054      	str	r4, [r2, #4]
 800c820:	e7cb      	b.n	800c7ba <_free_r+0x22>
 800c822:	bd38      	pop	{r3, r4, r5, pc}
 800c824:	200017bc 	.word	0x200017bc

0800c828 <_Balloc>:
 800c828:	b570      	push	{r4, r5, r6, lr}
 800c82a:	69c6      	ldr	r6, [r0, #28]
 800c82c:	4604      	mov	r4, r0
 800c82e:	460d      	mov	r5, r1
 800c830:	b976      	cbnz	r6, 800c850 <_Balloc+0x28>
 800c832:	2010      	movs	r0, #16
 800c834:	f7fe faa2 	bl	800ad7c <malloc>
 800c838:	4602      	mov	r2, r0
 800c83a:	61e0      	str	r0, [r4, #28]
 800c83c:	b920      	cbnz	r0, 800c848 <_Balloc+0x20>
 800c83e:	216b      	movs	r1, #107	@ 0x6b
 800c840:	4b17      	ldr	r3, [pc, #92]	@ (800c8a0 <_Balloc+0x78>)
 800c842:	4818      	ldr	r0, [pc, #96]	@ (800c8a4 <_Balloc+0x7c>)
 800c844:	f000 fc26 	bl	800d094 <__assert_func>
 800c848:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c84c:	6006      	str	r6, [r0, #0]
 800c84e:	60c6      	str	r6, [r0, #12]
 800c850:	69e6      	ldr	r6, [r4, #28]
 800c852:	68f3      	ldr	r3, [r6, #12]
 800c854:	b183      	cbz	r3, 800c878 <_Balloc+0x50>
 800c856:	69e3      	ldr	r3, [r4, #28]
 800c858:	68db      	ldr	r3, [r3, #12]
 800c85a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c85e:	b9b8      	cbnz	r0, 800c890 <_Balloc+0x68>
 800c860:	2101      	movs	r1, #1
 800c862:	fa01 f605 	lsl.w	r6, r1, r5
 800c866:	1d72      	adds	r2, r6, #5
 800c868:	4620      	mov	r0, r4
 800c86a:	0092      	lsls	r2, r2, #2
 800c86c:	f000 fc30 	bl	800d0d0 <_calloc_r>
 800c870:	b160      	cbz	r0, 800c88c <_Balloc+0x64>
 800c872:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c876:	e00e      	b.n	800c896 <_Balloc+0x6e>
 800c878:	2221      	movs	r2, #33	@ 0x21
 800c87a:	2104      	movs	r1, #4
 800c87c:	4620      	mov	r0, r4
 800c87e:	f000 fc27 	bl	800d0d0 <_calloc_r>
 800c882:	69e3      	ldr	r3, [r4, #28]
 800c884:	60f0      	str	r0, [r6, #12]
 800c886:	68db      	ldr	r3, [r3, #12]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d1e4      	bne.n	800c856 <_Balloc+0x2e>
 800c88c:	2000      	movs	r0, #0
 800c88e:	bd70      	pop	{r4, r5, r6, pc}
 800c890:	6802      	ldr	r2, [r0, #0]
 800c892:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c896:	2300      	movs	r3, #0
 800c898:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c89c:	e7f7      	b.n	800c88e <_Balloc+0x66>
 800c89e:	bf00      	nop
 800c8a0:	0800df35 	.word	0x0800df35
 800c8a4:	0800dfb5 	.word	0x0800dfb5

0800c8a8 <_Bfree>:
 800c8a8:	b570      	push	{r4, r5, r6, lr}
 800c8aa:	69c6      	ldr	r6, [r0, #28]
 800c8ac:	4605      	mov	r5, r0
 800c8ae:	460c      	mov	r4, r1
 800c8b0:	b976      	cbnz	r6, 800c8d0 <_Bfree+0x28>
 800c8b2:	2010      	movs	r0, #16
 800c8b4:	f7fe fa62 	bl	800ad7c <malloc>
 800c8b8:	4602      	mov	r2, r0
 800c8ba:	61e8      	str	r0, [r5, #28]
 800c8bc:	b920      	cbnz	r0, 800c8c8 <_Bfree+0x20>
 800c8be:	218f      	movs	r1, #143	@ 0x8f
 800c8c0:	4b08      	ldr	r3, [pc, #32]	@ (800c8e4 <_Bfree+0x3c>)
 800c8c2:	4809      	ldr	r0, [pc, #36]	@ (800c8e8 <_Bfree+0x40>)
 800c8c4:	f000 fbe6 	bl	800d094 <__assert_func>
 800c8c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c8cc:	6006      	str	r6, [r0, #0]
 800c8ce:	60c6      	str	r6, [r0, #12]
 800c8d0:	b13c      	cbz	r4, 800c8e2 <_Bfree+0x3a>
 800c8d2:	69eb      	ldr	r3, [r5, #28]
 800c8d4:	6862      	ldr	r2, [r4, #4]
 800c8d6:	68db      	ldr	r3, [r3, #12]
 800c8d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c8dc:	6021      	str	r1, [r4, #0]
 800c8de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c8e2:	bd70      	pop	{r4, r5, r6, pc}
 800c8e4:	0800df35 	.word	0x0800df35
 800c8e8:	0800dfb5 	.word	0x0800dfb5

0800c8ec <__multadd>:
 800c8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8f0:	4607      	mov	r7, r0
 800c8f2:	460c      	mov	r4, r1
 800c8f4:	461e      	mov	r6, r3
 800c8f6:	2000      	movs	r0, #0
 800c8f8:	690d      	ldr	r5, [r1, #16]
 800c8fa:	f101 0c14 	add.w	ip, r1, #20
 800c8fe:	f8dc 3000 	ldr.w	r3, [ip]
 800c902:	3001      	adds	r0, #1
 800c904:	b299      	uxth	r1, r3
 800c906:	fb02 6101 	mla	r1, r2, r1, r6
 800c90a:	0c1e      	lsrs	r6, r3, #16
 800c90c:	0c0b      	lsrs	r3, r1, #16
 800c90e:	fb02 3306 	mla	r3, r2, r6, r3
 800c912:	b289      	uxth	r1, r1
 800c914:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c918:	4285      	cmp	r5, r0
 800c91a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c91e:	f84c 1b04 	str.w	r1, [ip], #4
 800c922:	dcec      	bgt.n	800c8fe <__multadd+0x12>
 800c924:	b30e      	cbz	r6, 800c96a <__multadd+0x7e>
 800c926:	68a3      	ldr	r3, [r4, #8]
 800c928:	42ab      	cmp	r3, r5
 800c92a:	dc19      	bgt.n	800c960 <__multadd+0x74>
 800c92c:	6861      	ldr	r1, [r4, #4]
 800c92e:	4638      	mov	r0, r7
 800c930:	3101      	adds	r1, #1
 800c932:	f7ff ff79 	bl	800c828 <_Balloc>
 800c936:	4680      	mov	r8, r0
 800c938:	b928      	cbnz	r0, 800c946 <__multadd+0x5a>
 800c93a:	4602      	mov	r2, r0
 800c93c:	21ba      	movs	r1, #186	@ 0xba
 800c93e:	4b0c      	ldr	r3, [pc, #48]	@ (800c970 <__multadd+0x84>)
 800c940:	480c      	ldr	r0, [pc, #48]	@ (800c974 <__multadd+0x88>)
 800c942:	f000 fba7 	bl	800d094 <__assert_func>
 800c946:	6922      	ldr	r2, [r4, #16]
 800c948:	f104 010c 	add.w	r1, r4, #12
 800c94c:	3202      	adds	r2, #2
 800c94e:	0092      	lsls	r2, r2, #2
 800c950:	300c      	adds	r0, #12
 800c952:	f000 fb91 	bl	800d078 <memcpy>
 800c956:	4621      	mov	r1, r4
 800c958:	4638      	mov	r0, r7
 800c95a:	f7ff ffa5 	bl	800c8a8 <_Bfree>
 800c95e:	4644      	mov	r4, r8
 800c960:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c964:	3501      	adds	r5, #1
 800c966:	615e      	str	r6, [r3, #20]
 800c968:	6125      	str	r5, [r4, #16]
 800c96a:	4620      	mov	r0, r4
 800c96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c970:	0800dfa4 	.word	0x0800dfa4
 800c974:	0800dfb5 	.word	0x0800dfb5

0800c978 <__hi0bits>:
 800c978:	4603      	mov	r3, r0
 800c97a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c97e:	bf3a      	itte	cc
 800c980:	0403      	lslcc	r3, r0, #16
 800c982:	2010      	movcc	r0, #16
 800c984:	2000      	movcs	r0, #0
 800c986:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c98a:	bf3c      	itt	cc
 800c98c:	021b      	lslcc	r3, r3, #8
 800c98e:	3008      	addcc	r0, #8
 800c990:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c994:	bf3c      	itt	cc
 800c996:	011b      	lslcc	r3, r3, #4
 800c998:	3004      	addcc	r0, #4
 800c99a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c99e:	bf3c      	itt	cc
 800c9a0:	009b      	lslcc	r3, r3, #2
 800c9a2:	3002      	addcc	r0, #2
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	db05      	blt.n	800c9b4 <__hi0bits+0x3c>
 800c9a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c9ac:	f100 0001 	add.w	r0, r0, #1
 800c9b0:	bf08      	it	eq
 800c9b2:	2020      	moveq	r0, #32
 800c9b4:	4770      	bx	lr

0800c9b6 <__lo0bits>:
 800c9b6:	6803      	ldr	r3, [r0, #0]
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	f013 0007 	ands.w	r0, r3, #7
 800c9be:	d00b      	beq.n	800c9d8 <__lo0bits+0x22>
 800c9c0:	07d9      	lsls	r1, r3, #31
 800c9c2:	d421      	bmi.n	800ca08 <__lo0bits+0x52>
 800c9c4:	0798      	lsls	r0, r3, #30
 800c9c6:	bf49      	itett	mi
 800c9c8:	085b      	lsrmi	r3, r3, #1
 800c9ca:	089b      	lsrpl	r3, r3, #2
 800c9cc:	2001      	movmi	r0, #1
 800c9ce:	6013      	strmi	r3, [r2, #0]
 800c9d0:	bf5c      	itt	pl
 800c9d2:	2002      	movpl	r0, #2
 800c9d4:	6013      	strpl	r3, [r2, #0]
 800c9d6:	4770      	bx	lr
 800c9d8:	b299      	uxth	r1, r3
 800c9da:	b909      	cbnz	r1, 800c9e0 <__lo0bits+0x2a>
 800c9dc:	2010      	movs	r0, #16
 800c9de:	0c1b      	lsrs	r3, r3, #16
 800c9e0:	b2d9      	uxtb	r1, r3
 800c9e2:	b909      	cbnz	r1, 800c9e8 <__lo0bits+0x32>
 800c9e4:	3008      	adds	r0, #8
 800c9e6:	0a1b      	lsrs	r3, r3, #8
 800c9e8:	0719      	lsls	r1, r3, #28
 800c9ea:	bf04      	itt	eq
 800c9ec:	091b      	lsreq	r3, r3, #4
 800c9ee:	3004      	addeq	r0, #4
 800c9f0:	0799      	lsls	r1, r3, #30
 800c9f2:	bf04      	itt	eq
 800c9f4:	089b      	lsreq	r3, r3, #2
 800c9f6:	3002      	addeq	r0, #2
 800c9f8:	07d9      	lsls	r1, r3, #31
 800c9fa:	d403      	bmi.n	800ca04 <__lo0bits+0x4e>
 800c9fc:	085b      	lsrs	r3, r3, #1
 800c9fe:	f100 0001 	add.w	r0, r0, #1
 800ca02:	d003      	beq.n	800ca0c <__lo0bits+0x56>
 800ca04:	6013      	str	r3, [r2, #0]
 800ca06:	4770      	bx	lr
 800ca08:	2000      	movs	r0, #0
 800ca0a:	4770      	bx	lr
 800ca0c:	2020      	movs	r0, #32
 800ca0e:	4770      	bx	lr

0800ca10 <__i2b>:
 800ca10:	b510      	push	{r4, lr}
 800ca12:	460c      	mov	r4, r1
 800ca14:	2101      	movs	r1, #1
 800ca16:	f7ff ff07 	bl	800c828 <_Balloc>
 800ca1a:	4602      	mov	r2, r0
 800ca1c:	b928      	cbnz	r0, 800ca2a <__i2b+0x1a>
 800ca1e:	f240 1145 	movw	r1, #325	@ 0x145
 800ca22:	4b04      	ldr	r3, [pc, #16]	@ (800ca34 <__i2b+0x24>)
 800ca24:	4804      	ldr	r0, [pc, #16]	@ (800ca38 <__i2b+0x28>)
 800ca26:	f000 fb35 	bl	800d094 <__assert_func>
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	6144      	str	r4, [r0, #20]
 800ca2e:	6103      	str	r3, [r0, #16]
 800ca30:	bd10      	pop	{r4, pc}
 800ca32:	bf00      	nop
 800ca34:	0800dfa4 	.word	0x0800dfa4
 800ca38:	0800dfb5 	.word	0x0800dfb5

0800ca3c <__multiply>:
 800ca3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca40:	4614      	mov	r4, r2
 800ca42:	690a      	ldr	r2, [r1, #16]
 800ca44:	6923      	ldr	r3, [r4, #16]
 800ca46:	460f      	mov	r7, r1
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	bfa2      	ittt	ge
 800ca4c:	4623      	movge	r3, r4
 800ca4e:	460c      	movge	r4, r1
 800ca50:	461f      	movge	r7, r3
 800ca52:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ca56:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ca5a:	68a3      	ldr	r3, [r4, #8]
 800ca5c:	6861      	ldr	r1, [r4, #4]
 800ca5e:	eb0a 0609 	add.w	r6, sl, r9
 800ca62:	42b3      	cmp	r3, r6
 800ca64:	b085      	sub	sp, #20
 800ca66:	bfb8      	it	lt
 800ca68:	3101      	addlt	r1, #1
 800ca6a:	f7ff fedd 	bl	800c828 <_Balloc>
 800ca6e:	b930      	cbnz	r0, 800ca7e <__multiply+0x42>
 800ca70:	4602      	mov	r2, r0
 800ca72:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ca76:	4b43      	ldr	r3, [pc, #268]	@ (800cb84 <__multiply+0x148>)
 800ca78:	4843      	ldr	r0, [pc, #268]	@ (800cb88 <__multiply+0x14c>)
 800ca7a:	f000 fb0b 	bl	800d094 <__assert_func>
 800ca7e:	f100 0514 	add.w	r5, r0, #20
 800ca82:	462b      	mov	r3, r5
 800ca84:	2200      	movs	r2, #0
 800ca86:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ca8a:	4543      	cmp	r3, r8
 800ca8c:	d321      	bcc.n	800cad2 <__multiply+0x96>
 800ca8e:	f107 0114 	add.w	r1, r7, #20
 800ca92:	f104 0214 	add.w	r2, r4, #20
 800ca96:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ca9a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ca9e:	9302      	str	r3, [sp, #8]
 800caa0:	1b13      	subs	r3, r2, r4
 800caa2:	3b15      	subs	r3, #21
 800caa4:	f023 0303 	bic.w	r3, r3, #3
 800caa8:	3304      	adds	r3, #4
 800caaa:	f104 0715 	add.w	r7, r4, #21
 800caae:	42ba      	cmp	r2, r7
 800cab0:	bf38      	it	cc
 800cab2:	2304      	movcc	r3, #4
 800cab4:	9301      	str	r3, [sp, #4]
 800cab6:	9b02      	ldr	r3, [sp, #8]
 800cab8:	9103      	str	r1, [sp, #12]
 800caba:	428b      	cmp	r3, r1
 800cabc:	d80c      	bhi.n	800cad8 <__multiply+0x9c>
 800cabe:	2e00      	cmp	r6, #0
 800cac0:	dd03      	ble.n	800caca <__multiply+0x8e>
 800cac2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d05a      	beq.n	800cb80 <__multiply+0x144>
 800caca:	6106      	str	r6, [r0, #16]
 800cacc:	b005      	add	sp, #20
 800cace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad2:	f843 2b04 	str.w	r2, [r3], #4
 800cad6:	e7d8      	b.n	800ca8a <__multiply+0x4e>
 800cad8:	f8b1 a000 	ldrh.w	sl, [r1]
 800cadc:	f1ba 0f00 	cmp.w	sl, #0
 800cae0:	d023      	beq.n	800cb2a <__multiply+0xee>
 800cae2:	46a9      	mov	r9, r5
 800cae4:	f04f 0c00 	mov.w	ip, #0
 800cae8:	f104 0e14 	add.w	lr, r4, #20
 800caec:	f85e 7b04 	ldr.w	r7, [lr], #4
 800caf0:	f8d9 3000 	ldr.w	r3, [r9]
 800caf4:	fa1f fb87 	uxth.w	fp, r7
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	fb0a 330b 	mla	r3, sl, fp, r3
 800cafe:	4463      	add	r3, ip
 800cb00:	f8d9 c000 	ldr.w	ip, [r9]
 800cb04:	0c3f      	lsrs	r7, r7, #16
 800cb06:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cb0a:	fb0a c707 	mla	r7, sl, r7, ip
 800cb0e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cb18:	4572      	cmp	r2, lr
 800cb1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cb1e:	f849 3b04 	str.w	r3, [r9], #4
 800cb22:	d8e3      	bhi.n	800caec <__multiply+0xb0>
 800cb24:	9b01      	ldr	r3, [sp, #4]
 800cb26:	f845 c003 	str.w	ip, [r5, r3]
 800cb2a:	9b03      	ldr	r3, [sp, #12]
 800cb2c:	3104      	adds	r1, #4
 800cb2e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cb32:	f1b9 0f00 	cmp.w	r9, #0
 800cb36:	d021      	beq.n	800cb7c <__multiply+0x140>
 800cb38:	46ae      	mov	lr, r5
 800cb3a:	f04f 0a00 	mov.w	sl, #0
 800cb3e:	682b      	ldr	r3, [r5, #0]
 800cb40:	f104 0c14 	add.w	ip, r4, #20
 800cb44:	f8bc b000 	ldrh.w	fp, [ip]
 800cb48:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cb4c:	b29b      	uxth	r3, r3
 800cb4e:	fb09 770b 	mla	r7, r9, fp, r7
 800cb52:	4457      	add	r7, sl
 800cb54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cb58:	f84e 3b04 	str.w	r3, [lr], #4
 800cb5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cb60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb64:	f8be 3000 	ldrh.w	r3, [lr]
 800cb68:	4562      	cmp	r2, ip
 800cb6a:	fb09 330a 	mla	r3, r9, sl, r3
 800cb6e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cb72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cb76:	d8e5      	bhi.n	800cb44 <__multiply+0x108>
 800cb78:	9f01      	ldr	r7, [sp, #4]
 800cb7a:	51eb      	str	r3, [r5, r7]
 800cb7c:	3504      	adds	r5, #4
 800cb7e:	e79a      	b.n	800cab6 <__multiply+0x7a>
 800cb80:	3e01      	subs	r6, #1
 800cb82:	e79c      	b.n	800cabe <__multiply+0x82>
 800cb84:	0800dfa4 	.word	0x0800dfa4
 800cb88:	0800dfb5 	.word	0x0800dfb5

0800cb8c <__pow5mult>:
 800cb8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb90:	4615      	mov	r5, r2
 800cb92:	f012 0203 	ands.w	r2, r2, #3
 800cb96:	4607      	mov	r7, r0
 800cb98:	460e      	mov	r6, r1
 800cb9a:	d007      	beq.n	800cbac <__pow5mult+0x20>
 800cb9c:	4c25      	ldr	r4, [pc, #148]	@ (800cc34 <__pow5mult+0xa8>)
 800cb9e:	3a01      	subs	r2, #1
 800cba0:	2300      	movs	r3, #0
 800cba2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cba6:	f7ff fea1 	bl	800c8ec <__multadd>
 800cbaa:	4606      	mov	r6, r0
 800cbac:	10ad      	asrs	r5, r5, #2
 800cbae:	d03d      	beq.n	800cc2c <__pow5mult+0xa0>
 800cbb0:	69fc      	ldr	r4, [r7, #28]
 800cbb2:	b97c      	cbnz	r4, 800cbd4 <__pow5mult+0x48>
 800cbb4:	2010      	movs	r0, #16
 800cbb6:	f7fe f8e1 	bl	800ad7c <malloc>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	61f8      	str	r0, [r7, #28]
 800cbbe:	b928      	cbnz	r0, 800cbcc <__pow5mult+0x40>
 800cbc0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cbc4:	4b1c      	ldr	r3, [pc, #112]	@ (800cc38 <__pow5mult+0xac>)
 800cbc6:	481d      	ldr	r0, [pc, #116]	@ (800cc3c <__pow5mult+0xb0>)
 800cbc8:	f000 fa64 	bl	800d094 <__assert_func>
 800cbcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cbd0:	6004      	str	r4, [r0, #0]
 800cbd2:	60c4      	str	r4, [r0, #12]
 800cbd4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cbd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cbdc:	b94c      	cbnz	r4, 800cbf2 <__pow5mult+0x66>
 800cbde:	f240 2171 	movw	r1, #625	@ 0x271
 800cbe2:	4638      	mov	r0, r7
 800cbe4:	f7ff ff14 	bl	800ca10 <__i2b>
 800cbe8:	2300      	movs	r3, #0
 800cbea:	4604      	mov	r4, r0
 800cbec:	f8c8 0008 	str.w	r0, [r8, #8]
 800cbf0:	6003      	str	r3, [r0, #0]
 800cbf2:	f04f 0900 	mov.w	r9, #0
 800cbf6:	07eb      	lsls	r3, r5, #31
 800cbf8:	d50a      	bpl.n	800cc10 <__pow5mult+0x84>
 800cbfa:	4631      	mov	r1, r6
 800cbfc:	4622      	mov	r2, r4
 800cbfe:	4638      	mov	r0, r7
 800cc00:	f7ff ff1c 	bl	800ca3c <__multiply>
 800cc04:	4680      	mov	r8, r0
 800cc06:	4631      	mov	r1, r6
 800cc08:	4638      	mov	r0, r7
 800cc0a:	f7ff fe4d 	bl	800c8a8 <_Bfree>
 800cc0e:	4646      	mov	r6, r8
 800cc10:	106d      	asrs	r5, r5, #1
 800cc12:	d00b      	beq.n	800cc2c <__pow5mult+0xa0>
 800cc14:	6820      	ldr	r0, [r4, #0]
 800cc16:	b938      	cbnz	r0, 800cc28 <__pow5mult+0x9c>
 800cc18:	4622      	mov	r2, r4
 800cc1a:	4621      	mov	r1, r4
 800cc1c:	4638      	mov	r0, r7
 800cc1e:	f7ff ff0d 	bl	800ca3c <__multiply>
 800cc22:	6020      	str	r0, [r4, #0]
 800cc24:	f8c0 9000 	str.w	r9, [r0]
 800cc28:	4604      	mov	r4, r0
 800cc2a:	e7e4      	b.n	800cbf6 <__pow5mult+0x6a>
 800cc2c:	4630      	mov	r0, r6
 800cc2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc32:	bf00      	nop
 800cc34:	0800e010 	.word	0x0800e010
 800cc38:	0800df35 	.word	0x0800df35
 800cc3c:	0800dfb5 	.word	0x0800dfb5

0800cc40 <__lshift>:
 800cc40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc44:	460c      	mov	r4, r1
 800cc46:	4607      	mov	r7, r0
 800cc48:	4691      	mov	r9, r2
 800cc4a:	6923      	ldr	r3, [r4, #16]
 800cc4c:	6849      	ldr	r1, [r1, #4]
 800cc4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cc52:	68a3      	ldr	r3, [r4, #8]
 800cc54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc58:	f108 0601 	add.w	r6, r8, #1
 800cc5c:	42b3      	cmp	r3, r6
 800cc5e:	db0b      	blt.n	800cc78 <__lshift+0x38>
 800cc60:	4638      	mov	r0, r7
 800cc62:	f7ff fde1 	bl	800c828 <_Balloc>
 800cc66:	4605      	mov	r5, r0
 800cc68:	b948      	cbnz	r0, 800cc7e <__lshift+0x3e>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cc70:	4b27      	ldr	r3, [pc, #156]	@ (800cd10 <__lshift+0xd0>)
 800cc72:	4828      	ldr	r0, [pc, #160]	@ (800cd14 <__lshift+0xd4>)
 800cc74:	f000 fa0e 	bl	800d094 <__assert_func>
 800cc78:	3101      	adds	r1, #1
 800cc7a:	005b      	lsls	r3, r3, #1
 800cc7c:	e7ee      	b.n	800cc5c <__lshift+0x1c>
 800cc7e:	2300      	movs	r3, #0
 800cc80:	f100 0114 	add.w	r1, r0, #20
 800cc84:	f100 0210 	add.w	r2, r0, #16
 800cc88:	4618      	mov	r0, r3
 800cc8a:	4553      	cmp	r3, sl
 800cc8c:	db33      	blt.n	800ccf6 <__lshift+0xb6>
 800cc8e:	6920      	ldr	r0, [r4, #16]
 800cc90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cc94:	f104 0314 	add.w	r3, r4, #20
 800cc98:	f019 091f 	ands.w	r9, r9, #31
 800cc9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cca0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cca4:	d02b      	beq.n	800ccfe <__lshift+0xbe>
 800cca6:	468a      	mov	sl, r1
 800cca8:	2200      	movs	r2, #0
 800ccaa:	f1c9 0e20 	rsb	lr, r9, #32
 800ccae:	6818      	ldr	r0, [r3, #0]
 800ccb0:	fa00 f009 	lsl.w	r0, r0, r9
 800ccb4:	4310      	orrs	r0, r2
 800ccb6:	f84a 0b04 	str.w	r0, [sl], #4
 800ccba:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccbe:	459c      	cmp	ip, r3
 800ccc0:	fa22 f20e 	lsr.w	r2, r2, lr
 800ccc4:	d8f3      	bhi.n	800ccae <__lshift+0x6e>
 800ccc6:	ebac 0304 	sub.w	r3, ip, r4
 800ccca:	3b15      	subs	r3, #21
 800cccc:	f023 0303 	bic.w	r3, r3, #3
 800ccd0:	3304      	adds	r3, #4
 800ccd2:	f104 0015 	add.w	r0, r4, #21
 800ccd6:	4584      	cmp	ip, r0
 800ccd8:	bf38      	it	cc
 800ccda:	2304      	movcc	r3, #4
 800ccdc:	50ca      	str	r2, [r1, r3]
 800ccde:	b10a      	cbz	r2, 800cce4 <__lshift+0xa4>
 800cce0:	f108 0602 	add.w	r6, r8, #2
 800cce4:	3e01      	subs	r6, #1
 800cce6:	4638      	mov	r0, r7
 800cce8:	4621      	mov	r1, r4
 800ccea:	612e      	str	r6, [r5, #16]
 800ccec:	f7ff fddc 	bl	800c8a8 <_Bfree>
 800ccf0:	4628      	mov	r0, r5
 800ccf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccf6:	f842 0f04 	str.w	r0, [r2, #4]!
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	e7c5      	b.n	800cc8a <__lshift+0x4a>
 800ccfe:	3904      	subs	r1, #4
 800cd00:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd04:	459c      	cmp	ip, r3
 800cd06:	f841 2f04 	str.w	r2, [r1, #4]!
 800cd0a:	d8f9      	bhi.n	800cd00 <__lshift+0xc0>
 800cd0c:	e7ea      	b.n	800cce4 <__lshift+0xa4>
 800cd0e:	bf00      	nop
 800cd10:	0800dfa4 	.word	0x0800dfa4
 800cd14:	0800dfb5 	.word	0x0800dfb5

0800cd18 <__mcmp>:
 800cd18:	4603      	mov	r3, r0
 800cd1a:	690a      	ldr	r2, [r1, #16]
 800cd1c:	6900      	ldr	r0, [r0, #16]
 800cd1e:	b530      	push	{r4, r5, lr}
 800cd20:	1a80      	subs	r0, r0, r2
 800cd22:	d10e      	bne.n	800cd42 <__mcmp+0x2a>
 800cd24:	3314      	adds	r3, #20
 800cd26:	3114      	adds	r1, #20
 800cd28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cd2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cd30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cd34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cd38:	4295      	cmp	r5, r2
 800cd3a:	d003      	beq.n	800cd44 <__mcmp+0x2c>
 800cd3c:	d205      	bcs.n	800cd4a <__mcmp+0x32>
 800cd3e:	f04f 30ff 	mov.w	r0, #4294967295
 800cd42:	bd30      	pop	{r4, r5, pc}
 800cd44:	42a3      	cmp	r3, r4
 800cd46:	d3f3      	bcc.n	800cd30 <__mcmp+0x18>
 800cd48:	e7fb      	b.n	800cd42 <__mcmp+0x2a>
 800cd4a:	2001      	movs	r0, #1
 800cd4c:	e7f9      	b.n	800cd42 <__mcmp+0x2a>
	...

0800cd50 <__mdiff>:
 800cd50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd54:	4689      	mov	r9, r1
 800cd56:	4606      	mov	r6, r0
 800cd58:	4611      	mov	r1, r2
 800cd5a:	4648      	mov	r0, r9
 800cd5c:	4614      	mov	r4, r2
 800cd5e:	f7ff ffdb 	bl	800cd18 <__mcmp>
 800cd62:	1e05      	subs	r5, r0, #0
 800cd64:	d112      	bne.n	800cd8c <__mdiff+0x3c>
 800cd66:	4629      	mov	r1, r5
 800cd68:	4630      	mov	r0, r6
 800cd6a:	f7ff fd5d 	bl	800c828 <_Balloc>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	b928      	cbnz	r0, 800cd7e <__mdiff+0x2e>
 800cd72:	f240 2137 	movw	r1, #567	@ 0x237
 800cd76:	4b3e      	ldr	r3, [pc, #248]	@ (800ce70 <__mdiff+0x120>)
 800cd78:	483e      	ldr	r0, [pc, #248]	@ (800ce74 <__mdiff+0x124>)
 800cd7a:	f000 f98b 	bl	800d094 <__assert_func>
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cd84:	4610      	mov	r0, r2
 800cd86:	b003      	add	sp, #12
 800cd88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd8c:	bfbc      	itt	lt
 800cd8e:	464b      	movlt	r3, r9
 800cd90:	46a1      	movlt	r9, r4
 800cd92:	4630      	mov	r0, r6
 800cd94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cd98:	bfba      	itte	lt
 800cd9a:	461c      	movlt	r4, r3
 800cd9c:	2501      	movlt	r5, #1
 800cd9e:	2500      	movge	r5, #0
 800cda0:	f7ff fd42 	bl	800c828 <_Balloc>
 800cda4:	4602      	mov	r2, r0
 800cda6:	b918      	cbnz	r0, 800cdb0 <__mdiff+0x60>
 800cda8:	f240 2145 	movw	r1, #581	@ 0x245
 800cdac:	4b30      	ldr	r3, [pc, #192]	@ (800ce70 <__mdiff+0x120>)
 800cdae:	e7e3      	b.n	800cd78 <__mdiff+0x28>
 800cdb0:	f100 0b14 	add.w	fp, r0, #20
 800cdb4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cdb8:	f109 0310 	add.w	r3, r9, #16
 800cdbc:	60c5      	str	r5, [r0, #12]
 800cdbe:	f04f 0c00 	mov.w	ip, #0
 800cdc2:	f109 0514 	add.w	r5, r9, #20
 800cdc6:	46d9      	mov	r9, fp
 800cdc8:	6926      	ldr	r6, [r4, #16]
 800cdca:	f104 0e14 	add.w	lr, r4, #20
 800cdce:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cdd2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cdd6:	9301      	str	r3, [sp, #4]
 800cdd8:	9b01      	ldr	r3, [sp, #4]
 800cdda:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cdde:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cde2:	b281      	uxth	r1, r0
 800cde4:	9301      	str	r3, [sp, #4]
 800cde6:	fa1f f38a 	uxth.w	r3, sl
 800cdea:	1a5b      	subs	r3, r3, r1
 800cdec:	0c00      	lsrs	r0, r0, #16
 800cdee:	4463      	add	r3, ip
 800cdf0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cdf4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cdfe:	4576      	cmp	r6, lr
 800ce00:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ce04:	f849 3b04 	str.w	r3, [r9], #4
 800ce08:	d8e6      	bhi.n	800cdd8 <__mdiff+0x88>
 800ce0a:	1b33      	subs	r3, r6, r4
 800ce0c:	3b15      	subs	r3, #21
 800ce0e:	f023 0303 	bic.w	r3, r3, #3
 800ce12:	3415      	adds	r4, #21
 800ce14:	3304      	adds	r3, #4
 800ce16:	42a6      	cmp	r6, r4
 800ce18:	bf38      	it	cc
 800ce1a:	2304      	movcc	r3, #4
 800ce1c:	441d      	add	r5, r3
 800ce1e:	445b      	add	r3, fp
 800ce20:	461e      	mov	r6, r3
 800ce22:	462c      	mov	r4, r5
 800ce24:	4544      	cmp	r4, r8
 800ce26:	d30e      	bcc.n	800ce46 <__mdiff+0xf6>
 800ce28:	f108 0103 	add.w	r1, r8, #3
 800ce2c:	1b49      	subs	r1, r1, r5
 800ce2e:	f021 0103 	bic.w	r1, r1, #3
 800ce32:	3d03      	subs	r5, #3
 800ce34:	45a8      	cmp	r8, r5
 800ce36:	bf38      	it	cc
 800ce38:	2100      	movcc	r1, #0
 800ce3a:	440b      	add	r3, r1
 800ce3c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ce40:	b199      	cbz	r1, 800ce6a <__mdiff+0x11a>
 800ce42:	6117      	str	r7, [r2, #16]
 800ce44:	e79e      	b.n	800cd84 <__mdiff+0x34>
 800ce46:	46e6      	mov	lr, ip
 800ce48:	f854 1b04 	ldr.w	r1, [r4], #4
 800ce4c:	fa1f fc81 	uxth.w	ip, r1
 800ce50:	44f4      	add	ip, lr
 800ce52:	0c08      	lsrs	r0, r1, #16
 800ce54:	4471      	add	r1, lr
 800ce56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ce5a:	b289      	uxth	r1, r1
 800ce5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ce60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ce64:	f846 1b04 	str.w	r1, [r6], #4
 800ce68:	e7dc      	b.n	800ce24 <__mdiff+0xd4>
 800ce6a:	3f01      	subs	r7, #1
 800ce6c:	e7e6      	b.n	800ce3c <__mdiff+0xec>
 800ce6e:	bf00      	nop
 800ce70:	0800dfa4 	.word	0x0800dfa4
 800ce74:	0800dfb5 	.word	0x0800dfb5

0800ce78 <__d2b>:
 800ce78:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800ce7c:	2101      	movs	r1, #1
 800ce7e:	4690      	mov	r8, r2
 800ce80:	4699      	mov	r9, r3
 800ce82:	9e08      	ldr	r6, [sp, #32]
 800ce84:	f7ff fcd0 	bl	800c828 <_Balloc>
 800ce88:	4604      	mov	r4, r0
 800ce8a:	b930      	cbnz	r0, 800ce9a <__d2b+0x22>
 800ce8c:	4602      	mov	r2, r0
 800ce8e:	f240 310f 	movw	r1, #783	@ 0x30f
 800ce92:	4b23      	ldr	r3, [pc, #140]	@ (800cf20 <__d2b+0xa8>)
 800ce94:	4823      	ldr	r0, [pc, #140]	@ (800cf24 <__d2b+0xac>)
 800ce96:	f000 f8fd 	bl	800d094 <__assert_func>
 800ce9a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ce9e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cea2:	b10d      	cbz	r5, 800cea8 <__d2b+0x30>
 800cea4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cea8:	9301      	str	r3, [sp, #4]
 800ceaa:	f1b8 0300 	subs.w	r3, r8, #0
 800ceae:	d024      	beq.n	800cefa <__d2b+0x82>
 800ceb0:	4668      	mov	r0, sp
 800ceb2:	9300      	str	r3, [sp, #0]
 800ceb4:	f7ff fd7f 	bl	800c9b6 <__lo0bits>
 800ceb8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cebc:	b1d8      	cbz	r0, 800cef6 <__d2b+0x7e>
 800cebe:	f1c0 0320 	rsb	r3, r0, #32
 800cec2:	fa02 f303 	lsl.w	r3, r2, r3
 800cec6:	430b      	orrs	r3, r1
 800cec8:	40c2      	lsrs	r2, r0
 800ceca:	6163      	str	r3, [r4, #20]
 800cecc:	9201      	str	r2, [sp, #4]
 800cece:	9b01      	ldr	r3, [sp, #4]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	bf0c      	ite	eq
 800ced4:	2201      	moveq	r2, #1
 800ced6:	2202      	movne	r2, #2
 800ced8:	61a3      	str	r3, [r4, #24]
 800ceda:	6122      	str	r2, [r4, #16]
 800cedc:	b1ad      	cbz	r5, 800cf0a <__d2b+0x92>
 800cede:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cee2:	4405      	add	r5, r0
 800cee4:	6035      	str	r5, [r6, #0]
 800cee6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ceea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceec:	6018      	str	r0, [r3, #0]
 800ceee:	4620      	mov	r0, r4
 800cef0:	b002      	add	sp, #8
 800cef2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800cef6:	6161      	str	r1, [r4, #20]
 800cef8:	e7e9      	b.n	800cece <__d2b+0x56>
 800cefa:	a801      	add	r0, sp, #4
 800cefc:	f7ff fd5b 	bl	800c9b6 <__lo0bits>
 800cf00:	9b01      	ldr	r3, [sp, #4]
 800cf02:	2201      	movs	r2, #1
 800cf04:	6163      	str	r3, [r4, #20]
 800cf06:	3020      	adds	r0, #32
 800cf08:	e7e7      	b.n	800ceda <__d2b+0x62>
 800cf0a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cf0e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cf12:	6030      	str	r0, [r6, #0]
 800cf14:	6918      	ldr	r0, [r3, #16]
 800cf16:	f7ff fd2f 	bl	800c978 <__hi0bits>
 800cf1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cf1e:	e7e4      	b.n	800ceea <__d2b+0x72>
 800cf20:	0800dfa4 	.word	0x0800dfa4
 800cf24:	0800dfb5 	.word	0x0800dfb5

0800cf28 <__sflush_r>:
 800cf28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cf2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf2e:	0716      	lsls	r6, r2, #28
 800cf30:	4605      	mov	r5, r0
 800cf32:	460c      	mov	r4, r1
 800cf34:	d454      	bmi.n	800cfe0 <__sflush_r+0xb8>
 800cf36:	684b      	ldr	r3, [r1, #4]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	dc02      	bgt.n	800cf42 <__sflush_r+0x1a>
 800cf3c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	dd48      	ble.n	800cfd4 <__sflush_r+0xac>
 800cf42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf44:	2e00      	cmp	r6, #0
 800cf46:	d045      	beq.n	800cfd4 <__sflush_r+0xac>
 800cf48:	2300      	movs	r3, #0
 800cf4a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cf4e:	682f      	ldr	r7, [r5, #0]
 800cf50:	6a21      	ldr	r1, [r4, #32]
 800cf52:	602b      	str	r3, [r5, #0]
 800cf54:	d030      	beq.n	800cfb8 <__sflush_r+0x90>
 800cf56:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cf58:	89a3      	ldrh	r3, [r4, #12]
 800cf5a:	0759      	lsls	r1, r3, #29
 800cf5c:	d505      	bpl.n	800cf6a <__sflush_r+0x42>
 800cf5e:	6863      	ldr	r3, [r4, #4]
 800cf60:	1ad2      	subs	r2, r2, r3
 800cf62:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cf64:	b10b      	cbz	r3, 800cf6a <__sflush_r+0x42>
 800cf66:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cf68:	1ad2      	subs	r2, r2, r3
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	4628      	mov	r0, r5
 800cf6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cf70:	6a21      	ldr	r1, [r4, #32]
 800cf72:	47b0      	blx	r6
 800cf74:	1c43      	adds	r3, r0, #1
 800cf76:	89a3      	ldrh	r3, [r4, #12]
 800cf78:	d106      	bne.n	800cf88 <__sflush_r+0x60>
 800cf7a:	6829      	ldr	r1, [r5, #0]
 800cf7c:	291d      	cmp	r1, #29
 800cf7e:	d82b      	bhi.n	800cfd8 <__sflush_r+0xb0>
 800cf80:	4a28      	ldr	r2, [pc, #160]	@ (800d024 <__sflush_r+0xfc>)
 800cf82:	410a      	asrs	r2, r1
 800cf84:	07d6      	lsls	r6, r2, #31
 800cf86:	d427      	bmi.n	800cfd8 <__sflush_r+0xb0>
 800cf88:	2200      	movs	r2, #0
 800cf8a:	6062      	str	r2, [r4, #4]
 800cf8c:	6922      	ldr	r2, [r4, #16]
 800cf8e:	04d9      	lsls	r1, r3, #19
 800cf90:	6022      	str	r2, [r4, #0]
 800cf92:	d504      	bpl.n	800cf9e <__sflush_r+0x76>
 800cf94:	1c42      	adds	r2, r0, #1
 800cf96:	d101      	bne.n	800cf9c <__sflush_r+0x74>
 800cf98:	682b      	ldr	r3, [r5, #0]
 800cf9a:	b903      	cbnz	r3, 800cf9e <__sflush_r+0x76>
 800cf9c:	6560      	str	r0, [r4, #84]	@ 0x54
 800cf9e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cfa0:	602f      	str	r7, [r5, #0]
 800cfa2:	b1b9      	cbz	r1, 800cfd4 <__sflush_r+0xac>
 800cfa4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cfa8:	4299      	cmp	r1, r3
 800cfaa:	d002      	beq.n	800cfb2 <__sflush_r+0x8a>
 800cfac:	4628      	mov	r0, r5
 800cfae:	f7ff fbf3 	bl	800c798 <_free_r>
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	6363      	str	r3, [r4, #52]	@ 0x34
 800cfb6:	e00d      	b.n	800cfd4 <__sflush_r+0xac>
 800cfb8:	2301      	movs	r3, #1
 800cfba:	4628      	mov	r0, r5
 800cfbc:	47b0      	blx	r6
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	1c50      	adds	r0, r2, #1
 800cfc2:	d1c9      	bne.n	800cf58 <__sflush_r+0x30>
 800cfc4:	682b      	ldr	r3, [r5, #0]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d0c6      	beq.n	800cf58 <__sflush_r+0x30>
 800cfca:	2b1d      	cmp	r3, #29
 800cfcc:	d001      	beq.n	800cfd2 <__sflush_r+0xaa>
 800cfce:	2b16      	cmp	r3, #22
 800cfd0:	d11d      	bne.n	800d00e <__sflush_r+0xe6>
 800cfd2:	602f      	str	r7, [r5, #0]
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	e021      	b.n	800d01c <__sflush_r+0xf4>
 800cfd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cfdc:	b21b      	sxth	r3, r3
 800cfde:	e01a      	b.n	800d016 <__sflush_r+0xee>
 800cfe0:	690f      	ldr	r7, [r1, #16]
 800cfe2:	2f00      	cmp	r7, #0
 800cfe4:	d0f6      	beq.n	800cfd4 <__sflush_r+0xac>
 800cfe6:	0793      	lsls	r3, r2, #30
 800cfe8:	bf18      	it	ne
 800cfea:	2300      	movne	r3, #0
 800cfec:	680e      	ldr	r6, [r1, #0]
 800cfee:	bf08      	it	eq
 800cff0:	694b      	ldreq	r3, [r1, #20]
 800cff2:	1bf6      	subs	r6, r6, r7
 800cff4:	600f      	str	r7, [r1, #0]
 800cff6:	608b      	str	r3, [r1, #8]
 800cff8:	2e00      	cmp	r6, #0
 800cffa:	ddeb      	ble.n	800cfd4 <__sflush_r+0xac>
 800cffc:	4633      	mov	r3, r6
 800cffe:	463a      	mov	r2, r7
 800d000:	4628      	mov	r0, r5
 800d002:	6a21      	ldr	r1, [r4, #32]
 800d004:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d008:	47e0      	blx	ip
 800d00a:	2800      	cmp	r0, #0
 800d00c:	dc07      	bgt.n	800d01e <__sflush_r+0xf6>
 800d00e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d012:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d016:	f04f 30ff 	mov.w	r0, #4294967295
 800d01a:	81a3      	strh	r3, [r4, #12]
 800d01c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d01e:	4407      	add	r7, r0
 800d020:	1a36      	subs	r6, r6, r0
 800d022:	e7e9      	b.n	800cff8 <__sflush_r+0xd0>
 800d024:	dfbffffe 	.word	0xdfbffffe

0800d028 <_fflush_r>:
 800d028:	b538      	push	{r3, r4, r5, lr}
 800d02a:	690b      	ldr	r3, [r1, #16]
 800d02c:	4605      	mov	r5, r0
 800d02e:	460c      	mov	r4, r1
 800d030:	b913      	cbnz	r3, 800d038 <_fflush_r+0x10>
 800d032:	2500      	movs	r5, #0
 800d034:	4628      	mov	r0, r5
 800d036:	bd38      	pop	{r3, r4, r5, pc}
 800d038:	b118      	cbz	r0, 800d042 <_fflush_r+0x1a>
 800d03a:	6a03      	ldr	r3, [r0, #32]
 800d03c:	b90b      	cbnz	r3, 800d042 <_fflush_r+0x1a>
 800d03e:	f7fe fc43 	bl	800b8c8 <__sinit>
 800d042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d0f3      	beq.n	800d032 <_fflush_r+0xa>
 800d04a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d04c:	07d0      	lsls	r0, r2, #31
 800d04e:	d404      	bmi.n	800d05a <_fflush_r+0x32>
 800d050:	0599      	lsls	r1, r3, #22
 800d052:	d402      	bmi.n	800d05a <_fflush_r+0x32>
 800d054:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d056:	f7fe fd3e 	bl	800bad6 <__retarget_lock_acquire_recursive>
 800d05a:	4628      	mov	r0, r5
 800d05c:	4621      	mov	r1, r4
 800d05e:	f7ff ff63 	bl	800cf28 <__sflush_r>
 800d062:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d064:	4605      	mov	r5, r0
 800d066:	07da      	lsls	r2, r3, #31
 800d068:	d4e4      	bmi.n	800d034 <_fflush_r+0xc>
 800d06a:	89a3      	ldrh	r3, [r4, #12]
 800d06c:	059b      	lsls	r3, r3, #22
 800d06e:	d4e1      	bmi.n	800d034 <_fflush_r+0xc>
 800d070:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d072:	f7fe fd31 	bl	800bad8 <__retarget_lock_release_recursive>
 800d076:	e7dd      	b.n	800d034 <_fflush_r+0xc>

0800d078 <memcpy>:
 800d078:	440a      	add	r2, r1
 800d07a:	4291      	cmp	r1, r2
 800d07c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d080:	d100      	bne.n	800d084 <memcpy+0xc>
 800d082:	4770      	bx	lr
 800d084:	b510      	push	{r4, lr}
 800d086:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d08a:	4291      	cmp	r1, r2
 800d08c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d090:	d1f9      	bne.n	800d086 <memcpy+0xe>
 800d092:	bd10      	pop	{r4, pc}

0800d094 <__assert_func>:
 800d094:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d096:	4614      	mov	r4, r2
 800d098:	461a      	mov	r2, r3
 800d09a:	4b09      	ldr	r3, [pc, #36]	@ (800d0c0 <__assert_func+0x2c>)
 800d09c:	4605      	mov	r5, r0
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	68d8      	ldr	r0, [r3, #12]
 800d0a2:	b954      	cbnz	r4, 800d0ba <__assert_func+0x26>
 800d0a4:	4b07      	ldr	r3, [pc, #28]	@ (800d0c4 <__assert_func+0x30>)
 800d0a6:	461c      	mov	r4, r3
 800d0a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d0ac:	9100      	str	r1, [sp, #0]
 800d0ae:	462b      	mov	r3, r5
 800d0b0:	4905      	ldr	r1, [pc, #20]	@ (800d0c8 <__assert_func+0x34>)
 800d0b2:	f000 f841 	bl	800d138 <fiprintf>
 800d0b6:	f000 f851 	bl	800d15c <abort>
 800d0ba:	4b04      	ldr	r3, [pc, #16]	@ (800d0cc <__assert_func+0x38>)
 800d0bc:	e7f4      	b.n	800d0a8 <__assert_func+0x14>
 800d0be:	bf00      	nop
 800d0c0:	200001bc 	.word	0x200001bc
 800d0c4:	0800e155 	.word	0x0800e155
 800d0c8:	0800e127 	.word	0x0800e127
 800d0cc:	0800e11a 	.word	0x0800e11a

0800d0d0 <_calloc_r>:
 800d0d0:	b570      	push	{r4, r5, r6, lr}
 800d0d2:	fba1 5402 	umull	r5, r4, r1, r2
 800d0d6:	b93c      	cbnz	r4, 800d0e8 <_calloc_r+0x18>
 800d0d8:	4629      	mov	r1, r5
 800d0da:	f7fd fe81 	bl	800ade0 <_malloc_r>
 800d0de:	4606      	mov	r6, r0
 800d0e0:	b928      	cbnz	r0, 800d0ee <_calloc_r+0x1e>
 800d0e2:	2600      	movs	r6, #0
 800d0e4:	4630      	mov	r0, r6
 800d0e6:	bd70      	pop	{r4, r5, r6, pc}
 800d0e8:	220c      	movs	r2, #12
 800d0ea:	6002      	str	r2, [r0, #0]
 800d0ec:	e7f9      	b.n	800d0e2 <_calloc_r+0x12>
 800d0ee:	462a      	mov	r2, r5
 800d0f0:	4621      	mov	r1, r4
 800d0f2:	f7fe fc62 	bl	800b9ba <memset>
 800d0f6:	e7f5      	b.n	800d0e4 <_calloc_r+0x14>

0800d0f8 <__ascii_mbtowc>:
 800d0f8:	b082      	sub	sp, #8
 800d0fa:	b901      	cbnz	r1, 800d0fe <__ascii_mbtowc+0x6>
 800d0fc:	a901      	add	r1, sp, #4
 800d0fe:	b142      	cbz	r2, 800d112 <__ascii_mbtowc+0x1a>
 800d100:	b14b      	cbz	r3, 800d116 <__ascii_mbtowc+0x1e>
 800d102:	7813      	ldrb	r3, [r2, #0]
 800d104:	600b      	str	r3, [r1, #0]
 800d106:	7812      	ldrb	r2, [r2, #0]
 800d108:	1e10      	subs	r0, r2, #0
 800d10a:	bf18      	it	ne
 800d10c:	2001      	movne	r0, #1
 800d10e:	b002      	add	sp, #8
 800d110:	4770      	bx	lr
 800d112:	4610      	mov	r0, r2
 800d114:	e7fb      	b.n	800d10e <__ascii_mbtowc+0x16>
 800d116:	f06f 0001 	mvn.w	r0, #1
 800d11a:	e7f8      	b.n	800d10e <__ascii_mbtowc+0x16>

0800d11c <__ascii_wctomb>:
 800d11c:	4603      	mov	r3, r0
 800d11e:	4608      	mov	r0, r1
 800d120:	b141      	cbz	r1, 800d134 <__ascii_wctomb+0x18>
 800d122:	2aff      	cmp	r2, #255	@ 0xff
 800d124:	d904      	bls.n	800d130 <__ascii_wctomb+0x14>
 800d126:	228a      	movs	r2, #138	@ 0x8a
 800d128:	f04f 30ff 	mov.w	r0, #4294967295
 800d12c:	601a      	str	r2, [r3, #0]
 800d12e:	4770      	bx	lr
 800d130:	2001      	movs	r0, #1
 800d132:	700a      	strb	r2, [r1, #0]
 800d134:	4770      	bx	lr
	...

0800d138 <fiprintf>:
 800d138:	b40e      	push	{r1, r2, r3}
 800d13a:	b503      	push	{r0, r1, lr}
 800d13c:	4601      	mov	r1, r0
 800d13e:	ab03      	add	r3, sp, #12
 800d140:	4805      	ldr	r0, [pc, #20]	@ (800d158 <fiprintf+0x20>)
 800d142:	f853 2b04 	ldr.w	r2, [r3], #4
 800d146:	6800      	ldr	r0, [r0, #0]
 800d148:	9301      	str	r3, [sp, #4]
 800d14a:	f000 f835 	bl	800d1b8 <_vfiprintf_r>
 800d14e:	b002      	add	sp, #8
 800d150:	f85d eb04 	ldr.w	lr, [sp], #4
 800d154:	b003      	add	sp, #12
 800d156:	4770      	bx	lr
 800d158:	200001bc 	.word	0x200001bc

0800d15c <abort>:
 800d15c:	2006      	movs	r0, #6
 800d15e:	b508      	push	{r3, lr}
 800d160:	f000 f9fe 	bl	800d560 <raise>
 800d164:	2001      	movs	r0, #1
 800d166:	f7f5 fc1c 	bl	80029a2 <_exit>

0800d16a <__sfputc_r>:
 800d16a:	6893      	ldr	r3, [r2, #8]
 800d16c:	b410      	push	{r4}
 800d16e:	3b01      	subs	r3, #1
 800d170:	2b00      	cmp	r3, #0
 800d172:	6093      	str	r3, [r2, #8]
 800d174:	da07      	bge.n	800d186 <__sfputc_r+0x1c>
 800d176:	6994      	ldr	r4, [r2, #24]
 800d178:	42a3      	cmp	r3, r4
 800d17a:	db01      	blt.n	800d180 <__sfputc_r+0x16>
 800d17c:	290a      	cmp	r1, #10
 800d17e:	d102      	bne.n	800d186 <__sfputc_r+0x1c>
 800d180:	bc10      	pop	{r4}
 800d182:	f000 b931 	b.w	800d3e8 <__swbuf_r>
 800d186:	6813      	ldr	r3, [r2, #0]
 800d188:	1c58      	adds	r0, r3, #1
 800d18a:	6010      	str	r0, [r2, #0]
 800d18c:	7019      	strb	r1, [r3, #0]
 800d18e:	4608      	mov	r0, r1
 800d190:	bc10      	pop	{r4}
 800d192:	4770      	bx	lr

0800d194 <__sfputs_r>:
 800d194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d196:	4606      	mov	r6, r0
 800d198:	460f      	mov	r7, r1
 800d19a:	4614      	mov	r4, r2
 800d19c:	18d5      	adds	r5, r2, r3
 800d19e:	42ac      	cmp	r4, r5
 800d1a0:	d101      	bne.n	800d1a6 <__sfputs_r+0x12>
 800d1a2:	2000      	movs	r0, #0
 800d1a4:	e007      	b.n	800d1b6 <__sfputs_r+0x22>
 800d1a6:	463a      	mov	r2, r7
 800d1a8:	4630      	mov	r0, r6
 800d1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1ae:	f7ff ffdc 	bl	800d16a <__sfputc_r>
 800d1b2:	1c43      	adds	r3, r0, #1
 800d1b4:	d1f3      	bne.n	800d19e <__sfputs_r+0xa>
 800d1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d1b8 <_vfiprintf_r>:
 800d1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1bc:	460d      	mov	r5, r1
 800d1be:	4614      	mov	r4, r2
 800d1c0:	4698      	mov	r8, r3
 800d1c2:	4606      	mov	r6, r0
 800d1c4:	b09d      	sub	sp, #116	@ 0x74
 800d1c6:	b118      	cbz	r0, 800d1d0 <_vfiprintf_r+0x18>
 800d1c8:	6a03      	ldr	r3, [r0, #32]
 800d1ca:	b90b      	cbnz	r3, 800d1d0 <_vfiprintf_r+0x18>
 800d1cc:	f7fe fb7c 	bl	800b8c8 <__sinit>
 800d1d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1d2:	07d9      	lsls	r1, r3, #31
 800d1d4:	d405      	bmi.n	800d1e2 <_vfiprintf_r+0x2a>
 800d1d6:	89ab      	ldrh	r3, [r5, #12]
 800d1d8:	059a      	lsls	r2, r3, #22
 800d1da:	d402      	bmi.n	800d1e2 <_vfiprintf_r+0x2a>
 800d1dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1de:	f7fe fc7a 	bl	800bad6 <__retarget_lock_acquire_recursive>
 800d1e2:	89ab      	ldrh	r3, [r5, #12]
 800d1e4:	071b      	lsls	r3, r3, #28
 800d1e6:	d501      	bpl.n	800d1ec <_vfiprintf_r+0x34>
 800d1e8:	692b      	ldr	r3, [r5, #16]
 800d1ea:	b99b      	cbnz	r3, 800d214 <_vfiprintf_r+0x5c>
 800d1ec:	4629      	mov	r1, r5
 800d1ee:	4630      	mov	r0, r6
 800d1f0:	f000 f938 	bl	800d464 <__swsetup_r>
 800d1f4:	b170      	cbz	r0, 800d214 <_vfiprintf_r+0x5c>
 800d1f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d1f8:	07dc      	lsls	r4, r3, #31
 800d1fa:	d504      	bpl.n	800d206 <_vfiprintf_r+0x4e>
 800d1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d200:	b01d      	add	sp, #116	@ 0x74
 800d202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d206:	89ab      	ldrh	r3, [r5, #12]
 800d208:	0598      	lsls	r0, r3, #22
 800d20a:	d4f7      	bmi.n	800d1fc <_vfiprintf_r+0x44>
 800d20c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d20e:	f7fe fc63 	bl	800bad8 <__retarget_lock_release_recursive>
 800d212:	e7f3      	b.n	800d1fc <_vfiprintf_r+0x44>
 800d214:	2300      	movs	r3, #0
 800d216:	9309      	str	r3, [sp, #36]	@ 0x24
 800d218:	2320      	movs	r3, #32
 800d21a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d21e:	2330      	movs	r3, #48	@ 0x30
 800d220:	f04f 0901 	mov.w	r9, #1
 800d224:	f8cd 800c 	str.w	r8, [sp, #12]
 800d228:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d3d4 <_vfiprintf_r+0x21c>
 800d22c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d230:	4623      	mov	r3, r4
 800d232:	469a      	mov	sl, r3
 800d234:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d238:	b10a      	cbz	r2, 800d23e <_vfiprintf_r+0x86>
 800d23a:	2a25      	cmp	r2, #37	@ 0x25
 800d23c:	d1f9      	bne.n	800d232 <_vfiprintf_r+0x7a>
 800d23e:	ebba 0b04 	subs.w	fp, sl, r4
 800d242:	d00b      	beq.n	800d25c <_vfiprintf_r+0xa4>
 800d244:	465b      	mov	r3, fp
 800d246:	4622      	mov	r2, r4
 800d248:	4629      	mov	r1, r5
 800d24a:	4630      	mov	r0, r6
 800d24c:	f7ff ffa2 	bl	800d194 <__sfputs_r>
 800d250:	3001      	adds	r0, #1
 800d252:	f000 80a7 	beq.w	800d3a4 <_vfiprintf_r+0x1ec>
 800d256:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d258:	445a      	add	r2, fp
 800d25a:	9209      	str	r2, [sp, #36]	@ 0x24
 800d25c:	f89a 3000 	ldrb.w	r3, [sl]
 800d260:	2b00      	cmp	r3, #0
 800d262:	f000 809f 	beq.w	800d3a4 <_vfiprintf_r+0x1ec>
 800d266:	2300      	movs	r3, #0
 800d268:	f04f 32ff 	mov.w	r2, #4294967295
 800d26c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d270:	f10a 0a01 	add.w	sl, sl, #1
 800d274:	9304      	str	r3, [sp, #16]
 800d276:	9307      	str	r3, [sp, #28]
 800d278:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d27c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d27e:	4654      	mov	r4, sl
 800d280:	2205      	movs	r2, #5
 800d282:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d286:	4853      	ldr	r0, [pc, #332]	@ (800d3d4 <_vfiprintf_r+0x21c>)
 800d288:	f7fe fc27 	bl	800bada <memchr>
 800d28c:	9a04      	ldr	r2, [sp, #16]
 800d28e:	b9d8      	cbnz	r0, 800d2c8 <_vfiprintf_r+0x110>
 800d290:	06d1      	lsls	r1, r2, #27
 800d292:	bf44      	itt	mi
 800d294:	2320      	movmi	r3, #32
 800d296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d29a:	0713      	lsls	r3, r2, #28
 800d29c:	bf44      	itt	mi
 800d29e:	232b      	movmi	r3, #43	@ 0x2b
 800d2a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2a4:	f89a 3000 	ldrb.w	r3, [sl]
 800d2a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2aa:	d015      	beq.n	800d2d8 <_vfiprintf_r+0x120>
 800d2ac:	4654      	mov	r4, sl
 800d2ae:	2000      	movs	r0, #0
 800d2b0:	f04f 0c0a 	mov.w	ip, #10
 800d2b4:	9a07      	ldr	r2, [sp, #28]
 800d2b6:	4621      	mov	r1, r4
 800d2b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2bc:	3b30      	subs	r3, #48	@ 0x30
 800d2be:	2b09      	cmp	r3, #9
 800d2c0:	d94b      	bls.n	800d35a <_vfiprintf_r+0x1a2>
 800d2c2:	b1b0      	cbz	r0, 800d2f2 <_vfiprintf_r+0x13a>
 800d2c4:	9207      	str	r2, [sp, #28]
 800d2c6:	e014      	b.n	800d2f2 <_vfiprintf_r+0x13a>
 800d2c8:	eba0 0308 	sub.w	r3, r0, r8
 800d2cc:	fa09 f303 	lsl.w	r3, r9, r3
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	46a2      	mov	sl, r4
 800d2d4:	9304      	str	r3, [sp, #16]
 800d2d6:	e7d2      	b.n	800d27e <_vfiprintf_r+0xc6>
 800d2d8:	9b03      	ldr	r3, [sp, #12]
 800d2da:	1d19      	adds	r1, r3, #4
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	9103      	str	r1, [sp, #12]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	bfbb      	ittet	lt
 800d2e4:	425b      	neglt	r3, r3
 800d2e6:	f042 0202 	orrlt.w	r2, r2, #2
 800d2ea:	9307      	strge	r3, [sp, #28]
 800d2ec:	9307      	strlt	r3, [sp, #28]
 800d2ee:	bfb8      	it	lt
 800d2f0:	9204      	strlt	r2, [sp, #16]
 800d2f2:	7823      	ldrb	r3, [r4, #0]
 800d2f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d2f6:	d10a      	bne.n	800d30e <_vfiprintf_r+0x156>
 800d2f8:	7863      	ldrb	r3, [r4, #1]
 800d2fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800d2fc:	d132      	bne.n	800d364 <_vfiprintf_r+0x1ac>
 800d2fe:	9b03      	ldr	r3, [sp, #12]
 800d300:	3402      	adds	r4, #2
 800d302:	1d1a      	adds	r2, r3, #4
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	9203      	str	r2, [sp, #12]
 800d308:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d30c:	9305      	str	r3, [sp, #20]
 800d30e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d3d8 <_vfiprintf_r+0x220>
 800d312:	2203      	movs	r2, #3
 800d314:	4650      	mov	r0, sl
 800d316:	7821      	ldrb	r1, [r4, #0]
 800d318:	f7fe fbdf 	bl	800bada <memchr>
 800d31c:	b138      	cbz	r0, 800d32e <_vfiprintf_r+0x176>
 800d31e:	2240      	movs	r2, #64	@ 0x40
 800d320:	9b04      	ldr	r3, [sp, #16]
 800d322:	eba0 000a 	sub.w	r0, r0, sl
 800d326:	4082      	lsls	r2, r0
 800d328:	4313      	orrs	r3, r2
 800d32a:	3401      	adds	r4, #1
 800d32c:	9304      	str	r3, [sp, #16]
 800d32e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d332:	2206      	movs	r2, #6
 800d334:	4829      	ldr	r0, [pc, #164]	@ (800d3dc <_vfiprintf_r+0x224>)
 800d336:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d33a:	f7fe fbce 	bl	800bada <memchr>
 800d33e:	2800      	cmp	r0, #0
 800d340:	d03f      	beq.n	800d3c2 <_vfiprintf_r+0x20a>
 800d342:	4b27      	ldr	r3, [pc, #156]	@ (800d3e0 <_vfiprintf_r+0x228>)
 800d344:	bb1b      	cbnz	r3, 800d38e <_vfiprintf_r+0x1d6>
 800d346:	9b03      	ldr	r3, [sp, #12]
 800d348:	3307      	adds	r3, #7
 800d34a:	f023 0307 	bic.w	r3, r3, #7
 800d34e:	3308      	adds	r3, #8
 800d350:	9303      	str	r3, [sp, #12]
 800d352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d354:	443b      	add	r3, r7
 800d356:	9309      	str	r3, [sp, #36]	@ 0x24
 800d358:	e76a      	b.n	800d230 <_vfiprintf_r+0x78>
 800d35a:	460c      	mov	r4, r1
 800d35c:	2001      	movs	r0, #1
 800d35e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d362:	e7a8      	b.n	800d2b6 <_vfiprintf_r+0xfe>
 800d364:	2300      	movs	r3, #0
 800d366:	f04f 0c0a 	mov.w	ip, #10
 800d36a:	4619      	mov	r1, r3
 800d36c:	3401      	adds	r4, #1
 800d36e:	9305      	str	r3, [sp, #20]
 800d370:	4620      	mov	r0, r4
 800d372:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d376:	3a30      	subs	r2, #48	@ 0x30
 800d378:	2a09      	cmp	r2, #9
 800d37a:	d903      	bls.n	800d384 <_vfiprintf_r+0x1cc>
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d0c6      	beq.n	800d30e <_vfiprintf_r+0x156>
 800d380:	9105      	str	r1, [sp, #20]
 800d382:	e7c4      	b.n	800d30e <_vfiprintf_r+0x156>
 800d384:	4604      	mov	r4, r0
 800d386:	2301      	movs	r3, #1
 800d388:	fb0c 2101 	mla	r1, ip, r1, r2
 800d38c:	e7f0      	b.n	800d370 <_vfiprintf_r+0x1b8>
 800d38e:	ab03      	add	r3, sp, #12
 800d390:	9300      	str	r3, [sp, #0]
 800d392:	462a      	mov	r2, r5
 800d394:	4630      	mov	r0, r6
 800d396:	4b13      	ldr	r3, [pc, #76]	@ (800d3e4 <_vfiprintf_r+0x22c>)
 800d398:	a904      	add	r1, sp, #16
 800d39a:	f7fd fe4b 	bl	800b034 <_printf_float>
 800d39e:	4607      	mov	r7, r0
 800d3a0:	1c78      	adds	r0, r7, #1
 800d3a2:	d1d6      	bne.n	800d352 <_vfiprintf_r+0x19a>
 800d3a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3a6:	07d9      	lsls	r1, r3, #31
 800d3a8:	d405      	bmi.n	800d3b6 <_vfiprintf_r+0x1fe>
 800d3aa:	89ab      	ldrh	r3, [r5, #12]
 800d3ac:	059a      	lsls	r2, r3, #22
 800d3ae:	d402      	bmi.n	800d3b6 <_vfiprintf_r+0x1fe>
 800d3b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3b2:	f7fe fb91 	bl	800bad8 <__retarget_lock_release_recursive>
 800d3b6:	89ab      	ldrh	r3, [r5, #12]
 800d3b8:	065b      	lsls	r3, r3, #25
 800d3ba:	f53f af1f 	bmi.w	800d1fc <_vfiprintf_r+0x44>
 800d3be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d3c0:	e71e      	b.n	800d200 <_vfiprintf_r+0x48>
 800d3c2:	ab03      	add	r3, sp, #12
 800d3c4:	9300      	str	r3, [sp, #0]
 800d3c6:	462a      	mov	r2, r5
 800d3c8:	4630      	mov	r0, r6
 800d3ca:	4b06      	ldr	r3, [pc, #24]	@ (800d3e4 <_vfiprintf_r+0x22c>)
 800d3cc:	a904      	add	r1, sp, #16
 800d3ce:	f7fe f8cf 	bl	800b570 <_printf_i>
 800d3d2:	e7e4      	b.n	800d39e <_vfiprintf_r+0x1e6>
 800d3d4:	0800e257 	.word	0x0800e257
 800d3d8:	0800e25d 	.word	0x0800e25d
 800d3dc:	0800e261 	.word	0x0800e261
 800d3e0:	0800b035 	.word	0x0800b035
 800d3e4:	0800d195 	.word	0x0800d195

0800d3e8 <__swbuf_r>:
 800d3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3ea:	460e      	mov	r6, r1
 800d3ec:	4614      	mov	r4, r2
 800d3ee:	4605      	mov	r5, r0
 800d3f0:	b118      	cbz	r0, 800d3fa <__swbuf_r+0x12>
 800d3f2:	6a03      	ldr	r3, [r0, #32]
 800d3f4:	b90b      	cbnz	r3, 800d3fa <__swbuf_r+0x12>
 800d3f6:	f7fe fa67 	bl	800b8c8 <__sinit>
 800d3fa:	69a3      	ldr	r3, [r4, #24]
 800d3fc:	60a3      	str	r3, [r4, #8]
 800d3fe:	89a3      	ldrh	r3, [r4, #12]
 800d400:	071a      	lsls	r2, r3, #28
 800d402:	d501      	bpl.n	800d408 <__swbuf_r+0x20>
 800d404:	6923      	ldr	r3, [r4, #16]
 800d406:	b943      	cbnz	r3, 800d41a <__swbuf_r+0x32>
 800d408:	4621      	mov	r1, r4
 800d40a:	4628      	mov	r0, r5
 800d40c:	f000 f82a 	bl	800d464 <__swsetup_r>
 800d410:	b118      	cbz	r0, 800d41a <__swbuf_r+0x32>
 800d412:	f04f 37ff 	mov.w	r7, #4294967295
 800d416:	4638      	mov	r0, r7
 800d418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d41a:	6823      	ldr	r3, [r4, #0]
 800d41c:	6922      	ldr	r2, [r4, #16]
 800d41e:	b2f6      	uxtb	r6, r6
 800d420:	1a98      	subs	r0, r3, r2
 800d422:	6963      	ldr	r3, [r4, #20]
 800d424:	4637      	mov	r7, r6
 800d426:	4283      	cmp	r3, r0
 800d428:	dc05      	bgt.n	800d436 <__swbuf_r+0x4e>
 800d42a:	4621      	mov	r1, r4
 800d42c:	4628      	mov	r0, r5
 800d42e:	f7ff fdfb 	bl	800d028 <_fflush_r>
 800d432:	2800      	cmp	r0, #0
 800d434:	d1ed      	bne.n	800d412 <__swbuf_r+0x2a>
 800d436:	68a3      	ldr	r3, [r4, #8]
 800d438:	3b01      	subs	r3, #1
 800d43a:	60a3      	str	r3, [r4, #8]
 800d43c:	6823      	ldr	r3, [r4, #0]
 800d43e:	1c5a      	adds	r2, r3, #1
 800d440:	6022      	str	r2, [r4, #0]
 800d442:	701e      	strb	r6, [r3, #0]
 800d444:	6962      	ldr	r2, [r4, #20]
 800d446:	1c43      	adds	r3, r0, #1
 800d448:	429a      	cmp	r2, r3
 800d44a:	d004      	beq.n	800d456 <__swbuf_r+0x6e>
 800d44c:	89a3      	ldrh	r3, [r4, #12]
 800d44e:	07db      	lsls	r3, r3, #31
 800d450:	d5e1      	bpl.n	800d416 <__swbuf_r+0x2e>
 800d452:	2e0a      	cmp	r6, #10
 800d454:	d1df      	bne.n	800d416 <__swbuf_r+0x2e>
 800d456:	4621      	mov	r1, r4
 800d458:	4628      	mov	r0, r5
 800d45a:	f7ff fde5 	bl	800d028 <_fflush_r>
 800d45e:	2800      	cmp	r0, #0
 800d460:	d0d9      	beq.n	800d416 <__swbuf_r+0x2e>
 800d462:	e7d6      	b.n	800d412 <__swbuf_r+0x2a>

0800d464 <__swsetup_r>:
 800d464:	b538      	push	{r3, r4, r5, lr}
 800d466:	4b29      	ldr	r3, [pc, #164]	@ (800d50c <__swsetup_r+0xa8>)
 800d468:	4605      	mov	r5, r0
 800d46a:	6818      	ldr	r0, [r3, #0]
 800d46c:	460c      	mov	r4, r1
 800d46e:	b118      	cbz	r0, 800d478 <__swsetup_r+0x14>
 800d470:	6a03      	ldr	r3, [r0, #32]
 800d472:	b90b      	cbnz	r3, 800d478 <__swsetup_r+0x14>
 800d474:	f7fe fa28 	bl	800b8c8 <__sinit>
 800d478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d47c:	0719      	lsls	r1, r3, #28
 800d47e:	d422      	bmi.n	800d4c6 <__swsetup_r+0x62>
 800d480:	06da      	lsls	r2, r3, #27
 800d482:	d407      	bmi.n	800d494 <__swsetup_r+0x30>
 800d484:	2209      	movs	r2, #9
 800d486:	602a      	str	r2, [r5, #0]
 800d488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d48c:	f04f 30ff 	mov.w	r0, #4294967295
 800d490:	81a3      	strh	r3, [r4, #12]
 800d492:	e033      	b.n	800d4fc <__swsetup_r+0x98>
 800d494:	0758      	lsls	r0, r3, #29
 800d496:	d512      	bpl.n	800d4be <__swsetup_r+0x5a>
 800d498:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d49a:	b141      	cbz	r1, 800d4ae <__swsetup_r+0x4a>
 800d49c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d4a0:	4299      	cmp	r1, r3
 800d4a2:	d002      	beq.n	800d4aa <__swsetup_r+0x46>
 800d4a4:	4628      	mov	r0, r5
 800d4a6:	f7ff f977 	bl	800c798 <_free_r>
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	6363      	str	r3, [r4, #52]	@ 0x34
 800d4ae:	89a3      	ldrh	r3, [r4, #12]
 800d4b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d4b4:	81a3      	strh	r3, [r4, #12]
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	6063      	str	r3, [r4, #4]
 800d4ba:	6923      	ldr	r3, [r4, #16]
 800d4bc:	6023      	str	r3, [r4, #0]
 800d4be:	89a3      	ldrh	r3, [r4, #12]
 800d4c0:	f043 0308 	orr.w	r3, r3, #8
 800d4c4:	81a3      	strh	r3, [r4, #12]
 800d4c6:	6923      	ldr	r3, [r4, #16]
 800d4c8:	b94b      	cbnz	r3, 800d4de <__swsetup_r+0x7a>
 800d4ca:	89a3      	ldrh	r3, [r4, #12]
 800d4cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d4d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4d4:	d003      	beq.n	800d4de <__swsetup_r+0x7a>
 800d4d6:	4621      	mov	r1, r4
 800d4d8:	4628      	mov	r0, r5
 800d4da:	f000 f882 	bl	800d5e2 <__smakebuf_r>
 800d4de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4e2:	f013 0201 	ands.w	r2, r3, #1
 800d4e6:	d00a      	beq.n	800d4fe <__swsetup_r+0x9a>
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	60a2      	str	r2, [r4, #8]
 800d4ec:	6962      	ldr	r2, [r4, #20]
 800d4ee:	4252      	negs	r2, r2
 800d4f0:	61a2      	str	r2, [r4, #24]
 800d4f2:	6922      	ldr	r2, [r4, #16]
 800d4f4:	b942      	cbnz	r2, 800d508 <__swsetup_r+0xa4>
 800d4f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d4fa:	d1c5      	bne.n	800d488 <__swsetup_r+0x24>
 800d4fc:	bd38      	pop	{r3, r4, r5, pc}
 800d4fe:	0799      	lsls	r1, r3, #30
 800d500:	bf58      	it	pl
 800d502:	6962      	ldrpl	r2, [r4, #20]
 800d504:	60a2      	str	r2, [r4, #8]
 800d506:	e7f4      	b.n	800d4f2 <__swsetup_r+0x8e>
 800d508:	2000      	movs	r0, #0
 800d50a:	e7f7      	b.n	800d4fc <__swsetup_r+0x98>
 800d50c:	200001bc 	.word	0x200001bc

0800d510 <_raise_r>:
 800d510:	291f      	cmp	r1, #31
 800d512:	b538      	push	{r3, r4, r5, lr}
 800d514:	4605      	mov	r5, r0
 800d516:	460c      	mov	r4, r1
 800d518:	d904      	bls.n	800d524 <_raise_r+0x14>
 800d51a:	2316      	movs	r3, #22
 800d51c:	6003      	str	r3, [r0, #0]
 800d51e:	f04f 30ff 	mov.w	r0, #4294967295
 800d522:	bd38      	pop	{r3, r4, r5, pc}
 800d524:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d526:	b112      	cbz	r2, 800d52e <_raise_r+0x1e>
 800d528:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d52c:	b94b      	cbnz	r3, 800d542 <_raise_r+0x32>
 800d52e:	4628      	mov	r0, r5
 800d530:	f000 f830 	bl	800d594 <_getpid_r>
 800d534:	4622      	mov	r2, r4
 800d536:	4601      	mov	r1, r0
 800d538:	4628      	mov	r0, r5
 800d53a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d53e:	f000 b817 	b.w	800d570 <_kill_r>
 800d542:	2b01      	cmp	r3, #1
 800d544:	d00a      	beq.n	800d55c <_raise_r+0x4c>
 800d546:	1c59      	adds	r1, r3, #1
 800d548:	d103      	bne.n	800d552 <_raise_r+0x42>
 800d54a:	2316      	movs	r3, #22
 800d54c:	6003      	str	r3, [r0, #0]
 800d54e:	2001      	movs	r0, #1
 800d550:	e7e7      	b.n	800d522 <_raise_r+0x12>
 800d552:	2100      	movs	r1, #0
 800d554:	4620      	mov	r0, r4
 800d556:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d55a:	4798      	blx	r3
 800d55c:	2000      	movs	r0, #0
 800d55e:	e7e0      	b.n	800d522 <_raise_r+0x12>

0800d560 <raise>:
 800d560:	4b02      	ldr	r3, [pc, #8]	@ (800d56c <raise+0xc>)
 800d562:	4601      	mov	r1, r0
 800d564:	6818      	ldr	r0, [r3, #0]
 800d566:	f7ff bfd3 	b.w	800d510 <_raise_r>
 800d56a:	bf00      	nop
 800d56c:	200001bc 	.word	0x200001bc

0800d570 <_kill_r>:
 800d570:	b538      	push	{r3, r4, r5, lr}
 800d572:	2300      	movs	r3, #0
 800d574:	4d06      	ldr	r5, [pc, #24]	@ (800d590 <_kill_r+0x20>)
 800d576:	4604      	mov	r4, r0
 800d578:	4608      	mov	r0, r1
 800d57a:	4611      	mov	r1, r2
 800d57c:	602b      	str	r3, [r5, #0]
 800d57e:	f7f5 fa00 	bl	8002982 <_kill>
 800d582:	1c43      	adds	r3, r0, #1
 800d584:	d102      	bne.n	800d58c <_kill_r+0x1c>
 800d586:	682b      	ldr	r3, [r5, #0]
 800d588:	b103      	cbz	r3, 800d58c <_kill_r+0x1c>
 800d58a:	6023      	str	r3, [r4, #0]
 800d58c:	bd38      	pop	{r3, r4, r5, pc}
 800d58e:	bf00      	nop
 800d590:	200018fc 	.word	0x200018fc

0800d594 <_getpid_r>:
 800d594:	f7f5 b9ee 	b.w	8002974 <_getpid>

0800d598 <__swhatbuf_r>:
 800d598:	b570      	push	{r4, r5, r6, lr}
 800d59a:	460c      	mov	r4, r1
 800d59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5a0:	4615      	mov	r5, r2
 800d5a2:	2900      	cmp	r1, #0
 800d5a4:	461e      	mov	r6, r3
 800d5a6:	b096      	sub	sp, #88	@ 0x58
 800d5a8:	da0c      	bge.n	800d5c4 <__swhatbuf_r+0x2c>
 800d5aa:	89a3      	ldrh	r3, [r4, #12]
 800d5ac:	2100      	movs	r1, #0
 800d5ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d5b2:	bf14      	ite	ne
 800d5b4:	2340      	movne	r3, #64	@ 0x40
 800d5b6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d5ba:	2000      	movs	r0, #0
 800d5bc:	6031      	str	r1, [r6, #0]
 800d5be:	602b      	str	r3, [r5, #0]
 800d5c0:	b016      	add	sp, #88	@ 0x58
 800d5c2:	bd70      	pop	{r4, r5, r6, pc}
 800d5c4:	466a      	mov	r2, sp
 800d5c6:	f000 f849 	bl	800d65c <_fstat_r>
 800d5ca:	2800      	cmp	r0, #0
 800d5cc:	dbed      	blt.n	800d5aa <__swhatbuf_r+0x12>
 800d5ce:	9901      	ldr	r1, [sp, #4]
 800d5d0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d5d4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d5d8:	4259      	negs	r1, r3
 800d5da:	4159      	adcs	r1, r3
 800d5dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d5e0:	e7eb      	b.n	800d5ba <__swhatbuf_r+0x22>

0800d5e2 <__smakebuf_r>:
 800d5e2:	898b      	ldrh	r3, [r1, #12]
 800d5e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5e6:	079d      	lsls	r5, r3, #30
 800d5e8:	4606      	mov	r6, r0
 800d5ea:	460c      	mov	r4, r1
 800d5ec:	d507      	bpl.n	800d5fe <__smakebuf_r+0x1c>
 800d5ee:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d5f2:	6023      	str	r3, [r4, #0]
 800d5f4:	6123      	str	r3, [r4, #16]
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	6163      	str	r3, [r4, #20]
 800d5fa:	b003      	add	sp, #12
 800d5fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5fe:	466a      	mov	r2, sp
 800d600:	ab01      	add	r3, sp, #4
 800d602:	f7ff ffc9 	bl	800d598 <__swhatbuf_r>
 800d606:	9f00      	ldr	r7, [sp, #0]
 800d608:	4605      	mov	r5, r0
 800d60a:	4639      	mov	r1, r7
 800d60c:	4630      	mov	r0, r6
 800d60e:	f7fd fbe7 	bl	800ade0 <_malloc_r>
 800d612:	b948      	cbnz	r0, 800d628 <__smakebuf_r+0x46>
 800d614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d618:	059a      	lsls	r2, r3, #22
 800d61a:	d4ee      	bmi.n	800d5fa <__smakebuf_r+0x18>
 800d61c:	f023 0303 	bic.w	r3, r3, #3
 800d620:	f043 0302 	orr.w	r3, r3, #2
 800d624:	81a3      	strh	r3, [r4, #12]
 800d626:	e7e2      	b.n	800d5ee <__smakebuf_r+0xc>
 800d628:	89a3      	ldrh	r3, [r4, #12]
 800d62a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d62e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d632:	81a3      	strh	r3, [r4, #12]
 800d634:	9b01      	ldr	r3, [sp, #4]
 800d636:	6020      	str	r0, [r4, #0]
 800d638:	b15b      	cbz	r3, 800d652 <__smakebuf_r+0x70>
 800d63a:	4630      	mov	r0, r6
 800d63c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d640:	f000 f81e 	bl	800d680 <_isatty_r>
 800d644:	b128      	cbz	r0, 800d652 <__smakebuf_r+0x70>
 800d646:	89a3      	ldrh	r3, [r4, #12]
 800d648:	f023 0303 	bic.w	r3, r3, #3
 800d64c:	f043 0301 	orr.w	r3, r3, #1
 800d650:	81a3      	strh	r3, [r4, #12]
 800d652:	89a3      	ldrh	r3, [r4, #12]
 800d654:	431d      	orrs	r5, r3
 800d656:	81a5      	strh	r5, [r4, #12]
 800d658:	e7cf      	b.n	800d5fa <__smakebuf_r+0x18>
	...

0800d65c <_fstat_r>:
 800d65c:	b538      	push	{r3, r4, r5, lr}
 800d65e:	2300      	movs	r3, #0
 800d660:	4d06      	ldr	r5, [pc, #24]	@ (800d67c <_fstat_r+0x20>)
 800d662:	4604      	mov	r4, r0
 800d664:	4608      	mov	r0, r1
 800d666:	4611      	mov	r1, r2
 800d668:	602b      	str	r3, [r5, #0]
 800d66a:	f7f5 f9e9 	bl	8002a40 <_fstat>
 800d66e:	1c43      	adds	r3, r0, #1
 800d670:	d102      	bne.n	800d678 <_fstat_r+0x1c>
 800d672:	682b      	ldr	r3, [r5, #0]
 800d674:	b103      	cbz	r3, 800d678 <_fstat_r+0x1c>
 800d676:	6023      	str	r3, [r4, #0]
 800d678:	bd38      	pop	{r3, r4, r5, pc}
 800d67a:	bf00      	nop
 800d67c:	200018fc 	.word	0x200018fc

0800d680 <_isatty_r>:
 800d680:	b538      	push	{r3, r4, r5, lr}
 800d682:	2300      	movs	r3, #0
 800d684:	4d05      	ldr	r5, [pc, #20]	@ (800d69c <_isatty_r+0x1c>)
 800d686:	4604      	mov	r4, r0
 800d688:	4608      	mov	r0, r1
 800d68a:	602b      	str	r3, [r5, #0]
 800d68c:	f7f5 f9e7 	bl	8002a5e <_isatty>
 800d690:	1c43      	adds	r3, r0, #1
 800d692:	d102      	bne.n	800d69a <_isatty_r+0x1a>
 800d694:	682b      	ldr	r3, [r5, #0]
 800d696:	b103      	cbz	r3, 800d69a <_isatty_r+0x1a>
 800d698:	6023      	str	r3, [r4, #0]
 800d69a:	bd38      	pop	{r3, r4, r5, pc}
 800d69c:	200018fc 	.word	0x200018fc

0800d6a0 <log>:
 800d6a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6a2:	4604      	mov	r4, r0
 800d6a4:	460d      	mov	r5, r1
 800d6a6:	f000 f833 	bl	800d710 <__ieee754_log>
 800d6aa:	4622      	mov	r2, r4
 800d6ac:	4606      	mov	r6, r0
 800d6ae:	460f      	mov	r7, r1
 800d6b0:	462b      	mov	r3, r5
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	4629      	mov	r1, r5
 800d6b6:	f7f3 f9e5 	bl	8000a84 <__aeabi_dcmpun>
 800d6ba:	b998      	cbnz	r0, 800d6e4 <log+0x44>
 800d6bc:	2200      	movs	r2, #0
 800d6be:	2300      	movs	r3, #0
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	4629      	mov	r1, r5
 800d6c4:	f7f3 f9d4 	bl	8000a70 <__aeabi_dcmpgt>
 800d6c8:	b960      	cbnz	r0, 800d6e4 <log+0x44>
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	4620      	mov	r0, r4
 800d6d0:	4629      	mov	r1, r5
 800d6d2:	f7f3 f9a5 	bl	8000a20 <__aeabi_dcmpeq>
 800d6d6:	b140      	cbz	r0, 800d6ea <log+0x4a>
 800d6d8:	f7fe f9d2 	bl	800ba80 <__errno>
 800d6dc:	2322      	movs	r3, #34	@ 0x22
 800d6de:	2600      	movs	r6, #0
 800d6e0:	4f06      	ldr	r7, [pc, #24]	@ (800d6fc <log+0x5c>)
 800d6e2:	6003      	str	r3, [r0, #0]
 800d6e4:	4630      	mov	r0, r6
 800d6e6:	4639      	mov	r1, r7
 800d6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6ea:	f7fe f9c9 	bl	800ba80 <__errno>
 800d6ee:	2321      	movs	r3, #33	@ 0x21
 800d6f0:	6003      	str	r3, [r0, #0]
 800d6f2:	4803      	ldr	r0, [pc, #12]	@ (800d700 <log+0x60>)
 800d6f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d6f8:	f000 b804 	b.w	800d704 <nan>
 800d6fc:	fff00000 	.word	0xfff00000
 800d700:	0800e155 	.word	0x0800e155

0800d704 <nan>:
 800d704:	2000      	movs	r0, #0
 800d706:	4901      	ldr	r1, [pc, #4]	@ (800d70c <nan+0x8>)
 800d708:	4770      	bx	lr
 800d70a:	bf00      	nop
 800d70c:	7ff80000 	.word	0x7ff80000

0800d710 <__ieee754_log>:
 800d710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d714:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800d718:	4602      	mov	r2, r0
 800d71a:	460b      	mov	r3, r1
 800d71c:	460d      	mov	r5, r1
 800d71e:	b087      	sub	sp, #28
 800d720:	da24      	bge.n	800d76c <__ieee754_log+0x5c>
 800d722:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800d726:	4304      	orrs	r4, r0
 800d728:	d108      	bne.n	800d73c <__ieee754_log+0x2c>
 800d72a:	2200      	movs	r2, #0
 800d72c:	2300      	movs	r3, #0
 800d72e:	2000      	movs	r0, #0
 800d730:	49cb      	ldr	r1, [pc, #812]	@ (800da60 <__ieee754_log+0x350>)
 800d732:	f7f3 f837 	bl	80007a4 <__aeabi_ddiv>
 800d736:	b007      	add	sp, #28
 800d738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d73c:	2900      	cmp	r1, #0
 800d73e:	da04      	bge.n	800d74a <__ieee754_log+0x3a>
 800d740:	f7f2 fd4e 	bl	80001e0 <__aeabi_dsub>
 800d744:	2200      	movs	r2, #0
 800d746:	2300      	movs	r3, #0
 800d748:	e7f3      	b.n	800d732 <__ieee754_log+0x22>
 800d74a:	2200      	movs	r2, #0
 800d74c:	4bc5      	ldr	r3, [pc, #788]	@ (800da64 <__ieee754_log+0x354>)
 800d74e:	f7f2 feff 	bl	8000550 <__aeabi_dmul>
 800d752:	460b      	mov	r3, r1
 800d754:	460d      	mov	r5, r1
 800d756:	4602      	mov	r2, r0
 800d758:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 800d75c:	48c2      	ldr	r0, [pc, #776]	@ (800da68 <__ieee754_log+0x358>)
 800d75e:	4285      	cmp	r5, r0
 800d760:	dd06      	ble.n	800d770 <__ieee754_log+0x60>
 800d762:	4610      	mov	r0, r2
 800d764:	4619      	mov	r1, r3
 800d766:	f7f2 fd3d 	bl	80001e4 <__adddf3>
 800d76a:	e7e4      	b.n	800d736 <__ieee754_log+0x26>
 800d76c:	2100      	movs	r1, #0
 800d76e:	e7f5      	b.n	800d75c <__ieee754_log+0x4c>
 800d770:	152c      	asrs	r4, r5, #20
 800d772:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800d776:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d77a:	440c      	add	r4, r1
 800d77c:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 800d780:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 800d784:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 800d788:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 800d78c:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 800d790:	ea41 0305 	orr.w	r3, r1, r5
 800d794:	4610      	mov	r0, r2
 800d796:	4619      	mov	r1, r3
 800d798:	2200      	movs	r2, #0
 800d79a:	4bb4      	ldr	r3, [pc, #720]	@ (800da6c <__ieee754_log+0x35c>)
 800d79c:	f7f2 fd20 	bl	80001e0 <__aeabi_dsub>
 800d7a0:	1cab      	adds	r3, r5, #2
 800d7a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7a6:	2b02      	cmp	r3, #2
 800d7a8:	4682      	mov	sl, r0
 800d7aa:	468b      	mov	fp, r1
 800d7ac:	f04f 0200 	mov.w	r2, #0
 800d7b0:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800d7b4:	dc53      	bgt.n	800d85e <__ieee754_log+0x14e>
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	f7f3 f932 	bl	8000a20 <__aeabi_dcmpeq>
 800d7bc:	b1d0      	cbz	r0, 800d7f4 <__ieee754_log+0xe4>
 800d7be:	2c00      	cmp	r4, #0
 800d7c0:	f000 8120 	beq.w	800da04 <__ieee754_log+0x2f4>
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	f7f2 fe59 	bl	800047c <__aeabi_i2d>
 800d7ca:	a391      	add	r3, pc, #580	@ (adr r3, 800da10 <__ieee754_log+0x300>)
 800d7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d0:	4606      	mov	r6, r0
 800d7d2:	460f      	mov	r7, r1
 800d7d4:	f7f2 febc 	bl	8000550 <__aeabi_dmul>
 800d7d8:	a38f      	add	r3, pc, #572	@ (adr r3, 800da18 <__ieee754_log+0x308>)
 800d7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7de:	4604      	mov	r4, r0
 800d7e0:	460d      	mov	r5, r1
 800d7e2:	4630      	mov	r0, r6
 800d7e4:	4639      	mov	r1, r7
 800d7e6:	f7f2 feb3 	bl	8000550 <__aeabi_dmul>
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	460b      	mov	r3, r1
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	4629      	mov	r1, r5
 800d7f2:	e7b8      	b.n	800d766 <__ieee754_log+0x56>
 800d7f4:	a38a      	add	r3, pc, #552	@ (adr r3, 800da20 <__ieee754_log+0x310>)
 800d7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fa:	4650      	mov	r0, sl
 800d7fc:	4659      	mov	r1, fp
 800d7fe:	f7f2 fea7 	bl	8000550 <__aeabi_dmul>
 800d802:	4602      	mov	r2, r0
 800d804:	460b      	mov	r3, r1
 800d806:	2000      	movs	r0, #0
 800d808:	4999      	ldr	r1, [pc, #612]	@ (800da70 <__ieee754_log+0x360>)
 800d80a:	f7f2 fce9 	bl	80001e0 <__aeabi_dsub>
 800d80e:	4652      	mov	r2, sl
 800d810:	4606      	mov	r6, r0
 800d812:	460f      	mov	r7, r1
 800d814:	465b      	mov	r3, fp
 800d816:	4650      	mov	r0, sl
 800d818:	4659      	mov	r1, fp
 800d81a:	f7f2 fe99 	bl	8000550 <__aeabi_dmul>
 800d81e:	4602      	mov	r2, r0
 800d820:	460b      	mov	r3, r1
 800d822:	4630      	mov	r0, r6
 800d824:	4639      	mov	r1, r7
 800d826:	f7f2 fe93 	bl	8000550 <__aeabi_dmul>
 800d82a:	4606      	mov	r6, r0
 800d82c:	460f      	mov	r7, r1
 800d82e:	b914      	cbnz	r4, 800d836 <__ieee754_log+0x126>
 800d830:	4632      	mov	r2, r6
 800d832:	463b      	mov	r3, r7
 800d834:	e0a0      	b.n	800d978 <__ieee754_log+0x268>
 800d836:	4620      	mov	r0, r4
 800d838:	f7f2 fe20 	bl	800047c <__aeabi_i2d>
 800d83c:	a374      	add	r3, pc, #464	@ (adr r3, 800da10 <__ieee754_log+0x300>)
 800d83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d842:	4680      	mov	r8, r0
 800d844:	4689      	mov	r9, r1
 800d846:	f7f2 fe83 	bl	8000550 <__aeabi_dmul>
 800d84a:	a373      	add	r3, pc, #460	@ (adr r3, 800da18 <__ieee754_log+0x308>)
 800d84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d850:	4604      	mov	r4, r0
 800d852:	460d      	mov	r5, r1
 800d854:	4640      	mov	r0, r8
 800d856:	4649      	mov	r1, r9
 800d858:	f7f2 fe7a 	bl	8000550 <__aeabi_dmul>
 800d85c:	e0a5      	b.n	800d9aa <__ieee754_log+0x29a>
 800d85e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d862:	f7f2 fcbf 	bl	80001e4 <__adddf3>
 800d866:	4602      	mov	r2, r0
 800d868:	460b      	mov	r3, r1
 800d86a:	4650      	mov	r0, sl
 800d86c:	4659      	mov	r1, fp
 800d86e:	f7f2 ff99 	bl	80007a4 <__aeabi_ddiv>
 800d872:	e9cd 0100 	strd	r0, r1, [sp]
 800d876:	4620      	mov	r0, r4
 800d878:	f7f2 fe00 	bl	800047c <__aeabi_i2d>
 800d87c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d880:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d884:	4610      	mov	r0, r2
 800d886:	4619      	mov	r1, r3
 800d888:	f7f2 fe62 	bl	8000550 <__aeabi_dmul>
 800d88c:	4602      	mov	r2, r0
 800d88e:	460b      	mov	r3, r1
 800d890:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d894:	f7f2 fe5c 	bl	8000550 <__aeabi_dmul>
 800d898:	a363      	add	r3, pc, #396	@ (adr r3, 800da28 <__ieee754_log+0x318>)
 800d89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89e:	4680      	mov	r8, r0
 800d8a0:	4689      	mov	r9, r1
 800d8a2:	f7f2 fe55 	bl	8000550 <__aeabi_dmul>
 800d8a6:	a362      	add	r3, pc, #392	@ (adr r3, 800da30 <__ieee754_log+0x320>)
 800d8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ac:	f7f2 fc9a 	bl	80001e4 <__adddf3>
 800d8b0:	4642      	mov	r2, r8
 800d8b2:	464b      	mov	r3, r9
 800d8b4:	f7f2 fe4c 	bl	8000550 <__aeabi_dmul>
 800d8b8:	a35f      	add	r3, pc, #380	@ (adr r3, 800da38 <__ieee754_log+0x328>)
 800d8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8be:	f7f2 fc91 	bl	80001e4 <__adddf3>
 800d8c2:	4642      	mov	r2, r8
 800d8c4:	464b      	mov	r3, r9
 800d8c6:	f7f2 fe43 	bl	8000550 <__aeabi_dmul>
 800d8ca:	a35d      	add	r3, pc, #372	@ (adr r3, 800da40 <__ieee754_log+0x330>)
 800d8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d0:	f7f2 fc88 	bl	80001e4 <__adddf3>
 800d8d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8d8:	f7f2 fe3a 	bl	8000550 <__aeabi_dmul>
 800d8dc:	a35a      	add	r3, pc, #360	@ (adr r3, 800da48 <__ieee754_log+0x338>)
 800d8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d8e6:	4640      	mov	r0, r8
 800d8e8:	4649      	mov	r1, r9
 800d8ea:	f7f2 fe31 	bl	8000550 <__aeabi_dmul>
 800d8ee:	a358      	add	r3, pc, #352	@ (adr r3, 800da50 <__ieee754_log+0x340>)
 800d8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f4:	f7f2 fc76 	bl	80001e4 <__adddf3>
 800d8f8:	4642      	mov	r2, r8
 800d8fa:	464b      	mov	r3, r9
 800d8fc:	f7f2 fe28 	bl	8000550 <__aeabi_dmul>
 800d900:	a355      	add	r3, pc, #340	@ (adr r3, 800da58 <__ieee754_log+0x348>)
 800d902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d906:	f7f2 fc6d 	bl	80001e4 <__adddf3>
 800d90a:	4642      	mov	r2, r8
 800d90c:	464b      	mov	r3, r9
 800d90e:	f7f2 fe1f 	bl	8000550 <__aeabi_dmul>
 800d912:	4602      	mov	r2, r0
 800d914:	460b      	mov	r3, r1
 800d916:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d91a:	f7f2 fc63 	bl	80001e4 <__adddf3>
 800d91e:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800d922:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800d926:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800d92a:	3551      	adds	r5, #81	@ 0x51
 800d92c:	4335      	orrs	r5, r6
 800d92e:	2d00      	cmp	r5, #0
 800d930:	4680      	mov	r8, r0
 800d932:	4689      	mov	r9, r1
 800d934:	dd48      	ble.n	800d9c8 <__ieee754_log+0x2b8>
 800d936:	2200      	movs	r2, #0
 800d938:	4b4d      	ldr	r3, [pc, #308]	@ (800da70 <__ieee754_log+0x360>)
 800d93a:	4650      	mov	r0, sl
 800d93c:	4659      	mov	r1, fp
 800d93e:	f7f2 fe07 	bl	8000550 <__aeabi_dmul>
 800d942:	4652      	mov	r2, sl
 800d944:	465b      	mov	r3, fp
 800d946:	f7f2 fe03 	bl	8000550 <__aeabi_dmul>
 800d94a:	4602      	mov	r2, r0
 800d94c:	460b      	mov	r3, r1
 800d94e:	4606      	mov	r6, r0
 800d950:	460f      	mov	r7, r1
 800d952:	4640      	mov	r0, r8
 800d954:	4649      	mov	r1, r9
 800d956:	f7f2 fc45 	bl	80001e4 <__adddf3>
 800d95a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d95e:	f7f2 fdf7 	bl	8000550 <__aeabi_dmul>
 800d962:	4680      	mov	r8, r0
 800d964:	4689      	mov	r9, r1
 800d966:	b964      	cbnz	r4, 800d982 <__ieee754_log+0x272>
 800d968:	4602      	mov	r2, r0
 800d96a:	460b      	mov	r3, r1
 800d96c:	4630      	mov	r0, r6
 800d96e:	4639      	mov	r1, r7
 800d970:	f7f2 fc36 	bl	80001e0 <__aeabi_dsub>
 800d974:	4602      	mov	r2, r0
 800d976:	460b      	mov	r3, r1
 800d978:	4650      	mov	r0, sl
 800d97a:	4659      	mov	r1, fp
 800d97c:	f7f2 fc30 	bl	80001e0 <__aeabi_dsub>
 800d980:	e6d9      	b.n	800d736 <__ieee754_log+0x26>
 800d982:	a323      	add	r3, pc, #140	@ (adr r3, 800da10 <__ieee754_log+0x300>)
 800d984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d988:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d98c:	f7f2 fde0 	bl	8000550 <__aeabi_dmul>
 800d990:	a321      	add	r3, pc, #132	@ (adr r3, 800da18 <__ieee754_log+0x308>)
 800d992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d996:	4604      	mov	r4, r0
 800d998:	460d      	mov	r5, r1
 800d99a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d99e:	f7f2 fdd7 	bl	8000550 <__aeabi_dmul>
 800d9a2:	4642      	mov	r2, r8
 800d9a4:	464b      	mov	r3, r9
 800d9a6:	f7f2 fc1d 	bl	80001e4 <__adddf3>
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	460b      	mov	r3, r1
 800d9ae:	4630      	mov	r0, r6
 800d9b0:	4639      	mov	r1, r7
 800d9b2:	f7f2 fc15 	bl	80001e0 <__aeabi_dsub>
 800d9b6:	4652      	mov	r2, sl
 800d9b8:	465b      	mov	r3, fp
 800d9ba:	f7f2 fc11 	bl	80001e0 <__aeabi_dsub>
 800d9be:	4602      	mov	r2, r0
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	4620      	mov	r0, r4
 800d9c4:	4629      	mov	r1, r5
 800d9c6:	e7d9      	b.n	800d97c <__ieee754_log+0x26c>
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	460b      	mov	r3, r1
 800d9cc:	4650      	mov	r0, sl
 800d9ce:	4659      	mov	r1, fp
 800d9d0:	f7f2 fc06 	bl	80001e0 <__aeabi_dsub>
 800d9d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9d8:	f7f2 fdba 	bl	8000550 <__aeabi_dmul>
 800d9dc:	4606      	mov	r6, r0
 800d9de:	460f      	mov	r7, r1
 800d9e0:	2c00      	cmp	r4, #0
 800d9e2:	f43f af25 	beq.w	800d830 <__ieee754_log+0x120>
 800d9e6:	a30a      	add	r3, pc, #40	@ (adr r3, 800da10 <__ieee754_log+0x300>)
 800d9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9f0:	f7f2 fdae 	bl	8000550 <__aeabi_dmul>
 800d9f4:	a308      	add	r3, pc, #32	@ (adr r3, 800da18 <__ieee754_log+0x308>)
 800d9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fa:	4604      	mov	r4, r0
 800d9fc:	460d      	mov	r5, r1
 800d9fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da02:	e729      	b.n	800d858 <__ieee754_log+0x148>
 800da04:	2000      	movs	r0, #0
 800da06:	2100      	movs	r1, #0
 800da08:	e695      	b.n	800d736 <__ieee754_log+0x26>
 800da0a:	bf00      	nop
 800da0c:	f3af 8000 	nop.w
 800da10:	fee00000 	.word	0xfee00000
 800da14:	3fe62e42 	.word	0x3fe62e42
 800da18:	35793c76 	.word	0x35793c76
 800da1c:	3dea39ef 	.word	0x3dea39ef
 800da20:	55555555 	.word	0x55555555
 800da24:	3fd55555 	.word	0x3fd55555
 800da28:	df3e5244 	.word	0xdf3e5244
 800da2c:	3fc2f112 	.word	0x3fc2f112
 800da30:	96cb03de 	.word	0x96cb03de
 800da34:	3fc74664 	.word	0x3fc74664
 800da38:	94229359 	.word	0x94229359
 800da3c:	3fd24924 	.word	0x3fd24924
 800da40:	55555593 	.word	0x55555593
 800da44:	3fe55555 	.word	0x3fe55555
 800da48:	d078c69f 	.word	0xd078c69f
 800da4c:	3fc39a09 	.word	0x3fc39a09
 800da50:	1d8e78af 	.word	0x1d8e78af
 800da54:	3fcc71c5 	.word	0x3fcc71c5
 800da58:	9997fa04 	.word	0x9997fa04
 800da5c:	3fd99999 	.word	0x3fd99999
 800da60:	c3500000 	.word	0xc3500000
 800da64:	43500000 	.word	0x43500000
 800da68:	7fefffff 	.word	0x7fefffff
 800da6c:	3ff00000 	.word	0x3ff00000
 800da70:	3fe00000 	.word	0x3fe00000

0800da74 <_init>:
 800da74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da76:	bf00      	nop
 800da78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da7a:	bc08      	pop	{r3}
 800da7c:	469e      	mov	lr, r3
 800da7e:	4770      	bx	lr

0800da80 <_fini>:
 800da80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da82:	bf00      	nop
 800da84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da86:	bc08      	pop	{r3}
 800da88:	469e      	mov	lr, r3
 800da8a:	4770      	bx	lr
