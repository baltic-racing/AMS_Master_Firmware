
AMS_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd8c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  0800df18  0800df18  0000ef18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e6f0  0800e6f0  00010390  2**0
                  CONTENTS
  4 .ARM          00000008  0800e6f0  0800e6f0  0000f6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e6f8  0800e6f8  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e6f8  0800e6f8  0000f6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e6fc  0800e6fc  0000f6fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000390  20000000  0800e700  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001590  20000390  0800ea90  00010390  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001920  0800ea90  00010920  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010390  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a4b9  00000000  00000000  000103b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a3a  00000000  00000000  0002a872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  0002f2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011a7  00000000  00000000  000309f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024023  00000000  00000000  00031b97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e94f  00000000  00000000  00055bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c55d8  00000000  00000000  00074509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139ae1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070f0  00000000  00000000  00139b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00140c14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000390 	.word	0x20000390
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800defc 	.word	0x0800defc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000394 	.word	0x20000394
 80001c4:	0800defc 	.word	0x0800defc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b968 	b.w	8000e28 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	460c      	mov	r4, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14e      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b7c:	4694      	mov	ip, r2
 8000b7e:	458c      	cmp	ip, r1
 8000b80:	4686      	mov	lr, r0
 8000b82:	fab2 f282 	clz	r2, r2
 8000b86:	d962      	bls.n	8000c4e <__udivmoddi4+0xde>
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0320 	rsb	r3, r2, #32
 8000b8e:	4091      	lsls	r1, r2
 8000b90:	fa20 f303 	lsr.w	r3, r0, r3
 8000b94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b98:	4319      	orrs	r1, r3
 8000b9a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ba6:	fb07 1114 	mls	r1, r7, r4, r1
 8000baa:	fa1f f68c 	uxth.w	r6, ip
 8000bae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb6:	fb04 f106 	mul.w	r1, r4, r6
 8000bba:	4299      	cmp	r1, r3
 8000bbc:	d90a      	bls.n	8000bd4 <__udivmoddi4+0x64>
 8000bbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bc6:	f080 8110 	bcs.w	8000dea <__udivmoddi4+0x27a>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 810d 	bls.w	8000dea <__udivmoddi4+0x27a>
 8000bd0:	3c02      	subs	r4, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	1a59      	subs	r1, r3, r1
 8000bd6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bda:	fb07 1110 	mls	r1, r7, r0, r1
 8000bde:	fb00 f606 	mul.w	r6, r0, r6
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bea:	429e      	cmp	r6, r3
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x94>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf6:	f080 80fa 	bcs.w	8000dee <__udivmoddi4+0x27e>
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	f240 80f7 	bls.w	8000dee <__udivmoddi4+0x27e>
 8000c00:	4463      	add	r3, ip
 8000c02:	3802      	subs	r0, #2
 8000c04:	2100      	movs	r1, #0
 8000c06:	1b9b      	subs	r3, r3, r6
 8000c08:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c0c:	b11d      	cbz	r5, 8000c16 <__udivmoddi4+0xa6>
 8000c0e:	40d3      	lsrs	r3, r2
 8000c10:	2200      	movs	r2, #0
 8000c12:	e9c5 3200 	strd	r3, r2, [r5]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d905      	bls.n	8000c2a <__udivmoddi4+0xba>
 8000c1e:	b10d      	cbz	r5, 8000c24 <__udivmoddi4+0xb4>
 8000c20:	e9c5 0100 	strd	r0, r1, [r5]
 8000c24:	2100      	movs	r1, #0
 8000c26:	4608      	mov	r0, r1
 8000c28:	e7f5      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c2a:	fab3 f183 	clz	r1, r3
 8000c2e:	2900      	cmp	r1, #0
 8000c30:	d146      	bne.n	8000cc0 <__udivmoddi4+0x150>
 8000c32:	42a3      	cmp	r3, r4
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0xcc>
 8000c36:	4290      	cmp	r0, r2
 8000c38:	f0c0 80ee 	bcc.w	8000e18 <__udivmoddi4+0x2a8>
 8000c3c:	1a86      	subs	r6, r0, r2
 8000c3e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	2d00      	cmp	r5, #0
 8000c46:	d0e6      	beq.n	8000c16 <__udivmoddi4+0xa6>
 8000c48:	e9c5 6300 	strd	r6, r3, [r5]
 8000c4c:	e7e3      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c4e:	2a00      	cmp	r2, #0
 8000c50:	f040 808f 	bne.w	8000d72 <__udivmoddi4+0x202>
 8000c54:	eba1 040c 	sub.w	r4, r1, ip
 8000c58:	2101      	movs	r1, #1
 8000c5a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5e:	fa1f f78c 	uxth.w	r7, ip
 8000c62:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c66:	fb08 4416 	mls	r4, r8, r6, r4
 8000c6a:	fb07 f006 	mul.w	r0, r7, r6
 8000c6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c76:	4298      	cmp	r0, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x11c>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x11a>
 8000c84:	4298      	cmp	r0, r3
 8000c86:	f200 80cb 	bhi.w	8000e20 <__udivmoddi4+0x2b0>
 8000c8a:	4626      	mov	r6, r4
 8000c8c:	1a1c      	subs	r4, r3, r0
 8000c8e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c92:	fb08 4410 	mls	r4, r8, r0, r4
 8000c96:	fb00 f707 	mul.w	r7, r0, r7
 8000c9a:	fa1f f38e 	uxth.w	r3, lr
 8000c9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ca2:	429f      	cmp	r7, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x148>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x146>
 8000cb0:	429f      	cmp	r7, r3
 8000cb2:	f200 80ae 	bhi.w	8000e12 <__udivmoddi4+0x2a2>
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	1bdb      	subs	r3, r3, r7
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	e7a5      	b.n	8000c0c <__udivmoddi4+0x9c>
 8000cc0:	f1c1 0720 	rsb	r7, r1, #32
 8000cc4:	408b      	lsls	r3, r1
 8000cc6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cca:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cce:	fa24 f607 	lsr.w	r6, r4, r7
 8000cd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cd6:	fbb6 f8f9 	udiv	r8, r6, r9
 8000cda:	fa1f fe8c 	uxth.w	lr, ip
 8000cde:	fb09 6618 	mls	r6, r9, r8, r6
 8000ce2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ce6:	408c      	lsls	r4, r1
 8000ce8:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cec:	fb08 f00e 	mul.w	r0, r8, lr
 8000cf0:	431c      	orrs	r4, r3
 8000cf2:	0c23      	lsrs	r3, r4, #16
 8000cf4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfe:	d90a      	bls.n	8000d16 <__udivmoddi4+0x1a6>
 8000d00:	eb1c 0303 	adds.w	r3, ip, r3
 8000d04:	f108 36ff 	add.w	r6, r8, #4294967295
 8000d08:	f080 8081 	bcs.w	8000e0e <__udivmoddi4+0x29e>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	d97e      	bls.n	8000e0e <__udivmoddi4+0x29e>
 8000d10:	f1a8 0802 	sub.w	r8, r8, #2
 8000d14:	4463      	add	r3, ip
 8000d16:	1a1e      	subs	r6, r3, r0
 8000d18:	fbb6 f3f9 	udiv	r3, r6, r9
 8000d1c:	fb09 6613 	mls	r6, r9, r3, r6
 8000d20:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d24:	b2a4      	uxth	r4, r4
 8000d26:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x1d0>
 8000d2e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d32:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d36:	d266      	bcs.n	8000e06 <__udivmoddi4+0x296>
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d964      	bls.n	8000e06 <__udivmoddi4+0x296>
 8000d3c:	3b02      	subs	r3, #2
 8000d3e:	4464      	add	r4, ip
 8000d40:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d44:	fba0 8302 	umull	r8, r3, r0, r2
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	429c      	cmp	r4, r3
 8000d4e:	46c6      	mov	lr, r8
 8000d50:	461e      	mov	r6, r3
 8000d52:	d350      	bcc.n	8000df6 <__udivmoddi4+0x286>
 8000d54:	d04d      	beq.n	8000df2 <__udivmoddi4+0x282>
 8000d56:	b155      	cbz	r5, 8000d6e <__udivmoddi4+0x1fe>
 8000d58:	ebba 030e 	subs.w	r3, sl, lr
 8000d5c:	eb64 0406 	sbc.w	r4, r4, r6
 8000d60:	fa04 f707 	lsl.w	r7, r4, r7
 8000d64:	40cb      	lsrs	r3, r1
 8000d66:	431f      	orrs	r7, r3
 8000d68:	40cc      	lsrs	r4, r1
 8000d6a:	e9c5 7400 	strd	r7, r4, [r5]
 8000d6e:	2100      	movs	r1, #0
 8000d70:	e751      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000d72:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d76:	f1c2 0320 	rsb	r3, r2, #32
 8000d7a:	40d9      	lsrs	r1, r3
 8000d7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d80:	fa20 f303 	lsr.w	r3, r0, r3
 8000d84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d88:	fbb1 f0f8 	udiv	r0, r1, r8
 8000d8c:	fb08 1110 	mls	r1, r8, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	431c      	orrs	r4, r3
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	0c23      	lsrs	r3, r4, #16
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb00 f107 	mul.w	r1, r0, r7
 8000da2:	4299      	cmp	r1, r3
 8000da4:	d908      	bls.n	8000db8 <__udivmoddi4+0x248>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dae:	d22c      	bcs.n	8000e0a <__udivmoddi4+0x29a>
 8000db0:	4299      	cmp	r1, r3
 8000db2:	d92a      	bls.n	8000e0a <__udivmoddi4+0x29a>
 8000db4:	3802      	subs	r0, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dbe:	fb08 3311 	mls	r3, r8, r1, r3
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb01 f307 	mul.w	r3, r1, r7
 8000dcc:	42a3      	cmp	r3, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x272>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dd8:	d213      	bcs.n	8000e02 <__udivmoddi4+0x292>
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	d911      	bls.n	8000e02 <__udivmoddi4+0x292>
 8000dde:	3902      	subs	r1, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	1ae4      	subs	r4, r4, r3
 8000de4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000de8:	e73b      	b.n	8000c62 <__udivmoddi4+0xf2>
 8000dea:	4604      	mov	r4, r0
 8000dec:	e6f2      	b.n	8000bd4 <__udivmoddi4+0x64>
 8000dee:	4608      	mov	r0, r1
 8000df0:	e708      	b.n	8000c04 <__udivmoddi4+0x94>
 8000df2:	45c2      	cmp	sl, r8
 8000df4:	d2af      	bcs.n	8000d56 <__udivmoddi4+0x1e6>
 8000df6:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dfa:	eb63 060c 	sbc.w	r6, r3, ip
 8000dfe:	3801      	subs	r0, #1
 8000e00:	e7a9      	b.n	8000d56 <__udivmoddi4+0x1e6>
 8000e02:	4631      	mov	r1, r6
 8000e04:	e7ed      	b.n	8000de2 <__udivmoddi4+0x272>
 8000e06:	4603      	mov	r3, r0
 8000e08:	e79a      	b.n	8000d40 <__udivmoddi4+0x1d0>
 8000e0a:	4630      	mov	r0, r6
 8000e0c:	e7d4      	b.n	8000db8 <__udivmoddi4+0x248>
 8000e0e:	46b0      	mov	r8, r6
 8000e10:	e781      	b.n	8000d16 <__udivmoddi4+0x1a6>
 8000e12:	4463      	add	r3, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	e74f      	b.n	8000cb8 <__udivmoddi4+0x148>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	e711      	b.n	8000c44 <__udivmoddi4+0xd4>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	e732      	b.n	8000c8c <__udivmoddi4+0x11c>
 8000e26:	bf00      	nop

08000e28 <__aeabi_idiv0>:
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <spi_write_array>:
 * @param len length of the data array
 * @param data pointer to the data array
 */

static inline void spi_write_array(uint8_t len, uint8_t data[])
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi3, data, len, HAL_MAX_DELAY);
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e40:	6839      	ldr	r1, [r7, #0]
 8000e42:	4803      	ldr	r0, [pc, #12]	@ (8000e50 <spi_write_array+0x24>)
 8000e44:	f005 fcc9 	bl	80067da <HAL_SPI_Transmit>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000560 	.word	0x20000560

08000e54 <spi_write_read>:
 * @param tx_len length of the data array to be transmitted
 * @param rx_data pointer to the data array to be received
 * @param rx_len length of the data array to be received
 */
static inline void spi_write_read(uint8_t tx_Data[], uint8_t tx_len, uint8_t *rx_data, uint8_t rx_len)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	460b      	mov	r3, r1
 8000e62:	72fb      	strb	r3, [r7, #11]
 8000e64:	4613      	mov	r3, r2
 8000e66:	72bb      	strb	r3, [r7, #10]
  HAL_SPI_Transmit(&hspi3, tx_Data, tx_len, HAL_MAX_DELAY);
 8000e68:	7afb      	ldrb	r3, [r7, #11]
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e70:	68f9      	ldr	r1, [r7, #12]
 8000e72:	4807      	ldr	r0, [pc, #28]	@ (8000e90 <spi_write_read+0x3c>)
 8000e74:	f005 fcb1 	bl	80067da <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3, rx_data, rx_len, HAL_MAX_DELAY);
 8000e78:	7abb      	ldrb	r3, [r7, #10]
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	4803      	ldr	r0, [pc, #12]	@ (8000e90 <spi_write_read+0x3c>)
 8000e84:	f005 fdec 	bl	8006a60 <HAL_SPI_Receive>

}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000560 	.word	0x20000560

08000e94 <LTC6811_initialize>:
uint8_t wakeup = 0x00;

/*@brief Initializes all command variables
 */
void LTC6811_initialize()
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af02      	add	r7, sp, #8
  set_adc(MD_NORMAL, DCP_DISABLED, CELL_CH_ALL, AUX_CH_ALL, CHST_SC);
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	2002      	movs	r0, #2
 8000ea6:	f000 f81f 	bl	8000ee8 <set_adc>
  //set_selftest(MD_NORMAL, ST_1);
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <wakeup_idle>:

void wakeup_idle()
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eba:	4808      	ldr	r0, [pc, #32]	@ (8000edc <wakeup_idle+0x2c>)
 8000ebc:	f003 fd91 	bl	80049e2 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4906      	ldr	r1, [pc, #24]	@ (8000ee0 <wakeup_idle+0x30>)
 8000ec6:	4807      	ldr	r0, [pc, #28]	@ (8000ee4 <wakeup_idle+0x34>)
 8000ec8:	f005 fc87 	bl	80067da <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ed2:	4802      	ldr	r0, [pc, #8]	@ (8000edc <wakeup_idle+0x2c>)
 8000ed4:	f003 fd85 	bl	80049e2 <HAL_GPIO_WritePin>
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	200003b2 	.word	0x200003b2
 8000ee4:	20000560 	.word	0x20000560

08000ee8 <set_adc>:
			|-----------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|
			|ADCV:	    |   0   |   1   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CH[2] | CH[1] | CH[0] |
			|ADAX:	    |   1   |   0   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CHG[2]| CHG[1]| CHG[0]|
 ******************************************************************************************************************/
void set_adc(uint8_t MD, uint8_t DCP, uint8_t CH, uint8_t CHG, uint8_t CHST)
{
 8000ee8:	b490      	push	{r4, r7}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4604      	mov	r4, r0
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4623      	mov	r3, r4
 8000ef8:	71fb      	strb	r3, [r7, #7]
 8000efa:	4603      	mov	r3, r0
 8000efc:	71bb      	strb	r3, [r7, #6]
 8000efe:	460b      	mov	r3, r1
 8000f00:	717b      	strb	r3, [r7, #5]
 8000f02:	4613      	mov	r3, r2
 8000f04:	713b      	strb	r3, [r7, #4]
  uint8_t md_bits;

  md_bits = (MD & 0x02) >> 1;
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	105b      	asrs	r3, r3, #1
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]
  ADCV[0] = md_bits | 0x02;
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <set_adc+0x94>)
 8000f1c:	701a      	strb	r2, [r3, #0]
  md_bits = (MD & 0x01) << 7;
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	01db      	lsls	r3, r3, #7
 8000f22:	73fb      	strb	r3, [r7, #15]
  ADCV[1] = md_bits | 0x60 | (DCP << 4) | CH;
 8000f24:	79bb      	ldrb	r3, [r7, #6]
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	797b      	ldrb	r3, [r7, #5]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <set_adc+0x94>)
 8000f3e:	705a      	strb	r2, [r3, #1]

  md_bits = (MD & 0x02) >> 1;
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	105b      	asrs	r3, r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	73fb      	strb	r3, [r7, #15]
  ADAX[0] = md_bits | 0x04;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <set_adc+0x98>)
 8000f56:	701a      	strb	r2, [r3, #0]
  md_bits = (MD & 0x01) << 7;
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	01db      	lsls	r3, r3, #7
 8000f5c:	73fb      	strb	r3, [r7, #15]
  ADAX[1] = md_bits | 0x60 | CHG;
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	793b      	ldrb	r3, [r7, #4]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <set_adc+0x98>)
 8000f6e:	705a      	strb	r2, [r3, #1]
  md_bits = (MD & 0x02) >> 1;
  ADSTAT[0] = md_bits | 0x04;
  md_bits = (MD & 0x01) << 7;
  ADSTAT[1] = md_bits | 0x68 | CHST;
  */
}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc90      	pop	{r4, r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	200003ac 	.word	0x200003ac
 8000f80:	200003b0 	.word	0x200003b0

08000f84 <LTC6811_adcv>:
 | CH     | Determines which cell channels are converted |
 | DCP    | Determines if Discharge is Permitted	     |

***********************************************************************************************/
void LTC6811_adcv()
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;
	//1
	cmd[0] = ADCV[0];
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <LTC6811_adcv+0x74>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADCV[1];
 8000f90:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <LTC6811_adcv+0x74>)
 8000f92:	785b      	ldrb	r3, [r3, #1]
 8000f94:	707b      	strb	r3, [r7, #1]
	//2
	temp_pec = pec15_calc(2, ADCV);
 8000f96:	4918      	ldr	r1, [pc, #96]	@ (8000ff8 <LTC6811_adcv+0x74>)
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f000 fb09 	bl	80015b0 <pec15_calc>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	70fb      	strb	r3, [r7, #3]
	//3
	wakeup_idle();
 8000fb2:	f7ff ff7d 	bl	8000eb0 <wakeup_idle>
	//4
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fbc:	480f      	ldr	r0, [pc, #60]	@ (8000ffc <LTC6811_adcv+0x78>)
 8000fbe:	f003 fd10 	bl	80049e2 <HAL_GPIO_WritePin>
	spi_write_array(4, cmd);
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	2004      	movs	r0, #4
 8000fc8:	f7ff ff30 	bl	8000e2c <spi_write_array>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fd2:	480a      	ldr	r0, [pc, #40]	@ (8000ffc <LTC6811_adcv+0x78>)
 8000fd4:	f003 fd05 	bl	80049e2 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000fd8:	2301      	movs	r3, #1
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4908      	ldr	r1, [pc, #32]	@ (8001000 <LTC6811_adcv+0x7c>)
 8000fde:	4809      	ldr	r0, [pc, #36]	@ (8001004 <LTC6811_adcv+0x80>)
 8000fe0:	f005 fbfb 	bl	80067da <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4905      	ldr	r1, [pc, #20]	@ (8001000 <LTC6811_adcv+0x7c>)
 8000fea:	4806      	ldr	r0, [pc, #24]	@ (8001004 <LTC6811_adcv+0x80>)
 8000fec:	f005 fbf5 	bl	80067da <HAL_SPI_Transmit>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200003ac 	.word	0x200003ac
 8000ffc:	40020000 	.word	0x40020000
 8001000:	200003b2 	.word	0x200003b2
 8001004:	20000560 	.word	0x20000560

08001008 <LTC6811_adax>:
 | MD     | Determines the filter corner of the ADC      |
 | CHG    | Determines which GPIO channels are converted |

*********************************************************************************************************/
void LTC6811_adax()
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;

	//1
	cmd[0] = ADAX[0];
 800100e:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <LTC6811_adax+0x74>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADAX[1];
 8001014:	4b19      	ldr	r3, [pc, #100]	@ (800107c <LTC6811_adax+0x74>)
 8001016:	785b      	ldrb	r3, [r3, #1]
 8001018:	707b      	strb	r3, [r7, #1]
	//2
	temp_pec = pec15_calc(2, ADAX);
 800101a:	4918      	ldr	r1, [pc, #96]	@ (800107c <LTC6811_adax+0x74>)
 800101c:	2002      	movs	r0, #2
 800101e:	f000 fac7 	bl	80015b0 <pec15_calc>
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	b29b      	uxth	r3, r3
 800102c:	b2db      	uxtb	r3, r3
 800102e:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	70fb      	strb	r3, [r7, #3]
	//3
	wakeup_idle();
 8001036:	f7ff ff3b 	bl	8000eb0 <wakeup_idle>
	//4
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001040:	480f      	ldr	r0, [pc, #60]	@ (8001080 <LTC6811_adax+0x78>)
 8001042:	f003 fcce 	bl	80049e2 <HAL_GPIO_WritePin>
	spi_write_array(4, cmd);
 8001046:	463b      	mov	r3, r7
 8001048:	4619      	mov	r1, r3
 800104a:	2004      	movs	r0, #4
 800104c:	f7ff feee 	bl	8000e2c <spi_write_array>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001056:	480a      	ldr	r0, [pc, #40]	@ (8001080 <LTC6811_adax+0x78>)
 8001058:	f003 fcc3 	bl	80049e2 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 800105c:	2301      	movs	r3, #1
 800105e:	2201      	movs	r2, #1
 8001060:	4908      	ldr	r1, [pc, #32]	@ (8001084 <LTC6811_adax+0x7c>)
 8001062:	4809      	ldr	r0, [pc, #36]	@ (8001088 <LTC6811_adax+0x80>)
 8001064:	f005 fbb9 	bl	80067da <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8001068:	2301      	movs	r3, #1
 800106a:	2201      	movs	r2, #1
 800106c:	4905      	ldr	r1, [pc, #20]	@ (8001084 <LTC6811_adax+0x7c>)
 800106e:	4806      	ldr	r0, [pc, #24]	@ (8001088 <LTC6811_adax+0x80>)
 8001070:	f005 fbb3 	bl	80067da <HAL_SPI_Transmit>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200003b0 	.word	0x200003b0
 8001080:	40020000 	.word	0x40020000
 8001084:	200003b2 	.word	0x200003b2
 8001088:	20000560 	.word	0x20000560

0800108c <LTC6811_wrcfg>:


void LTC6811_wrcfg(uint8_t nIC, uint8_t config [][6])

{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 8001098:	2306      	movs	r3, #6
 800109a:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * nIC);
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	3304      	adds	r3, #4
 80010a4:	74fb      	strb	r3, [r7, #19]

	uint16_t temp_pec;
	uint8_t current_ic;
	uint8_t WRCFG_index = 4;
 80010a6:	2304      	movs	r3, #4
 80010a8:	75bb      	strb	r3, [r7, #22]
	uint8_t *WRCFG;


	WRCFG = (uint8_t *)malloc(CMD_LEN * sizeof(uint8_t));
 80010aa:	7cfb      	ldrb	r3, [r7, #19]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f00a f8a7 	bl	800b200 <malloc>
 80010b2:	4603      	mov	r3, r0
 80010b4:	60fb      	str	r3, [r7, #12]

	for(current_ic = 0; current_ic < nIC; current_ic++)
 80010b6:	2300      	movs	r3, #0
 80010b8:	75fb      	strb	r3, [r7, #23]
 80010ba:	e03f      	b.n	800113c <LTC6811_wrcfg+0xb0>
	{
		for(uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80010bc:	2300      	movs	r3, #0
 80010be:	757b      	strb	r3, [r7, #21]
 80010c0:	e013      	b.n	80010ea <LTC6811_wrcfg+0x5e>
		{
			WRCFG[WRCFG_index] = config[current_ic][current_byte];
 80010c2:	7dfa      	ldrb	r2, [r7, #23]
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	461a      	mov	r2, r3
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	1899      	adds	r1, r3, r2
 80010d2:	7d7a      	ldrb	r2, [r7, #21]
 80010d4:	7dbb      	ldrb	r3, [r7, #22]
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	4403      	add	r3, r0
 80010da:	5c8a      	ldrb	r2, [r1, r2]
 80010dc:	701a      	strb	r2, [r3, #0]
			WRCFG_index++;
 80010de:	7dbb      	ldrb	r3, [r7, #22]
 80010e0:	3301      	adds	r3, #1
 80010e2:	75bb      	strb	r3, [r7, #22]
		for(uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80010e4:	7d7b      	ldrb	r3, [r7, #21]
 80010e6:	3301      	adds	r3, #1
 80010e8:	757b      	strb	r3, [r7, #21]
 80010ea:	7d7a      	ldrb	r2, [r7, #21]
 80010ec:	7d3b      	ldrb	r3, [r7, #20]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d3e7      	bcc.n	80010c2 <LTC6811_wrcfg+0x36>
		}

		temp_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic][0]);
 80010f2:	7dfa      	ldrb	r2, [r7, #23]
 80010f4:	4613      	mov	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	461a      	mov	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	4413      	add	r3, r2
 8001102:	461a      	mov	r2, r3
 8001104:	7d3b      	ldrb	r3, [r7, #20]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f000 fa51 	bl	80015b0 <pec15_calc>
 800110e:	4603      	mov	r3, r0
 8001110:	817b      	strh	r3, [r7, #10]
		WRCFG[WRCFG_index] = (uint8_t)(temp_pec >> 8);
 8001112:	897b      	ldrh	r3, [r7, #10]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	b299      	uxth	r1, r3
 8001118:	7dbb      	ldrb	r3, [r7, #22]
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	4413      	add	r3, r2
 800111e:	b2ca      	uxtb	r2, r1
 8001120:	701a      	strb	r2, [r3, #0]
		WRCFG[WRCFG_index + 1] = (uint8_t)temp_pec;
 8001122:	7dbb      	ldrb	r3, [r7, #22]
 8001124:	3301      	adds	r3, #1
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	4413      	add	r3, r2
 800112a:	897a      	ldrh	r2, [r7, #10]
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
		WRCFG_index += 2;
 8001130:	7dbb      	ldrb	r3, [r7, #22]
 8001132:	3302      	adds	r3, #2
 8001134:	75bb      	strb	r3, [r7, #22]
	for(current_ic = 0; current_ic < nIC; current_ic++)
 8001136:	7dfb      	ldrb	r3, [r7, #23]
 8001138:	3301      	adds	r3, #1
 800113a:	75fb      	strb	r3, [r7, #23]
 800113c:	7dfa      	ldrb	r2, [r7, #23]
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	429a      	cmp	r2, r3
 8001142:	d3bb      	bcc.n	80010bc <LTC6811_wrcfg+0x30>
	}

	wakeup_idle();
 8001144:	f7ff feb4 	bl	8000eb0 <wakeup_idle>

	for(current_ic = 0; current_ic < nIC; current_ic++)
 8001148:	2300      	movs	r3, #0
 800114a:	75fb      	strb	r3, [r7, #23]
 800114c:	e045      	b.n	80011da <LTC6811_wrcfg+0x14e>
	{
	    WRCFG[0] = 0x80 + (current_ic << 3); //Setting address
 800114e:	7dfb      	ldrb	r3, [r7, #23]
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	3b80      	subs	r3, #128	@ 0x80
 8001156:	b2da      	uxtb	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	701a      	strb	r2, [r3, #0]
	    WRCFG[1] = 0x01;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3301      	adds	r3, #1
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
	    temp_pec = pec15_calc(2, WRCFG);
 8001164:	68f9      	ldr	r1, [r7, #12]
 8001166:	2002      	movs	r0, #2
 8001168:	f000 fa22 	bl	80015b0 <pec15_calc>
 800116c:	4603      	mov	r3, r0
 800116e:	817b      	strh	r3, [r7, #10]
	    WRCFG[2] = (uint8_t)(temp_pec >> 8);
 8001170:	897b      	ldrh	r3, [r7, #10]
 8001172:	0a1b      	lsrs	r3, r3, #8
 8001174:	b29a      	uxth	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	3302      	adds	r3, #2
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	701a      	strb	r2, [r3, #0]
	    WRCFG[3] = (uint8_t)(temp_pec);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	3303      	adds	r3, #3
 8001182:	897a      	ldrh	r2, [r7, #10]
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800118e:	4818      	ldr	r0, [pc, #96]	@ (80011f0 <LTC6811_wrcfg+0x164>)
 8001190:	f003 fc27 	bl	80049e2 <HAL_GPIO_WritePin>
		spi_write_array(4, WRCFG);
 8001194:	68f9      	ldr	r1, [r7, #12]
 8001196:	2004      	movs	r0, #4
 8001198:	f7ff fe48 	bl	8000e2c <spi_write_array>
		spi_write_array(8, &WRCFG[4 + (8 * current_ic)]);
 800119c:	7dfb      	ldrb	r3, [r7, #23]
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	3304      	adds	r3, #4
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	2008      	movs	r0, #8
 80011ac:	f7ff fe3e 	bl	8000e2c <spi_write_array>
		HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011b6:	480e      	ldr	r0, [pc, #56]	@ (80011f0 <LTC6811_wrcfg+0x164>)
 80011b8:	f003 fc13 	bl	80049e2 <HAL_GPIO_WritePin>


		HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 80011bc:	2301      	movs	r3, #1
 80011be:	2201      	movs	r2, #1
 80011c0:	490c      	ldr	r1, [pc, #48]	@ (80011f4 <LTC6811_wrcfg+0x168>)
 80011c2:	480d      	ldr	r0, [pc, #52]	@ (80011f8 <LTC6811_wrcfg+0x16c>)
 80011c4:	f005 fb09 	bl	80067da <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 80011c8:	2301      	movs	r3, #1
 80011ca:	2201      	movs	r2, #1
 80011cc:	4909      	ldr	r1, [pc, #36]	@ (80011f4 <LTC6811_wrcfg+0x168>)
 80011ce:	480a      	ldr	r0, [pc, #40]	@ (80011f8 <LTC6811_wrcfg+0x16c>)
 80011d0:	f005 fb03 	bl	80067da <HAL_SPI_Transmit>
	for(current_ic = 0; current_ic < nIC; current_ic++)
 80011d4:	7dfb      	ldrb	r3, [r7, #23]
 80011d6:	3301      	adds	r3, #1
 80011d8:	75fb      	strb	r3, [r7, #23]
 80011da:	7dfa      	ldrb	r2, [r7, #23]
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d3b5      	bcc.n	800114e <LTC6811_wrcfg+0xc2>

	}

	free(WRCFG);
 80011e2:	68f8      	ldr	r0, [r7, #12]
 80011e4:	f00a f814 	bl	800b210 <free>
}
 80011e8:	bf00      	nop
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40020000 	.word	0x40020000
 80011f4:	200003b2 	.word	0x200003b2
 80011f8:	20000560 	.word	0x20000560

080011fc <LTC6811_rdcv>:
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
}
*/

uint8_t LTC6811_rdcv(uint8_t reg, uint8_t nIC, uint16_t cell_codes[][12])
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	603a      	str	r2, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
 8001208:	460b      	mov	r3, r1
 800120a:	71bb      	strb	r3, [r7, #6]
	const uint8_t NUM_RX_BYT = 8;
 800120c:	2308      	movs	r3, #8
 800120e:	76bb      	strb	r3, [r7, #26]
	const uint8_t BYT_IN_REG = 6;
 8001210:	2306      	movs	r3, #6
 8001212:	767b      	strb	r3, [r7, #25]
	const uint8_t CELL_IN_REG = 3;
 8001214:	2303      	movs	r3, #3
 8001216:	763b      	strb	r3, [r7, #24]

	uint8_t pec_error = 0; //pec Error wenn -1
 8001218:	2300      	movs	r3, #0
 800121a:	77fb      	strb	r3, [r7, #31]
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	77bb      	strb	r3, [r7, #30]
	uint8_t *cell_data;
	cell_data = (uint8_t *)malloc((NUM_RX_BYT * nIC) * sizeof(uint8_t));
 8001220:	7ebb      	ldrb	r3, [r7, #26]
 8001222:	79ba      	ldrb	r2, [r7, #6]
 8001224:	fb02 f303 	mul.w	r3, r2, r3
 8001228:	4618      	mov	r0, r3
 800122a:	f009 ffe9 	bl	800b200 <malloc>
 800122e:	4603      	mov	r3, r0
 8001230:	617b      	str	r3, [r7, #20]

	for(uint8_t cell_reg = 1; cell_reg < 5; cell_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001232:	2301      	movs	r3, #1
 8001234:	777b      	strb	r3, [r7, #29]
 8001236:	e066      	b.n	8001306 <LTC6811_rdcv+0x10a>
	{
		data_counter = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	77bb      	strb	r3, [r7, #30]
		LTC6811_rdcv_reg(cell_reg, nIC, cell_data);
 800123c:	79b9      	ldrb	r1, [r7, #6]
 800123e:	7f7b      	ldrb	r3, [r7, #29]
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f86a 	bl	800131c <LTC6811_rdcv_reg>

		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 8001248:	2300      	movs	r3, #0
 800124a:	773b      	strb	r3, [r7, #28]
 800124c:	e054      	b.n	80012f8 <LTC6811_rdcv+0xfc>
		{
			 // current_ic is used as an IC counter
			for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 800124e:	2300      	movs	r3, #0
 8001250:	76fb      	strb	r3, [r7, #27]
 8001252:	e026      	b.n	80012a2 <LTC6811_rdcv+0xa6>
			{
				uint16_t parsed_cell = cell_data[data_counter] | (cell_data[data_counter + 1] << 8);
 8001254:	7fbb      	ldrb	r3, [r7, #30]
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	4413      	add	r3, r2
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	b21a      	sxth	r2, r3
 800125e:	7fbb      	ldrb	r3, [r7, #30]
 8001260:	3301      	adds	r3, #1
 8001262:	6979      	ldr	r1, [r7, #20]
 8001264:	440b      	add	r3, r1
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	021b      	lsls	r3, r3, #8
 800126a:	b21b      	sxth	r3, r3
 800126c:	4313      	orrs	r3, r2
 800126e:	b21b      	sxth	r3, r3
 8001270:	81fb      	strh	r3, [r7, #14]
				cell_codes[current_ic][current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8001272:	7f3a      	ldrb	r2, [r7, #28]
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	461a      	mov	r2, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	4413      	add	r3, r2
 8001282:	7ef9      	ldrb	r1, [r7, #27]
 8001284:	7f7a      	ldrb	r2, [r7, #29]
 8001286:	3a01      	subs	r2, #1
 8001288:	7e38      	ldrb	r0, [r7, #24]
 800128a:	fb00 f202 	mul.w	r2, r0, r2
 800128e:	440a      	add	r2, r1
 8001290:	89f9      	ldrh	r1, [r7, #14]
 8001292:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter = data_counter + 2;
 8001296:	7fbb      	ldrb	r3, [r7, #30]
 8001298:	3302      	adds	r3, #2
 800129a:	77bb      	strb	r3, [r7, #30]
			for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 800129c:	7efb      	ldrb	r3, [r7, #27]
 800129e:	3301      	adds	r3, #1
 80012a0:	76fb      	strb	r3, [r7, #27]
 80012a2:	7efa      	ldrb	r2, [r7, #27]
 80012a4:	7e3b      	ldrb	r3, [r7, #24]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d3d4      	bcc.n	8001254 <LTC6811_rdcv+0x58>
			}
			received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter + 1];
 80012aa:	7fbb      	ldrb	r3, [r7, #30]
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	4413      	add	r3, r2
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	7fba      	ldrb	r2, [r7, #30]
 80012b8:	3201      	adds	r2, #1
 80012ba:	6979      	ldr	r1, [r7, #20]
 80012bc:	440a      	add	r2, r1
 80012be:	7812      	ldrb	r2, [r2, #0]
 80012c0:	4413      	add	r3, r2
 80012c2:	827b      	strh	r3, [r7, #18]
			data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 80012c4:	7f3b      	ldrb	r3, [r7, #28]
 80012c6:	7eba      	ldrb	r2, [r7, #26]
 80012c8:	fb02 f303 	mul.w	r3, r2, r3
 80012cc:	461a      	mov	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	441a      	add	r2, r3
 80012d2:	7e7b      	ldrb	r3, [r7, #25]
 80012d4:	4611      	mov	r1, r2
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f96a 	bl	80015b0 <pec15_calc>
 80012dc:	4603      	mov	r3, r0
 80012de:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 80012e0:	8a7a      	ldrh	r2, [r7, #18]
 80012e2:	8a3b      	ldrh	r3, [r7, #16]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d001      	beq.n	80012ec <LTC6811_rdcv+0xf0>
			{
			  pec_error = -1;
 80012e8:	23ff      	movs	r3, #255	@ 0xff
 80012ea:	77fb      	strb	r3, [r7, #31]
			}
			data_counter = data_counter + 2;
 80012ec:	7fbb      	ldrb	r3, [r7, #30]
 80012ee:	3302      	adds	r3, #2
 80012f0:	77bb      	strb	r3, [r7, #30]
		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 80012f2:	7f3b      	ldrb	r3, [r7, #28]
 80012f4:	3301      	adds	r3, #1
 80012f6:	773b      	strb	r3, [r7, #28]
 80012f8:	7f3a      	ldrb	r2, [r7, #28]
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d3a6      	bcc.n	800124e <LTC6811_rdcv+0x52>
	for(uint8_t cell_reg = 1; cell_reg < 5; cell_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001300:	7f7b      	ldrb	r3, [r7, #29]
 8001302:	3301      	adds	r3, #1
 8001304:	777b      	strb	r3, [r7, #29]
 8001306:	7f7b      	ldrb	r3, [r7, #29]
 8001308:	2b04      	cmp	r3, #4
 800130a:	d995      	bls.n	8001238 <LTC6811_rdcv+0x3c>
		}
	}

	free(cell_data);
 800130c:	6978      	ldr	r0, [r7, #20]
 800130e:	f009 ff7f 	bl	800b210 <free>
	return(pec_error);
 8001312:	7ffb      	ldrb	r3, [r7, #31]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3720      	adds	r7, #32
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <LTC6811_rdcv_reg>:

void LTC6811_rdcv_reg(uint8_t reg, uint8_t nIC, uint8_t *data)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	603a      	str	r2, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
 8001328:	460b      	mov	r3, r1
 800132a:	71bb      	strb	r3, [r7, #6]
	uint8_t RDCV[4];
	uint16_t temp_pec;

	switch(reg){
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	3b01      	subs	r3, #1
 8001330:	2b03      	cmp	r3, #3
 8001332:	d817      	bhi.n	8001364 <LTC6811_rdcv_reg+0x48>
 8001334:	a201      	add	r2, pc, #4	@ (adr r2, 800133c <LTC6811_rdcv_reg+0x20>)
 8001336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133a:	bf00      	nop
 800133c:	0800134d 	.word	0x0800134d
 8001340:	08001353 	.word	0x08001353
 8001344:	08001359 	.word	0x08001359
 8001348:	0800135f 	.word	0x0800135f
		case 1: RDCV[1] = 0x04; break;
 800134c:	2304      	movs	r3, #4
 800134e:	727b      	strb	r3, [r7, #9]
 8001350:	e008      	b.n	8001364 <LTC6811_rdcv_reg+0x48>
		case 2: RDCV[1] = 0x06; break;
 8001352:	2306      	movs	r3, #6
 8001354:	727b      	strb	r3, [r7, #9]
 8001356:	e005      	b.n	8001364 <LTC6811_rdcv_reg+0x48>
		case 3: RDCV[1] = 0x08; break;
 8001358:	2308      	movs	r3, #8
 800135a:	727b      	strb	r3, [r7, #9]
 800135c:	e002      	b.n	8001364 <LTC6811_rdcv_reg+0x48>
		case 4: RDCV[1] = 0x0a; break;
 800135e:	230a      	movs	r3, #10
 8001360:	727b      	strb	r3, [r7, #9]
 8001362:	bf00      	nop
	}

	wakeup_idle();
 8001364:	f7ff fda4 	bl	8000eb0 <wakeup_idle>

    //Register A-D = reg 1-4
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	e02f      	b.n	80013ce <LTC6811_rdcv_reg+0xb2>
    {
    	RDCV[0] = 0x80 + (current_ic << 3);
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	b2db      	uxtb	r3, r3
 8001374:	3b80      	subs	r3, #128	@ 0x80
 8001376:	b2db      	uxtb	r3, r3
 8001378:	723b      	strb	r3, [r7, #8]
        temp_pec = pec15_calc(2, RDCV);
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	4619      	mov	r1, r3
 8001380:	2002      	movs	r0, #2
 8001382:	f000 f915 	bl	80015b0 <pec15_calc>
 8001386:	4603      	mov	r3, r0
 8001388:	81bb      	strh	r3, [r7, #12]
        RDCV[2] = (uint8_t)(temp_pec >> 8);
 800138a:	89bb      	ldrh	r3, [r7, #12]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	b29b      	uxth	r3, r3
 8001390:	b2db      	uxtb	r3, r3
 8001392:	72bb      	strb	r3, [r7, #10]
        RDCV[3] = (uint8_t)(temp_pec);
 8001394:	89bb      	ldrh	r3, [r7, #12]
 8001396:	b2db      	uxtb	r3, r3
 8001398:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013a0:	480f      	ldr	r0, [pc, #60]	@ (80013e0 <LTC6811_rdcv_reg+0xc4>)
 80013a2:	f003 fb1e 	bl	80049e2 <HAL_GPIO_WritePin>
        spi_write_read(RDCV, 4, &data[current_ic * 8], 8);
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	461a      	mov	r2, r3
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	441a      	add	r2, r3
 80013b0:	f107 0008 	add.w	r0, r7, #8
 80013b4:	2308      	movs	r3, #8
 80013b6:	2104      	movs	r1, #4
 80013b8:	f7ff fd4c 	bl	8000e54 <spi_write_read>
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013c2:	4807      	ldr	r0, [pc, #28]	@ (80013e0 <LTC6811_rdcv_reg+0xc4>)
 80013c4:	f003 fb0d 	bl	80049e2 <HAL_GPIO_WritePin>
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	3301      	adds	r3, #1
 80013cc:	73fb      	strb	r3, [r7, #15]
 80013ce:	7bfa      	ldrb	r2, [r7, #15]
 80013d0:	79bb      	ldrb	r3, [r7, #6]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d3cb      	bcc.n	800136e <LTC6811_rdcv_reg+0x52>
    }
}
 80013d6:	bf00      	nop
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40020000 	.word	0x40020000

080013e4 <LTC6811_rdaux>:

int8_t LTC6811_rdaux(uint8_t reg, uint8_t nIC, uint16_t aux_codes[][6])
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	603a      	str	r2, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
 80013f0:	460b      	mov	r3, r1
 80013f2:	71bb      	strb	r3, [r7, #6]
	const uint8_t NUM_RX_BYT = 8;
 80013f4:	2308      	movs	r3, #8
 80013f6:	76bb      	strb	r3, [r7, #26]
	const uint8_t BYT_IN_REG = 6;
 80013f8:	2306      	movs	r3, #6
 80013fa:	767b      	strb	r3, [r7, #25]
	const uint8_t AUX_IN_REG = 3;
 80013fc:	2303      	movs	r3, #3
 80013fe:	763b      	strb	r3, [r7, #24]

	uint8_t pec_error = 0; //pec Error wenn -1
 8001400:	2300      	movs	r3, #0
 8001402:	77fb      	strb	r3, [r7, #31]
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	77bb      	strb	r3, [r7, #30]
	uint8_t *aux_data;

	aux_data = (uint8_t *)malloc((NUM_RX_BYT * nIC) * sizeof(uint8_t));
 8001408:	7ebb      	ldrb	r3, [r7, #26]
 800140a:	79ba      	ldrb	r2, [r7, #6]
 800140c:	fb02 f303 	mul.w	r3, r2, r3
 8001410:	4618      	mov	r0, r3
 8001412:	f009 fef5 	bl	800b200 <malloc>
 8001416:	4603      	mov	r3, r0
 8001418:	617b      	str	r3, [r7, #20]

	for(uint8_t aux_reg = 1; aux_reg < AUX_IN_REG; aux_reg++)	//executes once for each of the LTC6804 cell voltage registers
 800141a:	2301      	movs	r3, #1
 800141c:	777b      	strb	r3, [r7, #29]
 800141e:	e066      	b.n	80014ee <LTC6811_rdaux+0x10a>
	{
		data_counter = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	77bb      	strb	r3, [r7, #30]
		LTC6811_rdaux_reg(aux_reg, nIC, aux_data);
 8001424:	79b9      	ldrb	r1, [r7, #6]
 8001426:	7f7b      	ldrb	r3, [r7, #29]
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f86c 	bl	8001508 <LTC6811_rdaux_reg>

		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 8001430:	2300      	movs	r3, #0
 8001432:	773b      	strb	r3, [r7, #28]
 8001434:	e054      	b.n	80014e0 <LTC6811_rdaux+0xfc>
		{
			 // current_ic is used as an IC counter
			for(uint8_t current_cell = 0; current_cell < AUX_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 8001436:	2300      	movs	r3, #0
 8001438:	76fb      	strb	r3, [r7, #27]
 800143a:	e026      	b.n	800148a <LTC6811_rdaux+0xa6>
			{
				uint16_t parsed_cell = aux_data[data_counter] | (aux_data[data_counter + 1] << 8);
 800143c:	7fbb      	ldrb	r3, [r7, #30]
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	4413      	add	r3, r2
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b21a      	sxth	r2, r3
 8001446:	7fbb      	ldrb	r3, [r7, #30]
 8001448:	3301      	adds	r3, #1
 800144a:	6979      	ldr	r1, [r7, #20]
 800144c:	440b      	add	r3, r1
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	b21b      	sxth	r3, r3
 8001454:	4313      	orrs	r3, r2
 8001456:	b21b      	sxth	r3, r3
 8001458:	81fb      	strh	r3, [r7, #14]
				aux_codes[current_ic][current_cell + ((aux_reg - 1) * AUX_IN_REG)] = parsed_cell;
 800145a:	7f3a      	ldrb	r2, [r7, #28]
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	461a      	mov	r2, r3
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	4413      	add	r3, r2
 800146a:	7ef9      	ldrb	r1, [r7, #27]
 800146c:	7f7a      	ldrb	r2, [r7, #29]
 800146e:	3a01      	subs	r2, #1
 8001470:	7e38      	ldrb	r0, [r7, #24]
 8001472:	fb00 f202 	mul.w	r2, r0, r2
 8001476:	440a      	add	r2, r1
 8001478:	89f9      	ldrh	r1, [r7, #14]
 800147a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter += 2;
 800147e:	7fbb      	ldrb	r3, [r7, #30]
 8001480:	3302      	adds	r3, #2
 8001482:	77bb      	strb	r3, [r7, #30]
			for(uint8_t current_cell = 0; current_cell < AUX_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 8001484:	7efb      	ldrb	r3, [r7, #27]
 8001486:	3301      	adds	r3, #1
 8001488:	76fb      	strb	r3, [r7, #27]
 800148a:	7efa      	ldrb	r2, [r7, #27]
 800148c:	7e3b      	ldrb	r3, [r7, #24]
 800148e:	429a      	cmp	r2, r3
 8001490:	d3d4      	bcc.n	800143c <LTC6811_rdaux+0x58>
			}
			received_pec = (aux_data[data_counter] << 8) + aux_data[data_counter + 1];
 8001492:	7fbb      	ldrb	r3, [r7, #30]
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	4413      	add	r3, r2
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	021b      	lsls	r3, r3, #8
 800149c:	b29b      	uxth	r3, r3
 800149e:	7fba      	ldrb	r2, [r7, #30]
 80014a0:	3201      	adds	r2, #1
 80014a2:	6979      	ldr	r1, [r7, #20]
 80014a4:	440a      	add	r2, r1
 80014a6:	7812      	ldrb	r2, [r2, #0]
 80014a8:	4413      	add	r3, r2
 80014aa:	827b      	strh	r3, [r7, #18]
			data_pec = pec15_calc(BYT_IN_REG, &aux_data[current_ic * NUM_RX_BYT]);
 80014ac:	7f3b      	ldrb	r3, [r7, #28]
 80014ae:	7eba      	ldrb	r2, [r7, #26]
 80014b0:	fb02 f303 	mul.w	r3, r2, r3
 80014b4:	461a      	mov	r2, r3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	441a      	add	r2, r3
 80014ba:	7e7b      	ldrb	r3, [r7, #25]
 80014bc:	4611      	mov	r1, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 f876 	bl	80015b0 <pec15_calc>
 80014c4:	4603      	mov	r3, r0
 80014c6:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 80014c8:	8a7a      	ldrh	r2, [r7, #18]
 80014ca:	8a3b      	ldrh	r3, [r7, #16]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d001      	beq.n	80014d4 <LTC6811_rdaux+0xf0>
			{
			  pec_error = -1;
 80014d0:	23ff      	movs	r3, #255	@ 0xff
 80014d2:	77fb      	strb	r3, [r7, #31]
			}
			data_counter += 2;
 80014d4:	7fbb      	ldrb	r3, [r7, #30]
 80014d6:	3302      	adds	r3, #2
 80014d8:	77bb      	strb	r3, [r7, #30]
		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 80014da:	7f3b      	ldrb	r3, [r7, #28]
 80014dc:	3301      	adds	r3, #1
 80014de:	773b      	strb	r3, [r7, #28]
 80014e0:	7f3a      	ldrb	r2, [r7, #28]
 80014e2:	79bb      	ldrb	r3, [r7, #6]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d3a6      	bcc.n	8001436 <LTC6811_rdaux+0x52>
	for(uint8_t aux_reg = 1; aux_reg < AUX_IN_REG; aux_reg++)	//executes once for each of the LTC6804 cell voltage registers
 80014e8:	7f7b      	ldrb	r3, [r7, #29]
 80014ea:	3301      	adds	r3, #1
 80014ec:	777b      	strb	r3, [r7, #29]
 80014ee:	7f7a      	ldrb	r2, [r7, #29]
 80014f0:	7e3b      	ldrb	r3, [r7, #24]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d394      	bcc.n	8001420 <LTC6811_rdaux+0x3c>
		}
	}

	free(aux_data);
 80014f6:	6978      	ldr	r0, [r7, #20]
 80014f8:	f009 fe8a 	bl	800b210 <free>
	return(pec_error);
 80014fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3720      	adds	r7, #32
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <LTC6811_rdaux_reg>:

void LTC6811_rdaux_reg(uint8_t reg, uint8_t nIC, uint8_t *data)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	603a      	str	r2, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
 8001514:	460b      	mov	r3, r1
 8001516:	71bb      	strb	r3, [r7, #6]
	uint8_t RDAUX[4];
	uint16_t temp_pec;

	switch(reg){
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d002      	beq.n	8001524 <LTC6811_rdaux_reg+0x1c>
 800151e:	2b02      	cmp	r3, #2
 8001520:	d003      	beq.n	800152a <LTC6811_rdaux_reg+0x22>
 8001522:	e005      	b.n	8001530 <LTC6811_rdaux_reg+0x28>
		case 1: RDAUX[1] = 0xC; break;
 8001524:	230c      	movs	r3, #12
 8001526:	727b      	strb	r3, [r7, #9]
 8001528:	e002      	b.n	8001530 <LTC6811_rdaux_reg+0x28>
		case 2: RDAUX[1] = 0xE; break;
 800152a:	230e      	movs	r3, #14
 800152c:	727b      	strb	r3, [r7, #9]
 800152e:	bf00      	nop
	}

	wakeup_idle();
 8001530:	f7ff fcbe 	bl	8000eb0 <wakeup_idle>

    //Register A-D = reg 1-4
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 8001534:	2300      	movs	r3, #0
 8001536:	73fb      	strb	r3, [r7, #15]
 8001538:	e02f      	b.n	800159a <LTC6811_rdaux_reg+0x92>
    {
    	RDAUX[0] = 0x80 + (current_ic << 3);
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	b2db      	uxtb	r3, r3
 8001540:	3b80      	subs	r3, #128	@ 0x80
 8001542:	b2db      	uxtb	r3, r3
 8001544:	723b      	strb	r3, [r7, #8]
        temp_pec = pec15_calc(2, RDAUX);
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	4619      	mov	r1, r3
 800154c:	2002      	movs	r0, #2
 800154e:	f000 f82f 	bl	80015b0 <pec15_calc>
 8001552:	4603      	mov	r3, r0
 8001554:	81bb      	strh	r3, [r7, #12]
        RDAUX[2] = (uint8_t)(temp_pec >> 8);
 8001556:	89bb      	ldrh	r3, [r7, #12]
 8001558:	0a1b      	lsrs	r3, r3, #8
 800155a:	b29b      	uxth	r3, r3
 800155c:	b2db      	uxtb	r3, r3
 800155e:	72bb      	strb	r3, [r7, #10]
        RDAUX[3] = (uint8_t)(temp_pec);
 8001560:	89bb      	ldrh	r3, [r7, #12]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800156c:	480f      	ldr	r0, [pc, #60]	@ (80015ac <LTC6811_rdaux_reg+0xa4>)
 800156e:	f003 fa38 	bl	80049e2 <HAL_GPIO_WritePin>
        spi_write_read(RDAUX, 4, &data[current_ic * 8], 8);
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	461a      	mov	r2, r3
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	441a      	add	r2, r3
 800157c:	f107 0008 	add.w	r0, r7, #8
 8001580:	2308      	movs	r3, #8
 8001582:	2104      	movs	r1, #4
 8001584:	f7ff fc66 	bl	8000e54 <spi_write_read>
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800158e:	4807      	ldr	r0, [pc, #28]	@ (80015ac <LTC6811_rdaux_reg+0xa4>)
 8001590:	f003 fa27 	bl	80049e2 <HAL_GPIO_WritePin>
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	3301      	adds	r3, #1
 8001598:	73fb      	strb	r3, [r7, #15]
 800159a:	7bfa      	ldrb	r2, [r7, #15]
 800159c:	79bb      	ldrb	r3, [r7, #6]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d3cb      	bcc.n	800153a <LTC6811_rdaux_reg+0x32>
    }
}
 80015a2:	bf00      	nop
 80015a4:	bf00      	nop
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40020000 	.word	0x40020000

080015b0 <pec15_calc>:
}
*/

//char *data uint8_t *data , uint8_t len
uint16_t pec15_calc(uint8_t len, uint8_t *data)
 {
 80015b0:	b480      	push	{r7}
 80015b2:	b087      	sub	sp, #28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	6039      	str	r1, [r7, #0]
 80015ba:	71fb      	strb	r3, [r7, #7]
 uint16_t remainder, address;

 remainder = 16;//PEC seed
 80015bc:	2310      	movs	r3, #16
 80015be:	82fb      	strh	r3, [r7, #22]
 for (int i = 0; i < len; i++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	e017      	b.n	80015f6 <pec15_calc+0x46>
 {
 address = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 80015c6:	8afb      	ldrh	r3, [r7, #22]
 80015c8:	09db      	lsrs	r3, r3, #7
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	6839      	ldr	r1, [r7, #0]
 80015d0:	440a      	add	r2, r1
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	4053      	eors	r3, r2
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	81fb      	strh	r3, [r7, #14]
 remainder = (remainder << 8 ) ^ pec15Table[address];
 80015dc:	8afb      	ldrh	r3, [r7, #22]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	89fb      	ldrh	r3, [r7, #14]
 80015e4:	490a      	ldr	r1, [pc, #40]	@ (8001610 <pec15_calc+0x60>)
 80015e6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	4053      	eors	r3, r2
 80015ee:	82fb      	strh	r3, [r7, #22]
 for (int i = 0; i < len; i++)
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	3301      	adds	r3, #1
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	dbe3      	blt.n	80015c6 <pec15_calc+0x16>
 }
 return (remainder*2);//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 80015fe:	8afb      	ldrh	r3, [r7, #22]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	b29b      	uxth	r3, r3
 }
 8001604:	4618      	mov	r0, r3
 8001606:	371c      	adds	r7, #28
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	0800df6c 	.word	0x0800df6c

08001614 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800161a:	463b      	mov	r3, r7
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001626:	4b21      	ldr	r3, [pc, #132]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001628:	4a21      	ldr	r2, [pc, #132]	@ (80016b0 <MX_ADC1_Init+0x9c>)
 800162a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800162c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ac <MX_ADC1_Init+0x98>)
 800162e:	2200      	movs	r2, #0
 8001630:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001632:	4b1e      	ldr	r3, [pc, #120]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001638:	4b1c      	ldr	r3, [pc, #112]	@ (80016ac <MX_ADC1_Init+0x98>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800163e:	4b1b      	ldr	r3, [pc, #108]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001640:	2200      	movs	r2, #0
 8001642:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001644:	4b19      	ldr	r3, [pc, #100]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800164c:	4b17      	ldr	r3, [pc, #92]	@ (80016ac <MX_ADC1_Init+0x98>)
 800164e:	2200      	movs	r2, #0
 8001650:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001652:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001654:	4a17      	ldr	r2, [pc, #92]	@ (80016b4 <MX_ADC1_Init+0xa0>)
 8001656:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001658:	4b14      	ldr	r3, [pc, #80]	@ (80016ac <MX_ADC1_Init+0x98>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800165e:	4b13      	ldr	r3, [pc, #76]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001660:	2201      	movs	r2, #1
 8001662:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001664:	4b11      	ldr	r3, [pc, #68]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800166c:	4b0f      	ldr	r3, [pc, #60]	@ (80016ac <MX_ADC1_Init+0x98>)
 800166e:	2201      	movs	r2, #1
 8001670:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001672:	480e      	ldr	r0, [pc, #56]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001674:	f001 fcbe 	bl	8002ff4 <HAL_ADC_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800167e:	f001 f9b0 	bl	80029e2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001682:	230a      	movs	r3, #10
 8001684:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001686:	2301      	movs	r3, #1
 8001688:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800168e:	463b      	mov	r3, r7
 8001690:	4619      	mov	r1, r3
 8001692:	4806      	ldr	r0, [pc, #24]	@ (80016ac <MX_ADC1_Init+0x98>)
 8001694:	f001 fe64 	bl	8003360 <HAL_ADC_ConfigChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800169e:	f001 f9a0 	bl	80029e2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200003b4 	.word	0x200003b4
 80016b0:	40012000 	.word	0x40012000
 80016b4:	0f000001 	.word	0x0f000001

080016b8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016be:	463b      	mov	r3, r7
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80016ca:	4b21      	ldr	r3, [pc, #132]	@ (8001750 <MX_ADC2_Init+0x98>)
 80016cc:	4a21      	ldr	r2, [pc, #132]	@ (8001754 <MX_ADC2_Init+0x9c>)
 80016ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001750 <MX_ADC2_Init+0x98>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <MX_ADC2_Init+0x98>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80016dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001750 <MX_ADC2_Init+0x98>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80016e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001750 <MX_ADC2_Init+0x98>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80016e8:	4b19      	ldr	r3, [pc, #100]	@ (8001750 <MX_ADC2_Init+0x98>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016f0:	4b17      	ldr	r3, [pc, #92]	@ (8001750 <MX_ADC2_Init+0x98>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016f6:	4b16      	ldr	r3, [pc, #88]	@ (8001750 <MX_ADC2_Init+0x98>)
 80016f8:	4a17      	ldr	r2, [pc, #92]	@ (8001758 <MX_ADC2_Init+0xa0>)
 80016fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016fc:	4b14      	ldr	r3, [pc, #80]	@ (8001750 <MX_ADC2_Init+0x98>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001702:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <MX_ADC2_Init+0x98>)
 8001704:	2201      	movs	r2, #1
 8001706:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001708:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <MX_ADC2_Init+0x98>)
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001710:	4b0f      	ldr	r3, [pc, #60]	@ (8001750 <MX_ADC2_Init+0x98>)
 8001712:	2201      	movs	r2, #1
 8001714:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001716:	480e      	ldr	r0, [pc, #56]	@ (8001750 <MX_ADC2_Init+0x98>)
 8001718:	f001 fc6c 	bl	8002ff4 <HAL_ADC_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8001722:	f001 f95e 	bl	80029e2 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001726:	230b      	movs	r3, #11
 8001728:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800172a:	2301      	movs	r3, #1
 800172c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001732:	463b      	mov	r3, r7
 8001734:	4619      	mov	r1, r3
 8001736:	4806      	ldr	r0, [pc, #24]	@ (8001750 <MX_ADC2_Init+0x98>)
 8001738:	f001 fe12 	bl	8003360 <HAL_ADC_ConfigChannel>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001742:	f001 f94e 	bl	80029e2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200003fc 	.word	0x200003fc
 8001754:	40012100 	.word	0x40012100
 8001758:	0f000001 	.word	0x0f000001

0800175c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08c      	sub	sp, #48	@ 0x30
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a2e      	ldr	r2, [pc, #184]	@ (8001834 <HAL_ADC_MspInit+0xd8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d128      	bne.n	80017d0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	4b2d      	ldr	r3, [pc, #180]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001786:	4a2c      	ldr	r2, [pc, #176]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 8001788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800178c:	6453      	str	r3, [r2, #68]	@ 0x44
 800178e:	4b2a      	ldr	r3, [pc, #168]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001796:	61bb      	str	r3, [r7, #24]
 8001798:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	4b26      	ldr	r3, [pc, #152]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	4a25      	ldr	r2, [pc, #148]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017aa:	4b23      	ldr	r3, [pc, #140]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017b6:	2301      	movs	r3, #1
 80017b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ba:	2303      	movs	r3, #3
 80017bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	4619      	mov	r1, r3
 80017c8:	481c      	ldr	r0, [pc, #112]	@ (800183c <HAL_ADC_MspInit+0xe0>)
 80017ca:	f002 ff55 	bl	8004678 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80017ce:	e02c      	b.n	800182a <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a1a      	ldr	r2, [pc, #104]	@ (8001840 <HAL_ADC_MspInit+0xe4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d127      	bne.n	800182a <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e2:	4a15      	ldr	r2, [pc, #84]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 80017e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ea:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 80017ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <HAL_ADC_MspInit+0xdc>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001812:	2302      	movs	r3, #2
 8001814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001816:	2303      	movs	r3, #3
 8001818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	@ (800183c <HAL_ADC_MspInit+0xe0>)
 8001826:	f002 ff27 	bl	8004678 <HAL_GPIO_Init>
}
 800182a:	bf00      	nop
 800182c:	3730      	adds	r7, #48	@ 0x30
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40012000 	.word	0x40012000
 8001838:	40023800 	.word	0x40023800
 800183c:	40020800 	.word	0x40020800
 8001840:	40012100 	.word	0x40012100
 8001844:	00000000 	.word	0x00000000

08001848 <ADC_TS_Voltage>:
uint16_t adc_vehic_volt;
uint16_t diff_volt;
uint8_t pre = 0;

uint8_t ADC_TS_Voltage(uint16_t MAX_TS_VOLTAGE, uint16_t MIN_TS_VOLTAGE)
{
 8001848:	b5b0      	push	{r4, r5, r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	460a      	mov	r2, r1
 8001852:	80fb      	strh	r3, [r7, #6]
 8001854:	4613      	mov	r3, r2
 8001856:	80bb      	strh	r3, [r7, #4]
	//Vehicle side
	HAL_ADC_Start(&hadc1);
 8001858:	4853      	ldr	r0, [pc, #332]	@ (80019a8 <ADC_TS_Voltage+0x160>)
 800185a:	f001 fc0f 	bl	800307c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 800185e:	2164      	movs	r1, #100	@ 0x64
 8001860:	4851      	ldr	r0, [pc, #324]	@ (80019a8 <ADC_TS_Voltage+0x160>)
 8001862:	f001 fced 	bl	8003240 <HAL_ADC_PollForConversion>
	raw_adc_vehic_volt = HAL_ADC_GetValue(&hadc1); // get the adc value
 8001866:	4850      	ldr	r0, [pc, #320]	@ (80019a8 <ADC_TS_Voltage+0x160>)
 8001868:	f001 fd6e 	bl	8003348 <HAL_ADC_GetValue>
 800186c:	4603      	mov	r3, r0
 800186e:	b29a      	uxth	r2, r3
 8001870:	4b4e      	ldr	r3, [pc, #312]	@ (80019ac <ADC_TS_Voltage+0x164>)
 8001872:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1); // stop adc
 8001874:	484c      	ldr	r0, [pc, #304]	@ (80019a8 <ADC_TS_Voltage+0x160>)
 8001876:	f001 fcb1 	bl	80031dc <HAL_ADC_Stop>
	//Accu side
	HAL_ADC_Start(&hadc2);
 800187a:	484d      	ldr	r0, [pc, #308]	@ (80019b0 <ADC_TS_Voltage+0x168>)
 800187c:	f001 fbfe 	bl	800307c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 100); // poll for conversion
 8001880:	2164      	movs	r1, #100	@ 0x64
 8001882:	484b      	ldr	r0, [pc, #300]	@ (80019b0 <ADC_TS_Voltage+0x168>)
 8001884:	f001 fcdc 	bl	8003240 <HAL_ADC_PollForConversion>
	raw_adc_accu_volt = HAL_ADC_GetValue(&hadc2); // get the adc value
 8001888:	4849      	ldr	r0, [pc, #292]	@ (80019b0 <ADC_TS_Voltage+0x168>)
 800188a:	f001 fd5d 	bl	8003348 <HAL_ADC_GetValue>
 800188e:	4603      	mov	r3, r0
 8001890:	b29a      	uxth	r2, r3
 8001892:	4b48      	ldr	r3, [pc, #288]	@ (80019b4 <ADC_TS_Voltage+0x16c>)
 8001894:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2); // stop adc
 8001896:	4846      	ldr	r0, [pc, #280]	@ (80019b0 <ADC_TS_Voltage+0x168>)
 8001898:	f001 fca0 	bl	80031dc <HAL_ADC_Stop>

	adc_accu_volt = (3.3/4095.0)* raw_adc_accu_volt * 175.5;
 800189c:	4b45      	ldr	r3, [pc, #276]	@ (80019b4 <ADC_TS_Voltage+0x16c>)
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fdeb 	bl	800047c <__aeabi_i2d>
 80018a6:	a33a      	add	r3, pc, #232	@ (adr r3, 8001990 <ADC_TS_Voltage+0x148>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe fe50 	bl	8000550 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	a337      	add	r3, pc, #220	@ (adr r3, 8001998 <ADC_TS_Voltage+0x150>)
 80018ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018be:	f7fe fe47 	bl	8000550 <__aeabi_dmul>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	f7ff f919 	bl	8000b00 <__aeabi_d2uiz>
 80018ce:	4603      	mov	r3, r0
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	4b39      	ldr	r3, [pc, #228]	@ (80019b8 <ADC_TS_Voltage+0x170>)
 80018d4:	801a      	strh	r2, [r3, #0]
	adc_vehic_volt = (3.3/4095.0)* raw_adc_vehic_volt * 175.5;
 80018d6:	4b35      	ldr	r3, [pc, #212]	@ (80019ac <ADC_TS_Voltage+0x164>)
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fdce 	bl	800047c <__aeabi_i2d>
 80018e0:	a32b      	add	r3, pc, #172	@ (adr r3, 8001990 <ADC_TS_Voltage+0x148>)
 80018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e6:	f7fe fe33 	bl	8000550 <__aeabi_dmul>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	a329      	add	r3, pc, #164	@ (adr r3, 8001998 <ADC_TS_Voltage+0x150>)
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	f7fe fe2a 	bl	8000550 <__aeabi_dmul>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4610      	mov	r0, r2
 8001902:	4619      	mov	r1, r3
 8001904:	f7ff f8fc 	bl	8000b00 <__aeabi_d2uiz>
 8001908:	4603      	mov	r3, r0
 800190a:	b29a      	uxth	r2, r3
 800190c:	4b2b      	ldr	r3, [pc, #172]	@ (80019bc <ADC_TS_Voltage+0x174>)
 800190e:	801a      	strh	r2, [r3, #0]
	diff_volt = adc_accu_volt - adc_vehic_volt;
 8001910:	4b29      	ldr	r3, [pc, #164]	@ (80019b8 <ADC_TS_Voltage+0x170>)
 8001912:	881a      	ldrh	r2, [r3, #0]
 8001914:	4b29      	ldr	r3, [pc, #164]	@ (80019bc <ADC_TS_Voltage+0x174>)
 8001916:	881b      	ldrh	r3, [r3, #0]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	b29a      	uxth	r2, r3
 800191c:	4b28      	ldr	r3, [pc, #160]	@ (80019c0 <ADC_TS_Voltage+0x178>)
 800191e:	801a      	strh	r2, [r3, #0]

	if(adc_accu_volt - adc_vehic_volt < 1) diff_volt = 0;
 8001920:	4b25      	ldr	r3, [pc, #148]	@ (80019b8 <ADC_TS_Voltage+0x170>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	461a      	mov	r2, r3
 8001926:	4b25      	ldr	r3, [pc, #148]	@ (80019bc <ADC_TS_Voltage+0x174>)
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	dc02      	bgt.n	8001936 <ADC_TS_Voltage+0xee>
 8001930:	4b23      	ldr	r3, [pc, #140]	@ (80019c0 <ADC_TS_Voltage+0x178>)
 8001932:	2200      	movs	r2, #0
 8001934:	801a      	strh	r2, [r3, #0]

	if(diff_volt <= 0.1 * MAX_TS_VOLTAGE && MIN_TS_VOLTAGE < adc_accu_volt)
 8001936:	4b22      	ldr	r3, [pc, #136]	@ (80019c0 <ADC_TS_Voltage+0x178>)
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fd9e 	bl	800047c <__aeabi_i2d>
 8001940:	4604      	mov	r4, r0
 8001942:	460d      	mov	r5, r1
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fd98 	bl	800047c <__aeabi_i2d>
 800194c:	a314      	add	r3, pc, #80	@ (adr r3, 80019a0 <ADC_TS_Voltage+0x158>)
 800194e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001952:	f7fe fdfd 	bl	8000550 <__aeabi_dmul>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4620      	mov	r0, r4
 800195c:	4629      	mov	r1, r5
 800195e:	f7ff f873 	bl	8000a48 <__aeabi_dcmple>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d008      	beq.n	800197a <ADC_TS_Voltage+0x132>
 8001968:	4b13      	ldr	r3, [pc, #76]	@ (80019b8 <ADC_TS_Voltage+0x170>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	88ba      	ldrh	r2, [r7, #4]
 800196e:	429a      	cmp	r2, r3
 8001970:	d203      	bcs.n	800197a <ADC_TS_Voltage+0x132>
		pre = 1;
 8001972:	4b14      	ldr	r3, [pc, #80]	@ (80019c4 <ADC_TS_Voltage+0x17c>)
 8001974:	2201      	movs	r2, #1
 8001976:	701a      	strb	r2, [r3, #0]
 8001978:	e002      	b.n	8001980 <ADC_TS_Voltage+0x138>
	else
		pre = 0;
 800197a:	4b12      	ldr	r3, [pc, #72]	@ (80019c4 <ADC_TS_Voltage+0x17c>)
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]

	return pre;
 8001980:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <ADC_TS_Voltage+0x17c>)
 8001982:	781b      	ldrb	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bdb0      	pop	{r4, r5, r7, pc}
 800198c:	f3af 8000 	nop.w
 8001990:	e734d9b4 	.word	0xe734d9b4
 8001994:	3f4a680c 	.word	0x3f4a680c
 8001998:	00000000 	.word	0x00000000
 800199c:	4065f000 	.word	0x4065f000
 80019a0:	9999999a 	.word	0x9999999a
 80019a4:	3fb99999 	.word	0x3fb99999
 80019a8:	200003b4 	.word	0x200003b4
 80019ac:	20000448 	.word	0x20000448
 80019b0:	200003fc 	.word	0x200003fc
 80019b4:	20000444 	.word	0x20000444
 80019b8:	20000446 	.word	0x20000446
 80019bc:	2000044a 	.word	0x2000044a
 80019c0:	2000044c 	.word	0x2000044c
 80019c4:	2000044e 	.word	0x2000044e

080019c8 <HAL_TIM_PeriodElapsedCallback>:
 * HLCK 96 MHz
 * APB1 48 MHz
 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]

CAN_interrupt();
 80019d0:	f000 fa3a 	bl	8001e48 <CAN_interrupt>
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
   {
 80019dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019de:	b089      	sub	sp, #36	@ 0x24
 80019e0:	af06      	add	r7, sp, #24
 80019e2:	6078      	str	r0, [r7, #4]
    CAN_RX(hcan1);
 80019e4:	4e0f      	ldr	r6, [pc, #60]	@ (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80019e6:	466d      	mov	r5, sp
 80019e8:	f106 0410 	add.w	r4, r6, #16
 80019ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80019f8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80019fc:	f000 fbf2 	bl	80021e4 <CAN_RX>
    CAN_RX_IVT(hcan2);
 8001a00:	4e09      	ldr	r6, [pc, #36]	@ (8001a28 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001a02:	466d      	mov	r5, sp
 8001a04:	f106 0410 	add.w	r4, r6, #16
 8001a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a10:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a14:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001a18:	f000 fc06 	bl	8002228 <CAN_RX_IVT>
   }
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a24:	20000504 	.word	0x20000504
 8001a28:	2000052c 	.word	0x2000052c

08001a2c <BMS_init>:
	CAN_RX_IVT(hcan2);
}
*/

void BMS_init()
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	LTC6811_initialize();
 8001a30:	f7ff fa30 	bl	8000e94 <LTC6811_initialize>
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <BMS>:

void BMS()		// Battery Management System function for main loop.
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
	uint8_t pec = 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	713b      	strb	r3, [r7, #4]
	static uint8_t selTemp = 0;
	//uint16_t VOV = MAX_VOLTAGE/16;					// Formeln aus Datenblatt S.65
	//uint16_t VUV = (MIN_VOLTAGE/16)-1;

	//precharge = 1 when complete and 0 when still charging
	precharge = ADC_TS_Voltage(MAX_TS_VOLTAGE, MIN_TS_VOLTAGE);
 8001a42:	f240 1157 	movw	r1, #343	@ 0x157
 8001a46:	f240 202a 	movw	r0, #554	@ 0x22a
 8001a4a:	f7ff fefd 	bl	8001848 <ADC_TS_Voltage>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b81      	ldr	r3, [pc, #516]	@ (8001c58 <BMS+0x220>)
 8001a54:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < NUM_STACK; i++)
 8001a56:	2300      	movs	r3, #0
 8001a58:	71fb      	strb	r3, [r7, #7]
 8001a5a:	e0b2      	b.n	8001bc2 <BMS+0x18a>
		cfg[i][4] = 0x00 | OV_flag[i];
		cfg[i][5] = 0x00 | (OV_flag[i]>>8);

*/
		//Balancing without flags
		cfg[i][0] = 0x3C | ((selTemp << 6) & 0xC0);		//cfg : Databytes in config register of the LTC6811
 8001a5c:	4b7f      	ldr	r3, [pc, #508]	@ (8001c5c <BMS+0x224>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	019b      	lsls	r3, r3, #6
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	f043 033c 	orr.w	r3, r3, #60	@ 0x3c
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	79fa      	ldrb	r2, [r7, #7]
 8001a6c:	b2d8      	uxtb	r0, r3
 8001a6e:	497c      	ldr	r1, [pc, #496]	@ (8001c60 <BMS+0x228>)
 8001a70:	4613      	mov	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4413      	add	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	440b      	add	r3, r1
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	701a      	strb	r2, [r3, #0]
		cfg[i][1] = 0x00;
 8001a7e:	79fa      	ldrb	r2, [r7, #7]
 8001a80:	4977      	ldr	r1, [pc, #476]	@ (8001c60 <BMS+0x228>)
 8001a82:	4613      	mov	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4413      	add	r3, r2
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	440b      	add	r3, r1
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
		cfg[i][2] = 0x00;
 8001a92:	79fa      	ldrb	r2, [r7, #7]
 8001a94:	4972      	ldr	r1, [pc, #456]	@ (8001c60 <BMS+0x228>)
 8001a96:	4613      	mov	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	4413      	add	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	440b      	add	r3, r1
 8001aa0:	3302      	adds	r3, #2
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
		cfg[i][3] = 0x00;
 8001aa6:	79fa      	ldrb	r2, [r7, #7]
 8001aa8:	496d      	ldr	r1, [pc, #436]	@ (8001c60 <BMS+0x228>)
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	440b      	add	r3, r1
 8001ab4:	3303      	adds	r3, #3
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
		cfg[i][4] = 0x00;
 8001aba:	79fa      	ldrb	r2, [r7, #7]
 8001abc:	4968      	ldr	r1, [pc, #416]	@ (8001c60 <BMS+0x228>)
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	440b      	add	r3, r1
 8001ac8:	3304      	adds	r3, #4
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
		cfg[i][5] = 0x00;
 8001ace:	79fa      	ldrb	r2, [r7, #7]
 8001ad0:	4963      	ldr	r1, [pc, #396]	@ (8001c60 <BMS+0x228>)
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	440b      	add	r3, r1
 8001adc:	3305      	adds	r3, #5
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]

		if(balancing)
 8001ae2:	4b60      	ldr	r3, [pc, #384]	@ (8001c64 <BMS+0x22c>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d068      	beq.n	8001bbc <BMS+0x184>
		{
			if(selTemp < 3)
 8001aea:	4b5c      	ldr	r3, [pc, #368]	@ (8001c5c <BMS+0x224>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d864      	bhi.n	8001bbc <BMS+0x184>
			{
				for(uint8_t j = 0; j < 8; j++)
 8001af2:	2300      	movs	r3, #0
 8001af4:	71bb      	strb	r3, [r7, #6]
 8001af6:	e02b      	b.n	8001b50 <BMS+0x118>
				{
					if(cellVoltages[i * NUM_STACK + j] - MAX_VOLTAGE > balanceMargin)cfg[i][4] |= 1 << j;
 8001af8:	79fa      	ldrb	r2, [r7, #7]
 8001afa:	79bb      	ldrb	r3, [r7, #6]
 8001afc:	4413      	add	r3, r2
 8001afe:	4a5a      	ldr	r2, [pc, #360]	@ (8001c68 <BMS+0x230>)
 8001b00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b04:	f5a3 4318 	sub.w	r3, r3, #38912	@ 0x9800
 8001b08:	3b58      	subs	r3, #88	@ 0x58
 8001b0a:	4a58      	ldr	r2, [pc, #352]	@ (8001c6c <BMS+0x234>)
 8001b0c:	8812      	ldrh	r2, [r2, #0]
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	dd1b      	ble.n	8001b4a <BMS+0x112>
 8001b12:	79fa      	ldrb	r2, [r7, #7]
 8001b14:	4952      	ldr	r1, [pc, #328]	@ (8001c60 <BMS+0x228>)
 8001b16:	4613      	mov	r3, r2
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4413      	add	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	440b      	add	r3, r1
 8001b20:	3304      	adds	r3, #4
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	b25a      	sxtb	r2, r3
 8001b26:	79bb      	ldrb	r3, [r7, #6]
 8001b28:	2101      	movs	r1, #1
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	b25b      	sxtb	r3, r3
 8001b30:	4313      	orrs	r3, r2
 8001b32:	b25b      	sxtb	r3, r3
 8001b34:	79fa      	ldrb	r2, [r7, #7]
 8001b36:	b2d8      	uxtb	r0, r3
 8001b38:	4949      	ldr	r1, [pc, #292]	@ (8001c60 <BMS+0x228>)
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4413      	add	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	440b      	add	r3, r1
 8001b44:	3304      	adds	r3, #4
 8001b46:	4602      	mov	r2, r0
 8001b48:	701a      	strb	r2, [r3, #0]
				for(uint8_t j = 0; j < 8; j++)
 8001b4a:	79bb      	ldrb	r3, [r7, #6]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	71bb      	strb	r3, [r7, #6]
 8001b50:	79bb      	ldrb	r3, [r7, #6]
 8001b52:	2b07      	cmp	r3, #7
 8001b54:	d9d0      	bls.n	8001af8 <BMS+0xc0>
				}
				for(uint8_t j = 0; j < 3; j++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	717b      	strb	r3, [r7, #5]
 8001b5a:	e02c      	b.n	8001bb6 <BMS+0x17e>
				{
					if(cellVoltages[i * NUM_STACK + j + 8] - MAX_VOLTAGE > balanceMargin)cfg[i][5] |= 1 << j;
 8001b5c:	79fa      	ldrb	r2, [r7, #7]
 8001b5e:	797b      	ldrb	r3, [r7, #5]
 8001b60:	4413      	add	r3, r2
 8001b62:	3308      	adds	r3, #8
 8001b64:	4a40      	ldr	r2, [pc, #256]	@ (8001c68 <BMS+0x230>)
 8001b66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b6a:	f5a3 4318 	sub.w	r3, r3, #38912	@ 0x9800
 8001b6e:	3b58      	subs	r3, #88	@ 0x58
 8001b70:	4a3e      	ldr	r2, [pc, #248]	@ (8001c6c <BMS+0x234>)
 8001b72:	8812      	ldrh	r2, [r2, #0]
 8001b74:	4293      	cmp	r3, r2
 8001b76:	dd1b      	ble.n	8001bb0 <BMS+0x178>
 8001b78:	79fa      	ldrb	r2, [r7, #7]
 8001b7a:	4939      	ldr	r1, [pc, #228]	@ (8001c60 <BMS+0x228>)
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	440b      	add	r3, r1
 8001b86:	3305      	adds	r3, #5
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	b25a      	sxtb	r2, r3
 8001b8c:	797b      	ldrb	r3, [r7, #5]
 8001b8e:	2101      	movs	r1, #1
 8001b90:	fa01 f303 	lsl.w	r3, r1, r3
 8001b94:	b25b      	sxtb	r3, r3
 8001b96:	4313      	orrs	r3, r2
 8001b98:	b25b      	sxtb	r3, r3
 8001b9a:	79fa      	ldrb	r2, [r7, #7]
 8001b9c:	b2d8      	uxtb	r0, r3
 8001b9e:	4930      	ldr	r1, [pc, #192]	@ (8001c60 <BMS+0x228>)
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	440b      	add	r3, r1
 8001baa:	3305      	adds	r3, #5
 8001bac:	4602      	mov	r2, r0
 8001bae:	701a      	strb	r2, [r3, #0]
				for(uint8_t j = 0; j < 3; j++)
 8001bb0:	797b      	ldrb	r3, [r7, #5]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	717b      	strb	r3, [r7, #5]
 8001bb6:	797b      	ldrb	r3, [r7, #5]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d9cf      	bls.n	8001b5c <BMS+0x124>
	for (uint8_t i = 0; i < NUM_STACK; i++)
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	71fb      	strb	r3, [r7, #7]
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f43f af49 	beq.w	8001a5c <BMS+0x24>
	/*
	LTC6811_clrstat();
	HAL_Delay(3);
*/

	LTC6811_wrcfg(NUM_STACK, (uint8_t(*)[6])cfg);		// Write config
 8001bca:	4925      	ldr	r1, [pc, #148]	@ (8001c60 <BMS+0x228>)
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f7ff fa5d 	bl	800108c <LTC6811_wrcfg>
	HAL_Delay(3);
 8001bd2:	2003      	movs	r0, #3
 8001bd4:	f001 f9ea 	bl	8002fac <HAL_Delay>

	//wakeup_idle();									// read config
	//LTC6811_rdcfg();
	//HAL_Delay(3);

	LTC6811_adcv();										// measure voltages
 8001bd8:	f7ff f9d4 	bl	8000f84 <LTC6811_adcv>
	HAL_Delay(3);
 8001bdc:	2003      	movs	r0, #3
 8001bde:	f001 f9e5 	bl	8002fac <HAL_Delay>

	pec += LTC6811_rdcv(0, NUM_STACK, (uint16_t(*)[12])cellVoltages);	//read voltages
 8001be2:	4a21      	ldr	r2, [pc, #132]	@ (8001c68 <BMS+0x230>)
 8001be4:	2101      	movs	r1, #1
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff fb08 	bl	80011fc <LTC6811_rdcv>
 8001bec:	4603      	mov	r3, r0
 8001bee:	461a      	mov	r2, r3
 8001bf0:	793b      	ldrb	r3, [r7, #4]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	713b      	strb	r3, [r7, #4]
	HAL_Delay(3);
 8001bf6:	2003      	movs	r0, #3
 8001bf8:	f001 f9d8 	bl	8002fac <HAL_Delay>

	LTC6811_adax();										// measure 3 celltemp
 8001bfc:	f7ff fa04 	bl	8001008 <LTC6811_adax>
	HAL_Delay(3);
 8001c00:	2003      	movs	r0, #3
 8001c02:	f001 f9d3 	bl	8002fac <HAL_Delay>

	pec += LTC6811_rdaux(0, NUM_STACK, (uint16_t(*)[6])slaveGPIOs);	// read celltemp
 8001c06:	4a1a      	ldr	r2, [pc, #104]	@ (8001c70 <BMS+0x238>)
 8001c08:	2101      	movs	r1, #1
 8001c0a:	2000      	movs	r0, #0
 8001c0c:	f7ff fbea 	bl	80013e4 <LTC6811_rdaux>
 8001c10:	4603      	mov	r3, r0
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	793b      	ldrb	r3, [r7, #4]
 8001c16:	4413      	add	r3, r2
 8001c18:	713b      	strb	r3, [r7, #4]
	HAL_Delay(3);
 8001c1a:	2003      	movs	r0, #3
 8001c1c:	f001 f9c6 	bl	8002fac <HAL_Delay>

	//pec += LTC6811_rdstatb(NUM_STACK, OV_flag, UV_flag, r_statb);
	//HAL_Delay(3);


	convertVoltage();
 8001c20:	f000 f828 	bl	8001c74 <convertVoltage>

	convertTemperature(selTemp);
 8001c24:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <BMS+0x224>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 f97b 	bl	8001f24 <convertTemperature>

	wakeup_idle();
	LTC6811_rdstat();
*/

	if (selTemp < 3)		// Variable for cycling the multiplexers for temp measurement.
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <BMS+0x224>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d806      	bhi.n	8001c44 <BMS+0x20c>
	{
		selTemp++;
 8001c36:	4b09      	ldr	r3, [pc, #36]	@ (8001c5c <BMS+0x224>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <BMS+0x224>)
 8001c40:	701a      	strb	r2, [r3, #0]
 8001c42:	e002      	b.n	8001c4a <BMS+0x212>
		//CAN_interrupt();
	}


	else
		selTemp = 0;
 8001c44:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <BMS+0x224>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]


	send_usb();
 8001c4a:	f000 fa3b 	bl	80020c4 <send_usb>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	2000044f 	.word	0x2000044f
 8001c5c:	200004f0 	.word	0x200004f0
 8001c60:	2000046c 	.word	0x2000046c
 8001c64:	20000450 	.word	0x20000450
 8001c68:	20000454 	.word	0x20000454
 8001c6c:	20000000 	.word	0x20000000
 8001c70:	20000474 	.word	0x20000474

08001c74 <convertVoltage>:

void convertVoltage()		//convert and sort Voltages
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
	//double voltage[NUM_CELLS];


	for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	71fb      	strb	r3, [r7, #7]
 8001c7e:	e00f      	b.n	8001ca0 <convertVoltage+0x2c>
	{
		usb_voltages[i] = cellVoltages[i]/1000;
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	4a3a      	ldr	r2, [pc, #232]	@ (8001d6c <convertVoltage+0xf8>)
 8001c84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c88:	4a39      	ldr	r2, [pc, #228]	@ (8001d70 <convertVoltage+0xfc>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	099b      	lsrs	r3, r3, #6
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	b2d1      	uxtb	r1, r2
 8001c96:	4a37      	ldr	r2, [pc, #220]	@ (8001d74 <convertVoltage+0x100>)
 8001c98:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	71fb      	strb	r3, [r7, #7]
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	2b0b      	cmp	r3, #11
 8001ca4:	d9ec      	bls.n	8001c80 <convertVoltage+0xc>
	}

	//uint16_t cell_max = 42890;
	//uint16_t cell_min = 37789;

	uint16_t cell_max = cellVoltages[0];
 8001ca6:	4b31      	ldr	r3, [pc, #196]	@ (8001d6c <convertVoltage+0xf8>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	80bb      	strh	r3, [r7, #4]
	uint16_t cell_min = cellVoltages[0];
 8001cac:	4b2f      	ldr	r3, [pc, #188]	@ (8001d6c <convertVoltage+0xf8>)
 8001cae:	881b      	ldrh	r3, [r3, #0]
 8001cb0:	807b      	strh	r3, [r7, #2]
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	707b      	strb	r3, [r7, #1]
 8001cb6:	e03c      	b.n	8001d32 <convertVoltage+0xbe>
	{
		for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	703b      	strb	r3, [r7, #0]
 8001cbc:	e033      	b.n	8001d26 <convertVoltage+0xb2>
		{
			if(cellVoltages[i + k * 12] > cell_max) cell_max = cellVoltages[i + k * 12];
 8001cbe:	7839      	ldrb	r1, [r7, #0]
 8001cc0:	787a      	ldrb	r2, [r7, #1]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	440b      	add	r3, r1
 8001ccc:	4a27      	ldr	r2, [pc, #156]	@ (8001d6c <convertVoltage+0xf8>)
 8001cce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cd2:	88ba      	ldrh	r2, [r7, #4]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d20b      	bcs.n	8001cf0 <convertVoltage+0x7c>
 8001cd8:	7839      	ldrb	r1, [r7, #0]
 8001cda:	787a      	ldrb	r2, [r7, #1]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	4413      	add	r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	4a21      	ldr	r2, [pc, #132]	@ (8001d6c <convertVoltage+0xf8>)
 8001ce8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cec:	80bb      	strh	r3, [r7, #4]
 8001cee:	e017      	b.n	8001d20 <convertVoltage+0xac>
			else if(cellVoltages[i + k * 12] < cell_min) cell_min = cellVoltages[i + k * 12];
 8001cf0:	7839      	ldrb	r1, [r7, #0]
 8001cf2:	787a      	ldrb	r2, [r7, #1]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	4413      	add	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8001d6c <convertVoltage+0xf8>)
 8001d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d04:	887a      	ldrh	r2, [r7, #2]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d90a      	bls.n	8001d20 <convertVoltage+0xac>
 8001d0a:	7839      	ldrb	r1, [r7, #0]
 8001d0c:	787a      	ldrb	r2, [r7, #1]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	440b      	add	r3, r1
 8001d18:	4a14      	ldr	r2, [pc, #80]	@ (8001d6c <convertVoltage+0xf8>)
 8001d1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d1e:	807b      	strh	r3, [r7, #2]
		for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 8001d20:	783b      	ldrb	r3, [r7, #0]
 8001d22:	3301      	adds	r3, #1
 8001d24:	703b      	strb	r3, [r7, #0]
 8001d26:	783b      	ldrb	r3, [r7, #0]
 8001d28:	2b0b      	cmp	r3, #11
 8001d2a:	d9c8      	bls.n	8001cbe <convertVoltage+0x4a>
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001d2c:	787b      	ldrb	r3, [r7, #1]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	707b      	strb	r3, [r7, #1]
 8001d32:	787b      	ldrb	r3, [r7, #1]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0bf      	beq.n	8001cb8 <convertVoltage+0x44>
			//voltage[i + k * 12] = (double)cellVoltages[i + k * 12]/10000;
			//printf(" Stack %d Cell %d = %.4f V \r\n", k, i, voltage[i + k * 12]);
		}
	}

	AMS1_databytes[0] = cell_min;
 8001d38:	887b      	ldrh	r3, [r7, #2]
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <convertVoltage+0x104>)
 8001d3e:	701a      	strb	r2, [r3, #0]
	AMS1_databytes[1] = (cell_min >> 8);
 8001d40:	887b      	ldrh	r3, [r7, #2]
 8001d42:	0a1b      	lsrs	r3, r3, #8
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <convertVoltage+0x104>)
 8001d4a:	705a      	strb	r2, [r3, #1]
	AMS1_databytes[2] = cell_max;
 8001d4c:	88bb      	ldrh	r3, [r7, #4]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	4b09      	ldr	r3, [pc, #36]	@ (8001d78 <convertVoltage+0x104>)
 8001d52:	709a      	strb	r2, [r3, #2]
	AMS1_databytes[3] = (cell_max >> 8);
 8001d54:	88bb      	ldrh	r3, [r7, #4]
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <convertVoltage+0x104>)
 8001d5e:	70da      	strb	r2, [r3, #3]



}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000454 	.word	0x20000454
 8001d70:	10624dd3 	.word	0x10624dd3
 8001d74:	200004b4 	.word	0x200004b4
 8001d78:	200004d4 	.word	0x200004d4
 8001d7c:	00000000 	.word	0x00000000

08001d80 <calculateTemperature>:


uint16_t calculateTemperature(uint16_t voltageCode, uint16_t referenceCode)		//convert temp
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	460a      	mov	r2, r1
 8001d8a:	80fb      	strh	r3, [r7, #6]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	80bb      	strh	r3, [r7, #4]
	if(referenceCode - voltageCode != 0)
 8001d90:	88ba      	ldrh	r2, [r7, #4]
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d03e      	beq.n	8001e16 <calculateTemperature+0x96>
	{
		uint32_t convert_R = (voltageCode * 100000)/(referenceCode - voltageCode);
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	4a29      	ldr	r2, [pc, #164]	@ (8001e40 <calculateTemperature+0xc0>)
 8001d9c:	fb03 f202 	mul.w	r2, r3, r2
 8001da0:	88b9      	ldrh	r1, [r7, #4]
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	1acb      	subs	r3, r1, r3
 8001da6:	fb92 f3f3 	sdiv	r3, r2, r3
 8001daa:	60fb      	str	r3, [r7, #12]
		return 1000.0 / ((1.0 / 298.15) - (log(10000.0 / convert_R) / 3435.0)) - 273150.0;
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f7fe fb55 	bl	800045c <__aeabi_ui2d>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	a11a      	add	r1, pc, #104	@ (adr r1, 8001e20 <calculateTemperature+0xa0>)
 8001db8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001dbc:	f7fe fcf2 	bl	80007a4 <__aeabi_ddiv>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f00b feae 	bl	800db28 <log>
 8001dcc:	a316      	add	r3, pc, #88	@ (adr r3, 8001e28 <calculateTemperature+0xa8>)
 8001dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd2:	f7fe fce7 	bl	80007a4 <__aeabi_ddiv>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	a115      	add	r1, pc, #84	@ (adr r1, 8001e30 <calculateTemperature+0xb0>)
 8001ddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001de0:	f7fe f9fe 	bl	80001e0 <__aeabi_dsub>
 8001de4:	4602      	mov	r2, r0
 8001de6:	460b      	mov	r3, r1
 8001de8:	f04f 0000 	mov.w	r0, #0
 8001dec:	4915      	ldr	r1, [pc, #84]	@ (8001e44 <calculateTemperature+0xc4>)
 8001dee:	f7fe fcd9 	bl	80007a4 <__aeabi_ddiv>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	a30f      	add	r3, pc, #60	@ (adr r3, 8001e38 <calculateTemperature+0xb8>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f7fe f9ee 	bl	80001e0 <__aeabi_dsub>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f7fe fe78 	bl	8000b00 <__aeabi_d2uiz>
 8001e10:	4603      	mov	r3, r0
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	e000      	b.n	8001e18 <calculateTemperature+0x98>
	}
	else
		return 0x00;
 8001e16:	2300      	movs	r3, #0


}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	00000000 	.word	0x00000000
 8001e24:	40c38800 	.word	0x40c38800
 8001e28:	00000000 	.word	0x00000000
 8001e2c:	40aad600 	.word	0x40aad600
 8001e30:	dcb5db83 	.word	0xdcb5db83
 8001e34:	3f6b79e1 	.word	0x3f6b79e1
 8001e38:	00000000 	.word	0x00000000
 8001e3c:	4110abf8 	.word	0x4110abf8
 8001e40:	000186a0 	.word	0x000186a0
 8001e44:	408f4000 	.word	0x408f4000

08001e48 <CAN_interrupt>:

void CAN_interrupt()
{
 8001e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0

	if (HAL_GetTick()>= last20 + 20)
 8001e50:	f001 f8a2 	bl	8002f98 <HAL_GetTick>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2200      	movs	r2, #0
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	617a      	str	r2, [r7, #20]
 8001e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f08 <CAN_interrupt+0xc0>)
 8001e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e62:	f112 0814 	adds.w	r8, r2, #20
 8001e66:	f143 0900 	adc.w	r9, r3, #0
 8001e6a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e6e:	4611      	mov	r1, r2
 8001e70:	4541      	cmp	r1, r8
 8001e72:	eb73 0309 	sbcs.w	r3, r3, r9
 8001e76:	d319      	bcc.n	8001eac <CAN_interrupt+0x64>
	{

		AMS0_databytes[6] |= (precharge << 4);
 8001e78:	4b24      	ldr	r3, [pc, #144]	@ (8001f0c <CAN_interrupt+0xc4>)
 8001e7a:	799b      	ldrb	r3, [r3, #6]
 8001e7c:	b25a      	sxtb	r2, r3
 8001e7e:	4b24      	ldr	r3, [pc, #144]	@ (8001f10 <CAN_interrupt+0xc8>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	b25b      	sxtb	r3, r3
 8001e86:	4313      	orrs	r3, r2
 8001e88:	b25b      	sxtb	r3, r3
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f0c <CAN_interrupt+0xc4>)
 8001e8e:	719a      	strb	r2, [r3, #6]

		CAN_50(AMS0_databytes);
 8001e90:	481e      	ldr	r0, [pc, #120]	@ (8001f0c <CAN_interrupt+0xc4>)
 8001e92:	f000 fa13 	bl	80022bc <CAN_50>
		last20 = HAL_GetTick();
 8001e96:	f001 f87f 	bl	8002f98 <HAL_GetTick>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	60fa      	str	r2, [r7, #12]
 8001ea2:	4b19      	ldr	r3, [pc, #100]	@ (8001f08 <CAN_interrupt+0xc0>)
 8001ea4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001ea8:	e9c3 1200 	strd	r1, r2, [r3]

	}
	if (HAL_GetTick()>= last100 + 100)
 8001eac:	f001 f874 	bl	8002f98 <HAL_GetTick>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	469a      	mov	sl, r3
 8001eb6:	4693      	mov	fp, r2
 8001eb8:	4b16      	ldr	r3, [pc, #88]	@ (8001f14 <CAN_interrupt+0xcc>)
 8001eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebe:	f112 0464 	adds.w	r4, r2, #100	@ 0x64
 8001ec2:	f143 0500 	adc.w	r5, r3, #0
 8001ec6:	45a2      	cmp	sl, r4
 8001ec8:	eb7b 0305 	sbcs.w	r3, fp, r5
 8001ecc:	d316      	bcc.n	8001efc <CAN_interrupt+0xb4>
	{
		CAN_10(AMS1_databytes);
 8001ece:	4812      	ldr	r0, [pc, #72]	@ (8001f18 <CAN_interrupt+0xd0>)
 8001ed0:	f000 fa38 	bl	8002344 <CAN_10>

		HAL_GPIO_TogglePin(GPIOA, WDI_Pin);		// toggle watchdog
 8001ed4:	2110      	movs	r1, #16
 8001ed6:	4811      	ldr	r0, [pc, #68]	@ (8001f1c <CAN_interrupt+0xd4>)
 8001ed8:	f002 fd9b 	bl	8004a12 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, LED_GN_Pin);	// toggle LED
 8001edc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ee0:	480f      	ldr	r0, [pc, #60]	@ (8001f20 <CAN_interrupt+0xd8>)
 8001ee2:	f002 fd96 	bl	8004a12 <HAL_GPIO_TogglePin>
		last100 = HAL_GetTick();
 8001ee6:	f001 f857 	bl	8002f98 <HAL_GetTick>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2200      	movs	r2, #0
 8001eee:	603b      	str	r3, [r7, #0]
 8001ef0:	607a      	str	r2, [r7, #4]
 8001ef2:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <CAN_interrupt+0xcc>)
 8001ef4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001ef8:	e9c3 1200 	strd	r1, r2, [r3]
	}
}
 8001efc:	bf00      	nop
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f06:	bf00      	nop
 8001f08:	200004e0 	.word	0x200004e0
 8001f0c:	200004cc 	.word	0x200004cc
 8001f10:	2000044f 	.word	0x2000044f
 8001f14:	200004e8 	.word	0x200004e8
 8001f18:	200004d4 	.word	0x200004d4
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	40020800 	.word	0x40020800

08001f24 <convertTemperature>:


void convertTemperature(uint8_t selTemp)		// sort temp
{
 8001f24:	b5b0      	push	{r4, r5, r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]

	uint8_t indexOffset[12] = {9, 4, 11, 7, 6, 1, 0, 3, 10, 2, 5, 8};
 8001f2e:	4a5f      	ldr	r2, [pc, #380]	@ (80020ac <convertTemperature+0x188>)
 8001f30:	f107 0308 	add.w	r3, r7, #8
 8001f34:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	77fb      	strb	r3, [r7, #31]
 8001f3e:	e037      	b.n	8001fb0 <convertTemperature+0x8c>
	{
			for(uint8_t j = 0; j < 3; j++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	77bb      	strb	r3, [r7, #30]
 8001f44:	e02e      	b.n	8001fa4 <convertTemperature+0x80>
			{
				temperature[k * NUM_CELLS_STACK + indexOffset[j + selTemp * 3]] = calculateTemperature(slaveGPIOs[j + k * 6], slaveGPIOs[5 + k * NUM_GPIO_STACK]);
 8001f46:	7fb9      	ldrb	r1, [r7, #30]
 8001f48:	7ffa      	ldrb	r2, [r7, #31]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	440b      	add	r3, r1
 8001f54:	4a56      	ldr	r2, [pc, #344]	@ (80020b0 <convertTemperature+0x18c>)
 8001f56:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8001f5a:	7ffa      	ldrb	r2, [r7, #31]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	3305      	adds	r3, #5
 8001f66:	4a52      	ldr	r2, [pc, #328]	@ (80020b0 <convertTemperature+0x18c>)
 8001f68:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8001f6c:	7ffa      	ldrb	r2, [r7, #31]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	461c      	mov	r4, r3
 8001f78:	7fb9      	ldrb	r1, [r7, #30]
 8001f7a:	79fa      	ldrb	r2, [r7, #7]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	4413      	add	r3, r2
 8001f82:	440b      	add	r3, r1
 8001f84:	3320      	adds	r3, #32
 8001f86:	443b      	add	r3, r7
 8001f88:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001f8c:	441c      	add	r4, r3
 8001f8e:	4629      	mov	r1, r5
 8001f90:	f7ff fef6 	bl	8001d80 <calculateTemperature>
 8001f94:	4603      	mov	r3, r0
 8001f96:	461a      	mov	r2, r3
 8001f98:	4b46      	ldr	r3, [pc, #280]	@ (80020b4 <convertTemperature+0x190>)
 8001f9a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			for(uint8_t j = 0; j < 3; j++)
 8001f9e:	7fbb      	ldrb	r3, [r7, #30]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	77bb      	strb	r3, [r7, #30]
 8001fa4:	7fbb      	ldrb	r3, [r7, #30]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d9cd      	bls.n	8001f46 <convertTemperature+0x22>
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001faa:	7ffb      	ldrb	r3, [r7, #31]
 8001fac:	3301      	adds	r3, #1
 8001fae:	77fb      	strb	r3, [r7, #31]
 8001fb0:	7ffb      	ldrb	r3, [r7, #31]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0c4      	beq.n	8001f40 <convertTemperature+0x1c>
				}
			}
			*/
		//USB STUFF

	if(selTemp == 3)
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d172      	bne.n	80020a2 <convertTemperature+0x17e>
	{
		for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	777b      	strb	r3, [r7, #29]
 8001fc0:	e00f      	b.n	8001fe2 <convertTemperature+0xbe>
		{
			usb_temperatures[i] = temperature[i]/1000;
 8001fc2:	7f7b      	ldrb	r3, [r7, #29]
 8001fc4:	4a3b      	ldr	r2, [pc, #236]	@ (80020b4 <convertTemperature+0x190>)
 8001fc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fca:	4a3b      	ldr	r2, [pc, #236]	@ (80020b8 <convertTemperature+0x194>)
 8001fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd0:	099b      	lsrs	r3, r3, #6
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	7f7b      	ldrb	r3, [r7, #29]
 8001fd6:	b2d1      	uxtb	r1, r2
 8001fd8:	4a38      	ldr	r2, [pc, #224]	@ (80020bc <convertTemperature+0x198>)
 8001fda:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001fdc:	7f7b      	ldrb	r3, [r7, #29]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	777b      	strb	r3, [r7, #29]
 8001fe2:	7f7b      	ldrb	r3, [r7, #29]
 8001fe4:	2b0b      	cmp	r3, #11
 8001fe6:	d9ec      	bls.n	8001fc2 <convertTemperature+0x9e>
		}

		//CAN stuff


		uint16_t temp_min = temperature[0];
 8001fe8:	4b32      	ldr	r3, [pc, #200]	@ (80020b4 <convertTemperature+0x190>)
 8001fea:	881b      	ldrh	r3, [r3, #0]
 8001fec:	837b      	strh	r3, [r7, #26]
			uint16_t temp_max = temperature[0];
 8001fee:	4b31      	ldr	r3, [pc, #196]	@ (80020b4 <convertTemperature+0x190>)
 8001ff0:	881b      	ldrh	r3, [r3, #0]
 8001ff2:	833b      	strh	r3, [r7, #24]
		for(uint8_t k = 0; k < NUM_STACK; k++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	75fb      	strb	r3, [r7, #23]
 8001ff8:	e050      	b.n	800209c <convertTemperature+0x178>
			{
				for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	75bb      	strb	r3, [r7, #22]
 8001ffe:	e033      	b.n	8002068 <convertTemperature+0x144>
				{
					if(temperature[i + k * 12] > temp_max) temp_max = temperature[i + k * 12];
 8002000:	7db9      	ldrb	r1, [r7, #22]
 8002002:	7dfa      	ldrb	r2, [r7, #23]
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	4a29      	ldr	r2, [pc, #164]	@ (80020b4 <convertTemperature+0x190>)
 8002010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002014:	8b3a      	ldrh	r2, [r7, #24]
 8002016:	429a      	cmp	r2, r3
 8002018:	d20b      	bcs.n	8002032 <convertTemperature+0x10e>
 800201a:	7db9      	ldrb	r1, [r7, #22]
 800201c:	7dfa      	ldrb	r2, [r7, #23]
 800201e:	4613      	mov	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4413      	add	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	4a22      	ldr	r2, [pc, #136]	@ (80020b4 <convertTemperature+0x190>)
 800202a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800202e:	833b      	strh	r3, [r7, #24]
 8002030:	e017      	b.n	8002062 <convertTemperature+0x13e>
					else if(temperature[i + k * 12] < temp_min) temp_min = temperature[i + k * 12];
 8002032:	7db9      	ldrb	r1, [r7, #22]
 8002034:	7dfa      	ldrb	r2, [r7, #23]
 8002036:	4613      	mov	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	4a1c      	ldr	r2, [pc, #112]	@ (80020b4 <convertTemperature+0x190>)
 8002042:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002046:	8b7a      	ldrh	r2, [r7, #26]
 8002048:	429a      	cmp	r2, r3
 800204a:	d90a      	bls.n	8002062 <convertTemperature+0x13e>
 800204c:	7db9      	ldrb	r1, [r7, #22]
 800204e:	7dfa      	ldrb	r2, [r7, #23]
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	4a16      	ldr	r2, [pc, #88]	@ (80020b4 <convertTemperature+0x190>)
 800205c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002060:	837b      	strh	r3, [r7, #26]
				for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 8002062:	7dbb      	ldrb	r3, [r7, #22]
 8002064:	3301      	adds	r3, #1
 8002066:	75bb      	strb	r3, [r7, #22]
 8002068:	7dbb      	ldrb	r3, [r7, #22]
 800206a:	2b0b      	cmp	r3, #11
 800206c:	d9c8      	bls.n	8002000 <convertTemperature+0xdc>
				}

				AMS1_databytes[4] = temp_min;
 800206e:	8b7b      	ldrh	r3, [r7, #26]
 8002070:	b2da      	uxtb	r2, r3
 8002072:	4b13      	ldr	r3, [pc, #76]	@ (80020c0 <convertTemperature+0x19c>)
 8002074:	711a      	strb	r2, [r3, #4]
				AMS1_databytes[5] = (temp_min >> 8);
 8002076:	8b7b      	ldrh	r3, [r7, #26]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	b29b      	uxth	r3, r3
 800207c:	b2da      	uxtb	r2, r3
 800207e:	4b10      	ldr	r3, [pc, #64]	@ (80020c0 <convertTemperature+0x19c>)
 8002080:	715a      	strb	r2, [r3, #5]
				AMS1_databytes[6] = temp_max;
 8002082:	8b3b      	ldrh	r3, [r7, #24]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	4b0e      	ldr	r3, [pc, #56]	@ (80020c0 <convertTemperature+0x19c>)
 8002088:	719a      	strb	r2, [r3, #6]
				AMS1_databytes[7] = (temp_max >> 8);
 800208a:	8b3b      	ldrh	r3, [r7, #24]
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	b29b      	uxth	r3, r3
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <convertTemperature+0x19c>)
 8002094:	71da      	strb	r2, [r3, #7]
		for(uint8_t k = 0; k < NUM_STACK; k++)
 8002096:	7dfb      	ldrb	r3, [r7, #23]
 8002098:	3301      	adds	r3, #1
 800209a:	75fb      	strb	r3, [r7, #23]
 800209c:	7dfb      	ldrb	r3, [r7, #23]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0ab      	beq.n	8001ffa <convertTemperature+0xd6>
			}
	}
}
 80020a2:	bf00      	nop
 80020a4:	3720      	adds	r7, #32
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bdb0      	pop	{r4, r5, r7, pc}
 80020aa:	bf00      	nop
 80020ac:	0800df18 	.word	0x0800df18
 80020b0:	20000474 	.word	0x20000474
 80020b4:	20000480 	.word	0x20000480
 80020b8:	10624dd3 	.word	0x10624dd3
 80020bc:	200004c0 	.word	0x200004c0
 80020c0:	200004d4 	.word	0x200004d4

080020c4 <send_usb>:

void send_usb()
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
	usb_data[NUM_CELLS * 2] = 0xff;
 80020ca:	4b10      	ldr	r3, [pc, #64]	@ (800210c <send_usb+0x48>)
 80020cc:	22ff      	movs	r2, #255	@ 0xff
 80020ce:	761a      	strb	r2, [r3, #24]
	for(uint8_t i = 0; i < NUM_CELLS; i++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	71fb      	strb	r3, [r7, #7]
 80020d4:	e00f      	b.n	80020f6 <send_usb+0x32>
	{
		usb_data[i] = usb_voltages[i];
 80020d6:	79fa      	ldrb	r2, [r7, #7]
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	490d      	ldr	r1, [pc, #52]	@ (8002110 <send_usb+0x4c>)
 80020dc:	5c89      	ldrb	r1, [r1, r2]
 80020de:	4a0b      	ldr	r2, [pc, #44]	@ (800210c <send_usb+0x48>)
 80020e0:	54d1      	strb	r1, [r2, r3]
		usb_data[NUM_CELLS + i] = usb_temperatures[i];
 80020e2:	79fa      	ldrb	r2, [r7, #7]
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	330c      	adds	r3, #12
 80020e8:	490a      	ldr	r1, [pc, #40]	@ (8002114 <send_usb+0x50>)
 80020ea:	5c89      	ldrb	r1, [r1, r2]
 80020ec:	4a07      	ldr	r2, [pc, #28]	@ (800210c <send_usb+0x48>)
 80020ee:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < NUM_CELLS; i++)
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	3301      	adds	r3, #1
 80020f4:	71fb      	strb	r3, [r7, #7]
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	2b0b      	cmp	r3, #11
 80020fa:	d9ec      	bls.n	80020d6 <send_usb+0x12>

	}

	CDC_Transmit_FS(usb_data, NUM_CELLS * 2 + 1);
 80020fc:	2119      	movs	r1, #25
 80020fe:	4803      	ldr	r0, [pc, #12]	@ (800210c <send_usb+0x48>)
 8002100:	f008 fc3e 	bl	800a980 <CDC_Transmit_FS>
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000498 	.word	0x20000498
 8002110:	200004b4 	.word	0x200004b4
 8002114:	200004c0 	.word	0x200004c0

08002118 <CAN_TX>:
CAN_TxHeaderTypeDef test_header = {0x069, 0 , CAN_ID_STD, CAN_RTR_DATA, 8};


	// transmit CAN Message
void CAN_TX(CAN_HandleTypeDef hcan, CAN_TxHeaderTypeDef TxHeader, uint8_t* TxData)
{
 8002118:	b084      	sub	sp, #16
 800211a:	b5b0      	push	{r4, r5, r7, lr}
 800211c:	b090      	sub	sp, #64	@ 0x40
 800211e:	af0e      	add	r7, sp, #56	@ 0x38
 8002120:	f107 0418 	add.w	r4, r7, #24
 8002124:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t TxMailbox;
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800212e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002130:	f107 0018 	add.w	r0, r7, #24
 8002134:	f001 fd5a 	bl	8003bec <HAL_CAN_AddTxMessage>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d018      	beq.n	8002170 <CAN_TX+0x58>
	{
		CAN_TX(hcan, TxHeader, TxData);		//retry when failed
 800213e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002140:	930c      	str	r3, [sp, #48]	@ 0x30
 8002142:	ad06      	add	r5, sp, #24
 8002144:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8002148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800214a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800214c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002150:	e885 0003 	stmia.w	r5, {r0, r1}
 8002154:	466d      	mov	r5, sp
 8002156:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800215a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800215c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800215e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002162:	e885 0003 	stmia.w	r5, {r0, r1}
 8002166:	f107 0318 	add.w	r3, r7, #24
 800216a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800216c:	f7ff ffd4 	bl	8002118 <CAN_TX>
	}
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800217a:	b004      	add	sp, #16
 800217c:	4770      	bx	lr

0800217e <CAN_TX_IVT>:

void CAN_TX_IVT(CAN_HandleTypeDef hcan, CAN_TxHeaderTypeDef TxHeader, uint8_t* TxData)
{
 800217e:	b084      	sub	sp, #16
 8002180:	b5b0      	push	{r4, r5, r7, lr}
 8002182:	b090      	sub	sp, #64	@ 0x40
 8002184:	af0e      	add	r7, sp, #56	@ 0x38
 8002186:	f107 0418 	add.w	r4, r7, #24
 800218a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t TxMailbox2;
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox2) != HAL_OK)
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8002194:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002196:	f107 0018 	add.w	r0, r7, #24
 800219a:	f001 fd27 	bl	8003bec <HAL_CAN_AddTxMessage>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d018      	beq.n	80021d6 <CAN_TX_IVT+0x58>
	{
		CAN_TX_IVT(hcan, TxHeader, TxData);		//retry when failed
 80021a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80021a6:	930c      	str	r3, [sp, #48]	@ 0x30
 80021a8:	ad06      	add	r5, sp, #24
 80021aa:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80021ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80021ba:	466d      	mov	r5, sp
 80021bc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80021c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80021cc:	f107 0318 	add.w	r3, r7, #24
 80021d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021d2:	f7ff ffd4 	bl	800217e <CAN_TX_IVT>
	}
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80021e0:	b004      	add	sp, #16
 80021e2:	4770      	bx	lr

080021e4 <CAN_RX>:

	// receive CAN Message
void CAN_RX(CAN_HandleTypeDef hcan)
{
 80021e4:	b084      	sub	sp, #16
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b08a      	sub	sp, #40	@ 0x28
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	f107 0c30 	add.w	ip, r7, #48	@ 0x30
 80021f0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];


	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80021f4:	1d3b      	adds	r3, r7, #4
 80021f6:	f107 020c 	add.w	r2, r7, #12
 80021fa:	2100      	movs	r1, #0
 80021fc:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002200:	f001 fdc3 	bl	8003d8a <HAL_CAN_GetRxMessage>
	{

	}

	if( RxHeader.StdId == 0x500)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800220a:	d105      	bne.n	8002218 <CAN_RX+0x34>
		{
			ts_ready = 1;
		}

		*/
		AIR_Logic(RxData[0], RxData[1]);
 800220c:	793b      	ldrb	r3, [r7, #4]
 800220e:	797a      	ldrb	r2, [r7, #5]
 8002210:	4611      	mov	r1, r2
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fa24 	bl	8002660 <AIR_Logic>
		//AMS0_databytes[6]|= (ts_ready << 3);
	}

	// hier kann man weitere Nachrichten zum Empfangen hinzufügen

}
 8002218:	bf00      	nop
 800221a:	3728      	adds	r7, #40	@ 0x28
 800221c:	46bd      	mov	sp, r7
 800221e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002222:	b004      	add	sp, #16
 8002224:	4770      	bx	lr
	...

08002228 <CAN_RX_IVT>:

void CAN_RX_IVT(CAN_HandleTypeDef hcan)
{
 8002228:	b084      	sub	sp, #16
 800222a:	b580      	push	{r7, lr}
 800222c:	b08a      	sub	sp, #40	@ 0x28
 800222e:	af00      	add	r7, sp, #0
 8002230:	f107 0c30 	add.w	ip, r7, #48	@ 0x30
 8002234:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[6];

	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8002238:	1d3b      	adds	r3, r7, #4
 800223a:	f107 020c 	add.w	r2, r7, #12
 800223e:	2100      	movs	r1, #0
 8002240:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002244:	f001 fda1 	bl	8003d8a <HAL_CAN_GetRxMessage>
	{

	}
	current_data = 0;
 8002248:	4b18      	ldr	r3, [pc, #96]	@ (80022ac <CAN_RX_IVT+0x84>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]

	if(RxHeader.StdId == 0x521)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f240 5221 	movw	r2, #1313	@ 0x521
 8002254:	4293      	cmp	r3, r2
 8002256:	d122      	bne.n	800229e <CAN_RX_IVT+0x76>
		for(uint8_t i = 0; i < 5; i++)
		{
			current_data |= (RxData[5-i] << (i*8));
		}
*/
		current_data = RxData[5] | (RxData[4] << (1*8)) | (RxData[3] << (2*8)) | (RxData[2] << (3*8));
 8002258:	7a7b      	ldrb	r3, [r7, #9]
 800225a:	461a      	mov	r2, r3
 800225c:	7a3b      	ldrb	r3, [r7, #8]
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	431a      	orrs	r2, r3
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	041b      	lsls	r3, r3, #16
 8002266:	431a      	orrs	r2, r3
 8002268:	79bb      	ldrb	r3, [r7, #6]
 800226a:	061b      	lsls	r3, r3, #24
 800226c:	4313      	orrs	r3, r2
 800226e:	461a      	mov	r2, r3
 8002270:	4b0e      	ldr	r3, [pc, #56]	@ (80022ac <CAN_RX_IVT+0x84>)
 8002272:	601a      	str	r2, [r3, #0]

		current = current_data/100;
 8002274:	4b0d      	ldr	r3, [pc, #52]	@ (80022ac <CAN_RX_IVT+0x84>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0d      	ldr	r2, [pc, #52]	@ (80022b0 <CAN_RX_IVT+0x88>)
 800227a:	fba2 2303 	umull	r2, r3, r2, r3
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	b29a      	uxth	r2, r3
 8002282:	4b0c      	ldr	r3, [pc, #48]	@ (80022b4 <CAN_RX_IVT+0x8c>)
 8002284:	801a      	strh	r2, [r3, #0]

		AMS0_databytes[2] = current;
 8002286:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <CAN_RX_IVT+0x8c>)
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	b2da      	uxtb	r2, r3
 800228c:	4b0a      	ldr	r3, [pc, #40]	@ (80022b8 <CAN_RX_IVT+0x90>)
 800228e:	709a      	strb	r2, [r3, #2]
		AMS0_databytes[3] = (current>>8);
 8002290:	4b08      	ldr	r3, [pc, #32]	@ (80022b4 <CAN_RX_IVT+0x8c>)
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	b29b      	uxth	r3, r3
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4b07      	ldr	r3, [pc, #28]	@ (80022b8 <CAN_RX_IVT+0x90>)
 800229c:	70da      	strb	r2, [r3, #3]
	}


}
 800229e:	bf00      	nop
 80022a0:	3728      	adds	r7, #40	@ 0x28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022a8:	b004      	add	sp, #16
 80022aa:	4770      	bx	lr
 80022ac:	200004fc 	.word	0x200004fc
 80022b0:	51eb851f 	.word	0x51eb851f
 80022b4:	20000500 	.word	0x20000500
 80022b8:	200004cc 	.word	0x200004cc

080022bc <CAN_50>:

void CAN_50(uint8_t precharge_data[])		// CAN Messages transmitted with 50 Hz
{
 80022bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022be:	b091      	sub	sp, #68	@ 0x44
 80022c0:	af0e      	add	r7, sp, #56	@ 0x38
 80022c2:	6078      	str	r0, [r7, #4]

	CAN_TX(hcan1, AMS0_header, precharge_data);
 80022c4:	4e1a      	ldr	r6, [pc, #104]	@ (8002330 <CAN_50+0x74>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80022ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002334 <CAN_50+0x78>)
 80022cc:	ac06      	add	r4, sp, #24
 80022ce:	461d      	mov	r5, r3
 80022d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022d8:	e884 0003 	stmia.w	r4, {r0, r1}
 80022dc:	466d      	mov	r5, sp
 80022de:	f106 0410 	add.w	r4, r6, #16
 80022e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80022ee:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80022f2:	f7ff ff11 	bl	8002118 <CAN_TX>
	CAN_TX_IVT(hcan2,test_header, test);
 80022f6:	4e10      	ldr	r6, [pc, #64]	@ (8002338 <CAN_50+0x7c>)
 80022f8:	4b10      	ldr	r3, [pc, #64]	@ (800233c <CAN_50+0x80>)
 80022fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80022fc:	4b10      	ldr	r3, [pc, #64]	@ (8002340 <CAN_50+0x84>)
 80022fe:	ac06      	add	r4, sp, #24
 8002300:	461d      	mov	r5, r3
 8002302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002306:	e895 0003 	ldmia.w	r5, {r0, r1}
 800230a:	e884 0003 	stmia.w	r4, {r0, r1}
 800230e:	466d      	mov	r5, sp
 8002310:	f106 0410 	add.w	r4, r6, #16
 8002314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002318:	e894 0003 	ldmia.w	r4, {r0, r1}
 800231c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002320:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002324:	f7ff ff2b 	bl	800217e <CAN_TX_IVT>
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002330:	20000504 	.word	0x20000504
 8002334:	20000004 	.word	0x20000004
 8002338:	2000052c 	.word	0x2000052c
 800233c:	200004f4 	.word	0x200004f4
 8002340:	20000034 	.word	0x20000034

08002344 <CAN_10>:

void CAN_10(uint8_t bms_data[])		// CAN Messages transmitted with 10 Hz
{
 8002344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002346:	b091      	sub	sp, #68	@ 0x44
 8002348:	af0e      	add	r7, sp, #56	@ 0x38
 800234a:	6078      	str	r0, [r7, #4]
	CAN_TX(hcan1, AMS1_header, bms_data);
 800234c:	4e0e      	ldr	r6, [pc, #56]	@ (8002388 <CAN_10+0x44>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	930c      	str	r3, [sp, #48]	@ 0x30
 8002352:	4b0e      	ldr	r3, [pc, #56]	@ (800238c <CAN_10+0x48>)
 8002354:	ac06      	add	r4, sp, #24
 8002356:	461d      	mov	r5, r3
 8002358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800235a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800235c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002360:	e884 0003 	stmia.w	r4, {r0, r1}
 8002364:	466d      	mov	r5, sp
 8002366:	f106 0410 	add.w	r4, r6, #16
 800236a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800236c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800236e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002372:	e885 0003 	stmia.w	r5, {r0, r1}
 8002376:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800237a:	f7ff fecd 	bl	8002118 <CAN_TX>
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002386:	bf00      	nop
 8002388:	20000504 	.word	0x20000504
 800238c:	2000001c 	.word	0x2000001c

08002390 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	@ 0x28
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002396:	4b26      	ldr	r3, [pc, #152]	@ (8002430 <MX_CAN1_Init+0xa0>)
 8002398:	4a26      	ldr	r2, [pc, #152]	@ (8002434 <MX_CAN1_Init+0xa4>)
 800239a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800239c:	4b24      	ldr	r3, [pc, #144]	@ (8002430 <MX_CAN1_Init+0xa0>)
 800239e:	2204      	movs	r2, #4
 80023a0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80023a2:	4b23      	ldr	r3, [pc, #140]	@ (8002430 <MX_CAN1_Init+0xa0>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80023a8:	4b21      	ldr	r3, [pc, #132]	@ (8002430 <MX_CAN1_Init+0xa0>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 80023ae:	4b20      	ldr	r3, [pc, #128]	@ (8002430 <MX_CAN1_Init+0xa0>)
 80023b0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023b4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80023b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002430 <MX_CAN1_Init+0xa0>)
 80023b8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80023bc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80023be:	4b1c      	ldr	r3, [pc, #112]	@ (8002430 <MX_CAN1_Init+0xa0>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80023c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002430 <MX_CAN1_Init+0xa0>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80023ca:	4b19      	ldr	r3, [pc, #100]	@ (8002430 <MX_CAN1_Init+0xa0>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80023d0:	4b17      	ldr	r3, [pc, #92]	@ (8002430 <MX_CAN1_Init+0xa0>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80023d6:	4b16      	ldr	r3, [pc, #88]	@ (8002430 <MX_CAN1_Init+0xa0>)
 80023d8:	2200      	movs	r2, #0
 80023da:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80023dc:	4b14      	ldr	r3, [pc, #80]	@ (8002430 <MX_CAN1_Init+0xa0>)
 80023de:	2200      	movs	r2, #0
 80023e0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80023e2:	4813      	ldr	r0, [pc, #76]	@ (8002430 <MX_CAN1_Init+0xa0>)
 80023e4:	f001 f9e2 	bl	80037ac <HAL_CAN_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80023ee:	f000 faf8 	bl	80029e2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80023f2:	2301      	movs	r3, #1
 80023f4:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;  // which filter bank to use from the assigned ones
 80023f6:	2300      	movs	r3, #0
 80023f8:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x500<<5;
 80023fe:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8002402:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x7FF<<5;
 8002408:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800240c:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002412:	2300      	movs	r3, #0
 8002414:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002416:	2301      	movs	r3, #1
 8002418:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can)
 800241a:	230e      	movs	r3, #14
 800241c:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800241e:	463b      	mov	r3, r7
 8002420:	4619      	mov	r1, r3
 8002422:	4803      	ldr	r0, [pc, #12]	@ (8002430 <MX_CAN1_Init+0xa0>)
 8002424:	f001 fabe 	bl	80039a4 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8002428:	bf00      	nop
 800242a:	3728      	adds	r7, #40	@ 0x28
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000504 	.word	0x20000504
 8002434:	40006400 	.word	0x40006400

08002438 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b08a      	sub	sp, #40	@ 0x28
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800243e:	4b26      	ldr	r3, [pc, #152]	@ (80024d8 <MX_CAN2_Init+0xa0>)
 8002440:	4a26      	ldr	r2, [pc, #152]	@ (80024dc <MX_CAN2_Init+0xa4>)
 8002442:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 8;
 8002444:	4b24      	ldr	r3, [pc, #144]	@ (80024d8 <MX_CAN2_Init+0xa0>)
 8002446:	2208      	movs	r2, #8
 8002448:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800244a:	4b23      	ldr	r3, [pc, #140]	@ (80024d8 <MX_CAN2_Init+0xa0>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002450:	4b21      	ldr	r3, [pc, #132]	@ (80024d8 <MX_CAN2_Init+0xa0>)
 8002452:	2200      	movs	r2, #0
 8002454:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8002456:	4b20      	ldr	r3, [pc, #128]	@ (80024d8 <MX_CAN2_Init+0xa0>)
 8002458:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800245c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800245e:	4b1e      	ldr	r3, [pc, #120]	@ (80024d8 <MX_CAN2_Init+0xa0>)
 8002460:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002464:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002466:	4b1c      	ldr	r3, [pc, #112]	@ (80024d8 <MX_CAN2_Init+0xa0>)
 8002468:	2200      	movs	r2, #0
 800246a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800246c:	4b1a      	ldr	r3, [pc, #104]	@ (80024d8 <MX_CAN2_Init+0xa0>)
 800246e:	2200      	movs	r2, #0
 8002470:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002472:	4b19      	ldr	r3, [pc, #100]	@ (80024d8 <MX_CAN2_Init+0xa0>)
 8002474:	2200      	movs	r2, #0
 8002476:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002478:	4b17      	ldr	r3, [pc, #92]	@ (80024d8 <MX_CAN2_Init+0xa0>)
 800247a:	2200      	movs	r2, #0
 800247c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800247e:	4b16      	ldr	r3, [pc, #88]	@ (80024d8 <MX_CAN2_Init+0xa0>)
 8002480:	2200      	movs	r2, #0
 8002482:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002484:	4b14      	ldr	r3, [pc, #80]	@ (80024d8 <MX_CAN2_Init+0xa0>)
 8002486:	2200      	movs	r2, #0
 8002488:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800248a:	4813      	ldr	r0, [pc, #76]	@ (80024d8 <MX_CAN2_Init+0xa0>)
 800248c:	f001 f98e 	bl	80037ac <HAL_CAN_Init>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8002496:	f000 faa4 	bl	80029e2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  CAN_FilterTypeDef canfilterconfig_ivt;

  canfilterconfig_ivt.FilterActivation = CAN_FILTER_ENABLE;
 800249a:	2301      	movs	r3, #1
 800249c:	623b      	str	r3, [r7, #32]
  canfilterconfig_ivt.FilterBank = 14;  // which filter bank to use from the assigned ones
 800249e:	230e      	movs	r3, #14
 80024a0:	617b      	str	r3, [r7, #20]
  canfilterconfig_ivt.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
  canfilterconfig_ivt.FilterIdHigh = 0x521<<5;
 80024a6:	f24a 4320 	movw	r3, #42016	@ 0xa420
 80024aa:	603b      	str	r3, [r7, #0]
  canfilterconfig_ivt.FilterIdLow = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	607b      	str	r3, [r7, #4]
  canfilterconfig_ivt.FilterMaskIdHigh = 0x7FF<<5;
 80024b0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80024b4:	60bb      	str	r3, [r7, #8]
  canfilterconfig_ivt.FilterMaskIdLow = 0x0000;
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
  canfilterconfig_ivt.FilterMode = CAN_FILTERMODE_IDMASK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61bb      	str	r3, [r7, #24]
  canfilterconfig_ivt.FilterScale = CAN_FILTERSCALE_32BIT;
 80024be:	2301      	movs	r3, #1
 80024c0:	61fb      	str	r3, [r7, #28]
  canfilterconfig_ivt.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can)
 80024c2:	230e      	movs	r3, #14
 80024c4:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig_ivt);
 80024c6:	463b      	mov	r3, r7
 80024c8:	4619      	mov	r1, r3
 80024ca:	4803      	ldr	r0, [pc, #12]	@ (80024d8 <MX_CAN2_Init+0xa0>)
 80024cc:	f001 fa6a 	bl	80039a4 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN2_Init 2 */

}
 80024d0:	bf00      	nop
 80024d2:	3728      	adds	r7, #40	@ 0x28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	2000052c 	.word	0x2000052c
 80024dc:	40006800 	.word	0x40006800

080024e0 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08c      	sub	sp, #48	@ 0x30
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 031c 	add.w	r3, r7, #28
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a53      	ldr	r2, [pc, #332]	@ (800264c <HAL_CAN_MspInit+0x16c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d146      	bne.n	8002590 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002502:	4b53      	ldr	r3, [pc, #332]	@ (8002650 <HAL_CAN_MspInit+0x170>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	3301      	adds	r3, #1
 8002508:	4a51      	ldr	r2, [pc, #324]	@ (8002650 <HAL_CAN_MspInit+0x170>)
 800250a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800250c:	4b50      	ldr	r3, [pc, #320]	@ (8002650 <HAL_CAN_MspInit+0x170>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d10d      	bne.n	8002530 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002514:	2300      	movs	r3, #0
 8002516:	61bb      	str	r3, [r7, #24]
 8002518:	4b4e      	ldr	r3, [pc, #312]	@ (8002654 <HAL_CAN_MspInit+0x174>)
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	4a4d      	ldr	r2, [pc, #308]	@ (8002654 <HAL_CAN_MspInit+0x174>)
 800251e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002522:	6413      	str	r3, [r2, #64]	@ 0x40
 8002524:	4b4b      	ldr	r3, [pc, #300]	@ (8002654 <HAL_CAN_MspInit+0x174>)
 8002526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002528:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252c:	61bb      	str	r3, [r7, #24]
 800252e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	4b47      	ldr	r3, [pc, #284]	@ (8002654 <HAL_CAN_MspInit+0x174>)
 8002536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002538:	4a46      	ldr	r2, [pc, #280]	@ (8002654 <HAL_CAN_MspInit+0x174>)
 800253a:	f043 0302 	orr.w	r3, r3, #2
 800253e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002540:	4b44      	ldr	r3, [pc, #272]	@ (8002654 <HAL_CAN_MspInit+0x174>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800254c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255a:	2303      	movs	r3, #3
 800255c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800255e:	2309      	movs	r3, #9
 8002560:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002562:	f107 031c 	add.w	r3, r7, #28
 8002566:	4619      	mov	r1, r3
 8002568:	483b      	ldr	r0, [pc, #236]	@ (8002658 <HAL_CAN_MspInit+0x178>)
 800256a:	f002 f885 	bl	8004678 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800256e:	2200      	movs	r2, #0
 8002570:	2100      	movs	r1, #0
 8002572:	2013      	movs	r0, #19
 8002574:	f002 f849 	bl	800460a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002578:	2013      	movs	r0, #19
 800257a:	f002 f862 	bl	8004642 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800257e:	2200      	movs	r2, #0
 8002580:	2100      	movs	r1, #0
 8002582:	2014      	movs	r0, #20
 8002584:	f002 f841 	bl	800460a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002588:	2014      	movs	r0, #20
 800258a:	f002 f85a 	bl	8004642 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800258e:	e058      	b.n	8002642 <HAL_CAN_MspInit+0x162>
  else if(canHandle->Instance==CAN2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a31      	ldr	r2, [pc, #196]	@ (800265c <HAL_CAN_MspInit+0x17c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d153      	bne.n	8002642 <HAL_CAN_MspInit+0x162>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	4b2d      	ldr	r3, [pc, #180]	@ (8002654 <HAL_CAN_MspInit+0x174>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	4a2c      	ldr	r2, [pc, #176]	@ (8002654 <HAL_CAN_MspInit+0x174>)
 80025a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80025aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002654 <HAL_CAN_MspInit+0x174>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025b2:	613b      	str	r3, [r7, #16]
 80025b4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80025b6:	4b26      	ldr	r3, [pc, #152]	@ (8002650 <HAL_CAN_MspInit+0x170>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3301      	adds	r3, #1
 80025bc:	4a24      	ldr	r2, [pc, #144]	@ (8002650 <HAL_CAN_MspInit+0x170>)
 80025be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80025c0:	4b23      	ldr	r3, [pc, #140]	@ (8002650 <HAL_CAN_MspInit+0x170>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d10d      	bne.n	80025e4 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	4b21      	ldr	r3, [pc, #132]	@ (8002654 <HAL_CAN_MspInit+0x174>)
 80025ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d0:	4a20      	ldr	r2, [pc, #128]	@ (8002654 <HAL_CAN_MspInit+0x174>)
 80025d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80025d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002654 <HAL_CAN_MspInit+0x174>)
 80025da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e4:	2300      	movs	r3, #0
 80025e6:	60bb      	str	r3, [r7, #8]
 80025e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002654 <HAL_CAN_MspInit+0x174>)
 80025ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ec:	4a19      	ldr	r2, [pc, #100]	@ (8002654 <HAL_CAN_MspInit+0x174>)
 80025ee:	f043 0302 	orr.w	r3, r3, #2
 80025f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80025f4:	4b17      	ldr	r3, [pc, #92]	@ (8002654 <HAL_CAN_MspInit+0x174>)
 80025f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002600:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260e:	2303      	movs	r3, #3
 8002610:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002612:	2309      	movs	r3, #9
 8002614:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002616:	f107 031c 	add.w	r3, r7, #28
 800261a:	4619      	mov	r1, r3
 800261c:	480e      	ldr	r0, [pc, #56]	@ (8002658 <HAL_CAN_MspInit+0x178>)
 800261e:	f002 f82b 	bl	8004678 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 0, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	2100      	movs	r1, #0
 8002626:	203f      	movs	r0, #63	@ 0x3f
 8002628:	f001 ffef 	bl	800460a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800262c:	203f      	movs	r0, #63	@ 0x3f
 800262e:	f002 f808 	bl	8004642 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8002632:	2200      	movs	r2, #0
 8002634:	2100      	movs	r1, #0
 8002636:	2040      	movs	r0, #64	@ 0x40
 8002638:	f001 ffe7 	bl	800460a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800263c:	2040      	movs	r0, #64	@ 0x40
 800263e:	f002 f800 	bl	8004642 <HAL_NVIC_EnableIRQ>
}
 8002642:	bf00      	nop
 8002644:	3730      	adds	r7, #48	@ 0x30
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40006400 	.word	0x40006400
 8002650:	20000554 	.word	0x20000554
 8002654:	40023800 	.word	0x40023800
 8002658:	40020400 	.word	0x40020400
 800265c:	40006800 	.word	0x40006800

08002660 <AIR_Logic>:
	// returns 0 if open
	return HAL_GPIO_ReadPin(GPIOC, AIR_N_INT_Pin);
}

uint8_t AIR_Logic(uint8_t ts_on, uint8_t ts_start)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	460a      	mov	r2, r1
 800266a:	71fb      	strb	r3, [r7, #7]
 800266c:	4613      	mov	r3, r2
 800266e:	71bb      	strb	r3, [r7, #6]

	// 1 if high and 0 if low
	// high = switched

	AIR_N_init = HAL_GPIO_ReadPin(GPIOC, AIR_N_INT_Pin);
 8002670:	2180      	movs	r1, #128	@ 0x80
 8002672:	4826      	ldr	r0, [pc, #152]	@ (800270c <AIR_Logic+0xac>)
 8002674:	f002 f99e 	bl	80049b4 <HAL_GPIO_ReadPin>
 8002678:	4603      	mov	r3, r0
 800267a:	461a      	mov	r2, r3
 800267c:	4b24      	ldr	r3, [pc, #144]	@ (8002710 <AIR_Logic+0xb0>)
 800267e:	701a      	strb	r2, [r3, #0]
	AIR_N_act = HAL_GPIO_ReadPin(GPIOC, AIR_N_ACT_Pin);
 8002680:	2140      	movs	r1, #64	@ 0x40
 8002682:	4822      	ldr	r0, [pc, #136]	@ (800270c <AIR_Logic+0xac>)
 8002684:	f002 f996 	bl	80049b4 <HAL_GPIO_ReadPin>
 8002688:	4603      	mov	r3, r0
 800268a:	461a      	mov	r2, r3
 800268c:	4b21      	ldr	r3, [pc, #132]	@ (8002714 <AIR_Logic+0xb4>)
 800268e:	701a      	strb	r2, [r3, #0]

	AIR_P_init = HAL_GPIO_ReadPin(GPIOB, AIR_P_INT_Pin);
 8002690:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002694:	4820      	ldr	r0, [pc, #128]	@ (8002718 <AIR_Logic+0xb8>)
 8002696:	f002 f98d 	bl	80049b4 <HAL_GPIO_ReadPin>
 800269a:	4603      	mov	r3, r0
 800269c:	461a      	mov	r2, r3
 800269e:	4b1f      	ldr	r3, [pc, #124]	@ (800271c <AIR_Logic+0xbc>)
 80026a0:	701a      	strb	r2, [r3, #0]
	AIR_P_act = HAL_GPIO_ReadPin(GPIOB, AIR_P_ACT_Pin);
 80026a2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80026a6:	481c      	ldr	r0, [pc, #112]	@ (8002718 <AIR_Logic+0xb8>)
 80026a8:	f002 f984 	bl	80049b4 <HAL_GPIO_ReadPin>
 80026ac:	4603      	mov	r3, r0
 80026ae:	461a      	mov	r2, r3
 80026b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002720 <AIR_Logic+0xc0>)
 80026b2:	701a      	strb	r2, [r3, #0]


	//if(ts_start > 0 && ts_on == 0) ts_start = 0;

		 if (ts_on > 0)
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00e      	beq.n	80026d8 <AIR_Logic+0x78>
		 {

			 HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_SET);
 80026ba:	2201      	movs	r2, #1
 80026bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80026c0:	4815      	ldr	r0, [pc, #84]	@ (8002718 <AIR_Logic+0xb8>)
 80026c2:	f002 f98e 	bl	80049e2 <HAL_GPIO_WritePin>
			 ts_ready = 1;
 80026c6:	4b17      	ldr	r3, [pc, #92]	@ (8002724 <AIR_Logic+0xc4>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	701a      	strb	r2, [r3, #0]
			 HAL_GPIO_WritePin(GPIOC, LED_YW_Pin, GPIO_PIN_RESET);
 80026cc:	2200      	movs	r2, #0
 80026ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80026d2:	480e      	ldr	r0, [pc, #56]	@ (800270c <AIR_Logic+0xac>)
 80026d4:	f002 f985 	bl	80049e2 <HAL_GPIO_WritePin>
		 }

		 if (ts_ready > 0 && ts_start > 0)
 80026d8:	4b12      	ldr	r3, [pc, #72]	@ (8002724 <AIR_Logic+0xc4>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00e      	beq.n	80026fe <AIR_Logic+0x9e>
 80026e0:	79bb      	ldrb	r3, [r7, #6]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <AIR_Logic+0x9e>
		 {
			 HAL_GPIO_WritePin(GPIOC, AIR_P_SW_Pin, GPIO_PIN_SET);
 80026e6:	2201      	movs	r2, #1
 80026e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026ec:	4807      	ldr	r0, [pc, #28]	@ (800270c <AIR_Logic+0xac>)
 80026ee:	f002 f978 	bl	80049e2 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin(GPIOC, LED_RD_Pin, GPIO_PIN_RESET);
 80026f2:	2200      	movs	r2, #0
 80026f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026f8:	4804      	ldr	r0, [pc, #16]	@ (800270c <AIR_Logic+0xac>)
 80026fa:	f002 f972 	bl	80049e2 <HAL_GPIO_WritePin>
		 }


	 return ts_ready;
 80026fe:	4b09      	ldr	r3, [pc, #36]	@ (8002724 <AIR_Logic+0xc4>)
 8002700:	781b      	ldrb	r3, [r3, #0]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40020800 	.word	0x40020800
 8002710:	20000559 	.word	0x20000559
 8002714:	20000558 	.word	0x20000558
 8002718:	40020400 	.word	0x40020400
 800271c:	2000055b 	.word	0x2000055b
 8002720:	2000055a 	.word	0x2000055a
 8002724:	2000055c 	.word	0x2000055c

08002728 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	@ 0x28
 800272c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272e:	f107 0314 	add.w	r3, r7, #20
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	605a      	str	r2, [r3, #4]
 8002738:	609a      	str	r2, [r3, #8]
 800273a:	60da      	str	r2, [r3, #12]
 800273c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	4b61      	ldr	r3, [pc, #388]	@ (80028c8 <MX_GPIO_Init+0x1a0>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	4a60      	ldr	r2, [pc, #384]	@ (80028c8 <MX_GPIO_Init+0x1a0>)
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	6313      	str	r3, [r2, #48]	@ 0x30
 800274e:	4b5e      	ldr	r3, [pc, #376]	@ (80028c8 <MX_GPIO_Init+0x1a0>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	613b      	str	r3, [r7, #16]
 8002758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	4b5a      	ldr	r3, [pc, #360]	@ (80028c8 <MX_GPIO_Init+0x1a0>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002762:	4a59      	ldr	r2, [pc, #356]	@ (80028c8 <MX_GPIO_Init+0x1a0>)
 8002764:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002768:	6313      	str	r3, [r2, #48]	@ 0x30
 800276a:	4b57      	ldr	r3, [pc, #348]	@ (80028c8 <MX_GPIO_Init+0x1a0>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	4b53      	ldr	r3, [pc, #332]	@ (80028c8 <MX_GPIO_Init+0x1a0>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	4a52      	ldr	r2, [pc, #328]	@ (80028c8 <MX_GPIO_Init+0x1a0>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6313      	str	r3, [r2, #48]	@ 0x30
 8002786:	4b50      	ldr	r3, [pc, #320]	@ (80028c8 <MX_GPIO_Init+0x1a0>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	607b      	str	r3, [r7, #4]
 8002796:	4b4c      	ldr	r3, [pc, #304]	@ (80028c8 <MX_GPIO_Init+0x1a0>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	4a4b      	ldr	r2, [pc, #300]	@ (80028c8 <MX_GPIO_Init+0x1a0>)
 800279c:	f043 0302 	orr.w	r3, r3, #2
 80027a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027a2:	4b49      	ldr	r3, [pc, #292]	@ (80028c8 <MX_GPIO_Init+0x1a0>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	607b      	str	r3, [r7, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	603b      	str	r3, [r7, #0]
 80027b2:	4b45      	ldr	r3, [pc, #276]	@ (80028c8 <MX_GPIO_Init+0x1a0>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	4a44      	ldr	r2, [pc, #272]	@ (80028c8 <MX_GPIO_Init+0x1a0>)
 80027b8:	f043 0308 	orr.w	r3, r3, #8
 80027bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027be:	4b42      	ldr	r3, [pc, #264]	@ (80028c8 <MX_GPIO_Init+0x1a0>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	603b      	str	r3, [r7, #0]
 80027c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  //HAL_GPIO_WritePin(GPIOC, LED_GN_Pin|LED_YW_Pin|LED_RD_Pin|AIR_P_SW_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOC, LED_GN_Pin|LED_YW_Pin|LED_RD_Pin, GPIO_PIN_SET);
 80027ca:	2201      	movs	r2, #1
 80027cc:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80027d0:	483e      	ldr	r0, [pc, #248]	@ (80028cc <MX_GPIO_Init+0x1a4>)
 80027d2:	f002 f906 	bl	80049e2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, AIR_P_SW_Pin, GPIO_PIN_RESET);
 80027d6:	2200      	movs	r2, #0
 80027d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80027dc:	483b      	ldr	r0, [pc, #236]	@ (80028cc <MX_GPIO_Init+0x1a4>)
 80027de:	f002 f900 	bl	80049e2 <HAL_GPIO_WritePin>



  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WDI_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 80027e2:	2200      	movs	r2, #0
 80027e4:	f248 0110 	movw	r1, #32784	@ 0x8010
 80027e8:	4839      	ldr	r0, [pc, #228]	@ (80028d0 <MX_GPIO_Init+0x1a8>)
 80027ea:	f002 f8fa 	bl	80049e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SC_OPEN_GPIO_Port, SC_OPEN_Pin, GPIO_PIN_SET);
 80027ee:	2201      	movs	r2, #1
 80027f0:	2180      	movs	r1, #128	@ 0x80
 80027f2:	4837      	ldr	r0, [pc, #220]	@ (80028d0 <MX_GPIO_Init+0x1a8>)
 80027f4:	f002 f8f5 	bl	80049e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_RESET);
 80027f8:	2200      	movs	r2, #0
 80027fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80027fe:	4835      	ldr	r0, [pc, #212]	@ (80028d4 <MX_GPIO_Init+0x1ac>)
 8002800:	f002 f8ef 	bl	80049e2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_GN_Pin|LED_YW_Pin|LED_RD_Pin|AIR_P_SW_Pin;
 8002804:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8002808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800280a:	2301      	movs	r3, #1
 800280c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002812:	2300      	movs	r3, #0
 8002814:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002816:	f107 0314 	add.w	r3, r7, #20
 800281a:	4619      	mov	r1, r3
 800281c:	482b      	ldr	r0, [pc, #172]	@ (80028cc <MX_GPIO_Init+0x1a4>)
 800281e:	f001 ff2b 	bl	8004678 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_STATE_Pin|IMD_SAFE_Pin|SC_OPENING_Pin;
 8002822:	2368      	movs	r3, #104	@ 0x68
 8002824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002826:	2300      	movs	r3, #0
 8002828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	2300      	movs	r3, #0
 800282c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4619      	mov	r1, r3
 8002834:	4826      	ldr	r0, [pc, #152]	@ (80028d0 <MX_GPIO_Init+0x1a8>)
 8002836:	f001 ff1f 	bl	8004678 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WDI_Pin|SC_OPEN_Pin|SPI3_CS_Pin;
 800283a:	f248 0390 	movw	r3, #32912	@ 0x8090
 800283e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002840:	2301      	movs	r3, #1
 8002842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002848:	2300      	movs	r3, #0
 800284a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	4619      	mov	r1, r3
 8002852:	481f      	ldr	r0, [pc, #124]	@ (80028d0 <MX_GPIO_Init+0x1a8>)
 8002854:	f001 ff10 	bl	8004678 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SC_CLOSING_Pin|SC_STATE_Pin|AIR_N_ACT_Pin|AIR_N_INT_Pin;
 8002858:	23f0      	movs	r3, #240	@ 0xf0
 800285a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	4619      	mov	r1, r3
 800286a:	4818      	ldr	r0, [pc, #96]	@ (80028cc <MX_GPIO_Init+0x1a4>)
 800286c:	f001 ff04 	bl	8004678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_ACTIVATE_Pin;
 8002870:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002876:	2301      	movs	r3, #1
 8002878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287e:	2300      	movs	r3, #0
 8002880:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TS_ACTIVATE_GPIO_Port, &GPIO_InitStruct);
 8002882:	f107 0314 	add.w	r3, r7, #20
 8002886:	4619      	mov	r1, r3
 8002888:	4812      	ldr	r0, [pc, #72]	@ (80028d4 <MX_GPIO_Init+0x1ac>)
 800288a:	f001 fef5 	bl	8004678 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DANGER_V_Pin|AIR_P_ACT_Pin|AIR_P_INT_Pin;
 800288e:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 8002892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002894:	2300      	movs	r3, #0
 8002896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	4619      	mov	r1, r3
 80028a2:	480c      	ldr	r0, [pc, #48]	@ (80028d4 <MX_GPIO_Init+0x1ac>)
 80028a4:	f001 fee8 	bl	8004678 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PCHRG_ACT_Pin;
 80028a8:	2304      	movs	r3, #4
 80028aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PCHRG_ACT_GPIO_Port, &GPIO_InitStruct);
 80028b4:	f107 0314 	add.w	r3, r7, #20
 80028b8:	4619      	mov	r1, r3
 80028ba:	4807      	ldr	r0, [pc, #28]	@ (80028d8 <MX_GPIO_Init+0x1b0>)
 80028bc:	f001 fedc 	bl	8004678 <HAL_GPIO_Init>

}
 80028c0:	bf00      	nop
 80028c2:	3728      	adds	r7, #40	@ 0x28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40023800 	.word	0x40023800
 80028cc:	40020800 	.word	0x40020800
 80028d0:	40020000 	.word	0x40020000
 80028d4:	40020400 	.word	0x40020400
 80028d8:	40020c00 	.word	0x40020c00

080028dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028e0:	f000 faf6 	bl	8002ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028e4:	f000 f836 	bl	8002954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028e8:	f7ff ff1e 	bl	8002728 <MX_GPIO_Init>
  MX_SPI3_Init();
 80028ec:	f000 f880 	bl	80029f0 <MX_SPI3_Init>
  MX_TIM2_Init();
 80028f0:	f000 fa52 	bl	8002d98 <MX_TIM2_Init>
  MX_CAN1_Init();
 80028f4:	f7ff fd4c 	bl	8002390 <MX_CAN1_Init>
  MX_CAN2_Init();
 80028f8:	f7ff fd9e 	bl	8002438 <MX_CAN2_Init>
  MX_USB_DEVICE_Init();
 80028fc:	f007 ff82 	bl	800a804 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8002900:	f7fe fe88 	bl	8001614 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002904:	f7fe fed8 	bl	80016b8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  // Start timer
  HAL_TIM_Base_Start_IT(&htim2);
 8002908:	480f      	ldr	r0, [pc, #60]	@ (8002948 <main+0x6c>)
 800290a:	f004 fc9b 	bl	8007244 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan1);
 800290e:	480f      	ldr	r0, [pc, #60]	@ (800294c <main+0x70>)
 8002910:	f001 f928 	bl	8003b64 <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 8002914:	480e      	ldr	r0, [pc, #56]	@ (8002950 <main+0x74>)
 8002916:	f001 f925 	bl	8003b64 <HAL_CAN_Start>
  BMS_init();
 800291a:	f7ff f887 	bl	8001a2c <BMS_init>

    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800291e:	2102      	movs	r1, #2
 8002920:	480a      	ldr	r0, [pc, #40]	@ (800294c <main+0x70>)
 8002922:	f001 fb53 	bl	8003fcc <HAL_CAN_ActivateNotification>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <main+0x54>
    {
  	  Error_Handler();
 800292c:	f000 f859 	bl	80029e2 <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8002930:	2102      	movs	r1, #2
 8002932:	4807      	ldr	r0, [pc, #28]	@ (8002950 <main+0x74>)
 8002934:	f001 fb4a 	bl	8003fcc <HAL_CAN_ActivateNotification>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <main+0x66>
    {
  	  Error_Handler();
 800293e:	f000 f850 	bl	80029e2 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 BMS();
 8002942:	f7ff f879 	bl	8001a38 <BMS>
 8002946:	e7fc      	b.n	8002942 <main+0x66>
 8002948:	200005bc 	.word	0x200005bc
 800294c:	20000504 	.word	0x20000504
 8002950:	2000052c 	.word	0x2000052c

08002954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b092      	sub	sp, #72	@ 0x48
 8002958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800295a:	f107 0318 	add.w	r3, r7, #24
 800295e:	2230      	movs	r2, #48	@ 0x30
 8002960:	2100      	movs	r1, #0
 8002962:	4618      	mov	r0, r3
 8002964:	f009 fa6b 	bl	800be3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002968:	1d3b      	adds	r3, r7, #4
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	609a      	str	r2, [r3, #8]
 8002972:	60da      	str	r2, [r3, #12]
 8002974:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002976:	2302      	movs	r3, #2
 8002978:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800297a:	2301      	movs	r3, #1
 800297c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800297e:	2310      	movs	r3, #16
 8002980:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002982:	2302      	movs	r3, #2
 8002984:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002986:	2300      	movs	r3, #0
 8002988:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 800298a:	2308      	movs	r3, #8
 800298c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 800298e:	23c0      	movs	r3, #192	@ 0xc0
 8002990:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002992:	2304      	movs	r3, #4
 8002994:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002996:	2308      	movs	r3, #8
 8002998:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800299a:	f107 0318 	add.w	r3, r7, #24
 800299e:	4618      	mov	r0, r3
 80029a0:	f003 fa82 	bl	8005ea8 <HAL_RCC_OscConfig>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80029aa:	f000 f81a 	bl	80029e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029ae:	230f      	movs	r3, #15
 80029b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029b2:	2302      	movs	r3, #2
 80029b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029ba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80029be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80029c6:	1d3b      	adds	r3, r7, #4
 80029c8:	2103      	movs	r1, #3
 80029ca:	4618      	mov	r0, r3
 80029cc:	f003 fcc0 	bl	8006350 <HAL_RCC_ClockConfig>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <SystemClock_Config+0x86>
  {
    Error_Handler();
 80029d6:	f000 f804 	bl	80029e2 <Error_Handler>
  }
}
 80029da:	bf00      	nop
 80029dc:	3748      	adds	r7, #72	@ 0x48
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029e2:	b480      	push	{r7}
 80029e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029e6:	b672      	cpsid	i
}
 80029e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029ea:	bf00      	nop
 80029ec:	e7fd      	b.n	80029ea <Error_Handler+0x8>
	...

080029f0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80029f4:	4b17      	ldr	r3, [pc, #92]	@ (8002a54 <MX_SPI3_Init+0x64>)
 80029f6:	4a18      	ldr	r2, [pc, #96]	@ (8002a58 <MX_SPI3_Init+0x68>)
 80029f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80029fa:	4b16      	ldr	r3, [pc, #88]	@ (8002a54 <MX_SPI3_Init+0x64>)
 80029fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002a00:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002a02:	4b14      	ldr	r3, [pc, #80]	@ (8002a54 <MX_SPI3_Init+0x64>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a08:	4b12      	ldr	r3, [pc, #72]	@ (8002a54 <MX_SPI3_Init+0x64>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a0e:	4b11      	ldr	r3, [pc, #68]	@ (8002a54 <MX_SPI3_Init+0x64>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a14:	4b0f      	ldr	r3, [pc, #60]	@ (8002a54 <MX_SPI3_Init+0x64>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a54 <MX_SPI3_Init+0x64>)
 8002a1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a20:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002a22:	4b0c      	ldr	r3, [pc, #48]	@ (8002a54 <MX_SPI3_Init+0x64>)
 8002a24:	2220      	movs	r2, #32
 8002a26:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a28:	4b0a      	ldr	r3, [pc, #40]	@ (8002a54 <MX_SPI3_Init+0x64>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a2e:	4b09      	ldr	r3, [pc, #36]	@ (8002a54 <MX_SPI3_Init+0x64>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a34:	4b07      	ldr	r3, [pc, #28]	@ (8002a54 <MX_SPI3_Init+0x64>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002a3a:	4b06      	ldr	r3, [pc, #24]	@ (8002a54 <MX_SPI3_Init+0x64>)
 8002a3c:	220a      	movs	r2, #10
 8002a3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002a40:	4804      	ldr	r0, [pc, #16]	@ (8002a54 <MX_SPI3_Init+0x64>)
 8002a42:	f003 fe41 	bl	80066c8 <HAL_SPI_Init>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002a4c:	f7ff ffc9 	bl	80029e2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002a50:	bf00      	nop
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000560 	.word	0x20000560
 8002a58:	40003c00 	.word	0x40003c00

08002a5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08a      	sub	sp, #40	@ 0x28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a64:	f107 0314 	add.w	r3, r7, #20
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	60da      	str	r2, [r3, #12]
 8002a72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a19      	ldr	r2, [pc, #100]	@ (8002ae0 <HAL_SPI_MspInit+0x84>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d12c      	bne.n	8002ad8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	4b18      	ldr	r3, [pc, #96]	@ (8002ae4 <HAL_SPI_MspInit+0x88>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	4a17      	ldr	r2, [pc, #92]	@ (8002ae4 <HAL_SPI_MspInit+0x88>)
 8002a88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ae4 <HAL_SPI_MspInit+0x88>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a96:	613b      	str	r3, [r7, #16]
 8002a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <HAL_SPI_MspInit+0x88>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	4a10      	ldr	r2, [pc, #64]	@ (8002ae4 <HAL_SPI_MspInit+0x88>)
 8002aa4:	f043 0304 	orr.w	r3, r3, #4
 8002aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae4 <HAL_SPI_MspInit+0x88>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aae:	f003 0304 	and.w	r3, r3, #4
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002ab6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ac8:	2306      	movs	r3, #6
 8002aca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002acc:	f107 0314 	add.w	r3, r7, #20
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4805      	ldr	r0, [pc, #20]	@ (8002ae8 <HAL_SPI_MspInit+0x8c>)
 8002ad4:	f001 fdd0 	bl	8004678 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002ad8:	bf00      	nop
 8002ada:	3728      	adds	r7, #40	@ 0x28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40003c00 	.word	0x40003c00
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40020800 	.word	0x40020800

08002aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	607b      	str	r3, [r7, #4]
 8002af6:	4b0f      	ldr	r3, [pc, #60]	@ (8002b34 <HAL_MspInit+0x48>)
 8002af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afa:	4a0e      	ldr	r2, [pc, #56]	@ (8002b34 <HAL_MspInit+0x48>)
 8002afc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b02:	4b0c      	ldr	r3, [pc, #48]	@ (8002b34 <HAL_MspInit+0x48>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	603b      	str	r3, [r7, #0]
 8002b12:	4b08      	ldr	r3, [pc, #32]	@ (8002b34 <HAL_MspInit+0x48>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b16:	4a07      	ldr	r2, [pc, #28]	@ (8002b34 <HAL_MspInit+0x48>)
 8002b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b1e:	4b05      	ldr	r3, [pc, #20]	@ (8002b34 <HAL_MspInit+0x48>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr
 8002b34:	40023800 	.word	0x40023800

08002b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b3c:	bf00      	nop
 8002b3e:	e7fd      	b.n	8002b3c <NMI_Handler+0x4>

08002b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b44:	bf00      	nop
 8002b46:	e7fd      	b.n	8002b44 <HardFault_Handler+0x4>

08002b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b4c:	bf00      	nop
 8002b4e:	e7fd      	b.n	8002b4c <MemManage_Handler+0x4>

08002b50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b54:	bf00      	nop
 8002b56:	e7fd      	b.n	8002b54 <BusFault_Handler+0x4>

08002b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b5c:	bf00      	nop
 8002b5e:	e7fd      	b.n	8002b5c <UsageFault_Handler+0x4>

08002b60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b88:	f000 f9f4 	bl	8002f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b8c:	bf00      	nop
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002b94:	4802      	ldr	r0, [pc, #8]	@ (8002ba0 <CAN1_TX_IRQHandler+0x10>)
 8002b96:	f001 fa3e 	bl	8004016 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000504 	.word	0x20000504

08002ba4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002ba8:	4802      	ldr	r0, [pc, #8]	@ (8002bb4 <CAN1_RX0_IRQHandler+0x10>)
 8002baa:	f001 fa34 	bl	8004016 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000504 	.word	0x20000504

08002bb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002bbc:	4802      	ldr	r0, [pc, #8]	@ (8002bc8 <TIM2_IRQHandler+0x10>)
 8002bbe:	f004 fbaf 	bl	8007320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	200005bc 	.word	0x200005bc

08002bcc <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002bd0:	4802      	ldr	r0, [pc, #8]	@ (8002bdc <CAN2_TX_IRQHandler+0x10>)
 8002bd2:	f001 fa20 	bl	8004016 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	2000052c 	.word	0x2000052c

08002be0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002be4:	4802      	ldr	r0, [pc, #8]	@ (8002bf0 <CAN2_RX0_IRQHandler+0x10>)
 8002be6:	f001 fa16 	bl	8004016 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	2000052c 	.word	0x2000052c

08002bf4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002bf8:	4802      	ldr	r0, [pc, #8]	@ (8002c04 <OTG_FS_IRQHandler+0x10>)
 8002bfa:	f002 f862 	bl	8004cc2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	200012d0 	.word	0x200012d0

08002c08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return 1;
 8002c0c:	2301      	movs	r3, #1
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr

08002c16 <_kill>:

int _kill(int pid, int sig)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c20:	f009 f970 	bl	800bf04 <__errno>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2216      	movs	r2, #22
 8002c28:	601a      	str	r2, [r3, #0]
  return -1;
 8002c2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <_exit>:

void _exit (int status)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c3e:	f04f 31ff 	mov.w	r1, #4294967295
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff ffe7 	bl	8002c16 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c48:	bf00      	nop
 8002c4a:	e7fd      	b.n	8002c48 <_exit+0x12>

08002c4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	e00a      	b.n	8002c74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c5e:	f3af 8000 	nop.w
 8002c62:	4601      	mov	r1, r0
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	60ba      	str	r2, [r7, #8]
 8002c6a:	b2ca      	uxtb	r2, r1
 8002c6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	3301      	adds	r3, #1
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	dbf0      	blt.n	8002c5e <_read+0x12>
  }

  return len;
 8002c7c:	687b      	ldr	r3, [r7, #4]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b086      	sub	sp, #24
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	60b9      	str	r1, [r7, #8]
 8002c90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	e009      	b.n	8002cac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	60ba      	str	r2, [r7, #8]
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	697a      	ldr	r2, [r7, #20]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	dbf1      	blt.n	8002c98 <_write+0x12>
    //ITM_SendChar(*ptr++); //Diese Zeile kann gelöscht werden wenn kein printf über SWV mehr gewollt ist
  }
  return len;
 8002cb4:	687b      	ldr	r3, [r7, #4]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <_close>:

int _close(int file)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ce4:	605a      	str	r2, [r3, #4]
  return 0;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <_isatty>:

int _isatty(int file)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cfa:	2301      	movs	r3, #1
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr

08002d06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b085      	sub	sp, #20
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
	...

08002d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d28:	4a14      	ldr	r2, [pc, #80]	@ (8002d7c <_sbrk+0x5c>)
 8002d2a:	4b15      	ldr	r3, [pc, #84]	@ (8002d80 <_sbrk+0x60>)
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d34:	4b13      	ldr	r3, [pc, #76]	@ (8002d84 <_sbrk+0x64>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d3c:	4b11      	ldr	r3, [pc, #68]	@ (8002d84 <_sbrk+0x64>)
 8002d3e:	4a12      	ldr	r2, [pc, #72]	@ (8002d88 <_sbrk+0x68>)
 8002d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d42:	4b10      	ldr	r3, [pc, #64]	@ (8002d84 <_sbrk+0x64>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d207      	bcs.n	8002d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d50:	f009 f8d8 	bl	800bf04 <__errno>
 8002d54:	4603      	mov	r3, r0
 8002d56:	220c      	movs	r2, #12
 8002d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5e:	e009      	b.n	8002d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d60:	4b08      	ldr	r3, [pc, #32]	@ (8002d84 <_sbrk+0x64>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d66:	4b07      	ldr	r3, [pc, #28]	@ (8002d84 <_sbrk+0x64>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	4a05      	ldr	r2, [pc, #20]	@ (8002d84 <_sbrk+0x64>)
 8002d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d72:	68fb      	ldr	r3, [r7, #12]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	2000c000 	.word	0x2000c000
 8002d80:	00000400 	.word	0x00000400
 8002d84:	200005b8 	.word	0x200005b8
 8002d88:	20001920 	.word	0x20001920

08002d8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bc80      	pop	{r7}
 8002d96:	4770      	bx	lr

08002d98 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d9e:	f107 0308 	add.w	r3, r7, #8
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	609a      	str	r2, [r3, #8]
 8002daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dac:	463b      	mov	r3, r7
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002db4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e2c <MX_TIM2_Init+0x94>)
 8002db6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002dba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e2c <MX_TIM2_Init+0x94>)
 8002dbe:	222f      	movs	r2, #47	@ 0x2f
 8002dc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e2c <MX_TIM2_Init+0x94>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8002dc8:	4b18      	ldr	r3, [pc, #96]	@ (8002e2c <MX_TIM2_Init+0x94>)
 8002dca:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002dce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dd0:	4b16      	ldr	r3, [pc, #88]	@ (8002e2c <MX_TIM2_Init+0x94>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dd6:	4b15      	ldr	r3, [pc, #84]	@ (8002e2c <MX_TIM2_Init+0x94>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002ddc:	4813      	ldr	r0, [pc, #76]	@ (8002e2c <MX_TIM2_Init+0x94>)
 8002dde:	f004 f9e2 	bl	80071a6 <HAL_TIM_Base_Init>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002de8:	f7ff fdfb 	bl	80029e2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002df0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002df2:	f107 0308 	add.w	r3, r7, #8
 8002df6:	4619      	mov	r1, r3
 8002df8:	480c      	ldr	r0, [pc, #48]	@ (8002e2c <MX_TIM2_Init+0x94>)
 8002dfa:	f004 fb99 	bl	8007530 <HAL_TIM_ConfigClockSource>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002e04:	f7ff fded 	bl	80029e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e10:	463b      	mov	r3, r7
 8002e12:	4619      	mov	r1, r3
 8002e14:	4805      	ldr	r0, [pc, #20]	@ (8002e2c <MX_TIM2_Init+0x94>)
 8002e16:	f004 fdab 	bl	8007970 <HAL_TIMEx_MasterConfigSynchronization>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002e20:	f7ff fddf 	bl	80029e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e24:	bf00      	nop
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	200005bc 	.word	0x200005bc

08002e30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e40:	d115      	bne.n	8002e6e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	4b0c      	ldr	r3, [pc, #48]	@ (8002e78 <HAL_TIM_Base_MspInit+0x48>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	4a0b      	ldr	r2, [pc, #44]	@ (8002e78 <HAL_TIM_Base_MspInit+0x48>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e52:	4b09      	ldr	r3, [pc, #36]	@ (8002e78 <HAL_TIM_Base_MspInit+0x48>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2100      	movs	r1, #0
 8002e62:	201c      	movs	r0, #28
 8002e64:	f001 fbd1 	bl	800460a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e68:	201c      	movs	r0, #28
 8002e6a:	f001 fbea 	bl	8004642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	40023800 	.word	0x40023800

08002e7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002eb4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8002e80:	f7ff ff84 	bl	8002d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e84:	480c      	ldr	r0, [pc, #48]	@ (8002eb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e86:	490d      	ldr	r1, [pc, #52]	@ (8002ebc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e88:	4a0d      	ldr	r2, [pc, #52]	@ (8002ec0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e8c:	e002      	b.n	8002e94 <LoopCopyDataInit>

08002e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e92:	3304      	adds	r3, #4

08002e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e98:	d3f9      	bcc.n	8002e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e9c:	4c0a      	ldr	r4, [pc, #40]	@ (8002ec8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ea0:	e001      	b.n	8002ea6 <LoopFillZerobss>

08002ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ea4:	3204      	adds	r2, #4

08002ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ea8:	d3fb      	bcc.n	8002ea2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002eaa:	f009 f831 	bl	800bf10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eae:	f7ff fd15 	bl	80028dc <main>
  bx  lr    
 8002eb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002eb4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002eb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ebc:	20000390 	.word	0x20000390
  ldr r2, =_sidata
 8002ec0:	0800e700 	.word	0x0800e700
  ldr r2, =_sbss
 8002ec4:	20000390 	.word	0x20000390
  ldr r4, =_ebss
 8002ec8:	20001920 	.word	0x20001920

08002ecc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ecc:	e7fe      	b.n	8002ecc <ADC_IRQHandler>
	...

08002ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8002f10 <HAL_Init+0x40>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f10 <HAL_Init+0x40>)
 8002eda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <HAL_Init+0x40>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a0a      	ldr	r2, [pc, #40]	@ (8002f10 <HAL_Init+0x40>)
 8002ee6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eec:	4b08      	ldr	r3, [pc, #32]	@ (8002f10 <HAL_Init+0x40>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a07      	ldr	r2, [pc, #28]	@ (8002f10 <HAL_Init+0x40>)
 8002ef2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ef8:	2003      	movs	r0, #3
 8002efa:	f001 fb7b 	bl	80045f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002efe:	200f      	movs	r0, #15
 8002f00:	f000 f808 	bl	8002f14 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002f04:	f7ff fdf2 	bl	8002aec <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023c00 	.word	0x40023c00

08002f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f1c:	4b12      	ldr	r3, [pc, #72]	@ (8002f68 <HAL_InitTick+0x54>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	4b12      	ldr	r3, [pc, #72]	@ (8002f6c <HAL_InitTick+0x58>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	4619      	mov	r1, r3
 8002f26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f32:	4618      	mov	r0, r3
 8002f34:	f001 fb93 	bl	800465e <HAL_SYSTICK_Config>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e00e      	b.n	8002f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b0f      	cmp	r3, #15
 8002f46:	d80a      	bhi.n	8002f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f48:	2200      	movs	r2, #0
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f50:	f001 fb5b 	bl	800460a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f54:	4a06      	ldr	r2, [pc, #24]	@ (8002f70 <HAL_InitTick+0x5c>)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e000      	b.n	8002f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	2000004c 	.word	0x2000004c
 8002f6c:	20000054 	.word	0x20000054
 8002f70:	20000050 	.word	0x20000050

08002f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f78:	4b05      	ldr	r3, [pc, #20]	@ (8002f90 <HAL_IncTick+0x1c>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b05      	ldr	r3, [pc, #20]	@ (8002f94 <HAL_IncTick+0x20>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4413      	add	r3, r2
 8002f84:	4a03      	ldr	r2, [pc, #12]	@ (8002f94 <HAL_IncTick+0x20>)
 8002f86:	6013      	str	r3, [r2, #0]
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	20000054 	.word	0x20000054
 8002f94:	20000604 	.word	0x20000604

08002f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f9c:	4b02      	ldr	r3, [pc, #8]	@ (8002fa8 <HAL_GetTick+0x10>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	20000604 	.word	0x20000604

08002fac <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fb4:	f7ff fff0 	bl	8002f98 <HAL_GetTick>
 8002fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc4:	d005      	beq.n	8002fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff0 <HAL_Delay+0x44>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4413      	add	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fd2:	bf00      	nop
 8002fd4:	f7ff ffe0 	bl	8002f98 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d8f7      	bhi.n	8002fd4 <HAL_Delay+0x28>
  {
  }
}
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000054 	.word	0x20000054

08002ff4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e033      	b.n	8003072 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fe fba2 	bl	800175c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	f003 0310 	and.w	r3, r3, #16
 800302e:	2b00      	cmp	r3, #0
 8003030:	d118      	bne.n	8003064 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800303a:	f023 0302 	bic.w	r3, r3, #2
 800303e:	f043 0202 	orr.w	r2, r3, #2
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 faaa 	bl	80035a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	f023 0303 	bic.w	r3, r3, #3
 800305a:	f043 0201 	orr.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	641a      	str	r2, [r3, #64]	@ 0x40
 8003062:	e001      	b.n	8003068 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003070:	7bfb      	ldrb	r3, [r7, #15]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800308e:	2b01      	cmp	r3, #1
 8003090:	d101      	bne.n	8003096 <HAL_ADC_Start+0x1a>
 8003092:	2302      	movs	r3, #2
 8003094:	e095      	b.n	80031c2 <HAL_ADC_Start+0x146>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d018      	beq.n	80030de <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030bc:	4b43      	ldr	r3, [pc, #268]	@ (80031cc <HAL_ADC_Start+0x150>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a43      	ldr	r2, [pc, #268]	@ (80031d0 <HAL_ADC_Start+0x154>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	0c9a      	lsrs	r2, r3, #18
 80030c8:	4613      	mov	r3, r2
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	4413      	add	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 80030d0:	e002      	b.n	80030d8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	3b01      	subs	r3, #1
 80030d6:	60fb      	str	r3, [r7, #12]
    while(counter != 0U)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f9      	bne.n	80030d2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d15d      	bne.n	80031a8 <HAL_ADC_Start+0x12c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800310a:	2b00      	cmp	r3, #0
 800310c:	d007      	beq.n	800311e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003112:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003116:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800312a:	d106      	bne.n	800313a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003130:	f023 0206 	bic.w	r2, r3, #6
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	645a      	str	r2, [r3, #68]	@ 0x44
 8003138:	e002      	b.n	8003140 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003150:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003152:	4b20      	ldr	r3, [pc, #128]	@ (80031d4 <HAL_ADC_Start+0x158>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f003 031f 	and.w	r3, r3, #31
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10f      	bne.n	800317e <HAL_ADC_Start+0x102>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d129      	bne.n	80031c0 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	e020      	b.n	80031c0 <HAL_ADC_Start+0x144>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a15      	ldr	r2, [pc, #84]	@ (80031d8 <HAL_ADC_Start+0x15c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d11b      	bne.n	80031c0 <HAL_ADC_Start+0x144>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d114      	bne.n	80031c0 <HAL_ADC_Start+0x144>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80031a4:	609a      	str	r2, [r3, #8]
 80031a6:	e00b      	b.n	80031c0 <HAL_ADC_Start+0x144>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ac:	f043 0210 	orr.w	r2, r3, #16
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b8:	f043 0201 	orr.w	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	2000004c 	.word	0x2000004c
 80031d0:	431bde83 	.word	0x431bde83
 80031d4:	40012300 	.word	0x40012300
 80031d8:	40012000 	.word	0x40012000

080031dc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_ADC_Stop+0x16>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e021      	b.n	8003236 <HAL_ADC_Stop+0x5a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0201 	bic.w	r2, r2, #1
 8003208:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d109      	bne.n	800322c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	f043 0201 	orr.w	r2, r3, #1
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325c:	d113      	bne.n	8003286 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003268:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800326c:	d10b      	bne.n	8003286 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003272:	f043 0220 	orr.w	r2, r3, #32
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e05c      	b.n	8003340 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003286:	f7ff fe87 	bl	8002f98 <HAL_GetTick>
 800328a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800328c:	e01a      	b.n	80032c4 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d016      	beq.n	80032c4 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d007      	beq.n	80032ac <HAL_ADC_PollForConversion+0x6c>
 800329c:	f7ff fe7c 	bl	8002f98 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d20b      	bcs.n	80032c4 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b0:	f043 0204 	orr.w	r2, r3, #4
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e03d      	b.n	8003340 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d1dd      	bne.n	800328e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f06f 0212 	mvn.w	r2, #18
 80032da:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F2, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d123      	bne.n	800333e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d11f      	bne.n	800333e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003304:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003308:	2b00      	cmp	r3, #0
 800330a:	d006      	beq.n	800331a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003316:	2b00      	cmp	r3, #0
 8003318:	d111      	bne.n	800333e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d105      	bne.n	800333e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	f043 0201 	orr.w	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr

08003360 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_ADC_ConfigChannel+0x1c>
 8003378:	2302      	movs	r3, #2
 800337a:	e103      	b.n	8003584 <HAL_ADC_ConfigChannel+0x224>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b09      	cmp	r3, #9
 800338a:	d925      	bls.n	80033d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68d9      	ldr	r1, [r3, #12]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	b29b      	uxth	r3, r3
 8003398:	461a      	mov	r2, r3
 800339a:	4613      	mov	r3, r2
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4413      	add	r3, r2
 80033a0:	3b1e      	subs	r3, #30
 80033a2:	2207      	movs	r2, #7
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43da      	mvns	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	400a      	ands	r2, r1
 80033b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68d9      	ldr	r1, [r3, #12]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	4618      	mov	r0, r3
 80033c4:	4603      	mov	r3, r0
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	4403      	add	r3, r0
 80033ca:	3b1e      	subs	r3, #30
 80033cc:	409a      	lsls	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	60da      	str	r2, [r3, #12]
 80033d6:	e022      	b.n	800341e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6919      	ldr	r1, [r3, #16]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	461a      	mov	r2, r3
 80033e6:	4613      	mov	r3, r2
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	4413      	add	r3, r2
 80033ec:	2207      	movs	r2, #7
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43da      	mvns	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	400a      	ands	r2, r1
 80033fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6919      	ldr	r1, [r3, #16]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	b29b      	uxth	r3, r3
 800340c:	4618      	mov	r0, r3
 800340e:	4603      	mov	r3, r0
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4403      	add	r3, r0
 8003414:	409a      	lsls	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b06      	cmp	r3, #6
 8003424:	d824      	bhi.n	8003470 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	3b05      	subs	r3, #5
 8003438:	221f      	movs	r2, #31
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43da      	mvns	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	400a      	ands	r2, r1
 8003446:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	b29b      	uxth	r3, r3
 8003454:	4618      	mov	r0, r3
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4413      	add	r3, r2
 8003460:	3b05      	subs	r3, #5
 8003462:	fa00 f203 	lsl.w	r2, r0, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	635a      	str	r2, [r3, #52]	@ 0x34
 800346e:	e04c      	b.n	800350a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b0c      	cmp	r3, #12
 8003476:	d824      	bhi.n	80034c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	3b23      	subs	r3, #35	@ 0x23
 800348a:	221f      	movs	r2, #31
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43da      	mvns	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	400a      	ands	r2, r1
 8003498:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	4618      	mov	r0, r3
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	3b23      	subs	r3, #35	@ 0x23
 80034b4:	fa00 f203 	lsl.w	r2, r0, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	631a      	str	r2, [r3, #48]	@ 0x30
 80034c0:	e023      	b.n	800350a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	3b41      	subs	r3, #65	@ 0x41
 80034d4:	221f      	movs	r2, #31
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43da      	mvns	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	400a      	ands	r2, r1
 80034e2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	4618      	mov	r0, r3
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	3b41      	subs	r3, #65	@ 0x41
 80034fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a20      	ldr	r2, [pc, #128]	@ (8003590 <HAL_ADC_ConfigChannel+0x230>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d109      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x1c8>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b12      	cmp	r3, #18
 800351a:	d105      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800351c:	4b1d      	ldr	r3, [pc, #116]	@ (8003594 <HAL_ADC_ConfigChannel+0x234>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4a1c      	ldr	r2, [pc, #112]	@ (8003594 <HAL_ADC_ConfigChannel+0x234>)
 8003522:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003526:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a18      	ldr	r2, [pc, #96]	@ (8003590 <HAL_ADC_ConfigChannel+0x230>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d123      	bne.n	800357a <HAL_ADC_ConfigChannel+0x21a>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b10      	cmp	r3, #16
 8003538:	d003      	beq.n	8003542 <HAL_ADC_ConfigChannel+0x1e2>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b11      	cmp	r3, #17
 8003540:	d11b      	bne.n	800357a <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003542:	4b14      	ldr	r3, [pc, #80]	@ (8003594 <HAL_ADC_ConfigChannel+0x234>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4a13      	ldr	r2, [pc, #76]	@ (8003594 <HAL_ADC_ConfigChannel+0x234>)
 8003548:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800354c:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2b10      	cmp	r3, #16
 8003554:	d111      	bne.n	800357a <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003556:	4b10      	ldr	r3, [pc, #64]	@ (8003598 <HAL_ADC_ConfigChannel+0x238>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a10      	ldr	r2, [pc, #64]	@ (800359c <HAL_ADC_ConfigChannel+0x23c>)
 800355c:	fba2 2303 	umull	r2, r3, r2, r3
 8003560:	0c9a      	lsrs	r2, r3, #18
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 800356c:	e002      	b.n	8003574 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	3b01      	subs	r3, #1
 8003572:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f9      	bne.n	800356e <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40012000 	.word	0x40012000
 8003594:	40012300 	.word	0x40012300
 8003598:	2000004c 	.word	0x2000004c
 800359c:	431bde83 	.word	0x431bde83

080035a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80035a8:	4b7e      	ldr	r3, [pc, #504]	@ (80037a4 <ADC_Init+0x204>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	4a7d      	ldr	r2, [pc, #500]	@ (80037a4 <ADC_Init+0x204>)
 80035ae:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80035b2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80035b4:	4b7b      	ldr	r3, [pc, #492]	@ (80037a4 <ADC_Init+0x204>)
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	4979      	ldr	r1, [pc, #484]	@ (80037a4 <ADC_Init+0x204>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685a      	ldr	r2, [r3, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6859      	ldr	r1, [r3, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	021a      	lsls	r2, r3, #8
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80035f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6859      	ldr	r1, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003616:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6899      	ldr	r1, [r3, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68da      	ldr	r2, [r3, #12]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362e:	4a5e      	ldr	r2, [pc, #376]	@ (80037a8 <ADC_Init+0x208>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d022      	beq.n	800367a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003642:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6899      	ldr	r1, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003664:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6899      	ldr	r1, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	e00f      	b.n	800369a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003688:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	689a      	ldr	r2, [r3, #8]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003698:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0202 	bic.w	r2, r2, #2
 80036a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6899      	ldr	r1, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	7e1b      	ldrb	r3, [r3, #24]
 80036b4:	005a      	lsls	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d027      	beq.n	8003718 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80036e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ec:	3b01      	subs	r3, #1
 80036ee:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80036f2:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	fa92 f2a2 	rbit	r2, r2
 80036fa:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036fc:	68ba      	ldr	r2, [r7, #8]
 80036fe:	fab2 f282 	clz	r2, r2
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	fa03 f102 	lsl.w	r1, r3, r2
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	430a      	orrs	r2, r1
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	e007      	b.n	8003728 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685a      	ldr	r2, [r3, #4]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003726:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003736:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	3b01      	subs	r3, #1
 8003744:	051a      	lsls	r2, r3, #20
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800375c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6899      	ldr	r1, [r3, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800376a:	025a      	lsls	r2, r3, #9
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003782:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6899      	ldr	r1, [r3, #8]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	029a      	lsls	r2, r3, #10
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	609a      	str	r2, [r3, #8]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	40012300 	.word	0x40012300
 80037a8:	0f000001 	.word	0x0f000001

080037ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e0ed      	b.n	800399a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d102      	bne.n	80037d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fe fe88 	bl	80024e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037e0:	f7ff fbda 	bl	8002f98 <HAL_GetTick>
 80037e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80037e6:	e012      	b.n	800380e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80037e8:	f7ff fbd6 	bl	8002f98 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b0a      	cmp	r3, #10
 80037f4:	d90b      	bls.n	800380e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2205      	movs	r2, #5
 8003806:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e0c5      	b.n	800399a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0e5      	beq.n	80037e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0202 	bic.w	r2, r2, #2
 800382a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800382c:	f7ff fbb4 	bl	8002f98 <HAL_GetTick>
 8003830:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003832:	e012      	b.n	800385a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003834:	f7ff fbb0 	bl	8002f98 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b0a      	cmp	r3, #10
 8003840:	d90b      	bls.n	800385a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003846:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2205      	movs	r2, #5
 8003852:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e09f      	b.n	800399a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1e5      	bne.n	8003834 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	7e1b      	ldrb	r3, [r3, #24]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d108      	bne.n	8003882 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	e007      	b.n	8003892 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003890:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	7e5b      	ldrb	r3, [r3, #25]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d108      	bne.n	80038ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	e007      	b.n	80038bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	7e9b      	ldrb	r3, [r3, #26]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d108      	bne.n	80038d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0220 	orr.w	r2, r2, #32
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	e007      	b.n	80038e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0220 	bic.w	r2, r2, #32
 80038e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	7edb      	ldrb	r3, [r3, #27]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d108      	bne.n	8003900 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0210 	bic.w	r2, r2, #16
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	e007      	b.n	8003910 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0210 	orr.w	r2, r2, #16
 800390e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	7f1b      	ldrb	r3, [r3, #28]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d108      	bne.n	800392a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0208 	orr.w	r2, r2, #8
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	e007      	b.n	800393a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0208 	bic.w	r2, r2, #8
 8003938:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	7f5b      	ldrb	r3, [r3, #29]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d108      	bne.n	8003954 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0204 	orr.w	r2, r2, #4
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	e007      	b.n	8003964 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0204 	bic.w	r2, r2, #4
 8003962:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	431a      	orrs	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	ea42 0103 	orr.w	r1, r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	1e5a      	subs	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80039bc:	7cfb      	ldrb	r3, [r7, #19]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d003      	beq.n	80039ca <HAL_CAN_ConfigFilter+0x26>
 80039c2:	7cfb      	ldrb	r3, [r7, #19]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	f040 80be 	bne.w	8003b46 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80039ca:	4b65      	ldr	r3, [pc, #404]	@ (8003b60 <HAL_CAN_ConfigFilter+0x1bc>)
 80039cc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80039d4:	f043 0201 	orr.w	r2, r3, #1
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80039e4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	431a      	orrs	r2, r3
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	401a      	ands	r2, r3
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d123      	bne.n	8003a74 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	43db      	mvns	r3, r3
 8003a36:	401a      	ands	r2, r3
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003a4e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	3248      	adds	r2, #72	@ 0x48
 8003a54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003a68:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003a6a:	6979      	ldr	r1, [r7, #20]
 8003a6c:	3348      	adds	r3, #72	@ 0x48
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	440b      	add	r3, r1
 8003a72:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d122      	bne.n	8003ac2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	431a      	orrs	r2, r3
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003a9c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	3248      	adds	r2, #72	@ 0x48
 8003aa2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ab6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ab8:	6979      	ldr	r1, [r7, #20]
 8003aba:	3348      	adds	r3, #72	@ 0x48
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	440b      	add	r3, r1
 8003ac0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d109      	bne.n	8003ade <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	401a      	ands	r2, r3
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003adc:	e007      	b.n	8003aee <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	43db      	mvns	r3, r3
 8003b00:	401a      	ands	r2, r3
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003b08:	e007      	b.n	8003b1a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d107      	bne.n	8003b32 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003b38:	f023 0201 	bic.w	r2, r3, #1
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	e006      	b.n	8003b54 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
  }
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bc80      	pop	{r7}
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40006400 	.word	0x40006400

08003b64 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d12e      	bne.n	8003bd6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0201 	bic.w	r2, r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b90:	f7ff fa02 	bl	8002f98 <HAL_GetTick>
 8003b94:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003b96:	e012      	b.n	8003bbe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003b98:	f7ff f9fe 	bl	8002f98 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b0a      	cmp	r3, #10
 8003ba4:	d90b      	bls.n	8003bbe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2205      	movs	r2, #5
 8003bb6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e012      	b.n	8003be4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e5      	bne.n	8003b98 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e006      	b.n	8003be4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bda:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
  }
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b089      	sub	sp, #36	@ 0x24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c00:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c0a:	7ffb      	ldrb	r3, [r7, #31]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d003      	beq.n	8003c18 <HAL_CAN_AddTxMessage+0x2c>
 8003c10:	7ffb      	ldrb	r3, [r7, #31]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	f040 80ad 	bne.w	8003d72 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10a      	bne.n	8003c38 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d105      	bne.n	8003c38 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 8095 	beq.w	8003d62 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	0e1b      	lsrs	r3, r3, #24
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003c42:	2201      	movs	r2, #1
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	409a      	lsls	r2, r3
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10d      	bne.n	8003c70 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003c5e:	68f9      	ldr	r1, [r7, #12]
 8003c60:	6809      	ldr	r1, [r1, #0]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	3318      	adds	r3, #24
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	440b      	add	r3, r1
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	e00f      	b.n	8003c90 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c7a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c80:	68f9      	ldr	r1, [r7, #12]
 8003c82:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003c84:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	3318      	adds	r3, #24
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	440b      	add	r3, r1
 8003c8e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6819      	ldr	r1, [r3, #0]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	3318      	adds	r3, #24
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	440b      	add	r3, r1
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	7d1b      	ldrb	r3, [r3, #20]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d111      	bne.n	8003cd0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	3318      	adds	r3, #24
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	4413      	add	r3, r2
 8003cb8:	3304      	adds	r3, #4
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	6811      	ldr	r1, [r2, #0]
 8003cc0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	3318      	adds	r3, #24
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	440b      	add	r3, r1
 8003ccc:	3304      	adds	r3, #4
 8003cce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	3307      	adds	r3, #7
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	061a      	lsls	r2, r3, #24
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3306      	adds	r3, #6
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	041b      	lsls	r3, r3, #16
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3305      	adds	r3, #5
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	021b      	lsls	r3, r3, #8
 8003cea:	4313      	orrs	r3, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	3204      	adds	r2, #4
 8003cf0:	7812      	ldrb	r2, [r2, #0]
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	6811      	ldr	r1, [r2, #0]
 8003cf8:	ea43 0200 	orr.w	r2, r3, r0
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	440b      	add	r3, r1
 8003d02:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003d06:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3303      	adds	r3, #3
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	061a      	lsls	r2, r3, #24
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3302      	adds	r3, #2
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	041b      	lsls	r3, r3, #16
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	021b      	lsls	r3, r3, #8
 8003d22:	4313      	orrs	r3, r2
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	7812      	ldrb	r2, [r2, #0]
 8003d28:	4610      	mov	r0, r2
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	6811      	ldr	r1, [r2, #0]
 8003d2e:	ea43 0200 	orr.w	r2, r3, r0
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	440b      	add	r3, r1
 8003d38:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8003d3c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	3318      	adds	r3, #24
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	4413      	add	r3, r2
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	6811      	ldr	r1, [r2, #0]
 8003d50:	f043 0201 	orr.w	r2, r3, #1
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	3318      	adds	r3, #24
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	440b      	add	r3, r1
 8003d5c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	e00e      	b.n	8003d80 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d66:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e006      	b.n	8003d80 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d76:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
  }
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3724      	adds	r7, #36	@ 0x24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bc80      	pop	{r7}
 8003d88:	4770      	bx	lr

08003d8a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b087      	sub	sp, #28
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	607a      	str	r2, [r7, #4]
 8003d96:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d9e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003da0:	7dfb      	ldrb	r3, [r7, #23]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d003      	beq.n	8003dae <HAL_CAN_GetRxMessage+0x24>
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	f040 8103 	bne.w	8003fb4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10e      	bne.n	8003dd2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d116      	bne.n	8003df0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e0f7      	b.n	8003fc2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d107      	bne.n	8003df0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0e8      	b.n	8003fc2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	331b      	adds	r3, #27
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	4413      	add	r3, r2
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0204 	and.w	r2, r3, #4
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10c      	bne.n	8003e28 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	331b      	adds	r3, #27
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	4413      	add	r3, r2
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	0d5b      	lsrs	r3, r3, #21
 8003e1e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	e00b      	b.n	8003e40 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	331b      	adds	r3, #27
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	4413      	add	r3, r2
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	08db      	lsrs	r3, r3, #3
 8003e38:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	331b      	adds	r3, #27
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	4413      	add	r3, r2
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0202 	and.w	r2, r3, #2
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	331b      	adds	r3, #27
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	4413      	add	r3, r2
 8003e62:	3304      	adds	r3, #4
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2208      	movs	r2, #8
 8003e72:	611a      	str	r2, [r3, #16]
 8003e74:	e00b      	b.n	8003e8e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	331b      	adds	r3, #27
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	4413      	add	r3, r2
 8003e82:	3304      	adds	r3, #4
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 020f 	and.w	r2, r3, #15
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	331b      	adds	r3, #27
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	4413      	add	r3, r2
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	0a1b      	lsrs	r3, r3, #8
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	331b      	adds	r3, #27
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	4413      	add	r3, r2
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	0c1b      	lsrs	r3, r3, #16
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	0a1a      	lsrs	r2, r3, #8
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	0c1a      	lsrs	r2, r3, #16
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	3302      	adds	r3, #2
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	0e1a      	lsrs	r2, r3, #24
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	3303      	adds	r3, #3
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	011b      	lsls	r3, r3, #4
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	3304      	adds	r3, #4
 8003f36:	b2d2      	uxtb	r2, r2
 8003f38:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	0a1a      	lsrs	r2, r3, #8
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	3305      	adds	r3, #5
 8003f50:	b2d2      	uxtb	r2, r2
 8003f52:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	0c1a      	lsrs	r2, r3, #16
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	3306      	adds	r3, #6
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	0e1a      	lsrs	r2, r3, #24
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	3307      	adds	r3, #7
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d108      	bne.n	8003fa0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68da      	ldr	r2, [r3, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0220 	orr.w	r2, r2, #32
 8003f9c:	60da      	str	r2, [r3, #12]
 8003f9e:	e007      	b.n	8003fb0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691a      	ldr	r2, [r3, #16]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f042 0220 	orr.w	r2, r2, #32
 8003fae:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	e006      	b.n	8003fc2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
  }
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	371c      	adds	r7, #28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bc80      	pop	{r7}
 8003fca:	4770      	bx	lr

08003fcc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fdc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d002      	beq.n	8003fea <HAL_CAN_ActivateNotification+0x1e>
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d109      	bne.n	8003ffe <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6959      	ldr	r1, [r3, #20]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	e006      	b.n	800400c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004002:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
  }
}
 800400c:	4618      	mov	r0, r3
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	bc80      	pop	{r7}
 8004014:	4770      	bx	lr

08004016 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b08a      	sub	sp, #40	@ 0x28
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800401e:	2300      	movs	r3, #0
 8004020:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b00      	cmp	r3, #0
 800405a:	d07c      	beq.n	8004156 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d023      	beq.n	80040ae <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2201      	movs	r2, #1
 800406c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d003      	beq.n	8004080 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f983 	bl	8004384 <HAL_CAN_TxMailbox0CompleteCallback>
 800407e:	e016      	b.n	80040ae <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	2b00      	cmp	r3, #0
 8004088:	d004      	beq.n	8004094 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800408a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004090:	627b      	str	r3, [r7, #36]	@ 0x24
 8004092:	e00c      	b.n	80040ae <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d004      	beq.n	80040a8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800409e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80040a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040a6:	e002      	b.n	80040ae <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f986 	bl	80043ba <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d024      	beq.n	8004102 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f962 	bl	8004396 <HAL_CAN_TxMailbox1CompleteCallback>
 80040d2:	e016      	b.n	8004102 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d004      	beq.n	80040e8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80040de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80040e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80040e6:	e00c      	b.n	8004102 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d004      	beq.n	80040fc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80040f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040fa:	e002      	b.n	8004102 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 f965 	bl	80043cc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d024      	beq.n	8004156 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004114:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f941 	bl	80043a8 <HAL_CAN_TxMailbox2CompleteCallback>
 8004126:	e016      	b.n	8004156 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d004      	beq.n	800413c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004134:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004138:	627b      	str	r3, [r7, #36]	@ 0x24
 800413a:	e00c      	b.n	8004156 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d004      	beq.n	8004150 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800414c:	627b      	str	r3, [r7, #36]	@ 0x24
 800414e:	e002      	b.n	8004156 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f944 	bl	80043de <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00c      	beq.n	800417a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b00      	cmp	r3, #0
 8004168:	d007      	beq.n	800417a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004170:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2210      	movs	r2, #16
 8004178:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00b      	beq.n	800419c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d006      	beq.n	800419c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2208      	movs	r2, #8
 8004194:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f92a 	bl	80043f0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800419c:	6a3b      	ldr	r3, [r7, #32]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d009      	beq.n	80041ba <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	f003 0303 	and.w	r3, r3, #3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7fd fc11 	bl	80019dc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00c      	beq.n	80041de <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d007      	beq.n	80041de <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041d4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2210      	movs	r2, #16
 80041dc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	f003 0320 	and.w	r3, r3, #32
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00b      	beq.n	8004200 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d006      	beq.n	8004200 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2208      	movs	r2, #8
 80041f8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 f90a 	bl	8004414 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	f003 0310 	and.w	r3, r3, #16
 8004206:	2b00      	cmp	r3, #0
 8004208:	d009      	beq.n	800421e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	691b      	ldr	r3, [r3, #16]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f8f2 	bl	8004402 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00b      	beq.n	8004240 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	f003 0310 	and.w	r3, r3, #16
 800422e:	2b00      	cmp	r3, #0
 8004230:	d006      	beq.n	8004240 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2210      	movs	r2, #16
 8004238:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f8f3 	bl	8004426 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00b      	beq.n	8004262 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b00      	cmp	r3, #0
 8004252:	d006      	beq.n	8004262 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2208      	movs	r2, #8
 800425a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f8eb 	bl	8004438 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d07b      	beq.n	8004364 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b00      	cmp	r3, #0
 8004274:	d072      	beq.n	800435c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	f043 0301 	orr.w	r3, r3, #1
 8004290:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004298:	2b00      	cmp	r3, #0
 800429a:	d008      	beq.n	80042ae <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80042a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a8:	f043 0302 	orr.w	r3, r3, #2
 80042ac:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d008      	beq.n	80042ca <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80042c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c4:	f043 0304 	orr.w	r3, r3, #4
 80042c8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d043      	beq.n	800435c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d03e      	beq.n	800435c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80042e4:	2b60      	cmp	r3, #96	@ 0x60
 80042e6:	d02b      	beq.n	8004340 <HAL_CAN_IRQHandler+0x32a>
 80042e8:	2b60      	cmp	r3, #96	@ 0x60
 80042ea:	d82e      	bhi.n	800434a <HAL_CAN_IRQHandler+0x334>
 80042ec:	2b50      	cmp	r3, #80	@ 0x50
 80042ee:	d022      	beq.n	8004336 <HAL_CAN_IRQHandler+0x320>
 80042f0:	2b50      	cmp	r3, #80	@ 0x50
 80042f2:	d82a      	bhi.n	800434a <HAL_CAN_IRQHandler+0x334>
 80042f4:	2b40      	cmp	r3, #64	@ 0x40
 80042f6:	d019      	beq.n	800432c <HAL_CAN_IRQHandler+0x316>
 80042f8:	2b40      	cmp	r3, #64	@ 0x40
 80042fa:	d826      	bhi.n	800434a <HAL_CAN_IRQHandler+0x334>
 80042fc:	2b30      	cmp	r3, #48	@ 0x30
 80042fe:	d010      	beq.n	8004322 <HAL_CAN_IRQHandler+0x30c>
 8004300:	2b30      	cmp	r3, #48	@ 0x30
 8004302:	d822      	bhi.n	800434a <HAL_CAN_IRQHandler+0x334>
 8004304:	2b10      	cmp	r3, #16
 8004306:	d002      	beq.n	800430e <HAL_CAN_IRQHandler+0x2f8>
 8004308:	2b20      	cmp	r3, #32
 800430a:	d005      	beq.n	8004318 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800430c:	e01d      	b.n	800434a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800430e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004310:	f043 0308 	orr.w	r3, r3, #8
 8004314:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004316:	e019      	b.n	800434c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431a:	f043 0310 	orr.w	r3, r3, #16
 800431e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004320:	e014      	b.n	800434c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004324:	f043 0320 	orr.w	r3, r3, #32
 8004328:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800432a:	e00f      	b.n	800434c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800432c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004332:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004334:	e00a      	b.n	800434c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004338:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800433c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800433e:	e005      	b.n	800434c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004342:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004346:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004348:	e000      	b.n	800434c <HAL_CAN_IRQHandler+0x336>
            break;
 800434a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	699a      	ldr	r2, [r3, #24]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800435a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2204      	movs	r2, #4
 8004362:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004366:	2b00      	cmp	r3, #0
 8004368:	d008      	beq.n	800437c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f867 	bl	800444a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800437c:	bf00      	nop
 800437e:	3728      	adds	r7, #40	@ 0x28
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr

080043a8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	4770      	bx	lr

080043ba <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr

080043cc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	bc80      	pop	{r7}
 80043dc:	4770      	bx	lr

080043de <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr

080043f0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bc80      	pop	{r7}
 8004400:	4770      	bx	lr

08004402 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr

08004414 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	bc80      	pop	{r7}
 8004424:	4770      	bx	lr

08004426 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004426:	b480      	push	{r7}
 8004428:	b083      	sub	sp, #12
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr

08004438 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	4770      	bx	lr

0800444a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr

0800445c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800446c:	4b0c      	ldr	r3, [pc, #48]	@ (80044a0 <__NVIC_SetPriorityGrouping+0x44>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004478:	4013      	ands	r3, r2
 800447a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004484:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800448c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800448e:	4a04      	ldr	r2, [pc, #16]	@ (80044a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	60d3      	str	r3, [r2, #12]
}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	e000ed00 	.word	0xe000ed00

080044a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044a8:	4b04      	ldr	r3, [pc, #16]	@ (80044bc <__NVIC_GetPriorityGrouping+0x18>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	0a1b      	lsrs	r3, r3, #8
 80044ae:	f003 0307 	and.w	r3, r3, #7
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bc80      	pop	{r7}
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	e000ed00 	.word	0xe000ed00

080044c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4603      	mov	r3, r0
 80044c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	db0b      	blt.n	80044ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044d2:	79fb      	ldrb	r3, [r7, #7]
 80044d4:	f003 021f 	and.w	r2, r3, #31
 80044d8:	4906      	ldr	r1, [pc, #24]	@ (80044f4 <__NVIC_EnableIRQ+0x34>)
 80044da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044de:	095b      	lsrs	r3, r3, #5
 80044e0:	2001      	movs	r0, #1
 80044e2:	fa00 f202 	lsl.w	r2, r0, r2
 80044e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr
 80044f4:	e000e100 	.word	0xe000e100

080044f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	4603      	mov	r3, r0
 8004500:	6039      	str	r1, [r7, #0]
 8004502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004508:	2b00      	cmp	r3, #0
 800450a:	db0a      	blt.n	8004522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	b2da      	uxtb	r2, r3
 8004510:	490c      	ldr	r1, [pc, #48]	@ (8004544 <__NVIC_SetPriority+0x4c>)
 8004512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004516:	0112      	lsls	r2, r2, #4
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	440b      	add	r3, r1
 800451c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004520:	e00a      	b.n	8004538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	b2da      	uxtb	r2, r3
 8004526:	4908      	ldr	r1, [pc, #32]	@ (8004548 <__NVIC_SetPriority+0x50>)
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	3b04      	subs	r3, #4
 8004530:	0112      	lsls	r2, r2, #4
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	440b      	add	r3, r1
 8004536:	761a      	strb	r2, [r3, #24]
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	e000e100 	.word	0xe000e100
 8004548:	e000ed00 	.word	0xe000ed00

0800454c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800454c:	b480      	push	{r7}
 800454e:	b089      	sub	sp, #36	@ 0x24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f1c3 0307 	rsb	r3, r3, #7
 8004566:	2b04      	cmp	r3, #4
 8004568:	bf28      	it	cs
 800456a:	2304      	movcs	r3, #4
 800456c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	3304      	adds	r3, #4
 8004572:	2b06      	cmp	r3, #6
 8004574:	d902      	bls.n	800457c <NVIC_EncodePriority+0x30>
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	3b03      	subs	r3, #3
 800457a:	e000      	b.n	800457e <NVIC_EncodePriority+0x32>
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004580:	f04f 32ff 	mov.w	r2, #4294967295
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	43da      	mvns	r2, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	401a      	ands	r2, r3
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004594:	f04f 31ff 	mov.w	r1, #4294967295
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	fa01 f303 	lsl.w	r3, r1, r3
 800459e:	43d9      	mvns	r1, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045a4:	4313      	orrs	r3, r2
         );
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3724      	adds	r7, #36	@ 0x24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bc80      	pop	{r7}
 80045ae:	4770      	bx	lr

080045b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045c0:	d301      	bcc.n	80045c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045c2:	2301      	movs	r3, #1
 80045c4:	e00f      	b.n	80045e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045c6:	4a0a      	ldr	r2, [pc, #40]	@ (80045f0 <SysTick_Config+0x40>)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045ce:	210f      	movs	r1, #15
 80045d0:	f04f 30ff 	mov.w	r0, #4294967295
 80045d4:	f7ff ff90 	bl	80044f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045d8:	4b05      	ldr	r3, [pc, #20]	@ (80045f0 <SysTick_Config+0x40>)
 80045da:	2200      	movs	r2, #0
 80045dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045de:	4b04      	ldr	r3, [pc, #16]	@ (80045f0 <SysTick_Config+0x40>)
 80045e0:	2207      	movs	r2, #7
 80045e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	e000e010 	.word	0xe000e010

080045f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff ff2d 	bl	800445c <__NVIC_SetPriorityGrouping>
}
 8004602:	bf00      	nop
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800460a:	b580      	push	{r7, lr}
 800460c:	b086      	sub	sp, #24
 800460e:	af00      	add	r7, sp, #0
 8004610:	4603      	mov	r3, r0
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	607a      	str	r2, [r7, #4]
 8004616:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800461c:	f7ff ff42 	bl	80044a4 <__NVIC_GetPriorityGrouping>
 8004620:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	68b9      	ldr	r1, [r7, #8]
 8004626:	6978      	ldr	r0, [r7, #20]
 8004628:	f7ff ff90 	bl	800454c <NVIC_EncodePriority>
 800462c:	4602      	mov	r2, r0
 800462e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004632:	4611      	mov	r1, r2
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff ff5f 	bl	80044f8 <__NVIC_SetPriority>
}
 800463a:	bf00      	nop
 800463c:	3718      	adds	r7, #24
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	4603      	mov	r3, r0
 800464a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800464c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff ff35 	bl	80044c0 <__NVIC_EnableIRQ>
}
 8004656:	bf00      	nop
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b082      	sub	sp, #8
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff ffa2 	bl	80045b0 <SysTick_Config>
 800466c:	4603      	mov	r3, r0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004686:	e16f      	b.n	8004968 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	2101      	movs	r1, #1
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	fa01 f303 	lsl.w	r3, r1, r3
 8004694:	4013      	ands	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	f000 8161 	beq.w	8004962 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f003 0303 	and.w	r3, r3, #3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d005      	beq.n	80046b8 <HAL_GPIO_Init+0x40>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f003 0303 	and.w	r3, r3, #3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d130      	bne.n	800471a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	2203      	movs	r2, #3
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	43db      	mvns	r3, r3
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	4013      	ands	r3, r2
 80046ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	68da      	ldr	r2, [r3, #12]
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046ee:	2201      	movs	r2, #1
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	fa02 f303 	lsl.w	r3, r2, r3
 80046f6:	43db      	mvns	r3, r3
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	4013      	ands	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	091b      	lsrs	r3, r3, #4
 8004704:	f003 0201 	and.w	r2, r3, #1
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	2b03      	cmp	r3, #3
 8004724:	d017      	beq.n	8004756 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	2203      	movs	r2, #3
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	43db      	mvns	r3, r3
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4013      	ands	r3, r2
 800473c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	fa02 f303 	lsl.w	r3, r2, r3
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d123      	bne.n	80047aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	08da      	lsrs	r2, r3, #3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3208      	adds	r2, #8
 800476a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800476e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	220f      	movs	r2, #15
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	43db      	mvns	r3, r3
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	4013      	ands	r3, r2
 8004784:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	691a      	ldr	r2, [r3, #16]
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	08da      	lsrs	r2, r3, #3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	3208      	adds	r2, #8
 80047a4:	6939      	ldr	r1, [r7, #16]
 80047a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	2203      	movs	r2, #3
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	43db      	mvns	r3, r3
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4013      	ands	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f003 0203 	and.w	r2, r3, #3
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 80bb 	beq.w	8004962 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ec:	2300      	movs	r3, #0
 80047ee:	60bb      	str	r3, [r7, #8]
 80047f0:	4b64      	ldr	r3, [pc, #400]	@ (8004984 <HAL_GPIO_Init+0x30c>)
 80047f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f4:	4a63      	ldr	r2, [pc, #396]	@ (8004984 <HAL_GPIO_Init+0x30c>)
 80047f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80047fc:	4b61      	ldr	r3, [pc, #388]	@ (8004984 <HAL_GPIO_Init+0x30c>)
 80047fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004800:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004808:	4a5f      	ldr	r2, [pc, #380]	@ (8004988 <HAL_GPIO_Init+0x310>)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	089b      	lsrs	r3, r3, #2
 800480e:	3302      	adds	r3, #2
 8004810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004814:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f003 0303 	and.w	r3, r3, #3
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	220f      	movs	r2, #15
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	43db      	mvns	r3, r3
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4013      	ands	r3, r2
 800482a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a57      	ldr	r2, [pc, #348]	@ (800498c <HAL_GPIO_Init+0x314>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d031      	beq.n	8004898 <HAL_GPIO_Init+0x220>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a56      	ldr	r2, [pc, #344]	@ (8004990 <HAL_GPIO_Init+0x318>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d02b      	beq.n	8004894 <HAL_GPIO_Init+0x21c>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a55      	ldr	r2, [pc, #340]	@ (8004994 <HAL_GPIO_Init+0x31c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d025      	beq.n	8004890 <HAL_GPIO_Init+0x218>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a54      	ldr	r2, [pc, #336]	@ (8004998 <HAL_GPIO_Init+0x320>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d01f      	beq.n	800488c <HAL_GPIO_Init+0x214>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a53      	ldr	r2, [pc, #332]	@ (800499c <HAL_GPIO_Init+0x324>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d019      	beq.n	8004888 <HAL_GPIO_Init+0x210>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a52      	ldr	r2, [pc, #328]	@ (80049a0 <HAL_GPIO_Init+0x328>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d013      	beq.n	8004884 <HAL_GPIO_Init+0x20c>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a51      	ldr	r2, [pc, #324]	@ (80049a4 <HAL_GPIO_Init+0x32c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d00d      	beq.n	8004880 <HAL_GPIO_Init+0x208>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a50      	ldr	r2, [pc, #320]	@ (80049a8 <HAL_GPIO_Init+0x330>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d007      	beq.n	800487c <HAL_GPIO_Init+0x204>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a4f      	ldr	r2, [pc, #316]	@ (80049ac <HAL_GPIO_Init+0x334>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d101      	bne.n	8004878 <HAL_GPIO_Init+0x200>
 8004874:	2308      	movs	r3, #8
 8004876:	e010      	b.n	800489a <HAL_GPIO_Init+0x222>
 8004878:	2309      	movs	r3, #9
 800487a:	e00e      	b.n	800489a <HAL_GPIO_Init+0x222>
 800487c:	2307      	movs	r3, #7
 800487e:	e00c      	b.n	800489a <HAL_GPIO_Init+0x222>
 8004880:	2306      	movs	r3, #6
 8004882:	e00a      	b.n	800489a <HAL_GPIO_Init+0x222>
 8004884:	2305      	movs	r3, #5
 8004886:	e008      	b.n	800489a <HAL_GPIO_Init+0x222>
 8004888:	2304      	movs	r3, #4
 800488a:	e006      	b.n	800489a <HAL_GPIO_Init+0x222>
 800488c:	2303      	movs	r3, #3
 800488e:	e004      	b.n	800489a <HAL_GPIO_Init+0x222>
 8004890:	2302      	movs	r3, #2
 8004892:	e002      	b.n	800489a <HAL_GPIO_Init+0x222>
 8004894:	2301      	movs	r3, #1
 8004896:	e000      	b.n	800489a <HAL_GPIO_Init+0x222>
 8004898:	2300      	movs	r3, #0
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	f002 0203 	and.w	r2, r2, #3
 80048a0:	0092      	lsls	r2, r2, #2
 80048a2:	4093      	lsls	r3, r2
 80048a4:	461a      	mov	r2, r3
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048ac:	4936      	ldr	r1, [pc, #216]	@ (8004988 <HAL_GPIO_Init+0x310>)
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	089b      	lsrs	r3, r3, #2
 80048b2:	3302      	adds	r3, #2
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048ba:	4b3d      	ldr	r3, [pc, #244]	@ (80049b0 <HAL_GPIO_Init+0x338>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	43db      	mvns	r3, r3
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4013      	ands	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4313      	orrs	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80048de:	4a34      	ldr	r2, [pc, #208]	@ (80049b0 <HAL_GPIO_Init+0x338>)
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048e4:	4b32      	ldr	r3, [pc, #200]	@ (80049b0 <HAL_GPIO_Init+0x338>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	43db      	mvns	r3, r3
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4013      	ands	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	4313      	orrs	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004908:	4a29      	ldr	r2, [pc, #164]	@ (80049b0 <HAL_GPIO_Init+0x338>)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800490e:	4b28      	ldr	r3, [pc, #160]	@ (80049b0 <HAL_GPIO_Init+0x338>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	43db      	mvns	r3, r3
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	4013      	ands	r3, r2
 800491c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d003      	beq.n	8004932 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004932:	4a1f      	ldr	r2, [pc, #124]	@ (80049b0 <HAL_GPIO_Init+0x338>)
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004938:	4b1d      	ldr	r3, [pc, #116]	@ (80049b0 <HAL_GPIO_Init+0x338>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	43db      	mvns	r3, r3
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4013      	ands	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d003      	beq.n	800495c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4313      	orrs	r3, r2
 800495a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800495c:	4a14      	ldr	r2, [pc, #80]	@ (80049b0 <HAL_GPIO_Init+0x338>)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	3301      	adds	r3, #1
 8004966:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	fa22 f303 	lsr.w	r3, r2, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	f47f ae88 	bne.w	8004688 <HAL_GPIO_Init+0x10>
  }
}
 8004978:	bf00      	nop
 800497a:	bf00      	nop
 800497c:	371c      	adds	r7, #28
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr
 8004984:	40023800 	.word	0x40023800
 8004988:	40013800 	.word	0x40013800
 800498c:	40020000 	.word	0x40020000
 8004990:	40020400 	.word	0x40020400
 8004994:	40020800 	.word	0x40020800
 8004998:	40020c00 	.word	0x40020c00
 800499c:	40021000 	.word	0x40021000
 80049a0:	40021400 	.word	0x40021400
 80049a4:	40021800 	.word	0x40021800
 80049a8:	40021c00 	.word	0x40021c00
 80049ac:	40022000 	.word	0x40022000
 80049b0:	40013c00 	.word	0x40013c00

080049b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691a      	ldr	r2, [r3, #16]
 80049c4:	887b      	ldrh	r3, [r7, #2]
 80049c6:	4013      	ands	r3, r2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049cc:	2301      	movs	r3, #1
 80049ce:	73fb      	strb	r3, [r7, #15]
 80049d0:	e001      	b.n	80049d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049d2:	2300      	movs	r3, #0
 80049d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	bc80      	pop	{r7}
 80049e0:	4770      	bx	lr

080049e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	460b      	mov	r3, r1
 80049ec:	807b      	strh	r3, [r7, #2]
 80049ee:	4613      	mov	r3, r2
 80049f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049f2:	787b      	ldrb	r3, [r7, #1]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049f8:	887a      	ldrh	r2, [r7, #2]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049fe:	e003      	b.n	8004a08 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a00:	887b      	ldrh	r3, [r7, #2]
 8004a02:	041a      	lsls	r2, r3, #16
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	619a      	str	r2, [r3, #24]
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bc80      	pop	{r7}
 8004a10:	4770      	bx	lr

08004a12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b085      	sub	sp, #20
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a24:	887a      	ldrh	r2, [r7, #2]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	041a      	lsls	r2, r3, #16
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	43d9      	mvns	r1, r3
 8004a30:	887b      	ldrh	r3, [r7, #2]
 8004a32:	400b      	ands	r3, r1
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	619a      	str	r2, [r3, #24]
}
 8004a3a:	bf00      	nop
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr

08004a44 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a46:	b08f      	sub	sp, #60	@ 0x3c
 8004a48:	af0a      	add	r7, sp, #40	@ 0x28
 8004a4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e10f      	b.n	8004c76 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d106      	bne.n	8004a76 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f006 f8b9 	bl	800abe8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2203      	movs	r2, #3
 8004a7a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d102      	bne.n	8004a90 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f003 f901 	bl	8007c9c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	687e      	ldr	r6, [r7, #4]
 8004aa2:	466d      	mov	r5, sp
 8004aa4:	f106 0410 	add.w	r4, r6, #16
 8004aa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ab0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ab4:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ab8:	1d33      	adds	r3, r6, #4
 8004aba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004abc:	6838      	ldr	r0, [r7, #0]
 8004abe:	f002 ffe3 	bl	8007a88 <USB_CoreInit>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e0d0      	b.n	8004c76 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2100      	movs	r1, #0
 8004ada:	4618      	mov	r0, r3
 8004adc:	f003 f8ee 	bl	8007cbc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	73fb      	strb	r3, [r7, #15]
 8004ae4:	e04a      	b.n	8004b7c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ae6:	7bfa      	ldrb	r2, [r7, #15]
 8004ae8:	6879      	ldr	r1, [r7, #4]
 8004aea:	4613      	mov	r3, r2
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	4413      	add	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	440b      	add	r3, r1
 8004af4:	333d      	adds	r3, #61	@ 0x3d
 8004af6:	2201      	movs	r2, #1
 8004af8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004afa:	7bfa      	ldrb	r2, [r7, #15]
 8004afc:	6879      	ldr	r1, [r7, #4]
 8004afe:	4613      	mov	r3, r2
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	4413      	add	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	440b      	add	r3, r1
 8004b08:	333c      	adds	r3, #60	@ 0x3c
 8004b0a:	7bfa      	ldrb	r2, [r7, #15]
 8004b0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b0e:	7bfa      	ldrb	r2, [r7, #15]
 8004b10:	7bfb      	ldrb	r3, [r7, #15]
 8004b12:	b298      	uxth	r0, r3
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	4613      	mov	r3, r2
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	4413      	add	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	440b      	add	r3, r1
 8004b20:	3356      	adds	r3, #86	@ 0x56
 8004b22:	4602      	mov	r2, r0
 8004b24:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b26:	7bfa      	ldrb	r2, [r7, #15]
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	4413      	add	r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	440b      	add	r3, r1
 8004b34:	3340      	adds	r3, #64	@ 0x40
 8004b36:	2200      	movs	r2, #0
 8004b38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b3a:	7bfa      	ldrb	r2, [r7, #15]
 8004b3c:	6879      	ldr	r1, [r7, #4]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	4413      	add	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	440b      	add	r3, r1
 8004b48:	3344      	adds	r3, #68	@ 0x44
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b4e:	7bfa      	ldrb	r2, [r7, #15]
 8004b50:	6879      	ldr	r1, [r7, #4]
 8004b52:	4613      	mov	r3, r2
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	4413      	add	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	3348      	adds	r3, #72	@ 0x48
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b62:	7bfa      	ldrb	r2, [r7, #15]
 8004b64:	6879      	ldr	r1, [r7, #4]
 8004b66:	4613      	mov	r3, r2
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	440b      	add	r3, r1
 8004b70:	334c      	adds	r3, #76	@ 0x4c
 8004b72:	2200      	movs	r2, #0
 8004b74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	73fb      	strb	r3, [r7, #15]
 8004b7c:	7bfa      	ldrb	r2, [r7, #15]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d3af      	bcc.n	8004ae6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b86:	2300      	movs	r3, #0
 8004b88:	73fb      	strb	r3, [r7, #15]
 8004b8a:	e044      	b.n	8004c16 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b8c:	7bfa      	ldrb	r2, [r7, #15]
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	00db      	lsls	r3, r3, #3
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ba2:	7bfa      	ldrb	r2, [r7, #15]
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8004bb4:	7bfa      	ldrb	r2, [r7, #15]
 8004bb6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004bb8:	7bfa      	ldrb	r2, [r7, #15]
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8004bca:	2200      	movs	r2, #0
 8004bcc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004bce:	7bfa      	ldrb	r2, [r7, #15]
 8004bd0:	6879      	ldr	r1, [r7, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004be4:	7bfa      	ldrb	r2, [r7, #15]
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	4613      	mov	r3, r2
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	4413      	add	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004bfa:	7bfa      	ldrb	r2, [r7, #15]
 8004bfc:	6879      	ldr	r1, [r7, #4]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	440b      	add	r3, r1
 8004c08:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	3301      	adds	r3, #1
 8004c14:	73fb      	strb	r3, [r7, #15]
 8004c16:	7bfa      	ldrb	r2, [r7, #15]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d3b5      	bcc.n	8004b8c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	603b      	str	r3, [r7, #0]
 8004c26:	687e      	ldr	r6, [r7, #4]
 8004c28:	466d      	mov	r5, sp
 8004c2a:	f106 0410 	add.w	r4, r6, #16
 8004c2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c3e:	1d33      	adds	r3, r6, #4
 8004c40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c42:	6838      	ldr	r0, [r7, #0]
 8004c44:	f003 f886 	bl	8007d54 <USB_DevInit>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d005      	beq.n	8004c5a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2202      	movs	r2, #2
 8004c52:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e00d      	b.n	8004c76 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f004 f8b8 	bl	8008de4 <USB_DevDisconnect>

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3714      	adds	r7, #20
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c7e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b082      	sub	sp, #8
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d101      	bne.n	8004c94 <HAL_PCD_Start+0x16>
 8004c90:	2302      	movs	r3, #2
 8004c92:	e012      	b.n	8004cba <HAL_PCD_Start+0x3c>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f002 ffeb 	bl	8007c7c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f004 f87a 	bl	8008da4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004cc2:	b590      	push	{r4, r7, lr}
 8004cc4:	b08d      	sub	sp, #52	@ 0x34
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f004 f931 	bl	8008f40 <USB_GetMode>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f040 847c 	bne.w	80055de <HAL_PCD_IRQHandler+0x91c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f004 f89a 	bl	8008e24 <USB_ReadInterrupts>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 8472 	beq.w	80055dc <HAL_PCD_IRQHandler+0x91a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	0a1b      	lsrs	r3, r3, #8
 8004d02:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f004 f887 	bl	8008e24 <USB_ReadInterrupts>
 8004d16:	4603      	mov	r3, r0
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d107      	bne.n	8004d30 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	695a      	ldr	r2, [r3, #20]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f002 0202 	and.w	r2, r2, #2
 8004d2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f004 f875 	bl	8008e24 <USB_ReadInterrupts>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	2b10      	cmp	r3, #16
 8004d42:	d161      	bne.n	8004e08 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f022 0210 	bic.w	r2, r2, #16
 8004d52:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	f003 020f 	and.w	r2, r3, #15
 8004d60:	4613      	mov	r3, r2
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4413      	add	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	4413      	add	r3, r2
 8004d70:	3304      	adds	r3, #4
 8004d72:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	0c5b      	lsrs	r3, r3, #17
 8004d78:	f003 030f 	and.w	r3, r3, #15
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d124      	bne.n	8004dca <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004d86:	4013      	ands	r3, r2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d035      	beq.n	8004df8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	091b      	lsrs	r3, r3, #4
 8004d94:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004d96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	6a38      	ldr	r0, [r7, #32]
 8004da0:	f003 feb2 	bl	8008b08 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	091b      	lsrs	r3, r3, #4
 8004dac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004db0:	441a      	add	r2, r3
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	695a      	ldr	r2, [r3, #20]
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	091b      	lsrs	r3, r3, #4
 8004dbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dc2:	441a      	add	r2, r3
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	615a      	str	r2, [r3, #20]
 8004dc8:	e016      	b.n	8004df8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	0c5b      	lsrs	r3, r3, #17
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	2b06      	cmp	r3, #6
 8004dd4:	d110      	bne.n	8004df8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8004ddc:	2208      	movs	r2, #8
 8004dde:	4619      	mov	r1, r3
 8004de0:	6a38      	ldr	r0, [r7, #32]
 8004de2:	f003 fe91 	bl	8008b08 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	695a      	ldr	r2, [r3, #20]
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	091b      	lsrs	r3, r3, #4
 8004dee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004df2:	441a      	add	r2, r3
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699a      	ldr	r2, [r3, #24]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0210 	orr.w	r2, r2, #16
 8004e06:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f004 f809 	bl	8008e24 <USB_ReadInterrupts>
 8004e12:	4603      	mov	r3, r0
 8004e14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e18:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e1c:	f040 80a7 	bne.w	8004f6e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f004 f80d 	bl	8008e48 <USB_ReadDevAllOutEpInterrupt>
 8004e2e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004e30:	e099      	b.n	8004f66 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f000 808e 	beq.w	8004f5a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e44:	b2d2      	uxtb	r2, r2
 8004e46:	4611      	mov	r1, r2
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f004 f82f 	bl	8008eac <USB_ReadDevOutEPInterrupt>
 8004e4e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00c      	beq.n	8004e74 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e66:	461a      	mov	r2, r3
 8004e68:	2301      	movs	r3, #1
 8004e6a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004e6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fe96 	bl	8005ba0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00c      	beq.n	8004e98 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	2308      	movs	r3, #8
 8004e8e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004e90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 ff6c 	bl	8005d70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	f003 0310 	and.w	r3, r3, #16
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d008      	beq.n	8004eb4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eae:	461a      	mov	r2, r3
 8004eb0:	2310      	movs	r3, #16
 8004eb2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d030      	beq.n	8004f20 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec6:	2b80      	cmp	r3, #128	@ 0x80
 8004ec8:	d109      	bne.n	8004ede <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ed8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004edc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	4413      	add	r3, r2
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	78db      	ldrb	r3, [r3, #3]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d108      	bne.n	8004f0e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	2200      	movs	r2, #0
 8004f00:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	4619      	mov	r1, r3
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f005 ff81 	bl	800ae10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	015a      	lsls	r2, r3, #5
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	4413      	add	r3, r2
 8004f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f003 0320 	and.w	r3, r3, #32
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d008      	beq.n	8004f3c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f36:	461a      	mov	r2, r3
 8004f38:	2320      	movs	r3, #32
 8004f3a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d009      	beq.n	8004f5a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f48:	015a      	lsls	r2, r3, #5
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f52:	461a      	mov	r2, r3
 8004f54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f58:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f62:	085b      	lsrs	r3, r3, #1
 8004f64:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f47f af62 	bne.w	8004e32 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f003 ff56 	bl	8008e24 <USB_ReadInterrupts>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f82:	f040 80db 	bne.w	800513c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f003 ff75 	bl	8008e7a <USB_ReadDevAllInEpInterrupt>
 8004f90:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004f96:	e0cd      	b.n	8005134 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 80c2 	beq.w	8005128 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	4611      	mov	r1, r2
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f003 ff99 	bl	8008ee6 <USB_ReadDevInEPInterrupt>
 8004fb4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d057      	beq.n	8005070 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	69f9      	ldr	r1, [r7, #28]
 8004fdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d132      	bne.n	8005064 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004ffe:	6879      	ldr	r1, [r7, #4]
 8005000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005002:	4613      	mov	r3, r2
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	4413      	add	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	440b      	add	r3, r1
 800500c:	3348      	adds	r3, #72	@ 0x48
 800500e:	6819      	ldr	r1, [r3, #0]
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005014:	4613      	mov	r3, r2
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	4413      	add	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4403      	add	r3, r0
 800501e:	3344      	adds	r3, #68	@ 0x44
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4419      	add	r1, r3
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005028:	4613      	mov	r3, r2
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4403      	add	r3, r0
 8005032:	3348      	adds	r3, #72	@ 0x48
 8005034:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	2b00      	cmp	r3, #0
 800503a:	d113      	bne.n	8005064 <HAL_PCD_IRQHandler+0x3a2>
 800503c:	6879      	ldr	r1, [r7, #4]
 800503e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005040:	4613      	mov	r3, r2
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	4413      	add	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	440b      	add	r3, r1
 800504a:	334c      	adds	r3, #76	@ 0x4c
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d108      	bne.n	8005064 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6818      	ldr	r0, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800505c:	461a      	mov	r2, r3
 800505e:	2101      	movs	r1, #1
 8005060:	f003 ff9e 	bl	8008fa0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005066:	b2db      	uxtb	r3, r3
 8005068:	4619      	mov	r1, r3
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f005 fe4b 	bl	800ad06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d008      	beq.n	800508c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005086:	461a      	mov	r2, r3
 8005088:	2308      	movs	r3, #8
 800508a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	f003 0310 	and.w	r3, r3, #16
 8005092:	2b00      	cmp	r3, #0
 8005094:	d008      	beq.n	80050a8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050a2:	461a      	mov	r2, r3
 80050a4:	2310      	movs	r3, #16
 80050a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d008      	beq.n	80050c4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050be:	461a      	mov	r2, r3
 80050c0:	2340      	movs	r3, #64	@ 0x40
 80050c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d023      	beq.n	8005116 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80050ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050d0:	6a38      	ldr	r0, [r7, #32]
 80050d2:	f002 ff99 	bl	8008008 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80050d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050d8:	4613      	mov	r3, r2
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	4413      	add	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	3338      	adds	r3, #56	@ 0x38
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	4413      	add	r3, r2
 80050e6:	3304      	adds	r3, #4
 80050e8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	78db      	ldrb	r3, [r3, #3]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d108      	bne.n	8005104 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2200      	movs	r2, #0
 80050f6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80050f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	4619      	mov	r1, r3
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f005 fe98 	bl	800ae34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005110:	461a      	mov	r2, r3
 8005112:	2302      	movs	r3, #2
 8005114:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005120:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fcae 	bl	8005a84 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512a:	3301      	adds	r3, #1
 800512c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800512e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005130:	085b      	lsrs	r3, r3, #1
 8005132:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005136:	2b00      	cmp	r3, #0
 8005138:	f47f af2e 	bne.w	8004f98 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f003 fe6f 	bl	8008e24 <USB_ReadInterrupts>
 8005146:	4603      	mov	r3, r0
 8005148:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800514c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005150:	d114      	bne.n	800517c <HAL_PCD_IRQHandler+0x4ba>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005160:	f023 0301 	bic.w	r3, r3, #1
 8005164:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f005 fe44 	bl	800adf4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695a      	ldr	r2, [r3, #20]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800517a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4618      	mov	r0, r3
 8005182:	f003 fe4f 	bl	8008e24 <USB_ReadInterrupts>
 8005186:	4603      	mov	r3, r0
 8005188:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800518c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005190:	d112      	bne.n	80051b8 <HAL_PCD_IRQHandler+0x4f6>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d102      	bne.n	80051a8 <HAL_PCD_IRQHandler+0x4e6>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f005 fe00 	bl	800ada8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695a      	ldr	r2, [r3, #20]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80051b6:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4618      	mov	r0, r3
 80051be:	f003 fe31 	bl	8008e24 <USB_ReadInterrupts>
 80051c2:	4603      	mov	r3, r0
 80051c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051cc:	f040 80b7 	bne.w	800533e <HAL_PCD_IRQHandler+0x67c>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	69fa      	ldr	r2, [r7, #28]
 80051da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051de:	f023 0301 	bic.w	r3, r3, #1
 80051e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2110      	movs	r1, #16
 80051ea:	4618      	mov	r0, r3
 80051ec:	f002 ff0c 	bl	8008008 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051f0:	2300      	movs	r3, #0
 80051f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051f4:	e046      	b.n	8005284 <HAL_PCD_IRQHandler+0x5c2>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80051f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f8:	015a      	lsls	r2, r3, #5
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	4413      	add	r3, r2
 80051fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005202:	461a      	mov	r2, r3
 8005204:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005208:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800520a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800520c:	015a      	lsls	r2, r3, #5
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	4413      	add	r3, r2
 8005212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800521a:	0151      	lsls	r1, r2, #5
 800521c:	69fa      	ldr	r2, [r7, #28]
 800521e:	440a      	add	r2, r1
 8005220:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005224:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005228:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800522a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005236:	461a      	mov	r2, r3
 8005238:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800523c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800523e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800524e:	0151      	lsls	r1, r2, #5
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	440a      	add	r2, r1
 8005254:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005258:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800525c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800525e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800526e:	0151      	lsls	r1, r2, #5
 8005270:	69fa      	ldr	r2, [r7, #28]
 8005272:	440a      	add	r2, r1
 8005274:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005278:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800527c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800527e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005280:	3301      	adds	r3, #1
 8005282:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800528a:	429a      	cmp	r2, r3
 800528c:	d3b3      	bcc.n	80051f6 <HAL_PCD_IRQHandler+0x534>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	69fa      	ldr	r2, [r7, #28]
 8005298:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800529c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80052a0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d016      	beq.n	80052d8 <HAL_PCD_IRQHandler+0x616>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052b4:	69fa      	ldr	r2, [r7, #28]
 80052b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052ba:	f043 030b 	orr.w	r3, r3, #11
 80052be:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ca:	69fa      	ldr	r2, [r7, #28]
 80052cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052d0:	f043 030b 	orr.w	r3, r3, #11
 80052d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80052d6:	e015      	b.n	8005304 <HAL_PCD_IRQHandler+0x642>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	69fa      	ldr	r2, [r7, #28]
 80052e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80052ea:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80052ee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052f6:	691b      	ldr	r3, [r3, #16]
 80052f8:	69fa      	ldr	r2, [r7, #28]
 80052fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052fe:	f043 030b 	orr.w	r3, r3, #11
 8005302:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005312:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005316:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6818      	ldr	r0, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005328:	461a      	mov	r2, r3
 800532a:	f003 fe39 	bl	8008fa0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695a      	ldr	r2, [r3, #20]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800533c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f003 fd6e 	bl	8008e24 <USB_ReadInterrupts>
 8005348:	4603      	mov	r3, r0
 800534a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800534e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005352:	d124      	bne.n	800539e <HAL_PCD_IRQHandler+0x6dc>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4618      	mov	r0, r3
 800535a:	f003 fdfe 	bl	8008f5a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4618      	mov	r0, r3
 8005364:	f002 fecc 	bl	8008100 <USB_GetDevSpeed>
 8005368:	4603      	mov	r3, r0
 800536a:	461a      	mov	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681c      	ldr	r4, [r3, #0]
 8005374:	f001 f99e 	bl	80066b4 <HAL_RCC_GetHCLKFreq>
 8005378:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800537e:	b2db      	uxtb	r3, r3
 8005380:	461a      	mov	r2, r3
 8005382:	4620      	mov	r0, r4
 8005384:	f002 fbd8 	bl	8007b38 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f005 fce4 	bl	800ad56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	695a      	ldr	r2, [r3, #20]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800539c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f003 fd3e 	bl	8008e24 <USB_ReadInterrupts>
 80053a8:	4603      	mov	r3, r0
 80053aa:	f003 0308 	and.w	r3, r3, #8
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d10a      	bne.n	80053c8 <HAL_PCD_IRQHandler+0x706>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f005 fcc1 	bl	800ad3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695a      	ldr	r2, [r3, #20]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f002 0208 	and.w	r2, r2, #8
 80053c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f003 fd29 	bl	8008e24 <USB_ReadInterrupts>
 80053d2:	4603      	mov	r3, r0
 80053d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053d8:	2b80      	cmp	r3, #128	@ 0x80
 80053da:	d122      	bne.n	8005422 <HAL_PCD_IRQHandler+0x760>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053e8:	2301      	movs	r3, #1
 80053ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80053ec:	e014      	b.n	8005418 <HAL_PCD_IRQHandler+0x756>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053f2:	4613      	mov	r3, r2
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	4413      	add	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	440b      	add	r3, r1
 80053fc:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d105      	bne.n	8005412 <HAL_PCD_IRQHandler+0x750>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005408:	b2db      	uxtb	r3, r3
 800540a:	4619      	mov	r1, r3
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fb08 	bl	8005a22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	3301      	adds	r3, #1
 8005416:	627b      	str	r3, [r7, #36]	@ 0x24
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800541e:	429a      	cmp	r2, r3
 8005420:	d3e5      	bcc.n	80053ee <HAL_PCD_IRQHandler+0x72c>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4618      	mov	r0, r3
 8005428:	f003 fcfc 	bl	8008e24 <USB_ReadInterrupts>
 800542c:	4603      	mov	r3, r0
 800542e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005432:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005436:	d13b      	bne.n	80054b0 <HAL_PCD_IRQHandler+0x7ee>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005438:	2301      	movs	r3, #1
 800543a:	627b      	str	r3, [r7, #36]	@ 0x24
 800543c:	e02b      	b.n	8005496 <HAL_PCD_IRQHandler+0x7d4>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	4413      	add	r3, r2
 8005446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800544e:	6879      	ldr	r1, [r7, #4]
 8005450:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005452:	4613      	mov	r3, r2
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	4413      	add	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	440b      	add	r3, r1
 800545c:	3340      	adds	r3, #64	@ 0x40
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d115      	bne.n	8005490 <HAL_PCD_IRQHandler+0x7ce>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005464:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005466:	2b00      	cmp	r3, #0
 8005468:	da12      	bge.n	8005490 <HAL_PCD_IRQHandler+0x7ce>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800546e:	4613      	mov	r3, r2
 8005470:	00db      	lsls	r3, r3, #3
 8005472:	4413      	add	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	440b      	add	r3, r1
 8005478:	333f      	adds	r3, #63	@ 0x3f
 800547a:	2201      	movs	r2, #1
 800547c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800547e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005480:	b2db      	uxtb	r3, r3
 8005482:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005486:	b2db      	uxtb	r3, r3
 8005488:	4619      	mov	r1, r3
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fac9 	bl	8005a22 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005492:	3301      	adds	r3, #1
 8005494:	627b      	str	r3, [r7, #36]	@ 0x24
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800549c:	429a      	cmp	r2, r3
 800549e:	d3ce      	bcc.n	800543e <HAL_PCD_IRQHandler+0x77c>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695a      	ldr	r2, [r3, #20]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80054ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f003 fcb5 	bl	8008e24 <USB_ReadInterrupts>
 80054ba:	4603      	mov	r3, r0
 80054bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054c4:	d155      	bne.n	8005572 <HAL_PCD_IRQHandler+0x8b0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054c6:	2301      	movs	r3, #1
 80054c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ca:	e045      	b.n	8005558 <HAL_PCD_IRQHandler+0x896>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80054cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80054dc:	6879      	ldr	r1, [r7, #4]
 80054de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e0:	4613      	mov	r3, r2
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	440b      	add	r3, r1
 80054ea:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d12e      	bne.n	8005552 <HAL_PCD_IRQHandler+0x890>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80054f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	da2b      	bge.n	8005552 <HAL_PCD_IRQHandler+0x890>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8005506:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800550a:	429a      	cmp	r2, r3
 800550c:	d121      	bne.n	8005552 <HAL_PCD_IRQHandler+0x890>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005512:	4613      	mov	r3, r2
 8005514:	00db      	lsls	r3, r3, #3
 8005516:	4413      	add	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	440b      	add	r3, r1
 800551c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8005520:	2201      	movs	r2, #1
 8005522:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10a      	bne.n	8005552 <HAL_PCD_IRQHandler+0x890>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	69fa      	ldr	r2, [r7, #28]
 8005546:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800554a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800554e:	6053      	str	r3, [r2, #4]
            break;
 8005550:	e007      	b.n	8005562 <HAL_PCD_IRQHandler+0x8a0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005554:	3301      	adds	r3, #1
 8005556:	627b      	str	r3, [r7, #36]	@ 0x24
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800555e:	429a      	cmp	r2, r3
 8005560:	d3b4      	bcc.n	80054cc <HAL_PCD_IRQHandler+0x80a>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	695a      	ldr	r2, [r3, #20]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005570:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4618      	mov	r0, r3
 8005578:	f003 fc54 	bl	8008e24 <USB_ReadInterrupts>
 800557c:	4603      	mov	r3, r0
 800557e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005586:	d10a      	bne.n	800559e <HAL_PCD_IRQHandler+0x8dc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f005 fc65 	bl	800ae58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695a      	ldr	r2, [r3, #20]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800559c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f003 fc3e 	bl	8008e24 <USB_ReadInterrupts>
 80055a8:	4603      	mov	r3, r0
 80055aa:	f003 0304 	and.w	r3, r3, #4
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	d115      	bne.n	80055de <HAL_PCD_IRQHandler+0x91c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d002      	beq.n	80055ca <HAL_PCD_IRQHandler+0x908>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f005 fc55 	bl	800ae74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6859      	ldr	r1, [r3, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	605a      	str	r2, [r3, #4]
 80055da:	e000      	b.n	80055de <HAL_PCD_IRQHandler+0x91c>
      return;
 80055dc:	bf00      	nop
    }
  }
}
 80055de:	3734      	adds	r7, #52	@ 0x34
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd90      	pop	{r4, r7, pc}

080055e4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d101      	bne.n	80055fe <HAL_PCD_SetAddress+0x1a>
 80055fa:	2302      	movs	r3, #2
 80055fc:	e013      	b.n	8005626 <HAL_PCD_SetAddress+0x42>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	78fa      	ldrb	r2, [r7, #3]
 800560a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	78fa      	ldrb	r2, [r7, #3]
 8005614:	4611      	mov	r1, r2
 8005616:	4618      	mov	r0, r3
 8005618:	f003 fb9f 	bl	8008d5a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b084      	sub	sp, #16
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	4608      	mov	r0, r1
 8005638:	4611      	mov	r1, r2
 800563a:	461a      	mov	r2, r3
 800563c:	4603      	mov	r3, r0
 800563e:	70fb      	strb	r3, [r7, #3]
 8005640:	460b      	mov	r3, r1
 8005642:	803b      	strh	r3, [r7, #0]
 8005644:	4613      	mov	r3, r2
 8005646:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005648:	2300      	movs	r3, #0
 800564a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800564c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005650:	2b00      	cmp	r3, #0
 8005652:	da0f      	bge.n	8005674 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005654:	78fb      	ldrb	r3, [r7, #3]
 8005656:	f003 020f 	and.w	r2, r3, #15
 800565a:	4613      	mov	r3, r2
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	4413      	add	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	3338      	adds	r3, #56	@ 0x38
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	4413      	add	r3, r2
 8005668:	3304      	adds	r3, #4
 800566a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2201      	movs	r2, #1
 8005670:	705a      	strb	r2, [r3, #1]
 8005672:	e00f      	b.n	8005694 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005674:	78fb      	ldrb	r3, [r7, #3]
 8005676:	f003 020f 	and.w	r2, r3, #15
 800567a:	4613      	mov	r3, r2
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	4413      	add	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	4413      	add	r3, r2
 800568a:	3304      	adds	r3, #4
 800568c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005694:	78fb      	ldrb	r3, [r7, #3]
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	b2da      	uxtb	r2, r3
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80056a0:	883a      	ldrh	r2, [r7, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	78ba      	ldrb	r2, [r7, #2]
 80056aa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	785b      	ldrb	r3, [r3, #1]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d004      	beq.n	80056be <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	461a      	mov	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80056be:	78bb      	ldrb	r3, [r7, #2]
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d102      	bne.n	80056ca <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_PCD_EP_Open+0xaa>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e00e      	b.n	80056f6 <HAL_PCD_EP_Open+0xc8>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68f9      	ldr	r1, [r7, #12]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f002 fd2e 	bl	8008148 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 80056f4:	7afb      	ldrb	r3, [r7, #11]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	460b      	mov	r3, r1
 8005708:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800570a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800570e:	2b00      	cmp	r3, #0
 8005710:	da0f      	bge.n	8005732 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005712:	78fb      	ldrb	r3, [r7, #3]
 8005714:	f003 020f 	and.w	r2, r3, #15
 8005718:	4613      	mov	r3, r2
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	3338      	adds	r3, #56	@ 0x38
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	4413      	add	r3, r2
 8005726:	3304      	adds	r3, #4
 8005728:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2201      	movs	r2, #1
 800572e:	705a      	strb	r2, [r3, #1]
 8005730:	e00f      	b.n	8005752 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005732:	78fb      	ldrb	r3, [r7, #3]
 8005734:	f003 020f 	and.w	r2, r3, #15
 8005738:	4613      	mov	r3, r2
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	4413      	add	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	4413      	add	r3, r2
 8005748:	3304      	adds	r3, #4
 800574a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005752:	78fb      	ldrb	r3, [r7, #3]
 8005754:	f003 030f 	and.w	r3, r3, #15
 8005758:	b2da      	uxtb	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005764:	2b01      	cmp	r3, #1
 8005766:	d101      	bne.n	800576c <HAL_PCD_EP_Close+0x6e>
 8005768:	2302      	movs	r3, #2
 800576a:	e00e      	b.n	800578a <HAL_PCD_EP_Close+0x8c>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68f9      	ldr	r1, [r7, #12]
 800577a:	4618      	mov	r0, r3
 800577c:	f002 fd6a 	bl	8008254 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b086      	sub	sp, #24
 8005796:	af00      	add	r7, sp, #0
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	603b      	str	r3, [r7, #0]
 800579e:	460b      	mov	r3, r1
 80057a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057a2:	7afb      	ldrb	r3, [r7, #11]
 80057a4:	f003 020f 	and.w	r2, r3, #15
 80057a8:	4613      	mov	r3, r2
 80057aa:	00db      	lsls	r3, r3, #3
 80057ac:	4413      	add	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4413      	add	r3, r2
 80057b8:	3304      	adds	r3, #4
 80057ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	2200      	movs	r2, #0
 80057cc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2200      	movs	r2, #0
 80057d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057d4:	7afb      	ldrb	r3, [r7, #11]
 80057d6:	f003 030f 	and.w	r3, r3, #15
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d102      	bne.n	80057ee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6818      	ldr	r0, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	6979      	ldr	r1, [r7, #20]
 80057fc:	f002 fe06 	bl	800840c <USB_EPStartXfer>

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3718      	adds	r7, #24
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	460b      	mov	r3, r1
 8005814:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005816:	78fb      	ldrb	r3, [r7, #3]
 8005818:	f003 020f 	and.w	r2, r3, #15
 800581c:	6879      	ldr	r1, [r7, #4]
 800581e:	4613      	mov	r3, r2
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	4413      	add	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	440b      	add	r3, r1
 8005828:	f503 7324 	add.w	r3, r3, #656	@ 0x290
 800582c:	681b      	ldr	r3, [r3, #0]
}
 800582e:	4618      	mov	r0, r3
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	bc80      	pop	{r7}
 8005836:	4770      	bx	lr

08005838 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	607a      	str	r2, [r7, #4]
 8005842:	603b      	str	r3, [r7, #0]
 8005844:	460b      	mov	r3, r1
 8005846:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005848:	7afb      	ldrb	r3, [r7, #11]
 800584a:	f003 020f 	and.w	r2, r3, #15
 800584e:	4613      	mov	r3, r2
 8005850:	00db      	lsls	r3, r3, #3
 8005852:	4413      	add	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	3338      	adds	r3, #56	@ 0x38
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	4413      	add	r3, r2
 800585c:	3304      	adds	r3, #4
 800585e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	2200      	movs	r2, #0
 8005870:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2201      	movs	r2, #1
 8005876:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005878:	7afb      	ldrb	r3, [r7, #11]
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	b2da      	uxtb	r2, r3
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d102      	bne.n	8005892 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6818      	ldr	r0, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	b2db      	uxtb	r3, r3
 800589c:	461a      	mov	r2, r3
 800589e:	6979      	ldr	r1, [r7, #20]
 80058a0:	f002 fdb4 	bl	800840c <USB_EPStartXfer>

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b084      	sub	sp, #16
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	460b      	mov	r3, r1
 80058b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80058ba:	78fb      	ldrb	r3, [r7, #3]
 80058bc:	f003 020f 	and.w	r2, r3, #15
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d901      	bls.n	80058cc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e050      	b.n	800596e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	da0f      	bge.n	80058f4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058d4:	78fb      	ldrb	r3, [r7, #3]
 80058d6:	f003 020f 	and.w	r2, r3, #15
 80058da:	4613      	mov	r3, r2
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	3338      	adds	r3, #56	@ 0x38
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	4413      	add	r3, r2
 80058e8:	3304      	adds	r3, #4
 80058ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	705a      	strb	r2, [r3, #1]
 80058f2:	e00d      	b.n	8005910 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80058f4:	78fa      	ldrb	r2, [r7, #3]
 80058f6:	4613      	mov	r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	4413      	add	r3, r2
 8005906:	3304      	adds	r3, #4
 8005908:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2201      	movs	r2, #1
 8005914:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005916:	78fb      	ldrb	r3, [r7, #3]
 8005918:	f003 030f 	and.w	r3, r3, #15
 800591c:	b2da      	uxtb	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_PCD_EP_SetStall+0x82>
 800592c:	2302      	movs	r3, #2
 800592e:	e01e      	b.n	800596e <HAL_PCD_EP_SetStall+0xc0>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68f9      	ldr	r1, [r7, #12]
 800593e:	4618      	mov	r0, r3
 8005940:	f003 f939 	bl	8008bb6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005944:	78fb      	ldrb	r3, [r7, #3]
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10a      	bne.n	8005964 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	b2d9      	uxtb	r1, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800595e:	461a      	mov	r2, r3
 8005960:	f003 fb1e 	bl	8008fa0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b084      	sub	sp, #16
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	460b      	mov	r3, r1
 8005980:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005982:	78fb      	ldrb	r3, [r7, #3]
 8005984:	f003 020f 	and.w	r2, r3, #15
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	429a      	cmp	r2, r3
 800598e:	d901      	bls.n	8005994 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e042      	b.n	8005a1a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005994:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005998:	2b00      	cmp	r3, #0
 800599a:	da0f      	bge.n	80059bc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800599c:	78fb      	ldrb	r3, [r7, #3]
 800599e:	f003 020f 	and.w	r2, r3, #15
 80059a2:	4613      	mov	r3, r2
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	4413      	add	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	3338      	adds	r3, #56	@ 0x38
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	4413      	add	r3, r2
 80059b0:	3304      	adds	r3, #4
 80059b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2201      	movs	r2, #1
 80059b8:	705a      	strb	r2, [r3, #1]
 80059ba:	e00f      	b.n	80059dc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059bc:	78fb      	ldrb	r3, [r7, #3]
 80059be:	f003 020f 	and.w	r2, r3, #15
 80059c2:	4613      	mov	r3, r2
 80059c4:	00db      	lsls	r3, r3, #3
 80059c6:	4413      	add	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	4413      	add	r3, r2
 80059d2:	3304      	adds	r3, #4
 80059d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059e2:	78fb      	ldrb	r3, [r7, #3]
 80059e4:	f003 030f 	and.w	r3, r3, #15
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d101      	bne.n	80059fc <HAL_PCD_EP_ClrStall+0x86>
 80059f8:	2302      	movs	r3, #2
 80059fa:	e00e      	b.n	8005a1a <HAL_PCD_EP_ClrStall+0xa4>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68f9      	ldr	r1, [r7, #12]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f003 f940 	bl	8008c90 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b084      	sub	sp, #16
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005a2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	da0c      	bge.n	8005a50 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a36:	78fb      	ldrb	r3, [r7, #3]
 8005a38:	f003 020f 	and.w	r2, r3, #15
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	4413      	add	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	3338      	adds	r3, #56	@ 0x38
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	4413      	add	r3, r2
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	e00c      	b.n	8005a6a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a50:	78fb      	ldrb	r3, [r7, #3]
 8005a52:	f003 020f 	and.w	r2, r3, #15
 8005a56:	4613      	mov	r3, r2
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	4413      	add	r3, r2
 8005a66:	3304      	adds	r3, #4
 8005a68:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68f9      	ldr	r1, [r7, #12]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f002 ff63 	bl	800893c <USB_EPStopXfer>
 8005a76:	4603      	mov	r3, r0
 8005a78:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005a7a:	7afb      	ldrb	r3, [r7, #11]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08a      	sub	sp, #40	@ 0x28
 8005a88:	af02      	add	r7, sp, #8
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	00db      	lsls	r3, r3, #3
 8005a9e:	4413      	add	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	3338      	adds	r3, #56	@ 0x38
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	3304      	adds	r3, #4
 8005aaa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	695a      	ldr	r2, [r3, #20]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d901      	bls.n	8005abc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e06c      	b.n	8005b96 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	691a      	ldr	r2, [r3, #16]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	69fa      	ldr	r2, [r7, #28]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d902      	bls.n	8005ad8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	3303      	adds	r3, #3
 8005adc:	089b      	lsrs	r3, r3, #2
 8005ade:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ae0:	e02b      	b.n	8005b3a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	691a      	ldr	r2, [r3, #16]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	69fa      	ldr	r2, [r7, #28]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d902      	bls.n	8005afe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	3303      	adds	r3, #3
 8005b02:	089b      	lsrs	r3, r3, #2
 8005b04:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	68d9      	ldr	r1, [r3, #12]
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	6978      	ldr	r0, [r7, #20]
 8005b1e:	f002 ffb6 	bl	8008a8e <USB_WritePacket>

    ep->xfer_buff  += len;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	441a      	add	r2, r3
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	695a      	ldr	r2, [r3, #20]
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	441a      	add	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d809      	bhi.n	8005b64 <PCD_WriteEmptyTxFifo+0xe0>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	695a      	ldr	r2, [r3, #20]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d203      	bcs.n	8005b64 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1be      	bne.n	8005ae2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d811      	bhi.n	8005b94 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	2201      	movs	r2, #1
 8005b78:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	43db      	mvns	r3, r3
 8005b8a:	6939      	ldr	r1, [r7, #16]
 8005b8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b90:	4013      	ands	r3, r2
 8005b92:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3720      	adds	r7, #32
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
	...

08005ba0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b088      	sub	sp, #32
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	333c      	adds	r3, #60	@ 0x3c
 8005bb8:	3304      	adds	r3, #4
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d17b      	bne.n	8005cce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f003 0308 	and.w	r3, r3, #8
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d015      	beq.n	8005c0c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	4a61      	ldr	r2, [pc, #388]	@ (8005d68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	f240 80b9 	bls.w	8005d5c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 80b3 	beq.w	8005d5c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c02:	461a      	mov	r2, r3
 8005c04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c08:	6093      	str	r3, [r2, #8]
 8005c0a:	e0a7      	b.n	8005d5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d009      	beq.n	8005c2a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c22:	461a      	mov	r2, r3
 8005c24:	2320      	movs	r3, #32
 8005c26:	6093      	str	r3, [r2, #8]
 8005c28:	e098      	b.n	8005d5c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f040 8093 	bne.w	8005d5c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	4a4b      	ldr	r2, [pc, #300]	@ (8005d68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d90f      	bls.n	8005c5e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00a      	beq.n	8005c5e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c54:	461a      	mov	r2, r3
 8005c56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c5a:	6093      	str	r3, [r2, #8]
 8005c5c:	e07e      	b.n	8005d5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	4613      	mov	r3, r2
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	4413      	add	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	4413      	add	r3, r2
 8005c70:	3304      	adds	r3, #4
 8005c72:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6a1a      	ldr	r2, [r3, #32]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	0159      	lsls	r1, r3, #5
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	440b      	add	r3, r1
 8005c80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c8a:	1ad2      	subs	r2, r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d114      	bne.n	8005cc0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d109      	bne.n	8005cb2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6818      	ldr	r0, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005ca8:	461a      	mov	r2, r3
 8005caa:	2101      	movs	r1, #1
 8005cac:	f003 f978 	bl	8008fa0 <USB_EP0_OutStart>
 8005cb0:	e006      	b.n	8005cc0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	441a      	add	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f005 f802 	bl	800acd0 <HAL_PCD_DataOutStageCallback>
 8005ccc:	e046      	b.n	8005d5c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	4a26      	ldr	r2, [pc, #152]	@ (8005d6c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d124      	bne.n	8005d20 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00a      	beq.n	8005cf6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cec:	461a      	mov	r2, r3
 8005cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cf2:	6093      	str	r3, [r2, #8]
 8005cf4:	e032      	b.n	8005d5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d008      	beq.n	8005d12 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2320      	movs	r3, #32
 8005d10:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	4619      	mov	r1, r3
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f004 ffd9 	bl	800acd0 <HAL_PCD_DataOutStageCallback>
 8005d1e:	e01d      	b.n	8005d5c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d114      	bne.n	8005d50 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	440b      	add	r3, r1
 8005d34:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d108      	bne.n	8005d50 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6818      	ldr	r0, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005d48:	461a      	mov	r2, r3
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	f003 f928 	bl	8008fa0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	4619      	mov	r1, r3
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f004 ffba 	bl	800acd0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3720      	adds	r7, #32
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	4f54300a 	.word	0x4f54300a
 8005d6c:	4f54310a 	.word	0x4f54310a

08005d70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	333c      	adds	r3, #60	@ 0x3c
 8005d88:	3304      	adds	r3, #4
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4a15      	ldr	r2, [pc, #84]	@ (8005df8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d90e      	bls.n	8005dc4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d009      	beq.n	8005dc4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dc2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f004 ff71 	bl	800acac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8005df8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d90c      	bls.n	8005dec <PCD_EP_OutSetupPacket_int+0x7c>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d108      	bne.n	8005dec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6818      	ldr	r0, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8005de4:	461a      	mov	r2, r3
 8005de6:	2101      	movs	r1, #1
 8005de8:	f003 f8da 	bl	8008fa0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	4f54300a 	.word	0x4f54300a

08005dfc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	460b      	mov	r3, r1
 8005e06:	70fb      	strb	r3, [r7, #3]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e12:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005e14:	78fb      	ldrb	r3, [r7, #3]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d107      	bne.n	8005e2a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005e1a:	883b      	ldrh	r3, [r7, #0]
 8005e1c:	0419      	lsls	r1, r3, #16
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e28:	e028      	b.n	8005e7c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e30:	0c1b      	lsrs	r3, r3, #16
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	4413      	add	r3, r2
 8005e36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e38:	2300      	movs	r3, #0
 8005e3a:	73fb      	strb	r3, [r7, #15]
 8005e3c:	e00d      	b.n	8005e5a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	7bfb      	ldrb	r3, [r7, #15]
 8005e44:	3340      	adds	r3, #64	@ 0x40
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	0c1b      	lsrs	r3, r3, #16
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	4413      	add	r3, r2
 8005e52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
 8005e56:	3301      	adds	r3, #1
 8005e58:	73fb      	strb	r3, [r7, #15]
 8005e5a:	7bfa      	ldrb	r2, [r7, #15]
 8005e5c:	78fb      	ldrb	r3, [r7, #3]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d3ec      	bcc.n	8005e3e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005e64:	883b      	ldrh	r3, [r7, #0]
 8005e66:	0418      	lsls	r0, r3, #16
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6819      	ldr	r1, [r3, #0]
 8005e6c:	78fb      	ldrb	r3, [r7, #3]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	4302      	orrs	r2, r0
 8005e74:	3340      	adds	r3, #64	@ 0x40
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	440b      	add	r3, r1
 8005e7a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bc80      	pop	{r7}
 8005e86:	4770      	bx	lr

08005e88 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	460b      	mov	r3, r1
 8005e92:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	887a      	ldrh	r2, [r7, #2]
 8005e9a:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bc80      	pop	{r7}
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08a      	sub	sp, #40	@ 0x28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e23b      	b.n	8006332 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d050      	beq.n	8005f68 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ec6:	4b9e      	ldr	r3, [pc, #632]	@ (8006140 <HAL_RCC_OscConfig+0x298>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 030c 	and.w	r3, r3, #12
 8005ece:	2b04      	cmp	r3, #4
 8005ed0:	d00c      	beq.n	8005eec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ed2:	4b9b      	ldr	r3, [pc, #620]	@ (8006140 <HAL_RCC_OscConfig+0x298>)
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005eda:	2b08      	cmp	r3, #8
 8005edc:	d112      	bne.n	8005f04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ede:	4b98      	ldr	r3, [pc, #608]	@ (8006140 <HAL_RCC_OscConfig+0x298>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ee6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005eea:	d10b      	bne.n	8005f04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eec:	4b94      	ldr	r3, [pc, #592]	@ (8006140 <HAL_RCC_OscConfig+0x298>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d036      	beq.n	8005f66 <HAL_RCC_OscConfig+0xbe>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d132      	bne.n	8005f66 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e216      	b.n	8006332 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	4b8e      	ldr	r3, [pc, #568]	@ (8006144 <HAL_RCC_OscConfig+0x29c>)
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d013      	beq.n	8005f3e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f16:	f7fd f83f 	bl	8002f98 <HAL_GetTick>
 8005f1a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f1c:	e008      	b.n	8005f30 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f1e:	f7fd f83b 	bl	8002f98 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	2b64      	cmp	r3, #100	@ 0x64
 8005f2a:	d901      	bls.n	8005f30 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e200      	b.n	8006332 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f30:	4b83      	ldr	r3, [pc, #524]	@ (8006140 <HAL_RCC_OscConfig+0x298>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d0f0      	beq.n	8005f1e <HAL_RCC_OscConfig+0x76>
 8005f3c:	e014      	b.n	8005f68 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f3e:	f7fd f82b 	bl	8002f98 <HAL_GetTick>
 8005f42:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f44:	e008      	b.n	8005f58 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f46:	f7fd f827 	bl	8002f98 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b64      	cmp	r3, #100	@ 0x64
 8005f52:	d901      	bls.n	8005f58 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e1ec      	b.n	8006332 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f58:	4b79      	ldr	r3, [pc, #484]	@ (8006140 <HAL_RCC_OscConfig+0x298>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1f0      	bne.n	8005f46 <HAL_RCC_OscConfig+0x9e>
 8005f64:	e000      	b.n	8005f68 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f66:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d077      	beq.n	8006064 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f74:	4b72      	ldr	r3, [pc, #456]	@ (8006140 <HAL_RCC_OscConfig+0x298>)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f003 030c 	and.w	r3, r3, #12
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00b      	beq.n	8005f98 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f80:	4b6f      	ldr	r3, [pc, #444]	@ (8006140 <HAL_RCC_OscConfig+0x298>)
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	d126      	bne.n	8005fda <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f8c:	4b6c      	ldr	r3, [pc, #432]	@ (8006140 <HAL_RCC_OscConfig+0x298>)
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d120      	bne.n	8005fda <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f98:	4b69      	ldr	r3, [pc, #420]	@ (8006140 <HAL_RCC_OscConfig+0x298>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d005      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x108>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d001      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e1c0      	b.n	8006332 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fb0:	4b63      	ldr	r3, [pc, #396]	@ (8006140 <HAL_RCC_OscConfig+0x298>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	21f8      	movs	r1, #248	@ 0xf8
 8005fbe:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fc0:	69b9      	ldr	r1, [r7, #24]
 8005fc2:	fa91 f1a1 	rbit	r1, r1
 8005fc6:	6179      	str	r1, [r7, #20]
  return result;
 8005fc8:	6979      	ldr	r1, [r7, #20]
 8005fca:	fab1 f181 	clz	r1, r1
 8005fce:	b2c9      	uxtb	r1, r1
 8005fd0:	408b      	lsls	r3, r1
 8005fd2:	495b      	ldr	r1, [pc, #364]	@ (8006140 <HAL_RCC_OscConfig+0x298>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fd8:	e044      	b.n	8006064 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d02a      	beq.n	8006038 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fe2:	4b59      	ldr	r3, [pc, #356]	@ (8006148 <HAL_RCC_OscConfig+0x2a0>)
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fe8:	f7fc ffd6 	bl	8002f98 <HAL_GetTick>
 8005fec:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ff0:	f7fc ffd2 	bl	8002f98 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e197      	b.n	8006332 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006002:	4b4f      	ldr	r3, [pc, #316]	@ (8006140 <HAL_RCC_OscConfig+0x298>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0f0      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800600e:	4b4c      	ldr	r3, [pc, #304]	@ (8006140 <HAL_RCC_OscConfig+0x298>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	21f8      	movs	r1, #248	@ 0xf8
 800601c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800601e:	6939      	ldr	r1, [r7, #16]
 8006020:	fa91 f1a1 	rbit	r1, r1
 8006024:	60f9      	str	r1, [r7, #12]
  return result;
 8006026:	68f9      	ldr	r1, [r7, #12]
 8006028:	fab1 f181 	clz	r1, r1
 800602c:	b2c9      	uxtb	r1, r1
 800602e:	408b      	lsls	r3, r1
 8006030:	4943      	ldr	r1, [pc, #268]	@ (8006140 <HAL_RCC_OscConfig+0x298>)
 8006032:	4313      	orrs	r3, r2
 8006034:	600b      	str	r3, [r1, #0]
 8006036:	e015      	b.n	8006064 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006038:	4b43      	ldr	r3, [pc, #268]	@ (8006148 <HAL_RCC_OscConfig+0x2a0>)
 800603a:	2200      	movs	r2, #0
 800603c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800603e:	f7fc ffab 	bl	8002f98 <HAL_GetTick>
 8006042:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006044:	e008      	b.n	8006058 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006046:	f7fc ffa7 	bl	8002f98 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d901      	bls.n	8006058 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e16c      	b.n	8006332 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006058:	4b39      	ldr	r3, [pc, #228]	@ (8006140 <HAL_RCC_OscConfig+0x298>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1f0      	bne.n	8006046 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0308 	and.w	r3, r3, #8
 800606c:	2b00      	cmp	r3, #0
 800606e:	d030      	beq.n	80060d2 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	695b      	ldr	r3, [r3, #20]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d016      	beq.n	80060a6 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006078:	4b34      	ldr	r3, [pc, #208]	@ (800614c <HAL_RCC_OscConfig+0x2a4>)
 800607a:	2201      	movs	r2, #1
 800607c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800607e:	f7fc ff8b 	bl	8002f98 <HAL_GetTick>
 8006082:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006084:	e008      	b.n	8006098 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006086:	f7fc ff87 	bl	8002f98 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	2b02      	cmp	r3, #2
 8006092:	d901      	bls.n	8006098 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e14c      	b.n	8006332 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006098:	4b29      	ldr	r3, [pc, #164]	@ (8006140 <HAL_RCC_OscConfig+0x298>)
 800609a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0f0      	beq.n	8006086 <HAL_RCC_OscConfig+0x1de>
 80060a4:	e015      	b.n	80060d2 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060a6:	4b29      	ldr	r3, [pc, #164]	@ (800614c <HAL_RCC_OscConfig+0x2a4>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060ac:	f7fc ff74 	bl	8002f98 <HAL_GetTick>
 80060b0:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060b4:	f7fc ff70 	bl	8002f98 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e135      	b.n	8006332 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006140 <HAL_RCC_OscConfig+0x298>)
 80060c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1f0      	bne.n	80060b4 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0304 	and.w	r3, r3, #4
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 8087 	beq.w	80061ee <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060e0:	2300      	movs	r3, #0
 80060e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060e6:	4b16      	ldr	r3, [pc, #88]	@ (8006140 <HAL_RCC_OscConfig+0x298>)
 80060e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d110      	bne.n	8006114 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060f2:	2300      	movs	r3, #0
 80060f4:	60bb      	str	r3, [r7, #8]
 80060f6:	4b12      	ldr	r3, [pc, #72]	@ (8006140 <HAL_RCC_OscConfig+0x298>)
 80060f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fa:	4a11      	ldr	r2, [pc, #68]	@ (8006140 <HAL_RCC_OscConfig+0x298>)
 80060fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006100:	6413      	str	r3, [r2, #64]	@ 0x40
 8006102:	4b0f      	ldr	r3, [pc, #60]	@ (8006140 <HAL_RCC_OscConfig+0x298>)
 8006104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800610a:	60bb      	str	r3, [r7, #8]
 800610c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800610e:	2301      	movs	r3, #1
 8006110:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006114:	4b0e      	ldr	r3, [pc, #56]	@ (8006150 <HAL_RCC_OscConfig+0x2a8>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a0d      	ldr	r2, [pc, #52]	@ (8006150 <HAL_RCC_OscConfig+0x2a8>)
 800611a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800611e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006120:	4b0b      	ldr	r3, [pc, #44]	@ (8006150 <HAL_RCC_OscConfig+0x2a8>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006128:	2b00      	cmp	r3, #0
 800612a:	d122      	bne.n	8006172 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800612c:	4b08      	ldr	r3, [pc, #32]	@ (8006150 <HAL_RCC_OscConfig+0x2a8>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a07      	ldr	r2, [pc, #28]	@ (8006150 <HAL_RCC_OscConfig+0x2a8>)
 8006132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006136:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006138:	f7fc ff2e 	bl	8002f98 <HAL_GetTick>
 800613c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800613e:	e012      	b.n	8006166 <HAL_RCC_OscConfig+0x2be>
 8006140:	40023800 	.word	0x40023800
 8006144:	40023802 	.word	0x40023802
 8006148:	42470000 	.word	0x42470000
 800614c:	42470e80 	.word	0x42470e80
 8006150:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006154:	f7fc ff20 	bl	8002f98 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e0e5      	b.n	8006332 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006166:	4b75      	ldr	r3, [pc, #468]	@ (800633c <HAL_RCC_OscConfig+0x494>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0f0      	beq.n	8006154 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	4b72      	ldr	r3, [pc, #456]	@ (8006340 <HAL_RCC_OscConfig+0x498>)
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d015      	beq.n	80061b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006184:	f7fc ff08 	bl	8002f98 <HAL_GetTick>
 8006188:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800618a:	e00a      	b.n	80061a2 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800618c:	f7fc ff04 	bl	8002f98 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800619a:	4293      	cmp	r3, r2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e0c7      	b.n	8006332 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061a2:	4b68      	ldr	r3, [pc, #416]	@ (8006344 <HAL_RCC_OscConfig+0x49c>)
 80061a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0ee      	beq.n	800618c <HAL_RCC_OscConfig+0x2e4>
 80061ae:	e014      	b.n	80061da <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061b0:	f7fc fef2 	bl	8002f98 <HAL_GetTick>
 80061b4:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061b6:	e00a      	b.n	80061ce <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061b8:	f7fc feee 	bl	8002f98 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	6a3b      	ldr	r3, [r7, #32]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d901      	bls.n	80061ce <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e0b1      	b.n	8006332 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061ce:	4b5d      	ldr	r3, [pc, #372]	@ (8006344 <HAL_RCC_OscConfig+0x49c>)
 80061d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1ee      	bne.n	80061b8 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d105      	bne.n	80061ee <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061e2:	4b58      	ldr	r3, [pc, #352]	@ (8006344 <HAL_RCC_OscConfig+0x49c>)
 80061e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e6:	4a57      	ldr	r2, [pc, #348]	@ (8006344 <HAL_RCC_OscConfig+0x49c>)
 80061e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061ec:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 809c 	beq.w	8006330 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061f8:	4b52      	ldr	r3, [pc, #328]	@ (8006344 <HAL_RCC_OscConfig+0x49c>)
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f003 030c 	and.w	r3, r3, #12
 8006200:	2b08      	cmp	r3, #8
 8006202:	d061      	beq.n	80062c8 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	2b02      	cmp	r3, #2
 800620a:	d146      	bne.n	800629a <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800620c:	4b4e      	ldr	r3, [pc, #312]	@ (8006348 <HAL_RCC_OscConfig+0x4a0>)
 800620e:	2200      	movs	r2, #0
 8006210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006212:	f7fc fec1 	bl	8002f98 <HAL_GetTick>
 8006216:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006218:	e008      	b.n	800622c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800621a:	f7fc febd 	bl	8002f98 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	2b64      	cmp	r3, #100	@ 0x64
 8006226:	d901      	bls.n	800622c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e082      	b.n	8006332 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800622c:	4b45      	ldr	r3, [pc, #276]	@ (8006344 <HAL_RCC_OscConfig+0x49c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1f0      	bne.n	800621a <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006238:	4b42      	ldr	r3, [pc, #264]	@ (8006344 <HAL_RCC_OscConfig+0x49c>)
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	4b43      	ldr	r3, [pc, #268]	@ (800634c <HAL_RCC_OscConfig+0x4a4>)
 800623e:	4013      	ands	r3, r2
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	69d1      	ldr	r1, [r2, #28]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	6a12      	ldr	r2, [r2, #32]
 8006248:	4311      	orrs	r1, r2
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800624e:	0192      	lsls	r2, r2, #6
 8006250:	4311      	orrs	r1, r2
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006256:	0612      	lsls	r2, r2, #24
 8006258:	4311      	orrs	r1, r2
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800625e:	0852      	lsrs	r2, r2, #1
 8006260:	3a01      	subs	r2, #1
 8006262:	0412      	lsls	r2, r2, #16
 8006264:	430a      	orrs	r2, r1
 8006266:	4937      	ldr	r1, [pc, #220]	@ (8006344 <HAL_RCC_OscConfig+0x49c>)
 8006268:	4313      	orrs	r3, r2
 800626a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800626c:	4b36      	ldr	r3, [pc, #216]	@ (8006348 <HAL_RCC_OscConfig+0x4a0>)
 800626e:	2201      	movs	r2, #1
 8006270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006272:	f7fc fe91 	bl	8002f98 <HAL_GetTick>
 8006276:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006278:	e008      	b.n	800628c <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800627a:	f7fc fe8d 	bl	8002f98 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b64      	cmp	r3, #100	@ 0x64
 8006286:	d901      	bls.n	800628c <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e052      	b.n	8006332 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800628c:	4b2d      	ldr	r3, [pc, #180]	@ (8006344 <HAL_RCC_OscConfig+0x49c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0f0      	beq.n	800627a <HAL_RCC_OscConfig+0x3d2>
 8006298:	e04a      	b.n	8006330 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800629a:	4b2b      	ldr	r3, [pc, #172]	@ (8006348 <HAL_RCC_OscConfig+0x4a0>)
 800629c:	2200      	movs	r2, #0
 800629e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a0:	f7fc fe7a 	bl	8002f98 <HAL_GetTick>
 80062a4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062a6:	e008      	b.n	80062ba <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062a8:	f7fc fe76 	bl	8002f98 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b64      	cmp	r3, #100	@ 0x64
 80062b4:	d901      	bls.n	80062ba <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e03b      	b.n	8006332 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ba:	4b22      	ldr	r3, [pc, #136]	@ (8006344 <HAL_RCC_OscConfig+0x49c>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1f0      	bne.n	80062a8 <HAL_RCC_OscConfig+0x400>
 80062c6:	e033      	b.n	8006330 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d101      	bne.n	80062d4 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e02e      	b.n	8006332 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80062d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006344 <HAL_RCC_OscConfig+0x49c>)
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	69db      	ldr	r3, [r3, #28]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d121      	bne.n	800632c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d11a      	bne.n	800632c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062f6:	69fa      	ldr	r2, [r7, #28]
 80062f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80062fc:	4013      	ands	r3, r2
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006302:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006304:	4293      	cmp	r3, r2
 8006306:	d111      	bne.n	800632c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006312:	085b      	lsrs	r3, r3, #1
 8006314:	3b01      	subs	r3, #1
 8006316:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006318:	429a      	cmp	r2, r3
 800631a:	d107      	bne.n	800632c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006326:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006328:	429a      	cmp	r2, r3
 800632a:	d001      	beq.n	8006330 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e000      	b.n	8006332 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3728      	adds	r7, #40	@ 0x28
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	40007000 	.word	0x40007000
 8006340:	40023870 	.word	0x40023870
 8006344:	40023800 	.word	0x40023800
 8006348:	42470060 	.word	0x42470060
 800634c:	f0bc8000 	.word	0xf0bc8000

08006350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e0d2      	b.n	800650a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006364:	4b6b      	ldr	r3, [pc, #428]	@ (8006514 <HAL_RCC_ClockConfig+0x1c4>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 030f 	and.w	r3, r3, #15
 800636c:	683a      	ldr	r2, [r7, #0]
 800636e:	429a      	cmp	r2, r3
 8006370:	d90c      	bls.n	800638c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006372:	4b68      	ldr	r3, [pc, #416]	@ (8006514 <HAL_RCC_ClockConfig+0x1c4>)
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	b2d2      	uxtb	r2, r2
 8006378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800637a:	4b66      	ldr	r3, [pc, #408]	@ (8006514 <HAL_RCC_ClockConfig+0x1c4>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 030f 	and.w	r3, r3, #15
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	429a      	cmp	r2, r3
 8006386:	d001      	beq.n	800638c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e0be      	b.n	800650a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0302 	and.w	r3, r3, #2
 8006394:	2b00      	cmp	r3, #0
 8006396:	d020      	beq.n	80063da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d005      	beq.n	80063b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063a4:	4b5c      	ldr	r3, [pc, #368]	@ (8006518 <HAL_RCC_ClockConfig+0x1c8>)
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	4a5b      	ldr	r2, [pc, #364]	@ (8006518 <HAL_RCC_ClockConfig+0x1c8>)
 80063aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80063ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0308 	and.w	r3, r3, #8
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d005      	beq.n	80063c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80063bc:	4b56      	ldr	r3, [pc, #344]	@ (8006518 <HAL_RCC_ClockConfig+0x1c8>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	4a55      	ldr	r2, [pc, #340]	@ (8006518 <HAL_RCC_ClockConfig+0x1c8>)
 80063c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80063c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063c8:	4b53      	ldr	r3, [pc, #332]	@ (8006518 <HAL_RCC_ClockConfig+0x1c8>)
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	4950      	ldr	r1, [pc, #320]	@ (8006518 <HAL_RCC_ClockConfig+0x1c8>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d040      	beq.n	8006468 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	2b01      	cmp	r3, #1
 80063ec:	d107      	bne.n	80063fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ee:	4b4a      	ldr	r3, [pc, #296]	@ (8006518 <HAL_RCC_ClockConfig+0x1c8>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d115      	bne.n	8006426 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e085      	b.n	800650a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	2b02      	cmp	r3, #2
 8006404:	d107      	bne.n	8006416 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006406:	4b44      	ldr	r3, [pc, #272]	@ (8006518 <HAL_RCC_ClockConfig+0x1c8>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d109      	bne.n	8006426 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e079      	b.n	800650a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006416:	4b40      	ldr	r3, [pc, #256]	@ (8006518 <HAL_RCC_ClockConfig+0x1c8>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e071      	b.n	800650a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006426:	4b3c      	ldr	r3, [pc, #240]	@ (8006518 <HAL_RCC_ClockConfig+0x1c8>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f023 0203 	bic.w	r2, r3, #3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	4939      	ldr	r1, [pc, #228]	@ (8006518 <HAL_RCC_ClockConfig+0x1c8>)
 8006434:	4313      	orrs	r3, r2
 8006436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006438:	f7fc fdae 	bl	8002f98 <HAL_GetTick>
 800643c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800643e:	e00a      	b.n	8006456 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006440:	f7fc fdaa 	bl	8002f98 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800644e:	4293      	cmp	r3, r2
 8006450:	d901      	bls.n	8006456 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e059      	b.n	800650a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006456:	4b30      	ldr	r3, [pc, #192]	@ (8006518 <HAL_RCC_ClockConfig+0x1c8>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 020c 	and.w	r2, r3, #12
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	429a      	cmp	r2, r3
 8006466:	d1eb      	bne.n	8006440 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006468:	4b2a      	ldr	r3, [pc, #168]	@ (8006514 <HAL_RCC_ClockConfig+0x1c4>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 030f 	and.w	r3, r3, #15
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	429a      	cmp	r2, r3
 8006474:	d20c      	bcs.n	8006490 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006476:	4b27      	ldr	r3, [pc, #156]	@ (8006514 <HAL_RCC_ClockConfig+0x1c4>)
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800647e:	4b25      	ldr	r3, [pc, #148]	@ (8006514 <HAL_RCC_ClockConfig+0x1c4>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 030f 	and.w	r3, r3, #15
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	429a      	cmp	r2, r3
 800648a:	d001      	beq.n	8006490 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e03c      	b.n	800650a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b00      	cmp	r3, #0
 800649a:	d008      	beq.n	80064ae <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800649c:	4b1e      	ldr	r3, [pc, #120]	@ (8006518 <HAL_RCC_ClockConfig+0x1c8>)
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	491b      	ldr	r1, [pc, #108]	@ (8006518 <HAL_RCC_ClockConfig+0x1c8>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0308 	and.w	r3, r3, #8
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d009      	beq.n	80064ce <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064ba:	4b17      	ldr	r3, [pc, #92]	@ (8006518 <HAL_RCC_ClockConfig+0x1c8>)
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	00db      	lsls	r3, r3, #3
 80064c8:	4913      	ldr	r1, [pc, #76]	@ (8006518 <HAL_RCC_ClockConfig+0x1c8>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80064ce:	f000 f82b 	bl	8006528 <HAL_RCC_GetSysClockFreq>
 80064d2:	4601      	mov	r1, r0
 80064d4:	4b10      	ldr	r3, [pc, #64]	@ (8006518 <HAL_RCC_ClockConfig+0x1c8>)
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064dc:	22f0      	movs	r2, #240	@ 0xf0
 80064de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	fa92 f2a2 	rbit	r2, r2
 80064e6:	60fa      	str	r2, [r7, #12]
  return result;
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	fab2 f282 	clz	r2, r2
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	40d3      	lsrs	r3, r2
 80064f2:	4a0a      	ldr	r2, [pc, #40]	@ (800651c <HAL_RCC_ClockConfig+0x1cc>)
 80064f4:	5cd3      	ldrb	r3, [r2, r3]
 80064f6:	fa21 f303 	lsr.w	r3, r1, r3
 80064fa:	4a09      	ldr	r2, [pc, #36]	@ (8006520 <HAL_RCC_ClockConfig+0x1d0>)
 80064fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064fe:	4b09      	ldr	r3, [pc, #36]	@ (8006524 <HAL_RCC_ClockConfig+0x1d4>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4618      	mov	r0, r3
 8006504:	f7fc fd06 	bl	8002f14 <HAL_InitTick>

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	40023c00 	.word	0x40023c00
 8006518:	40023800 	.word	0x40023800
 800651c:	0800e36c 	.word	0x0800e36c
 8006520:	2000004c 	.word	0x2000004c
 8006524:	20000050 	.word	0x20000050

08006528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800652c:	b090      	sub	sp, #64	@ 0x40
 800652e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	637b      	str	r3, [r7, #52]	@ 0x34
 8006534:	2300      	movs	r3, #0
 8006536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006538:	2300      	movs	r3, #0
 800653a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800653c:	2300      	movs	r3, #0
 800653e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006540:	4b59      	ldr	r3, [pc, #356]	@ (80066a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	f003 030c 	and.w	r3, r3, #12
 8006548:	2b08      	cmp	r3, #8
 800654a:	d00d      	beq.n	8006568 <HAL_RCC_GetSysClockFreq+0x40>
 800654c:	2b08      	cmp	r3, #8
 800654e:	f200 80a2 	bhi.w	8006696 <HAL_RCC_GetSysClockFreq+0x16e>
 8006552:	2b00      	cmp	r3, #0
 8006554:	d002      	beq.n	800655c <HAL_RCC_GetSysClockFreq+0x34>
 8006556:	2b04      	cmp	r3, #4
 8006558:	d003      	beq.n	8006562 <HAL_RCC_GetSysClockFreq+0x3a>
 800655a:	e09c      	b.n	8006696 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800655c:	4b53      	ldr	r3, [pc, #332]	@ (80066ac <HAL_RCC_GetSysClockFreq+0x184>)
 800655e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006560:	e09c      	b.n	800669c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006562:	4b53      	ldr	r3, [pc, #332]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006564:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006566:	e099      	b.n	800669c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006568:	4b4f      	ldr	r3, [pc, #316]	@ (80066a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006570:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006572:	4b4d      	ldr	r3, [pc, #308]	@ (80066a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d027      	beq.n	80065ce <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800657e:	4b4a      	ldr	r3, [pc, #296]	@ (80066a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	099b      	lsrs	r3, r3, #6
 8006584:	2200      	movs	r2, #0
 8006586:	623b      	str	r3, [r7, #32]
 8006588:	627a      	str	r2, [r7, #36]	@ 0x24
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006590:	2100      	movs	r1, #0
 8006592:	4b47      	ldr	r3, [pc, #284]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006594:	fb03 f201 	mul.w	r2, r3, r1
 8006598:	2300      	movs	r3, #0
 800659a:	fb00 f303 	mul.w	r3, r0, r3
 800659e:	4413      	add	r3, r2
 80065a0:	4a43      	ldr	r2, [pc, #268]	@ (80066b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80065a2:	fba0 2102 	umull	r2, r1, r0, r2
 80065a6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80065a8:	62ba      	str	r2, [r7, #40]	@ 0x28
 80065aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065ac:	4413      	add	r3, r2
 80065ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065b2:	2200      	movs	r2, #0
 80065b4:	61bb      	str	r3, [r7, #24]
 80065b6:	61fa      	str	r2, [r7, #28]
 80065b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065bc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80065c0:	f7fa fabe 	bl	8000b40 <__aeabi_uldivmod>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4613      	mov	r3, r2
 80065ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80065cc:	e055      	b.n	800667a <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065ce:	4b36      	ldr	r3, [pc, #216]	@ (80066a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	099b      	lsrs	r3, r3, #6
 80065d4:	2200      	movs	r2, #0
 80065d6:	613b      	str	r3, [r7, #16]
 80065d8:	617a      	str	r2, [r7, #20]
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80065e0:	f04f 0b00 	mov.w	fp, #0
 80065e4:	4652      	mov	r2, sl
 80065e6:	465b      	mov	r3, fp
 80065e8:	f04f 0000 	mov.w	r0, #0
 80065ec:	f04f 0100 	mov.w	r1, #0
 80065f0:	0159      	lsls	r1, r3, #5
 80065f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065f6:	0150      	lsls	r0, r2, #5
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	ebb2 080a 	subs.w	r8, r2, sl
 8006600:	eb63 090b 	sbc.w	r9, r3, fp
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	f04f 0300 	mov.w	r3, #0
 800660c:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006610:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006614:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006618:	ebb2 0408 	subs.w	r4, r2, r8
 800661c:	eb63 0509 	sbc.w	r5, r3, r9
 8006620:	f04f 0200 	mov.w	r2, #0
 8006624:	f04f 0300 	mov.w	r3, #0
 8006628:	00eb      	lsls	r3, r5, #3
 800662a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800662e:	00e2      	lsls	r2, r4, #3
 8006630:	4614      	mov	r4, r2
 8006632:	461d      	mov	r5, r3
 8006634:	eb14 030a 	adds.w	r3, r4, sl
 8006638:	603b      	str	r3, [r7, #0]
 800663a:	eb45 030b 	adc.w	r3, r5, fp
 800663e:	607b      	str	r3, [r7, #4]
 8006640:	f04f 0200 	mov.w	r2, #0
 8006644:	f04f 0300 	mov.w	r3, #0
 8006648:	e9d7 4500 	ldrd	r4, r5, [r7]
 800664c:	4629      	mov	r1, r5
 800664e:	028b      	lsls	r3, r1, #10
 8006650:	4620      	mov	r0, r4
 8006652:	4629      	mov	r1, r5
 8006654:	4604      	mov	r4, r0
 8006656:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800665a:	4601      	mov	r1, r0
 800665c:	028a      	lsls	r2, r1, #10
 800665e:	4610      	mov	r0, r2
 8006660:	4619      	mov	r1, r3
 8006662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006664:	2200      	movs	r2, #0
 8006666:	60bb      	str	r3, [r7, #8]
 8006668:	60fa      	str	r2, [r7, #12]
 800666a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800666e:	f7fa fa67 	bl	8000b40 <__aeabi_uldivmod>
 8006672:	4602      	mov	r2, r0
 8006674:	460b      	mov	r3, r1
 8006676:	4613      	mov	r3, r2
 8006678:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800667a:	4b0b      	ldr	r3, [pc, #44]	@ (80066a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	0c1b      	lsrs	r3, r3, #16
 8006680:	f003 0303 	and.w	r3, r3, #3
 8006684:	3301      	adds	r3, #1
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800668a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800668c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006692:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006694:	e002      	b.n	800669c <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006696:	4b05      	ldr	r3, [pc, #20]	@ (80066ac <HAL_RCC_GetSysClockFreq+0x184>)
 8006698:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800669a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800669c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3740      	adds	r7, #64	@ 0x40
 80066a2:	46bd      	mov	sp, r7
 80066a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066a8:	40023800 	.word	0x40023800
 80066ac:	00f42400 	.word	0x00f42400
 80066b0:	017d7840 	.word	0x017d7840

080066b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066b4:	b480      	push	{r7}
 80066b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066b8:	4b02      	ldr	r3, [pc, #8]	@ (80066c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80066ba:	681b      	ldr	r3, [r3, #0]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	46bd      	mov	sp, r7
 80066c0:	bc80      	pop	{r7}
 80066c2:	4770      	bx	lr
 80066c4:	2000004c 	.word	0x2000004c

080066c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e07b      	b.n	80067d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d108      	bne.n	80066f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066ea:	d009      	beq.n	8006700 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	61da      	str	r2, [r3, #28]
 80066f2:	e005      	b.n	8006700 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d106      	bne.n	8006720 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f7fc f99e 	bl	8002a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2202      	movs	r2, #2
 8006724:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006736:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006748:	431a      	orrs	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006752:	431a      	orrs	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	431a      	orrs	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	431a      	orrs	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006770:	431a      	orrs	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800677a:	431a      	orrs	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006784:	ea42 0103 	orr.w	r1, r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800678c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	430a      	orrs	r2, r1
 8006796:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	0c1b      	lsrs	r3, r3, #16
 800679e:	f003 0104 	and.w	r1, r3, #4
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a6:	f003 0210 	and.w	r2, r3, #16
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69da      	ldr	r2, [r3, #28]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b088      	sub	sp, #32
 80067de:	af00      	add	r7, sp, #0
 80067e0:	60f8      	str	r0, [r7, #12]
 80067e2:	60b9      	str	r1, [r7, #8]
 80067e4:	603b      	str	r3, [r7, #0]
 80067e6:	4613      	mov	r3, r2
 80067e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d101      	bne.n	80067fc <HAL_SPI_Transmit+0x22>
 80067f8:	2302      	movs	r3, #2
 80067fa:	e12d      	b.n	8006a58 <HAL_SPI_Transmit+0x27e>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006804:	f7fc fbc8 	bl	8002f98 <HAL_GetTick>
 8006808:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800680a:	88fb      	ldrh	r3, [r7, #6]
 800680c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b01      	cmp	r3, #1
 8006818:	d002      	beq.n	8006820 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800681a:	2302      	movs	r3, #2
 800681c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800681e:	e116      	b.n	8006a4e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d002      	beq.n	800682c <HAL_SPI_Transmit+0x52>
 8006826:	88fb      	ldrh	r3, [r7, #6]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d102      	bne.n	8006832 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006830:	e10d      	b.n	8006a4e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2203      	movs	r2, #3
 8006836:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	68ba      	ldr	r2, [r7, #8]
 8006844:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	88fa      	ldrh	r2, [r7, #6]
 800684a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	88fa      	ldrh	r2, [r7, #6]
 8006850:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006878:	d10f      	bne.n	800689a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006888:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006898:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068a4:	2b40      	cmp	r3, #64	@ 0x40
 80068a6:	d007      	beq.n	80068b8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80068b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068c0:	d14f      	bne.n	8006962 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <HAL_SPI_Transmit+0xf6>
 80068ca:	8afb      	ldrh	r3, [r7, #22]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d142      	bne.n	8006956 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068d4:	881a      	ldrh	r2, [r3, #0]
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e0:	1c9a      	adds	r2, r3, #2
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	3b01      	subs	r3, #1
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80068f4:	e02f      	b.n	8006956 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f003 0302 	and.w	r3, r3, #2
 8006900:	2b02      	cmp	r3, #2
 8006902:	d112      	bne.n	800692a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006908:	881a      	ldrh	r2, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006914:	1c9a      	adds	r2, r3, #2
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800691e:	b29b      	uxth	r3, r3
 8006920:	3b01      	subs	r3, #1
 8006922:	b29a      	uxth	r2, r3
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006928:	e015      	b.n	8006956 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800692a:	f7fc fb35 	bl	8002f98 <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	683a      	ldr	r2, [r7, #0]
 8006936:	429a      	cmp	r2, r3
 8006938:	d803      	bhi.n	8006942 <HAL_SPI_Transmit+0x168>
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006940:	d102      	bne.n	8006948 <HAL_SPI_Transmit+0x16e>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d106      	bne.n	8006956 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2201      	movs	r2, #1
 8006950:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006954:	e07b      	b.n	8006a4e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800695a:	b29b      	uxth	r3, r3
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1ca      	bne.n	80068f6 <HAL_SPI_Transmit+0x11c>
 8006960:	e050      	b.n	8006a04 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <HAL_SPI_Transmit+0x196>
 800696a:	8afb      	ldrh	r3, [r7, #22]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d144      	bne.n	80069fa <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	330c      	adds	r3, #12
 800697a:	7812      	ldrb	r2, [r2, #0]
 800697c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800698c:	b29b      	uxth	r3, r3
 800698e:	3b01      	subs	r3, #1
 8006990:	b29a      	uxth	r2, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006996:	e030      	b.n	80069fa <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d113      	bne.n	80069ce <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	330c      	adds	r3, #12
 80069b0:	7812      	ldrb	r2, [r2, #0]
 80069b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	3b01      	subs	r3, #1
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	86da      	strh	r2, [r3, #54]	@ 0x36
 80069cc:	e015      	b.n	80069fa <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069ce:	f7fc fae3 	bl	8002f98 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d803      	bhi.n	80069e6 <HAL_SPI_Transmit+0x20c>
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e4:	d102      	bne.n	80069ec <HAL_SPI_Transmit+0x212>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d106      	bne.n	80069fa <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80069f8:	e029      	b.n	8006a4e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1c9      	bne.n	8006998 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a04:	69ba      	ldr	r2, [r7, #24]
 8006a06:	6839      	ldr	r1, [r7, #0]
 8006a08:	68f8      	ldr	r0, [r7, #12]
 8006a0a:	f000 fbae 	bl	800716a <SPI_EndRxTxTransaction>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d002      	beq.n	8006a1a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2220      	movs	r2, #32
 8006a18:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10a      	bne.n	8006a38 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a22:	2300      	movs	r3, #0
 8006a24:	613b      	str	r3, [r7, #16]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	613b      	str	r3, [r7, #16]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	613b      	str	r3, [r7, #16]
 8006a36:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	77fb      	strb	r3, [r7, #31]
 8006a44:	e003      	b.n	8006a4e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006a56:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3720      	adds	r7, #32
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b088      	sub	sp, #32
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006a70:	2300      	movs	r3, #0
 8006a72:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d002      	beq.n	8006a86 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006a80:	2302      	movs	r3, #2
 8006a82:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a84:	e0fb      	b.n	8006c7e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a8e:	d112      	bne.n	8006ab6 <HAL_SPI_Receive+0x56>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10e      	bne.n	8006ab6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2204      	movs	r2, #4
 8006a9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006aa0:	88fa      	ldrh	r2, [r7, #6]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	68b9      	ldr	r1, [r7, #8]
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 f8ef 	bl	8006c90 <HAL_SPI_TransmitReceive>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	e0e8      	b.n	8006c88 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d101      	bne.n	8006ac4 <HAL_SPI_Receive+0x64>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	e0e1      	b.n	8006c88 <HAL_SPI_Receive+0x228>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006acc:	f7fc fa64 	bl	8002f98 <HAL_GetTick>
 8006ad0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d002      	beq.n	8006ade <HAL_SPI_Receive+0x7e>
 8006ad8:	88fb      	ldrh	r3, [r7, #6]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d102      	bne.n	8006ae4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ae2:	e0cc      	b.n	8006c7e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2204      	movs	r2, #4
 8006ae8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	68ba      	ldr	r2, [r7, #8]
 8006af6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	88fa      	ldrh	r2, [r7, #6]
 8006afc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	88fa      	ldrh	r2, [r7, #6]
 8006b02:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b2a:	d10f      	bne.n	8006b4c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006b4a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b56:	2b40      	cmp	r3, #64	@ 0x40
 8006b58:	d007      	beq.n	8006b6a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b68:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d16a      	bne.n	8006c48 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006b72:	e032      	b.n	8006bda <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d115      	bne.n	8006bae <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f103 020c 	add.w	r2, r3, #12
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b8e:	7812      	ldrb	r2, [r2, #0]
 8006b90:	b2d2      	uxtb	r2, r2
 8006b92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006bac:	e015      	b.n	8006bda <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bae:	f7fc f9f3 	bl	8002f98 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d803      	bhi.n	8006bc6 <HAL_SPI_Receive+0x166>
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc4:	d102      	bne.n	8006bcc <HAL_SPI_Receive+0x16c>
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d106      	bne.n	8006bda <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006bd8:	e051      	b.n	8006c7e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1c7      	bne.n	8006b74 <HAL_SPI_Receive+0x114>
 8006be4:	e035      	b.n	8006c52 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d113      	bne.n	8006c1c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bfe:	b292      	uxth	r2, r2
 8006c00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c06:	1c9a      	adds	r2, r3, #2
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	3b01      	subs	r3, #1
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006c1a:	e015      	b.n	8006c48 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c1c:	f7fc f9bc 	bl	8002f98 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d803      	bhi.n	8006c34 <HAL_SPI_Receive+0x1d4>
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c32:	d102      	bne.n	8006c3a <HAL_SPI_Receive+0x1da>
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d106      	bne.n	8006c48 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8006c46:	e01a      	b.n	8006c7e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1c9      	bne.n	8006be6 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f000 fa52 	bl	8007100 <SPI_EndRxTransaction>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2220      	movs	r2, #32
 8006c66:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d002      	beq.n	8006c76 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	75fb      	strb	r3, [r7, #23]
 8006c74:	e003      	b.n	8006c7e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3718      	adds	r7, #24
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b08c      	sub	sp, #48	@ 0x30
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
 8006c9c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d101      	bne.n	8006cb6 <HAL_SPI_TransmitReceive+0x26>
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e198      	b.n	8006fe8 <HAL_SPI_TransmitReceive+0x358>
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cbe:	f7fc f96b 	bl	8002f98 <HAL_GetTick>
 8006cc2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006cd4:	887b      	ldrh	r3, [r7, #2]
 8006cd6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006cd8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d00f      	beq.n	8006d00 <HAL_SPI_TransmitReceive+0x70>
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ce6:	d107      	bne.n	8006cf8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d103      	bne.n	8006cf8 <HAL_SPI_TransmitReceive+0x68>
 8006cf0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006cf4:	2b04      	cmp	r3, #4
 8006cf6:	d003      	beq.n	8006d00 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006cfe:	e16d      	b.n	8006fdc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d005      	beq.n	8006d12 <HAL_SPI_TransmitReceive+0x82>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d002      	beq.n	8006d12 <HAL_SPI_TransmitReceive+0x82>
 8006d0c:	887b      	ldrh	r3, [r7, #2]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d103      	bne.n	8006d1a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006d18:	e160      	b.n	8006fdc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	d003      	beq.n	8006d2e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2205      	movs	r2, #5
 8006d2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	887a      	ldrh	r2, [r7, #2]
 8006d3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	887a      	ldrh	r2, [r7, #2]
 8006d44:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	887a      	ldrh	r2, [r7, #2]
 8006d50:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	887a      	ldrh	r2, [r7, #2]
 8006d56:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d6e:	2b40      	cmp	r3, #64	@ 0x40
 8006d70:	d007      	beq.n	8006d82 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d8a:	d17c      	bne.n	8006e86 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d002      	beq.n	8006d9a <HAL_SPI_TransmitReceive+0x10a>
 8006d94:	8b7b      	ldrh	r3, [r7, #26]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d16a      	bne.n	8006e70 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d9e:	881a      	ldrh	r2, [r3, #0]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006daa:	1c9a      	adds	r2, r3, #2
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	3b01      	subs	r3, #1
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dbe:	e057      	b.n	8006e70 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d11b      	bne.n	8006e06 <HAL_SPI_TransmitReceive+0x176>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d016      	beq.n	8006e06 <HAL_SPI_TransmitReceive+0x176>
 8006dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d113      	bne.n	8006e06 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006de2:	881a      	ldrh	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dee:	1c9a      	adds	r2, r3, #2
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d119      	bne.n	8006e48 <HAL_SPI_TransmitReceive+0x1b8>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d014      	beq.n	8006e48 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68da      	ldr	r2, [r3, #12]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e28:	b292      	uxth	r2, r2
 8006e2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e30:	1c9a      	adds	r2, r3, #2
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	b29a      	uxth	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e44:	2301      	movs	r3, #1
 8006e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006e48:	f7fc f8a6 	bl	8002f98 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d80b      	bhi.n	8006e70 <HAL_SPI_TransmitReceive+0x1e0>
 8006e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5e:	d007      	beq.n	8006e70 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006e60:	2303      	movs	r3, #3
 8006e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006e6e:	e0b5      	b.n	8006fdc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1a2      	bne.n	8006dc0 <HAL_SPI_TransmitReceive+0x130>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d19d      	bne.n	8006dc0 <HAL_SPI_TransmitReceive+0x130>
 8006e84:	e080      	b.n	8006f88 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d002      	beq.n	8006e94 <HAL_SPI_TransmitReceive+0x204>
 8006e8e:	8b7b      	ldrh	r3, [r7, #26]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d16f      	bne.n	8006f74 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	330c      	adds	r3, #12
 8006e9e:	7812      	ldrb	r2, [r2, #0]
 8006ea0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ea6:	1c5a      	adds	r2, r3, #1
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006eba:	e05b      	b.n	8006f74 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d11c      	bne.n	8006f04 <HAL_SPI_TransmitReceive+0x274>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d017      	beq.n	8006f04 <HAL_SPI_TransmitReceive+0x274>
 8006ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d114      	bne.n	8006f04 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	330c      	adds	r3, #12
 8006ee4:	7812      	ldrb	r2, [r2, #0]
 8006ee6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eec:	1c5a      	adds	r2, r3, #1
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f003 0301 	and.w	r3, r3, #1
 8006f0e:	2b01      	cmp	r3, #1
 8006f10:	d119      	bne.n	8006f46 <HAL_SPI_TransmitReceive+0x2b6>
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d014      	beq.n	8006f46 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f26:	b2d2      	uxtb	r2, r2
 8006f28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f42:	2301      	movs	r3, #1
 8006f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006f46:	f7fc f827 	bl	8002f98 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d803      	bhi.n	8006f5e <HAL_SPI_TransmitReceive+0x2ce>
 8006f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5c:	d102      	bne.n	8006f64 <HAL_SPI_TransmitReceive+0x2d4>
 8006f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d107      	bne.n	8006f74 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006f72:	e033      	b.n	8006fdc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d19e      	bne.n	8006ebc <HAL_SPI_TransmitReceive+0x22c>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d199      	bne.n	8006ebc <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 f8ec 	bl	800716a <SPI_EndRxTxTransaction>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d006      	beq.n	8006fa6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006fa4:	e01a      	b.n	8006fdc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10a      	bne.n	8006fc4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fae:	2300      	movs	r3, #0
 8006fb0:	617b      	str	r3, [r7, #20]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	617b      	str	r3, [r7, #20]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	617b      	str	r3, [r7, #20]
 8006fc2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fd2:	e003      	b.n	8006fdc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006fe4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3730      	adds	r7, #48	@ 0x30
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b088      	sub	sp, #32
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	603b      	str	r3, [r7, #0]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007000:	f7fb ffca 	bl	8002f98 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007008:	1a9b      	subs	r3, r3, r2
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	4413      	add	r3, r2
 800700e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007010:	f7fb ffc2 	bl	8002f98 <HAL_GetTick>
 8007014:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007016:	4b39      	ldr	r3, [pc, #228]	@ (80070fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	015b      	lsls	r3, r3, #5
 800701c:	0d1b      	lsrs	r3, r3, #20
 800701e:	69fa      	ldr	r2, [r7, #28]
 8007020:	fb02 f303 	mul.w	r3, r2, r3
 8007024:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007026:	e054      	b.n	80070d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702e:	d050      	beq.n	80070d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007030:	f7fb ffb2 	bl	8002f98 <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	69fa      	ldr	r2, [r7, #28]
 800703c:	429a      	cmp	r2, r3
 800703e:	d902      	bls.n	8007046 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d13d      	bne.n	80070c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007054:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800705e:	d111      	bne.n	8007084 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007068:	d004      	beq.n	8007074 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007072:	d107      	bne.n	8007084 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007082:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007088:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800708c:	d10f      	bne.n	80070ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80070ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e017      	b.n	80070f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d101      	bne.n	80070cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	3b01      	subs	r3, #1
 80070d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689a      	ldr	r2, [r3, #8]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	4013      	ands	r3, r2
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	429a      	cmp	r2, r3
 80070e0:	bf0c      	ite	eq
 80070e2:	2301      	moveq	r3, #1
 80070e4:	2300      	movne	r3, #0
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	461a      	mov	r2, r3
 80070ea:	79fb      	ldrb	r3, [r7, #7]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d19b      	bne.n	8007028 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3720      	adds	r7, #32
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	2000004c 	.word	0x2000004c

08007100 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b086      	sub	sp, #24
 8007104:	af02      	add	r7, sp, #8
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007114:	d111      	bne.n	800713a <SPI_EndRxTransaction+0x3a>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800711e:	d004      	beq.n	800712a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007128:	d107      	bne.n	800713a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007138:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	2200      	movs	r2, #0
 8007142:	2180      	movs	r1, #128	@ 0x80
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f7ff ff53 	bl	8006ff0 <SPI_WaitFlagStateUntilTimeout>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d007      	beq.n	8007160 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007154:	f043 0220 	orr.w	r2, r3, #32
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800715c:	2303      	movs	r3, #3
 800715e:	e000      	b.n	8007162 <SPI_EndRxTransaction+0x62>
  }
  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800716a:	b580      	push	{r7, lr}
 800716c:	b086      	sub	sp, #24
 800716e:	af02      	add	r7, sp, #8
 8007170:	60f8      	str	r0, [r7, #12]
 8007172:	60b9      	str	r1, [r7, #8]
 8007174:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	2200      	movs	r2, #0
 800717e:	2180      	movs	r1, #128	@ 0x80
 8007180:	68f8      	ldr	r0, [r7, #12]
 8007182:	f7ff ff35 	bl	8006ff0 <SPI_WaitFlagStateUntilTimeout>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d007      	beq.n	800719c <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007190:	f043 0220 	orr.w	r2, r3, #32
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e000      	b.n	800719e <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b082      	sub	sp, #8
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e041      	b.n	800723c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d106      	bne.n	80071d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f7fb fe2f 	bl	8002e30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2202      	movs	r2, #2
 80071d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	3304      	adds	r3, #4
 80071e2:	4619      	mov	r1, r3
 80071e4:	4610      	mov	r0, r2
 80071e6:	f000 fa8f 	bl	8007708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800723a:	2300      	movs	r3, #0
}
 800723c:	4618      	mov	r0, r3
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b01      	cmp	r3, #1
 8007256:	d001      	beq.n	800725c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e04e      	b.n	80072fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2202      	movs	r2, #2
 8007260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68da      	ldr	r2, [r3, #12]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f042 0201 	orr.w	r2, r2, #1
 8007272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a22      	ldr	r2, [pc, #136]	@ (8007304 <HAL_TIM_Base_Start_IT+0xc0>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d022      	beq.n	80072c4 <HAL_TIM_Base_Start_IT+0x80>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007286:	d01d      	beq.n	80072c4 <HAL_TIM_Base_Start_IT+0x80>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a1e      	ldr	r2, [pc, #120]	@ (8007308 <HAL_TIM_Base_Start_IT+0xc4>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d018      	beq.n	80072c4 <HAL_TIM_Base_Start_IT+0x80>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a1d      	ldr	r2, [pc, #116]	@ (800730c <HAL_TIM_Base_Start_IT+0xc8>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d013      	beq.n	80072c4 <HAL_TIM_Base_Start_IT+0x80>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a1b      	ldr	r2, [pc, #108]	@ (8007310 <HAL_TIM_Base_Start_IT+0xcc>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d00e      	beq.n	80072c4 <HAL_TIM_Base_Start_IT+0x80>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a1a      	ldr	r2, [pc, #104]	@ (8007314 <HAL_TIM_Base_Start_IT+0xd0>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d009      	beq.n	80072c4 <HAL_TIM_Base_Start_IT+0x80>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a18      	ldr	r2, [pc, #96]	@ (8007318 <HAL_TIM_Base_Start_IT+0xd4>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d004      	beq.n	80072c4 <HAL_TIM_Base_Start_IT+0x80>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a17      	ldr	r2, [pc, #92]	@ (800731c <HAL_TIM_Base_Start_IT+0xd8>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d111      	bne.n	80072e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f003 0307 	and.w	r3, r3, #7
 80072ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b06      	cmp	r3, #6
 80072d4:	d010      	beq.n	80072f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f042 0201 	orr.w	r2, r2, #1
 80072e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072e6:	e007      	b.n	80072f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f042 0201 	orr.w	r2, r2, #1
 80072f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	bc80      	pop	{r7}
 8007302:	4770      	bx	lr
 8007304:	40010000 	.word	0x40010000
 8007308:	40000400 	.word	0x40000400
 800730c:	40000800 	.word	0x40000800
 8007310:	40000c00 	.word	0x40000c00
 8007314:	40010400 	.word	0x40010400
 8007318:	40014000 	.word	0x40014000
 800731c:	40001800 	.word	0x40001800

08007320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b02      	cmp	r3, #2
 8007334:	d122      	bne.n	800737c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f003 0302 	and.w	r3, r3, #2
 8007340:	2b02      	cmp	r3, #2
 8007342:	d11b      	bne.n	800737c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f06f 0202 	mvn.w	r2, #2
 800734c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	f003 0303 	and.w	r3, r3, #3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f9b4 	bl	80076d0 <HAL_TIM_IC_CaptureCallback>
 8007368:	e005      	b.n	8007376 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f9a7 	bl	80076be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f9b6 	bl	80076e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	f003 0304 	and.w	r3, r3, #4
 8007386:	2b04      	cmp	r3, #4
 8007388:	d122      	bne.n	80073d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	f003 0304 	and.w	r3, r3, #4
 8007394:	2b04      	cmp	r3, #4
 8007396:	d11b      	bne.n	80073d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f06f 0204 	mvn.w	r2, #4
 80073a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2202      	movs	r2, #2
 80073a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	699b      	ldr	r3, [r3, #24]
 80073ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f98a 	bl	80076d0 <HAL_TIM_IC_CaptureCallback>
 80073bc:	e005      	b.n	80073ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f97d 	bl	80076be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f98c 	bl	80076e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	691b      	ldr	r3, [r3, #16]
 80073d6:	f003 0308 	and.w	r3, r3, #8
 80073da:	2b08      	cmp	r3, #8
 80073dc:	d122      	bne.n	8007424 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68db      	ldr	r3, [r3, #12]
 80073e4:	f003 0308 	and.w	r3, r3, #8
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d11b      	bne.n	8007424 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f06f 0208 	mvn.w	r2, #8
 80073f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2204      	movs	r2, #4
 80073fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	f003 0303 	and.w	r3, r3, #3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d003      	beq.n	8007412 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f960 	bl	80076d0 <HAL_TIM_IC_CaptureCallback>
 8007410:	e005      	b.n	800741e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f953 	bl	80076be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f962 	bl	80076e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	f003 0310 	and.w	r3, r3, #16
 800742e:	2b10      	cmp	r3, #16
 8007430:	d122      	bne.n	8007478 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68db      	ldr	r3, [r3, #12]
 8007438:	f003 0310 	and.w	r3, r3, #16
 800743c:	2b10      	cmp	r3, #16
 800743e:	d11b      	bne.n	8007478 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f06f 0210 	mvn.w	r2, #16
 8007448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2208      	movs	r2, #8
 800744e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	69db      	ldr	r3, [r3, #28]
 8007456:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f936 	bl	80076d0 <HAL_TIM_IC_CaptureCallback>
 8007464:	e005      	b.n	8007472 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f929 	bl	80076be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f938 	bl	80076e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b01      	cmp	r3, #1
 8007484:	d10e      	bne.n	80074a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b01      	cmp	r3, #1
 8007492:	d107      	bne.n	80074a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f06f 0201 	mvn.w	r2, #1
 800749c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7fa fa92 	bl	80019c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074ae:	2b80      	cmp	r3, #128	@ 0x80
 80074b0:	d10e      	bne.n	80074d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074bc:	2b80      	cmp	r3, #128	@ 0x80
 80074be:	d107      	bne.n	80074d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80074c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fad3 	bl	8007a76 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074da:	2b40      	cmp	r3, #64	@ 0x40
 80074dc:	d10e      	bne.n	80074fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074e8:	2b40      	cmp	r3, #64	@ 0x40
 80074ea:	d107      	bne.n	80074fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80074f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f8fc 	bl	80076f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	f003 0320 	and.w	r3, r3, #32
 8007506:	2b20      	cmp	r3, #32
 8007508:	d10e      	bne.n	8007528 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f003 0320 	and.w	r3, r3, #32
 8007514:	2b20      	cmp	r3, #32
 8007516:	d107      	bne.n	8007528 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f06f 0220 	mvn.w	r2, #32
 8007520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fa9e 	bl	8007a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007528:	bf00      	nop
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007544:	2b01      	cmp	r3, #1
 8007546:	d101      	bne.n	800754c <HAL_TIM_ConfigClockSource+0x1c>
 8007548:	2302      	movs	r3, #2
 800754a:	e0b4      	b.n	80076b6 <HAL_TIM_ConfigClockSource+0x186>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800756a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007572:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007584:	d03e      	beq.n	8007604 <HAL_TIM_ConfigClockSource+0xd4>
 8007586:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800758a:	f200 8087 	bhi.w	800769c <HAL_TIM_ConfigClockSource+0x16c>
 800758e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007592:	f000 8086 	beq.w	80076a2 <HAL_TIM_ConfigClockSource+0x172>
 8007596:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800759a:	d87f      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 800759c:	2b70      	cmp	r3, #112	@ 0x70
 800759e:	d01a      	beq.n	80075d6 <HAL_TIM_ConfigClockSource+0xa6>
 80075a0:	2b70      	cmp	r3, #112	@ 0x70
 80075a2:	d87b      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075a4:	2b60      	cmp	r3, #96	@ 0x60
 80075a6:	d050      	beq.n	800764a <HAL_TIM_ConfigClockSource+0x11a>
 80075a8:	2b60      	cmp	r3, #96	@ 0x60
 80075aa:	d877      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075ac:	2b50      	cmp	r3, #80	@ 0x50
 80075ae:	d03c      	beq.n	800762a <HAL_TIM_ConfigClockSource+0xfa>
 80075b0:	2b50      	cmp	r3, #80	@ 0x50
 80075b2:	d873      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075b4:	2b40      	cmp	r3, #64	@ 0x40
 80075b6:	d058      	beq.n	800766a <HAL_TIM_ConfigClockSource+0x13a>
 80075b8:	2b40      	cmp	r3, #64	@ 0x40
 80075ba:	d86f      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075bc:	2b30      	cmp	r3, #48	@ 0x30
 80075be:	d064      	beq.n	800768a <HAL_TIM_ConfigClockSource+0x15a>
 80075c0:	2b30      	cmp	r3, #48	@ 0x30
 80075c2:	d86b      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075c4:	2b20      	cmp	r3, #32
 80075c6:	d060      	beq.n	800768a <HAL_TIM_ConfigClockSource+0x15a>
 80075c8:	2b20      	cmp	r3, #32
 80075ca:	d867      	bhi.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d05c      	beq.n	800768a <HAL_TIM_ConfigClockSource+0x15a>
 80075d0:	2b10      	cmp	r3, #16
 80075d2:	d05a      	beq.n	800768a <HAL_TIM_ConfigClockSource+0x15a>
 80075d4:	e062      	b.n	800769c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075e6:	f000 f9a4 	bl	8007932 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80075f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	609a      	str	r2, [r3, #8]
      break;
 8007602:	e04f      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007614:	f000 f98d 	bl	8007932 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689a      	ldr	r2, [r3, #8]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007626:	609a      	str	r2, [r3, #8]
      break;
 8007628:	e03c      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007636:	461a      	mov	r2, r3
 8007638:	f000 f904 	bl	8007844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2150      	movs	r1, #80	@ 0x50
 8007642:	4618      	mov	r0, r3
 8007644:	f000 f95b 	bl	80078fe <TIM_ITRx_SetConfig>
      break;
 8007648:	e02c      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007656:	461a      	mov	r2, r3
 8007658:	f000 f922 	bl	80078a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2160      	movs	r1, #96	@ 0x60
 8007662:	4618      	mov	r0, r3
 8007664:	f000 f94b 	bl	80078fe <TIM_ITRx_SetConfig>
      break;
 8007668:	e01c      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007676:	461a      	mov	r2, r3
 8007678:	f000 f8e4 	bl	8007844 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2140      	movs	r1, #64	@ 0x40
 8007682:	4618      	mov	r0, r3
 8007684:	f000 f93b 	bl	80078fe <TIM_ITRx_SetConfig>
      break;
 8007688:	e00c      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4619      	mov	r1, r3
 8007694:	4610      	mov	r0, r2
 8007696:	f000 f932 	bl	80078fe <TIM_ITRx_SetConfig>
      break;
 800769a:	e003      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	73fb      	strb	r3, [r7, #15]
      break;
 80076a0:	e000      	b.n	80076a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80076a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076be:	b480      	push	{r7}
 80076c0:	b083      	sub	sp, #12
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076c6:	bf00      	nop
 80076c8:	370c      	adds	r7, #12
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bc80      	pop	{r7}
 80076ce:	4770      	bx	lr

080076d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	bc80      	pop	{r7}
 80076e0:	4770      	bx	lr

080076e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b083      	sub	sp, #12
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076ea:	bf00      	nop
 80076ec:	370c      	adds	r7, #12
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bc80      	pop	{r7}
 80076f2:	4770      	bx	lr

080076f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076fc:	bf00      	nop
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	bc80      	pop	{r7}
 8007704:	4770      	bx	lr
	...

08007708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007708:	b480      	push	{r7}
 800770a:	b085      	sub	sp, #20
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a3f      	ldr	r2, [pc, #252]	@ (8007818 <TIM_Base_SetConfig+0x110>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d013      	beq.n	8007748 <TIM_Base_SetConfig+0x40>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007726:	d00f      	beq.n	8007748 <TIM_Base_SetConfig+0x40>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a3c      	ldr	r2, [pc, #240]	@ (800781c <TIM_Base_SetConfig+0x114>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d00b      	beq.n	8007748 <TIM_Base_SetConfig+0x40>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a3b      	ldr	r2, [pc, #236]	@ (8007820 <TIM_Base_SetConfig+0x118>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d007      	beq.n	8007748 <TIM_Base_SetConfig+0x40>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a3a      	ldr	r2, [pc, #232]	@ (8007824 <TIM_Base_SetConfig+0x11c>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d003      	beq.n	8007748 <TIM_Base_SetConfig+0x40>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a39      	ldr	r2, [pc, #228]	@ (8007828 <TIM_Base_SetConfig+0x120>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d108      	bne.n	800775a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800774e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	4313      	orrs	r3, r2
 8007758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a2e      	ldr	r2, [pc, #184]	@ (8007818 <TIM_Base_SetConfig+0x110>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d02b      	beq.n	80077ba <TIM_Base_SetConfig+0xb2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007768:	d027      	beq.n	80077ba <TIM_Base_SetConfig+0xb2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a2b      	ldr	r2, [pc, #172]	@ (800781c <TIM_Base_SetConfig+0x114>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d023      	beq.n	80077ba <TIM_Base_SetConfig+0xb2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a2a      	ldr	r2, [pc, #168]	@ (8007820 <TIM_Base_SetConfig+0x118>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d01f      	beq.n	80077ba <TIM_Base_SetConfig+0xb2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a29      	ldr	r2, [pc, #164]	@ (8007824 <TIM_Base_SetConfig+0x11c>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d01b      	beq.n	80077ba <TIM_Base_SetConfig+0xb2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a28      	ldr	r2, [pc, #160]	@ (8007828 <TIM_Base_SetConfig+0x120>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d017      	beq.n	80077ba <TIM_Base_SetConfig+0xb2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a27      	ldr	r2, [pc, #156]	@ (800782c <TIM_Base_SetConfig+0x124>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d013      	beq.n	80077ba <TIM_Base_SetConfig+0xb2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a26      	ldr	r2, [pc, #152]	@ (8007830 <TIM_Base_SetConfig+0x128>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d00f      	beq.n	80077ba <TIM_Base_SetConfig+0xb2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a25      	ldr	r2, [pc, #148]	@ (8007834 <TIM_Base_SetConfig+0x12c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d00b      	beq.n	80077ba <TIM_Base_SetConfig+0xb2>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	4a24      	ldr	r2, [pc, #144]	@ (8007838 <TIM_Base_SetConfig+0x130>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d007      	beq.n	80077ba <TIM_Base_SetConfig+0xb2>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a23      	ldr	r2, [pc, #140]	@ (800783c <TIM_Base_SetConfig+0x134>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d003      	beq.n	80077ba <TIM_Base_SetConfig+0xb2>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a22      	ldr	r2, [pc, #136]	@ (8007840 <TIM_Base_SetConfig+0x138>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d108      	bne.n	80077cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	689a      	ldr	r2, [r3, #8]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a09      	ldr	r2, [pc, #36]	@ (8007818 <TIM_Base_SetConfig+0x110>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d003      	beq.n	8007800 <TIM_Base_SetConfig+0xf8>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a0b      	ldr	r2, [pc, #44]	@ (8007828 <TIM_Base_SetConfig+0x120>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d103      	bne.n	8007808 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	691a      	ldr	r2, [r3, #16]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	615a      	str	r2, [r3, #20]
}
 800780e:	bf00      	nop
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	bc80      	pop	{r7}
 8007816:	4770      	bx	lr
 8007818:	40010000 	.word	0x40010000
 800781c:	40000400 	.word	0x40000400
 8007820:	40000800 	.word	0x40000800
 8007824:	40000c00 	.word	0x40000c00
 8007828:	40010400 	.word	0x40010400
 800782c:	40014000 	.word	0x40014000
 8007830:	40014400 	.word	0x40014400
 8007834:	40014800 	.word	0x40014800
 8007838:	40001800 	.word	0x40001800
 800783c:	40001c00 	.word	0x40001c00
 8007840:	40002000 	.word	0x40002000

08007844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007844:	b480      	push	{r7}
 8007846:	b087      	sub	sp, #28
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6a1b      	ldr	r3, [r3, #32]
 8007854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6a1b      	ldr	r3, [r3, #32]
 800785a:	f023 0201 	bic.w	r2, r3, #1
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	699b      	ldr	r3, [r3, #24]
 8007866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800786e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	011b      	lsls	r3, r3, #4
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	4313      	orrs	r3, r2
 8007878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f023 030a 	bic.w	r3, r3, #10
 8007880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	4313      	orrs	r3, r2
 8007888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	697a      	ldr	r2, [r7, #20]
 8007894:	621a      	str	r2, [r3, #32]
}
 8007896:	bf00      	nop
 8007898:	371c      	adds	r7, #28
 800789a:	46bd      	mov	sp, r7
 800789c:	bc80      	pop	{r7}
 800789e:	4770      	bx	lr

080078a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b087      	sub	sp, #28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	f023 0210 	bic.w	r2, r3, #16
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80078ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	031b      	lsls	r3, r3, #12
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80078dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	011b      	lsls	r3, r3, #4
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	621a      	str	r2, [r3, #32]
}
 80078f4:	bf00      	nop
 80078f6:	371c      	adds	r7, #28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bc80      	pop	{r7}
 80078fc:	4770      	bx	lr

080078fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078fe:	b480      	push	{r7}
 8007900:	b085      	sub	sp, #20
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007914:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007916:	683a      	ldr	r2, [r7, #0]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4313      	orrs	r3, r2
 800791c:	f043 0307 	orr.w	r3, r3, #7
 8007920:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	609a      	str	r2, [r3, #8]
}
 8007928:	bf00      	nop
 800792a:	3714      	adds	r7, #20
 800792c:	46bd      	mov	sp, r7
 800792e:	bc80      	pop	{r7}
 8007930:	4770      	bx	lr

08007932 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007932:	b480      	push	{r7}
 8007934:	b087      	sub	sp, #28
 8007936:	af00      	add	r7, sp, #0
 8007938:	60f8      	str	r0, [r7, #12]
 800793a:	60b9      	str	r1, [r7, #8]
 800793c:	607a      	str	r2, [r7, #4]
 800793e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800794c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	021a      	lsls	r2, r3, #8
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	431a      	orrs	r2, r3
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	4313      	orrs	r3, r2
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	4313      	orrs	r3, r2
 800795e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	609a      	str	r2, [r3, #8]
}
 8007966:	bf00      	nop
 8007968:	371c      	adds	r7, #28
 800796a:	46bd      	mov	sp, r7
 800796c:	bc80      	pop	{r7}
 800796e:	4770      	bx	lr

08007970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007980:	2b01      	cmp	r3, #1
 8007982:	d101      	bne.n	8007988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007984:	2302      	movs	r3, #2
 8007986:	e05a      	b.n	8007a3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a20      	ldr	r2, [pc, #128]	@ (8007a48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d022      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079d4:	d01d      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a1c      	ldr	r2, [pc, #112]	@ (8007a4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d018      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a1a      	ldr	r2, [pc, #104]	@ (8007a50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d013      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a19      	ldr	r2, [pc, #100]	@ (8007a54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d00e      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a17      	ldr	r2, [pc, #92]	@ (8007a58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d009      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a16      	ldr	r2, [pc, #88]	@ (8007a5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d004      	beq.n	8007a12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a14      	ldr	r2, [pc, #80]	@ (8007a60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d10c      	bne.n	8007a2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3714      	adds	r7, #20
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bc80      	pop	{r7}
 8007a46:	4770      	bx	lr
 8007a48:	40010000 	.word	0x40010000
 8007a4c:	40000400 	.word	0x40000400
 8007a50:	40000800 	.word	0x40000800
 8007a54:	40000c00 	.word	0x40000c00
 8007a58:	40010400 	.word	0x40010400
 8007a5c:	40014000 	.word	0x40014000
 8007a60:	40001800 	.word	0x40001800

08007a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bc80      	pop	{r7}
 8007a74:	4770      	bx	lr

08007a76 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b083      	sub	sp, #12
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a7e:	bf00      	nop
 8007a80:	370c      	adds	r7, #12
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bc80      	pop	{r7}
 8007a86:	4770      	bx	lr

08007a88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a88:	b084      	sub	sp, #16
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b084      	sub	sp, #16
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	f107 001c 	add.w	r0, r7, #28
 8007a96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d122      	bne.n	8007ae6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aa4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007ab4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ab8:	687a      	ldr	r2, [r7, #4]
 8007aba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d105      	bne.n	8007ada <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f001 fabc 	bl	8009058 <USB_CoreReset>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	73fb      	strb	r3, [r7, #15]
 8007ae4:	e010      	b.n	8007b08 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f001 fab0 	bl	8009058 <USB_CoreReset>
 8007af8:	4603      	mov	r3, r0
 8007afa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8007b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d10b      	bne.n	8007b26 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f043 0206 	orr.w	r2, r3, #6
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f043 0220 	orr.w	r2, r3, #32
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b32:	b004      	add	sp, #16
 8007b34:	4770      	bx	lr
	...

08007b38 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b087      	sub	sp, #28
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	4613      	mov	r3, r2
 8007b44:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007b46:	79fb      	ldrb	r3, [r7, #7]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d165      	bne.n	8007c18 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	4a41      	ldr	r2, [pc, #260]	@ (8007c54 <USB_SetTurnaroundTime+0x11c>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d906      	bls.n	8007b62 <USB_SetTurnaroundTime+0x2a>
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	4a40      	ldr	r2, [pc, #256]	@ (8007c58 <USB_SetTurnaroundTime+0x120>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d202      	bcs.n	8007b62 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007b5c:	230f      	movs	r3, #15
 8007b5e:	617b      	str	r3, [r7, #20]
 8007b60:	e062      	b.n	8007c28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	4a3c      	ldr	r2, [pc, #240]	@ (8007c58 <USB_SetTurnaroundTime+0x120>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d306      	bcc.n	8007b78 <USB_SetTurnaroundTime+0x40>
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	4a3b      	ldr	r2, [pc, #236]	@ (8007c5c <USB_SetTurnaroundTime+0x124>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d202      	bcs.n	8007b78 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007b72:	230e      	movs	r3, #14
 8007b74:	617b      	str	r3, [r7, #20]
 8007b76:	e057      	b.n	8007c28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	4a38      	ldr	r2, [pc, #224]	@ (8007c5c <USB_SetTurnaroundTime+0x124>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d306      	bcc.n	8007b8e <USB_SetTurnaroundTime+0x56>
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	4a37      	ldr	r2, [pc, #220]	@ (8007c60 <USB_SetTurnaroundTime+0x128>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d202      	bcs.n	8007b8e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007b88:	230d      	movs	r3, #13
 8007b8a:	617b      	str	r3, [r7, #20]
 8007b8c:	e04c      	b.n	8007c28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	4a33      	ldr	r2, [pc, #204]	@ (8007c60 <USB_SetTurnaroundTime+0x128>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d306      	bcc.n	8007ba4 <USB_SetTurnaroundTime+0x6c>
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	4a32      	ldr	r2, [pc, #200]	@ (8007c64 <USB_SetTurnaroundTime+0x12c>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d802      	bhi.n	8007ba4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007b9e:	230c      	movs	r3, #12
 8007ba0:	617b      	str	r3, [r7, #20]
 8007ba2:	e041      	b.n	8007c28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	4a2f      	ldr	r2, [pc, #188]	@ (8007c64 <USB_SetTurnaroundTime+0x12c>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d906      	bls.n	8007bba <USB_SetTurnaroundTime+0x82>
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	4a2e      	ldr	r2, [pc, #184]	@ (8007c68 <USB_SetTurnaroundTime+0x130>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d802      	bhi.n	8007bba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007bb4:	230b      	movs	r3, #11
 8007bb6:	617b      	str	r3, [r7, #20]
 8007bb8:	e036      	b.n	8007c28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	4a2a      	ldr	r2, [pc, #168]	@ (8007c68 <USB_SetTurnaroundTime+0x130>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d906      	bls.n	8007bd0 <USB_SetTurnaroundTime+0x98>
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	4a29      	ldr	r2, [pc, #164]	@ (8007c6c <USB_SetTurnaroundTime+0x134>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d802      	bhi.n	8007bd0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007bca:	230a      	movs	r3, #10
 8007bcc:	617b      	str	r3, [r7, #20]
 8007bce:	e02b      	b.n	8007c28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	4a26      	ldr	r2, [pc, #152]	@ (8007c6c <USB_SetTurnaroundTime+0x134>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d906      	bls.n	8007be6 <USB_SetTurnaroundTime+0xae>
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	4a25      	ldr	r2, [pc, #148]	@ (8007c70 <USB_SetTurnaroundTime+0x138>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d202      	bcs.n	8007be6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007be0:	2309      	movs	r3, #9
 8007be2:	617b      	str	r3, [r7, #20]
 8007be4:	e020      	b.n	8007c28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	4a21      	ldr	r2, [pc, #132]	@ (8007c70 <USB_SetTurnaroundTime+0x138>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d306      	bcc.n	8007bfc <USB_SetTurnaroundTime+0xc4>
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	4a20      	ldr	r2, [pc, #128]	@ (8007c74 <USB_SetTurnaroundTime+0x13c>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d802      	bhi.n	8007bfc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007bf6:	2308      	movs	r3, #8
 8007bf8:	617b      	str	r3, [r7, #20]
 8007bfa:	e015      	b.n	8007c28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	4a1d      	ldr	r2, [pc, #116]	@ (8007c74 <USB_SetTurnaroundTime+0x13c>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d906      	bls.n	8007c12 <USB_SetTurnaroundTime+0xda>
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	4a1c      	ldr	r2, [pc, #112]	@ (8007c78 <USB_SetTurnaroundTime+0x140>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d202      	bcs.n	8007c12 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007c0c:	2307      	movs	r3, #7
 8007c0e:	617b      	str	r3, [r7, #20]
 8007c10:	e00a      	b.n	8007c28 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007c12:	2306      	movs	r3, #6
 8007c14:	617b      	str	r3, [r7, #20]
 8007c16:	e007      	b.n	8007c28 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007c18:	79fb      	ldrb	r3, [r7, #7]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d102      	bne.n	8007c24 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007c1e:	2309      	movs	r3, #9
 8007c20:	617b      	str	r3, [r7, #20]
 8007c22:	e001      	b.n	8007c28 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007c24:	2309      	movs	r3, #9
 8007c26:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	68da      	ldr	r2, [r3, #12]
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	029b      	lsls	r3, r3, #10
 8007c3c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007c40:	431a      	orrs	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c46:	2300      	movs	r3, #0
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	371c      	adds	r7, #28
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bc80      	pop	{r7}
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	00d8acbf 	.word	0x00d8acbf
 8007c58:	00e4e1c0 	.word	0x00e4e1c0
 8007c5c:	00f42400 	.word	0x00f42400
 8007c60:	01067380 	.word	0x01067380
 8007c64:	011a499f 	.word	0x011a499f
 8007c68:	01312cff 	.word	0x01312cff
 8007c6c:	014ca43f 	.word	0x014ca43f
 8007c70:	016e3600 	.word	0x016e3600
 8007c74:	01a6ab1f 	.word	0x01a6ab1f
 8007c78:	01e84800 	.word	0x01e84800

08007c7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f043 0201 	orr.w	r2, r3, #1
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bc80      	pop	{r7}
 8007c9a:	4770      	bx	lr

08007c9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f023 0201 	bic.w	r2, r3, #1
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bc80      	pop	{r7}
 8007cba:	4770      	bx	lr

08007cbc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007cd8:	78fb      	ldrb	r3, [r7, #3]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d115      	bne.n	8007d0a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007cea:	2001      	movs	r0, #1
 8007cec:	f7fb f95e 	bl	8002fac <HAL_Delay>
      ms++;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f001 f922 	bl	8008f40 <USB_GetMode>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d01e      	beq.n	8007d40 <USB_SetCurrentMode+0x84>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2b31      	cmp	r3, #49	@ 0x31
 8007d06:	d9f0      	bls.n	8007cea <USB_SetCurrentMode+0x2e>
 8007d08:	e01a      	b.n	8007d40 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d0a:	78fb      	ldrb	r3, [r7, #3]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d115      	bne.n	8007d3c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d1c:	2001      	movs	r0, #1
 8007d1e:	f7fb f945 	bl	8002fac <HAL_Delay>
      ms++;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	3301      	adds	r3, #1
 8007d26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f001 f909 	bl	8008f40 <USB_GetMode>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d005      	beq.n	8007d40 <USB_SetCurrentMode+0x84>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2b31      	cmp	r3, #49	@ 0x31
 8007d38:	d9f0      	bls.n	8007d1c <USB_SetCurrentMode+0x60>
 8007d3a:	e001      	b.n	8007d40 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e005      	b.n	8007d4c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2b32      	cmp	r3, #50	@ 0x32
 8007d44:	d101      	bne.n	8007d4a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e000      	b.n	8007d4c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d54:	b084      	sub	sp, #16
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b086      	sub	sp, #24
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007d62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d6e:	2300      	movs	r3, #0
 8007d70:	613b      	str	r3, [r7, #16]
 8007d72:	e009      	b.n	8007d88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	3340      	adds	r3, #64	@ 0x40
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	4413      	add	r3, r2
 8007d7e:	2200      	movs	r2, #0
 8007d80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	3301      	adds	r3, #1
 8007d86:	613b      	str	r3, [r7, #16]
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	2b0e      	cmp	r3, #14
 8007d8c:	d9f2      	bls.n	8007d74 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d11c      	bne.n	8007dce <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007da2:	f043 0302 	orr.w	r3, r3, #2
 8007da6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db8:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc4:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	639a      	str	r2, [r3, #56]	@ 0x38
 8007dcc:	e00b      	b.n	8007de6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dde:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007dec:	461a      	mov	r2, r3
 8007dee:	2300      	movs	r3, #0
 8007df0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d10c      	bne.n	8007e12 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d104      	bne.n	8007e08 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007dfe:	2100      	movs	r1, #0
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f965 	bl	80080d0 <USB_SetDevSpeed>
 8007e06:	e008      	b.n	8007e1a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e08:	2101      	movs	r1, #1
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f960 	bl	80080d0 <USB_SetDevSpeed>
 8007e10:	e003      	b.n	8007e1a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e12:	2103      	movs	r1, #3
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f95b 	bl	80080d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e1a:	2110      	movs	r1, #16
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f000 f8f3 	bl	8008008 <USB_FlushTxFifo>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f91f 	bl	8008070 <USB_FlushRxFifo>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d001      	beq.n	8007e3c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e42:	461a      	mov	r2, r3
 8007e44:	2300      	movs	r3, #0
 8007e46:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e4e:	461a      	mov	r2, r3
 8007e50:	2300      	movs	r3, #0
 8007e52:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e60:	2300      	movs	r3, #0
 8007e62:	613b      	str	r3, [r7, #16]
 8007e64:	e043      	b.n	8007eee <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	015a      	lsls	r2, r3, #5
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e7c:	d118      	bne.n	8007eb0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d10a      	bne.n	8007e9a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	015a      	lsls	r2, r3, #5
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e90:	461a      	mov	r2, r3
 8007e92:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007e96:	6013      	str	r3, [r2, #0]
 8007e98:	e013      	b.n	8007ec2 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	015a      	lsls	r2, r3, #5
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007eac:	6013      	str	r3, [r2, #0]
 8007eae:	e008      	b.n	8007ec2 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	015a      	lsls	r2, r3, #5
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	015a      	lsls	r2, r3, #5
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	4413      	add	r3, r2
 8007eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ece:	461a      	mov	r2, r3
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	015a      	lsls	r2, r3, #5
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	4413      	add	r3, r2
 8007edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ee6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	3301      	adds	r3, #1
 8007eec:	613b      	str	r3, [r7, #16]
 8007eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d3b7      	bcc.n	8007e66 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	613b      	str	r3, [r7, #16]
 8007efa:	e043      	b.n	8007f84 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	015a      	lsls	r2, r3, #5
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4413      	add	r3, r2
 8007f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f12:	d118      	bne.n	8007f46 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d10a      	bne.n	8007f30 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	015a      	lsls	r2, r3, #5
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	4413      	add	r3, r2
 8007f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f26:	461a      	mov	r2, r3
 8007f28:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007f2c:	6013      	str	r3, [r2, #0]
 8007f2e:	e013      	b.n	8007f58 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	015a      	lsls	r2, r3, #5
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	4413      	add	r3, r2
 8007f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007f42:	6013      	str	r3, [r2, #0]
 8007f44:	e008      	b.n	8007f58 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	015a      	lsls	r2, r3, #5
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f52:	461a      	mov	r2, r3
 8007f54:	2300      	movs	r3, #0
 8007f56:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	015a      	lsls	r2, r3, #5
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	4413      	add	r3, r2
 8007f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f64:	461a      	mov	r2, r3
 8007f66:	2300      	movs	r3, #0
 8007f68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	015a      	lsls	r2, r3, #5
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	4413      	add	r3, r2
 8007f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f76:	461a      	mov	r2, r3
 8007f78:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007f7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	3301      	adds	r3, #1
 8007f82:	613b      	str	r3, [r7, #16]
 8007f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d3b7      	bcc.n	8007efc <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f9e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007fac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d105      	bne.n	8007fc0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	f043 0210 	orr.w	r2, r3, #16
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	699a      	ldr	r2, [r3, #24]
 8007fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8008004 <USB_DevInit+0x2b0>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d005      	beq.n	8007fde <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	f043 0208 	orr.w	r2, r3, #8
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007fde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d107      	bne.n	8007ff4 <USB_DevInit+0x2a0>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fec:	f043 0304 	orr.w	r3, r3, #4
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3718      	adds	r7, #24
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008000:	b004      	add	sp, #16
 8008002:	4770      	bx	lr
 8008004:	803c3800 	.word	0x803c3800

08008008 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008012:	2300      	movs	r3, #0
 8008014:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	3301      	adds	r3, #1
 800801a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	4a13      	ldr	r2, [pc, #76]	@ (800806c <USB_FlushTxFifo+0x64>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d901      	bls.n	8008028 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	e01b      	b.n	8008060 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	daf2      	bge.n	8008016 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008030:	2300      	movs	r3, #0
 8008032:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	019b      	lsls	r3, r3, #6
 8008038:	f043 0220 	orr.w	r2, r3, #32
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	3301      	adds	r3, #1
 8008044:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	4a08      	ldr	r2, [pc, #32]	@ (800806c <USB_FlushTxFifo+0x64>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d901      	bls.n	8008052 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800804e:	2303      	movs	r3, #3
 8008050:	e006      	b.n	8008060 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	f003 0320 	and.w	r3, r3, #32
 800805a:	2b20      	cmp	r3, #32
 800805c:	d0f0      	beq.n	8008040 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	bc80      	pop	{r7}
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	00030d40 	.word	0x00030d40

08008070 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008078:	2300      	movs	r3, #0
 800807a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	3301      	adds	r3, #1
 8008080:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4a11      	ldr	r2, [pc, #68]	@ (80080cc <USB_FlushRxFifo+0x5c>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d901      	bls.n	800808e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e018      	b.n	80080c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	2b00      	cmp	r3, #0
 8008094:	daf2      	bge.n	800807c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008096:	2300      	movs	r3, #0
 8008098:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2210      	movs	r2, #16
 800809e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	3301      	adds	r3, #1
 80080a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	4a08      	ldr	r2, [pc, #32]	@ (80080cc <USB_FlushRxFifo+0x5c>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d901      	bls.n	80080b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e006      	b.n	80080c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	691b      	ldr	r3, [r3, #16]
 80080b6:	f003 0310 	and.w	r3, r3, #16
 80080ba:	2b10      	cmp	r3, #16
 80080bc:	d0f0      	beq.n	80080a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3714      	adds	r7, #20
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bc80      	pop	{r7}
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	00030d40 	.word	0x00030d40

080080d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	78fb      	ldrb	r3, [r7, #3]
 80080ea:	68f9      	ldr	r1, [r7, #12]
 80080ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080f0:	4313      	orrs	r3, r2
 80080f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bc80      	pop	{r7}
 80080fe:	4770      	bx	lr

08008100 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008100:	b480      	push	{r7}
 8008102:	b087      	sub	sp, #28
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	f003 0306 	and.w	r3, r3, #6
 8008118:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d102      	bne.n	8008126 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008120:	2300      	movs	r3, #0
 8008122:	75fb      	strb	r3, [r7, #23]
 8008124:	e00a      	b.n	800813c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2b02      	cmp	r3, #2
 800812a:	d002      	beq.n	8008132 <USB_GetDevSpeed+0x32>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2b06      	cmp	r3, #6
 8008130:	d102      	bne.n	8008138 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008132:	2302      	movs	r3, #2
 8008134:	75fb      	strb	r3, [r7, #23]
 8008136:	e001      	b.n	800813c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008138:	230f      	movs	r3, #15
 800813a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800813c:	7dfb      	ldrb	r3, [r7, #23]
}
 800813e:	4618      	mov	r0, r3
 8008140:	371c      	adds	r7, #28
 8008142:	46bd      	mov	sp, r7
 8008144:	bc80      	pop	{r7}
 8008146:	4770      	bx	lr

08008148 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	785b      	ldrb	r3, [r3, #1]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d13a      	bne.n	80081da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800816a:	69da      	ldr	r2, [r3, #28]
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	f003 030f 	and.w	r3, r3, #15
 8008174:	2101      	movs	r1, #1
 8008176:	fa01 f303 	lsl.w	r3, r1, r3
 800817a:	b29b      	uxth	r3, r3
 800817c:	68f9      	ldr	r1, [r7, #12]
 800817e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008182:	4313      	orrs	r3, r2
 8008184:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	015a      	lsls	r2, r3, #5
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	4413      	add	r3, r2
 800818e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d155      	bne.n	8008248 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	015a      	lsls	r2, r3, #5
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4413      	add	r3, r2
 80081a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	791b      	ldrb	r3, [r3, #4]
 80081b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80081b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	059b      	lsls	r3, r3, #22
 80081be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80081c0:	4313      	orrs	r3, r2
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	0151      	lsls	r1, r2, #5
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	440a      	add	r2, r1
 80081ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	e036      	b.n	8008248 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081e0:	69da      	ldr	r2, [r3, #28]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	f003 030f 	and.w	r3, r3, #15
 80081ea:	2101      	movs	r1, #1
 80081ec:	fa01 f303 	lsl.w	r3, r1, r3
 80081f0:	041b      	lsls	r3, r3, #16
 80081f2:	68f9      	ldr	r1, [r7, #12]
 80081f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081f8:	4313      	orrs	r3, r2
 80081fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	015a      	lsls	r2, r3, #5
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	4413      	add	r3, r2
 8008204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800820e:	2b00      	cmp	r3, #0
 8008210:	d11a      	bne.n	8008248 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	015a      	lsls	r2, r3, #5
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	4413      	add	r3, r2
 800821a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	791b      	ldrb	r3, [r3, #4]
 800822c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800822e:	430b      	orrs	r3, r1
 8008230:	4313      	orrs	r3, r2
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	0151      	lsls	r1, r2, #5
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	440a      	add	r2, r1
 800823a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800823e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008242:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008246:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	bc80      	pop	{r7}
 8008252:	4770      	bx	lr

08008254 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	785b      	ldrb	r3, [r3, #1]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d161      	bne.n	8008334 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	4413      	add	r3, r2
 8008278:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008282:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008286:	d11f      	bne.n	80082c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	015a      	lsls	r2, r3, #5
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	4413      	add	r3, r2
 8008290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	0151      	lsls	r1, r2, #5
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	440a      	add	r2, r1
 800829e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80082a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	015a      	lsls	r2, r3, #5
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	4413      	add	r3, r2
 80082b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	0151      	lsls	r1, r2, #5
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	440a      	add	r2, r1
 80082be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80082c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	f003 030f 	and.w	r3, r3, #15
 80082d8:	2101      	movs	r1, #1
 80082da:	fa01 f303 	lsl.w	r3, r1, r3
 80082de:	b29b      	uxth	r3, r3
 80082e0:	43db      	mvns	r3, r3
 80082e2:	68f9      	ldr	r1, [r7, #12]
 80082e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80082e8:	4013      	ands	r3, r2
 80082ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082f2:	69da      	ldr	r2, [r3, #28]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	f003 030f 	and.w	r3, r3, #15
 80082fc:	2101      	movs	r1, #1
 80082fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008302:	b29b      	uxth	r3, r3
 8008304:	43db      	mvns	r3, r3
 8008306:	68f9      	ldr	r1, [r7, #12]
 8008308:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800830c:	4013      	ands	r3, r2
 800830e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	015a      	lsls	r2, r3, #5
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	4413      	add	r3, r2
 8008318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	0159      	lsls	r1, r3, #5
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	440b      	add	r3, r1
 8008326:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800832a:	4619      	mov	r1, r3
 800832c:	4b35      	ldr	r3, [pc, #212]	@ (8008404 <USB_DeactivateEndpoint+0x1b0>)
 800832e:	4013      	ands	r3, r2
 8008330:	600b      	str	r3, [r1, #0]
 8008332:	e060      	b.n	80083f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	015a      	lsls	r2, r3, #5
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	4413      	add	r3, r2
 800833c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008346:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800834a:	d11f      	bne.n	800838c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	4413      	add	r3, r2
 8008354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	0151      	lsls	r1, r2, #5
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	440a      	add	r2, r1
 8008362:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008366:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800836a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	4413      	add	r3, r2
 8008374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	0151      	lsls	r1, r2, #5
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	440a      	add	r2, r1
 8008382:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008386:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800838a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008392:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	f003 030f 	and.w	r3, r3, #15
 800839c:	2101      	movs	r1, #1
 800839e:	fa01 f303 	lsl.w	r3, r1, r3
 80083a2:	041b      	lsls	r3, r3, #16
 80083a4:	43db      	mvns	r3, r3
 80083a6:	68f9      	ldr	r1, [r7, #12]
 80083a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80083ac:	4013      	ands	r3, r2
 80083ae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083b6:	69da      	ldr	r2, [r3, #28]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	781b      	ldrb	r3, [r3, #0]
 80083bc:	f003 030f 	and.w	r3, r3, #15
 80083c0:	2101      	movs	r1, #1
 80083c2:	fa01 f303 	lsl.w	r3, r1, r3
 80083c6:	041b      	lsls	r3, r3, #16
 80083c8:	43db      	mvns	r3, r3
 80083ca:	68f9      	ldr	r1, [r7, #12]
 80083cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80083d0:	4013      	ands	r3, r2
 80083d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	015a      	lsls	r2, r3, #5
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	4413      	add	r3, r2
 80083dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	0159      	lsls	r1, r3, #5
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	440b      	add	r3, r1
 80083ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083ee:	4619      	mov	r1, r3
 80083f0:	4b05      	ldr	r3, [pc, #20]	@ (8008408 <USB_DeactivateEndpoint+0x1b4>)
 80083f2:	4013      	ands	r3, r2
 80083f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3714      	adds	r7, #20
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bc80      	pop	{r7}
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	ec337800 	.word	0xec337800
 8008408:	eff37800 	.word	0xeff37800

0800840c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b08a      	sub	sp, #40	@ 0x28
 8008410:	af02      	add	r7, sp, #8
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	4613      	mov	r3, r2
 8008418:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	785b      	ldrb	r3, [r3, #1]
 8008428:	2b01      	cmp	r3, #1
 800842a:	f040 817a 	bne.w	8008722 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d132      	bne.n	800849c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	015a      	lsls	r2, r3, #5
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	4413      	add	r3, r2
 800843e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	69ba      	ldr	r2, [r7, #24]
 8008446:	0151      	lsls	r1, r2, #5
 8008448:	69fa      	ldr	r2, [r7, #28]
 800844a:	440a      	add	r2, r1
 800844c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008450:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008454:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008458:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	015a      	lsls	r2, r3, #5
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	4413      	add	r3, r2
 8008462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	69ba      	ldr	r2, [r7, #24]
 800846a:	0151      	lsls	r1, r2, #5
 800846c:	69fa      	ldr	r2, [r7, #28]
 800846e:	440a      	add	r2, r1
 8008470:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008474:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008478:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	015a      	lsls	r2, r3, #5
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	4413      	add	r3, r2
 8008482:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	69ba      	ldr	r2, [r7, #24]
 800848a:	0151      	lsls	r1, r2, #5
 800848c:	69fa      	ldr	r2, [r7, #28]
 800848e:	440a      	add	r2, r1
 8008490:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008494:	0cdb      	lsrs	r3, r3, #19
 8008496:	04db      	lsls	r3, r3, #19
 8008498:	6113      	str	r3, [r2, #16]
 800849a:	e092      	b.n	80085c2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	69ba      	ldr	r2, [r7, #24]
 80084ac:	0151      	lsls	r1, r2, #5
 80084ae:	69fa      	ldr	r2, [r7, #28]
 80084b0:	440a      	add	r2, r1
 80084b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084b6:	0cdb      	lsrs	r3, r3, #19
 80084b8:	04db      	lsls	r3, r3, #19
 80084ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	015a      	lsls	r2, r3, #5
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	4413      	add	r3, r2
 80084c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	69ba      	ldr	r2, [r7, #24]
 80084cc:	0151      	lsls	r1, r2, #5
 80084ce:	69fa      	ldr	r2, [r7, #28]
 80084d0:	440a      	add	r2, r1
 80084d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084d6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80084da:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80084de:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d11a      	bne.n	800851c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	691a      	ldr	r2, [r3, #16]
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d903      	bls.n	80084fa <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	689a      	ldr	r2, [r3, #8]
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80084fa:	69bb      	ldr	r3, [r7, #24]
 80084fc:	015a      	lsls	r2, r3, #5
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	4413      	add	r3, r2
 8008502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	69ba      	ldr	r2, [r7, #24]
 800850a:	0151      	lsls	r1, r2, #5
 800850c:	69fa      	ldr	r2, [r7, #28]
 800850e:	440a      	add	r2, r1
 8008510:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008514:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008518:	6113      	str	r3, [r2, #16]
 800851a:	e01b      	b.n	8008554 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	4413      	add	r3, r2
 8008524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008528:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	6919      	ldr	r1, [r3, #16]
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	440b      	add	r3, r1
 8008534:	1e59      	subs	r1, r3, #1
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	fbb1 f3f3 	udiv	r3, r1, r3
 800853e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008540:	4ba2      	ldr	r3, [pc, #648]	@ (80087cc <USB_EPStartXfer+0x3c0>)
 8008542:	400b      	ands	r3, r1
 8008544:	69b9      	ldr	r1, [r7, #24]
 8008546:	0148      	lsls	r0, r1, #5
 8008548:	69f9      	ldr	r1, [r7, #28]
 800854a:	4401      	add	r1, r0
 800854c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008550:	4313      	orrs	r3, r2
 8008552:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	015a      	lsls	r2, r3, #5
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	4413      	add	r3, r2
 800855c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008560:	691a      	ldr	r2, [r3, #16]
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800856a:	69b9      	ldr	r1, [r7, #24]
 800856c:	0148      	lsls	r0, r1, #5
 800856e:	69f9      	ldr	r1, [r7, #28]
 8008570:	4401      	add	r1, r0
 8008572:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008576:	4313      	orrs	r3, r2
 8008578:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	791b      	ldrb	r3, [r3, #4]
 800857e:	2b01      	cmp	r3, #1
 8008580:	d11f      	bne.n	80085c2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	015a      	lsls	r2, r3, #5
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	4413      	add	r3, r2
 800858a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	69ba      	ldr	r2, [r7, #24]
 8008592:	0151      	lsls	r1, r2, #5
 8008594:	69fa      	ldr	r2, [r7, #28]
 8008596:	440a      	add	r2, r1
 8008598:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800859c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80085a0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	015a      	lsls	r2, r3, #5
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	4413      	add	r3, r2
 80085aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	69ba      	ldr	r2, [r7, #24]
 80085b2:	0151      	lsls	r1, r2, #5
 80085b4:	69fa      	ldr	r2, [r7, #28]
 80085b6:	440a      	add	r2, r1
 80085b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80085c0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80085c2:	79fb      	ldrb	r3, [r7, #7]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d14b      	bne.n	8008660 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	69db      	ldr	r3, [r3, #28]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d009      	beq.n	80085e4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085dc:	461a      	mov	r2, r3
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	69db      	ldr	r3, [r3, #28]
 80085e2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	791b      	ldrb	r3, [r3, #4]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d128      	bne.n	800863e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d110      	bne.n	800861e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	015a      	lsls	r2, r3, #5
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	4413      	add	r3, r2
 8008604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	69ba      	ldr	r2, [r7, #24]
 800860c:	0151      	lsls	r1, r2, #5
 800860e:	69fa      	ldr	r2, [r7, #28]
 8008610:	440a      	add	r2, r1
 8008612:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008616:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800861a:	6013      	str	r3, [r2, #0]
 800861c:	e00f      	b.n	800863e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	015a      	lsls	r2, r3, #5
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	4413      	add	r3, r2
 8008626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	69ba      	ldr	r2, [r7, #24]
 800862e:	0151      	lsls	r1, r2, #5
 8008630:	69fa      	ldr	r2, [r7, #28]
 8008632:	440a      	add	r2, r1
 8008634:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800863c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	015a      	lsls	r2, r3, #5
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	4413      	add	r3, r2
 8008646:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	69ba      	ldr	r2, [r7, #24]
 800864e:	0151      	lsls	r1, r2, #5
 8008650:	69fa      	ldr	r2, [r7, #28]
 8008652:	440a      	add	r2, r1
 8008654:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008658:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800865c:	6013      	str	r3, [r2, #0]
 800865e:	e165      	b.n	800892c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	4413      	add	r3, r2
 8008668:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	69ba      	ldr	r2, [r7, #24]
 8008670:	0151      	lsls	r1, r2, #5
 8008672:	69fa      	ldr	r2, [r7, #28]
 8008674:	440a      	add	r2, r1
 8008676:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800867a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800867e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	791b      	ldrb	r3, [r3, #4]
 8008684:	2b01      	cmp	r3, #1
 8008686:	d015      	beq.n	80086b4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 814d 	beq.w	800892c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008698:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	f003 030f 	and.w	r3, r3, #15
 80086a2:	2101      	movs	r1, #1
 80086a4:	fa01 f303 	lsl.w	r3, r1, r3
 80086a8:	69f9      	ldr	r1, [r7, #28]
 80086aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086ae:	4313      	orrs	r3, r2
 80086b0:	634b      	str	r3, [r1, #52]	@ 0x34
 80086b2:	e13b      	b.n	800892c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d110      	bne.n	80086e6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	015a      	lsls	r2, r3, #5
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	4413      	add	r3, r2
 80086cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	69ba      	ldr	r2, [r7, #24]
 80086d4:	0151      	lsls	r1, r2, #5
 80086d6:	69fa      	ldr	r2, [r7, #28]
 80086d8:	440a      	add	r2, r1
 80086da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80086e2:	6013      	str	r3, [r2, #0]
 80086e4:	e00f      	b.n	8008706 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	015a      	lsls	r2, r3, #5
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	4413      	add	r3, r2
 80086ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	69ba      	ldr	r2, [r7, #24]
 80086f6:	0151      	lsls	r1, r2, #5
 80086f8:	69fa      	ldr	r2, [r7, #28]
 80086fa:	440a      	add	r2, r1
 80086fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008704:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	68d9      	ldr	r1, [r3, #12]
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	781a      	ldrb	r2, [r3, #0]
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	b298      	uxth	r0, r3
 8008714:	79fb      	ldrb	r3, [r7, #7]
 8008716:	9300      	str	r3, [sp, #0]
 8008718:	4603      	mov	r3, r0
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f000 f9b7 	bl	8008a8e <USB_WritePacket>
 8008720:	e104      	b.n	800892c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	015a      	lsls	r2, r3, #5
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	4413      	add	r3, r2
 800872a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	69ba      	ldr	r2, [r7, #24]
 8008732:	0151      	lsls	r1, r2, #5
 8008734:	69fa      	ldr	r2, [r7, #28]
 8008736:	440a      	add	r2, r1
 8008738:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800873c:	0cdb      	lsrs	r3, r3, #19
 800873e:	04db      	lsls	r3, r3, #19
 8008740:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	015a      	lsls	r2, r3, #5
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	4413      	add	r3, r2
 800874a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	69ba      	ldr	r2, [r7, #24]
 8008752:	0151      	lsls	r1, r2, #5
 8008754:	69fa      	ldr	r2, [r7, #28]
 8008756:	440a      	add	r2, r1
 8008758:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800875c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008760:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008764:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d131      	bne.n	80087d0 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d003      	beq.n	800877c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	689a      	ldr	r2, [r3, #8]
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	689a      	ldr	r2, [r3, #8]
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008784:	69bb      	ldr	r3, [r7, #24]
 8008786:	015a      	lsls	r2, r3, #5
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	4413      	add	r3, r2
 800878c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008790:	691a      	ldr	r2, [r3, #16]
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	6a1b      	ldr	r3, [r3, #32]
 8008796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800879a:	69b9      	ldr	r1, [r7, #24]
 800879c:	0148      	lsls	r0, r1, #5
 800879e:	69f9      	ldr	r1, [r7, #28]
 80087a0:	4401      	add	r1, r0
 80087a2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80087a6:	4313      	orrs	r3, r2
 80087a8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	015a      	lsls	r2, r3, #5
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	4413      	add	r3, r2
 80087b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	69ba      	ldr	r2, [r7, #24]
 80087ba:	0151      	lsls	r1, r2, #5
 80087bc:	69fa      	ldr	r2, [r7, #28]
 80087be:	440a      	add	r2, r1
 80087c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80087c8:	6113      	str	r3, [r2, #16]
 80087ca:	e061      	b.n	8008890 <USB_EPStartXfer+0x484>
 80087cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	691b      	ldr	r3, [r3, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d123      	bne.n	8008820 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80087d8:	69bb      	ldr	r3, [r7, #24]
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087e4:	691a      	ldr	r2, [r3, #16]
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087ee:	69b9      	ldr	r1, [r7, #24]
 80087f0:	0148      	lsls	r0, r1, #5
 80087f2:	69f9      	ldr	r1, [r7, #28]
 80087f4:	4401      	add	r1, r0
 80087f6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80087fa:	4313      	orrs	r3, r2
 80087fc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	015a      	lsls	r2, r3, #5
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	4413      	add	r3, r2
 8008806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	69ba      	ldr	r2, [r7, #24]
 800880e:	0151      	lsls	r1, r2, #5
 8008810:	69fa      	ldr	r2, [r7, #28]
 8008812:	440a      	add	r2, r1
 8008814:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008818:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800881c:	6113      	str	r3, [r2, #16]
 800881e:	e037      	b.n	8008890 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	691a      	ldr	r2, [r3, #16]
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	4413      	add	r3, r2
 800882a:	1e5a      	subs	r2, r3, #1
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	fbb2 f3f3 	udiv	r3, r2, r3
 8008834:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	8afa      	ldrh	r2, [r7, #22]
 800883c:	fb03 f202 	mul.w	r2, r3, r2
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	015a      	lsls	r2, r3, #5
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	4413      	add	r3, r2
 800884c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008850:	691a      	ldr	r2, [r3, #16]
 8008852:	8afb      	ldrh	r3, [r7, #22]
 8008854:	04d9      	lsls	r1, r3, #19
 8008856:	4b38      	ldr	r3, [pc, #224]	@ (8008938 <USB_EPStartXfer+0x52c>)
 8008858:	400b      	ands	r3, r1
 800885a:	69b9      	ldr	r1, [r7, #24]
 800885c:	0148      	lsls	r0, r1, #5
 800885e:	69f9      	ldr	r1, [r7, #28]
 8008860:	4401      	add	r1, r0
 8008862:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008866:	4313      	orrs	r3, r2
 8008868:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	015a      	lsls	r2, r3, #5
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	4413      	add	r3, r2
 8008872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008876:	691a      	ldr	r2, [r3, #16]
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	6a1b      	ldr	r3, [r3, #32]
 800887c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008880:	69b9      	ldr	r1, [r7, #24]
 8008882:	0148      	lsls	r0, r1, #5
 8008884:	69f9      	ldr	r1, [r7, #28]
 8008886:	4401      	add	r1, r0
 8008888:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800888c:	4313      	orrs	r3, r2
 800888e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008890:	79fb      	ldrb	r3, [r7, #7]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d10d      	bne.n	80088b2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d009      	beq.n	80088b2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	68d9      	ldr	r1, [r3, #12]
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	015a      	lsls	r2, r3, #5
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	4413      	add	r3, r2
 80088aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088ae:	460a      	mov	r2, r1
 80088b0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	791b      	ldrb	r3, [r3, #4]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d128      	bne.n	800890c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d110      	bne.n	80088ec <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	015a      	lsls	r2, r3, #5
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	4413      	add	r3, r2
 80088d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	69ba      	ldr	r2, [r7, #24]
 80088da:	0151      	lsls	r1, r2, #5
 80088dc:	69fa      	ldr	r2, [r7, #28]
 80088de:	440a      	add	r2, r1
 80088e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80088e8:	6013      	str	r3, [r2, #0]
 80088ea:	e00f      	b.n	800890c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	015a      	lsls	r2, r3, #5
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	4413      	add	r3, r2
 80088f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	69ba      	ldr	r2, [r7, #24]
 80088fc:	0151      	lsls	r1, r2, #5
 80088fe:	69fa      	ldr	r2, [r7, #28]
 8008900:	440a      	add	r2, r1
 8008902:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008906:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800890a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	015a      	lsls	r2, r3, #5
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	4413      	add	r3, r2
 8008914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	69ba      	ldr	r2, [r7, #24]
 800891c:	0151      	lsls	r1, r2, #5
 800891e:	69fa      	ldr	r2, [r7, #28]
 8008920:	440a      	add	r2, r1
 8008922:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008926:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800892a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3720      	adds	r7, #32
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	1ff80000 	.word	0x1ff80000

0800893c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800893c:	b480      	push	{r7}
 800893e:	b087      	sub	sp, #28
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800894a:	2300      	movs	r3, #0
 800894c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	785b      	ldrb	r3, [r3, #1]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d14a      	bne.n	80089f0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	015a      	lsls	r2, r3, #5
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	4413      	add	r3, r2
 8008964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800896e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008972:	f040 8086 	bne.w	8008a82 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	015a      	lsls	r2, r3, #5
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	4413      	add	r3, r2
 8008980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	683a      	ldr	r2, [r7, #0]
 8008988:	7812      	ldrb	r2, [r2, #0]
 800898a:	0151      	lsls	r1, r2, #5
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	440a      	add	r2, r1
 8008990:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008994:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008998:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	015a      	lsls	r2, r3, #5
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	683a      	ldr	r2, [r7, #0]
 80089ac:	7812      	ldrb	r2, [r2, #0]
 80089ae:	0151      	lsls	r1, r2, #5
 80089b0:	693a      	ldr	r2, [r7, #16]
 80089b2:	440a      	add	r2, r1
 80089b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80089bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	3301      	adds	r3, #1
 80089c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d902      	bls.n	80089d4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	75fb      	strb	r3, [r7, #23]
          break;
 80089d2:	e056      	b.n	8008a82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	015a      	lsls	r2, r3, #5
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	4413      	add	r3, r2
 80089de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80089e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089ec:	d0e7      	beq.n	80089be <USB_EPStopXfer+0x82>
 80089ee:	e048      	b.n	8008a82 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	015a      	lsls	r2, r3, #5
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	4413      	add	r3, r2
 80089fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a08:	d13b      	bne.n	8008a82 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	015a      	lsls	r2, r3, #5
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	4413      	add	r3, r2
 8008a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	683a      	ldr	r2, [r7, #0]
 8008a1c:	7812      	ldrb	r2, [r2, #0]
 8008a1e:	0151      	lsls	r1, r2, #5
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	440a      	add	r2, r1
 8008a24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a28:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008a2c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	015a      	lsls	r2, r3, #5
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	4413      	add	r3, r2
 8008a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	683a      	ldr	r2, [r7, #0]
 8008a40:	7812      	ldrb	r2, [r2, #0]
 8008a42:	0151      	lsls	r1, r2, #5
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	440a      	add	r2, r1
 8008a48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008a50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	3301      	adds	r3, #1
 8008a56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d902      	bls.n	8008a68 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	75fb      	strb	r3, [r7, #23]
          break;
 8008a66:	e00c      	b.n	8008a82 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a80:	d0e7      	beq.n	8008a52 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	371c      	adds	r7, #28
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bc80      	pop	{r7}
 8008a8c:	4770      	bx	lr

08008a8e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b089      	sub	sp, #36	@ 0x24
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	60f8      	str	r0, [r7, #12]
 8008a96:	60b9      	str	r1, [r7, #8]
 8008a98:	4611      	mov	r1, r2
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	71fb      	strb	r3, [r7, #7]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008aac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d123      	bne.n	8008afc <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008ab4:	88bb      	ldrh	r3, [r7, #4]
 8008ab6:	3303      	adds	r3, #3
 8008ab8:	089b      	lsrs	r3, r3, #2
 8008aba:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008abc:	2300      	movs	r3, #0
 8008abe:	61bb      	str	r3, [r7, #24]
 8008ac0:	e018      	b.n	8008af4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008ac2:	79fb      	ldrb	r3, [r7, #7]
 8008ac4:	031a      	lsls	r2, r3, #12
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	4413      	add	r3, r2
 8008aca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008ace:	461a      	mov	r2, r3
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	3301      	adds	r3, #1
 8008ae0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	3301      	adds	r3, #1
 8008aec:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	3301      	adds	r3, #1
 8008af2:	61bb      	str	r3, [r7, #24]
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d3e2      	bcc.n	8008ac2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3724      	adds	r7, #36	@ 0x24
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bc80      	pop	{r7}
 8008b06:	4770      	bx	lr

08008b08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b08b      	sub	sp, #44	@ 0x2c
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	4613      	mov	r3, r2
 8008b14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008b1e:	88fb      	ldrh	r3, [r7, #6]
 8008b20:	089b      	lsrs	r3, r3, #2
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008b26:	88fb      	ldrh	r3, [r7, #6]
 8008b28:	f003 0303 	and.w	r3, r3, #3
 8008b2c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008b2e:	2300      	movs	r3, #0
 8008b30:	623b      	str	r3, [r7, #32]
 8008b32:	e014      	b.n	8008b5e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b42:	3301      	adds	r3, #1
 8008b44:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b48:	3301      	adds	r3, #1
 8008b4a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4e:	3301      	adds	r3, #1
 8008b50:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b54:	3301      	adds	r3, #1
 8008b56:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008b58:	6a3b      	ldr	r3, [r7, #32]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	623b      	str	r3, [r7, #32]
 8008b5e:	6a3a      	ldr	r2, [r7, #32]
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	429a      	cmp	r2, r3
 8008b64:	d3e6      	bcc.n	8008b34 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008b66:	8bfb      	ldrh	r3, [r7, #30]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d01e      	beq.n	8008baa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008b76:	461a      	mov	r2, r3
 8008b78:	f107 0310 	add.w	r3, r7, #16
 8008b7c:	6812      	ldr	r2, [r2, #0]
 8008b7e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	6a3b      	ldr	r3, [r7, #32]
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	00db      	lsls	r3, r3, #3
 8008b88:	fa22 f303 	lsr.w	r3, r2, r3
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b90:	701a      	strb	r2, [r3, #0]
      i++;
 8008b92:	6a3b      	ldr	r3, [r7, #32]
 8008b94:	3301      	adds	r3, #1
 8008b96:	623b      	str	r3, [r7, #32]
      pDest++;
 8008b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008b9e:	8bfb      	ldrh	r3, [r7, #30]
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008ba4:	8bfb      	ldrh	r3, [r7, #30]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d1ea      	bne.n	8008b80 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	372c      	adds	r7, #44	@ 0x2c
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bc80      	pop	{r7}
 8008bb4:	4770      	bx	lr

08008bb6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b085      	sub	sp, #20
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	785b      	ldrb	r3, [r3, #1]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d12c      	bne.n	8008c2c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	015a      	lsls	r2, r3, #5
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	4413      	add	r3, r2
 8008bda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	db12      	blt.n	8008c0a <USB_EPSetStall+0x54>
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00f      	beq.n	8008c0a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	015a      	lsls	r2, r3, #5
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68ba      	ldr	r2, [r7, #8]
 8008bfa:	0151      	lsls	r1, r2, #5
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	440a      	add	r2, r1
 8008c00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c04:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008c08:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	015a      	lsls	r2, r3, #5
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	4413      	add	r3, r2
 8008c12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	0151      	lsls	r1, r2, #5
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	440a      	add	r2, r1
 8008c20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008c28:	6013      	str	r3, [r2, #0]
 8008c2a:	e02b      	b.n	8008c84 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	015a      	lsls	r2, r3, #5
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	4413      	add	r3, r2
 8008c34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	db12      	blt.n	8008c64 <USB_EPSetStall+0xae>
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00f      	beq.n	8008c64 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	015a      	lsls	r2, r3, #5
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68ba      	ldr	r2, [r7, #8]
 8008c54:	0151      	lsls	r1, r2, #5
 8008c56:	68fa      	ldr	r2, [r7, #12]
 8008c58:	440a      	add	r2, r1
 8008c5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c5e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008c62:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	015a      	lsls	r2, r3, #5
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	0151      	lsls	r1, r2, #5
 8008c76:	68fa      	ldr	r2, [r7, #12]
 8008c78:	440a      	add	r2, r1
 8008c7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008c82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3714      	adds	r7, #20
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bc80      	pop	{r7}
 8008c8e:	4770      	bx	lr

08008c90 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	785b      	ldrb	r3, [r3, #1]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d128      	bne.n	8008cfe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	015a      	lsls	r2, r3, #5
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68ba      	ldr	r2, [r7, #8]
 8008cbc:	0151      	lsls	r1, r2, #5
 8008cbe:	68fa      	ldr	r2, [r7, #12]
 8008cc0:	440a      	add	r2, r1
 8008cc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cc6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008cca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	791b      	ldrb	r3, [r3, #4]
 8008cd0:	2b03      	cmp	r3, #3
 8008cd2:	d003      	beq.n	8008cdc <USB_EPClearStall+0x4c>
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	791b      	ldrb	r3, [r3, #4]
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d138      	bne.n	8008d4e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	015a      	lsls	r2, r3, #5
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	0151      	lsls	r1, r2, #5
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	440a      	add	r2, r1
 8008cf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cfa:	6013      	str	r3, [r2, #0]
 8008cfc:	e027      	b.n	8008d4e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	015a      	lsls	r2, r3, #5
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	4413      	add	r3, r2
 8008d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68ba      	ldr	r2, [r7, #8]
 8008d0e:	0151      	lsls	r1, r2, #5
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	440a      	add	r2, r1
 8008d14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d18:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008d1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	791b      	ldrb	r3, [r3, #4]
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	d003      	beq.n	8008d2e <USB_EPClearStall+0x9e>
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	791b      	ldrb	r3, [r3, #4]
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d10f      	bne.n	8008d4e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	0151      	lsls	r1, r2, #5
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	440a      	add	r2, r1
 8008d44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d4c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3714      	adds	r7, #20
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bc80      	pop	{r7}
 8008d58:	4770      	bx	lr

08008d5a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b085      	sub	sp, #20
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	460b      	mov	r3, r1
 8008d64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d78:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008d7c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	78fb      	ldrb	r3, [r7, #3]
 8008d88:	011b      	lsls	r3, r3, #4
 8008d8a:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008d8e:	68f9      	ldr	r1, [r7, #12]
 8008d90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008d94:	4313      	orrs	r3, r2
 8008d96:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3714      	adds	r7, #20
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bc80      	pop	{r7}
 8008da2:	4770      	bx	lr

08008da4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008dbe:	f023 0303 	bic.w	r3, r3, #3
 8008dc2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	68fa      	ldr	r2, [r7, #12]
 8008dce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008dd2:	f023 0302 	bic.w	r3, r3, #2
 8008dd6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3714      	adds	r7, #20
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bc80      	pop	{r7}
 8008de2:	4770      	bx	lr

08008de4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008dfe:	f023 0303 	bic.w	r3, r3, #3
 8008e02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008e12:	f043 0302 	orr.w	r3, r3, #2
 8008e16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008e18:	2300      	movs	r3, #0
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3714      	adds	r7, #20
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bc80      	pop	{r7}
 8008e22:	4770      	bx	lr

08008e24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b085      	sub	sp, #20
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	4013      	ands	r3, r2
 8008e3a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bc80      	pop	{r7}
 8008e46:	4770      	bx	lr

08008e48 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e5a:	699b      	ldr	r3, [r3, #24]
 8008e5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e64:	69db      	ldr	r3, [r3, #28]
 8008e66:	68ba      	ldr	r2, [r7, #8]
 8008e68:	4013      	ands	r3, r2
 8008e6a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	0c1b      	lsrs	r3, r3, #16
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3714      	adds	r7, #20
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bc80      	pop	{r7}
 8008e78:	4770      	bx	lr

08008e7a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e7a:	b480      	push	{r7}
 8008e7c:	b085      	sub	sp, #20
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e96:	69db      	ldr	r3, [r3, #28]
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	4013      	ands	r3, r2
 8008e9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	b29b      	uxth	r3, r3
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3714      	adds	r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bc80      	pop	{r7}
 8008eaa:	4770      	bx	lr

08008eac <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008ebc:	78fb      	ldrb	r3, [r7, #3]
 8008ebe:	015a      	lsls	r2, r3, #5
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ed2:	695b      	ldr	r3, [r3, #20]
 8008ed4:	68ba      	ldr	r2, [r7, #8]
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008eda:	68bb      	ldr	r3, [r7, #8]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3714      	adds	r7, #20
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bc80      	pop	{r7}
 8008ee4:	4770      	bx	lr

08008ee6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	b087      	sub	sp, #28
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	460b      	mov	r3, r1
 8008ef0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f08:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008f0a:	78fb      	ldrb	r3, [r7, #3]
 8008f0c:	f003 030f 	and.w	r3, r3, #15
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	fa22 f303 	lsr.w	r3, r2, r3
 8008f16:	01db      	lsls	r3, r3, #7
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	693a      	ldr	r2, [r7, #16]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008f20:	78fb      	ldrb	r3, [r7, #3]
 8008f22:	015a      	lsls	r2, r3, #5
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	4413      	add	r3, r2
 8008f28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f2c:	689b      	ldr	r3, [r3, #8]
 8008f2e:	693a      	ldr	r2, [r7, #16]
 8008f30:	4013      	ands	r3, r2
 8008f32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008f34:	68bb      	ldr	r3, [r7, #8]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	371c      	adds	r7, #28
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bc80      	pop	{r7}
 8008f3e:	4770      	bx	lr

08008f40 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	695b      	ldr	r3, [r3, #20]
 8008f4c:	f003 0301 	and.w	r3, r3, #1
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bc80      	pop	{r7}
 8008f58:	4770      	bx	lr

08008f5a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008f5a:	b480      	push	{r7}
 8008f5c:	b085      	sub	sp, #20
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f74:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008f78:	f023 0307 	bic.w	r3, r3, #7
 8008f7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	68fa      	ldr	r2, [r7, #12]
 8008f88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3714      	adds	r7, #20
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bc80      	pop	{r7}
 8008f9c:	4770      	bx	lr
	...

08008fa0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b087      	sub	sp, #28
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	607a      	str	r2, [r7, #4]
 8008fac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	333c      	adds	r3, #60	@ 0x3c
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	4a25      	ldr	r2, [pc, #148]	@ (8009054 <USB_EP0_OutStart+0xb4>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d90a      	bls.n	8008fda <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fd4:	d101      	bne.n	8008fda <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	e037      	b.n	800904a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ff4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ff8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	697a      	ldr	r2, [r7, #20]
 8009004:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009008:	f043 0318 	orr.w	r3, r3, #24
 800900c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	697a      	ldr	r2, [r7, #20]
 8009018:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800901c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009020:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009022:	7afb      	ldrb	r3, [r7, #11]
 8009024:	2b01      	cmp	r3, #1
 8009026:	d10f      	bne.n	8009048 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800902e:	461a      	mov	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	697a      	ldr	r2, [r7, #20]
 800903e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009042:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009046:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	371c      	adds	r7, #28
 800904e:	46bd      	mov	sp, r7
 8009050:	bc80      	pop	{r7}
 8009052:	4770      	bx	lr
 8009054:	4f54300a 	.word	0x4f54300a

08009058 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009058:	b480      	push	{r7}
 800905a:	b085      	sub	sp, #20
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009060:	2300      	movs	r3, #0
 8009062:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	3301      	adds	r3, #1
 8009068:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	4a12      	ldr	r2, [pc, #72]	@ (80090b8 <USB_CoreReset+0x60>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d901      	bls.n	8009076 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009072:	2303      	movs	r3, #3
 8009074:	e01b      	b.n	80090ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	2b00      	cmp	r3, #0
 800907c:	daf2      	bge.n	8009064 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800907e:	2300      	movs	r3, #0
 8009080:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	691b      	ldr	r3, [r3, #16]
 8009086:	f043 0201 	orr.w	r2, r3, #1
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	3301      	adds	r3, #1
 8009092:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	4a08      	ldr	r2, [pc, #32]	@ (80090b8 <USB_CoreReset+0x60>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d901      	bls.n	80090a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800909c:	2303      	movs	r3, #3
 800909e:	e006      	b.n	80090ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d0f0      	beq.n	800908e <USB_CoreReset+0x36>

  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3714      	adds	r7, #20
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bc80      	pop	{r7}
 80090b6:	4770      	bx	lr
 80090b8:	00030d40 	.word	0x00030d40

080090bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	460b      	mov	r3, r1
 80090c6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80090c8:	2300      	movs	r3, #0
 80090ca:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	7c1b      	ldrb	r3, [r3, #16]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d115      	bne.n	8009100 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80090d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80090d8:	2202      	movs	r2, #2
 80090da:	2181      	movs	r1, #129	@ 0x81
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f001 ff3c 	bl	800af5a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2201      	movs	r2, #1
 80090e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80090e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80090ec:	2202      	movs	r2, #2
 80090ee:	2101      	movs	r1, #1
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f001 ff32 	bl	800af5a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2201      	movs	r2, #1
 80090fa:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 80090fe:	e012      	b.n	8009126 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009100:	2340      	movs	r3, #64	@ 0x40
 8009102:	2202      	movs	r2, #2
 8009104:	2181      	movs	r1, #129	@ 0x81
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f001 ff27 	bl	800af5a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009112:	2340      	movs	r3, #64	@ 0x40
 8009114:	2202      	movs	r2, #2
 8009116:	2101      	movs	r1, #1
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f001 ff1e 	bl	800af5a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2201      	movs	r2, #1
 8009122:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009126:	2308      	movs	r3, #8
 8009128:	2203      	movs	r2, #3
 800912a:	2182      	movs	r1, #130	@ 0x82
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f001 ff14 	bl	800af5a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2201      	movs	r2, #1
 8009136:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009138:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800913c:	f002 f860 	bl	800b200 <malloc>
 8009140:	4603      	mov	r3, r0
 8009142:	461a      	mov	r2, r3
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009150:	2b00      	cmp	r3, #0
 8009152:	d102      	bne.n	800915a <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8009154:	2301      	movs	r3, #1
 8009156:	73fb      	strb	r3, [r7, #15]
 8009158:	e026      	b.n	80091a8 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009160:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	2200      	movs	r2, #0
 8009170:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	2200      	movs	r2, #0
 8009178:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	7c1b      	ldrb	r3, [r3, #16]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d109      	bne.n	8009198 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800918a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800918e:	2101      	movs	r1, #1
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f001 ffd2 	bl	800b13a <USBD_LL_PrepareReceive>
 8009196:	e007      	b.n	80091a8 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800919e:	2340      	movs	r3, #64	@ 0x40
 80091a0:	2101      	movs	r1, #1
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f001 ffc9 	bl	800b13a <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80091a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	460b      	mov	r3, r1
 80091bc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80091be:	2300      	movs	r3, #0
 80091c0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80091c2:	2181      	movs	r1, #129	@ 0x81
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f001 feee 	bl	800afa6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80091d0:	2101      	movs	r1, #1
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f001 fee7 	bl	800afa6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80091e0:	2182      	movs	r1, #130	@ 0x82
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f001 fedf 	bl	800afa6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00e      	beq.n	8009216 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009208:	4618      	mov	r0, r3
 800920a:	f002 f801 	bl	800b210 <free>
    pdev->pClassData = NULL;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8009216:	7bfb      	ldrb	r3, [r7, #15]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}

08009220 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009230:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009232:	2300      	movs	r3, #0
 8009234:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009236:	2300      	movs	r3, #0
 8009238:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800923a:	2300      	movs	r3, #0
 800923c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009246:	2b00      	cmp	r3, #0
 8009248:	d039      	beq.n	80092be <USBD_CDC_Setup+0x9e>
 800924a:	2b20      	cmp	r3, #32
 800924c:	d17f      	bne.n	800934e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	88db      	ldrh	r3, [r3, #6]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d029      	beq.n	80092aa <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	b25b      	sxtb	r3, r3
 800925c:	2b00      	cmp	r3, #0
 800925e:	da11      	bge.n	8009284 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	683a      	ldr	r2, [r7, #0]
 800926a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800926c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800926e:	683a      	ldr	r2, [r7, #0]
 8009270:	88d2      	ldrh	r2, [r2, #6]
 8009272:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009274:	6939      	ldr	r1, [r7, #16]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	88db      	ldrh	r3, [r3, #6]
 800927a:	461a      	mov	r2, r3
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f001 fa3d 	bl	800a6fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009282:	e06b      	b.n	800935c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	785a      	ldrb	r2, [r3, #1]
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	88db      	ldrh	r3, [r3, #6]
 8009292:	b2da      	uxtb	r2, r3
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800929a:	6939      	ldr	r1, [r7, #16]
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	88db      	ldrh	r3, [r3, #6]
 80092a0:	461a      	mov	r2, r3
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f001 fa58 	bl	800a758 <USBD_CtlPrepareRx>
      break;
 80092a8:	e058      	b.n	800935c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	683a      	ldr	r2, [r7, #0]
 80092b4:	7850      	ldrb	r0, [r2, #1]
 80092b6:	2200      	movs	r2, #0
 80092b8:	6839      	ldr	r1, [r7, #0]
 80092ba:	4798      	blx	r3
      break;
 80092bc:	e04e      	b.n	800935c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	785b      	ldrb	r3, [r3, #1]
 80092c2:	2b0b      	cmp	r3, #11
 80092c4:	d02e      	beq.n	8009324 <USBD_CDC_Setup+0x104>
 80092c6:	2b0b      	cmp	r3, #11
 80092c8:	dc38      	bgt.n	800933c <USBD_CDC_Setup+0x11c>
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d002      	beq.n	80092d4 <USBD_CDC_Setup+0xb4>
 80092ce:	2b0a      	cmp	r3, #10
 80092d0:	d014      	beq.n	80092fc <USBD_CDC_Setup+0xdc>
 80092d2:	e033      	b.n	800933c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d107      	bne.n	80092ee <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80092de:	f107 030c 	add.w	r3, r7, #12
 80092e2:	2202      	movs	r2, #2
 80092e4:	4619      	mov	r1, r3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f001 fa08 	bl	800a6fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80092ec:	e02e      	b.n	800934c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f001 f999 	bl	800a628 <USBD_CtlError>
            ret = USBD_FAIL;
 80092f6:	2302      	movs	r3, #2
 80092f8:	75fb      	strb	r3, [r7, #23]
          break;
 80092fa:	e027      	b.n	800934c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009302:	2b03      	cmp	r3, #3
 8009304:	d107      	bne.n	8009316 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009306:	f107 030f 	add.w	r3, r7, #15
 800930a:	2201      	movs	r2, #1
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f001 f9f4 	bl	800a6fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009314:	e01a      	b.n	800934c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f001 f985 	bl	800a628 <USBD_CtlError>
            ret = USBD_FAIL;
 800931e:	2302      	movs	r3, #2
 8009320:	75fb      	strb	r3, [r7, #23]
          break;
 8009322:	e013      	b.n	800934c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800932a:	2b03      	cmp	r3, #3
 800932c:	d00d      	beq.n	800934a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800932e:	6839      	ldr	r1, [r7, #0]
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f001 f979 	bl	800a628 <USBD_CtlError>
            ret = USBD_FAIL;
 8009336:	2302      	movs	r3, #2
 8009338:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800933a:	e006      	b.n	800934a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f001 f972 	bl	800a628 <USBD_CtlError>
          ret = USBD_FAIL;
 8009344:	2302      	movs	r3, #2
 8009346:	75fb      	strb	r3, [r7, #23]
          break;
 8009348:	e000      	b.n	800934c <USBD_CDC_Setup+0x12c>
          break;
 800934a:	bf00      	nop
      }
      break;
 800934c:	e006      	b.n	800935c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800934e:	6839      	ldr	r1, [r7, #0]
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f001 f969 	bl	800a628 <USBD_CtlError>
      ret = USBD_FAIL;
 8009356:	2302      	movs	r3, #2
 8009358:	75fb      	strb	r3, [r7, #23]
      break;
 800935a:	bf00      	nop
  }

  return ret;
 800935c:	7dfb      	ldrb	r3, [r7, #23]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3718      	adds	r7, #24
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b084      	sub	sp, #16
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
 800936e:	460b      	mov	r3, r1
 8009370:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009378:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009380:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009388:	2b00      	cmp	r3, #0
 800938a:	d03a      	beq.n	8009402 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800938c:	78fa      	ldrb	r2, [r7, #3]
 800938e:	6879      	ldr	r1, [r7, #4]
 8009390:	4613      	mov	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	4413      	add	r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	440b      	add	r3, r1
 800939a:	331c      	adds	r3, #28
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d029      	beq.n	80093f6 <USBD_CDC_DataIn+0x90>
 80093a2:	78fa      	ldrb	r2, [r7, #3]
 80093a4:	6879      	ldr	r1, [r7, #4]
 80093a6:	4613      	mov	r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4413      	add	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	440b      	add	r3, r1
 80093b0:	331c      	adds	r3, #28
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	78f9      	ldrb	r1, [r7, #3]
 80093b6:	68b8      	ldr	r0, [r7, #8]
 80093b8:	460b      	mov	r3, r1
 80093ba:	00db      	lsls	r3, r3, #3
 80093bc:	440b      	add	r3, r1
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4403      	add	r3, r0
 80093c2:	3344      	adds	r3, #68	@ 0x44
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	fbb2 f1f3 	udiv	r1, r2, r3
 80093ca:	fb01 f303 	mul.w	r3, r1, r3
 80093ce:	1ad3      	subs	r3, r2, r3
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d110      	bne.n	80093f6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80093d4:	78fa      	ldrb	r2, [r7, #3]
 80093d6:	6879      	ldr	r1, [r7, #4]
 80093d8:	4613      	mov	r3, r2
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4413      	add	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	440b      	add	r3, r1
 80093e2:	331c      	adds	r3, #28
 80093e4:	2200      	movs	r2, #0
 80093e6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80093e8:	78f9      	ldrb	r1, [r7, #3]
 80093ea:	2300      	movs	r3, #0
 80093ec:	2200      	movs	r2, #0
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f001 fe80 	bl	800b0f4 <USBD_LL_Transmit>
 80093f4:	e003      	b.n	80093fe <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80093fe:	2300      	movs	r3, #0
 8009400:	e000      	b.n	8009404 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009402:	2302      	movs	r3, #2
  }
}
 8009404:	4618      	mov	r0, r3
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	460b      	mov	r3, r1
 8009416:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800941e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009420:	78fb      	ldrb	r3, [r7, #3]
 8009422:	4619      	mov	r1, r3
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f001 feab 	bl	800b180 <USBD_LL_GetRxDataSize>
 800942a:	4602      	mov	r2, r0
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00d      	beq.n	8009458 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009450:	4611      	mov	r1, r2
 8009452:	4798      	blx	r3

    return USBD_OK;
 8009454:	2300      	movs	r3, #0
 8009456:	e000      	b.n	800945a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009458:	2302      	movs	r3, #2
  }
}
 800945a:	4618      	mov	r0, r3
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009462:	b580      	push	{r7, lr}
 8009464:	b084      	sub	sp, #16
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009470:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009478:	2b00      	cmp	r3, #0
 800947a:	d014      	beq.n	80094a6 <USBD_CDC_EP0_RxReady+0x44>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009482:	2bff      	cmp	r3, #255	@ 0xff
 8009484:	d00f      	beq.n	80094a6 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800948c:	689b      	ldr	r3, [r3, #8]
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009494:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800949c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	22ff      	movs	r2, #255	@ 0xff
 80094a2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80094b0:	b480      	push	{r7}
 80094b2:	b083      	sub	sp, #12
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2243      	movs	r2, #67	@ 0x43
 80094bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80094be:	4b03      	ldr	r3, [pc, #12]	@ (80094cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bc80      	pop	{r7}
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	200000e0 	.word	0x200000e0

080094d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2243      	movs	r2, #67	@ 0x43
 80094dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80094de:	4b03      	ldr	r3, [pc, #12]	@ (80094ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bc80      	pop	{r7}
 80094e8:	4770      	bx	lr
 80094ea:	bf00      	nop
 80094ec:	2000009c 	.word	0x2000009c

080094f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2243      	movs	r2, #67	@ 0x43
 80094fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80094fe:	4b03      	ldr	r3, [pc, #12]	@ (800950c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009500:	4618      	mov	r0, r3
 8009502:	370c      	adds	r7, #12
 8009504:	46bd      	mov	sp, r7
 8009506:	bc80      	pop	{r7}
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	20000124 	.word	0x20000124

08009510 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	220a      	movs	r2, #10
 800951c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800951e:	4b03      	ldr	r3, [pc, #12]	@ (800952c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009520:	4618      	mov	r0, r3
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	bc80      	pop	{r7}
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	20000058 	.word	0x20000058

08009530 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800953a:	2302      	movs	r3, #2
 800953c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d005      	beq.n	8009550 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	683a      	ldr	r2, [r7, #0]
 8009548:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800954c:	2300      	movs	r3, #0
 800954e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009550:	7bfb      	ldrb	r3, [r7, #15]
}
 8009552:	4618      	mov	r0, r3
 8009554:	3714      	adds	r7, #20
 8009556:	46bd      	mov	sp, r7
 8009558:	bc80      	pop	{r7}
 800955a:	4770      	bx	lr

0800955c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800955c:	b480      	push	{r7}
 800955e:	b087      	sub	sp, #28
 8009560:	af00      	add	r7, sp, #0
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	4613      	mov	r3, r2
 8009568:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009570:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800957a:	88fa      	ldrh	r2, [r7, #6]
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	371c      	adds	r7, #28
 8009588:	46bd      	mov	sp, r7
 800958a:	bc80      	pop	{r7}
 800958c:	4770      	bx	lr

0800958e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800958e:	b480      	push	{r7}
 8009590:	b085      	sub	sp, #20
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800959e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	683a      	ldr	r2, [r7, #0]
 80095a4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3714      	adds	r7, #20
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bc80      	pop	{r7}
 80095b2:	4770      	bx	lr

080095b4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d01c      	beq.n	8009608 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d115      	bne.n	8009604 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2201      	movs	r2, #1
 80095dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	2181      	movs	r1, #129	@ 0x81
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f001 fd7a 	bl	800b0f4 <USBD_LL_Transmit>

      return USBD_OK;
 8009600:	2300      	movs	r3, #0
 8009602:	e002      	b.n	800960a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009604:	2301      	movs	r3, #1
 8009606:	e000      	b.n	800960a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009608:	2302      	movs	r3, #2
  }
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b084      	sub	sp, #16
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009620:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009628:	2b00      	cmp	r3, #0
 800962a:	d017      	beq.n	800965c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	7c1b      	ldrb	r3, [r3, #16]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d109      	bne.n	8009648 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800963a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800963e:	2101      	movs	r1, #1
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f001 fd7a 	bl	800b13a <USBD_LL_PrepareReceive>
 8009646:	e007      	b.n	8009658 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800964e:	2340      	movs	r3, #64	@ 0x40
 8009650:	2101      	movs	r1, #1
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f001 fd71 	bl	800b13a <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009658:	2300      	movs	r3, #0
 800965a:	e000      	b.n	800965e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800965c:	2302      	movs	r3, #2
  }
}
 800965e:	4618      	mov	r0, r3
 8009660:	3710      	adds	r7, #16
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}

08009666 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009666:	b580      	push	{r7, lr}
 8009668:	b084      	sub	sp, #16
 800966a:	af00      	add	r7, sp, #0
 800966c:	60f8      	str	r0, [r7, #12]
 800966e:	60b9      	str	r1, [r7, #8]
 8009670:	4613      	mov	r3, r2
 8009672:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d101      	bne.n	800967e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800967a:	2302      	movs	r3, #2
 800967c:	e01a      	b.n	80096b4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009684:	2b00      	cmp	r3, #0
 8009686:	d003      	beq.n	8009690 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d003      	beq.n	800969e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2201      	movs	r2, #1
 80096a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	79fa      	ldrb	r2, [r7, #7]
 80096aa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f001 fbef 	bl	800ae90 <USBD_LL_Init>

  return USBD_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d006      	beq.n	80096de <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80096d8:	2300      	movs	r3, #0
 80096da:	73fb      	strb	r3, [r7, #15]
 80096dc:	e001      	b.n	80096e2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80096de:	2302      	movs	r3, #2
 80096e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3714      	adds	r7, #20
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bc80      	pop	{r7}
 80096ec:	4770      	bx	lr

080096ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b082      	sub	sp, #8
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f001 fc14 	bl	800af24 <USBD_LL_Start>

  return USBD_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3708      	adds	r7, #8
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}

08009706 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009706:	b480      	push	{r7}
 8009708:	b083      	sub	sp, #12
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	bc80      	pop	{r7}
 8009718:	4770      	bx	lr

0800971a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b084      	sub	sp, #16
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	460b      	mov	r3, r1
 8009724:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009726:	2302      	movs	r3, #2
 8009728:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009730:	2b00      	cmp	r3, #0
 8009732:	d00c      	beq.n	800974e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	78fa      	ldrb	r2, [r7, #3]
 800973e:	4611      	mov	r1, r2
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	4798      	blx	r3
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d101      	bne.n	800974e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800974e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	460b      	mov	r3, r1
 8009762:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	78fa      	ldrb	r2, [r7, #3]
 800976e:	4611      	mov	r1, r2
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	4798      	blx	r3

  return USBD_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b082      	sub	sp, #8
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
 8009786:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800978e:	6839      	ldr	r1, [r7, #0]
 8009790:	4618      	mov	r0, r3
 8009792:	f000 ff10 	bl	800a5b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2201      	movs	r2, #1
 800979a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80097a4:	461a      	mov	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80097b2:	f003 031f 	and.w	r3, r3, #31
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	d016      	beq.n	80097e8 <USBD_LL_SetupStage+0x6a>
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d81c      	bhi.n	80097f8 <USBD_LL_SetupStage+0x7a>
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d002      	beq.n	80097c8 <USBD_LL_SetupStage+0x4a>
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d008      	beq.n	80097d8 <USBD_LL_SetupStage+0x5a>
 80097c6:	e017      	b.n	80097f8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80097ce:	4619      	mov	r1, r3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f000 fa03 	bl	8009bdc <USBD_StdDevReq>
      break;
 80097d6:	e01a      	b.n	800980e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80097de:	4619      	mov	r1, r3
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f000 fa65 	bl	8009cb0 <USBD_StdItfReq>
      break;
 80097e6:	e012      	b.n	800980e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80097ee:	4619      	mov	r1, r3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 faa5 	bl	8009d40 <USBD_StdEPReq>
      break;
 80097f6:	e00a      	b.n	800980e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80097fe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009802:	b2db      	uxtb	r3, r3
 8009804:	4619      	mov	r1, r3
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f001 fbec 	bl	800afe4 <USBD_LL_StallEP>
      break;
 800980c:	bf00      	nop
  }

  return USBD_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	460b      	mov	r3, r1
 8009822:	607a      	str	r2, [r7, #4]
 8009824:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009826:	7afb      	ldrb	r3, [r7, #11]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d14b      	bne.n	80098c4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009832:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800983a:	2b03      	cmp	r3, #3
 800983c:	d134      	bne.n	80098a8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	68da      	ldr	r2, [r3, #12]
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	429a      	cmp	r2, r3
 8009848:	d919      	bls.n	800987e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	68da      	ldr	r2, [r3, #12]
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	691b      	ldr	r3, [r3, #16]
 8009852:	1ad2      	subs	r2, r2, r3
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	68da      	ldr	r2, [r3, #12]
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009860:	429a      	cmp	r2, r3
 8009862:	d203      	bcs.n	800986c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009868:	b29b      	uxth	r3, r3
 800986a:	e002      	b.n	8009872 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009870:	b29b      	uxth	r3, r3
 8009872:	461a      	mov	r2, r3
 8009874:	6879      	ldr	r1, [r7, #4]
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f000 ff8c 	bl	800a794 <USBD_CtlContinueRx>
 800987c:	e038      	b.n	80098f0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00a      	beq.n	80098a0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009890:	2b03      	cmp	r3, #3
 8009892:	d105      	bne.n	80098a0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f000 ff89 	bl	800a7b8 <USBD_CtlSendStatus>
 80098a6:	e023      	b.n	80098f0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80098ae:	2b05      	cmp	r3, #5
 80098b0:	d11e      	bne.n	80098f0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80098ba:	2100      	movs	r1, #0
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f001 fb91 	bl	800afe4 <USBD_LL_StallEP>
 80098c2:	e015      	b.n	80098f0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00d      	beq.n	80098ec <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80098d6:	2b03      	cmp	r3, #3
 80098d8:	d108      	bne.n	80098ec <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	7afa      	ldrb	r2, [r7, #11]
 80098e4:	4611      	mov	r1, r2
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	4798      	blx	r3
 80098ea:	e001      	b.n	80098f0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80098ec:	2302      	movs	r3, #2
 80098ee:	e000      	b.n	80098f2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3718      	adds	r7, #24
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b086      	sub	sp, #24
 80098fe:	af00      	add	r7, sp, #0
 8009900:	60f8      	str	r0, [r7, #12]
 8009902:	460b      	mov	r3, r1
 8009904:	607a      	str	r2, [r7, #4]
 8009906:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009908:	7afb      	ldrb	r3, [r7, #11]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d17f      	bne.n	8009a0e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	3314      	adds	r3, #20
 8009912:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800991a:	2b02      	cmp	r3, #2
 800991c:	d15c      	bne.n	80099d8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	68da      	ldr	r2, [r3, #12]
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	691b      	ldr	r3, [r3, #16]
 8009926:	429a      	cmp	r2, r3
 8009928:	d915      	bls.n	8009956 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	68da      	ldr	r2, [r3, #12]
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	1ad2      	subs	r2, r2, r3
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	b29b      	uxth	r3, r3
 800993e:	461a      	mov	r2, r3
 8009940:	6879      	ldr	r1, [r7, #4]
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	f000 fef6 	bl	800a734 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009948:	2300      	movs	r3, #0
 800994a:	2200      	movs	r2, #0
 800994c:	2100      	movs	r1, #0
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f001 fbf3 	bl	800b13a <USBD_LL_PrepareReceive>
 8009954:	e04e      	b.n	80099f4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	6912      	ldr	r2, [r2, #16]
 800995e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009962:	fb01 f202 	mul.w	r2, r1, r2
 8009966:	1a9b      	subs	r3, r3, r2
 8009968:	2b00      	cmp	r3, #0
 800996a:	d11c      	bne.n	80099a6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	689a      	ldr	r2, [r3, #8]
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009974:	429a      	cmp	r2, r3
 8009976:	d316      	bcc.n	80099a6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	689a      	ldr	r2, [r3, #8]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009982:	429a      	cmp	r2, r3
 8009984:	d20f      	bcs.n	80099a6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009986:	2200      	movs	r2, #0
 8009988:	2100      	movs	r1, #0
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	f000 fed2 	bl	800a734 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2200      	movs	r2, #0
 8009994:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009998:	2300      	movs	r3, #0
 800999a:	2200      	movs	r2, #0
 800999c:	2100      	movs	r1, #0
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f001 fbcb 	bl	800b13a <USBD_LL_PrepareReceive>
 80099a4:	e026      	b.n	80099f4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00a      	beq.n	80099c8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80099b8:	2b03      	cmp	r3, #3
 80099ba:	d105      	bne.n	80099c8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80099c2:	68db      	ldr	r3, [r3, #12]
 80099c4:	68f8      	ldr	r0, [r7, #12]
 80099c6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80099c8:	2180      	movs	r1, #128	@ 0x80
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	f001 fb0a 	bl	800afe4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f000 ff04 	bl	800a7de <USBD_CtlReceiveStatus>
 80099d6:	e00d      	b.n	80099f4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80099de:	2b04      	cmp	r3, #4
 80099e0:	d004      	beq.n	80099ec <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d103      	bne.n	80099f4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80099ec:	2180      	movs	r1, #128	@ 0x80
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f001 faf8 	bl	800afe4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d11d      	bne.n	8009a3a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	f7ff fe81 	bl	8009706 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009a0c:	e015      	b.n	8009a3a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a14:	695b      	ldr	r3, [r3, #20]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00d      	beq.n	8009a36 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009a20:	2b03      	cmp	r3, #3
 8009a22:	d108      	bne.n	8009a36 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a2a:	695b      	ldr	r3, [r3, #20]
 8009a2c:	7afa      	ldrb	r2, [r7, #11]
 8009a2e:	4611      	mov	r1, r2
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	4798      	blx	r3
 8009a34:	e001      	b.n	8009a3a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009a36:	2302      	movs	r3, #2
 8009a38:	e000      	b.n	8009a3c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3718      	adds	r7, #24
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a4c:	2340      	movs	r3, #64	@ 0x40
 8009a4e:	2200      	movs	r2, #0
 8009a50:	2100      	movs	r1, #0
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f001 fa81 	bl	800af5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2240      	movs	r2, #64	@ 0x40
 8009a64:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009a68:	2340      	movs	r3, #64	@ 0x40
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	2180      	movs	r1, #128	@ 0x80
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f001 fa73 	bl	800af5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2240      	movs	r2, #64	@ 0x40
 8009a7e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2200      	movs	r2, #0
 8009a94:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d009      	beq.n	8009abc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	6852      	ldr	r2, [r2, #4]
 8009ab4:	b2d2      	uxtb	r2, r2
 8009ab6:	4611      	mov	r1, r2
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	4798      	blx	r3
  }

  return USBD_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3708      	adds	r7, #8
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b083      	sub	sp, #12
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	460b      	mov	r3, r1
 8009ad0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	78fa      	ldrb	r2, [r7, #3]
 8009ad6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	370c      	adds	r7, #12
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bc80      	pop	{r7}
 8009ae2:	4770      	bx	lr

08009ae4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2204      	movs	r2, #4
 8009afc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	370c      	adds	r7, #12
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bc80      	pop	{r7}
 8009b0a:	4770      	bx	lr

08009b0c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b1a:	2b04      	cmp	r3, #4
 8009b1c:	d105      	bne.n	8009b2a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bc80      	pop	{r7}
 8009b34:	4770      	bx	lr

08009b36 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b082      	sub	sp, #8
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b44:	2b03      	cmp	r3, #3
 8009b46:	d10b      	bne.n	8009b60 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b4e:	69db      	ldr	r3, [r3, #28]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d005      	beq.n	8009b60 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009b5a:	69db      	ldr	r3, [r3, #28]
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009b6a:	b480      	push	{r7}
 8009b6c:	b083      	sub	sp, #12
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
 8009b72:	460b      	mov	r3, r1
 8009b74:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009b76:	2300      	movs	r3, #0
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bc80      	pop	{r7}
 8009b80:	4770      	bx	lr

08009b82 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009b82:	b480      	push	{r7}
 8009b84:	b083      	sub	sp, #12
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8009b8e:	2300      	movs	r3, #0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bc80      	pop	{r7}
 8009b98:	4770      	bx	lr

08009b9a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009b9a:	b480      	push	{r7}
 8009b9c:	b083      	sub	sp, #12
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	370c      	adds	r7, #12
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bc80      	pop	{r7}
 8009bac:	4770      	bx	lr

08009bae <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b082      	sub	sp, #8
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2201      	movs	r2, #1
 8009bba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	6852      	ldr	r2, [r2, #4]
 8009bca:	b2d2      	uxtb	r2, r2
 8009bcc:	4611      	mov	r1, r2
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	4798      	blx	r3

  return USBD_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009be6:	2300      	movs	r3, #0
 8009be8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009bf2:	2b40      	cmp	r3, #64	@ 0x40
 8009bf4:	d005      	beq.n	8009c02 <USBD_StdDevReq+0x26>
 8009bf6:	2b40      	cmp	r3, #64	@ 0x40
 8009bf8:	d84f      	bhi.n	8009c9a <USBD_StdDevReq+0xbe>
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d009      	beq.n	8009c12 <USBD_StdDevReq+0x36>
 8009bfe:	2b20      	cmp	r3, #32
 8009c00:	d14b      	bne.n	8009c9a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c08:	689b      	ldr	r3, [r3, #8]
 8009c0a:	6839      	ldr	r1, [r7, #0]
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	4798      	blx	r3
      break;
 8009c10:	e048      	b.n	8009ca4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	785b      	ldrb	r3, [r3, #1]
 8009c16:	2b09      	cmp	r3, #9
 8009c18:	d839      	bhi.n	8009c8e <USBD_StdDevReq+0xb2>
 8009c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8009c20 <USBD_StdDevReq+0x44>)
 8009c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c20:	08009c71 	.word	0x08009c71
 8009c24:	08009c85 	.word	0x08009c85
 8009c28:	08009c8f 	.word	0x08009c8f
 8009c2c:	08009c7b 	.word	0x08009c7b
 8009c30:	08009c8f 	.word	0x08009c8f
 8009c34:	08009c53 	.word	0x08009c53
 8009c38:	08009c49 	.word	0x08009c49
 8009c3c:	08009c8f 	.word	0x08009c8f
 8009c40:	08009c67 	.word	0x08009c67
 8009c44:	08009c5d 	.word	0x08009c5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009c48:	6839      	ldr	r1, [r7, #0]
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f9dc 	bl	800a008 <USBD_GetDescriptor>
          break;
 8009c50:	e022      	b.n	8009c98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009c52:	6839      	ldr	r1, [r7, #0]
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fb3f 	bl	800a2d8 <USBD_SetAddress>
          break;
 8009c5a:	e01d      	b.n	8009c98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009c5c:	6839      	ldr	r1, [r7, #0]
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fb7e 	bl	800a360 <USBD_SetConfig>
          break;
 8009c64:	e018      	b.n	8009c98 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c66:	6839      	ldr	r1, [r7, #0]
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 fc07 	bl	800a47c <USBD_GetConfig>
          break;
 8009c6e:	e013      	b.n	8009c98 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009c70:	6839      	ldr	r1, [r7, #0]
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fc37 	bl	800a4e6 <USBD_GetStatus>
          break;
 8009c78:	e00e      	b.n	8009c98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fc65 	bl	800a54c <USBD_SetFeature>
          break;
 8009c82:	e009      	b.n	8009c98 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009c84:	6839      	ldr	r1, [r7, #0]
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fc74 	bl	800a574 <USBD_ClrFeature>
          break;
 8009c8c:	e004      	b.n	8009c98 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009c8e:	6839      	ldr	r1, [r7, #0]
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fcc9 	bl	800a628 <USBD_CtlError>
          break;
 8009c96:	bf00      	nop
      }
      break;
 8009c98:	e004      	b.n	8009ca4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009c9a:	6839      	ldr	r1, [r7, #0]
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 fcc3 	bl	800a628 <USBD_CtlError>
      break;
 8009ca2:	bf00      	nop
  }

  return ret;
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop

08009cb0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009cc6:	2b40      	cmp	r3, #64	@ 0x40
 8009cc8:	d005      	beq.n	8009cd6 <USBD_StdItfReq+0x26>
 8009cca:	2b40      	cmp	r3, #64	@ 0x40
 8009ccc:	d82e      	bhi.n	8009d2c <USBD_StdItfReq+0x7c>
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d001      	beq.n	8009cd6 <USBD_StdItfReq+0x26>
 8009cd2:	2b20      	cmp	r3, #32
 8009cd4:	d12a      	bne.n	8009d2c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	2b02      	cmp	r3, #2
 8009ce0:	d81d      	bhi.n	8009d1e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	889b      	ldrh	r3, [r3, #4]
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d813      	bhi.n	8009d14 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	6839      	ldr	r1, [r7, #0]
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	4798      	blx	r3
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	88db      	ldrh	r3, [r3, #6]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d110      	bne.n	8009d28 <USBD_StdItfReq+0x78>
 8009d06:	7bfb      	ldrb	r3, [r7, #15]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d10d      	bne.n	8009d28 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fd53 	bl	800a7b8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009d12:	e009      	b.n	8009d28 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009d14:	6839      	ldr	r1, [r7, #0]
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fc86 	bl	800a628 <USBD_CtlError>
          break;
 8009d1c:	e004      	b.n	8009d28 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009d1e:	6839      	ldr	r1, [r7, #0]
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fc81 	bl	800a628 <USBD_CtlError>
          break;
 8009d26:	e000      	b.n	8009d2a <USBD_StdItfReq+0x7a>
          break;
 8009d28:	bf00      	nop
      }
      break;
 8009d2a:	e004      	b.n	8009d36 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009d2c:	6839      	ldr	r1, [r7, #0]
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fc7a 	bl	800a628 <USBD_CtlError>
      break;
 8009d34:	bf00      	nop
  }

  return USBD_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	889b      	ldrh	r3, [r3, #4]
 8009d52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d5c:	2b40      	cmp	r3, #64	@ 0x40
 8009d5e:	d007      	beq.n	8009d70 <USBD_StdEPReq+0x30>
 8009d60:	2b40      	cmp	r3, #64	@ 0x40
 8009d62:	f200 8146 	bhi.w	8009ff2 <USBD_StdEPReq+0x2b2>
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00a      	beq.n	8009d80 <USBD_StdEPReq+0x40>
 8009d6a:	2b20      	cmp	r3, #32
 8009d6c:	f040 8141 	bne.w	8009ff2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	6839      	ldr	r1, [r7, #0]
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	4798      	blx	r3
      break;
 8009d7e:	e13d      	b.n	8009ffc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	781b      	ldrb	r3, [r3, #0]
 8009d84:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d88:	2b20      	cmp	r3, #32
 8009d8a:	d10a      	bne.n	8009da2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	6839      	ldr	r1, [r7, #0]
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	4798      	blx	r3
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009d9e:	7bfb      	ldrb	r3, [r7, #15]
 8009da0:	e12d      	b.n	8009ffe <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	785b      	ldrb	r3, [r3, #1]
 8009da6:	2b03      	cmp	r3, #3
 8009da8:	d007      	beq.n	8009dba <USBD_StdEPReq+0x7a>
 8009daa:	2b03      	cmp	r3, #3
 8009dac:	f300 811b 	bgt.w	8009fe6 <USBD_StdEPReq+0x2a6>
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d072      	beq.n	8009e9a <USBD_StdEPReq+0x15a>
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d03a      	beq.n	8009e2e <USBD_StdEPReq+0xee>
 8009db8:	e115      	b.n	8009fe6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	d002      	beq.n	8009dca <USBD_StdEPReq+0x8a>
 8009dc4:	2b03      	cmp	r3, #3
 8009dc6:	d015      	beq.n	8009df4 <USBD_StdEPReq+0xb4>
 8009dc8:	e02b      	b.n	8009e22 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009dca:	7bbb      	ldrb	r3, [r7, #14]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d00c      	beq.n	8009dea <USBD_StdEPReq+0xaa>
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
 8009dd2:	2b80      	cmp	r3, #128	@ 0x80
 8009dd4:	d009      	beq.n	8009dea <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009dd6:	7bbb      	ldrb	r3, [r7, #14]
 8009dd8:	4619      	mov	r1, r3
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f001 f902 	bl	800afe4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009de0:	2180      	movs	r1, #128	@ 0x80
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f001 f8fe 	bl	800afe4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009de8:	e020      	b.n	8009e2c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009dea:	6839      	ldr	r1, [r7, #0]
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 fc1b 	bl	800a628 <USBD_CtlError>
              break;
 8009df2:	e01b      	b.n	8009e2c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	885b      	ldrh	r3, [r3, #2]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d10e      	bne.n	8009e1a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009dfc:	7bbb      	ldrb	r3, [r7, #14]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d00b      	beq.n	8009e1a <USBD_StdEPReq+0xda>
 8009e02:	7bbb      	ldrb	r3, [r7, #14]
 8009e04:	2b80      	cmp	r3, #128	@ 0x80
 8009e06:	d008      	beq.n	8009e1a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	88db      	ldrh	r3, [r3, #6]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d104      	bne.n	8009e1a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009e10:	7bbb      	ldrb	r3, [r7, #14]
 8009e12:	4619      	mov	r1, r3
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f001 f8e5 	bl	800afe4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f000 fccc 	bl	800a7b8 <USBD_CtlSendStatus>

              break;
 8009e20:	e004      	b.n	8009e2c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009e22:	6839      	ldr	r1, [r7, #0]
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fbff 	bl	800a628 <USBD_CtlError>
              break;
 8009e2a:	bf00      	nop
          }
          break;
 8009e2c:	e0e0      	b.n	8009ff0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d002      	beq.n	8009e3e <USBD_StdEPReq+0xfe>
 8009e38:	2b03      	cmp	r3, #3
 8009e3a:	d015      	beq.n	8009e68 <USBD_StdEPReq+0x128>
 8009e3c:	e026      	b.n	8009e8c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e3e:	7bbb      	ldrb	r3, [r7, #14]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00c      	beq.n	8009e5e <USBD_StdEPReq+0x11e>
 8009e44:	7bbb      	ldrb	r3, [r7, #14]
 8009e46:	2b80      	cmp	r3, #128	@ 0x80
 8009e48:	d009      	beq.n	8009e5e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009e4a:	7bbb      	ldrb	r3, [r7, #14]
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f001 f8c8 	bl	800afe4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009e54:	2180      	movs	r1, #128	@ 0x80
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f001 f8c4 	bl	800afe4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e5c:	e01c      	b.n	8009e98 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009e5e:	6839      	ldr	r1, [r7, #0]
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 fbe1 	bl	800a628 <USBD_CtlError>
              break;
 8009e66:	e017      	b.n	8009e98 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	885b      	ldrh	r3, [r3, #2]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d112      	bne.n	8009e96 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e70:	7bbb      	ldrb	r3, [r7, #14]
 8009e72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d004      	beq.n	8009e84 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e7a:	7bbb      	ldrb	r3, [r7, #14]
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f001 f8cf 	bl	800b022 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f000 fc97 	bl	800a7b8 <USBD_CtlSendStatus>
              }
              break;
 8009e8a:	e004      	b.n	8009e96 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 fbca 	bl	800a628 <USBD_CtlError>
              break;
 8009e94:	e000      	b.n	8009e98 <USBD_StdEPReq+0x158>
              break;
 8009e96:	bf00      	nop
          }
          break;
 8009e98:	e0aa      	b.n	8009ff0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	d002      	beq.n	8009eaa <USBD_StdEPReq+0x16a>
 8009ea4:	2b03      	cmp	r3, #3
 8009ea6:	d032      	beq.n	8009f0e <USBD_StdEPReq+0x1ce>
 8009ea8:	e097      	b.n	8009fda <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009eaa:	7bbb      	ldrb	r3, [r7, #14]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d007      	beq.n	8009ec0 <USBD_StdEPReq+0x180>
 8009eb0:	7bbb      	ldrb	r3, [r7, #14]
 8009eb2:	2b80      	cmp	r3, #128	@ 0x80
 8009eb4:	d004      	beq.n	8009ec0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009eb6:	6839      	ldr	r1, [r7, #0]
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 fbb5 	bl	800a628 <USBD_CtlError>
                break;
 8009ebe:	e091      	b.n	8009fe4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ec0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	da0b      	bge.n	8009ee0 <USBD_StdEPReq+0x1a0>
 8009ec8:	7bbb      	ldrb	r3, [r7, #14]
 8009eca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ece:	4613      	mov	r3, r2
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	4413      	add	r3, r2
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	3310      	adds	r3, #16
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	4413      	add	r3, r2
 8009edc:	3304      	adds	r3, #4
 8009ede:	e00b      	b.n	8009ef8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009ee0:	7bbb      	ldrb	r3, [r7, #14]
 8009ee2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ee6:	4613      	mov	r3, r2
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	4413      	add	r3, r2
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	3304      	adds	r3, #4
 8009ef8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	2200      	movs	r2, #0
 8009efe:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	2202      	movs	r2, #2
 8009f04:	4619      	mov	r1, r3
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 fbf8 	bl	800a6fc <USBD_CtlSendData>
              break;
 8009f0c:	e06a      	b.n	8009fe4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009f0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	da11      	bge.n	8009f3a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009f16:	7bbb      	ldrb	r3, [r7, #14]
 8009f18:	f003 020f 	and.w	r2, r3, #15
 8009f1c:	6879      	ldr	r1, [r7, #4]
 8009f1e:	4613      	mov	r3, r2
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	4413      	add	r3, r2
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	440b      	add	r3, r1
 8009f28:	3318      	adds	r3, #24
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d117      	bne.n	8009f60 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 fb78 	bl	800a628 <USBD_CtlError>
                  break;
 8009f38:	e054      	b.n	8009fe4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f3a:	7bbb      	ldrb	r3, [r7, #14]
 8009f3c:	f003 020f 	and.w	r2, r3, #15
 8009f40:	6879      	ldr	r1, [r7, #4]
 8009f42:	4613      	mov	r3, r2
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	4413      	add	r3, r2
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	440b      	add	r3, r1
 8009f4c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d104      	bne.n	8009f60 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009f56:	6839      	ldr	r1, [r7, #0]
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 fb65 	bl	800a628 <USBD_CtlError>
                  break;
 8009f5e:	e041      	b.n	8009fe4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	da0b      	bge.n	8009f80 <USBD_StdEPReq+0x240>
 8009f68:	7bbb      	ldrb	r3, [r7, #14]
 8009f6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009f6e:	4613      	mov	r3, r2
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	4413      	add	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	3310      	adds	r3, #16
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	3304      	adds	r3, #4
 8009f7e:	e00b      	b.n	8009f98 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f80:	7bbb      	ldrb	r3, [r7, #14]
 8009f82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f86:	4613      	mov	r3, r2
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	4413      	add	r3, r2
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	4413      	add	r3, r2
 8009f96:	3304      	adds	r3, #4
 8009f98:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009f9a:	7bbb      	ldrb	r3, [r7, #14]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d002      	beq.n	8009fa6 <USBD_StdEPReq+0x266>
 8009fa0:	7bbb      	ldrb	r3, [r7, #14]
 8009fa2:	2b80      	cmp	r3, #128	@ 0x80
 8009fa4:	d103      	bne.n	8009fae <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	601a      	str	r2, [r3, #0]
 8009fac:	e00e      	b.n	8009fcc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009fae:	7bbb      	ldrb	r3, [r7, #14]
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f001 f854 	bl	800b060 <USBD_LL_IsStallEP>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d003      	beq.n	8009fc6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	601a      	str	r2, [r3, #0]
 8009fc4:	e002      	b.n	8009fcc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	2202      	movs	r2, #2
 8009fd0:	4619      	mov	r1, r3
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 fb92 	bl	800a6fc <USBD_CtlSendData>
              break;
 8009fd8:	e004      	b.n	8009fe4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009fda:	6839      	ldr	r1, [r7, #0]
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 fb23 	bl	800a628 <USBD_CtlError>
              break;
 8009fe2:	bf00      	nop
          }
          break;
 8009fe4:	e004      	b.n	8009ff0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009fe6:	6839      	ldr	r1, [r7, #0]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 fb1d 	bl	800a628 <USBD_CtlError>
          break;
 8009fee:	bf00      	nop
      }
      break;
 8009ff0:	e004      	b.n	8009ffc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009ff2:	6839      	ldr	r1, [r7, #0]
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 fb17 	bl	800a628 <USBD_CtlError>
      break;
 8009ffa:	bf00      	nop
  }

  return ret;
 8009ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
	...

0800a008 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a012:	2300      	movs	r3, #0
 800a014:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a016:	2300      	movs	r3, #0
 800a018:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a01a:	2300      	movs	r3, #0
 800a01c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	885b      	ldrh	r3, [r3, #2]
 800a022:	0a1b      	lsrs	r3, r3, #8
 800a024:	b29b      	uxth	r3, r3
 800a026:	3b01      	subs	r3, #1
 800a028:	2b06      	cmp	r3, #6
 800a02a:	f200 8128 	bhi.w	800a27e <USBD_GetDescriptor+0x276>
 800a02e:	a201      	add	r2, pc, #4	@ (adr r2, 800a034 <USBD_GetDescriptor+0x2c>)
 800a030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a034:	0800a051 	.word	0x0800a051
 800a038:	0800a069 	.word	0x0800a069
 800a03c:	0800a0a9 	.word	0x0800a0a9
 800a040:	0800a27f 	.word	0x0800a27f
 800a044:	0800a27f 	.word	0x0800a27f
 800a048:	0800a21f 	.word	0x0800a21f
 800a04c:	0800a24b 	.word	0x0800a24b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	7c12      	ldrb	r2, [r2, #16]
 800a05c:	f107 0108 	add.w	r1, r7, #8
 800a060:	4610      	mov	r0, r2
 800a062:	4798      	blx	r3
 800a064:	60f8      	str	r0, [r7, #12]
      break;
 800a066:	e112      	b.n	800a28e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	7c1b      	ldrb	r3, [r3, #16]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10d      	bne.n	800a08c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a078:	f107 0208 	add.w	r2, r7, #8
 800a07c:	4610      	mov	r0, r2
 800a07e:	4798      	blx	r3
 800a080:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	3301      	adds	r3, #1
 800a086:	2202      	movs	r2, #2
 800a088:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a08a:	e100      	b.n	800a28e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a094:	f107 0208 	add.w	r2, r7, #8
 800a098:	4610      	mov	r0, r2
 800a09a:	4798      	blx	r3
 800a09c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	701a      	strb	r2, [r3, #0]
      break;
 800a0a6:	e0f2      	b.n	800a28e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	885b      	ldrh	r3, [r3, #2]
 800a0ac:	b2db      	uxtb	r3, r3
 800a0ae:	2b05      	cmp	r3, #5
 800a0b0:	f200 80ac 	bhi.w	800a20c <USBD_GetDescriptor+0x204>
 800a0b4:	a201      	add	r2, pc, #4	@ (adr r2, 800a0bc <USBD_GetDescriptor+0xb4>)
 800a0b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ba:	bf00      	nop
 800a0bc:	0800a0d5 	.word	0x0800a0d5
 800a0c0:	0800a109 	.word	0x0800a109
 800a0c4:	0800a13d 	.word	0x0800a13d
 800a0c8:	0800a171 	.word	0x0800a171
 800a0cc:	0800a1a5 	.word	0x0800a1a5
 800a0d0:	0800a1d9 	.word	0x0800a1d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00b      	beq.n	800a0f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	7c12      	ldrb	r2, [r2, #16]
 800a0ec:	f107 0108 	add.w	r1, r7, #8
 800a0f0:	4610      	mov	r0, r2
 800a0f2:	4798      	blx	r3
 800a0f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0f6:	e091      	b.n	800a21c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0f8:	6839      	ldr	r1, [r7, #0]
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 fa94 	bl	800a628 <USBD_CtlError>
            err++;
 800a100:	7afb      	ldrb	r3, [r7, #11]
 800a102:	3301      	adds	r3, #1
 800a104:	72fb      	strb	r3, [r7, #11]
          break;
 800a106:	e089      	b.n	800a21c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d00b      	beq.n	800a12c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a11a:	689b      	ldr	r3, [r3, #8]
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	7c12      	ldrb	r2, [r2, #16]
 800a120:	f107 0108 	add.w	r1, r7, #8
 800a124:	4610      	mov	r0, r2
 800a126:	4798      	blx	r3
 800a128:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a12a:	e077      	b.n	800a21c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fa7a 	bl	800a628 <USBD_CtlError>
            err++;
 800a134:	7afb      	ldrb	r3, [r7, #11]
 800a136:	3301      	adds	r3, #1
 800a138:	72fb      	strb	r3, [r7, #11]
          break;
 800a13a:	e06f      	b.n	800a21c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00b      	beq.n	800a160 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a14e:	68db      	ldr	r3, [r3, #12]
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	7c12      	ldrb	r2, [r2, #16]
 800a154:	f107 0108 	add.w	r1, r7, #8
 800a158:	4610      	mov	r0, r2
 800a15a:	4798      	blx	r3
 800a15c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a15e:	e05d      	b.n	800a21c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a160:	6839      	ldr	r1, [r7, #0]
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fa60 	bl	800a628 <USBD_CtlError>
            err++;
 800a168:	7afb      	ldrb	r3, [r7, #11]
 800a16a:	3301      	adds	r3, #1
 800a16c:	72fb      	strb	r3, [r7, #11]
          break;
 800a16e:	e055      	b.n	800a21c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00b      	beq.n	800a194 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	687a      	ldr	r2, [r7, #4]
 800a186:	7c12      	ldrb	r2, [r2, #16]
 800a188:	f107 0108 	add.w	r1, r7, #8
 800a18c:	4610      	mov	r0, r2
 800a18e:	4798      	blx	r3
 800a190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a192:	e043      	b.n	800a21c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a194:	6839      	ldr	r1, [r7, #0]
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 fa46 	bl	800a628 <USBD_CtlError>
            err++;
 800a19c:	7afb      	ldrb	r3, [r7, #11]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a1a2:	e03b      	b.n	800a21c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a1aa:	695b      	ldr	r3, [r3, #20]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d00b      	beq.n	800a1c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a1b6:	695b      	ldr	r3, [r3, #20]
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	7c12      	ldrb	r2, [r2, #16]
 800a1bc:	f107 0108 	add.w	r1, r7, #8
 800a1c0:	4610      	mov	r0, r2
 800a1c2:	4798      	blx	r3
 800a1c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1c6:	e029      	b.n	800a21c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1c8:	6839      	ldr	r1, [r7, #0]
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 fa2c 	bl	800a628 <USBD_CtlError>
            err++;
 800a1d0:	7afb      	ldrb	r3, [r7, #11]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a1d6:	e021      	b.n	800a21c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a1de:	699b      	ldr	r3, [r3, #24]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d00b      	beq.n	800a1fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	687a      	ldr	r2, [r7, #4]
 800a1ee:	7c12      	ldrb	r2, [r2, #16]
 800a1f0:	f107 0108 	add.w	r1, r7, #8
 800a1f4:	4610      	mov	r0, r2
 800a1f6:	4798      	blx	r3
 800a1f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1fa:	e00f      	b.n	800a21c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1fc:	6839      	ldr	r1, [r7, #0]
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 fa12 	bl	800a628 <USBD_CtlError>
            err++;
 800a204:	7afb      	ldrb	r3, [r7, #11]
 800a206:	3301      	adds	r3, #1
 800a208:	72fb      	strb	r3, [r7, #11]
          break;
 800a20a:	e007      	b.n	800a21c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a20c:	6839      	ldr	r1, [r7, #0]
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 fa0a 	bl	800a628 <USBD_CtlError>
          err++;
 800a214:	7afb      	ldrb	r3, [r7, #11]
 800a216:	3301      	adds	r3, #1
 800a218:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a21a:	e038      	b.n	800a28e <USBD_GetDescriptor+0x286>
 800a21c:	e037      	b.n	800a28e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	7c1b      	ldrb	r3, [r3, #16]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d109      	bne.n	800a23a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a22c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a22e:	f107 0208 	add.w	r2, r7, #8
 800a232:	4610      	mov	r0, r2
 800a234:	4798      	blx	r3
 800a236:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a238:	e029      	b.n	800a28e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a23a:	6839      	ldr	r1, [r7, #0]
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 f9f3 	bl	800a628 <USBD_CtlError>
        err++;
 800a242:	7afb      	ldrb	r3, [r7, #11]
 800a244:	3301      	adds	r3, #1
 800a246:	72fb      	strb	r3, [r7, #11]
      break;
 800a248:	e021      	b.n	800a28e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	7c1b      	ldrb	r3, [r3, #16]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d10d      	bne.n	800a26e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a25a:	f107 0208 	add.w	r2, r7, #8
 800a25e:	4610      	mov	r0, r2
 800a260:	4798      	blx	r3
 800a262:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	3301      	adds	r3, #1
 800a268:	2207      	movs	r2, #7
 800a26a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a26c:	e00f      	b.n	800a28e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a26e:	6839      	ldr	r1, [r7, #0]
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 f9d9 	bl	800a628 <USBD_CtlError>
        err++;
 800a276:	7afb      	ldrb	r3, [r7, #11]
 800a278:	3301      	adds	r3, #1
 800a27a:	72fb      	strb	r3, [r7, #11]
      break;
 800a27c:	e007      	b.n	800a28e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a27e:	6839      	ldr	r1, [r7, #0]
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 f9d1 	bl	800a628 <USBD_CtlError>
      err++;
 800a286:	7afb      	ldrb	r3, [r7, #11]
 800a288:	3301      	adds	r3, #1
 800a28a:	72fb      	strb	r3, [r7, #11]
      break;
 800a28c:	bf00      	nop
  }

  if (err != 0U)
 800a28e:	7afb      	ldrb	r3, [r7, #11]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d11c      	bne.n	800a2ce <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a294:	893b      	ldrh	r3, [r7, #8]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d011      	beq.n	800a2be <USBD_GetDescriptor+0x2b6>
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	88db      	ldrh	r3, [r3, #6]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00d      	beq.n	800a2be <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	88da      	ldrh	r2, [r3, #6]
 800a2a6:	893b      	ldrh	r3, [r7, #8]
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	bf28      	it	cs
 800a2ac:	4613      	movcs	r3, r2
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a2b2:	893b      	ldrh	r3, [r7, #8]
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	68f9      	ldr	r1, [r7, #12]
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f000 fa1f 	bl	800a6fc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	88db      	ldrh	r3, [r3, #6]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d104      	bne.n	800a2d0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 fa76 	bl	800a7b8 <USBD_CtlSendStatus>
 800a2cc:	e000      	b.n	800a2d0 <USBD_GetDescriptor+0x2c8>
    return;
 800a2ce:	bf00      	nop
    }
  }
}
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop

0800a2d8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	889b      	ldrh	r3, [r3, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d130      	bne.n	800a34c <USBD_SetAddress+0x74>
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	88db      	ldrh	r3, [r3, #6]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d12c      	bne.n	800a34c <USBD_SetAddress+0x74>
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	885b      	ldrh	r3, [r3, #2]
 800a2f6:	2b7f      	cmp	r3, #127	@ 0x7f
 800a2f8:	d828      	bhi.n	800a34c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	885b      	ldrh	r3, [r3, #2]
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a304:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a30c:	2b03      	cmp	r3, #3
 800a30e:	d104      	bne.n	800a31a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a310:	6839      	ldr	r1, [r7, #0]
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f988 	bl	800a628 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a318:	e01d      	b.n	800a356 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	7bfa      	ldrb	r2, [r7, #15]
 800a31e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a322:	7bfb      	ldrb	r3, [r7, #15]
 800a324:	4619      	mov	r1, r3
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fec5 	bl	800b0b6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 fa43 	bl	800a7b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a332:	7bfb      	ldrb	r3, [r7, #15]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d004      	beq.n	800a342 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2202      	movs	r2, #2
 800a33c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a340:	e009      	b.n	800a356 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2201      	movs	r2, #1
 800a346:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a34a:	e004      	b.n	800a356 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a34c:	6839      	ldr	r1, [r7, #0]
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 f96a 	bl	800a628 <USBD_CtlError>
  }
}
 800a354:	bf00      	nop
 800a356:	bf00      	nop
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
	...

0800a360 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	885b      	ldrh	r3, [r3, #2]
 800a36e:	b2da      	uxtb	r2, r3
 800a370:	4b41      	ldr	r3, [pc, #260]	@ (800a478 <USBD_SetConfig+0x118>)
 800a372:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a374:	4b40      	ldr	r3, [pc, #256]	@ (800a478 <USBD_SetConfig+0x118>)
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d904      	bls.n	800a386 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a37c:	6839      	ldr	r1, [r7, #0]
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 f952 	bl	800a628 <USBD_CtlError>
 800a384:	e075      	b.n	800a472 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a38c:	2b02      	cmp	r3, #2
 800a38e:	d002      	beq.n	800a396 <USBD_SetConfig+0x36>
 800a390:	2b03      	cmp	r3, #3
 800a392:	d023      	beq.n	800a3dc <USBD_SetConfig+0x7c>
 800a394:	e062      	b.n	800a45c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a396:	4b38      	ldr	r3, [pc, #224]	@ (800a478 <USBD_SetConfig+0x118>)
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d01a      	beq.n	800a3d4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a39e:	4b36      	ldr	r3, [pc, #216]	@ (800a478 <USBD_SetConfig+0x118>)
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2203      	movs	r2, #3
 800a3ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a3b0:	4b31      	ldr	r3, [pc, #196]	@ (800a478 <USBD_SetConfig+0x118>)
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7ff f9af 	bl	800971a <USBD_SetClassConfig>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d104      	bne.n	800a3cc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a3c2:	6839      	ldr	r1, [r7, #0]
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 f92f 	bl	800a628 <USBD_CtlError>
            return;
 800a3ca:	e052      	b.n	800a472 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 f9f3 	bl	800a7b8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a3d2:	e04e      	b.n	800a472 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 f9ef 	bl	800a7b8 <USBD_CtlSendStatus>
        break;
 800a3da:	e04a      	b.n	800a472 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a3dc:	4b26      	ldr	r3, [pc, #152]	@ (800a478 <USBD_SetConfig+0x118>)
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d112      	bne.n	800a40a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2202      	movs	r2, #2
 800a3e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800a3ec:	4b22      	ldr	r3, [pc, #136]	@ (800a478 <USBD_SetConfig+0x118>)
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a3f6:	4b20      	ldr	r3, [pc, #128]	@ (800a478 <USBD_SetConfig+0x118>)
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f7ff f9ab 	bl	8009758 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f000 f9d8 	bl	800a7b8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a408:	e033      	b.n	800a472 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a40a:	4b1b      	ldr	r3, [pc, #108]	@ (800a478 <USBD_SetConfig+0x118>)
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	461a      	mov	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	429a      	cmp	r2, r3
 800a416:	d01d      	beq.n	800a454 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	4619      	mov	r1, r3
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f7ff f999 	bl	8009758 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a426:	4b14      	ldr	r3, [pc, #80]	@ (800a478 <USBD_SetConfig+0x118>)
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	461a      	mov	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a430:	4b11      	ldr	r3, [pc, #68]	@ (800a478 <USBD_SetConfig+0x118>)
 800a432:	781b      	ldrb	r3, [r3, #0]
 800a434:	4619      	mov	r1, r3
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f7ff f96f 	bl	800971a <USBD_SetClassConfig>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b02      	cmp	r3, #2
 800a440:	d104      	bne.n	800a44c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a442:	6839      	ldr	r1, [r7, #0]
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 f8ef 	bl	800a628 <USBD_CtlError>
            return;
 800a44a:	e012      	b.n	800a472 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 f9b3 	bl	800a7b8 <USBD_CtlSendStatus>
        break;
 800a452:	e00e      	b.n	800a472 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 f9af 	bl	800a7b8 <USBD_CtlSendStatus>
        break;
 800a45a:	e00a      	b.n	800a472 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a45c:	6839      	ldr	r1, [r7, #0]
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 f8e2 	bl	800a628 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a464:	4b04      	ldr	r3, [pc, #16]	@ (800a478 <USBD_SetConfig+0x118>)
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	4619      	mov	r1, r3
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f7ff f974 	bl	8009758 <USBD_ClrClassConfig>
        break;
 800a470:	bf00      	nop
    }
  }
}
 800a472:	3708      	adds	r7, #8
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	20000608 	.word	0x20000608

0800a47c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	88db      	ldrh	r3, [r3, #6]
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d004      	beq.n	800a498 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a48e:	6839      	ldr	r1, [r7, #0]
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 f8c9 	bl	800a628 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a496:	e022      	b.n	800a4de <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	dc02      	bgt.n	800a4a8 <USBD_GetConfig+0x2c>
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	dc03      	bgt.n	800a4ae <USBD_GetConfig+0x32>
 800a4a6:	e015      	b.n	800a4d4 <USBD_GetConfig+0x58>
 800a4a8:	2b03      	cmp	r3, #3
 800a4aa:	d00b      	beq.n	800a4c4 <USBD_GetConfig+0x48>
 800a4ac:	e012      	b.n	800a4d4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	3308      	adds	r3, #8
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 f91d 	bl	800a6fc <USBD_CtlSendData>
        break;
 800a4c2:	e00c      	b.n	800a4de <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	3304      	adds	r3, #4
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	4619      	mov	r1, r3
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 f915 	bl	800a6fc <USBD_CtlSendData>
        break;
 800a4d2:	e004      	b.n	800a4de <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a4d4:	6839      	ldr	r1, [r7, #0]
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f8a6 	bl	800a628 <USBD_CtlError>
        break;
 800a4dc:	bf00      	nop
}
 800a4de:	bf00      	nop
 800a4e0:	3708      	adds	r7, #8
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b082      	sub	sp, #8
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
 800a4ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	d81e      	bhi.n	800a53a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	88db      	ldrh	r3, [r3, #6]
 800a500:	2b02      	cmp	r3, #2
 800a502:	d004      	beq.n	800a50e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a504:	6839      	ldr	r1, [r7, #0]
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 f88e 	bl	800a628 <USBD_CtlError>
        break;
 800a50c:	e01a      	b.n	800a544 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2201      	movs	r2, #1
 800a512:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d005      	beq.n	800a52a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	f043 0202 	orr.w	r2, r3, #2
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	330c      	adds	r3, #12
 800a52e:	2202      	movs	r2, #2
 800a530:	4619      	mov	r1, r3
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 f8e2 	bl	800a6fc <USBD_CtlSendData>
      break;
 800a538:	e004      	b.n	800a544 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a53a:	6839      	ldr	r1, [r7, #0]
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 f873 	bl	800a628 <USBD_CtlError>
      break;
 800a542:	bf00      	nop
  }
}
 800a544:	bf00      	nop
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	885b      	ldrh	r3, [r3, #2]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d106      	bne.n	800a56c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2201      	movs	r2, #1
 800a562:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 f926 	bl	800a7b8 <USBD_CtlSendStatus>
  }
}
 800a56c:	bf00      	nop
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a584:	3b01      	subs	r3, #1
 800a586:	2b02      	cmp	r3, #2
 800a588:	d80b      	bhi.n	800a5a2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	885b      	ldrh	r3, [r3, #2]
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d10c      	bne.n	800a5ac <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 f90c 	bl	800a7b8 <USBD_CtlSendStatus>
      }
      break;
 800a5a0:	e004      	b.n	800a5ac <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a5a2:	6839      	ldr	r1, [r7, #0]
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 f83f 	bl	800a628 <USBD_CtlError>
      break;
 800a5aa:	e000      	b.n	800a5ae <USBD_ClrFeature+0x3a>
      break;
 800a5ac:	bf00      	nop
  }
}
 800a5ae:	bf00      	nop
 800a5b0:	3708      	adds	r7, #8
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a5b6:	b480      	push	{r7}
 800a5b8:	b083      	sub	sp, #12
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
 800a5be:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	781a      	ldrb	r2, [r3, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	785a      	ldrb	r2, [r3, #1]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	3302      	adds	r3, #2
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	3303      	adds	r3, #3
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	021b      	lsls	r3, r3, #8
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	4413      	add	r3, r2
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	3304      	adds	r3, #4
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	3305      	adds	r3, #5
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	021b      	lsls	r3, r3, #8
 800a5fa:	b29b      	uxth	r3, r3
 800a5fc:	4413      	add	r3, r2
 800a5fe:	b29a      	uxth	r2, r3
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	3306      	adds	r3, #6
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	461a      	mov	r2, r3
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	3307      	adds	r3, #7
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	021b      	lsls	r3, r3, #8
 800a614:	b29b      	uxth	r3, r3
 800a616:	4413      	add	r3, r2
 800a618:	b29a      	uxth	r2, r3
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	80da      	strh	r2, [r3, #6]

}
 800a61e:	bf00      	nop
 800a620:	370c      	adds	r7, #12
 800a622:	46bd      	mov	sp, r7
 800a624:	bc80      	pop	{r7}
 800a626:	4770      	bx	lr

0800a628 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a632:	2180      	movs	r1, #128	@ 0x80
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 fcd5 	bl	800afe4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a63a:	2100      	movs	r1, #0
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	f000 fcd1 	bl	800afe4 <USBD_LL_StallEP>
}
 800a642:	bf00      	nop
 800a644:	3708      	adds	r7, #8
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}

0800a64a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b086      	sub	sp, #24
 800a64e:	af00      	add	r7, sp, #0
 800a650:	60f8      	str	r0, [r7, #12]
 800a652:	60b9      	str	r1, [r7, #8]
 800a654:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a656:	2300      	movs	r3, #0
 800a658:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d032      	beq.n	800a6c6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	f000 f834 	bl	800a6ce <USBD_GetLen>
 800a666:	4603      	mov	r3, r0
 800a668:	3301      	adds	r3, #1
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	005b      	lsls	r3, r3, #1
 800a66e:	b29a      	uxth	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a674:	7dfb      	ldrb	r3, [r7, #23]
 800a676:	1c5a      	adds	r2, r3, #1
 800a678:	75fa      	strb	r2, [r7, #23]
 800a67a:	461a      	mov	r2, r3
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	4413      	add	r3, r2
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	7812      	ldrb	r2, [r2, #0]
 800a684:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a686:	7dfb      	ldrb	r3, [r7, #23]
 800a688:	1c5a      	adds	r2, r3, #1
 800a68a:	75fa      	strb	r2, [r7, #23]
 800a68c:	461a      	mov	r2, r3
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	4413      	add	r3, r2
 800a692:	2203      	movs	r2, #3
 800a694:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a696:	e012      	b.n	800a6be <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	1c5a      	adds	r2, r3, #1
 800a69c:	60fa      	str	r2, [r7, #12]
 800a69e:	7dfa      	ldrb	r2, [r7, #23]
 800a6a0:	1c51      	adds	r1, r2, #1
 800a6a2:	75f9      	strb	r1, [r7, #23]
 800a6a4:	4611      	mov	r1, r2
 800a6a6:	68ba      	ldr	r2, [r7, #8]
 800a6a8:	440a      	add	r2, r1
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a6ae:	7dfb      	ldrb	r3, [r7, #23]
 800a6b0:	1c5a      	adds	r2, r3, #1
 800a6b2:	75fa      	strb	r2, [r7, #23]
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d1e8      	bne.n	800a698 <USBD_GetString+0x4e>
    }
  }
}
 800a6c6:	bf00      	nop
 800a6c8:	3718      	adds	r7, #24
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a6ce:	b480      	push	{r7}
 800a6d0:	b085      	sub	sp, #20
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a6da:	e005      	b.n	800a6e8 <USBD_GetLen+0x1a>
  {
    len++;
 800a6dc:	7bfb      	ldrb	r3, [r7, #15]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	781b      	ldrb	r3, [r3, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d1f5      	bne.n	800a6dc <USBD_GetLen+0xe>
  }

  return len;
 800a6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3714      	adds	r7, #20
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bc80      	pop	{r7}
 800a6fa:	4770      	bx	lr

0800a6fc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	4613      	mov	r3, r2
 800a708:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2202      	movs	r2, #2
 800a70e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a712:	88fa      	ldrh	r2, [r7, #6]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a718:	88fa      	ldrh	r2, [r7, #6]
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a71e:	88fb      	ldrh	r3, [r7, #6]
 800a720:	68ba      	ldr	r2, [r7, #8]
 800a722:	2100      	movs	r1, #0
 800a724:	68f8      	ldr	r0, [r7, #12]
 800a726:	f000 fce5 	bl	800b0f4 <USBD_LL_Transmit>

  return USBD_OK;
 800a72a:	2300      	movs	r3, #0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	4613      	mov	r3, r2
 800a740:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a742:	88fb      	ldrh	r3, [r7, #6]
 800a744:	68ba      	ldr	r2, [r7, #8]
 800a746:	2100      	movs	r1, #0
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	f000 fcd3 	bl	800b0f4 <USBD_LL_Transmit>

  return USBD_OK;
 800a74e:	2300      	movs	r3, #0
}
 800a750:	4618      	mov	r0, r3
 800a752:	3710      	adds	r7, #16
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	4613      	mov	r3, r2
 800a764:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2203      	movs	r2, #3
 800a76a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a76e:	88fa      	ldrh	r2, [r7, #6]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a776:	88fa      	ldrh	r2, [r7, #6]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a77e:	88fb      	ldrh	r3, [r7, #6]
 800a780:	68ba      	ldr	r2, [r7, #8]
 800a782:	2100      	movs	r1, #0
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f000 fcd8 	bl	800b13a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3710      	adds	r7, #16
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	4613      	mov	r3, r2
 800a7a0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7a2:	88fb      	ldrh	r3, [r7, #6]
 800a7a4:	68ba      	ldr	r2, [r7, #8]
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f000 fcc6 	bl	800b13a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7ae:	2300      	movs	r3, #0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2204      	movs	r2, #4
 800a7c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 fc90 	bl	800b0f4 <USBD_LL_Transmit>

  return USBD_OK;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3708      	adds	r7, #8
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b082      	sub	sp, #8
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2205      	movs	r2, #5
 800a7ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 fca0 	bl	800b13a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7fa:	2300      	movs	r3, #0
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3708      	adds	r7, #8
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a808:	2200      	movs	r2, #0
 800a80a:	4912      	ldr	r1, [pc, #72]	@ (800a854 <MX_USB_DEVICE_Init+0x50>)
 800a80c:	4812      	ldr	r0, [pc, #72]	@ (800a858 <MX_USB_DEVICE_Init+0x54>)
 800a80e:	f7fe ff2a 	bl	8009666 <USBD_Init>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	d001      	beq.n	800a81c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a818:	f7f8 f8e3 	bl	80029e2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a81c:	490f      	ldr	r1, [pc, #60]	@ (800a85c <MX_USB_DEVICE_Init+0x58>)
 800a81e:	480e      	ldr	r0, [pc, #56]	@ (800a858 <MX_USB_DEVICE_Init+0x54>)
 800a820:	f7fe ff4c 	bl	80096bc <USBD_RegisterClass>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d001      	beq.n	800a82e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a82a:	f7f8 f8da 	bl	80029e2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a82e:	490c      	ldr	r1, [pc, #48]	@ (800a860 <MX_USB_DEVICE_Init+0x5c>)
 800a830:	4809      	ldr	r0, [pc, #36]	@ (800a858 <MX_USB_DEVICE_Init+0x54>)
 800a832:	f7fe fe7d 	bl	8009530 <USBD_CDC_RegisterInterface>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d001      	beq.n	800a840 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a83c:	f7f8 f8d1 	bl	80029e2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a840:	4805      	ldr	r0, [pc, #20]	@ (800a858 <MX_USB_DEVICE_Init+0x54>)
 800a842:	f7fe ff54 	bl	80096ee <USBD_Start>
 800a846:	4603      	mov	r3, r0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d001      	beq.n	800a850 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a84c:	f7f8 f8c9 	bl	80029e2 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a850:	bf00      	nop
 800a852:	bd80      	pop	{r7, pc}
 800a854:	20000178 	.word	0x20000178
 800a858:	2000060c 	.word	0x2000060c
 800a85c:	20000064 	.word	0x20000064
 800a860:	20000168 	.word	0x20000168

0800a864 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a868:	2200      	movs	r2, #0
 800a86a:	4905      	ldr	r1, [pc, #20]	@ (800a880 <CDC_Init_FS+0x1c>)
 800a86c:	4805      	ldr	r0, [pc, #20]	@ (800a884 <CDC_Init_FS+0x20>)
 800a86e:	f7fe fe75 	bl	800955c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a872:	4905      	ldr	r1, [pc, #20]	@ (800a888 <CDC_Init_FS+0x24>)
 800a874:	4803      	ldr	r0, [pc, #12]	@ (800a884 <CDC_Init_FS+0x20>)
 800a876:	f7fe fe8a 	bl	800958e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a87a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	bd80      	pop	{r7, pc}
 800a880:	20000cd0 	.word	0x20000cd0
 800a884:	2000060c 	.word	0x2000060c
 800a888:	200008d0 	.word	0x200008d0

0800a88c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a88c:	b480      	push	{r7}
 800a88e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a890:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a892:	4618      	mov	r0, r3
 800a894:	46bd      	mov	sp, r7
 800a896:	bc80      	pop	{r7}
 800a898:	4770      	bx	lr
	...

0800a89c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	6039      	str	r1, [r7, #0]
 800a8a6:	71fb      	strb	r3, [r7, #7]
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a8ac:	79fb      	ldrb	r3, [r7, #7]
 800a8ae:	2b23      	cmp	r3, #35	@ 0x23
 800a8b0:	d84a      	bhi.n	800a948 <CDC_Control_FS+0xac>
 800a8b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a8b8 <CDC_Control_FS+0x1c>)
 800a8b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b8:	0800a949 	.word	0x0800a949
 800a8bc:	0800a949 	.word	0x0800a949
 800a8c0:	0800a949 	.word	0x0800a949
 800a8c4:	0800a949 	.word	0x0800a949
 800a8c8:	0800a949 	.word	0x0800a949
 800a8cc:	0800a949 	.word	0x0800a949
 800a8d0:	0800a949 	.word	0x0800a949
 800a8d4:	0800a949 	.word	0x0800a949
 800a8d8:	0800a949 	.word	0x0800a949
 800a8dc:	0800a949 	.word	0x0800a949
 800a8e0:	0800a949 	.word	0x0800a949
 800a8e4:	0800a949 	.word	0x0800a949
 800a8e8:	0800a949 	.word	0x0800a949
 800a8ec:	0800a949 	.word	0x0800a949
 800a8f0:	0800a949 	.word	0x0800a949
 800a8f4:	0800a949 	.word	0x0800a949
 800a8f8:	0800a949 	.word	0x0800a949
 800a8fc:	0800a949 	.word	0x0800a949
 800a900:	0800a949 	.word	0x0800a949
 800a904:	0800a949 	.word	0x0800a949
 800a908:	0800a949 	.word	0x0800a949
 800a90c:	0800a949 	.word	0x0800a949
 800a910:	0800a949 	.word	0x0800a949
 800a914:	0800a949 	.word	0x0800a949
 800a918:	0800a949 	.word	0x0800a949
 800a91c:	0800a949 	.word	0x0800a949
 800a920:	0800a949 	.word	0x0800a949
 800a924:	0800a949 	.word	0x0800a949
 800a928:	0800a949 	.word	0x0800a949
 800a92c:	0800a949 	.word	0x0800a949
 800a930:	0800a949 	.word	0x0800a949
 800a934:	0800a949 	.word	0x0800a949
 800a938:	0800a949 	.word	0x0800a949
 800a93c:	0800a949 	.word	0x0800a949
 800a940:	0800a949 	.word	0x0800a949
 800a944:	0800a949 	.word	0x0800a949
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a948:	bf00      	nop
  }

  return (USBD_OK);
 800a94a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	bc80      	pop	{r7}
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop

0800a958 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a962:	6879      	ldr	r1, [r7, #4]
 800a964:	4805      	ldr	r0, [pc, #20]	@ (800a97c <CDC_Receive_FS+0x24>)
 800a966:	f7fe fe12 	bl	800958e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a96a:	4804      	ldr	r0, [pc, #16]	@ (800a97c <CDC_Receive_FS+0x24>)
 800a96c:	f7fe fe51 	bl	8009612 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a970:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a972:	4618      	mov	r0, r3
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	2000060c 	.word	0x2000060c

0800a980 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	460b      	mov	r3, r1
 800a98a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a98c:	2300      	movs	r3, #0
 800a98e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a990:	4b0d      	ldr	r3, [pc, #52]	@ (800a9c8 <CDC_Transmit_FS+0x48>)
 800a992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a996:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d001      	beq.n	800a9a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	e00b      	b.n	800a9be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a9a6:	887b      	ldrh	r3, [r7, #2]
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	6879      	ldr	r1, [r7, #4]
 800a9ac:	4806      	ldr	r0, [pc, #24]	@ (800a9c8 <CDC_Transmit_FS+0x48>)
 800a9ae:	f7fe fdd5 	bl	800955c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a9b2:	4805      	ldr	r0, [pc, #20]	@ (800a9c8 <CDC_Transmit_FS+0x48>)
 800a9b4:	f7fe fdfe 	bl	80095b4 <USBD_CDC_TransmitPacket>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a9bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3710      	adds	r7, #16
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	2000060c 	.word	0x2000060c

0800a9cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	6039      	str	r1, [r7, #0]
 800a9d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	2212      	movs	r2, #18
 800a9dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a9de:	4b03      	ldr	r3, [pc, #12]	@ (800a9ec <USBD_FS_DeviceDescriptor+0x20>)
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	370c      	adds	r7, #12
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bc80      	pop	{r7}
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	20000194 	.word	0x20000194

0800a9f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	6039      	str	r1, [r7, #0]
 800a9fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	2204      	movs	r2, #4
 800aa00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa02:	4b03      	ldr	r3, [pc, #12]	@ (800aa10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bc80      	pop	{r7}
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	200001a8 	.word	0x200001a8

0800aa14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	6039      	str	r1, [r7, #0]
 800aa1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa20:	79fb      	ldrb	r3, [r7, #7]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d105      	bne.n	800aa32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa26:	683a      	ldr	r2, [r7, #0]
 800aa28:	4907      	ldr	r1, [pc, #28]	@ (800aa48 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa2a:	4808      	ldr	r0, [pc, #32]	@ (800aa4c <USBD_FS_ProductStrDescriptor+0x38>)
 800aa2c:	f7ff fe0d 	bl	800a64a <USBD_GetString>
 800aa30:	e004      	b.n	800aa3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa32:	683a      	ldr	r2, [r7, #0]
 800aa34:	4904      	ldr	r1, [pc, #16]	@ (800aa48 <USBD_FS_ProductStrDescriptor+0x34>)
 800aa36:	4805      	ldr	r0, [pc, #20]	@ (800aa4c <USBD_FS_ProductStrDescriptor+0x38>)
 800aa38:	f7ff fe07 	bl	800a64a <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa3c:	4b02      	ldr	r3, [pc, #8]	@ (800aa48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3708      	adds	r7, #8
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	200010d0 	.word	0x200010d0
 800aa4c:	0800df24 	.word	0x0800df24

0800aa50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	4603      	mov	r3, r0
 800aa58:	6039      	str	r1, [r7, #0]
 800aa5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa5c:	683a      	ldr	r2, [r7, #0]
 800aa5e:	4904      	ldr	r1, [pc, #16]	@ (800aa70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aa60:	4804      	ldr	r0, [pc, #16]	@ (800aa74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aa62:	f7ff fdf2 	bl	800a64a <USBD_GetString>
  return USBD_StrDesc;
 800aa66:	4b02      	ldr	r3, [pc, #8]	@ (800aa70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3708      	adds	r7, #8
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	200010d0 	.word	0x200010d0
 800aa74:	0800df3c 	.word	0x0800df3c

0800aa78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b082      	sub	sp, #8
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	4603      	mov	r3, r0
 800aa80:	6039      	str	r1, [r7, #0]
 800aa82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	221a      	movs	r2, #26
 800aa88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aa8a:	f000 f843 	bl	800ab14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aa8e:	4b02      	ldr	r3, [pc, #8]	@ (800aa98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	200001ac 	.word	0x200001ac

0800aa9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	6039      	str	r1, [r7, #0]
 800aaa6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aaa8:	79fb      	ldrb	r3, [r7, #7]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d105      	bne.n	800aaba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aaae:	683a      	ldr	r2, [r7, #0]
 800aab0:	4907      	ldr	r1, [pc, #28]	@ (800aad0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aab2:	4808      	ldr	r0, [pc, #32]	@ (800aad4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aab4:	f7ff fdc9 	bl	800a64a <USBD_GetString>
 800aab8:	e004      	b.n	800aac4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aaba:	683a      	ldr	r2, [r7, #0]
 800aabc:	4904      	ldr	r1, [pc, #16]	@ (800aad0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aabe:	4805      	ldr	r0, [pc, #20]	@ (800aad4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aac0:	f7ff fdc3 	bl	800a64a <USBD_GetString>
  }
  return USBD_StrDesc;
 800aac4:	4b02      	ldr	r3, [pc, #8]	@ (800aad0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	200010d0 	.word	0x200010d0
 800aad4:	0800df50 	.word	0x0800df50

0800aad8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	4603      	mov	r3, r0
 800aae0:	6039      	str	r1, [r7, #0]
 800aae2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aae4:	79fb      	ldrb	r3, [r7, #7]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d105      	bne.n	800aaf6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aaea:	683a      	ldr	r2, [r7, #0]
 800aaec:	4907      	ldr	r1, [pc, #28]	@ (800ab0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aaee:	4808      	ldr	r0, [pc, #32]	@ (800ab10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aaf0:	f7ff fdab 	bl	800a64a <USBD_GetString>
 800aaf4:	e004      	b.n	800ab00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aaf6:	683a      	ldr	r2, [r7, #0]
 800aaf8:	4904      	ldr	r1, [pc, #16]	@ (800ab0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aafa:	4805      	ldr	r0, [pc, #20]	@ (800ab10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aafc:	f7ff fda5 	bl	800a64a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab00:	4b02      	ldr	r3, [pc, #8]	@ (800ab0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3708      	adds	r7, #8
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	200010d0 	.word	0x200010d0
 800ab10:	0800df5c 	.word	0x0800df5c

0800ab14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ab1a:	4b0f      	ldr	r3, [pc, #60]	@ (800ab58 <Get_SerialNum+0x44>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ab20:	4b0e      	ldr	r3, [pc, #56]	@ (800ab5c <Get_SerialNum+0x48>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ab26:	4b0e      	ldr	r3, [pc, #56]	@ (800ab60 <Get_SerialNum+0x4c>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4413      	add	r3, r2
 800ab32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d009      	beq.n	800ab4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ab3a:	2208      	movs	r2, #8
 800ab3c:	4909      	ldr	r1, [pc, #36]	@ (800ab64 <Get_SerialNum+0x50>)
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f000 f814 	bl	800ab6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ab44:	2204      	movs	r2, #4
 800ab46:	4908      	ldr	r1, [pc, #32]	@ (800ab68 <Get_SerialNum+0x54>)
 800ab48:	68b8      	ldr	r0, [r7, #8]
 800ab4a:	f000 f80f 	bl	800ab6c <IntToUnicode>
  }
}
 800ab4e:	bf00      	nop
 800ab50:	3710      	adds	r7, #16
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	1fff7a10 	.word	0x1fff7a10
 800ab5c:	1fff7a14 	.word	0x1fff7a14
 800ab60:	1fff7a18 	.word	0x1fff7a18
 800ab64:	200001ae 	.word	0x200001ae
 800ab68:	200001be 	.word	0x200001be

0800ab6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b087      	sub	sp, #28
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	4613      	mov	r3, r2
 800ab78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ab7e:	2300      	movs	r3, #0
 800ab80:	75fb      	strb	r3, [r7, #23]
 800ab82:	e027      	b.n	800abd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	0f1b      	lsrs	r3, r3, #28
 800ab88:	2b09      	cmp	r3, #9
 800ab8a:	d80b      	bhi.n	800aba4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	0f1b      	lsrs	r3, r3, #28
 800ab90:	b2da      	uxtb	r2, r3
 800ab92:	7dfb      	ldrb	r3, [r7, #23]
 800ab94:	005b      	lsls	r3, r3, #1
 800ab96:	4619      	mov	r1, r3
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	440b      	add	r3, r1
 800ab9c:	3230      	adds	r2, #48	@ 0x30
 800ab9e:	b2d2      	uxtb	r2, r2
 800aba0:	701a      	strb	r2, [r3, #0]
 800aba2:	e00a      	b.n	800abba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	0f1b      	lsrs	r3, r3, #28
 800aba8:	b2da      	uxtb	r2, r3
 800abaa:	7dfb      	ldrb	r3, [r7, #23]
 800abac:	005b      	lsls	r3, r3, #1
 800abae:	4619      	mov	r1, r3
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	440b      	add	r3, r1
 800abb4:	3237      	adds	r2, #55	@ 0x37
 800abb6:	b2d2      	uxtb	r2, r2
 800abb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	011b      	lsls	r3, r3, #4
 800abbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800abc0:	7dfb      	ldrb	r3, [r7, #23]
 800abc2:	005b      	lsls	r3, r3, #1
 800abc4:	3301      	adds	r3, #1
 800abc6:	68ba      	ldr	r2, [r7, #8]
 800abc8:	4413      	add	r3, r2
 800abca:	2200      	movs	r2, #0
 800abcc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800abce:	7dfb      	ldrb	r3, [r7, #23]
 800abd0:	3301      	adds	r3, #1
 800abd2:	75fb      	strb	r3, [r7, #23]
 800abd4:	7dfa      	ldrb	r2, [r7, #23]
 800abd6:	79fb      	ldrb	r3, [r7, #7]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d3d3      	bcc.n	800ab84 <IntToUnicode+0x18>
  }
}
 800abdc:	bf00      	nop
 800abde:	bf00      	nop
 800abe0:	371c      	adds	r7, #28
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bc80      	pop	{r7}
 800abe6:	4770      	bx	lr

0800abe8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b08a      	sub	sp, #40	@ 0x28
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abf0:	f107 0314 	add.w	r3, r7, #20
 800abf4:	2200      	movs	r2, #0
 800abf6:	601a      	str	r2, [r3, #0]
 800abf8:	605a      	str	r2, [r3, #4]
 800abfa:	609a      	str	r2, [r3, #8]
 800abfc:	60da      	str	r2, [r3, #12]
 800abfe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac08:	d147      	bne.n	800ac9a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	613b      	str	r3, [r7, #16]
 800ac0e:	4b25      	ldr	r3, [pc, #148]	@ (800aca4 <HAL_PCD_MspInit+0xbc>)
 800ac10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac12:	4a24      	ldr	r2, [pc, #144]	@ (800aca4 <HAL_PCD_MspInit+0xbc>)
 800ac14:	f043 0301 	orr.w	r3, r3, #1
 800ac18:	6313      	str	r3, [r2, #48]	@ 0x30
 800ac1a:	4b22      	ldr	r3, [pc, #136]	@ (800aca4 <HAL_PCD_MspInit+0xbc>)
 800ac1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac1e:	f003 0301 	and.w	r3, r3, #1
 800ac22:	613b      	str	r3, [r7, #16]
 800ac24:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ac26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac30:	2300      	movs	r3, #0
 800ac32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac34:	f107 0314 	add.w	r3, r7, #20
 800ac38:	4619      	mov	r1, r3
 800ac3a:	481b      	ldr	r0, [pc, #108]	@ (800aca8 <HAL_PCD_MspInit+0xc0>)
 800ac3c:	f7f9 fd1c 	bl	8004678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ac40:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ac44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac46:	2302      	movs	r3, #2
 800ac48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ac4e:	2303      	movs	r3, #3
 800ac50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ac52:	230a      	movs	r3, #10
 800ac54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac56:	f107 0314 	add.w	r3, r7, #20
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	4812      	ldr	r0, [pc, #72]	@ (800aca8 <HAL_PCD_MspInit+0xc0>)
 800ac5e:	f7f9 fd0b 	bl	8004678 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ac62:	4b10      	ldr	r3, [pc, #64]	@ (800aca4 <HAL_PCD_MspInit+0xbc>)
 800ac64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac66:	4a0f      	ldr	r2, [pc, #60]	@ (800aca4 <HAL_PCD_MspInit+0xbc>)
 800ac68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac6c:	6353      	str	r3, [r2, #52]	@ 0x34
 800ac6e:	2300      	movs	r3, #0
 800ac70:	60fb      	str	r3, [r7, #12]
 800ac72:	4b0c      	ldr	r3, [pc, #48]	@ (800aca4 <HAL_PCD_MspInit+0xbc>)
 800ac74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac76:	4a0b      	ldr	r2, [pc, #44]	@ (800aca4 <HAL_PCD_MspInit+0xbc>)
 800ac78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ac7c:	6453      	str	r3, [r2, #68]	@ 0x44
 800ac7e:	4b09      	ldr	r3, [pc, #36]	@ (800aca4 <HAL_PCD_MspInit+0xbc>)
 800ac80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac86:	60fb      	str	r3, [r7, #12]
 800ac88:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	2043      	movs	r0, #67	@ 0x43
 800ac90:	f7f9 fcbb 	bl	800460a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ac94:	2043      	movs	r0, #67	@ 0x43
 800ac96:	f7f9 fcd4 	bl	8004642 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ac9a:	bf00      	nop
 800ac9c:	3728      	adds	r7, #40	@ 0x28
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
 800aca2:	bf00      	nop
 800aca4:	40023800 	.word	0x40023800
 800aca8:	40020000 	.word	0x40020000

0800acac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 2500 	ldr.w	r2, [r3, #1280]	@ 0x500
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800acc0:	4619      	mov	r1, r3
 800acc2:	4610      	mov	r0, r2
 800acc4:	f7fe fd5b 	bl	800977e <USBD_LL_SetupStage>
}
 800acc8:	bf00      	nop
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	460b      	mov	r3, r1
 800acda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 0500 	ldr.w	r0, [r3, #1280]	@ 0x500
 800ace2:	78fa      	ldrb	r2, [r7, #3]
 800ace4:	6879      	ldr	r1, [r7, #4]
 800ace6:	4613      	mov	r3, r2
 800ace8:	00db      	lsls	r3, r3, #3
 800acea:	4413      	add	r3, r2
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	440b      	add	r3, r1
 800acf0:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	78fb      	ldrb	r3, [r7, #3]
 800acf8:	4619      	mov	r1, r3
 800acfa:	f7fe fd8d 	bl	8009818 <USBD_LL_DataOutStage>
}
 800acfe:	bf00      	nop
 800ad00:	3708      	adds	r7, #8
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}

0800ad06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad06:	b580      	push	{r7, lr}
 800ad08:	b082      	sub	sp, #8
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
 800ad0e:	460b      	mov	r3, r1
 800ad10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8d3 0500 	ldr.w	r0, [r3, #1280]	@ 0x500
 800ad18:	78fa      	ldrb	r2, [r7, #3]
 800ad1a:	6879      	ldr	r1, [r7, #4]
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	00db      	lsls	r3, r3, #3
 800ad20:	4413      	add	r3, r2
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	440b      	add	r3, r1
 800ad26:	3348      	adds	r3, #72	@ 0x48
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	78fb      	ldrb	r3, [r7, #3]
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	f7fe fde4 	bl	80098fa <USBD_LL_DataInStage>
}
 800ad32:	bf00      	nop
 800ad34:	3708      	adds	r7, #8
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}

0800ad3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad3a:	b580      	push	{r7, lr}
 800ad3c:	b082      	sub	sp, #8
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f7fe fef4 	bl	8009b36 <USBD_LL_SOF>
}
 800ad4e:	bf00      	nop
 800ad50:	3708      	adds	r7, #8
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b084      	sub	sp, #16
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	691b      	ldr	r3, [r3, #16]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d102      	bne.n	800ad70 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	73fb      	strb	r3, [r7, #15]
 800ad6e:	e008      	b.n	800ad82 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	691b      	ldr	r3, [r3, #16]
 800ad74:	2b02      	cmp	r3, #2
 800ad76:	d102      	bne.n	800ad7e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	73fb      	strb	r3, [r7, #15]
 800ad7c:	e001      	b.n	800ad82 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ad7e:	f7f7 fe30 	bl	80029e2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 800ad88:	7bfa      	ldrb	r2, [r7, #15]
 800ad8a:	4611      	mov	r1, r2
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7fe fe9a 	bl	8009ac6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7fe fe53 	bl	8009a44 <USBD_LL_Reset>
}
 800ad9e:	bf00      	nop
 800ada0:	3710      	adds	r7, #16
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
	...

0800ada8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7fe fe94 	bl	8009ae4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	6812      	ldr	r2, [r2, #0]
 800adca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800adce:	f043 0301 	orr.w	r3, r3, #1
 800add2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a1b      	ldr	r3, [r3, #32]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d005      	beq.n	800ade8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800addc:	4b04      	ldr	r3, [pc, #16]	@ (800adf0 <HAL_PCD_SuspendCallback+0x48>)
 800adde:	691b      	ldr	r3, [r3, #16]
 800ade0:	4a03      	ldr	r2, [pc, #12]	@ (800adf0 <HAL_PCD_SuspendCallback+0x48>)
 800ade2:	f043 0306 	orr.w	r3, r3, #6
 800ade6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ade8:	bf00      	nop
 800adea:	3708      	adds	r7, #8
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	e000ed00 	.word	0xe000ed00

0800adf4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7fe fe82 	bl	8009b0c <USBD_LL_Resume>
}
 800ae08:	bf00      	nop
 800ae0a:	3708      	adds	r7, #8
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	460b      	mov	r3, r1
 800ae1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 800ae22:	78fa      	ldrb	r2, [r7, #3]
 800ae24:	4611      	mov	r1, r2
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7fe feab 	bl	8009b82 <USBD_LL_IsoOUTIncomplete>
}
 800ae2c:	bf00      	nop
 800ae2e:	3708      	adds	r7, #8
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b082      	sub	sp, #8
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 800ae46:	78fa      	ldrb	r2, [r7, #3]
 800ae48:	4611      	mov	r1, r2
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7fe fe8d 	bl	8009b6a <USBD_LL_IsoINIncomplete>
}
 800ae50:	bf00      	nop
 800ae52:	3708      	adds	r7, #8
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7fe fe97 	bl	8009b9a <USBD_LL_DevConnected>
}
 800ae6c:	bf00      	nop
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	@ 0x500
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7fe fe93 	bl	8009bae <USBD_LL_DevDisconnected>
}
 800ae88:	bf00      	nop
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d139      	bne.n	800af14 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800aea0:	4a1f      	ldr	r2, [pc, #124]	@ (800af20 <USBD_LL_Init+0x90>)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8c2 3500 	str.w	r3, [r2, #1280]	@ 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4a1d      	ldr	r2, [pc, #116]	@ (800af20 <USBD_LL_Init+0x90>)
 800aeac:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aeb0:	4b1b      	ldr	r3, [pc, #108]	@ (800af20 <USBD_LL_Init+0x90>)
 800aeb2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800aeb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800aeb8:	4b19      	ldr	r3, [pc, #100]	@ (800af20 <USBD_LL_Init+0x90>)
 800aeba:	2204      	movs	r2, #4
 800aebc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800aebe:	4b18      	ldr	r3, [pc, #96]	@ (800af20 <USBD_LL_Init+0x90>)
 800aec0:	2202      	movs	r2, #2
 800aec2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aec4:	4b16      	ldr	r3, [pc, #88]	@ (800af20 <USBD_LL_Init+0x90>)
 800aec6:	2200      	movs	r2, #0
 800aec8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aeca:	4b15      	ldr	r3, [pc, #84]	@ (800af20 <USBD_LL_Init+0x90>)
 800aecc:	2202      	movs	r2, #2
 800aece:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aed0:	4b13      	ldr	r3, [pc, #76]	@ (800af20 <USBD_LL_Init+0x90>)
 800aed2:	2200      	movs	r2, #0
 800aed4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800aed6:	4b12      	ldr	r3, [pc, #72]	@ (800af20 <USBD_LL_Init+0x90>)
 800aed8:	2200      	movs	r2, #0
 800aeda:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800aedc:	4b10      	ldr	r3, [pc, #64]	@ (800af20 <USBD_LL_Init+0x90>)
 800aede:	2201      	movs	r2, #1
 800aee0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800aee2:	4b0f      	ldr	r3, [pc, #60]	@ (800af20 <USBD_LL_Init+0x90>)
 800aee4:	2200      	movs	r2, #0
 800aee6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800aee8:	480d      	ldr	r0, [pc, #52]	@ (800af20 <USBD_LL_Init+0x90>)
 800aeea:	f7f9 fdab 	bl	8004a44 <HAL_PCD_Init>
 800aeee:	4603      	mov	r3, r0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d001      	beq.n	800aef8 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800aef4:	f7f7 fd75 	bl	80029e2 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800aef8:	2180      	movs	r1, #128	@ 0x80
 800aefa:	4809      	ldr	r0, [pc, #36]	@ (800af20 <USBD_LL_Init+0x90>)
 800aefc:	f7fa ffc4 	bl	8005e88 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800af00:	2240      	movs	r2, #64	@ 0x40
 800af02:	2100      	movs	r1, #0
 800af04:	4806      	ldr	r0, [pc, #24]	@ (800af20 <USBD_LL_Init+0x90>)
 800af06:	f7fa ff79 	bl	8005dfc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800af0a:	2280      	movs	r2, #128	@ 0x80
 800af0c:	2101      	movs	r1, #1
 800af0e:	4804      	ldr	r0, [pc, #16]	@ (800af20 <USBD_LL_Init+0x90>)
 800af10:	f7fa ff74 	bl	8005dfc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3708      	adds	r7, #8
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	200012d0 	.word	0x200012d0

0800af24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b084      	sub	sp, #16
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af2c:	2300      	movs	r3, #0
 800af2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af30:	2300      	movs	r3, #0
 800af32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7f9 fe9f 	bl	8004c7e <HAL_PCD_Start>
 800af40:	4603      	mov	r3, r0
 800af42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af44:	7bfb      	ldrb	r3, [r7, #15]
 800af46:	4618      	mov	r0, r3
 800af48:	f000 f92e 	bl	800b1a8 <USBD_Get_USB_Status>
 800af4c:	4603      	mov	r3, r0
 800af4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af50:	7bbb      	ldrb	r3, [r7, #14]
}
 800af52:	4618      	mov	r0, r3
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b084      	sub	sp, #16
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
 800af62:	4608      	mov	r0, r1
 800af64:	4611      	mov	r1, r2
 800af66:	461a      	mov	r2, r3
 800af68:	4603      	mov	r3, r0
 800af6a:	70fb      	strb	r3, [r7, #3]
 800af6c:	460b      	mov	r3, r1
 800af6e:	70bb      	strb	r3, [r7, #2]
 800af70:	4613      	mov	r3, r2
 800af72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af74:	2300      	movs	r3, #0
 800af76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af78:	2300      	movs	r3, #0
 800af7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800af82:	78bb      	ldrb	r3, [r7, #2]
 800af84:	883a      	ldrh	r2, [r7, #0]
 800af86:	78f9      	ldrb	r1, [r7, #3]
 800af88:	f7fa fb51 	bl	800562e <HAL_PCD_EP_Open>
 800af8c:	4603      	mov	r3, r0
 800af8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af90:	7bfb      	ldrb	r3, [r7, #15]
 800af92:	4618      	mov	r0, r3
 800af94:	f000 f908 	bl	800b1a8 <USBD_Get_USB_Status>
 800af98:	4603      	mov	r3, r0
 800af9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3710      	adds	r7, #16
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}

0800afa6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afa6:	b580      	push	{r7, lr}
 800afa8:	b084      	sub	sp, #16
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
 800afae:	460b      	mov	r3, r1
 800afb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afb2:	2300      	movs	r3, #0
 800afb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afb6:	2300      	movs	r3, #0
 800afb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800afc0:	78fa      	ldrb	r2, [r7, #3]
 800afc2:	4611      	mov	r1, r2
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7fa fb9a 	bl	80056fe <HAL_PCD_EP_Close>
 800afca:	4603      	mov	r3, r0
 800afcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afce:	7bfb      	ldrb	r3, [r7, #15]
 800afd0:	4618      	mov	r0, r3
 800afd2:	f000 f8e9 	bl	800b1a8 <USBD_Get_USB_Status>
 800afd6:	4603      	mov	r3, r0
 800afd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afda:	7bbb      	ldrb	r3, [r7, #14]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3710      	adds	r7, #16
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	460b      	mov	r3, r1
 800afee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aff0:	2300      	movs	r3, #0
 800aff2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aff4:	2300      	movs	r3, #0
 800aff6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800affe:	78fa      	ldrb	r2, [r7, #3]
 800b000:	4611      	mov	r1, r2
 800b002:	4618      	mov	r0, r3
 800b004:	f7fa fc53 	bl	80058ae <HAL_PCD_EP_SetStall>
 800b008:	4603      	mov	r3, r0
 800b00a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b00c:	7bfb      	ldrb	r3, [r7, #15]
 800b00e:	4618      	mov	r0, r3
 800b010:	f000 f8ca 	bl	800b1a8 <USBD_Get_USB_Status>
 800b014:	4603      	mov	r3, r0
 800b016:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b018:	7bbb      	ldrb	r3, [r7, #14]
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b084      	sub	sp, #16
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	460b      	mov	r3, r1
 800b02c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b02e:	2300      	movs	r3, #0
 800b030:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b032:	2300      	movs	r3, #0
 800b034:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b03c:	78fa      	ldrb	r2, [r7, #3]
 800b03e:	4611      	mov	r1, r2
 800b040:	4618      	mov	r0, r3
 800b042:	f7fa fc98 	bl	8005976 <HAL_PCD_EP_ClrStall>
 800b046:	4603      	mov	r3, r0
 800b048:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b04a:	7bfb      	ldrb	r3, [r7, #15]
 800b04c:	4618      	mov	r0, r3
 800b04e:	f000 f8ab 	bl	800b1a8 <USBD_Get_USB_Status>
 800b052:	4603      	mov	r3, r0
 800b054:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b056:	7bbb      	ldrb	r3, [r7, #14]
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3710      	adds	r7, #16
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b060:	b480      	push	{r7}
 800b062:	b085      	sub	sp, #20
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	460b      	mov	r3, r1
 800b06a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b072:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	da0b      	bge.n	800b094 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b07c:	78fb      	ldrb	r3, [r7, #3]
 800b07e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b082:	68f9      	ldr	r1, [r7, #12]
 800b084:	4613      	mov	r3, r2
 800b086:	00db      	lsls	r3, r3, #3
 800b088:	4413      	add	r3, r2
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	440b      	add	r3, r1
 800b08e:	333e      	adds	r3, #62	@ 0x3e
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	e00b      	b.n	800b0ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b094:	78fb      	ldrb	r3, [r7, #3]
 800b096:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b09a:	68f9      	ldr	r1, [r7, #12]
 800b09c:	4613      	mov	r3, r2
 800b09e:	00db      	lsls	r3, r3, #3
 800b0a0:	4413      	add	r3, r2
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	440b      	add	r3, r1
 800b0a6:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 800b0aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3714      	adds	r7, #20
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bc80      	pop	{r7}
 800b0b4:	4770      	bx	lr

0800b0b6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b084      	sub	sp, #16
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	460b      	mov	r3, r1
 800b0c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b0d0:	78fa      	ldrb	r2, [r7, #3]
 800b0d2:	4611      	mov	r1, r2
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7fa fa85 	bl	80055e4 <HAL_PCD_SetAddress>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0de:	7bfb      	ldrb	r3, [r7, #15]
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f000 f861 	bl	800b1a8 <USBD_Get_USB_Status>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	3710      	adds	r7, #16
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b086      	sub	sp, #24
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	607a      	str	r2, [r7, #4]
 800b0fe:	461a      	mov	r2, r3
 800b100:	460b      	mov	r3, r1
 800b102:	72fb      	strb	r3, [r7, #11]
 800b104:	4613      	mov	r3, r2
 800b106:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b108:	2300      	movs	r3, #0
 800b10a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b10c:	2300      	movs	r3, #0
 800b10e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b116:	893b      	ldrh	r3, [r7, #8]
 800b118:	7af9      	ldrb	r1, [r7, #11]
 800b11a:	687a      	ldr	r2, [r7, #4]
 800b11c:	f7fa fb8c 	bl	8005838 <HAL_PCD_EP_Transmit>
 800b120:	4603      	mov	r3, r0
 800b122:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b124:	7dfb      	ldrb	r3, [r7, #23]
 800b126:	4618      	mov	r0, r3
 800b128:	f000 f83e 	bl	800b1a8 <USBD_Get_USB_Status>
 800b12c:	4603      	mov	r3, r0
 800b12e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b130:	7dbb      	ldrb	r3, [r7, #22]
}
 800b132:	4618      	mov	r0, r3
 800b134:	3718      	adds	r7, #24
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b086      	sub	sp, #24
 800b13e:	af00      	add	r7, sp, #0
 800b140:	60f8      	str	r0, [r7, #12]
 800b142:	607a      	str	r2, [r7, #4]
 800b144:	461a      	mov	r2, r3
 800b146:	460b      	mov	r3, r1
 800b148:	72fb      	strb	r3, [r7, #11]
 800b14a:	4613      	mov	r3, r2
 800b14c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b14e:	2300      	movs	r3, #0
 800b150:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b152:	2300      	movs	r3, #0
 800b154:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b15c:	893b      	ldrh	r3, [r7, #8]
 800b15e:	7af9      	ldrb	r1, [r7, #11]
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	f7fa fb16 	bl	8005792 <HAL_PCD_EP_Receive>
 800b166:	4603      	mov	r3, r0
 800b168:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b16a:	7dfb      	ldrb	r3, [r7, #23]
 800b16c:	4618      	mov	r0, r3
 800b16e:	f000 f81b 	bl	800b1a8 <USBD_Get_USB_Status>
 800b172:	4603      	mov	r3, r0
 800b174:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b176:	7dbb      	ldrb	r3, [r7, #22]
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3718      	adds	r7, #24
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	460b      	mov	r3, r1
 800b18a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b192:	78fa      	ldrb	r2, [r7, #3]
 800b194:	4611      	mov	r1, r2
 800b196:	4618      	mov	r0, r3
 800b198:	f7fa fb37 	bl	800580a <HAL_PCD_EP_GetRxCount>
 800b19c:	4603      	mov	r3, r0
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3708      	adds	r7, #8
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
	...

0800b1a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b1b6:	79fb      	ldrb	r3, [r7, #7]
 800b1b8:	2b03      	cmp	r3, #3
 800b1ba:	d817      	bhi.n	800b1ec <USBD_Get_USB_Status+0x44>
 800b1bc:	a201      	add	r2, pc, #4	@ (adr r2, 800b1c4 <USBD_Get_USB_Status+0x1c>)
 800b1be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c2:	bf00      	nop
 800b1c4:	0800b1d5 	.word	0x0800b1d5
 800b1c8:	0800b1db 	.word	0x0800b1db
 800b1cc:	0800b1e1 	.word	0x0800b1e1
 800b1d0:	0800b1e7 	.word	0x0800b1e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b1d8:	e00b      	b.n	800b1f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b1da:	2302      	movs	r3, #2
 800b1dc:	73fb      	strb	r3, [r7, #15]
    break;
 800b1de:	e008      	b.n	800b1f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b1e4:	e005      	b.n	800b1f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b1e6:	2302      	movs	r3, #2
 800b1e8:	73fb      	strb	r3, [r7, #15]
    break;
 800b1ea:	e002      	b.n	800b1f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b1ec:	2302      	movs	r3, #2
 800b1ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b1f0:	bf00      	nop
  }
  return usb_status;
 800b1f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3714      	adds	r7, #20
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bc80      	pop	{r7}
 800b1fc:	4770      	bx	lr
 800b1fe:	bf00      	nop

0800b200 <malloc>:
 800b200:	4b02      	ldr	r3, [pc, #8]	@ (800b20c <malloc+0xc>)
 800b202:	4601      	mov	r1, r0
 800b204:	6818      	ldr	r0, [r3, #0]
 800b206:	f000 b82d 	b.w	800b264 <_malloc_r>
 800b20a:	bf00      	nop
 800b20c:	200001d4 	.word	0x200001d4

0800b210 <free>:
 800b210:	4b02      	ldr	r3, [pc, #8]	@ (800b21c <free+0xc>)
 800b212:	4601      	mov	r1, r0
 800b214:	6818      	ldr	r0, [r3, #0]
 800b216:	f001 bd03 	b.w	800cc20 <_free_r>
 800b21a:	bf00      	nop
 800b21c:	200001d4 	.word	0x200001d4

0800b220 <sbrk_aligned>:
 800b220:	b570      	push	{r4, r5, r6, lr}
 800b222:	4e0f      	ldr	r6, [pc, #60]	@ (800b260 <sbrk_aligned+0x40>)
 800b224:	460c      	mov	r4, r1
 800b226:	6831      	ldr	r1, [r6, #0]
 800b228:	4605      	mov	r5, r0
 800b22a:	b911      	cbnz	r1, 800b232 <sbrk_aligned+0x12>
 800b22c:	f000 fe48 	bl	800bec0 <_sbrk_r>
 800b230:	6030      	str	r0, [r6, #0]
 800b232:	4621      	mov	r1, r4
 800b234:	4628      	mov	r0, r5
 800b236:	f000 fe43 	bl	800bec0 <_sbrk_r>
 800b23a:	1c43      	adds	r3, r0, #1
 800b23c:	d103      	bne.n	800b246 <sbrk_aligned+0x26>
 800b23e:	f04f 34ff 	mov.w	r4, #4294967295
 800b242:	4620      	mov	r0, r4
 800b244:	bd70      	pop	{r4, r5, r6, pc}
 800b246:	1cc4      	adds	r4, r0, #3
 800b248:	f024 0403 	bic.w	r4, r4, #3
 800b24c:	42a0      	cmp	r0, r4
 800b24e:	d0f8      	beq.n	800b242 <sbrk_aligned+0x22>
 800b250:	1a21      	subs	r1, r4, r0
 800b252:	4628      	mov	r0, r5
 800b254:	f000 fe34 	bl	800bec0 <_sbrk_r>
 800b258:	3001      	adds	r0, #1
 800b25a:	d1f2      	bne.n	800b242 <sbrk_aligned+0x22>
 800b25c:	e7ef      	b.n	800b23e <sbrk_aligned+0x1e>
 800b25e:	bf00      	nop
 800b260:	200017d4 	.word	0x200017d4

0800b264 <_malloc_r>:
 800b264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b268:	1ccd      	adds	r5, r1, #3
 800b26a:	f025 0503 	bic.w	r5, r5, #3
 800b26e:	3508      	adds	r5, #8
 800b270:	2d0c      	cmp	r5, #12
 800b272:	bf38      	it	cc
 800b274:	250c      	movcc	r5, #12
 800b276:	2d00      	cmp	r5, #0
 800b278:	4606      	mov	r6, r0
 800b27a:	db01      	blt.n	800b280 <_malloc_r+0x1c>
 800b27c:	42a9      	cmp	r1, r5
 800b27e:	d904      	bls.n	800b28a <_malloc_r+0x26>
 800b280:	230c      	movs	r3, #12
 800b282:	6033      	str	r3, [r6, #0]
 800b284:	2000      	movs	r0, #0
 800b286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b28a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b360 <_malloc_r+0xfc>
 800b28e:	f000 f869 	bl	800b364 <__malloc_lock>
 800b292:	f8d8 3000 	ldr.w	r3, [r8]
 800b296:	461c      	mov	r4, r3
 800b298:	bb44      	cbnz	r4, 800b2ec <_malloc_r+0x88>
 800b29a:	4629      	mov	r1, r5
 800b29c:	4630      	mov	r0, r6
 800b29e:	f7ff ffbf 	bl	800b220 <sbrk_aligned>
 800b2a2:	1c43      	adds	r3, r0, #1
 800b2a4:	4604      	mov	r4, r0
 800b2a6:	d158      	bne.n	800b35a <_malloc_r+0xf6>
 800b2a8:	f8d8 4000 	ldr.w	r4, [r8]
 800b2ac:	4627      	mov	r7, r4
 800b2ae:	2f00      	cmp	r7, #0
 800b2b0:	d143      	bne.n	800b33a <_malloc_r+0xd6>
 800b2b2:	2c00      	cmp	r4, #0
 800b2b4:	d04b      	beq.n	800b34e <_malloc_r+0xea>
 800b2b6:	6823      	ldr	r3, [r4, #0]
 800b2b8:	4639      	mov	r1, r7
 800b2ba:	4630      	mov	r0, r6
 800b2bc:	eb04 0903 	add.w	r9, r4, r3
 800b2c0:	f000 fdfe 	bl	800bec0 <_sbrk_r>
 800b2c4:	4581      	cmp	r9, r0
 800b2c6:	d142      	bne.n	800b34e <_malloc_r+0xea>
 800b2c8:	6821      	ldr	r1, [r4, #0]
 800b2ca:	4630      	mov	r0, r6
 800b2cc:	1a6d      	subs	r5, r5, r1
 800b2ce:	4629      	mov	r1, r5
 800b2d0:	f7ff ffa6 	bl	800b220 <sbrk_aligned>
 800b2d4:	3001      	adds	r0, #1
 800b2d6:	d03a      	beq.n	800b34e <_malloc_r+0xea>
 800b2d8:	6823      	ldr	r3, [r4, #0]
 800b2da:	442b      	add	r3, r5
 800b2dc:	6023      	str	r3, [r4, #0]
 800b2de:	f8d8 3000 	ldr.w	r3, [r8]
 800b2e2:	685a      	ldr	r2, [r3, #4]
 800b2e4:	bb62      	cbnz	r2, 800b340 <_malloc_r+0xdc>
 800b2e6:	f8c8 7000 	str.w	r7, [r8]
 800b2ea:	e00f      	b.n	800b30c <_malloc_r+0xa8>
 800b2ec:	6822      	ldr	r2, [r4, #0]
 800b2ee:	1b52      	subs	r2, r2, r5
 800b2f0:	d420      	bmi.n	800b334 <_malloc_r+0xd0>
 800b2f2:	2a0b      	cmp	r2, #11
 800b2f4:	d917      	bls.n	800b326 <_malloc_r+0xc2>
 800b2f6:	1961      	adds	r1, r4, r5
 800b2f8:	42a3      	cmp	r3, r4
 800b2fa:	6025      	str	r5, [r4, #0]
 800b2fc:	bf18      	it	ne
 800b2fe:	6059      	strne	r1, [r3, #4]
 800b300:	6863      	ldr	r3, [r4, #4]
 800b302:	bf08      	it	eq
 800b304:	f8c8 1000 	streq.w	r1, [r8]
 800b308:	5162      	str	r2, [r4, r5]
 800b30a:	604b      	str	r3, [r1, #4]
 800b30c:	4630      	mov	r0, r6
 800b30e:	f000 f82f 	bl	800b370 <__malloc_unlock>
 800b312:	f104 000b 	add.w	r0, r4, #11
 800b316:	1d23      	adds	r3, r4, #4
 800b318:	f020 0007 	bic.w	r0, r0, #7
 800b31c:	1ac2      	subs	r2, r0, r3
 800b31e:	bf1c      	itt	ne
 800b320:	1a1b      	subne	r3, r3, r0
 800b322:	50a3      	strne	r3, [r4, r2]
 800b324:	e7af      	b.n	800b286 <_malloc_r+0x22>
 800b326:	6862      	ldr	r2, [r4, #4]
 800b328:	42a3      	cmp	r3, r4
 800b32a:	bf0c      	ite	eq
 800b32c:	f8c8 2000 	streq.w	r2, [r8]
 800b330:	605a      	strne	r2, [r3, #4]
 800b332:	e7eb      	b.n	800b30c <_malloc_r+0xa8>
 800b334:	4623      	mov	r3, r4
 800b336:	6864      	ldr	r4, [r4, #4]
 800b338:	e7ae      	b.n	800b298 <_malloc_r+0x34>
 800b33a:	463c      	mov	r4, r7
 800b33c:	687f      	ldr	r7, [r7, #4]
 800b33e:	e7b6      	b.n	800b2ae <_malloc_r+0x4a>
 800b340:	461a      	mov	r2, r3
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	42a3      	cmp	r3, r4
 800b346:	d1fb      	bne.n	800b340 <_malloc_r+0xdc>
 800b348:	2300      	movs	r3, #0
 800b34a:	6053      	str	r3, [r2, #4]
 800b34c:	e7de      	b.n	800b30c <_malloc_r+0xa8>
 800b34e:	230c      	movs	r3, #12
 800b350:	4630      	mov	r0, r6
 800b352:	6033      	str	r3, [r6, #0]
 800b354:	f000 f80c 	bl	800b370 <__malloc_unlock>
 800b358:	e794      	b.n	800b284 <_malloc_r+0x20>
 800b35a:	6005      	str	r5, [r0, #0]
 800b35c:	e7d6      	b.n	800b30c <_malloc_r+0xa8>
 800b35e:	bf00      	nop
 800b360:	200017d8 	.word	0x200017d8

0800b364 <__malloc_lock>:
 800b364:	4801      	ldr	r0, [pc, #4]	@ (800b36c <__malloc_lock+0x8>)
 800b366:	f000 bdf8 	b.w	800bf5a <__retarget_lock_acquire_recursive>
 800b36a:	bf00      	nop
 800b36c:	2000191c 	.word	0x2000191c

0800b370 <__malloc_unlock>:
 800b370:	4801      	ldr	r0, [pc, #4]	@ (800b378 <__malloc_unlock+0x8>)
 800b372:	f000 bdf3 	b.w	800bf5c <__retarget_lock_release_recursive>
 800b376:	bf00      	nop
 800b378:	2000191c 	.word	0x2000191c

0800b37c <__cvt>:
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b382:	461d      	mov	r5, r3
 800b384:	bfbb      	ittet	lt
 800b386:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800b38a:	461d      	movlt	r5, r3
 800b38c:	2300      	movge	r3, #0
 800b38e:	232d      	movlt	r3, #45	@ 0x2d
 800b390:	b088      	sub	sp, #32
 800b392:	4614      	mov	r4, r2
 800b394:	bfb8      	it	lt
 800b396:	4614      	movlt	r4, r2
 800b398:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b39a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b39c:	7013      	strb	r3, [r2, #0]
 800b39e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b3a0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800b3a4:	f023 0820 	bic.w	r8, r3, #32
 800b3a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b3ac:	d005      	beq.n	800b3ba <__cvt+0x3e>
 800b3ae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b3b2:	d100      	bne.n	800b3b6 <__cvt+0x3a>
 800b3b4:	3601      	adds	r6, #1
 800b3b6:	2302      	movs	r3, #2
 800b3b8:	e000      	b.n	800b3bc <__cvt+0x40>
 800b3ba:	2303      	movs	r3, #3
 800b3bc:	aa07      	add	r2, sp, #28
 800b3be:	9204      	str	r2, [sp, #16]
 800b3c0:	aa06      	add	r2, sp, #24
 800b3c2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b3c6:	e9cd 3600 	strd	r3, r6, [sp]
 800b3ca:	4622      	mov	r2, r4
 800b3cc:	462b      	mov	r3, r5
 800b3ce:	f000 fe5f 	bl	800c090 <_dtoa_r>
 800b3d2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b3d6:	4607      	mov	r7, r0
 800b3d8:	d119      	bne.n	800b40e <__cvt+0x92>
 800b3da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b3dc:	07db      	lsls	r3, r3, #31
 800b3de:	d50e      	bpl.n	800b3fe <__cvt+0x82>
 800b3e0:	eb00 0906 	add.w	r9, r0, r6
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	4620      	mov	r0, r4
 800b3ea:	4629      	mov	r1, r5
 800b3ec:	f7f5 fb18 	bl	8000a20 <__aeabi_dcmpeq>
 800b3f0:	b108      	cbz	r0, 800b3f6 <__cvt+0x7a>
 800b3f2:	f8cd 901c 	str.w	r9, [sp, #28]
 800b3f6:	2230      	movs	r2, #48	@ 0x30
 800b3f8:	9b07      	ldr	r3, [sp, #28]
 800b3fa:	454b      	cmp	r3, r9
 800b3fc:	d31e      	bcc.n	800b43c <__cvt+0xc0>
 800b3fe:	4638      	mov	r0, r7
 800b400:	9b07      	ldr	r3, [sp, #28]
 800b402:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b404:	1bdb      	subs	r3, r3, r7
 800b406:	6013      	str	r3, [r2, #0]
 800b408:	b008      	add	sp, #32
 800b40a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b40e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b412:	eb00 0906 	add.w	r9, r0, r6
 800b416:	d1e5      	bne.n	800b3e4 <__cvt+0x68>
 800b418:	7803      	ldrb	r3, [r0, #0]
 800b41a:	2b30      	cmp	r3, #48	@ 0x30
 800b41c:	d10a      	bne.n	800b434 <__cvt+0xb8>
 800b41e:	2200      	movs	r2, #0
 800b420:	2300      	movs	r3, #0
 800b422:	4620      	mov	r0, r4
 800b424:	4629      	mov	r1, r5
 800b426:	f7f5 fafb 	bl	8000a20 <__aeabi_dcmpeq>
 800b42a:	b918      	cbnz	r0, 800b434 <__cvt+0xb8>
 800b42c:	f1c6 0601 	rsb	r6, r6, #1
 800b430:	f8ca 6000 	str.w	r6, [sl]
 800b434:	f8da 3000 	ldr.w	r3, [sl]
 800b438:	4499      	add	r9, r3
 800b43a:	e7d3      	b.n	800b3e4 <__cvt+0x68>
 800b43c:	1c59      	adds	r1, r3, #1
 800b43e:	9107      	str	r1, [sp, #28]
 800b440:	701a      	strb	r2, [r3, #0]
 800b442:	e7d9      	b.n	800b3f8 <__cvt+0x7c>

0800b444 <__exponent>:
 800b444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b446:	2900      	cmp	r1, #0
 800b448:	bfb6      	itet	lt
 800b44a:	232d      	movlt	r3, #45	@ 0x2d
 800b44c:	232b      	movge	r3, #43	@ 0x2b
 800b44e:	4249      	neglt	r1, r1
 800b450:	2909      	cmp	r1, #9
 800b452:	7002      	strb	r2, [r0, #0]
 800b454:	7043      	strb	r3, [r0, #1]
 800b456:	dd29      	ble.n	800b4ac <__exponent+0x68>
 800b458:	f10d 0307 	add.w	r3, sp, #7
 800b45c:	461d      	mov	r5, r3
 800b45e:	270a      	movs	r7, #10
 800b460:	fbb1 f6f7 	udiv	r6, r1, r7
 800b464:	461a      	mov	r2, r3
 800b466:	fb07 1416 	mls	r4, r7, r6, r1
 800b46a:	3430      	adds	r4, #48	@ 0x30
 800b46c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b470:	460c      	mov	r4, r1
 800b472:	2c63      	cmp	r4, #99	@ 0x63
 800b474:	4631      	mov	r1, r6
 800b476:	f103 33ff 	add.w	r3, r3, #4294967295
 800b47a:	dcf1      	bgt.n	800b460 <__exponent+0x1c>
 800b47c:	3130      	adds	r1, #48	@ 0x30
 800b47e:	1e94      	subs	r4, r2, #2
 800b480:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b484:	4623      	mov	r3, r4
 800b486:	1c41      	adds	r1, r0, #1
 800b488:	42ab      	cmp	r3, r5
 800b48a:	d30a      	bcc.n	800b4a2 <__exponent+0x5e>
 800b48c:	f10d 0309 	add.w	r3, sp, #9
 800b490:	1a9b      	subs	r3, r3, r2
 800b492:	42ac      	cmp	r4, r5
 800b494:	bf88      	it	hi
 800b496:	2300      	movhi	r3, #0
 800b498:	3302      	adds	r3, #2
 800b49a:	4403      	add	r3, r0
 800b49c:	1a18      	subs	r0, r3, r0
 800b49e:	b003      	add	sp, #12
 800b4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4a2:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b4a6:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b4aa:	e7ed      	b.n	800b488 <__exponent+0x44>
 800b4ac:	2330      	movs	r3, #48	@ 0x30
 800b4ae:	3130      	adds	r1, #48	@ 0x30
 800b4b0:	7083      	strb	r3, [r0, #2]
 800b4b2:	70c1      	strb	r1, [r0, #3]
 800b4b4:	1d03      	adds	r3, r0, #4
 800b4b6:	e7f1      	b.n	800b49c <__exponent+0x58>

0800b4b8 <_printf_float>:
 800b4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4bc:	b091      	sub	sp, #68	@ 0x44
 800b4be:	460c      	mov	r4, r1
 800b4c0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b4c4:	4616      	mov	r6, r2
 800b4c6:	461f      	mov	r7, r3
 800b4c8:	4605      	mov	r5, r0
 800b4ca:	f000 fcc1 	bl	800be50 <_localeconv_r>
 800b4ce:	6803      	ldr	r3, [r0, #0]
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	9308      	str	r3, [sp, #32]
 800b4d4:	f7f4 fe78 	bl	80001c8 <strlen>
 800b4d8:	2300      	movs	r3, #0
 800b4da:	930e      	str	r3, [sp, #56]	@ 0x38
 800b4dc:	f8d8 3000 	ldr.w	r3, [r8]
 800b4e0:	9009      	str	r0, [sp, #36]	@ 0x24
 800b4e2:	3307      	adds	r3, #7
 800b4e4:	f023 0307 	bic.w	r3, r3, #7
 800b4e8:	f103 0208 	add.w	r2, r3, #8
 800b4ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b4f0:	f8d4 b000 	ldr.w	fp, [r4]
 800b4f4:	f8c8 2000 	str.w	r2, [r8]
 800b4f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b500:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b502:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b506:	f04f 32ff 	mov.w	r2, #4294967295
 800b50a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b50e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b512:	4b9c      	ldr	r3, [pc, #624]	@ (800b784 <_printf_float+0x2cc>)
 800b514:	f7f5 fab6 	bl	8000a84 <__aeabi_dcmpun>
 800b518:	bb70      	cbnz	r0, 800b578 <_printf_float+0xc0>
 800b51a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b51e:	f04f 32ff 	mov.w	r2, #4294967295
 800b522:	4b98      	ldr	r3, [pc, #608]	@ (800b784 <_printf_float+0x2cc>)
 800b524:	f7f5 fa90 	bl	8000a48 <__aeabi_dcmple>
 800b528:	bb30      	cbnz	r0, 800b578 <_printf_float+0xc0>
 800b52a:	2200      	movs	r2, #0
 800b52c:	2300      	movs	r3, #0
 800b52e:	4640      	mov	r0, r8
 800b530:	4649      	mov	r1, r9
 800b532:	f7f5 fa7f 	bl	8000a34 <__aeabi_dcmplt>
 800b536:	b110      	cbz	r0, 800b53e <_printf_float+0x86>
 800b538:	232d      	movs	r3, #45	@ 0x2d
 800b53a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b53e:	4a92      	ldr	r2, [pc, #584]	@ (800b788 <_printf_float+0x2d0>)
 800b540:	4b92      	ldr	r3, [pc, #584]	@ (800b78c <_printf_float+0x2d4>)
 800b542:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b546:	bf94      	ite	ls
 800b548:	4690      	movls	r8, r2
 800b54a:	4698      	movhi	r8, r3
 800b54c:	2303      	movs	r3, #3
 800b54e:	f04f 0900 	mov.w	r9, #0
 800b552:	6123      	str	r3, [r4, #16]
 800b554:	f02b 0304 	bic.w	r3, fp, #4
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	4633      	mov	r3, r6
 800b55c:	4621      	mov	r1, r4
 800b55e:	4628      	mov	r0, r5
 800b560:	9700      	str	r7, [sp, #0]
 800b562:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b564:	f000 f9d4 	bl	800b910 <_printf_common>
 800b568:	3001      	adds	r0, #1
 800b56a:	f040 8090 	bne.w	800b68e <_printf_float+0x1d6>
 800b56e:	f04f 30ff 	mov.w	r0, #4294967295
 800b572:	b011      	add	sp, #68	@ 0x44
 800b574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b578:	4642      	mov	r2, r8
 800b57a:	464b      	mov	r3, r9
 800b57c:	4640      	mov	r0, r8
 800b57e:	4649      	mov	r1, r9
 800b580:	f7f5 fa80 	bl	8000a84 <__aeabi_dcmpun>
 800b584:	b148      	cbz	r0, 800b59a <_printf_float+0xe2>
 800b586:	464b      	mov	r3, r9
 800b588:	2b00      	cmp	r3, #0
 800b58a:	bfb8      	it	lt
 800b58c:	232d      	movlt	r3, #45	@ 0x2d
 800b58e:	4a80      	ldr	r2, [pc, #512]	@ (800b790 <_printf_float+0x2d8>)
 800b590:	bfb8      	it	lt
 800b592:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b596:	4b7f      	ldr	r3, [pc, #508]	@ (800b794 <_printf_float+0x2dc>)
 800b598:	e7d3      	b.n	800b542 <_printf_float+0x8a>
 800b59a:	6863      	ldr	r3, [r4, #4]
 800b59c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800b5a0:	1c5a      	adds	r2, r3, #1
 800b5a2:	d13f      	bne.n	800b624 <_printf_float+0x16c>
 800b5a4:	2306      	movs	r3, #6
 800b5a6:	6063      	str	r3, [r4, #4]
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800b5ae:	6023      	str	r3, [r4, #0]
 800b5b0:	9206      	str	r2, [sp, #24]
 800b5b2:	aa0e      	add	r2, sp, #56	@ 0x38
 800b5b4:	e9cd a204 	strd	sl, r2, [sp, #16]
 800b5b8:	aa0d      	add	r2, sp, #52	@ 0x34
 800b5ba:	9203      	str	r2, [sp, #12]
 800b5bc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800b5c0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b5c4:	6863      	ldr	r3, [r4, #4]
 800b5c6:	4642      	mov	r2, r8
 800b5c8:	9300      	str	r3, [sp, #0]
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	464b      	mov	r3, r9
 800b5ce:	910a      	str	r1, [sp, #40]	@ 0x28
 800b5d0:	f7ff fed4 	bl	800b37c <__cvt>
 800b5d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b5d6:	4680      	mov	r8, r0
 800b5d8:	2947      	cmp	r1, #71	@ 0x47
 800b5da:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b5dc:	d128      	bne.n	800b630 <_printf_float+0x178>
 800b5de:	1cc8      	adds	r0, r1, #3
 800b5e0:	db02      	blt.n	800b5e8 <_printf_float+0x130>
 800b5e2:	6863      	ldr	r3, [r4, #4]
 800b5e4:	4299      	cmp	r1, r3
 800b5e6:	dd40      	ble.n	800b66a <_printf_float+0x1b2>
 800b5e8:	f1aa 0a02 	sub.w	sl, sl, #2
 800b5ec:	fa5f fa8a 	uxtb.w	sl, sl
 800b5f0:	4652      	mov	r2, sl
 800b5f2:	3901      	subs	r1, #1
 800b5f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b5f8:	910d      	str	r1, [sp, #52]	@ 0x34
 800b5fa:	f7ff ff23 	bl	800b444 <__exponent>
 800b5fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b600:	4681      	mov	r9, r0
 800b602:	1813      	adds	r3, r2, r0
 800b604:	2a01      	cmp	r2, #1
 800b606:	6123      	str	r3, [r4, #16]
 800b608:	dc02      	bgt.n	800b610 <_printf_float+0x158>
 800b60a:	6822      	ldr	r2, [r4, #0]
 800b60c:	07d2      	lsls	r2, r2, #31
 800b60e:	d501      	bpl.n	800b614 <_printf_float+0x15c>
 800b610:	3301      	adds	r3, #1
 800b612:	6123      	str	r3, [r4, #16]
 800b614:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d09e      	beq.n	800b55a <_printf_float+0xa2>
 800b61c:	232d      	movs	r3, #45	@ 0x2d
 800b61e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b622:	e79a      	b.n	800b55a <_printf_float+0xa2>
 800b624:	2947      	cmp	r1, #71	@ 0x47
 800b626:	d1bf      	bne.n	800b5a8 <_printf_float+0xf0>
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1bd      	bne.n	800b5a8 <_printf_float+0xf0>
 800b62c:	2301      	movs	r3, #1
 800b62e:	e7ba      	b.n	800b5a6 <_printf_float+0xee>
 800b630:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b634:	d9dc      	bls.n	800b5f0 <_printf_float+0x138>
 800b636:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b63a:	d118      	bne.n	800b66e <_printf_float+0x1b6>
 800b63c:	2900      	cmp	r1, #0
 800b63e:	6863      	ldr	r3, [r4, #4]
 800b640:	dd0b      	ble.n	800b65a <_printf_float+0x1a2>
 800b642:	6121      	str	r1, [r4, #16]
 800b644:	b913      	cbnz	r3, 800b64c <_printf_float+0x194>
 800b646:	6822      	ldr	r2, [r4, #0]
 800b648:	07d0      	lsls	r0, r2, #31
 800b64a:	d502      	bpl.n	800b652 <_printf_float+0x19a>
 800b64c:	3301      	adds	r3, #1
 800b64e:	440b      	add	r3, r1
 800b650:	6123      	str	r3, [r4, #16]
 800b652:	f04f 0900 	mov.w	r9, #0
 800b656:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b658:	e7dc      	b.n	800b614 <_printf_float+0x15c>
 800b65a:	b913      	cbnz	r3, 800b662 <_printf_float+0x1aa>
 800b65c:	6822      	ldr	r2, [r4, #0]
 800b65e:	07d2      	lsls	r2, r2, #31
 800b660:	d501      	bpl.n	800b666 <_printf_float+0x1ae>
 800b662:	3302      	adds	r3, #2
 800b664:	e7f4      	b.n	800b650 <_printf_float+0x198>
 800b666:	2301      	movs	r3, #1
 800b668:	e7f2      	b.n	800b650 <_printf_float+0x198>
 800b66a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b66e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b670:	4299      	cmp	r1, r3
 800b672:	db05      	blt.n	800b680 <_printf_float+0x1c8>
 800b674:	6823      	ldr	r3, [r4, #0]
 800b676:	6121      	str	r1, [r4, #16]
 800b678:	07d8      	lsls	r0, r3, #31
 800b67a:	d5ea      	bpl.n	800b652 <_printf_float+0x19a>
 800b67c:	1c4b      	adds	r3, r1, #1
 800b67e:	e7e7      	b.n	800b650 <_printf_float+0x198>
 800b680:	2900      	cmp	r1, #0
 800b682:	bfcc      	ite	gt
 800b684:	2201      	movgt	r2, #1
 800b686:	f1c1 0202 	rsble	r2, r1, #2
 800b68a:	4413      	add	r3, r2
 800b68c:	e7e0      	b.n	800b650 <_printf_float+0x198>
 800b68e:	6823      	ldr	r3, [r4, #0]
 800b690:	055a      	lsls	r2, r3, #21
 800b692:	d407      	bmi.n	800b6a4 <_printf_float+0x1ec>
 800b694:	6923      	ldr	r3, [r4, #16]
 800b696:	4642      	mov	r2, r8
 800b698:	4631      	mov	r1, r6
 800b69a:	4628      	mov	r0, r5
 800b69c:	47b8      	blx	r7
 800b69e:	3001      	adds	r0, #1
 800b6a0:	d12b      	bne.n	800b6fa <_printf_float+0x242>
 800b6a2:	e764      	b.n	800b56e <_printf_float+0xb6>
 800b6a4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b6a8:	f240 80dc 	bls.w	800b864 <_printf_float+0x3ac>
 800b6ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	f7f5 f9b4 	bl	8000a20 <__aeabi_dcmpeq>
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	d033      	beq.n	800b724 <_printf_float+0x26c>
 800b6bc:	2301      	movs	r3, #1
 800b6be:	4631      	mov	r1, r6
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	4a35      	ldr	r2, [pc, #212]	@ (800b798 <_printf_float+0x2e0>)
 800b6c4:	47b8      	blx	r7
 800b6c6:	3001      	adds	r0, #1
 800b6c8:	f43f af51 	beq.w	800b56e <_printf_float+0xb6>
 800b6cc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b6d0:	4543      	cmp	r3, r8
 800b6d2:	db02      	blt.n	800b6da <_printf_float+0x222>
 800b6d4:	6823      	ldr	r3, [r4, #0]
 800b6d6:	07d8      	lsls	r0, r3, #31
 800b6d8:	d50f      	bpl.n	800b6fa <_printf_float+0x242>
 800b6da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b6de:	4631      	mov	r1, r6
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	47b8      	blx	r7
 800b6e4:	3001      	adds	r0, #1
 800b6e6:	f43f af42 	beq.w	800b56e <_printf_float+0xb6>
 800b6ea:	f04f 0900 	mov.w	r9, #0
 800b6ee:	f108 38ff 	add.w	r8, r8, #4294967295
 800b6f2:	f104 0a1a 	add.w	sl, r4, #26
 800b6f6:	45c8      	cmp	r8, r9
 800b6f8:	dc09      	bgt.n	800b70e <_printf_float+0x256>
 800b6fa:	6823      	ldr	r3, [r4, #0]
 800b6fc:	079b      	lsls	r3, r3, #30
 800b6fe:	f100 8102 	bmi.w	800b906 <_printf_float+0x44e>
 800b702:	68e0      	ldr	r0, [r4, #12]
 800b704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b706:	4298      	cmp	r0, r3
 800b708:	bfb8      	it	lt
 800b70a:	4618      	movlt	r0, r3
 800b70c:	e731      	b.n	800b572 <_printf_float+0xba>
 800b70e:	2301      	movs	r3, #1
 800b710:	4652      	mov	r2, sl
 800b712:	4631      	mov	r1, r6
 800b714:	4628      	mov	r0, r5
 800b716:	47b8      	blx	r7
 800b718:	3001      	adds	r0, #1
 800b71a:	f43f af28 	beq.w	800b56e <_printf_float+0xb6>
 800b71e:	f109 0901 	add.w	r9, r9, #1
 800b722:	e7e8      	b.n	800b6f6 <_printf_float+0x23e>
 800b724:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b726:	2b00      	cmp	r3, #0
 800b728:	dc38      	bgt.n	800b79c <_printf_float+0x2e4>
 800b72a:	2301      	movs	r3, #1
 800b72c:	4631      	mov	r1, r6
 800b72e:	4628      	mov	r0, r5
 800b730:	4a19      	ldr	r2, [pc, #100]	@ (800b798 <_printf_float+0x2e0>)
 800b732:	47b8      	blx	r7
 800b734:	3001      	adds	r0, #1
 800b736:	f43f af1a 	beq.w	800b56e <_printf_float+0xb6>
 800b73a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b73e:	ea59 0303 	orrs.w	r3, r9, r3
 800b742:	d102      	bne.n	800b74a <_printf_float+0x292>
 800b744:	6823      	ldr	r3, [r4, #0]
 800b746:	07d9      	lsls	r1, r3, #31
 800b748:	d5d7      	bpl.n	800b6fa <_printf_float+0x242>
 800b74a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b74e:	4631      	mov	r1, r6
 800b750:	4628      	mov	r0, r5
 800b752:	47b8      	blx	r7
 800b754:	3001      	adds	r0, #1
 800b756:	f43f af0a 	beq.w	800b56e <_printf_float+0xb6>
 800b75a:	f04f 0a00 	mov.w	sl, #0
 800b75e:	f104 0b1a 	add.w	fp, r4, #26
 800b762:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b764:	425b      	negs	r3, r3
 800b766:	4553      	cmp	r3, sl
 800b768:	dc01      	bgt.n	800b76e <_printf_float+0x2b6>
 800b76a:	464b      	mov	r3, r9
 800b76c:	e793      	b.n	800b696 <_printf_float+0x1de>
 800b76e:	2301      	movs	r3, #1
 800b770:	465a      	mov	r2, fp
 800b772:	4631      	mov	r1, r6
 800b774:	4628      	mov	r0, r5
 800b776:	47b8      	blx	r7
 800b778:	3001      	adds	r0, #1
 800b77a:	f43f aef8 	beq.w	800b56e <_printf_float+0xb6>
 800b77e:	f10a 0a01 	add.w	sl, sl, #1
 800b782:	e7ee      	b.n	800b762 <_printf_float+0x2aa>
 800b784:	7fefffff 	.word	0x7fefffff
 800b788:	0800e37c 	.word	0x0800e37c
 800b78c:	0800e380 	.word	0x0800e380
 800b790:	0800e384 	.word	0x0800e384
 800b794:	0800e388 	.word	0x0800e388
 800b798:	0800e38c 	.word	0x0800e38c
 800b79c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b79e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b7a2:	4553      	cmp	r3, sl
 800b7a4:	bfa8      	it	ge
 800b7a6:	4653      	movge	r3, sl
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	4699      	mov	r9, r3
 800b7ac:	dc36      	bgt.n	800b81c <_printf_float+0x364>
 800b7ae:	f04f 0b00 	mov.w	fp, #0
 800b7b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7b6:	f104 021a 	add.w	r2, r4, #26
 800b7ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b7bc:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7be:	eba3 0309 	sub.w	r3, r3, r9
 800b7c2:	455b      	cmp	r3, fp
 800b7c4:	dc31      	bgt.n	800b82a <_printf_float+0x372>
 800b7c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7c8:	459a      	cmp	sl, r3
 800b7ca:	dc3a      	bgt.n	800b842 <_printf_float+0x38a>
 800b7cc:	6823      	ldr	r3, [r4, #0]
 800b7ce:	07da      	lsls	r2, r3, #31
 800b7d0:	d437      	bmi.n	800b842 <_printf_float+0x38a>
 800b7d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7d4:	ebaa 0903 	sub.w	r9, sl, r3
 800b7d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7da:	ebaa 0303 	sub.w	r3, sl, r3
 800b7de:	4599      	cmp	r9, r3
 800b7e0:	bfa8      	it	ge
 800b7e2:	4699      	movge	r9, r3
 800b7e4:	f1b9 0f00 	cmp.w	r9, #0
 800b7e8:	dc33      	bgt.n	800b852 <_printf_float+0x39a>
 800b7ea:	f04f 0800 	mov.w	r8, #0
 800b7ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7f2:	f104 0b1a 	add.w	fp, r4, #26
 800b7f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7f8:	ebaa 0303 	sub.w	r3, sl, r3
 800b7fc:	eba3 0309 	sub.w	r3, r3, r9
 800b800:	4543      	cmp	r3, r8
 800b802:	f77f af7a 	ble.w	800b6fa <_printf_float+0x242>
 800b806:	2301      	movs	r3, #1
 800b808:	465a      	mov	r2, fp
 800b80a:	4631      	mov	r1, r6
 800b80c:	4628      	mov	r0, r5
 800b80e:	47b8      	blx	r7
 800b810:	3001      	adds	r0, #1
 800b812:	f43f aeac 	beq.w	800b56e <_printf_float+0xb6>
 800b816:	f108 0801 	add.w	r8, r8, #1
 800b81a:	e7ec      	b.n	800b7f6 <_printf_float+0x33e>
 800b81c:	4642      	mov	r2, r8
 800b81e:	4631      	mov	r1, r6
 800b820:	4628      	mov	r0, r5
 800b822:	47b8      	blx	r7
 800b824:	3001      	adds	r0, #1
 800b826:	d1c2      	bne.n	800b7ae <_printf_float+0x2f6>
 800b828:	e6a1      	b.n	800b56e <_printf_float+0xb6>
 800b82a:	2301      	movs	r3, #1
 800b82c:	4631      	mov	r1, r6
 800b82e:	4628      	mov	r0, r5
 800b830:	920a      	str	r2, [sp, #40]	@ 0x28
 800b832:	47b8      	blx	r7
 800b834:	3001      	adds	r0, #1
 800b836:	f43f ae9a 	beq.w	800b56e <_printf_float+0xb6>
 800b83a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b83c:	f10b 0b01 	add.w	fp, fp, #1
 800b840:	e7bb      	b.n	800b7ba <_printf_float+0x302>
 800b842:	4631      	mov	r1, r6
 800b844:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b848:	4628      	mov	r0, r5
 800b84a:	47b8      	blx	r7
 800b84c:	3001      	adds	r0, #1
 800b84e:	d1c0      	bne.n	800b7d2 <_printf_float+0x31a>
 800b850:	e68d      	b.n	800b56e <_printf_float+0xb6>
 800b852:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b854:	464b      	mov	r3, r9
 800b856:	4631      	mov	r1, r6
 800b858:	4628      	mov	r0, r5
 800b85a:	4442      	add	r2, r8
 800b85c:	47b8      	blx	r7
 800b85e:	3001      	adds	r0, #1
 800b860:	d1c3      	bne.n	800b7ea <_printf_float+0x332>
 800b862:	e684      	b.n	800b56e <_printf_float+0xb6>
 800b864:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b868:	f1ba 0f01 	cmp.w	sl, #1
 800b86c:	dc01      	bgt.n	800b872 <_printf_float+0x3ba>
 800b86e:	07db      	lsls	r3, r3, #31
 800b870:	d536      	bpl.n	800b8e0 <_printf_float+0x428>
 800b872:	2301      	movs	r3, #1
 800b874:	4642      	mov	r2, r8
 800b876:	4631      	mov	r1, r6
 800b878:	4628      	mov	r0, r5
 800b87a:	47b8      	blx	r7
 800b87c:	3001      	adds	r0, #1
 800b87e:	f43f ae76 	beq.w	800b56e <_printf_float+0xb6>
 800b882:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b886:	4631      	mov	r1, r6
 800b888:	4628      	mov	r0, r5
 800b88a:	47b8      	blx	r7
 800b88c:	3001      	adds	r0, #1
 800b88e:	f43f ae6e 	beq.w	800b56e <_printf_float+0xb6>
 800b892:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b896:	2200      	movs	r2, #0
 800b898:	2300      	movs	r3, #0
 800b89a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b89e:	f7f5 f8bf 	bl	8000a20 <__aeabi_dcmpeq>
 800b8a2:	b9c0      	cbnz	r0, 800b8d6 <_printf_float+0x41e>
 800b8a4:	4653      	mov	r3, sl
 800b8a6:	f108 0201 	add.w	r2, r8, #1
 800b8aa:	4631      	mov	r1, r6
 800b8ac:	4628      	mov	r0, r5
 800b8ae:	47b8      	blx	r7
 800b8b0:	3001      	adds	r0, #1
 800b8b2:	d10c      	bne.n	800b8ce <_printf_float+0x416>
 800b8b4:	e65b      	b.n	800b56e <_printf_float+0xb6>
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	465a      	mov	r2, fp
 800b8ba:	4631      	mov	r1, r6
 800b8bc:	4628      	mov	r0, r5
 800b8be:	47b8      	blx	r7
 800b8c0:	3001      	adds	r0, #1
 800b8c2:	f43f ae54 	beq.w	800b56e <_printf_float+0xb6>
 800b8c6:	f108 0801 	add.w	r8, r8, #1
 800b8ca:	45d0      	cmp	r8, sl
 800b8cc:	dbf3      	blt.n	800b8b6 <_printf_float+0x3fe>
 800b8ce:	464b      	mov	r3, r9
 800b8d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b8d4:	e6e0      	b.n	800b698 <_printf_float+0x1e0>
 800b8d6:	f04f 0800 	mov.w	r8, #0
 800b8da:	f104 0b1a 	add.w	fp, r4, #26
 800b8de:	e7f4      	b.n	800b8ca <_printf_float+0x412>
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	4642      	mov	r2, r8
 800b8e4:	e7e1      	b.n	800b8aa <_printf_float+0x3f2>
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	464a      	mov	r2, r9
 800b8ea:	4631      	mov	r1, r6
 800b8ec:	4628      	mov	r0, r5
 800b8ee:	47b8      	blx	r7
 800b8f0:	3001      	adds	r0, #1
 800b8f2:	f43f ae3c 	beq.w	800b56e <_printf_float+0xb6>
 800b8f6:	f108 0801 	add.w	r8, r8, #1
 800b8fa:	68e3      	ldr	r3, [r4, #12]
 800b8fc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b8fe:	1a5b      	subs	r3, r3, r1
 800b900:	4543      	cmp	r3, r8
 800b902:	dcf0      	bgt.n	800b8e6 <_printf_float+0x42e>
 800b904:	e6fd      	b.n	800b702 <_printf_float+0x24a>
 800b906:	f04f 0800 	mov.w	r8, #0
 800b90a:	f104 0919 	add.w	r9, r4, #25
 800b90e:	e7f4      	b.n	800b8fa <_printf_float+0x442>

0800b910 <_printf_common>:
 800b910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b914:	4616      	mov	r6, r2
 800b916:	4698      	mov	r8, r3
 800b918:	688a      	ldr	r2, [r1, #8]
 800b91a:	690b      	ldr	r3, [r1, #16]
 800b91c:	4607      	mov	r7, r0
 800b91e:	4293      	cmp	r3, r2
 800b920:	bfb8      	it	lt
 800b922:	4613      	movlt	r3, r2
 800b924:	6033      	str	r3, [r6, #0]
 800b926:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b92a:	460c      	mov	r4, r1
 800b92c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b930:	b10a      	cbz	r2, 800b936 <_printf_common+0x26>
 800b932:	3301      	adds	r3, #1
 800b934:	6033      	str	r3, [r6, #0]
 800b936:	6823      	ldr	r3, [r4, #0]
 800b938:	0699      	lsls	r1, r3, #26
 800b93a:	bf42      	ittt	mi
 800b93c:	6833      	ldrmi	r3, [r6, #0]
 800b93e:	3302      	addmi	r3, #2
 800b940:	6033      	strmi	r3, [r6, #0]
 800b942:	6825      	ldr	r5, [r4, #0]
 800b944:	f015 0506 	ands.w	r5, r5, #6
 800b948:	d106      	bne.n	800b958 <_printf_common+0x48>
 800b94a:	f104 0a19 	add.w	sl, r4, #25
 800b94e:	68e3      	ldr	r3, [r4, #12]
 800b950:	6832      	ldr	r2, [r6, #0]
 800b952:	1a9b      	subs	r3, r3, r2
 800b954:	42ab      	cmp	r3, r5
 800b956:	dc2b      	bgt.n	800b9b0 <_printf_common+0xa0>
 800b958:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b95c:	6822      	ldr	r2, [r4, #0]
 800b95e:	3b00      	subs	r3, #0
 800b960:	bf18      	it	ne
 800b962:	2301      	movne	r3, #1
 800b964:	0692      	lsls	r2, r2, #26
 800b966:	d430      	bmi.n	800b9ca <_printf_common+0xba>
 800b968:	4641      	mov	r1, r8
 800b96a:	4638      	mov	r0, r7
 800b96c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b970:	47c8      	blx	r9
 800b972:	3001      	adds	r0, #1
 800b974:	d023      	beq.n	800b9be <_printf_common+0xae>
 800b976:	6823      	ldr	r3, [r4, #0]
 800b978:	6922      	ldr	r2, [r4, #16]
 800b97a:	f003 0306 	and.w	r3, r3, #6
 800b97e:	2b04      	cmp	r3, #4
 800b980:	bf14      	ite	ne
 800b982:	2500      	movne	r5, #0
 800b984:	6833      	ldreq	r3, [r6, #0]
 800b986:	f04f 0600 	mov.w	r6, #0
 800b98a:	bf08      	it	eq
 800b98c:	68e5      	ldreq	r5, [r4, #12]
 800b98e:	f104 041a 	add.w	r4, r4, #26
 800b992:	bf08      	it	eq
 800b994:	1aed      	subeq	r5, r5, r3
 800b996:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b99a:	bf08      	it	eq
 800b99c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	bfc4      	itt	gt
 800b9a4:	1a9b      	subgt	r3, r3, r2
 800b9a6:	18ed      	addgt	r5, r5, r3
 800b9a8:	42b5      	cmp	r5, r6
 800b9aa:	d11a      	bne.n	800b9e2 <_printf_common+0xd2>
 800b9ac:	2000      	movs	r0, #0
 800b9ae:	e008      	b.n	800b9c2 <_printf_common+0xb2>
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	4652      	mov	r2, sl
 800b9b4:	4641      	mov	r1, r8
 800b9b6:	4638      	mov	r0, r7
 800b9b8:	47c8      	blx	r9
 800b9ba:	3001      	adds	r0, #1
 800b9bc:	d103      	bne.n	800b9c6 <_printf_common+0xb6>
 800b9be:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9c6:	3501      	adds	r5, #1
 800b9c8:	e7c1      	b.n	800b94e <_printf_common+0x3e>
 800b9ca:	2030      	movs	r0, #48	@ 0x30
 800b9cc:	18e1      	adds	r1, r4, r3
 800b9ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b9d2:	1c5a      	adds	r2, r3, #1
 800b9d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b9d8:	4422      	add	r2, r4
 800b9da:	3302      	adds	r3, #2
 800b9dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b9e0:	e7c2      	b.n	800b968 <_printf_common+0x58>
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	4622      	mov	r2, r4
 800b9e6:	4641      	mov	r1, r8
 800b9e8:	4638      	mov	r0, r7
 800b9ea:	47c8      	blx	r9
 800b9ec:	3001      	adds	r0, #1
 800b9ee:	d0e6      	beq.n	800b9be <_printf_common+0xae>
 800b9f0:	3601      	adds	r6, #1
 800b9f2:	e7d9      	b.n	800b9a8 <_printf_common+0x98>

0800b9f4 <_printf_i>:
 800b9f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9f8:	7e0f      	ldrb	r7, [r1, #24]
 800b9fa:	4691      	mov	r9, r2
 800b9fc:	2f78      	cmp	r7, #120	@ 0x78
 800b9fe:	4680      	mov	r8, r0
 800ba00:	460c      	mov	r4, r1
 800ba02:	469a      	mov	sl, r3
 800ba04:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ba06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ba0a:	d807      	bhi.n	800ba1c <_printf_i+0x28>
 800ba0c:	2f62      	cmp	r7, #98	@ 0x62
 800ba0e:	d80a      	bhi.n	800ba26 <_printf_i+0x32>
 800ba10:	2f00      	cmp	r7, #0
 800ba12:	f000 80d3 	beq.w	800bbbc <_printf_i+0x1c8>
 800ba16:	2f58      	cmp	r7, #88	@ 0x58
 800ba18:	f000 80ba 	beq.w	800bb90 <_printf_i+0x19c>
 800ba1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ba24:	e03a      	b.n	800ba9c <_printf_i+0xa8>
 800ba26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ba2a:	2b15      	cmp	r3, #21
 800ba2c:	d8f6      	bhi.n	800ba1c <_printf_i+0x28>
 800ba2e:	a101      	add	r1, pc, #4	@ (adr r1, 800ba34 <_printf_i+0x40>)
 800ba30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ba34:	0800ba8d 	.word	0x0800ba8d
 800ba38:	0800baa1 	.word	0x0800baa1
 800ba3c:	0800ba1d 	.word	0x0800ba1d
 800ba40:	0800ba1d 	.word	0x0800ba1d
 800ba44:	0800ba1d 	.word	0x0800ba1d
 800ba48:	0800ba1d 	.word	0x0800ba1d
 800ba4c:	0800baa1 	.word	0x0800baa1
 800ba50:	0800ba1d 	.word	0x0800ba1d
 800ba54:	0800ba1d 	.word	0x0800ba1d
 800ba58:	0800ba1d 	.word	0x0800ba1d
 800ba5c:	0800ba1d 	.word	0x0800ba1d
 800ba60:	0800bba3 	.word	0x0800bba3
 800ba64:	0800bacb 	.word	0x0800bacb
 800ba68:	0800bb5d 	.word	0x0800bb5d
 800ba6c:	0800ba1d 	.word	0x0800ba1d
 800ba70:	0800ba1d 	.word	0x0800ba1d
 800ba74:	0800bbc5 	.word	0x0800bbc5
 800ba78:	0800ba1d 	.word	0x0800ba1d
 800ba7c:	0800bacb 	.word	0x0800bacb
 800ba80:	0800ba1d 	.word	0x0800ba1d
 800ba84:	0800ba1d 	.word	0x0800ba1d
 800ba88:	0800bb65 	.word	0x0800bb65
 800ba8c:	6833      	ldr	r3, [r6, #0]
 800ba8e:	1d1a      	adds	r2, r3, #4
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	6032      	str	r2, [r6, #0]
 800ba94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ba98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e09e      	b.n	800bbde <_printf_i+0x1ea>
 800baa0:	6833      	ldr	r3, [r6, #0]
 800baa2:	6820      	ldr	r0, [r4, #0]
 800baa4:	1d19      	adds	r1, r3, #4
 800baa6:	6031      	str	r1, [r6, #0]
 800baa8:	0606      	lsls	r6, r0, #24
 800baaa:	d501      	bpl.n	800bab0 <_printf_i+0xbc>
 800baac:	681d      	ldr	r5, [r3, #0]
 800baae:	e003      	b.n	800bab8 <_printf_i+0xc4>
 800bab0:	0645      	lsls	r5, r0, #25
 800bab2:	d5fb      	bpl.n	800baac <_printf_i+0xb8>
 800bab4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bab8:	2d00      	cmp	r5, #0
 800baba:	da03      	bge.n	800bac4 <_printf_i+0xd0>
 800babc:	232d      	movs	r3, #45	@ 0x2d
 800babe:	426d      	negs	r5, r5
 800bac0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bac4:	230a      	movs	r3, #10
 800bac6:	4859      	ldr	r0, [pc, #356]	@ (800bc2c <_printf_i+0x238>)
 800bac8:	e011      	b.n	800baee <_printf_i+0xfa>
 800baca:	6821      	ldr	r1, [r4, #0]
 800bacc:	6833      	ldr	r3, [r6, #0]
 800bace:	0608      	lsls	r0, r1, #24
 800bad0:	f853 5b04 	ldr.w	r5, [r3], #4
 800bad4:	d402      	bmi.n	800badc <_printf_i+0xe8>
 800bad6:	0649      	lsls	r1, r1, #25
 800bad8:	bf48      	it	mi
 800bada:	b2ad      	uxthmi	r5, r5
 800badc:	2f6f      	cmp	r7, #111	@ 0x6f
 800bade:	6033      	str	r3, [r6, #0]
 800bae0:	bf14      	ite	ne
 800bae2:	230a      	movne	r3, #10
 800bae4:	2308      	moveq	r3, #8
 800bae6:	4851      	ldr	r0, [pc, #324]	@ (800bc2c <_printf_i+0x238>)
 800bae8:	2100      	movs	r1, #0
 800baea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800baee:	6866      	ldr	r6, [r4, #4]
 800baf0:	2e00      	cmp	r6, #0
 800baf2:	bfa8      	it	ge
 800baf4:	6821      	ldrge	r1, [r4, #0]
 800baf6:	60a6      	str	r6, [r4, #8]
 800baf8:	bfa4      	itt	ge
 800bafa:	f021 0104 	bicge.w	r1, r1, #4
 800bafe:	6021      	strge	r1, [r4, #0]
 800bb00:	b90d      	cbnz	r5, 800bb06 <_printf_i+0x112>
 800bb02:	2e00      	cmp	r6, #0
 800bb04:	d04b      	beq.n	800bb9e <_printf_i+0x1aa>
 800bb06:	4616      	mov	r6, r2
 800bb08:	fbb5 f1f3 	udiv	r1, r5, r3
 800bb0c:	fb03 5711 	mls	r7, r3, r1, r5
 800bb10:	5dc7      	ldrb	r7, [r0, r7]
 800bb12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bb16:	462f      	mov	r7, r5
 800bb18:	42bb      	cmp	r3, r7
 800bb1a:	460d      	mov	r5, r1
 800bb1c:	d9f4      	bls.n	800bb08 <_printf_i+0x114>
 800bb1e:	2b08      	cmp	r3, #8
 800bb20:	d10b      	bne.n	800bb3a <_printf_i+0x146>
 800bb22:	6823      	ldr	r3, [r4, #0]
 800bb24:	07df      	lsls	r7, r3, #31
 800bb26:	d508      	bpl.n	800bb3a <_printf_i+0x146>
 800bb28:	6923      	ldr	r3, [r4, #16]
 800bb2a:	6861      	ldr	r1, [r4, #4]
 800bb2c:	4299      	cmp	r1, r3
 800bb2e:	bfde      	ittt	le
 800bb30:	2330      	movle	r3, #48	@ 0x30
 800bb32:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bb36:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bb3a:	1b92      	subs	r2, r2, r6
 800bb3c:	6122      	str	r2, [r4, #16]
 800bb3e:	464b      	mov	r3, r9
 800bb40:	4621      	mov	r1, r4
 800bb42:	4640      	mov	r0, r8
 800bb44:	f8cd a000 	str.w	sl, [sp]
 800bb48:	aa03      	add	r2, sp, #12
 800bb4a:	f7ff fee1 	bl	800b910 <_printf_common>
 800bb4e:	3001      	adds	r0, #1
 800bb50:	d14a      	bne.n	800bbe8 <_printf_i+0x1f4>
 800bb52:	f04f 30ff 	mov.w	r0, #4294967295
 800bb56:	b004      	add	sp, #16
 800bb58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb5c:	6823      	ldr	r3, [r4, #0]
 800bb5e:	f043 0320 	orr.w	r3, r3, #32
 800bb62:	6023      	str	r3, [r4, #0]
 800bb64:	2778      	movs	r7, #120	@ 0x78
 800bb66:	4832      	ldr	r0, [pc, #200]	@ (800bc30 <_printf_i+0x23c>)
 800bb68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bb6c:	6823      	ldr	r3, [r4, #0]
 800bb6e:	6831      	ldr	r1, [r6, #0]
 800bb70:	061f      	lsls	r7, r3, #24
 800bb72:	f851 5b04 	ldr.w	r5, [r1], #4
 800bb76:	d402      	bmi.n	800bb7e <_printf_i+0x18a>
 800bb78:	065f      	lsls	r7, r3, #25
 800bb7a:	bf48      	it	mi
 800bb7c:	b2ad      	uxthmi	r5, r5
 800bb7e:	6031      	str	r1, [r6, #0]
 800bb80:	07d9      	lsls	r1, r3, #31
 800bb82:	bf44      	itt	mi
 800bb84:	f043 0320 	orrmi.w	r3, r3, #32
 800bb88:	6023      	strmi	r3, [r4, #0]
 800bb8a:	b11d      	cbz	r5, 800bb94 <_printf_i+0x1a0>
 800bb8c:	2310      	movs	r3, #16
 800bb8e:	e7ab      	b.n	800bae8 <_printf_i+0xf4>
 800bb90:	4826      	ldr	r0, [pc, #152]	@ (800bc2c <_printf_i+0x238>)
 800bb92:	e7e9      	b.n	800bb68 <_printf_i+0x174>
 800bb94:	6823      	ldr	r3, [r4, #0]
 800bb96:	f023 0320 	bic.w	r3, r3, #32
 800bb9a:	6023      	str	r3, [r4, #0]
 800bb9c:	e7f6      	b.n	800bb8c <_printf_i+0x198>
 800bb9e:	4616      	mov	r6, r2
 800bba0:	e7bd      	b.n	800bb1e <_printf_i+0x12a>
 800bba2:	6833      	ldr	r3, [r6, #0]
 800bba4:	6825      	ldr	r5, [r4, #0]
 800bba6:	1d18      	adds	r0, r3, #4
 800bba8:	6961      	ldr	r1, [r4, #20]
 800bbaa:	6030      	str	r0, [r6, #0]
 800bbac:	062e      	lsls	r6, r5, #24
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	d501      	bpl.n	800bbb6 <_printf_i+0x1c2>
 800bbb2:	6019      	str	r1, [r3, #0]
 800bbb4:	e002      	b.n	800bbbc <_printf_i+0x1c8>
 800bbb6:	0668      	lsls	r0, r5, #25
 800bbb8:	d5fb      	bpl.n	800bbb2 <_printf_i+0x1be>
 800bbba:	8019      	strh	r1, [r3, #0]
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	4616      	mov	r6, r2
 800bbc0:	6123      	str	r3, [r4, #16]
 800bbc2:	e7bc      	b.n	800bb3e <_printf_i+0x14a>
 800bbc4:	6833      	ldr	r3, [r6, #0]
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	1d1a      	adds	r2, r3, #4
 800bbca:	6032      	str	r2, [r6, #0]
 800bbcc:	681e      	ldr	r6, [r3, #0]
 800bbce:	6862      	ldr	r2, [r4, #4]
 800bbd0:	4630      	mov	r0, r6
 800bbd2:	f000 f9c4 	bl	800bf5e <memchr>
 800bbd6:	b108      	cbz	r0, 800bbdc <_printf_i+0x1e8>
 800bbd8:	1b80      	subs	r0, r0, r6
 800bbda:	6060      	str	r0, [r4, #4]
 800bbdc:	6863      	ldr	r3, [r4, #4]
 800bbde:	6123      	str	r3, [r4, #16]
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbe6:	e7aa      	b.n	800bb3e <_printf_i+0x14a>
 800bbe8:	4632      	mov	r2, r6
 800bbea:	4649      	mov	r1, r9
 800bbec:	4640      	mov	r0, r8
 800bbee:	6923      	ldr	r3, [r4, #16]
 800bbf0:	47d0      	blx	sl
 800bbf2:	3001      	adds	r0, #1
 800bbf4:	d0ad      	beq.n	800bb52 <_printf_i+0x15e>
 800bbf6:	6823      	ldr	r3, [r4, #0]
 800bbf8:	079b      	lsls	r3, r3, #30
 800bbfa:	d413      	bmi.n	800bc24 <_printf_i+0x230>
 800bbfc:	68e0      	ldr	r0, [r4, #12]
 800bbfe:	9b03      	ldr	r3, [sp, #12]
 800bc00:	4298      	cmp	r0, r3
 800bc02:	bfb8      	it	lt
 800bc04:	4618      	movlt	r0, r3
 800bc06:	e7a6      	b.n	800bb56 <_printf_i+0x162>
 800bc08:	2301      	movs	r3, #1
 800bc0a:	4632      	mov	r2, r6
 800bc0c:	4649      	mov	r1, r9
 800bc0e:	4640      	mov	r0, r8
 800bc10:	47d0      	blx	sl
 800bc12:	3001      	adds	r0, #1
 800bc14:	d09d      	beq.n	800bb52 <_printf_i+0x15e>
 800bc16:	3501      	adds	r5, #1
 800bc18:	68e3      	ldr	r3, [r4, #12]
 800bc1a:	9903      	ldr	r1, [sp, #12]
 800bc1c:	1a5b      	subs	r3, r3, r1
 800bc1e:	42ab      	cmp	r3, r5
 800bc20:	dcf2      	bgt.n	800bc08 <_printf_i+0x214>
 800bc22:	e7eb      	b.n	800bbfc <_printf_i+0x208>
 800bc24:	2500      	movs	r5, #0
 800bc26:	f104 0619 	add.w	r6, r4, #25
 800bc2a:	e7f5      	b.n	800bc18 <_printf_i+0x224>
 800bc2c:	0800e38e 	.word	0x0800e38e
 800bc30:	0800e39f 	.word	0x0800e39f

0800bc34 <std>:
 800bc34:	2300      	movs	r3, #0
 800bc36:	b510      	push	{r4, lr}
 800bc38:	4604      	mov	r4, r0
 800bc3a:	e9c0 3300 	strd	r3, r3, [r0]
 800bc3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc42:	6083      	str	r3, [r0, #8]
 800bc44:	8181      	strh	r1, [r0, #12]
 800bc46:	6643      	str	r3, [r0, #100]	@ 0x64
 800bc48:	81c2      	strh	r2, [r0, #14]
 800bc4a:	6183      	str	r3, [r0, #24]
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	2208      	movs	r2, #8
 800bc50:	305c      	adds	r0, #92	@ 0x5c
 800bc52:	f000 f8f4 	bl	800be3e <memset>
 800bc56:	4b0d      	ldr	r3, [pc, #52]	@ (800bc8c <std+0x58>)
 800bc58:	6224      	str	r4, [r4, #32]
 800bc5a:	6263      	str	r3, [r4, #36]	@ 0x24
 800bc5c:	4b0c      	ldr	r3, [pc, #48]	@ (800bc90 <std+0x5c>)
 800bc5e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bc60:	4b0c      	ldr	r3, [pc, #48]	@ (800bc94 <std+0x60>)
 800bc62:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bc64:	4b0c      	ldr	r3, [pc, #48]	@ (800bc98 <std+0x64>)
 800bc66:	6323      	str	r3, [r4, #48]	@ 0x30
 800bc68:	4b0c      	ldr	r3, [pc, #48]	@ (800bc9c <std+0x68>)
 800bc6a:	429c      	cmp	r4, r3
 800bc6c:	d006      	beq.n	800bc7c <std+0x48>
 800bc6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bc72:	4294      	cmp	r4, r2
 800bc74:	d002      	beq.n	800bc7c <std+0x48>
 800bc76:	33d0      	adds	r3, #208	@ 0xd0
 800bc78:	429c      	cmp	r4, r3
 800bc7a:	d105      	bne.n	800bc88 <std+0x54>
 800bc7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bc80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc84:	f000 b968 	b.w	800bf58 <__retarget_lock_init_recursive>
 800bc88:	bd10      	pop	{r4, pc}
 800bc8a:	bf00      	nop
 800bc8c:	0800bdb9 	.word	0x0800bdb9
 800bc90:	0800bddb 	.word	0x0800bddb
 800bc94:	0800be13 	.word	0x0800be13
 800bc98:	0800be37 	.word	0x0800be37
 800bc9c:	200017dc 	.word	0x200017dc

0800bca0 <stdio_exit_handler>:
 800bca0:	4a02      	ldr	r2, [pc, #8]	@ (800bcac <stdio_exit_handler+0xc>)
 800bca2:	4903      	ldr	r1, [pc, #12]	@ (800bcb0 <stdio_exit_handler+0x10>)
 800bca4:	4803      	ldr	r0, [pc, #12]	@ (800bcb4 <stdio_exit_handler+0x14>)
 800bca6:	f000 b869 	b.w	800bd7c <_fwalk_sglue>
 800bcaa:	bf00      	nop
 800bcac:	200001c8 	.word	0x200001c8
 800bcb0:	0800d4b1 	.word	0x0800d4b1
 800bcb4:	200001d8 	.word	0x200001d8

0800bcb8 <cleanup_stdio>:
 800bcb8:	6841      	ldr	r1, [r0, #4]
 800bcba:	4b0c      	ldr	r3, [pc, #48]	@ (800bcec <cleanup_stdio+0x34>)
 800bcbc:	b510      	push	{r4, lr}
 800bcbe:	4299      	cmp	r1, r3
 800bcc0:	4604      	mov	r4, r0
 800bcc2:	d001      	beq.n	800bcc8 <cleanup_stdio+0x10>
 800bcc4:	f001 fbf4 	bl	800d4b0 <_fflush_r>
 800bcc8:	68a1      	ldr	r1, [r4, #8]
 800bcca:	4b09      	ldr	r3, [pc, #36]	@ (800bcf0 <cleanup_stdio+0x38>)
 800bccc:	4299      	cmp	r1, r3
 800bcce:	d002      	beq.n	800bcd6 <cleanup_stdio+0x1e>
 800bcd0:	4620      	mov	r0, r4
 800bcd2:	f001 fbed 	bl	800d4b0 <_fflush_r>
 800bcd6:	68e1      	ldr	r1, [r4, #12]
 800bcd8:	4b06      	ldr	r3, [pc, #24]	@ (800bcf4 <cleanup_stdio+0x3c>)
 800bcda:	4299      	cmp	r1, r3
 800bcdc:	d004      	beq.n	800bce8 <cleanup_stdio+0x30>
 800bcde:	4620      	mov	r0, r4
 800bce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bce4:	f001 bbe4 	b.w	800d4b0 <_fflush_r>
 800bce8:	bd10      	pop	{r4, pc}
 800bcea:	bf00      	nop
 800bcec:	200017dc 	.word	0x200017dc
 800bcf0:	20001844 	.word	0x20001844
 800bcf4:	200018ac 	.word	0x200018ac

0800bcf8 <global_stdio_init.part.0>:
 800bcf8:	b510      	push	{r4, lr}
 800bcfa:	4b0b      	ldr	r3, [pc, #44]	@ (800bd28 <global_stdio_init.part.0+0x30>)
 800bcfc:	4c0b      	ldr	r4, [pc, #44]	@ (800bd2c <global_stdio_init.part.0+0x34>)
 800bcfe:	4a0c      	ldr	r2, [pc, #48]	@ (800bd30 <global_stdio_init.part.0+0x38>)
 800bd00:	4620      	mov	r0, r4
 800bd02:	601a      	str	r2, [r3, #0]
 800bd04:	2104      	movs	r1, #4
 800bd06:	2200      	movs	r2, #0
 800bd08:	f7ff ff94 	bl	800bc34 <std>
 800bd0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bd10:	2201      	movs	r2, #1
 800bd12:	2109      	movs	r1, #9
 800bd14:	f7ff ff8e 	bl	800bc34 <std>
 800bd18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bd1c:	2202      	movs	r2, #2
 800bd1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd22:	2112      	movs	r1, #18
 800bd24:	f7ff bf86 	b.w	800bc34 <std>
 800bd28:	20001914 	.word	0x20001914
 800bd2c:	200017dc 	.word	0x200017dc
 800bd30:	0800bca1 	.word	0x0800bca1

0800bd34 <__sfp_lock_acquire>:
 800bd34:	4801      	ldr	r0, [pc, #4]	@ (800bd3c <__sfp_lock_acquire+0x8>)
 800bd36:	f000 b910 	b.w	800bf5a <__retarget_lock_acquire_recursive>
 800bd3a:	bf00      	nop
 800bd3c:	2000191d 	.word	0x2000191d

0800bd40 <__sfp_lock_release>:
 800bd40:	4801      	ldr	r0, [pc, #4]	@ (800bd48 <__sfp_lock_release+0x8>)
 800bd42:	f000 b90b 	b.w	800bf5c <__retarget_lock_release_recursive>
 800bd46:	bf00      	nop
 800bd48:	2000191d 	.word	0x2000191d

0800bd4c <__sinit>:
 800bd4c:	b510      	push	{r4, lr}
 800bd4e:	4604      	mov	r4, r0
 800bd50:	f7ff fff0 	bl	800bd34 <__sfp_lock_acquire>
 800bd54:	6a23      	ldr	r3, [r4, #32]
 800bd56:	b11b      	cbz	r3, 800bd60 <__sinit+0x14>
 800bd58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd5c:	f7ff bff0 	b.w	800bd40 <__sfp_lock_release>
 800bd60:	4b04      	ldr	r3, [pc, #16]	@ (800bd74 <__sinit+0x28>)
 800bd62:	6223      	str	r3, [r4, #32]
 800bd64:	4b04      	ldr	r3, [pc, #16]	@ (800bd78 <__sinit+0x2c>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d1f5      	bne.n	800bd58 <__sinit+0xc>
 800bd6c:	f7ff ffc4 	bl	800bcf8 <global_stdio_init.part.0>
 800bd70:	e7f2      	b.n	800bd58 <__sinit+0xc>
 800bd72:	bf00      	nop
 800bd74:	0800bcb9 	.word	0x0800bcb9
 800bd78:	20001914 	.word	0x20001914

0800bd7c <_fwalk_sglue>:
 800bd7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd80:	4607      	mov	r7, r0
 800bd82:	4688      	mov	r8, r1
 800bd84:	4614      	mov	r4, r2
 800bd86:	2600      	movs	r6, #0
 800bd88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd8c:	f1b9 0901 	subs.w	r9, r9, #1
 800bd90:	d505      	bpl.n	800bd9e <_fwalk_sglue+0x22>
 800bd92:	6824      	ldr	r4, [r4, #0]
 800bd94:	2c00      	cmp	r4, #0
 800bd96:	d1f7      	bne.n	800bd88 <_fwalk_sglue+0xc>
 800bd98:	4630      	mov	r0, r6
 800bd9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd9e:	89ab      	ldrh	r3, [r5, #12]
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d907      	bls.n	800bdb4 <_fwalk_sglue+0x38>
 800bda4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bda8:	3301      	adds	r3, #1
 800bdaa:	d003      	beq.n	800bdb4 <_fwalk_sglue+0x38>
 800bdac:	4629      	mov	r1, r5
 800bdae:	4638      	mov	r0, r7
 800bdb0:	47c0      	blx	r8
 800bdb2:	4306      	orrs	r6, r0
 800bdb4:	3568      	adds	r5, #104	@ 0x68
 800bdb6:	e7e9      	b.n	800bd8c <_fwalk_sglue+0x10>

0800bdb8 <__sread>:
 800bdb8:	b510      	push	{r4, lr}
 800bdba:	460c      	mov	r4, r1
 800bdbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdc0:	f000 f86c 	bl	800be9c <_read_r>
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	bfab      	itete	ge
 800bdc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bdca:	89a3      	ldrhlt	r3, [r4, #12]
 800bdcc:	181b      	addge	r3, r3, r0
 800bdce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bdd2:	bfac      	ite	ge
 800bdd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bdd6:	81a3      	strhlt	r3, [r4, #12]
 800bdd8:	bd10      	pop	{r4, pc}

0800bdda <__swrite>:
 800bdda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdde:	461f      	mov	r7, r3
 800bde0:	898b      	ldrh	r3, [r1, #12]
 800bde2:	4605      	mov	r5, r0
 800bde4:	05db      	lsls	r3, r3, #23
 800bde6:	460c      	mov	r4, r1
 800bde8:	4616      	mov	r6, r2
 800bdea:	d505      	bpl.n	800bdf8 <__swrite+0x1e>
 800bdec:	2302      	movs	r3, #2
 800bdee:	2200      	movs	r2, #0
 800bdf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdf4:	f000 f840 	bl	800be78 <_lseek_r>
 800bdf8:	89a3      	ldrh	r3, [r4, #12]
 800bdfa:	4632      	mov	r2, r6
 800bdfc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800be00:	81a3      	strh	r3, [r4, #12]
 800be02:	4628      	mov	r0, r5
 800be04:	463b      	mov	r3, r7
 800be06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be0e:	f000 b867 	b.w	800bee0 <_write_r>

0800be12 <__sseek>:
 800be12:	b510      	push	{r4, lr}
 800be14:	460c      	mov	r4, r1
 800be16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be1a:	f000 f82d 	bl	800be78 <_lseek_r>
 800be1e:	1c43      	adds	r3, r0, #1
 800be20:	89a3      	ldrh	r3, [r4, #12]
 800be22:	bf15      	itete	ne
 800be24:	6560      	strne	r0, [r4, #84]	@ 0x54
 800be26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800be2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800be2e:	81a3      	strheq	r3, [r4, #12]
 800be30:	bf18      	it	ne
 800be32:	81a3      	strhne	r3, [r4, #12]
 800be34:	bd10      	pop	{r4, pc}

0800be36 <__sclose>:
 800be36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be3a:	f000 b80d 	b.w	800be58 <_close_r>

0800be3e <memset>:
 800be3e:	4603      	mov	r3, r0
 800be40:	4402      	add	r2, r0
 800be42:	4293      	cmp	r3, r2
 800be44:	d100      	bne.n	800be48 <memset+0xa>
 800be46:	4770      	bx	lr
 800be48:	f803 1b01 	strb.w	r1, [r3], #1
 800be4c:	e7f9      	b.n	800be42 <memset+0x4>
	...

0800be50 <_localeconv_r>:
 800be50:	4800      	ldr	r0, [pc, #0]	@ (800be54 <_localeconv_r+0x4>)
 800be52:	4770      	bx	lr
 800be54:	20000314 	.word	0x20000314

0800be58 <_close_r>:
 800be58:	b538      	push	{r3, r4, r5, lr}
 800be5a:	2300      	movs	r3, #0
 800be5c:	4d05      	ldr	r5, [pc, #20]	@ (800be74 <_close_r+0x1c>)
 800be5e:	4604      	mov	r4, r0
 800be60:	4608      	mov	r0, r1
 800be62:	602b      	str	r3, [r5, #0]
 800be64:	f7f6 ff2b 	bl	8002cbe <_close>
 800be68:	1c43      	adds	r3, r0, #1
 800be6a:	d102      	bne.n	800be72 <_close_r+0x1a>
 800be6c:	682b      	ldr	r3, [r5, #0]
 800be6e:	b103      	cbz	r3, 800be72 <_close_r+0x1a>
 800be70:	6023      	str	r3, [r4, #0]
 800be72:	bd38      	pop	{r3, r4, r5, pc}
 800be74:	20001918 	.word	0x20001918

0800be78 <_lseek_r>:
 800be78:	b538      	push	{r3, r4, r5, lr}
 800be7a:	4604      	mov	r4, r0
 800be7c:	4608      	mov	r0, r1
 800be7e:	4611      	mov	r1, r2
 800be80:	2200      	movs	r2, #0
 800be82:	4d05      	ldr	r5, [pc, #20]	@ (800be98 <_lseek_r+0x20>)
 800be84:	602a      	str	r2, [r5, #0]
 800be86:	461a      	mov	r2, r3
 800be88:	f7f6 ff3d 	bl	8002d06 <_lseek>
 800be8c:	1c43      	adds	r3, r0, #1
 800be8e:	d102      	bne.n	800be96 <_lseek_r+0x1e>
 800be90:	682b      	ldr	r3, [r5, #0]
 800be92:	b103      	cbz	r3, 800be96 <_lseek_r+0x1e>
 800be94:	6023      	str	r3, [r4, #0]
 800be96:	bd38      	pop	{r3, r4, r5, pc}
 800be98:	20001918 	.word	0x20001918

0800be9c <_read_r>:
 800be9c:	b538      	push	{r3, r4, r5, lr}
 800be9e:	4604      	mov	r4, r0
 800bea0:	4608      	mov	r0, r1
 800bea2:	4611      	mov	r1, r2
 800bea4:	2200      	movs	r2, #0
 800bea6:	4d05      	ldr	r5, [pc, #20]	@ (800bebc <_read_r+0x20>)
 800bea8:	602a      	str	r2, [r5, #0]
 800beaa:	461a      	mov	r2, r3
 800beac:	f7f6 fece 	bl	8002c4c <_read>
 800beb0:	1c43      	adds	r3, r0, #1
 800beb2:	d102      	bne.n	800beba <_read_r+0x1e>
 800beb4:	682b      	ldr	r3, [r5, #0]
 800beb6:	b103      	cbz	r3, 800beba <_read_r+0x1e>
 800beb8:	6023      	str	r3, [r4, #0]
 800beba:	bd38      	pop	{r3, r4, r5, pc}
 800bebc:	20001918 	.word	0x20001918

0800bec0 <_sbrk_r>:
 800bec0:	b538      	push	{r3, r4, r5, lr}
 800bec2:	2300      	movs	r3, #0
 800bec4:	4d05      	ldr	r5, [pc, #20]	@ (800bedc <_sbrk_r+0x1c>)
 800bec6:	4604      	mov	r4, r0
 800bec8:	4608      	mov	r0, r1
 800beca:	602b      	str	r3, [r5, #0]
 800becc:	f7f6 ff28 	bl	8002d20 <_sbrk>
 800bed0:	1c43      	adds	r3, r0, #1
 800bed2:	d102      	bne.n	800beda <_sbrk_r+0x1a>
 800bed4:	682b      	ldr	r3, [r5, #0]
 800bed6:	b103      	cbz	r3, 800beda <_sbrk_r+0x1a>
 800bed8:	6023      	str	r3, [r4, #0]
 800beda:	bd38      	pop	{r3, r4, r5, pc}
 800bedc:	20001918 	.word	0x20001918

0800bee0 <_write_r>:
 800bee0:	b538      	push	{r3, r4, r5, lr}
 800bee2:	4604      	mov	r4, r0
 800bee4:	4608      	mov	r0, r1
 800bee6:	4611      	mov	r1, r2
 800bee8:	2200      	movs	r2, #0
 800beea:	4d05      	ldr	r5, [pc, #20]	@ (800bf00 <_write_r+0x20>)
 800beec:	602a      	str	r2, [r5, #0]
 800beee:	461a      	mov	r2, r3
 800bef0:	f7f6 fec9 	bl	8002c86 <_write>
 800bef4:	1c43      	adds	r3, r0, #1
 800bef6:	d102      	bne.n	800befe <_write_r+0x1e>
 800bef8:	682b      	ldr	r3, [r5, #0]
 800befa:	b103      	cbz	r3, 800befe <_write_r+0x1e>
 800befc:	6023      	str	r3, [r4, #0]
 800befe:	bd38      	pop	{r3, r4, r5, pc}
 800bf00:	20001918 	.word	0x20001918

0800bf04 <__errno>:
 800bf04:	4b01      	ldr	r3, [pc, #4]	@ (800bf0c <__errno+0x8>)
 800bf06:	6818      	ldr	r0, [r3, #0]
 800bf08:	4770      	bx	lr
 800bf0a:	bf00      	nop
 800bf0c:	200001d4 	.word	0x200001d4

0800bf10 <__libc_init_array>:
 800bf10:	b570      	push	{r4, r5, r6, lr}
 800bf12:	2600      	movs	r6, #0
 800bf14:	4d0c      	ldr	r5, [pc, #48]	@ (800bf48 <__libc_init_array+0x38>)
 800bf16:	4c0d      	ldr	r4, [pc, #52]	@ (800bf4c <__libc_init_array+0x3c>)
 800bf18:	1b64      	subs	r4, r4, r5
 800bf1a:	10a4      	asrs	r4, r4, #2
 800bf1c:	42a6      	cmp	r6, r4
 800bf1e:	d109      	bne.n	800bf34 <__libc_init_array+0x24>
 800bf20:	f001 ffec 	bl	800defc <_init>
 800bf24:	2600      	movs	r6, #0
 800bf26:	4d0a      	ldr	r5, [pc, #40]	@ (800bf50 <__libc_init_array+0x40>)
 800bf28:	4c0a      	ldr	r4, [pc, #40]	@ (800bf54 <__libc_init_array+0x44>)
 800bf2a:	1b64      	subs	r4, r4, r5
 800bf2c:	10a4      	asrs	r4, r4, #2
 800bf2e:	42a6      	cmp	r6, r4
 800bf30:	d105      	bne.n	800bf3e <__libc_init_array+0x2e>
 800bf32:	bd70      	pop	{r4, r5, r6, pc}
 800bf34:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf38:	4798      	blx	r3
 800bf3a:	3601      	adds	r6, #1
 800bf3c:	e7ee      	b.n	800bf1c <__libc_init_array+0xc>
 800bf3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf42:	4798      	blx	r3
 800bf44:	3601      	adds	r6, #1
 800bf46:	e7f2      	b.n	800bf2e <__libc_init_array+0x1e>
 800bf48:	0800e6f8 	.word	0x0800e6f8
 800bf4c:	0800e6f8 	.word	0x0800e6f8
 800bf50:	0800e6f8 	.word	0x0800e6f8
 800bf54:	0800e6fc 	.word	0x0800e6fc

0800bf58 <__retarget_lock_init_recursive>:
 800bf58:	4770      	bx	lr

0800bf5a <__retarget_lock_acquire_recursive>:
 800bf5a:	4770      	bx	lr

0800bf5c <__retarget_lock_release_recursive>:
 800bf5c:	4770      	bx	lr

0800bf5e <memchr>:
 800bf5e:	4603      	mov	r3, r0
 800bf60:	b510      	push	{r4, lr}
 800bf62:	b2c9      	uxtb	r1, r1
 800bf64:	4402      	add	r2, r0
 800bf66:	4293      	cmp	r3, r2
 800bf68:	4618      	mov	r0, r3
 800bf6a:	d101      	bne.n	800bf70 <memchr+0x12>
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	e003      	b.n	800bf78 <memchr+0x1a>
 800bf70:	7804      	ldrb	r4, [r0, #0]
 800bf72:	3301      	adds	r3, #1
 800bf74:	428c      	cmp	r4, r1
 800bf76:	d1f6      	bne.n	800bf66 <memchr+0x8>
 800bf78:	bd10      	pop	{r4, pc}

0800bf7a <quorem>:
 800bf7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf7e:	6903      	ldr	r3, [r0, #16]
 800bf80:	690c      	ldr	r4, [r1, #16]
 800bf82:	4607      	mov	r7, r0
 800bf84:	42a3      	cmp	r3, r4
 800bf86:	db7e      	blt.n	800c086 <quorem+0x10c>
 800bf88:	3c01      	subs	r4, #1
 800bf8a:	00a3      	lsls	r3, r4, #2
 800bf8c:	f100 0514 	add.w	r5, r0, #20
 800bf90:	f101 0814 	add.w	r8, r1, #20
 800bf94:	9300      	str	r3, [sp, #0]
 800bf96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf9a:	9301      	str	r3, [sp, #4]
 800bf9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bfa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	fbb2 f6f3 	udiv	r6, r2, r3
 800bfac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bfb0:	d32e      	bcc.n	800c010 <quorem+0x96>
 800bfb2:	f04f 0a00 	mov.w	sl, #0
 800bfb6:	46c4      	mov	ip, r8
 800bfb8:	46ae      	mov	lr, r5
 800bfba:	46d3      	mov	fp, sl
 800bfbc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bfc0:	b298      	uxth	r0, r3
 800bfc2:	fb06 a000 	mla	r0, r6, r0, sl
 800bfc6:	0c1b      	lsrs	r3, r3, #16
 800bfc8:	0c02      	lsrs	r2, r0, #16
 800bfca:	fb06 2303 	mla	r3, r6, r3, r2
 800bfce:	f8de 2000 	ldr.w	r2, [lr]
 800bfd2:	b280      	uxth	r0, r0
 800bfd4:	b292      	uxth	r2, r2
 800bfd6:	1a12      	subs	r2, r2, r0
 800bfd8:	445a      	add	r2, fp
 800bfda:	f8de 0000 	ldr.w	r0, [lr]
 800bfde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bfe8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bfec:	b292      	uxth	r2, r2
 800bfee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bff2:	45e1      	cmp	r9, ip
 800bff4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bff8:	f84e 2b04 	str.w	r2, [lr], #4
 800bffc:	d2de      	bcs.n	800bfbc <quorem+0x42>
 800bffe:	9b00      	ldr	r3, [sp, #0]
 800c000:	58eb      	ldr	r3, [r5, r3]
 800c002:	b92b      	cbnz	r3, 800c010 <quorem+0x96>
 800c004:	9b01      	ldr	r3, [sp, #4]
 800c006:	3b04      	subs	r3, #4
 800c008:	429d      	cmp	r5, r3
 800c00a:	461a      	mov	r2, r3
 800c00c:	d32f      	bcc.n	800c06e <quorem+0xf4>
 800c00e:	613c      	str	r4, [r7, #16]
 800c010:	4638      	mov	r0, r7
 800c012:	f001 f8c5 	bl	800d1a0 <__mcmp>
 800c016:	2800      	cmp	r0, #0
 800c018:	db25      	blt.n	800c066 <quorem+0xec>
 800c01a:	4629      	mov	r1, r5
 800c01c:	2000      	movs	r0, #0
 800c01e:	f858 2b04 	ldr.w	r2, [r8], #4
 800c022:	f8d1 c000 	ldr.w	ip, [r1]
 800c026:	fa1f fe82 	uxth.w	lr, r2
 800c02a:	fa1f f38c 	uxth.w	r3, ip
 800c02e:	eba3 030e 	sub.w	r3, r3, lr
 800c032:	4403      	add	r3, r0
 800c034:	0c12      	lsrs	r2, r2, #16
 800c036:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c03a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c03e:	b29b      	uxth	r3, r3
 800c040:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c044:	45c1      	cmp	r9, r8
 800c046:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c04a:	f841 3b04 	str.w	r3, [r1], #4
 800c04e:	d2e6      	bcs.n	800c01e <quorem+0xa4>
 800c050:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c054:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c058:	b922      	cbnz	r2, 800c064 <quorem+0xea>
 800c05a:	3b04      	subs	r3, #4
 800c05c:	429d      	cmp	r5, r3
 800c05e:	461a      	mov	r2, r3
 800c060:	d30b      	bcc.n	800c07a <quorem+0x100>
 800c062:	613c      	str	r4, [r7, #16]
 800c064:	3601      	adds	r6, #1
 800c066:	4630      	mov	r0, r6
 800c068:	b003      	add	sp, #12
 800c06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c06e:	6812      	ldr	r2, [r2, #0]
 800c070:	3b04      	subs	r3, #4
 800c072:	2a00      	cmp	r2, #0
 800c074:	d1cb      	bne.n	800c00e <quorem+0x94>
 800c076:	3c01      	subs	r4, #1
 800c078:	e7c6      	b.n	800c008 <quorem+0x8e>
 800c07a:	6812      	ldr	r2, [r2, #0]
 800c07c:	3b04      	subs	r3, #4
 800c07e:	2a00      	cmp	r2, #0
 800c080:	d1ef      	bne.n	800c062 <quorem+0xe8>
 800c082:	3c01      	subs	r4, #1
 800c084:	e7ea      	b.n	800c05c <quorem+0xe2>
 800c086:	2000      	movs	r0, #0
 800c088:	e7ee      	b.n	800c068 <quorem+0xee>
 800c08a:	0000      	movs	r0, r0
 800c08c:	0000      	movs	r0, r0
	...

0800c090 <_dtoa_r>:
 800c090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c094:	4614      	mov	r4, r2
 800c096:	461d      	mov	r5, r3
 800c098:	69c7      	ldr	r7, [r0, #28]
 800c09a:	b097      	sub	sp, #92	@ 0x5c
 800c09c:	4683      	mov	fp, r0
 800c09e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c0a2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800c0a4:	b97f      	cbnz	r7, 800c0c6 <_dtoa_r+0x36>
 800c0a6:	2010      	movs	r0, #16
 800c0a8:	f7ff f8aa 	bl	800b200 <malloc>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	f8cb 001c 	str.w	r0, [fp, #28]
 800c0b2:	b920      	cbnz	r0, 800c0be <_dtoa_r+0x2e>
 800c0b4:	21ef      	movs	r1, #239	@ 0xef
 800c0b6:	4ba8      	ldr	r3, [pc, #672]	@ (800c358 <_dtoa_r+0x2c8>)
 800c0b8:	48a8      	ldr	r0, [pc, #672]	@ (800c35c <_dtoa_r+0x2cc>)
 800c0ba:	f001 fa2f 	bl	800d51c <__assert_func>
 800c0be:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c0c2:	6007      	str	r7, [r0, #0]
 800c0c4:	60c7      	str	r7, [r0, #12]
 800c0c6:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c0ca:	6819      	ldr	r1, [r3, #0]
 800c0cc:	b159      	cbz	r1, 800c0e6 <_dtoa_r+0x56>
 800c0ce:	685a      	ldr	r2, [r3, #4]
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	4093      	lsls	r3, r2
 800c0d4:	604a      	str	r2, [r1, #4]
 800c0d6:	608b      	str	r3, [r1, #8]
 800c0d8:	4658      	mov	r0, fp
 800c0da:	f000 fe29 	bl	800cd30 <_Bfree>
 800c0de:	2200      	movs	r2, #0
 800c0e0:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c0e4:	601a      	str	r2, [r3, #0]
 800c0e6:	1e2b      	subs	r3, r5, #0
 800c0e8:	bfaf      	iteee	ge
 800c0ea:	2300      	movge	r3, #0
 800c0ec:	2201      	movlt	r2, #1
 800c0ee:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c0f2:	9303      	strlt	r3, [sp, #12]
 800c0f4:	bfa8      	it	ge
 800c0f6:	6033      	strge	r3, [r6, #0]
 800c0f8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c0fc:	4b98      	ldr	r3, [pc, #608]	@ (800c360 <_dtoa_r+0x2d0>)
 800c0fe:	bfb8      	it	lt
 800c100:	6032      	strlt	r2, [r6, #0]
 800c102:	ea33 0308 	bics.w	r3, r3, r8
 800c106:	d112      	bne.n	800c12e <_dtoa_r+0x9e>
 800c108:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c10c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c10e:	6013      	str	r3, [r2, #0]
 800c110:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c114:	4323      	orrs	r3, r4
 800c116:	f000 8550 	beq.w	800cbba <_dtoa_r+0xb2a>
 800c11a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c11c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800c364 <_dtoa_r+0x2d4>
 800c120:	2b00      	cmp	r3, #0
 800c122:	f000 8552 	beq.w	800cbca <_dtoa_r+0xb3a>
 800c126:	f10a 0303 	add.w	r3, sl, #3
 800c12a:	f000 bd4c 	b.w	800cbc6 <_dtoa_r+0xb36>
 800c12e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c132:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c136:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c13a:	2200      	movs	r2, #0
 800c13c:	2300      	movs	r3, #0
 800c13e:	f7f4 fc6f 	bl	8000a20 <__aeabi_dcmpeq>
 800c142:	4607      	mov	r7, r0
 800c144:	b158      	cbz	r0, 800c15e <_dtoa_r+0xce>
 800c146:	2301      	movs	r3, #1
 800c148:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c14a:	6013      	str	r3, [r2, #0]
 800c14c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c14e:	b113      	cbz	r3, 800c156 <_dtoa_r+0xc6>
 800c150:	4b85      	ldr	r3, [pc, #532]	@ (800c368 <_dtoa_r+0x2d8>)
 800c152:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c154:	6013      	str	r3, [r2, #0]
 800c156:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800c36c <_dtoa_r+0x2dc>
 800c15a:	f000 bd36 	b.w	800cbca <_dtoa_r+0xb3a>
 800c15e:	ab14      	add	r3, sp, #80	@ 0x50
 800c160:	9301      	str	r3, [sp, #4]
 800c162:	ab15      	add	r3, sp, #84	@ 0x54
 800c164:	9300      	str	r3, [sp, #0]
 800c166:	4658      	mov	r0, fp
 800c168:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c16c:	f001 f8c8 	bl	800d300 <__d2b>
 800c170:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800c174:	4681      	mov	r9, r0
 800c176:	2e00      	cmp	r6, #0
 800c178:	d077      	beq.n	800c26a <_dtoa_r+0x1da>
 800c17a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c17e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c180:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c184:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c188:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c18c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c190:	9712      	str	r7, [sp, #72]	@ 0x48
 800c192:	4619      	mov	r1, r3
 800c194:	2200      	movs	r2, #0
 800c196:	4b76      	ldr	r3, [pc, #472]	@ (800c370 <_dtoa_r+0x2e0>)
 800c198:	f7f4 f822 	bl	80001e0 <__aeabi_dsub>
 800c19c:	a368      	add	r3, pc, #416	@ (adr r3, 800c340 <_dtoa_r+0x2b0>)
 800c19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a2:	f7f4 f9d5 	bl	8000550 <__aeabi_dmul>
 800c1a6:	a368      	add	r3, pc, #416	@ (adr r3, 800c348 <_dtoa_r+0x2b8>)
 800c1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ac:	f7f4 f81a 	bl	80001e4 <__adddf3>
 800c1b0:	4604      	mov	r4, r0
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	460d      	mov	r5, r1
 800c1b6:	f7f4 f961 	bl	800047c <__aeabi_i2d>
 800c1ba:	a365      	add	r3, pc, #404	@ (adr r3, 800c350 <_dtoa_r+0x2c0>)
 800c1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c0:	f7f4 f9c6 	bl	8000550 <__aeabi_dmul>
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	460b      	mov	r3, r1
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	4629      	mov	r1, r5
 800c1cc:	f7f4 f80a 	bl	80001e4 <__adddf3>
 800c1d0:	4604      	mov	r4, r0
 800c1d2:	460d      	mov	r5, r1
 800c1d4:	f7f4 fc6c 	bl	8000ab0 <__aeabi_d2iz>
 800c1d8:	2200      	movs	r2, #0
 800c1da:	4607      	mov	r7, r0
 800c1dc:	2300      	movs	r3, #0
 800c1de:	4620      	mov	r0, r4
 800c1e0:	4629      	mov	r1, r5
 800c1e2:	f7f4 fc27 	bl	8000a34 <__aeabi_dcmplt>
 800c1e6:	b140      	cbz	r0, 800c1fa <_dtoa_r+0x16a>
 800c1e8:	4638      	mov	r0, r7
 800c1ea:	f7f4 f947 	bl	800047c <__aeabi_i2d>
 800c1ee:	4622      	mov	r2, r4
 800c1f0:	462b      	mov	r3, r5
 800c1f2:	f7f4 fc15 	bl	8000a20 <__aeabi_dcmpeq>
 800c1f6:	b900      	cbnz	r0, 800c1fa <_dtoa_r+0x16a>
 800c1f8:	3f01      	subs	r7, #1
 800c1fa:	2f16      	cmp	r7, #22
 800c1fc:	d853      	bhi.n	800c2a6 <_dtoa_r+0x216>
 800c1fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c202:	4b5c      	ldr	r3, [pc, #368]	@ (800c374 <_dtoa_r+0x2e4>)
 800c204:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20c:	f7f4 fc12 	bl	8000a34 <__aeabi_dcmplt>
 800c210:	2800      	cmp	r0, #0
 800c212:	d04a      	beq.n	800c2aa <_dtoa_r+0x21a>
 800c214:	2300      	movs	r3, #0
 800c216:	3f01      	subs	r7, #1
 800c218:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c21a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c21c:	1b9b      	subs	r3, r3, r6
 800c21e:	1e5a      	subs	r2, r3, #1
 800c220:	bf46      	itte	mi
 800c222:	f1c3 0801 	rsbmi	r8, r3, #1
 800c226:	2300      	movmi	r3, #0
 800c228:	f04f 0800 	movpl.w	r8, #0
 800c22c:	9209      	str	r2, [sp, #36]	@ 0x24
 800c22e:	bf48      	it	mi
 800c230:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800c232:	2f00      	cmp	r7, #0
 800c234:	db3b      	blt.n	800c2ae <_dtoa_r+0x21e>
 800c236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c238:	970e      	str	r7, [sp, #56]	@ 0x38
 800c23a:	443b      	add	r3, r7
 800c23c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c23e:	2300      	movs	r3, #0
 800c240:	930a      	str	r3, [sp, #40]	@ 0x28
 800c242:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c244:	2b09      	cmp	r3, #9
 800c246:	d866      	bhi.n	800c316 <_dtoa_r+0x286>
 800c248:	2b05      	cmp	r3, #5
 800c24a:	bfc4      	itt	gt
 800c24c:	3b04      	subgt	r3, #4
 800c24e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800c250:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c252:	bfc8      	it	gt
 800c254:	2400      	movgt	r4, #0
 800c256:	f1a3 0302 	sub.w	r3, r3, #2
 800c25a:	bfd8      	it	le
 800c25c:	2401      	movle	r4, #1
 800c25e:	2b03      	cmp	r3, #3
 800c260:	d864      	bhi.n	800c32c <_dtoa_r+0x29c>
 800c262:	e8df f003 	tbb	[pc, r3]
 800c266:	382b      	.short	0x382b
 800c268:	5636      	.short	0x5636
 800c26a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c26e:	441e      	add	r6, r3
 800c270:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c274:	2b20      	cmp	r3, #32
 800c276:	bfc1      	itttt	gt
 800c278:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c27c:	fa08 f803 	lslgt.w	r8, r8, r3
 800c280:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c284:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c288:	bfd6      	itet	le
 800c28a:	f1c3 0320 	rsble	r3, r3, #32
 800c28e:	ea48 0003 	orrgt.w	r0, r8, r3
 800c292:	fa04 f003 	lslle.w	r0, r4, r3
 800c296:	f7f4 f8e1 	bl	800045c <__aeabi_ui2d>
 800c29a:	2201      	movs	r2, #1
 800c29c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c2a0:	3e01      	subs	r6, #1
 800c2a2:	9212      	str	r2, [sp, #72]	@ 0x48
 800c2a4:	e775      	b.n	800c192 <_dtoa_r+0x102>
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	e7b6      	b.n	800c218 <_dtoa_r+0x188>
 800c2aa:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c2ac:	e7b5      	b.n	800c21a <_dtoa_r+0x18a>
 800c2ae:	427b      	negs	r3, r7
 800c2b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	eba8 0807 	sub.w	r8, r8, r7
 800c2b8:	930e      	str	r3, [sp, #56]	@ 0x38
 800c2ba:	e7c2      	b.n	800c242 <_dtoa_r+0x1b2>
 800c2bc:	2300      	movs	r3, #0
 800c2be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	dc35      	bgt.n	800c332 <_dtoa_r+0x2a2>
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c2ce:	9221      	str	r2, [sp, #132]	@ 0x84
 800c2d0:	e00b      	b.n	800c2ea <_dtoa_r+0x25a>
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	e7f3      	b.n	800c2be <_dtoa_r+0x22e>
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c2da:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c2dc:	18fb      	adds	r3, r7, r3
 800c2de:	9308      	str	r3, [sp, #32]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	2b01      	cmp	r3, #1
 800c2e4:	9307      	str	r3, [sp, #28]
 800c2e6:	bfb8      	it	lt
 800c2e8:	2301      	movlt	r3, #1
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	2204      	movs	r2, #4
 800c2ee:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c2f2:	f102 0514 	add.w	r5, r2, #20
 800c2f6:	429d      	cmp	r5, r3
 800c2f8:	d91f      	bls.n	800c33a <_dtoa_r+0x2aa>
 800c2fa:	6041      	str	r1, [r0, #4]
 800c2fc:	4658      	mov	r0, fp
 800c2fe:	f000 fcd7 	bl	800ccb0 <_Balloc>
 800c302:	4682      	mov	sl, r0
 800c304:	2800      	cmp	r0, #0
 800c306:	d139      	bne.n	800c37c <_dtoa_r+0x2ec>
 800c308:	4602      	mov	r2, r0
 800c30a:	f240 11af 	movw	r1, #431	@ 0x1af
 800c30e:	4b1a      	ldr	r3, [pc, #104]	@ (800c378 <_dtoa_r+0x2e8>)
 800c310:	e6d2      	b.n	800c0b8 <_dtoa_r+0x28>
 800c312:	2301      	movs	r3, #1
 800c314:	e7e0      	b.n	800c2d8 <_dtoa_r+0x248>
 800c316:	2401      	movs	r4, #1
 800c318:	2300      	movs	r3, #0
 800c31a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c31c:	9320      	str	r3, [sp, #128]	@ 0x80
 800c31e:	f04f 33ff 	mov.w	r3, #4294967295
 800c322:	2200      	movs	r2, #0
 800c324:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c328:	2312      	movs	r3, #18
 800c32a:	e7d0      	b.n	800c2ce <_dtoa_r+0x23e>
 800c32c:	2301      	movs	r3, #1
 800c32e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c330:	e7f5      	b.n	800c31e <_dtoa_r+0x28e>
 800c332:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c334:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c338:	e7d7      	b.n	800c2ea <_dtoa_r+0x25a>
 800c33a:	3101      	adds	r1, #1
 800c33c:	0052      	lsls	r2, r2, #1
 800c33e:	e7d8      	b.n	800c2f2 <_dtoa_r+0x262>
 800c340:	636f4361 	.word	0x636f4361
 800c344:	3fd287a7 	.word	0x3fd287a7
 800c348:	8b60c8b3 	.word	0x8b60c8b3
 800c34c:	3fc68a28 	.word	0x3fc68a28
 800c350:	509f79fb 	.word	0x509f79fb
 800c354:	3fd34413 	.word	0x3fd34413
 800c358:	0800e3bd 	.word	0x0800e3bd
 800c35c:	0800e3d4 	.word	0x0800e3d4
 800c360:	7ff00000 	.word	0x7ff00000
 800c364:	0800e3b9 	.word	0x0800e3b9
 800c368:	0800e38d 	.word	0x0800e38d
 800c36c:	0800e38c 	.word	0x0800e38c
 800c370:	3ff80000 	.word	0x3ff80000
 800c374:	0800e4d0 	.word	0x0800e4d0
 800c378:	0800e42c 	.word	0x0800e42c
 800c37c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c380:	6018      	str	r0, [r3, #0]
 800c382:	9b07      	ldr	r3, [sp, #28]
 800c384:	2b0e      	cmp	r3, #14
 800c386:	f200 80a4 	bhi.w	800c4d2 <_dtoa_r+0x442>
 800c38a:	2c00      	cmp	r4, #0
 800c38c:	f000 80a1 	beq.w	800c4d2 <_dtoa_r+0x442>
 800c390:	2f00      	cmp	r7, #0
 800c392:	dd33      	ble.n	800c3fc <_dtoa_r+0x36c>
 800c394:	4b86      	ldr	r3, [pc, #536]	@ (800c5b0 <_dtoa_r+0x520>)
 800c396:	f007 020f 	and.w	r2, r7, #15
 800c39a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c39e:	05f8      	lsls	r0, r7, #23
 800c3a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c3a4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c3a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c3ac:	d516      	bpl.n	800c3dc <_dtoa_r+0x34c>
 800c3ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c3b2:	4b80      	ldr	r3, [pc, #512]	@ (800c5b4 <_dtoa_r+0x524>)
 800c3b4:	2603      	movs	r6, #3
 800c3b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c3ba:	f7f4 f9f3 	bl	80007a4 <__aeabi_ddiv>
 800c3be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3c2:	f004 040f 	and.w	r4, r4, #15
 800c3c6:	4d7b      	ldr	r5, [pc, #492]	@ (800c5b4 <_dtoa_r+0x524>)
 800c3c8:	b954      	cbnz	r4, 800c3e0 <_dtoa_r+0x350>
 800c3ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3d2:	f7f4 f9e7 	bl	80007a4 <__aeabi_ddiv>
 800c3d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3da:	e028      	b.n	800c42e <_dtoa_r+0x39e>
 800c3dc:	2602      	movs	r6, #2
 800c3de:	e7f2      	b.n	800c3c6 <_dtoa_r+0x336>
 800c3e0:	07e1      	lsls	r1, r4, #31
 800c3e2:	d508      	bpl.n	800c3f6 <_dtoa_r+0x366>
 800c3e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c3ec:	f7f4 f8b0 	bl	8000550 <__aeabi_dmul>
 800c3f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c3f4:	3601      	adds	r6, #1
 800c3f6:	1064      	asrs	r4, r4, #1
 800c3f8:	3508      	adds	r5, #8
 800c3fa:	e7e5      	b.n	800c3c8 <_dtoa_r+0x338>
 800c3fc:	f000 80d2 	beq.w	800c5a4 <_dtoa_r+0x514>
 800c400:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c404:	427c      	negs	r4, r7
 800c406:	4b6a      	ldr	r3, [pc, #424]	@ (800c5b0 <_dtoa_r+0x520>)
 800c408:	f004 020f 	and.w	r2, r4, #15
 800c40c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c414:	f7f4 f89c 	bl	8000550 <__aeabi_dmul>
 800c418:	2602      	movs	r6, #2
 800c41a:	2300      	movs	r3, #0
 800c41c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c420:	4d64      	ldr	r5, [pc, #400]	@ (800c5b4 <_dtoa_r+0x524>)
 800c422:	1124      	asrs	r4, r4, #4
 800c424:	2c00      	cmp	r4, #0
 800c426:	f040 80b2 	bne.w	800c58e <_dtoa_r+0x4fe>
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d1d3      	bne.n	800c3d6 <_dtoa_r+0x346>
 800c42e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c432:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c434:	2b00      	cmp	r3, #0
 800c436:	f000 80b7 	beq.w	800c5a8 <_dtoa_r+0x518>
 800c43a:	2200      	movs	r2, #0
 800c43c:	4620      	mov	r0, r4
 800c43e:	4629      	mov	r1, r5
 800c440:	4b5d      	ldr	r3, [pc, #372]	@ (800c5b8 <_dtoa_r+0x528>)
 800c442:	f7f4 faf7 	bl	8000a34 <__aeabi_dcmplt>
 800c446:	2800      	cmp	r0, #0
 800c448:	f000 80ae 	beq.w	800c5a8 <_dtoa_r+0x518>
 800c44c:	9b07      	ldr	r3, [sp, #28]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	f000 80aa 	beq.w	800c5a8 <_dtoa_r+0x518>
 800c454:	9b08      	ldr	r3, [sp, #32]
 800c456:	2b00      	cmp	r3, #0
 800c458:	dd37      	ble.n	800c4ca <_dtoa_r+0x43a>
 800c45a:	1e7b      	subs	r3, r7, #1
 800c45c:	4620      	mov	r0, r4
 800c45e:	9304      	str	r3, [sp, #16]
 800c460:	2200      	movs	r2, #0
 800c462:	4629      	mov	r1, r5
 800c464:	4b55      	ldr	r3, [pc, #340]	@ (800c5bc <_dtoa_r+0x52c>)
 800c466:	f7f4 f873 	bl	8000550 <__aeabi_dmul>
 800c46a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c46e:	9c08      	ldr	r4, [sp, #32]
 800c470:	3601      	adds	r6, #1
 800c472:	4630      	mov	r0, r6
 800c474:	f7f4 f802 	bl	800047c <__aeabi_i2d>
 800c478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c47c:	f7f4 f868 	bl	8000550 <__aeabi_dmul>
 800c480:	2200      	movs	r2, #0
 800c482:	4b4f      	ldr	r3, [pc, #316]	@ (800c5c0 <_dtoa_r+0x530>)
 800c484:	f7f3 feae 	bl	80001e4 <__adddf3>
 800c488:	4605      	mov	r5, r0
 800c48a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c48e:	2c00      	cmp	r4, #0
 800c490:	f040 809a 	bne.w	800c5c8 <_dtoa_r+0x538>
 800c494:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c498:	2200      	movs	r2, #0
 800c49a:	4b4a      	ldr	r3, [pc, #296]	@ (800c5c4 <_dtoa_r+0x534>)
 800c49c:	f7f3 fea0 	bl	80001e0 <__aeabi_dsub>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c4a8:	462a      	mov	r2, r5
 800c4aa:	4633      	mov	r3, r6
 800c4ac:	f7f4 fae0 	bl	8000a70 <__aeabi_dcmpgt>
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	f040 828e 	bne.w	800c9d2 <_dtoa_r+0x942>
 800c4b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4ba:	462a      	mov	r2, r5
 800c4bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c4c0:	f7f4 fab8 	bl	8000a34 <__aeabi_dcmplt>
 800c4c4:	2800      	cmp	r0, #0
 800c4c6:	f040 8127 	bne.w	800c718 <_dtoa_r+0x688>
 800c4ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c4ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c4d2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f2c0 8163 	blt.w	800c7a0 <_dtoa_r+0x710>
 800c4da:	2f0e      	cmp	r7, #14
 800c4dc:	f300 8160 	bgt.w	800c7a0 <_dtoa_r+0x710>
 800c4e0:	4b33      	ldr	r3, [pc, #204]	@ (800c5b0 <_dtoa_r+0x520>)
 800c4e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c4e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c4ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c4ee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	da03      	bge.n	800c4fc <_dtoa_r+0x46c>
 800c4f4:	9b07      	ldr	r3, [sp, #28]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	f340 8100 	ble.w	800c6fc <_dtoa_r+0x66c>
 800c4fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c500:	4656      	mov	r6, sl
 800c502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c506:	4620      	mov	r0, r4
 800c508:	4629      	mov	r1, r5
 800c50a:	f7f4 f94b 	bl	80007a4 <__aeabi_ddiv>
 800c50e:	f7f4 facf 	bl	8000ab0 <__aeabi_d2iz>
 800c512:	4680      	mov	r8, r0
 800c514:	f7f3 ffb2 	bl	800047c <__aeabi_i2d>
 800c518:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c51c:	f7f4 f818 	bl	8000550 <__aeabi_dmul>
 800c520:	4602      	mov	r2, r0
 800c522:	460b      	mov	r3, r1
 800c524:	4620      	mov	r0, r4
 800c526:	4629      	mov	r1, r5
 800c528:	f7f3 fe5a 	bl	80001e0 <__aeabi_dsub>
 800c52c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c530:	9d07      	ldr	r5, [sp, #28]
 800c532:	f806 4b01 	strb.w	r4, [r6], #1
 800c536:	eba6 040a 	sub.w	r4, r6, sl
 800c53a:	42a5      	cmp	r5, r4
 800c53c:	4602      	mov	r2, r0
 800c53e:	460b      	mov	r3, r1
 800c540:	f040 8116 	bne.w	800c770 <_dtoa_r+0x6e0>
 800c544:	f7f3 fe4e 	bl	80001e4 <__adddf3>
 800c548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c54c:	4604      	mov	r4, r0
 800c54e:	460d      	mov	r5, r1
 800c550:	f7f4 fa8e 	bl	8000a70 <__aeabi_dcmpgt>
 800c554:	2800      	cmp	r0, #0
 800c556:	f040 80f8 	bne.w	800c74a <_dtoa_r+0x6ba>
 800c55a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c55e:	4620      	mov	r0, r4
 800c560:	4629      	mov	r1, r5
 800c562:	f7f4 fa5d 	bl	8000a20 <__aeabi_dcmpeq>
 800c566:	b118      	cbz	r0, 800c570 <_dtoa_r+0x4e0>
 800c568:	f018 0f01 	tst.w	r8, #1
 800c56c:	f040 80ed 	bne.w	800c74a <_dtoa_r+0x6ba>
 800c570:	4649      	mov	r1, r9
 800c572:	4658      	mov	r0, fp
 800c574:	f000 fbdc 	bl	800cd30 <_Bfree>
 800c578:	2300      	movs	r3, #0
 800c57a:	7033      	strb	r3, [r6, #0]
 800c57c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c57e:	3701      	adds	r7, #1
 800c580:	601f      	str	r7, [r3, #0]
 800c582:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c584:	2b00      	cmp	r3, #0
 800c586:	f000 8320 	beq.w	800cbca <_dtoa_r+0xb3a>
 800c58a:	601e      	str	r6, [r3, #0]
 800c58c:	e31d      	b.n	800cbca <_dtoa_r+0xb3a>
 800c58e:	07e2      	lsls	r2, r4, #31
 800c590:	d505      	bpl.n	800c59e <_dtoa_r+0x50e>
 800c592:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c596:	f7f3 ffdb 	bl	8000550 <__aeabi_dmul>
 800c59a:	2301      	movs	r3, #1
 800c59c:	3601      	adds	r6, #1
 800c59e:	1064      	asrs	r4, r4, #1
 800c5a0:	3508      	adds	r5, #8
 800c5a2:	e73f      	b.n	800c424 <_dtoa_r+0x394>
 800c5a4:	2602      	movs	r6, #2
 800c5a6:	e742      	b.n	800c42e <_dtoa_r+0x39e>
 800c5a8:	9c07      	ldr	r4, [sp, #28]
 800c5aa:	9704      	str	r7, [sp, #16]
 800c5ac:	e761      	b.n	800c472 <_dtoa_r+0x3e2>
 800c5ae:	bf00      	nop
 800c5b0:	0800e4d0 	.word	0x0800e4d0
 800c5b4:	0800e4a8 	.word	0x0800e4a8
 800c5b8:	3ff00000 	.word	0x3ff00000
 800c5bc:	40240000 	.word	0x40240000
 800c5c0:	401c0000 	.word	0x401c0000
 800c5c4:	40140000 	.word	0x40140000
 800c5c8:	4b70      	ldr	r3, [pc, #448]	@ (800c78c <_dtoa_r+0x6fc>)
 800c5ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c5cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c5d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c5d4:	4454      	add	r4, sl
 800c5d6:	2900      	cmp	r1, #0
 800c5d8:	d045      	beq.n	800c666 <_dtoa_r+0x5d6>
 800c5da:	2000      	movs	r0, #0
 800c5dc:	496c      	ldr	r1, [pc, #432]	@ (800c790 <_dtoa_r+0x700>)
 800c5de:	f7f4 f8e1 	bl	80007a4 <__aeabi_ddiv>
 800c5e2:	4633      	mov	r3, r6
 800c5e4:	462a      	mov	r2, r5
 800c5e6:	f7f3 fdfb 	bl	80001e0 <__aeabi_dsub>
 800c5ea:	4656      	mov	r6, sl
 800c5ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c5f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5f4:	f7f4 fa5c 	bl	8000ab0 <__aeabi_d2iz>
 800c5f8:	4605      	mov	r5, r0
 800c5fa:	f7f3 ff3f 	bl	800047c <__aeabi_i2d>
 800c5fe:	4602      	mov	r2, r0
 800c600:	460b      	mov	r3, r1
 800c602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c606:	f7f3 fdeb 	bl	80001e0 <__aeabi_dsub>
 800c60a:	4602      	mov	r2, r0
 800c60c:	460b      	mov	r3, r1
 800c60e:	3530      	adds	r5, #48	@ 0x30
 800c610:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c614:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c618:	f806 5b01 	strb.w	r5, [r6], #1
 800c61c:	f7f4 fa0a 	bl	8000a34 <__aeabi_dcmplt>
 800c620:	2800      	cmp	r0, #0
 800c622:	d163      	bne.n	800c6ec <_dtoa_r+0x65c>
 800c624:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c628:	2000      	movs	r0, #0
 800c62a:	495a      	ldr	r1, [pc, #360]	@ (800c794 <_dtoa_r+0x704>)
 800c62c:	f7f3 fdd8 	bl	80001e0 <__aeabi_dsub>
 800c630:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c634:	f7f4 f9fe 	bl	8000a34 <__aeabi_dcmplt>
 800c638:	2800      	cmp	r0, #0
 800c63a:	f040 8087 	bne.w	800c74c <_dtoa_r+0x6bc>
 800c63e:	42a6      	cmp	r6, r4
 800c640:	f43f af43 	beq.w	800c4ca <_dtoa_r+0x43a>
 800c644:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c648:	2200      	movs	r2, #0
 800c64a:	4b53      	ldr	r3, [pc, #332]	@ (800c798 <_dtoa_r+0x708>)
 800c64c:	f7f3 ff80 	bl	8000550 <__aeabi_dmul>
 800c650:	2200      	movs	r2, #0
 800c652:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c65a:	4b4f      	ldr	r3, [pc, #316]	@ (800c798 <_dtoa_r+0x708>)
 800c65c:	f7f3 ff78 	bl	8000550 <__aeabi_dmul>
 800c660:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c664:	e7c4      	b.n	800c5f0 <_dtoa_r+0x560>
 800c666:	4631      	mov	r1, r6
 800c668:	4628      	mov	r0, r5
 800c66a:	f7f3 ff71 	bl	8000550 <__aeabi_dmul>
 800c66e:	4656      	mov	r6, sl
 800c670:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c674:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c67a:	f7f4 fa19 	bl	8000ab0 <__aeabi_d2iz>
 800c67e:	4605      	mov	r5, r0
 800c680:	f7f3 fefc 	bl	800047c <__aeabi_i2d>
 800c684:	4602      	mov	r2, r0
 800c686:	460b      	mov	r3, r1
 800c688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c68c:	f7f3 fda8 	bl	80001e0 <__aeabi_dsub>
 800c690:	4602      	mov	r2, r0
 800c692:	460b      	mov	r3, r1
 800c694:	3530      	adds	r5, #48	@ 0x30
 800c696:	f806 5b01 	strb.w	r5, [r6], #1
 800c69a:	42a6      	cmp	r6, r4
 800c69c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c6a0:	f04f 0200 	mov.w	r2, #0
 800c6a4:	d124      	bne.n	800c6f0 <_dtoa_r+0x660>
 800c6a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c6aa:	4b39      	ldr	r3, [pc, #228]	@ (800c790 <_dtoa_r+0x700>)
 800c6ac:	f7f3 fd9a 	bl	80001e4 <__adddf3>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6b8:	f7f4 f9da 	bl	8000a70 <__aeabi_dcmpgt>
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	d145      	bne.n	800c74c <_dtoa_r+0x6bc>
 800c6c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c6c4:	2000      	movs	r0, #0
 800c6c6:	4932      	ldr	r1, [pc, #200]	@ (800c790 <_dtoa_r+0x700>)
 800c6c8:	f7f3 fd8a 	bl	80001e0 <__aeabi_dsub>
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6d4:	f7f4 f9ae 	bl	8000a34 <__aeabi_dcmplt>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	f43f aef6 	beq.w	800c4ca <_dtoa_r+0x43a>
 800c6de:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c6e0:	1e73      	subs	r3, r6, #1
 800c6e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c6e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c6e8:	2b30      	cmp	r3, #48	@ 0x30
 800c6ea:	d0f8      	beq.n	800c6de <_dtoa_r+0x64e>
 800c6ec:	9f04      	ldr	r7, [sp, #16]
 800c6ee:	e73f      	b.n	800c570 <_dtoa_r+0x4e0>
 800c6f0:	4b29      	ldr	r3, [pc, #164]	@ (800c798 <_dtoa_r+0x708>)
 800c6f2:	f7f3 ff2d 	bl	8000550 <__aeabi_dmul>
 800c6f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6fa:	e7bc      	b.n	800c676 <_dtoa_r+0x5e6>
 800c6fc:	d10c      	bne.n	800c718 <_dtoa_r+0x688>
 800c6fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c702:	2200      	movs	r2, #0
 800c704:	4b25      	ldr	r3, [pc, #148]	@ (800c79c <_dtoa_r+0x70c>)
 800c706:	f7f3 ff23 	bl	8000550 <__aeabi_dmul>
 800c70a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c70e:	f7f4 f9a5 	bl	8000a5c <__aeabi_dcmpge>
 800c712:	2800      	cmp	r0, #0
 800c714:	f000 815b 	beq.w	800c9ce <_dtoa_r+0x93e>
 800c718:	2400      	movs	r4, #0
 800c71a:	4625      	mov	r5, r4
 800c71c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c71e:	4656      	mov	r6, sl
 800c720:	43db      	mvns	r3, r3
 800c722:	9304      	str	r3, [sp, #16]
 800c724:	2700      	movs	r7, #0
 800c726:	4621      	mov	r1, r4
 800c728:	4658      	mov	r0, fp
 800c72a:	f000 fb01 	bl	800cd30 <_Bfree>
 800c72e:	2d00      	cmp	r5, #0
 800c730:	d0dc      	beq.n	800c6ec <_dtoa_r+0x65c>
 800c732:	b12f      	cbz	r7, 800c740 <_dtoa_r+0x6b0>
 800c734:	42af      	cmp	r7, r5
 800c736:	d003      	beq.n	800c740 <_dtoa_r+0x6b0>
 800c738:	4639      	mov	r1, r7
 800c73a:	4658      	mov	r0, fp
 800c73c:	f000 faf8 	bl	800cd30 <_Bfree>
 800c740:	4629      	mov	r1, r5
 800c742:	4658      	mov	r0, fp
 800c744:	f000 faf4 	bl	800cd30 <_Bfree>
 800c748:	e7d0      	b.n	800c6ec <_dtoa_r+0x65c>
 800c74a:	9704      	str	r7, [sp, #16]
 800c74c:	4633      	mov	r3, r6
 800c74e:	461e      	mov	r6, r3
 800c750:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c754:	2a39      	cmp	r2, #57	@ 0x39
 800c756:	d107      	bne.n	800c768 <_dtoa_r+0x6d8>
 800c758:	459a      	cmp	sl, r3
 800c75a:	d1f8      	bne.n	800c74e <_dtoa_r+0x6be>
 800c75c:	9a04      	ldr	r2, [sp, #16]
 800c75e:	3201      	adds	r2, #1
 800c760:	9204      	str	r2, [sp, #16]
 800c762:	2230      	movs	r2, #48	@ 0x30
 800c764:	f88a 2000 	strb.w	r2, [sl]
 800c768:	781a      	ldrb	r2, [r3, #0]
 800c76a:	3201      	adds	r2, #1
 800c76c:	701a      	strb	r2, [r3, #0]
 800c76e:	e7bd      	b.n	800c6ec <_dtoa_r+0x65c>
 800c770:	2200      	movs	r2, #0
 800c772:	4b09      	ldr	r3, [pc, #36]	@ (800c798 <_dtoa_r+0x708>)
 800c774:	f7f3 feec 	bl	8000550 <__aeabi_dmul>
 800c778:	2200      	movs	r2, #0
 800c77a:	2300      	movs	r3, #0
 800c77c:	4604      	mov	r4, r0
 800c77e:	460d      	mov	r5, r1
 800c780:	f7f4 f94e 	bl	8000a20 <__aeabi_dcmpeq>
 800c784:	2800      	cmp	r0, #0
 800c786:	f43f aebc 	beq.w	800c502 <_dtoa_r+0x472>
 800c78a:	e6f1      	b.n	800c570 <_dtoa_r+0x4e0>
 800c78c:	0800e4d0 	.word	0x0800e4d0
 800c790:	3fe00000 	.word	0x3fe00000
 800c794:	3ff00000 	.word	0x3ff00000
 800c798:	40240000 	.word	0x40240000
 800c79c:	40140000 	.word	0x40140000
 800c7a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c7a2:	2a00      	cmp	r2, #0
 800c7a4:	f000 80db 	beq.w	800c95e <_dtoa_r+0x8ce>
 800c7a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c7aa:	2a01      	cmp	r2, #1
 800c7ac:	f300 80bf 	bgt.w	800c92e <_dtoa_r+0x89e>
 800c7b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c7b2:	2a00      	cmp	r2, #0
 800c7b4:	f000 80b7 	beq.w	800c926 <_dtoa_r+0x896>
 800c7b8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c7bc:	4646      	mov	r6, r8
 800c7be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c7c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7c2:	2101      	movs	r1, #1
 800c7c4:	441a      	add	r2, r3
 800c7c6:	4658      	mov	r0, fp
 800c7c8:	4498      	add	r8, r3
 800c7ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800c7cc:	f000 fb64 	bl	800ce98 <__i2b>
 800c7d0:	4605      	mov	r5, r0
 800c7d2:	b15e      	cbz	r6, 800c7ec <_dtoa_r+0x75c>
 800c7d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	dd08      	ble.n	800c7ec <_dtoa_r+0x75c>
 800c7da:	42b3      	cmp	r3, r6
 800c7dc:	bfa8      	it	ge
 800c7de:	4633      	movge	r3, r6
 800c7e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c7e2:	eba8 0803 	sub.w	r8, r8, r3
 800c7e6:	1af6      	subs	r6, r6, r3
 800c7e8:	1ad3      	subs	r3, r2, r3
 800c7ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7ee:	b1f3      	cbz	r3, 800c82e <_dtoa_r+0x79e>
 800c7f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	f000 80b7 	beq.w	800c966 <_dtoa_r+0x8d6>
 800c7f8:	b18c      	cbz	r4, 800c81e <_dtoa_r+0x78e>
 800c7fa:	4629      	mov	r1, r5
 800c7fc:	4622      	mov	r2, r4
 800c7fe:	4658      	mov	r0, fp
 800c800:	f000 fc08 	bl	800d014 <__pow5mult>
 800c804:	464a      	mov	r2, r9
 800c806:	4601      	mov	r1, r0
 800c808:	4605      	mov	r5, r0
 800c80a:	4658      	mov	r0, fp
 800c80c:	f000 fb5a 	bl	800cec4 <__multiply>
 800c810:	4649      	mov	r1, r9
 800c812:	9004      	str	r0, [sp, #16]
 800c814:	4658      	mov	r0, fp
 800c816:	f000 fa8b 	bl	800cd30 <_Bfree>
 800c81a:	9b04      	ldr	r3, [sp, #16]
 800c81c:	4699      	mov	r9, r3
 800c81e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c820:	1b1a      	subs	r2, r3, r4
 800c822:	d004      	beq.n	800c82e <_dtoa_r+0x79e>
 800c824:	4649      	mov	r1, r9
 800c826:	4658      	mov	r0, fp
 800c828:	f000 fbf4 	bl	800d014 <__pow5mult>
 800c82c:	4681      	mov	r9, r0
 800c82e:	2101      	movs	r1, #1
 800c830:	4658      	mov	r0, fp
 800c832:	f000 fb31 	bl	800ce98 <__i2b>
 800c836:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c838:	4604      	mov	r4, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	f000 81c9 	beq.w	800cbd2 <_dtoa_r+0xb42>
 800c840:	461a      	mov	r2, r3
 800c842:	4601      	mov	r1, r0
 800c844:	4658      	mov	r0, fp
 800c846:	f000 fbe5 	bl	800d014 <__pow5mult>
 800c84a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c84c:	4604      	mov	r4, r0
 800c84e:	2b01      	cmp	r3, #1
 800c850:	f300 808f 	bgt.w	800c972 <_dtoa_r+0x8e2>
 800c854:	9b02      	ldr	r3, [sp, #8]
 800c856:	2b00      	cmp	r3, #0
 800c858:	f040 8087 	bne.w	800c96a <_dtoa_r+0x8da>
 800c85c:	9b03      	ldr	r3, [sp, #12]
 800c85e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c862:	2b00      	cmp	r3, #0
 800c864:	f040 8083 	bne.w	800c96e <_dtoa_r+0x8de>
 800c868:	9b03      	ldr	r3, [sp, #12]
 800c86a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c86e:	0d1b      	lsrs	r3, r3, #20
 800c870:	051b      	lsls	r3, r3, #20
 800c872:	b12b      	cbz	r3, 800c880 <_dtoa_r+0x7f0>
 800c874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c876:	f108 0801 	add.w	r8, r8, #1
 800c87a:	3301      	adds	r3, #1
 800c87c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c87e:	2301      	movs	r3, #1
 800c880:	930a      	str	r3, [sp, #40]	@ 0x28
 800c882:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c884:	2b00      	cmp	r3, #0
 800c886:	f000 81aa 	beq.w	800cbde <_dtoa_r+0xb4e>
 800c88a:	6923      	ldr	r3, [r4, #16]
 800c88c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c890:	6918      	ldr	r0, [r3, #16]
 800c892:	f000 fab5 	bl	800ce00 <__hi0bits>
 800c896:	f1c0 0020 	rsb	r0, r0, #32
 800c89a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c89c:	4418      	add	r0, r3
 800c89e:	f010 001f 	ands.w	r0, r0, #31
 800c8a2:	d071      	beq.n	800c988 <_dtoa_r+0x8f8>
 800c8a4:	f1c0 0320 	rsb	r3, r0, #32
 800c8a8:	2b04      	cmp	r3, #4
 800c8aa:	dd65      	ble.n	800c978 <_dtoa_r+0x8e8>
 800c8ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8ae:	f1c0 001c 	rsb	r0, r0, #28
 800c8b2:	4403      	add	r3, r0
 800c8b4:	4480      	add	r8, r0
 800c8b6:	4406      	add	r6, r0
 800c8b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8ba:	f1b8 0f00 	cmp.w	r8, #0
 800c8be:	dd05      	ble.n	800c8cc <_dtoa_r+0x83c>
 800c8c0:	4649      	mov	r1, r9
 800c8c2:	4642      	mov	r2, r8
 800c8c4:	4658      	mov	r0, fp
 800c8c6:	f000 fbff 	bl	800d0c8 <__lshift>
 800c8ca:	4681      	mov	r9, r0
 800c8cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	dd05      	ble.n	800c8de <_dtoa_r+0x84e>
 800c8d2:	4621      	mov	r1, r4
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	4658      	mov	r0, fp
 800c8d8:	f000 fbf6 	bl	800d0c8 <__lshift>
 800c8dc:	4604      	mov	r4, r0
 800c8de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d053      	beq.n	800c98c <_dtoa_r+0x8fc>
 800c8e4:	4621      	mov	r1, r4
 800c8e6:	4648      	mov	r0, r9
 800c8e8:	f000 fc5a 	bl	800d1a0 <__mcmp>
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	da4d      	bge.n	800c98c <_dtoa_r+0x8fc>
 800c8f0:	1e7b      	subs	r3, r7, #1
 800c8f2:	4649      	mov	r1, r9
 800c8f4:	9304      	str	r3, [sp, #16]
 800c8f6:	220a      	movs	r2, #10
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	4658      	mov	r0, fp
 800c8fc:	f000 fa3a 	bl	800cd74 <__multadd>
 800c900:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c902:	4681      	mov	r9, r0
 800c904:	2b00      	cmp	r3, #0
 800c906:	f000 816c 	beq.w	800cbe2 <_dtoa_r+0xb52>
 800c90a:	2300      	movs	r3, #0
 800c90c:	4629      	mov	r1, r5
 800c90e:	220a      	movs	r2, #10
 800c910:	4658      	mov	r0, fp
 800c912:	f000 fa2f 	bl	800cd74 <__multadd>
 800c916:	9b08      	ldr	r3, [sp, #32]
 800c918:	4605      	mov	r5, r0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	dc61      	bgt.n	800c9e2 <_dtoa_r+0x952>
 800c91e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c920:	2b02      	cmp	r3, #2
 800c922:	dc3b      	bgt.n	800c99c <_dtoa_r+0x90c>
 800c924:	e05d      	b.n	800c9e2 <_dtoa_r+0x952>
 800c926:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c928:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c92c:	e746      	b.n	800c7bc <_dtoa_r+0x72c>
 800c92e:	9b07      	ldr	r3, [sp, #28]
 800c930:	1e5c      	subs	r4, r3, #1
 800c932:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c934:	42a3      	cmp	r3, r4
 800c936:	bfbf      	itttt	lt
 800c938:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c93a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800c93c:	1ae3      	sublt	r3, r4, r3
 800c93e:	18d2      	addlt	r2, r2, r3
 800c940:	bfa8      	it	ge
 800c942:	1b1c      	subge	r4, r3, r4
 800c944:	9b07      	ldr	r3, [sp, #28]
 800c946:	bfbe      	ittt	lt
 800c948:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c94a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800c94c:	2400      	movlt	r4, #0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	bfb5      	itete	lt
 800c952:	eba8 0603 	sublt.w	r6, r8, r3
 800c956:	4646      	movge	r6, r8
 800c958:	2300      	movlt	r3, #0
 800c95a:	9b07      	ldrge	r3, [sp, #28]
 800c95c:	e730      	b.n	800c7c0 <_dtoa_r+0x730>
 800c95e:	4646      	mov	r6, r8
 800c960:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c962:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c964:	e735      	b.n	800c7d2 <_dtoa_r+0x742>
 800c966:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c968:	e75c      	b.n	800c824 <_dtoa_r+0x794>
 800c96a:	2300      	movs	r3, #0
 800c96c:	e788      	b.n	800c880 <_dtoa_r+0x7f0>
 800c96e:	9b02      	ldr	r3, [sp, #8]
 800c970:	e786      	b.n	800c880 <_dtoa_r+0x7f0>
 800c972:	2300      	movs	r3, #0
 800c974:	930a      	str	r3, [sp, #40]	@ 0x28
 800c976:	e788      	b.n	800c88a <_dtoa_r+0x7fa>
 800c978:	d09f      	beq.n	800c8ba <_dtoa_r+0x82a>
 800c97a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c97c:	331c      	adds	r3, #28
 800c97e:	441a      	add	r2, r3
 800c980:	4498      	add	r8, r3
 800c982:	441e      	add	r6, r3
 800c984:	9209      	str	r2, [sp, #36]	@ 0x24
 800c986:	e798      	b.n	800c8ba <_dtoa_r+0x82a>
 800c988:	4603      	mov	r3, r0
 800c98a:	e7f6      	b.n	800c97a <_dtoa_r+0x8ea>
 800c98c:	9b07      	ldr	r3, [sp, #28]
 800c98e:	9704      	str	r7, [sp, #16]
 800c990:	2b00      	cmp	r3, #0
 800c992:	dc20      	bgt.n	800c9d6 <_dtoa_r+0x946>
 800c994:	9308      	str	r3, [sp, #32]
 800c996:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c998:	2b02      	cmp	r3, #2
 800c99a:	dd1e      	ble.n	800c9da <_dtoa_r+0x94a>
 800c99c:	9b08      	ldr	r3, [sp, #32]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	f47f aebc 	bne.w	800c71c <_dtoa_r+0x68c>
 800c9a4:	4621      	mov	r1, r4
 800c9a6:	2205      	movs	r2, #5
 800c9a8:	4658      	mov	r0, fp
 800c9aa:	f000 f9e3 	bl	800cd74 <__multadd>
 800c9ae:	4601      	mov	r1, r0
 800c9b0:	4604      	mov	r4, r0
 800c9b2:	4648      	mov	r0, r9
 800c9b4:	f000 fbf4 	bl	800d1a0 <__mcmp>
 800c9b8:	2800      	cmp	r0, #0
 800c9ba:	f77f aeaf 	ble.w	800c71c <_dtoa_r+0x68c>
 800c9be:	2331      	movs	r3, #49	@ 0x31
 800c9c0:	4656      	mov	r6, sl
 800c9c2:	f806 3b01 	strb.w	r3, [r6], #1
 800c9c6:	9b04      	ldr	r3, [sp, #16]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	9304      	str	r3, [sp, #16]
 800c9cc:	e6aa      	b.n	800c724 <_dtoa_r+0x694>
 800c9ce:	9c07      	ldr	r4, [sp, #28]
 800c9d0:	9704      	str	r7, [sp, #16]
 800c9d2:	4625      	mov	r5, r4
 800c9d4:	e7f3      	b.n	800c9be <_dtoa_r+0x92e>
 800c9d6:	9b07      	ldr	r3, [sp, #28]
 800c9d8:	9308      	str	r3, [sp, #32]
 800c9da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	f000 8104 	beq.w	800cbea <_dtoa_r+0xb5a>
 800c9e2:	2e00      	cmp	r6, #0
 800c9e4:	dd05      	ble.n	800c9f2 <_dtoa_r+0x962>
 800c9e6:	4629      	mov	r1, r5
 800c9e8:	4632      	mov	r2, r6
 800c9ea:	4658      	mov	r0, fp
 800c9ec:	f000 fb6c 	bl	800d0c8 <__lshift>
 800c9f0:	4605      	mov	r5, r0
 800c9f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d05a      	beq.n	800caae <_dtoa_r+0xa1e>
 800c9f8:	4658      	mov	r0, fp
 800c9fa:	6869      	ldr	r1, [r5, #4]
 800c9fc:	f000 f958 	bl	800ccb0 <_Balloc>
 800ca00:	4606      	mov	r6, r0
 800ca02:	b928      	cbnz	r0, 800ca10 <_dtoa_r+0x980>
 800ca04:	4602      	mov	r2, r0
 800ca06:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ca0a:	4b83      	ldr	r3, [pc, #524]	@ (800cc18 <_dtoa_r+0xb88>)
 800ca0c:	f7ff bb54 	b.w	800c0b8 <_dtoa_r+0x28>
 800ca10:	692a      	ldr	r2, [r5, #16]
 800ca12:	f105 010c 	add.w	r1, r5, #12
 800ca16:	3202      	adds	r2, #2
 800ca18:	0092      	lsls	r2, r2, #2
 800ca1a:	300c      	adds	r0, #12
 800ca1c:	f000 fd70 	bl	800d500 <memcpy>
 800ca20:	2201      	movs	r2, #1
 800ca22:	4631      	mov	r1, r6
 800ca24:	4658      	mov	r0, fp
 800ca26:	f000 fb4f 	bl	800d0c8 <__lshift>
 800ca2a:	462f      	mov	r7, r5
 800ca2c:	4605      	mov	r5, r0
 800ca2e:	f10a 0301 	add.w	r3, sl, #1
 800ca32:	9307      	str	r3, [sp, #28]
 800ca34:	9b08      	ldr	r3, [sp, #32]
 800ca36:	4453      	add	r3, sl
 800ca38:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca3a:	9b02      	ldr	r3, [sp, #8]
 800ca3c:	f003 0301 	and.w	r3, r3, #1
 800ca40:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca42:	9b07      	ldr	r3, [sp, #28]
 800ca44:	4621      	mov	r1, r4
 800ca46:	3b01      	subs	r3, #1
 800ca48:	4648      	mov	r0, r9
 800ca4a:	9302      	str	r3, [sp, #8]
 800ca4c:	f7ff fa95 	bl	800bf7a <quorem>
 800ca50:	4639      	mov	r1, r7
 800ca52:	9008      	str	r0, [sp, #32]
 800ca54:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ca58:	4648      	mov	r0, r9
 800ca5a:	f000 fba1 	bl	800d1a0 <__mcmp>
 800ca5e:	462a      	mov	r2, r5
 800ca60:	9009      	str	r0, [sp, #36]	@ 0x24
 800ca62:	4621      	mov	r1, r4
 800ca64:	4658      	mov	r0, fp
 800ca66:	f000 fbb7 	bl	800d1d8 <__mdiff>
 800ca6a:	68c2      	ldr	r2, [r0, #12]
 800ca6c:	4606      	mov	r6, r0
 800ca6e:	bb02      	cbnz	r2, 800cab2 <_dtoa_r+0xa22>
 800ca70:	4601      	mov	r1, r0
 800ca72:	4648      	mov	r0, r9
 800ca74:	f000 fb94 	bl	800d1a0 <__mcmp>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	4631      	mov	r1, r6
 800ca7c:	4658      	mov	r0, fp
 800ca7e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ca80:	f000 f956 	bl	800cd30 <_Bfree>
 800ca84:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ca86:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ca88:	9e07      	ldr	r6, [sp, #28]
 800ca8a:	ea43 0102 	orr.w	r1, r3, r2
 800ca8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca90:	4319      	orrs	r1, r3
 800ca92:	d110      	bne.n	800cab6 <_dtoa_r+0xa26>
 800ca94:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ca98:	d029      	beq.n	800caee <_dtoa_r+0xa5e>
 800ca9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	dd02      	ble.n	800caa6 <_dtoa_r+0xa16>
 800caa0:	9b08      	ldr	r3, [sp, #32]
 800caa2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800caa6:	9b02      	ldr	r3, [sp, #8]
 800caa8:	f883 8000 	strb.w	r8, [r3]
 800caac:	e63b      	b.n	800c726 <_dtoa_r+0x696>
 800caae:	4628      	mov	r0, r5
 800cab0:	e7bb      	b.n	800ca2a <_dtoa_r+0x99a>
 800cab2:	2201      	movs	r2, #1
 800cab4:	e7e1      	b.n	800ca7a <_dtoa_r+0x9ea>
 800cab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cab8:	2b00      	cmp	r3, #0
 800caba:	db04      	blt.n	800cac6 <_dtoa_r+0xa36>
 800cabc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800cabe:	430b      	orrs	r3, r1
 800cac0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cac2:	430b      	orrs	r3, r1
 800cac4:	d120      	bne.n	800cb08 <_dtoa_r+0xa78>
 800cac6:	2a00      	cmp	r2, #0
 800cac8:	dded      	ble.n	800caa6 <_dtoa_r+0xa16>
 800caca:	4649      	mov	r1, r9
 800cacc:	2201      	movs	r2, #1
 800cace:	4658      	mov	r0, fp
 800cad0:	f000 fafa 	bl	800d0c8 <__lshift>
 800cad4:	4621      	mov	r1, r4
 800cad6:	4681      	mov	r9, r0
 800cad8:	f000 fb62 	bl	800d1a0 <__mcmp>
 800cadc:	2800      	cmp	r0, #0
 800cade:	dc03      	bgt.n	800cae8 <_dtoa_r+0xa58>
 800cae0:	d1e1      	bne.n	800caa6 <_dtoa_r+0xa16>
 800cae2:	f018 0f01 	tst.w	r8, #1
 800cae6:	d0de      	beq.n	800caa6 <_dtoa_r+0xa16>
 800cae8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800caec:	d1d8      	bne.n	800caa0 <_dtoa_r+0xa10>
 800caee:	2339      	movs	r3, #57	@ 0x39
 800caf0:	9a02      	ldr	r2, [sp, #8]
 800caf2:	7013      	strb	r3, [r2, #0]
 800caf4:	4633      	mov	r3, r6
 800caf6:	461e      	mov	r6, r3
 800caf8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800cafc:	3b01      	subs	r3, #1
 800cafe:	2a39      	cmp	r2, #57	@ 0x39
 800cb00:	d052      	beq.n	800cba8 <_dtoa_r+0xb18>
 800cb02:	3201      	adds	r2, #1
 800cb04:	701a      	strb	r2, [r3, #0]
 800cb06:	e60e      	b.n	800c726 <_dtoa_r+0x696>
 800cb08:	2a00      	cmp	r2, #0
 800cb0a:	dd07      	ble.n	800cb1c <_dtoa_r+0xa8c>
 800cb0c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800cb10:	d0ed      	beq.n	800caee <_dtoa_r+0xa5e>
 800cb12:	9a02      	ldr	r2, [sp, #8]
 800cb14:	f108 0301 	add.w	r3, r8, #1
 800cb18:	7013      	strb	r3, [r2, #0]
 800cb1a:	e604      	b.n	800c726 <_dtoa_r+0x696>
 800cb1c:	9b07      	ldr	r3, [sp, #28]
 800cb1e:	9a07      	ldr	r2, [sp, #28]
 800cb20:	f803 8c01 	strb.w	r8, [r3, #-1]
 800cb24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d028      	beq.n	800cb7c <_dtoa_r+0xaec>
 800cb2a:	4649      	mov	r1, r9
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	220a      	movs	r2, #10
 800cb30:	4658      	mov	r0, fp
 800cb32:	f000 f91f 	bl	800cd74 <__multadd>
 800cb36:	42af      	cmp	r7, r5
 800cb38:	4681      	mov	r9, r0
 800cb3a:	f04f 0300 	mov.w	r3, #0
 800cb3e:	f04f 020a 	mov.w	r2, #10
 800cb42:	4639      	mov	r1, r7
 800cb44:	4658      	mov	r0, fp
 800cb46:	d107      	bne.n	800cb58 <_dtoa_r+0xac8>
 800cb48:	f000 f914 	bl	800cd74 <__multadd>
 800cb4c:	4607      	mov	r7, r0
 800cb4e:	4605      	mov	r5, r0
 800cb50:	9b07      	ldr	r3, [sp, #28]
 800cb52:	3301      	adds	r3, #1
 800cb54:	9307      	str	r3, [sp, #28]
 800cb56:	e774      	b.n	800ca42 <_dtoa_r+0x9b2>
 800cb58:	f000 f90c 	bl	800cd74 <__multadd>
 800cb5c:	4629      	mov	r1, r5
 800cb5e:	4607      	mov	r7, r0
 800cb60:	2300      	movs	r3, #0
 800cb62:	220a      	movs	r2, #10
 800cb64:	4658      	mov	r0, fp
 800cb66:	f000 f905 	bl	800cd74 <__multadd>
 800cb6a:	4605      	mov	r5, r0
 800cb6c:	e7f0      	b.n	800cb50 <_dtoa_r+0xac0>
 800cb6e:	9b08      	ldr	r3, [sp, #32]
 800cb70:	2700      	movs	r7, #0
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	bfcc      	ite	gt
 800cb76:	461e      	movgt	r6, r3
 800cb78:	2601      	movle	r6, #1
 800cb7a:	4456      	add	r6, sl
 800cb7c:	4649      	mov	r1, r9
 800cb7e:	2201      	movs	r2, #1
 800cb80:	4658      	mov	r0, fp
 800cb82:	f000 faa1 	bl	800d0c8 <__lshift>
 800cb86:	4621      	mov	r1, r4
 800cb88:	4681      	mov	r9, r0
 800cb8a:	f000 fb09 	bl	800d1a0 <__mcmp>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	dcb0      	bgt.n	800caf4 <_dtoa_r+0xa64>
 800cb92:	d102      	bne.n	800cb9a <_dtoa_r+0xb0a>
 800cb94:	f018 0f01 	tst.w	r8, #1
 800cb98:	d1ac      	bne.n	800caf4 <_dtoa_r+0xa64>
 800cb9a:	4633      	mov	r3, r6
 800cb9c:	461e      	mov	r6, r3
 800cb9e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cba2:	2a30      	cmp	r2, #48	@ 0x30
 800cba4:	d0fa      	beq.n	800cb9c <_dtoa_r+0xb0c>
 800cba6:	e5be      	b.n	800c726 <_dtoa_r+0x696>
 800cba8:	459a      	cmp	sl, r3
 800cbaa:	d1a4      	bne.n	800caf6 <_dtoa_r+0xa66>
 800cbac:	9b04      	ldr	r3, [sp, #16]
 800cbae:	3301      	adds	r3, #1
 800cbb0:	9304      	str	r3, [sp, #16]
 800cbb2:	2331      	movs	r3, #49	@ 0x31
 800cbb4:	f88a 3000 	strb.w	r3, [sl]
 800cbb8:	e5b5      	b.n	800c726 <_dtoa_r+0x696>
 800cbba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800cbbc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800cc1c <_dtoa_r+0xb8c>
 800cbc0:	b11b      	cbz	r3, 800cbca <_dtoa_r+0xb3a>
 800cbc2:	f10a 0308 	add.w	r3, sl, #8
 800cbc6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800cbc8:	6013      	str	r3, [r2, #0]
 800cbca:	4650      	mov	r0, sl
 800cbcc:	b017      	add	sp, #92	@ 0x5c
 800cbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	f77f ae3d 	ble.w	800c854 <_dtoa_r+0x7c4>
 800cbda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbdc:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbde:	2001      	movs	r0, #1
 800cbe0:	e65b      	b.n	800c89a <_dtoa_r+0x80a>
 800cbe2:	9b08      	ldr	r3, [sp, #32]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	f77f aed6 	ble.w	800c996 <_dtoa_r+0x906>
 800cbea:	4656      	mov	r6, sl
 800cbec:	4621      	mov	r1, r4
 800cbee:	4648      	mov	r0, r9
 800cbf0:	f7ff f9c3 	bl	800bf7a <quorem>
 800cbf4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cbf8:	9b08      	ldr	r3, [sp, #32]
 800cbfa:	f806 8b01 	strb.w	r8, [r6], #1
 800cbfe:	eba6 020a 	sub.w	r2, r6, sl
 800cc02:	4293      	cmp	r3, r2
 800cc04:	ddb3      	ble.n	800cb6e <_dtoa_r+0xade>
 800cc06:	4649      	mov	r1, r9
 800cc08:	2300      	movs	r3, #0
 800cc0a:	220a      	movs	r2, #10
 800cc0c:	4658      	mov	r0, fp
 800cc0e:	f000 f8b1 	bl	800cd74 <__multadd>
 800cc12:	4681      	mov	r9, r0
 800cc14:	e7ea      	b.n	800cbec <_dtoa_r+0xb5c>
 800cc16:	bf00      	nop
 800cc18:	0800e42c 	.word	0x0800e42c
 800cc1c:	0800e3b0 	.word	0x0800e3b0

0800cc20 <_free_r>:
 800cc20:	b538      	push	{r3, r4, r5, lr}
 800cc22:	4605      	mov	r5, r0
 800cc24:	2900      	cmp	r1, #0
 800cc26:	d040      	beq.n	800ccaa <_free_r+0x8a>
 800cc28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc2c:	1f0c      	subs	r4, r1, #4
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	bfb8      	it	lt
 800cc32:	18e4      	addlt	r4, r4, r3
 800cc34:	f7fe fb96 	bl	800b364 <__malloc_lock>
 800cc38:	4a1c      	ldr	r2, [pc, #112]	@ (800ccac <_free_r+0x8c>)
 800cc3a:	6813      	ldr	r3, [r2, #0]
 800cc3c:	b933      	cbnz	r3, 800cc4c <_free_r+0x2c>
 800cc3e:	6063      	str	r3, [r4, #4]
 800cc40:	6014      	str	r4, [r2, #0]
 800cc42:	4628      	mov	r0, r5
 800cc44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc48:	f7fe bb92 	b.w	800b370 <__malloc_unlock>
 800cc4c:	42a3      	cmp	r3, r4
 800cc4e:	d908      	bls.n	800cc62 <_free_r+0x42>
 800cc50:	6820      	ldr	r0, [r4, #0]
 800cc52:	1821      	adds	r1, r4, r0
 800cc54:	428b      	cmp	r3, r1
 800cc56:	bf01      	itttt	eq
 800cc58:	6819      	ldreq	r1, [r3, #0]
 800cc5a:	685b      	ldreq	r3, [r3, #4]
 800cc5c:	1809      	addeq	r1, r1, r0
 800cc5e:	6021      	streq	r1, [r4, #0]
 800cc60:	e7ed      	b.n	800cc3e <_free_r+0x1e>
 800cc62:	461a      	mov	r2, r3
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	b10b      	cbz	r3, 800cc6c <_free_r+0x4c>
 800cc68:	42a3      	cmp	r3, r4
 800cc6a:	d9fa      	bls.n	800cc62 <_free_r+0x42>
 800cc6c:	6811      	ldr	r1, [r2, #0]
 800cc6e:	1850      	adds	r0, r2, r1
 800cc70:	42a0      	cmp	r0, r4
 800cc72:	d10b      	bne.n	800cc8c <_free_r+0x6c>
 800cc74:	6820      	ldr	r0, [r4, #0]
 800cc76:	4401      	add	r1, r0
 800cc78:	1850      	adds	r0, r2, r1
 800cc7a:	4283      	cmp	r3, r0
 800cc7c:	6011      	str	r1, [r2, #0]
 800cc7e:	d1e0      	bne.n	800cc42 <_free_r+0x22>
 800cc80:	6818      	ldr	r0, [r3, #0]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	4408      	add	r0, r1
 800cc86:	6010      	str	r0, [r2, #0]
 800cc88:	6053      	str	r3, [r2, #4]
 800cc8a:	e7da      	b.n	800cc42 <_free_r+0x22>
 800cc8c:	d902      	bls.n	800cc94 <_free_r+0x74>
 800cc8e:	230c      	movs	r3, #12
 800cc90:	602b      	str	r3, [r5, #0]
 800cc92:	e7d6      	b.n	800cc42 <_free_r+0x22>
 800cc94:	6820      	ldr	r0, [r4, #0]
 800cc96:	1821      	adds	r1, r4, r0
 800cc98:	428b      	cmp	r3, r1
 800cc9a:	bf01      	itttt	eq
 800cc9c:	6819      	ldreq	r1, [r3, #0]
 800cc9e:	685b      	ldreq	r3, [r3, #4]
 800cca0:	1809      	addeq	r1, r1, r0
 800cca2:	6021      	streq	r1, [r4, #0]
 800cca4:	6063      	str	r3, [r4, #4]
 800cca6:	6054      	str	r4, [r2, #4]
 800cca8:	e7cb      	b.n	800cc42 <_free_r+0x22>
 800ccaa:	bd38      	pop	{r3, r4, r5, pc}
 800ccac:	200017d8 	.word	0x200017d8

0800ccb0 <_Balloc>:
 800ccb0:	b570      	push	{r4, r5, r6, lr}
 800ccb2:	69c6      	ldr	r6, [r0, #28]
 800ccb4:	4604      	mov	r4, r0
 800ccb6:	460d      	mov	r5, r1
 800ccb8:	b976      	cbnz	r6, 800ccd8 <_Balloc+0x28>
 800ccba:	2010      	movs	r0, #16
 800ccbc:	f7fe faa0 	bl	800b200 <malloc>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	61e0      	str	r0, [r4, #28]
 800ccc4:	b920      	cbnz	r0, 800ccd0 <_Balloc+0x20>
 800ccc6:	216b      	movs	r1, #107	@ 0x6b
 800ccc8:	4b17      	ldr	r3, [pc, #92]	@ (800cd28 <_Balloc+0x78>)
 800ccca:	4818      	ldr	r0, [pc, #96]	@ (800cd2c <_Balloc+0x7c>)
 800cccc:	f000 fc26 	bl	800d51c <__assert_func>
 800ccd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ccd4:	6006      	str	r6, [r0, #0]
 800ccd6:	60c6      	str	r6, [r0, #12]
 800ccd8:	69e6      	ldr	r6, [r4, #28]
 800ccda:	68f3      	ldr	r3, [r6, #12]
 800ccdc:	b183      	cbz	r3, 800cd00 <_Balloc+0x50>
 800ccde:	69e3      	ldr	r3, [r4, #28]
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cce6:	b9b8      	cbnz	r0, 800cd18 <_Balloc+0x68>
 800cce8:	2101      	movs	r1, #1
 800ccea:	fa01 f605 	lsl.w	r6, r1, r5
 800ccee:	1d72      	adds	r2, r6, #5
 800ccf0:	4620      	mov	r0, r4
 800ccf2:	0092      	lsls	r2, r2, #2
 800ccf4:	f000 fc30 	bl	800d558 <_calloc_r>
 800ccf8:	b160      	cbz	r0, 800cd14 <_Balloc+0x64>
 800ccfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ccfe:	e00e      	b.n	800cd1e <_Balloc+0x6e>
 800cd00:	2221      	movs	r2, #33	@ 0x21
 800cd02:	2104      	movs	r1, #4
 800cd04:	4620      	mov	r0, r4
 800cd06:	f000 fc27 	bl	800d558 <_calloc_r>
 800cd0a:	69e3      	ldr	r3, [r4, #28]
 800cd0c:	60f0      	str	r0, [r6, #12]
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d1e4      	bne.n	800ccde <_Balloc+0x2e>
 800cd14:	2000      	movs	r0, #0
 800cd16:	bd70      	pop	{r4, r5, r6, pc}
 800cd18:	6802      	ldr	r2, [r0, #0]
 800cd1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cd1e:	2300      	movs	r3, #0
 800cd20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd24:	e7f7      	b.n	800cd16 <_Balloc+0x66>
 800cd26:	bf00      	nop
 800cd28:	0800e3bd 	.word	0x0800e3bd
 800cd2c:	0800e43d 	.word	0x0800e43d

0800cd30 <_Bfree>:
 800cd30:	b570      	push	{r4, r5, r6, lr}
 800cd32:	69c6      	ldr	r6, [r0, #28]
 800cd34:	4605      	mov	r5, r0
 800cd36:	460c      	mov	r4, r1
 800cd38:	b976      	cbnz	r6, 800cd58 <_Bfree+0x28>
 800cd3a:	2010      	movs	r0, #16
 800cd3c:	f7fe fa60 	bl	800b200 <malloc>
 800cd40:	4602      	mov	r2, r0
 800cd42:	61e8      	str	r0, [r5, #28]
 800cd44:	b920      	cbnz	r0, 800cd50 <_Bfree+0x20>
 800cd46:	218f      	movs	r1, #143	@ 0x8f
 800cd48:	4b08      	ldr	r3, [pc, #32]	@ (800cd6c <_Bfree+0x3c>)
 800cd4a:	4809      	ldr	r0, [pc, #36]	@ (800cd70 <_Bfree+0x40>)
 800cd4c:	f000 fbe6 	bl	800d51c <__assert_func>
 800cd50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd54:	6006      	str	r6, [r0, #0]
 800cd56:	60c6      	str	r6, [r0, #12]
 800cd58:	b13c      	cbz	r4, 800cd6a <_Bfree+0x3a>
 800cd5a:	69eb      	ldr	r3, [r5, #28]
 800cd5c:	6862      	ldr	r2, [r4, #4]
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd64:	6021      	str	r1, [r4, #0]
 800cd66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd6a:	bd70      	pop	{r4, r5, r6, pc}
 800cd6c:	0800e3bd 	.word	0x0800e3bd
 800cd70:	0800e43d 	.word	0x0800e43d

0800cd74 <__multadd>:
 800cd74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd78:	4607      	mov	r7, r0
 800cd7a:	460c      	mov	r4, r1
 800cd7c:	461e      	mov	r6, r3
 800cd7e:	2000      	movs	r0, #0
 800cd80:	690d      	ldr	r5, [r1, #16]
 800cd82:	f101 0c14 	add.w	ip, r1, #20
 800cd86:	f8dc 3000 	ldr.w	r3, [ip]
 800cd8a:	3001      	adds	r0, #1
 800cd8c:	b299      	uxth	r1, r3
 800cd8e:	fb02 6101 	mla	r1, r2, r1, r6
 800cd92:	0c1e      	lsrs	r6, r3, #16
 800cd94:	0c0b      	lsrs	r3, r1, #16
 800cd96:	fb02 3306 	mla	r3, r2, r6, r3
 800cd9a:	b289      	uxth	r1, r1
 800cd9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cda0:	4285      	cmp	r5, r0
 800cda2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cda6:	f84c 1b04 	str.w	r1, [ip], #4
 800cdaa:	dcec      	bgt.n	800cd86 <__multadd+0x12>
 800cdac:	b30e      	cbz	r6, 800cdf2 <__multadd+0x7e>
 800cdae:	68a3      	ldr	r3, [r4, #8]
 800cdb0:	42ab      	cmp	r3, r5
 800cdb2:	dc19      	bgt.n	800cde8 <__multadd+0x74>
 800cdb4:	6861      	ldr	r1, [r4, #4]
 800cdb6:	4638      	mov	r0, r7
 800cdb8:	3101      	adds	r1, #1
 800cdba:	f7ff ff79 	bl	800ccb0 <_Balloc>
 800cdbe:	4680      	mov	r8, r0
 800cdc0:	b928      	cbnz	r0, 800cdce <__multadd+0x5a>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	21ba      	movs	r1, #186	@ 0xba
 800cdc6:	4b0c      	ldr	r3, [pc, #48]	@ (800cdf8 <__multadd+0x84>)
 800cdc8:	480c      	ldr	r0, [pc, #48]	@ (800cdfc <__multadd+0x88>)
 800cdca:	f000 fba7 	bl	800d51c <__assert_func>
 800cdce:	6922      	ldr	r2, [r4, #16]
 800cdd0:	f104 010c 	add.w	r1, r4, #12
 800cdd4:	3202      	adds	r2, #2
 800cdd6:	0092      	lsls	r2, r2, #2
 800cdd8:	300c      	adds	r0, #12
 800cdda:	f000 fb91 	bl	800d500 <memcpy>
 800cdde:	4621      	mov	r1, r4
 800cde0:	4638      	mov	r0, r7
 800cde2:	f7ff ffa5 	bl	800cd30 <_Bfree>
 800cde6:	4644      	mov	r4, r8
 800cde8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cdec:	3501      	adds	r5, #1
 800cdee:	615e      	str	r6, [r3, #20]
 800cdf0:	6125      	str	r5, [r4, #16]
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdf8:	0800e42c 	.word	0x0800e42c
 800cdfc:	0800e43d 	.word	0x0800e43d

0800ce00 <__hi0bits>:
 800ce00:	4603      	mov	r3, r0
 800ce02:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ce06:	bf3a      	itte	cc
 800ce08:	0403      	lslcc	r3, r0, #16
 800ce0a:	2010      	movcc	r0, #16
 800ce0c:	2000      	movcs	r0, #0
 800ce0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ce12:	bf3c      	itt	cc
 800ce14:	021b      	lslcc	r3, r3, #8
 800ce16:	3008      	addcc	r0, #8
 800ce18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce1c:	bf3c      	itt	cc
 800ce1e:	011b      	lslcc	r3, r3, #4
 800ce20:	3004      	addcc	r0, #4
 800ce22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce26:	bf3c      	itt	cc
 800ce28:	009b      	lslcc	r3, r3, #2
 800ce2a:	3002      	addcc	r0, #2
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	db05      	blt.n	800ce3c <__hi0bits+0x3c>
 800ce30:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ce34:	f100 0001 	add.w	r0, r0, #1
 800ce38:	bf08      	it	eq
 800ce3a:	2020      	moveq	r0, #32
 800ce3c:	4770      	bx	lr

0800ce3e <__lo0bits>:
 800ce3e:	6803      	ldr	r3, [r0, #0]
 800ce40:	4602      	mov	r2, r0
 800ce42:	f013 0007 	ands.w	r0, r3, #7
 800ce46:	d00b      	beq.n	800ce60 <__lo0bits+0x22>
 800ce48:	07d9      	lsls	r1, r3, #31
 800ce4a:	d421      	bmi.n	800ce90 <__lo0bits+0x52>
 800ce4c:	0798      	lsls	r0, r3, #30
 800ce4e:	bf49      	itett	mi
 800ce50:	085b      	lsrmi	r3, r3, #1
 800ce52:	089b      	lsrpl	r3, r3, #2
 800ce54:	2001      	movmi	r0, #1
 800ce56:	6013      	strmi	r3, [r2, #0]
 800ce58:	bf5c      	itt	pl
 800ce5a:	2002      	movpl	r0, #2
 800ce5c:	6013      	strpl	r3, [r2, #0]
 800ce5e:	4770      	bx	lr
 800ce60:	b299      	uxth	r1, r3
 800ce62:	b909      	cbnz	r1, 800ce68 <__lo0bits+0x2a>
 800ce64:	2010      	movs	r0, #16
 800ce66:	0c1b      	lsrs	r3, r3, #16
 800ce68:	b2d9      	uxtb	r1, r3
 800ce6a:	b909      	cbnz	r1, 800ce70 <__lo0bits+0x32>
 800ce6c:	3008      	adds	r0, #8
 800ce6e:	0a1b      	lsrs	r3, r3, #8
 800ce70:	0719      	lsls	r1, r3, #28
 800ce72:	bf04      	itt	eq
 800ce74:	091b      	lsreq	r3, r3, #4
 800ce76:	3004      	addeq	r0, #4
 800ce78:	0799      	lsls	r1, r3, #30
 800ce7a:	bf04      	itt	eq
 800ce7c:	089b      	lsreq	r3, r3, #2
 800ce7e:	3002      	addeq	r0, #2
 800ce80:	07d9      	lsls	r1, r3, #31
 800ce82:	d403      	bmi.n	800ce8c <__lo0bits+0x4e>
 800ce84:	085b      	lsrs	r3, r3, #1
 800ce86:	f100 0001 	add.w	r0, r0, #1
 800ce8a:	d003      	beq.n	800ce94 <__lo0bits+0x56>
 800ce8c:	6013      	str	r3, [r2, #0]
 800ce8e:	4770      	bx	lr
 800ce90:	2000      	movs	r0, #0
 800ce92:	4770      	bx	lr
 800ce94:	2020      	movs	r0, #32
 800ce96:	4770      	bx	lr

0800ce98 <__i2b>:
 800ce98:	b510      	push	{r4, lr}
 800ce9a:	460c      	mov	r4, r1
 800ce9c:	2101      	movs	r1, #1
 800ce9e:	f7ff ff07 	bl	800ccb0 <_Balloc>
 800cea2:	4602      	mov	r2, r0
 800cea4:	b928      	cbnz	r0, 800ceb2 <__i2b+0x1a>
 800cea6:	f240 1145 	movw	r1, #325	@ 0x145
 800ceaa:	4b04      	ldr	r3, [pc, #16]	@ (800cebc <__i2b+0x24>)
 800ceac:	4804      	ldr	r0, [pc, #16]	@ (800cec0 <__i2b+0x28>)
 800ceae:	f000 fb35 	bl	800d51c <__assert_func>
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	6144      	str	r4, [r0, #20]
 800ceb6:	6103      	str	r3, [r0, #16]
 800ceb8:	bd10      	pop	{r4, pc}
 800ceba:	bf00      	nop
 800cebc:	0800e42c 	.word	0x0800e42c
 800cec0:	0800e43d 	.word	0x0800e43d

0800cec4 <__multiply>:
 800cec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cec8:	4614      	mov	r4, r2
 800ceca:	690a      	ldr	r2, [r1, #16]
 800cecc:	6923      	ldr	r3, [r4, #16]
 800cece:	460f      	mov	r7, r1
 800ced0:	429a      	cmp	r2, r3
 800ced2:	bfa2      	ittt	ge
 800ced4:	4623      	movge	r3, r4
 800ced6:	460c      	movge	r4, r1
 800ced8:	461f      	movge	r7, r3
 800ceda:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cede:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cee2:	68a3      	ldr	r3, [r4, #8]
 800cee4:	6861      	ldr	r1, [r4, #4]
 800cee6:	eb0a 0609 	add.w	r6, sl, r9
 800ceea:	42b3      	cmp	r3, r6
 800ceec:	b085      	sub	sp, #20
 800ceee:	bfb8      	it	lt
 800cef0:	3101      	addlt	r1, #1
 800cef2:	f7ff fedd 	bl	800ccb0 <_Balloc>
 800cef6:	b930      	cbnz	r0, 800cf06 <__multiply+0x42>
 800cef8:	4602      	mov	r2, r0
 800cefa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cefe:	4b43      	ldr	r3, [pc, #268]	@ (800d00c <__multiply+0x148>)
 800cf00:	4843      	ldr	r0, [pc, #268]	@ (800d010 <__multiply+0x14c>)
 800cf02:	f000 fb0b 	bl	800d51c <__assert_func>
 800cf06:	f100 0514 	add.w	r5, r0, #20
 800cf0a:	462b      	mov	r3, r5
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cf12:	4543      	cmp	r3, r8
 800cf14:	d321      	bcc.n	800cf5a <__multiply+0x96>
 800cf16:	f107 0114 	add.w	r1, r7, #20
 800cf1a:	f104 0214 	add.w	r2, r4, #20
 800cf1e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cf22:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cf26:	9302      	str	r3, [sp, #8]
 800cf28:	1b13      	subs	r3, r2, r4
 800cf2a:	3b15      	subs	r3, #21
 800cf2c:	f023 0303 	bic.w	r3, r3, #3
 800cf30:	3304      	adds	r3, #4
 800cf32:	f104 0715 	add.w	r7, r4, #21
 800cf36:	42ba      	cmp	r2, r7
 800cf38:	bf38      	it	cc
 800cf3a:	2304      	movcc	r3, #4
 800cf3c:	9301      	str	r3, [sp, #4]
 800cf3e:	9b02      	ldr	r3, [sp, #8]
 800cf40:	9103      	str	r1, [sp, #12]
 800cf42:	428b      	cmp	r3, r1
 800cf44:	d80c      	bhi.n	800cf60 <__multiply+0x9c>
 800cf46:	2e00      	cmp	r6, #0
 800cf48:	dd03      	ble.n	800cf52 <__multiply+0x8e>
 800cf4a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d05a      	beq.n	800d008 <__multiply+0x144>
 800cf52:	6106      	str	r6, [r0, #16]
 800cf54:	b005      	add	sp, #20
 800cf56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf5a:	f843 2b04 	str.w	r2, [r3], #4
 800cf5e:	e7d8      	b.n	800cf12 <__multiply+0x4e>
 800cf60:	f8b1 a000 	ldrh.w	sl, [r1]
 800cf64:	f1ba 0f00 	cmp.w	sl, #0
 800cf68:	d023      	beq.n	800cfb2 <__multiply+0xee>
 800cf6a:	46a9      	mov	r9, r5
 800cf6c:	f04f 0c00 	mov.w	ip, #0
 800cf70:	f104 0e14 	add.w	lr, r4, #20
 800cf74:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cf78:	f8d9 3000 	ldr.w	r3, [r9]
 800cf7c:	fa1f fb87 	uxth.w	fp, r7
 800cf80:	b29b      	uxth	r3, r3
 800cf82:	fb0a 330b 	mla	r3, sl, fp, r3
 800cf86:	4463      	add	r3, ip
 800cf88:	f8d9 c000 	ldr.w	ip, [r9]
 800cf8c:	0c3f      	lsrs	r7, r7, #16
 800cf8e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cf92:	fb0a c707 	mla	r7, sl, r7, ip
 800cf96:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cf9a:	b29b      	uxth	r3, r3
 800cf9c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cfa0:	4572      	cmp	r2, lr
 800cfa2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cfa6:	f849 3b04 	str.w	r3, [r9], #4
 800cfaa:	d8e3      	bhi.n	800cf74 <__multiply+0xb0>
 800cfac:	9b01      	ldr	r3, [sp, #4]
 800cfae:	f845 c003 	str.w	ip, [r5, r3]
 800cfb2:	9b03      	ldr	r3, [sp, #12]
 800cfb4:	3104      	adds	r1, #4
 800cfb6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cfba:	f1b9 0f00 	cmp.w	r9, #0
 800cfbe:	d021      	beq.n	800d004 <__multiply+0x140>
 800cfc0:	46ae      	mov	lr, r5
 800cfc2:	f04f 0a00 	mov.w	sl, #0
 800cfc6:	682b      	ldr	r3, [r5, #0]
 800cfc8:	f104 0c14 	add.w	ip, r4, #20
 800cfcc:	f8bc b000 	ldrh.w	fp, [ip]
 800cfd0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	fb09 770b 	mla	r7, r9, fp, r7
 800cfda:	4457      	add	r7, sl
 800cfdc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cfe0:	f84e 3b04 	str.w	r3, [lr], #4
 800cfe4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cfe8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cfec:	f8be 3000 	ldrh.w	r3, [lr]
 800cff0:	4562      	cmp	r2, ip
 800cff2:	fb09 330a 	mla	r3, r9, sl, r3
 800cff6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cffa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cffe:	d8e5      	bhi.n	800cfcc <__multiply+0x108>
 800d000:	9f01      	ldr	r7, [sp, #4]
 800d002:	51eb      	str	r3, [r5, r7]
 800d004:	3504      	adds	r5, #4
 800d006:	e79a      	b.n	800cf3e <__multiply+0x7a>
 800d008:	3e01      	subs	r6, #1
 800d00a:	e79c      	b.n	800cf46 <__multiply+0x82>
 800d00c:	0800e42c 	.word	0x0800e42c
 800d010:	0800e43d 	.word	0x0800e43d

0800d014 <__pow5mult>:
 800d014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d018:	4615      	mov	r5, r2
 800d01a:	f012 0203 	ands.w	r2, r2, #3
 800d01e:	4607      	mov	r7, r0
 800d020:	460e      	mov	r6, r1
 800d022:	d007      	beq.n	800d034 <__pow5mult+0x20>
 800d024:	4c25      	ldr	r4, [pc, #148]	@ (800d0bc <__pow5mult+0xa8>)
 800d026:	3a01      	subs	r2, #1
 800d028:	2300      	movs	r3, #0
 800d02a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d02e:	f7ff fea1 	bl	800cd74 <__multadd>
 800d032:	4606      	mov	r6, r0
 800d034:	10ad      	asrs	r5, r5, #2
 800d036:	d03d      	beq.n	800d0b4 <__pow5mult+0xa0>
 800d038:	69fc      	ldr	r4, [r7, #28]
 800d03a:	b97c      	cbnz	r4, 800d05c <__pow5mult+0x48>
 800d03c:	2010      	movs	r0, #16
 800d03e:	f7fe f8df 	bl	800b200 <malloc>
 800d042:	4602      	mov	r2, r0
 800d044:	61f8      	str	r0, [r7, #28]
 800d046:	b928      	cbnz	r0, 800d054 <__pow5mult+0x40>
 800d048:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d04c:	4b1c      	ldr	r3, [pc, #112]	@ (800d0c0 <__pow5mult+0xac>)
 800d04e:	481d      	ldr	r0, [pc, #116]	@ (800d0c4 <__pow5mult+0xb0>)
 800d050:	f000 fa64 	bl	800d51c <__assert_func>
 800d054:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d058:	6004      	str	r4, [r0, #0]
 800d05a:	60c4      	str	r4, [r0, #12]
 800d05c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d060:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d064:	b94c      	cbnz	r4, 800d07a <__pow5mult+0x66>
 800d066:	f240 2171 	movw	r1, #625	@ 0x271
 800d06a:	4638      	mov	r0, r7
 800d06c:	f7ff ff14 	bl	800ce98 <__i2b>
 800d070:	2300      	movs	r3, #0
 800d072:	4604      	mov	r4, r0
 800d074:	f8c8 0008 	str.w	r0, [r8, #8]
 800d078:	6003      	str	r3, [r0, #0]
 800d07a:	f04f 0900 	mov.w	r9, #0
 800d07e:	07eb      	lsls	r3, r5, #31
 800d080:	d50a      	bpl.n	800d098 <__pow5mult+0x84>
 800d082:	4631      	mov	r1, r6
 800d084:	4622      	mov	r2, r4
 800d086:	4638      	mov	r0, r7
 800d088:	f7ff ff1c 	bl	800cec4 <__multiply>
 800d08c:	4680      	mov	r8, r0
 800d08e:	4631      	mov	r1, r6
 800d090:	4638      	mov	r0, r7
 800d092:	f7ff fe4d 	bl	800cd30 <_Bfree>
 800d096:	4646      	mov	r6, r8
 800d098:	106d      	asrs	r5, r5, #1
 800d09a:	d00b      	beq.n	800d0b4 <__pow5mult+0xa0>
 800d09c:	6820      	ldr	r0, [r4, #0]
 800d09e:	b938      	cbnz	r0, 800d0b0 <__pow5mult+0x9c>
 800d0a0:	4622      	mov	r2, r4
 800d0a2:	4621      	mov	r1, r4
 800d0a4:	4638      	mov	r0, r7
 800d0a6:	f7ff ff0d 	bl	800cec4 <__multiply>
 800d0aa:	6020      	str	r0, [r4, #0]
 800d0ac:	f8c0 9000 	str.w	r9, [r0]
 800d0b0:	4604      	mov	r4, r0
 800d0b2:	e7e4      	b.n	800d07e <__pow5mult+0x6a>
 800d0b4:	4630      	mov	r0, r6
 800d0b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0ba:	bf00      	nop
 800d0bc:	0800e498 	.word	0x0800e498
 800d0c0:	0800e3bd 	.word	0x0800e3bd
 800d0c4:	0800e43d 	.word	0x0800e43d

0800d0c8 <__lshift>:
 800d0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0cc:	460c      	mov	r4, r1
 800d0ce:	4607      	mov	r7, r0
 800d0d0:	4691      	mov	r9, r2
 800d0d2:	6923      	ldr	r3, [r4, #16]
 800d0d4:	6849      	ldr	r1, [r1, #4]
 800d0d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d0da:	68a3      	ldr	r3, [r4, #8]
 800d0dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d0e0:	f108 0601 	add.w	r6, r8, #1
 800d0e4:	42b3      	cmp	r3, r6
 800d0e6:	db0b      	blt.n	800d100 <__lshift+0x38>
 800d0e8:	4638      	mov	r0, r7
 800d0ea:	f7ff fde1 	bl	800ccb0 <_Balloc>
 800d0ee:	4605      	mov	r5, r0
 800d0f0:	b948      	cbnz	r0, 800d106 <__lshift+0x3e>
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d0f8:	4b27      	ldr	r3, [pc, #156]	@ (800d198 <__lshift+0xd0>)
 800d0fa:	4828      	ldr	r0, [pc, #160]	@ (800d19c <__lshift+0xd4>)
 800d0fc:	f000 fa0e 	bl	800d51c <__assert_func>
 800d100:	3101      	adds	r1, #1
 800d102:	005b      	lsls	r3, r3, #1
 800d104:	e7ee      	b.n	800d0e4 <__lshift+0x1c>
 800d106:	2300      	movs	r3, #0
 800d108:	f100 0114 	add.w	r1, r0, #20
 800d10c:	f100 0210 	add.w	r2, r0, #16
 800d110:	4618      	mov	r0, r3
 800d112:	4553      	cmp	r3, sl
 800d114:	db33      	blt.n	800d17e <__lshift+0xb6>
 800d116:	6920      	ldr	r0, [r4, #16]
 800d118:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d11c:	f104 0314 	add.w	r3, r4, #20
 800d120:	f019 091f 	ands.w	r9, r9, #31
 800d124:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d128:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d12c:	d02b      	beq.n	800d186 <__lshift+0xbe>
 800d12e:	468a      	mov	sl, r1
 800d130:	2200      	movs	r2, #0
 800d132:	f1c9 0e20 	rsb	lr, r9, #32
 800d136:	6818      	ldr	r0, [r3, #0]
 800d138:	fa00 f009 	lsl.w	r0, r0, r9
 800d13c:	4310      	orrs	r0, r2
 800d13e:	f84a 0b04 	str.w	r0, [sl], #4
 800d142:	f853 2b04 	ldr.w	r2, [r3], #4
 800d146:	459c      	cmp	ip, r3
 800d148:	fa22 f20e 	lsr.w	r2, r2, lr
 800d14c:	d8f3      	bhi.n	800d136 <__lshift+0x6e>
 800d14e:	ebac 0304 	sub.w	r3, ip, r4
 800d152:	3b15      	subs	r3, #21
 800d154:	f023 0303 	bic.w	r3, r3, #3
 800d158:	3304      	adds	r3, #4
 800d15a:	f104 0015 	add.w	r0, r4, #21
 800d15e:	4584      	cmp	ip, r0
 800d160:	bf38      	it	cc
 800d162:	2304      	movcc	r3, #4
 800d164:	50ca      	str	r2, [r1, r3]
 800d166:	b10a      	cbz	r2, 800d16c <__lshift+0xa4>
 800d168:	f108 0602 	add.w	r6, r8, #2
 800d16c:	3e01      	subs	r6, #1
 800d16e:	4638      	mov	r0, r7
 800d170:	4621      	mov	r1, r4
 800d172:	612e      	str	r6, [r5, #16]
 800d174:	f7ff fddc 	bl	800cd30 <_Bfree>
 800d178:	4628      	mov	r0, r5
 800d17a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d17e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d182:	3301      	adds	r3, #1
 800d184:	e7c5      	b.n	800d112 <__lshift+0x4a>
 800d186:	3904      	subs	r1, #4
 800d188:	f853 2b04 	ldr.w	r2, [r3], #4
 800d18c:	459c      	cmp	ip, r3
 800d18e:	f841 2f04 	str.w	r2, [r1, #4]!
 800d192:	d8f9      	bhi.n	800d188 <__lshift+0xc0>
 800d194:	e7ea      	b.n	800d16c <__lshift+0xa4>
 800d196:	bf00      	nop
 800d198:	0800e42c 	.word	0x0800e42c
 800d19c:	0800e43d 	.word	0x0800e43d

0800d1a0 <__mcmp>:
 800d1a0:	4603      	mov	r3, r0
 800d1a2:	690a      	ldr	r2, [r1, #16]
 800d1a4:	6900      	ldr	r0, [r0, #16]
 800d1a6:	b530      	push	{r4, r5, lr}
 800d1a8:	1a80      	subs	r0, r0, r2
 800d1aa:	d10e      	bne.n	800d1ca <__mcmp+0x2a>
 800d1ac:	3314      	adds	r3, #20
 800d1ae:	3114      	adds	r1, #20
 800d1b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d1b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d1b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d1bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d1c0:	4295      	cmp	r5, r2
 800d1c2:	d003      	beq.n	800d1cc <__mcmp+0x2c>
 800d1c4:	d205      	bcs.n	800d1d2 <__mcmp+0x32>
 800d1c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ca:	bd30      	pop	{r4, r5, pc}
 800d1cc:	42a3      	cmp	r3, r4
 800d1ce:	d3f3      	bcc.n	800d1b8 <__mcmp+0x18>
 800d1d0:	e7fb      	b.n	800d1ca <__mcmp+0x2a>
 800d1d2:	2001      	movs	r0, #1
 800d1d4:	e7f9      	b.n	800d1ca <__mcmp+0x2a>
	...

0800d1d8 <__mdiff>:
 800d1d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1dc:	4689      	mov	r9, r1
 800d1de:	4606      	mov	r6, r0
 800d1e0:	4611      	mov	r1, r2
 800d1e2:	4648      	mov	r0, r9
 800d1e4:	4614      	mov	r4, r2
 800d1e6:	f7ff ffdb 	bl	800d1a0 <__mcmp>
 800d1ea:	1e05      	subs	r5, r0, #0
 800d1ec:	d112      	bne.n	800d214 <__mdiff+0x3c>
 800d1ee:	4629      	mov	r1, r5
 800d1f0:	4630      	mov	r0, r6
 800d1f2:	f7ff fd5d 	bl	800ccb0 <_Balloc>
 800d1f6:	4602      	mov	r2, r0
 800d1f8:	b928      	cbnz	r0, 800d206 <__mdiff+0x2e>
 800d1fa:	f240 2137 	movw	r1, #567	@ 0x237
 800d1fe:	4b3e      	ldr	r3, [pc, #248]	@ (800d2f8 <__mdiff+0x120>)
 800d200:	483e      	ldr	r0, [pc, #248]	@ (800d2fc <__mdiff+0x124>)
 800d202:	f000 f98b 	bl	800d51c <__assert_func>
 800d206:	2301      	movs	r3, #1
 800d208:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d20c:	4610      	mov	r0, r2
 800d20e:	b003      	add	sp, #12
 800d210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d214:	bfbc      	itt	lt
 800d216:	464b      	movlt	r3, r9
 800d218:	46a1      	movlt	r9, r4
 800d21a:	4630      	mov	r0, r6
 800d21c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d220:	bfba      	itte	lt
 800d222:	461c      	movlt	r4, r3
 800d224:	2501      	movlt	r5, #1
 800d226:	2500      	movge	r5, #0
 800d228:	f7ff fd42 	bl	800ccb0 <_Balloc>
 800d22c:	4602      	mov	r2, r0
 800d22e:	b918      	cbnz	r0, 800d238 <__mdiff+0x60>
 800d230:	f240 2145 	movw	r1, #581	@ 0x245
 800d234:	4b30      	ldr	r3, [pc, #192]	@ (800d2f8 <__mdiff+0x120>)
 800d236:	e7e3      	b.n	800d200 <__mdiff+0x28>
 800d238:	f100 0b14 	add.w	fp, r0, #20
 800d23c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d240:	f109 0310 	add.w	r3, r9, #16
 800d244:	60c5      	str	r5, [r0, #12]
 800d246:	f04f 0c00 	mov.w	ip, #0
 800d24a:	f109 0514 	add.w	r5, r9, #20
 800d24e:	46d9      	mov	r9, fp
 800d250:	6926      	ldr	r6, [r4, #16]
 800d252:	f104 0e14 	add.w	lr, r4, #20
 800d256:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d25a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d25e:	9301      	str	r3, [sp, #4]
 800d260:	9b01      	ldr	r3, [sp, #4]
 800d262:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d266:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d26a:	b281      	uxth	r1, r0
 800d26c:	9301      	str	r3, [sp, #4]
 800d26e:	fa1f f38a 	uxth.w	r3, sl
 800d272:	1a5b      	subs	r3, r3, r1
 800d274:	0c00      	lsrs	r0, r0, #16
 800d276:	4463      	add	r3, ip
 800d278:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d27c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d280:	b29b      	uxth	r3, r3
 800d282:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d286:	4576      	cmp	r6, lr
 800d288:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d28c:	f849 3b04 	str.w	r3, [r9], #4
 800d290:	d8e6      	bhi.n	800d260 <__mdiff+0x88>
 800d292:	1b33      	subs	r3, r6, r4
 800d294:	3b15      	subs	r3, #21
 800d296:	f023 0303 	bic.w	r3, r3, #3
 800d29a:	3415      	adds	r4, #21
 800d29c:	3304      	adds	r3, #4
 800d29e:	42a6      	cmp	r6, r4
 800d2a0:	bf38      	it	cc
 800d2a2:	2304      	movcc	r3, #4
 800d2a4:	441d      	add	r5, r3
 800d2a6:	445b      	add	r3, fp
 800d2a8:	461e      	mov	r6, r3
 800d2aa:	462c      	mov	r4, r5
 800d2ac:	4544      	cmp	r4, r8
 800d2ae:	d30e      	bcc.n	800d2ce <__mdiff+0xf6>
 800d2b0:	f108 0103 	add.w	r1, r8, #3
 800d2b4:	1b49      	subs	r1, r1, r5
 800d2b6:	f021 0103 	bic.w	r1, r1, #3
 800d2ba:	3d03      	subs	r5, #3
 800d2bc:	45a8      	cmp	r8, r5
 800d2be:	bf38      	it	cc
 800d2c0:	2100      	movcc	r1, #0
 800d2c2:	440b      	add	r3, r1
 800d2c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d2c8:	b199      	cbz	r1, 800d2f2 <__mdiff+0x11a>
 800d2ca:	6117      	str	r7, [r2, #16]
 800d2cc:	e79e      	b.n	800d20c <__mdiff+0x34>
 800d2ce:	46e6      	mov	lr, ip
 800d2d0:	f854 1b04 	ldr.w	r1, [r4], #4
 800d2d4:	fa1f fc81 	uxth.w	ip, r1
 800d2d8:	44f4      	add	ip, lr
 800d2da:	0c08      	lsrs	r0, r1, #16
 800d2dc:	4471      	add	r1, lr
 800d2de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d2e2:	b289      	uxth	r1, r1
 800d2e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d2e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d2ec:	f846 1b04 	str.w	r1, [r6], #4
 800d2f0:	e7dc      	b.n	800d2ac <__mdiff+0xd4>
 800d2f2:	3f01      	subs	r7, #1
 800d2f4:	e7e6      	b.n	800d2c4 <__mdiff+0xec>
 800d2f6:	bf00      	nop
 800d2f8:	0800e42c 	.word	0x0800e42c
 800d2fc:	0800e43d 	.word	0x0800e43d

0800d300 <__d2b>:
 800d300:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d304:	2101      	movs	r1, #1
 800d306:	4690      	mov	r8, r2
 800d308:	4699      	mov	r9, r3
 800d30a:	9e08      	ldr	r6, [sp, #32]
 800d30c:	f7ff fcd0 	bl	800ccb0 <_Balloc>
 800d310:	4604      	mov	r4, r0
 800d312:	b930      	cbnz	r0, 800d322 <__d2b+0x22>
 800d314:	4602      	mov	r2, r0
 800d316:	f240 310f 	movw	r1, #783	@ 0x30f
 800d31a:	4b23      	ldr	r3, [pc, #140]	@ (800d3a8 <__d2b+0xa8>)
 800d31c:	4823      	ldr	r0, [pc, #140]	@ (800d3ac <__d2b+0xac>)
 800d31e:	f000 f8fd 	bl	800d51c <__assert_func>
 800d322:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d326:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d32a:	b10d      	cbz	r5, 800d330 <__d2b+0x30>
 800d32c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d330:	9301      	str	r3, [sp, #4]
 800d332:	f1b8 0300 	subs.w	r3, r8, #0
 800d336:	d024      	beq.n	800d382 <__d2b+0x82>
 800d338:	4668      	mov	r0, sp
 800d33a:	9300      	str	r3, [sp, #0]
 800d33c:	f7ff fd7f 	bl	800ce3e <__lo0bits>
 800d340:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d344:	b1d8      	cbz	r0, 800d37e <__d2b+0x7e>
 800d346:	f1c0 0320 	rsb	r3, r0, #32
 800d34a:	fa02 f303 	lsl.w	r3, r2, r3
 800d34e:	430b      	orrs	r3, r1
 800d350:	40c2      	lsrs	r2, r0
 800d352:	6163      	str	r3, [r4, #20]
 800d354:	9201      	str	r2, [sp, #4]
 800d356:	9b01      	ldr	r3, [sp, #4]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	bf0c      	ite	eq
 800d35c:	2201      	moveq	r2, #1
 800d35e:	2202      	movne	r2, #2
 800d360:	61a3      	str	r3, [r4, #24]
 800d362:	6122      	str	r2, [r4, #16]
 800d364:	b1ad      	cbz	r5, 800d392 <__d2b+0x92>
 800d366:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d36a:	4405      	add	r5, r0
 800d36c:	6035      	str	r5, [r6, #0]
 800d36e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d374:	6018      	str	r0, [r3, #0]
 800d376:	4620      	mov	r0, r4
 800d378:	b002      	add	sp, #8
 800d37a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d37e:	6161      	str	r1, [r4, #20]
 800d380:	e7e9      	b.n	800d356 <__d2b+0x56>
 800d382:	a801      	add	r0, sp, #4
 800d384:	f7ff fd5b 	bl	800ce3e <__lo0bits>
 800d388:	9b01      	ldr	r3, [sp, #4]
 800d38a:	2201      	movs	r2, #1
 800d38c:	6163      	str	r3, [r4, #20]
 800d38e:	3020      	adds	r0, #32
 800d390:	e7e7      	b.n	800d362 <__d2b+0x62>
 800d392:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d396:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d39a:	6030      	str	r0, [r6, #0]
 800d39c:	6918      	ldr	r0, [r3, #16]
 800d39e:	f7ff fd2f 	bl	800ce00 <__hi0bits>
 800d3a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d3a6:	e7e4      	b.n	800d372 <__d2b+0x72>
 800d3a8:	0800e42c 	.word	0x0800e42c
 800d3ac:	0800e43d 	.word	0x0800e43d

0800d3b0 <__sflush_r>:
 800d3b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b6:	0716      	lsls	r6, r2, #28
 800d3b8:	4605      	mov	r5, r0
 800d3ba:	460c      	mov	r4, r1
 800d3bc:	d454      	bmi.n	800d468 <__sflush_r+0xb8>
 800d3be:	684b      	ldr	r3, [r1, #4]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	dc02      	bgt.n	800d3ca <__sflush_r+0x1a>
 800d3c4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	dd48      	ble.n	800d45c <__sflush_r+0xac>
 800d3ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d3cc:	2e00      	cmp	r6, #0
 800d3ce:	d045      	beq.n	800d45c <__sflush_r+0xac>
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d3d6:	682f      	ldr	r7, [r5, #0]
 800d3d8:	6a21      	ldr	r1, [r4, #32]
 800d3da:	602b      	str	r3, [r5, #0]
 800d3dc:	d030      	beq.n	800d440 <__sflush_r+0x90>
 800d3de:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d3e0:	89a3      	ldrh	r3, [r4, #12]
 800d3e2:	0759      	lsls	r1, r3, #29
 800d3e4:	d505      	bpl.n	800d3f2 <__sflush_r+0x42>
 800d3e6:	6863      	ldr	r3, [r4, #4]
 800d3e8:	1ad2      	subs	r2, r2, r3
 800d3ea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d3ec:	b10b      	cbz	r3, 800d3f2 <__sflush_r+0x42>
 800d3ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d3f0:	1ad2      	subs	r2, r2, r3
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	4628      	mov	r0, r5
 800d3f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d3f8:	6a21      	ldr	r1, [r4, #32]
 800d3fa:	47b0      	blx	r6
 800d3fc:	1c43      	adds	r3, r0, #1
 800d3fe:	89a3      	ldrh	r3, [r4, #12]
 800d400:	d106      	bne.n	800d410 <__sflush_r+0x60>
 800d402:	6829      	ldr	r1, [r5, #0]
 800d404:	291d      	cmp	r1, #29
 800d406:	d82b      	bhi.n	800d460 <__sflush_r+0xb0>
 800d408:	4a28      	ldr	r2, [pc, #160]	@ (800d4ac <__sflush_r+0xfc>)
 800d40a:	410a      	asrs	r2, r1
 800d40c:	07d6      	lsls	r6, r2, #31
 800d40e:	d427      	bmi.n	800d460 <__sflush_r+0xb0>
 800d410:	2200      	movs	r2, #0
 800d412:	6062      	str	r2, [r4, #4]
 800d414:	6922      	ldr	r2, [r4, #16]
 800d416:	04d9      	lsls	r1, r3, #19
 800d418:	6022      	str	r2, [r4, #0]
 800d41a:	d504      	bpl.n	800d426 <__sflush_r+0x76>
 800d41c:	1c42      	adds	r2, r0, #1
 800d41e:	d101      	bne.n	800d424 <__sflush_r+0x74>
 800d420:	682b      	ldr	r3, [r5, #0]
 800d422:	b903      	cbnz	r3, 800d426 <__sflush_r+0x76>
 800d424:	6560      	str	r0, [r4, #84]	@ 0x54
 800d426:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d428:	602f      	str	r7, [r5, #0]
 800d42a:	b1b9      	cbz	r1, 800d45c <__sflush_r+0xac>
 800d42c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d430:	4299      	cmp	r1, r3
 800d432:	d002      	beq.n	800d43a <__sflush_r+0x8a>
 800d434:	4628      	mov	r0, r5
 800d436:	f7ff fbf3 	bl	800cc20 <_free_r>
 800d43a:	2300      	movs	r3, #0
 800d43c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d43e:	e00d      	b.n	800d45c <__sflush_r+0xac>
 800d440:	2301      	movs	r3, #1
 800d442:	4628      	mov	r0, r5
 800d444:	47b0      	blx	r6
 800d446:	4602      	mov	r2, r0
 800d448:	1c50      	adds	r0, r2, #1
 800d44a:	d1c9      	bne.n	800d3e0 <__sflush_r+0x30>
 800d44c:	682b      	ldr	r3, [r5, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d0c6      	beq.n	800d3e0 <__sflush_r+0x30>
 800d452:	2b1d      	cmp	r3, #29
 800d454:	d001      	beq.n	800d45a <__sflush_r+0xaa>
 800d456:	2b16      	cmp	r3, #22
 800d458:	d11d      	bne.n	800d496 <__sflush_r+0xe6>
 800d45a:	602f      	str	r7, [r5, #0]
 800d45c:	2000      	movs	r0, #0
 800d45e:	e021      	b.n	800d4a4 <__sflush_r+0xf4>
 800d460:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d464:	b21b      	sxth	r3, r3
 800d466:	e01a      	b.n	800d49e <__sflush_r+0xee>
 800d468:	690f      	ldr	r7, [r1, #16]
 800d46a:	2f00      	cmp	r7, #0
 800d46c:	d0f6      	beq.n	800d45c <__sflush_r+0xac>
 800d46e:	0793      	lsls	r3, r2, #30
 800d470:	bf18      	it	ne
 800d472:	2300      	movne	r3, #0
 800d474:	680e      	ldr	r6, [r1, #0]
 800d476:	bf08      	it	eq
 800d478:	694b      	ldreq	r3, [r1, #20]
 800d47a:	1bf6      	subs	r6, r6, r7
 800d47c:	600f      	str	r7, [r1, #0]
 800d47e:	608b      	str	r3, [r1, #8]
 800d480:	2e00      	cmp	r6, #0
 800d482:	ddeb      	ble.n	800d45c <__sflush_r+0xac>
 800d484:	4633      	mov	r3, r6
 800d486:	463a      	mov	r2, r7
 800d488:	4628      	mov	r0, r5
 800d48a:	6a21      	ldr	r1, [r4, #32]
 800d48c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d490:	47e0      	blx	ip
 800d492:	2800      	cmp	r0, #0
 800d494:	dc07      	bgt.n	800d4a6 <__sflush_r+0xf6>
 800d496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d49a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d49e:	f04f 30ff 	mov.w	r0, #4294967295
 800d4a2:	81a3      	strh	r3, [r4, #12]
 800d4a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4a6:	4407      	add	r7, r0
 800d4a8:	1a36      	subs	r6, r6, r0
 800d4aa:	e7e9      	b.n	800d480 <__sflush_r+0xd0>
 800d4ac:	dfbffffe 	.word	0xdfbffffe

0800d4b0 <_fflush_r>:
 800d4b0:	b538      	push	{r3, r4, r5, lr}
 800d4b2:	690b      	ldr	r3, [r1, #16]
 800d4b4:	4605      	mov	r5, r0
 800d4b6:	460c      	mov	r4, r1
 800d4b8:	b913      	cbnz	r3, 800d4c0 <_fflush_r+0x10>
 800d4ba:	2500      	movs	r5, #0
 800d4bc:	4628      	mov	r0, r5
 800d4be:	bd38      	pop	{r3, r4, r5, pc}
 800d4c0:	b118      	cbz	r0, 800d4ca <_fflush_r+0x1a>
 800d4c2:	6a03      	ldr	r3, [r0, #32]
 800d4c4:	b90b      	cbnz	r3, 800d4ca <_fflush_r+0x1a>
 800d4c6:	f7fe fc41 	bl	800bd4c <__sinit>
 800d4ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d0f3      	beq.n	800d4ba <_fflush_r+0xa>
 800d4d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d4d4:	07d0      	lsls	r0, r2, #31
 800d4d6:	d404      	bmi.n	800d4e2 <_fflush_r+0x32>
 800d4d8:	0599      	lsls	r1, r3, #22
 800d4da:	d402      	bmi.n	800d4e2 <_fflush_r+0x32>
 800d4dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d4de:	f7fe fd3c 	bl	800bf5a <__retarget_lock_acquire_recursive>
 800d4e2:	4628      	mov	r0, r5
 800d4e4:	4621      	mov	r1, r4
 800d4e6:	f7ff ff63 	bl	800d3b0 <__sflush_r>
 800d4ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d4ec:	4605      	mov	r5, r0
 800d4ee:	07da      	lsls	r2, r3, #31
 800d4f0:	d4e4      	bmi.n	800d4bc <_fflush_r+0xc>
 800d4f2:	89a3      	ldrh	r3, [r4, #12]
 800d4f4:	059b      	lsls	r3, r3, #22
 800d4f6:	d4e1      	bmi.n	800d4bc <_fflush_r+0xc>
 800d4f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d4fa:	f7fe fd2f 	bl	800bf5c <__retarget_lock_release_recursive>
 800d4fe:	e7dd      	b.n	800d4bc <_fflush_r+0xc>

0800d500 <memcpy>:
 800d500:	440a      	add	r2, r1
 800d502:	4291      	cmp	r1, r2
 800d504:	f100 33ff 	add.w	r3, r0, #4294967295
 800d508:	d100      	bne.n	800d50c <memcpy+0xc>
 800d50a:	4770      	bx	lr
 800d50c:	b510      	push	{r4, lr}
 800d50e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d512:	4291      	cmp	r1, r2
 800d514:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d518:	d1f9      	bne.n	800d50e <memcpy+0xe>
 800d51a:	bd10      	pop	{r4, pc}

0800d51c <__assert_func>:
 800d51c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d51e:	4614      	mov	r4, r2
 800d520:	461a      	mov	r2, r3
 800d522:	4b09      	ldr	r3, [pc, #36]	@ (800d548 <__assert_func+0x2c>)
 800d524:	4605      	mov	r5, r0
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	68d8      	ldr	r0, [r3, #12]
 800d52a:	b954      	cbnz	r4, 800d542 <__assert_func+0x26>
 800d52c:	4b07      	ldr	r3, [pc, #28]	@ (800d54c <__assert_func+0x30>)
 800d52e:	461c      	mov	r4, r3
 800d530:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d534:	9100      	str	r1, [sp, #0]
 800d536:	462b      	mov	r3, r5
 800d538:	4905      	ldr	r1, [pc, #20]	@ (800d550 <__assert_func+0x34>)
 800d53a:	f000 f841 	bl	800d5c0 <fiprintf>
 800d53e:	f000 f851 	bl	800d5e4 <abort>
 800d542:	4b04      	ldr	r3, [pc, #16]	@ (800d554 <__assert_func+0x38>)
 800d544:	e7f4      	b.n	800d530 <__assert_func+0x14>
 800d546:	bf00      	nop
 800d548:	200001d4 	.word	0x200001d4
 800d54c:	0800e5dd 	.word	0x0800e5dd
 800d550:	0800e5af 	.word	0x0800e5af
 800d554:	0800e5a2 	.word	0x0800e5a2

0800d558 <_calloc_r>:
 800d558:	b570      	push	{r4, r5, r6, lr}
 800d55a:	fba1 5402 	umull	r5, r4, r1, r2
 800d55e:	b93c      	cbnz	r4, 800d570 <_calloc_r+0x18>
 800d560:	4629      	mov	r1, r5
 800d562:	f7fd fe7f 	bl	800b264 <_malloc_r>
 800d566:	4606      	mov	r6, r0
 800d568:	b928      	cbnz	r0, 800d576 <_calloc_r+0x1e>
 800d56a:	2600      	movs	r6, #0
 800d56c:	4630      	mov	r0, r6
 800d56e:	bd70      	pop	{r4, r5, r6, pc}
 800d570:	220c      	movs	r2, #12
 800d572:	6002      	str	r2, [r0, #0]
 800d574:	e7f9      	b.n	800d56a <_calloc_r+0x12>
 800d576:	462a      	mov	r2, r5
 800d578:	4621      	mov	r1, r4
 800d57a:	f7fe fc60 	bl	800be3e <memset>
 800d57e:	e7f5      	b.n	800d56c <_calloc_r+0x14>

0800d580 <__ascii_mbtowc>:
 800d580:	b082      	sub	sp, #8
 800d582:	b901      	cbnz	r1, 800d586 <__ascii_mbtowc+0x6>
 800d584:	a901      	add	r1, sp, #4
 800d586:	b142      	cbz	r2, 800d59a <__ascii_mbtowc+0x1a>
 800d588:	b14b      	cbz	r3, 800d59e <__ascii_mbtowc+0x1e>
 800d58a:	7813      	ldrb	r3, [r2, #0]
 800d58c:	600b      	str	r3, [r1, #0]
 800d58e:	7812      	ldrb	r2, [r2, #0]
 800d590:	1e10      	subs	r0, r2, #0
 800d592:	bf18      	it	ne
 800d594:	2001      	movne	r0, #1
 800d596:	b002      	add	sp, #8
 800d598:	4770      	bx	lr
 800d59a:	4610      	mov	r0, r2
 800d59c:	e7fb      	b.n	800d596 <__ascii_mbtowc+0x16>
 800d59e:	f06f 0001 	mvn.w	r0, #1
 800d5a2:	e7f8      	b.n	800d596 <__ascii_mbtowc+0x16>

0800d5a4 <__ascii_wctomb>:
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	4608      	mov	r0, r1
 800d5a8:	b141      	cbz	r1, 800d5bc <__ascii_wctomb+0x18>
 800d5aa:	2aff      	cmp	r2, #255	@ 0xff
 800d5ac:	d904      	bls.n	800d5b8 <__ascii_wctomb+0x14>
 800d5ae:	228a      	movs	r2, #138	@ 0x8a
 800d5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b4:	601a      	str	r2, [r3, #0]
 800d5b6:	4770      	bx	lr
 800d5b8:	2001      	movs	r0, #1
 800d5ba:	700a      	strb	r2, [r1, #0]
 800d5bc:	4770      	bx	lr
	...

0800d5c0 <fiprintf>:
 800d5c0:	b40e      	push	{r1, r2, r3}
 800d5c2:	b503      	push	{r0, r1, lr}
 800d5c4:	4601      	mov	r1, r0
 800d5c6:	ab03      	add	r3, sp, #12
 800d5c8:	4805      	ldr	r0, [pc, #20]	@ (800d5e0 <fiprintf+0x20>)
 800d5ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5ce:	6800      	ldr	r0, [r0, #0]
 800d5d0:	9301      	str	r3, [sp, #4]
 800d5d2:	f000 f835 	bl	800d640 <_vfiprintf_r>
 800d5d6:	b002      	add	sp, #8
 800d5d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5dc:	b003      	add	sp, #12
 800d5de:	4770      	bx	lr
 800d5e0:	200001d4 	.word	0x200001d4

0800d5e4 <abort>:
 800d5e4:	2006      	movs	r0, #6
 800d5e6:	b508      	push	{r3, lr}
 800d5e8:	f000 f9fe 	bl	800d9e8 <raise>
 800d5ec:	2001      	movs	r0, #1
 800d5ee:	f7f5 fb22 	bl	8002c36 <_exit>

0800d5f2 <__sfputc_r>:
 800d5f2:	6893      	ldr	r3, [r2, #8]
 800d5f4:	b410      	push	{r4}
 800d5f6:	3b01      	subs	r3, #1
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	6093      	str	r3, [r2, #8]
 800d5fc:	da07      	bge.n	800d60e <__sfputc_r+0x1c>
 800d5fe:	6994      	ldr	r4, [r2, #24]
 800d600:	42a3      	cmp	r3, r4
 800d602:	db01      	blt.n	800d608 <__sfputc_r+0x16>
 800d604:	290a      	cmp	r1, #10
 800d606:	d102      	bne.n	800d60e <__sfputc_r+0x1c>
 800d608:	bc10      	pop	{r4}
 800d60a:	f000 b931 	b.w	800d870 <__swbuf_r>
 800d60e:	6813      	ldr	r3, [r2, #0]
 800d610:	1c58      	adds	r0, r3, #1
 800d612:	6010      	str	r0, [r2, #0]
 800d614:	7019      	strb	r1, [r3, #0]
 800d616:	4608      	mov	r0, r1
 800d618:	bc10      	pop	{r4}
 800d61a:	4770      	bx	lr

0800d61c <__sfputs_r>:
 800d61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d61e:	4606      	mov	r6, r0
 800d620:	460f      	mov	r7, r1
 800d622:	4614      	mov	r4, r2
 800d624:	18d5      	adds	r5, r2, r3
 800d626:	42ac      	cmp	r4, r5
 800d628:	d101      	bne.n	800d62e <__sfputs_r+0x12>
 800d62a:	2000      	movs	r0, #0
 800d62c:	e007      	b.n	800d63e <__sfputs_r+0x22>
 800d62e:	463a      	mov	r2, r7
 800d630:	4630      	mov	r0, r6
 800d632:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d636:	f7ff ffdc 	bl	800d5f2 <__sfputc_r>
 800d63a:	1c43      	adds	r3, r0, #1
 800d63c:	d1f3      	bne.n	800d626 <__sfputs_r+0xa>
 800d63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d640 <_vfiprintf_r>:
 800d640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d644:	460d      	mov	r5, r1
 800d646:	4614      	mov	r4, r2
 800d648:	4698      	mov	r8, r3
 800d64a:	4606      	mov	r6, r0
 800d64c:	b09d      	sub	sp, #116	@ 0x74
 800d64e:	b118      	cbz	r0, 800d658 <_vfiprintf_r+0x18>
 800d650:	6a03      	ldr	r3, [r0, #32]
 800d652:	b90b      	cbnz	r3, 800d658 <_vfiprintf_r+0x18>
 800d654:	f7fe fb7a 	bl	800bd4c <__sinit>
 800d658:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d65a:	07d9      	lsls	r1, r3, #31
 800d65c:	d405      	bmi.n	800d66a <_vfiprintf_r+0x2a>
 800d65e:	89ab      	ldrh	r3, [r5, #12]
 800d660:	059a      	lsls	r2, r3, #22
 800d662:	d402      	bmi.n	800d66a <_vfiprintf_r+0x2a>
 800d664:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d666:	f7fe fc78 	bl	800bf5a <__retarget_lock_acquire_recursive>
 800d66a:	89ab      	ldrh	r3, [r5, #12]
 800d66c:	071b      	lsls	r3, r3, #28
 800d66e:	d501      	bpl.n	800d674 <_vfiprintf_r+0x34>
 800d670:	692b      	ldr	r3, [r5, #16]
 800d672:	b99b      	cbnz	r3, 800d69c <_vfiprintf_r+0x5c>
 800d674:	4629      	mov	r1, r5
 800d676:	4630      	mov	r0, r6
 800d678:	f000 f938 	bl	800d8ec <__swsetup_r>
 800d67c:	b170      	cbz	r0, 800d69c <_vfiprintf_r+0x5c>
 800d67e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d680:	07dc      	lsls	r4, r3, #31
 800d682:	d504      	bpl.n	800d68e <_vfiprintf_r+0x4e>
 800d684:	f04f 30ff 	mov.w	r0, #4294967295
 800d688:	b01d      	add	sp, #116	@ 0x74
 800d68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d68e:	89ab      	ldrh	r3, [r5, #12]
 800d690:	0598      	lsls	r0, r3, #22
 800d692:	d4f7      	bmi.n	800d684 <_vfiprintf_r+0x44>
 800d694:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d696:	f7fe fc61 	bl	800bf5c <__retarget_lock_release_recursive>
 800d69a:	e7f3      	b.n	800d684 <_vfiprintf_r+0x44>
 800d69c:	2300      	movs	r3, #0
 800d69e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6a0:	2320      	movs	r3, #32
 800d6a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d6a6:	2330      	movs	r3, #48	@ 0x30
 800d6a8:	f04f 0901 	mov.w	r9, #1
 800d6ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6b0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d85c <_vfiprintf_r+0x21c>
 800d6b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d6b8:	4623      	mov	r3, r4
 800d6ba:	469a      	mov	sl, r3
 800d6bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6c0:	b10a      	cbz	r2, 800d6c6 <_vfiprintf_r+0x86>
 800d6c2:	2a25      	cmp	r2, #37	@ 0x25
 800d6c4:	d1f9      	bne.n	800d6ba <_vfiprintf_r+0x7a>
 800d6c6:	ebba 0b04 	subs.w	fp, sl, r4
 800d6ca:	d00b      	beq.n	800d6e4 <_vfiprintf_r+0xa4>
 800d6cc:	465b      	mov	r3, fp
 800d6ce:	4622      	mov	r2, r4
 800d6d0:	4629      	mov	r1, r5
 800d6d2:	4630      	mov	r0, r6
 800d6d4:	f7ff ffa2 	bl	800d61c <__sfputs_r>
 800d6d8:	3001      	adds	r0, #1
 800d6da:	f000 80a7 	beq.w	800d82c <_vfiprintf_r+0x1ec>
 800d6de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6e0:	445a      	add	r2, fp
 800d6e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d6e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	f000 809f 	beq.w	800d82c <_vfiprintf_r+0x1ec>
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d6f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6f8:	f10a 0a01 	add.w	sl, sl, #1
 800d6fc:	9304      	str	r3, [sp, #16]
 800d6fe:	9307      	str	r3, [sp, #28]
 800d700:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d704:	931a      	str	r3, [sp, #104]	@ 0x68
 800d706:	4654      	mov	r4, sl
 800d708:	2205      	movs	r2, #5
 800d70a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d70e:	4853      	ldr	r0, [pc, #332]	@ (800d85c <_vfiprintf_r+0x21c>)
 800d710:	f7fe fc25 	bl	800bf5e <memchr>
 800d714:	9a04      	ldr	r2, [sp, #16]
 800d716:	b9d8      	cbnz	r0, 800d750 <_vfiprintf_r+0x110>
 800d718:	06d1      	lsls	r1, r2, #27
 800d71a:	bf44      	itt	mi
 800d71c:	2320      	movmi	r3, #32
 800d71e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d722:	0713      	lsls	r3, r2, #28
 800d724:	bf44      	itt	mi
 800d726:	232b      	movmi	r3, #43	@ 0x2b
 800d728:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d72c:	f89a 3000 	ldrb.w	r3, [sl]
 800d730:	2b2a      	cmp	r3, #42	@ 0x2a
 800d732:	d015      	beq.n	800d760 <_vfiprintf_r+0x120>
 800d734:	4654      	mov	r4, sl
 800d736:	2000      	movs	r0, #0
 800d738:	f04f 0c0a 	mov.w	ip, #10
 800d73c:	9a07      	ldr	r2, [sp, #28]
 800d73e:	4621      	mov	r1, r4
 800d740:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d744:	3b30      	subs	r3, #48	@ 0x30
 800d746:	2b09      	cmp	r3, #9
 800d748:	d94b      	bls.n	800d7e2 <_vfiprintf_r+0x1a2>
 800d74a:	b1b0      	cbz	r0, 800d77a <_vfiprintf_r+0x13a>
 800d74c:	9207      	str	r2, [sp, #28]
 800d74e:	e014      	b.n	800d77a <_vfiprintf_r+0x13a>
 800d750:	eba0 0308 	sub.w	r3, r0, r8
 800d754:	fa09 f303 	lsl.w	r3, r9, r3
 800d758:	4313      	orrs	r3, r2
 800d75a:	46a2      	mov	sl, r4
 800d75c:	9304      	str	r3, [sp, #16]
 800d75e:	e7d2      	b.n	800d706 <_vfiprintf_r+0xc6>
 800d760:	9b03      	ldr	r3, [sp, #12]
 800d762:	1d19      	adds	r1, r3, #4
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	9103      	str	r1, [sp, #12]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	bfbb      	ittet	lt
 800d76c:	425b      	neglt	r3, r3
 800d76e:	f042 0202 	orrlt.w	r2, r2, #2
 800d772:	9307      	strge	r3, [sp, #28]
 800d774:	9307      	strlt	r3, [sp, #28]
 800d776:	bfb8      	it	lt
 800d778:	9204      	strlt	r2, [sp, #16]
 800d77a:	7823      	ldrb	r3, [r4, #0]
 800d77c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d77e:	d10a      	bne.n	800d796 <_vfiprintf_r+0x156>
 800d780:	7863      	ldrb	r3, [r4, #1]
 800d782:	2b2a      	cmp	r3, #42	@ 0x2a
 800d784:	d132      	bne.n	800d7ec <_vfiprintf_r+0x1ac>
 800d786:	9b03      	ldr	r3, [sp, #12]
 800d788:	3402      	adds	r4, #2
 800d78a:	1d1a      	adds	r2, r3, #4
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	9203      	str	r2, [sp, #12]
 800d790:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d794:	9305      	str	r3, [sp, #20]
 800d796:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d860 <_vfiprintf_r+0x220>
 800d79a:	2203      	movs	r2, #3
 800d79c:	4650      	mov	r0, sl
 800d79e:	7821      	ldrb	r1, [r4, #0]
 800d7a0:	f7fe fbdd 	bl	800bf5e <memchr>
 800d7a4:	b138      	cbz	r0, 800d7b6 <_vfiprintf_r+0x176>
 800d7a6:	2240      	movs	r2, #64	@ 0x40
 800d7a8:	9b04      	ldr	r3, [sp, #16]
 800d7aa:	eba0 000a 	sub.w	r0, r0, sl
 800d7ae:	4082      	lsls	r2, r0
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	3401      	adds	r4, #1
 800d7b4:	9304      	str	r3, [sp, #16]
 800d7b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7ba:	2206      	movs	r2, #6
 800d7bc:	4829      	ldr	r0, [pc, #164]	@ (800d864 <_vfiprintf_r+0x224>)
 800d7be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d7c2:	f7fe fbcc 	bl	800bf5e <memchr>
 800d7c6:	2800      	cmp	r0, #0
 800d7c8:	d03f      	beq.n	800d84a <_vfiprintf_r+0x20a>
 800d7ca:	4b27      	ldr	r3, [pc, #156]	@ (800d868 <_vfiprintf_r+0x228>)
 800d7cc:	bb1b      	cbnz	r3, 800d816 <_vfiprintf_r+0x1d6>
 800d7ce:	9b03      	ldr	r3, [sp, #12]
 800d7d0:	3307      	adds	r3, #7
 800d7d2:	f023 0307 	bic.w	r3, r3, #7
 800d7d6:	3308      	adds	r3, #8
 800d7d8:	9303      	str	r3, [sp, #12]
 800d7da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7dc:	443b      	add	r3, r7
 800d7de:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7e0:	e76a      	b.n	800d6b8 <_vfiprintf_r+0x78>
 800d7e2:	460c      	mov	r4, r1
 800d7e4:	2001      	movs	r0, #1
 800d7e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7ea:	e7a8      	b.n	800d73e <_vfiprintf_r+0xfe>
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	f04f 0c0a 	mov.w	ip, #10
 800d7f2:	4619      	mov	r1, r3
 800d7f4:	3401      	adds	r4, #1
 800d7f6:	9305      	str	r3, [sp, #20]
 800d7f8:	4620      	mov	r0, r4
 800d7fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7fe:	3a30      	subs	r2, #48	@ 0x30
 800d800:	2a09      	cmp	r2, #9
 800d802:	d903      	bls.n	800d80c <_vfiprintf_r+0x1cc>
 800d804:	2b00      	cmp	r3, #0
 800d806:	d0c6      	beq.n	800d796 <_vfiprintf_r+0x156>
 800d808:	9105      	str	r1, [sp, #20]
 800d80a:	e7c4      	b.n	800d796 <_vfiprintf_r+0x156>
 800d80c:	4604      	mov	r4, r0
 800d80e:	2301      	movs	r3, #1
 800d810:	fb0c 2101 	mla	r1, ip, r1, r2
 800d814:	e7f0      	b.n	800d7f8 <_vfiprintf_r+0x1b8>
 800d816:	ab03      	add	r3, sp, #12
 800d818:	9300      	str	r3, [sp, #0]
 800d81a:	462a      	mov	r2, r5
 800d81c:	4630      	mov	r0, r6
 800d81e:	4b13      	ldr	r3, [pc, #76]	@ (800d86c <_vfiprintf_r+0x22c>)
 800d820:	a904      	add	r1, sp, #16
 800d822:	f7fd fe49 	bl	800b4b8 <_printf_float>
 800d826:	4607      	mov	r7, r0
 800d828:	1c78      	adds	r0, r7, #1
 800d82a:	d1d6      	bne.n	800d7da <_vfiprintf_r+0x19a>
 800d82c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d82e:	07d9      	lsls	r1, r3, #31
 800d830:	d405      	bmi.n	800d83e <_vfiprintf_r+0x1fe>
 800d832:	89ab      	ldrh	r3, [r5, #12]
 800d834:	059a      	lsls	r2, r3, #22
 800d836:	d402      	bmi.n	800d83e <_vfiprintf_r+0x1fe>
 800d838:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d83a:	f7fe fb8f 	bl	800bf5c <__retarget_lock_release_recursive>
 800d83e:	89ab      	ldrh	r3, [r5, #12]
 800d840:	065b      	lsls	r3, r3, #25
 800d842:	f53f af1f 	bmi.w	800d684 <_vfiprintf_r+0x44>
 800d846:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d848:	e71e      	b.n	800d688 <_vfiprintf_r+0x48>
 800d84a:	ab03      	add	r3, sp, #12
 800d84c:	9300      	str	r3, [sp, #0]
 800d84e:	462a      	mov	r2, r5
 800d850:	4630      	mov	r0, r6
 800d852:	4b06      	ldr	r3, [pc, #24]	@ (800d86c <_vfiprintf_r+0x22c>)
 800d854:	a904      	add	r1, sp, #16
 800d856:	f7fe f8cd 	bl	800b9f4 <_printf_i>
 800d85a:	e7e4      	b.n	800d826 <_vfiprintf_r+0x1e6>
 800d85c:	0800e6df 	.word	0x0800e6df
 800d860:	0800e6e5 	.word	0x0800e6e5
 800d864:	0800e6e9 	.word	0x0800e6e9
 800d868:	0800b4b9 	.word	0x0800b4b9
 800d86c:	0800d61d 	.word	0x0800d61d

0800d870 <__swbuf_r>:
 800d870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d872:	460e      	mov	r6, r1
 800d874:	4614      	mov	r4, r2
 800d876:	4605      	mov	r5, r0
 800d878:	b118      	cbz	r0, 800d882 <__swbuf_r+0x12>
 800d87a:	6a03      	ldr	r3, [r0, #32]
 800d87c:	b90b      	cbnz	r3, 800d882 <__swbuf_r+0x12>
 800d87e:	f7fe fa65 	bl	800bd4c <__sinit>
 800d882:	69a3      	ldr	r3, [r4, #24]
 800d884:	60a3      	str	r3, [r4, #8]
 800d886:	89a3      	ldrh	r3, [r4, #12]
 800d888:	071a      	lsls	r2, r3, #28
 800d88a:	d501      	bpl.n	800d890 <__swbuf_r+0x20>
 800d88c:	6923      	ldr	r3, [r4, #16]
 800d88e:	b943      	cbnz	r3, 800d8a2 <__swbuf_r+0x32>
 800d890:	4621      	mov	r1, r4
 800d892:	4628      	mov	r0, r5
 800d894:	f000 f82a 	bl	800d8ec <__swsetup_r>
 800d898:	b118      	cbz	r0, 800d8a2 <__swbuf_r+0x32>
 800d89a:	f04f 37ff 	mov.w	r7, #4294967295
 800d89e:	4638      	mov	r0, r7
 800d8a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8a2:	6823      	ldr	r3, [r4, #0]
 800d8a4:	6922      	ldr	r2, [r4, #16]
 800d8a6:	b2f6      	uxtb	r6, r6
 800d8a8:	1a98      	subs	r0, r3, r2
 800d8aa:	6963      	ldr	r3, [r4, #20]
 800d8ac:	4637      	mov	r7, r6
 800d8ae:	4283      	cmp	r3, r0
 800d8b0:	dc05      	bgt.n	800d8be <__swbuf_r+0x4e>
 800d8b2:	4621      	mov	r1, r4
 800d8b4:	4628      	mov	r0, r5
 800d8b6:	f7ff fdfb 	bl	800d4b0 <_fflush_r>
 800d8ba:	2800      	cmp	r0, #0
 800d8bc:	d1ed      	bne.n	800d89a <__swbuf_r+0x2a>
 800d8be:	68a3      	ldr	r3, [r4, #8]
 800d8c0:	3b01      	subs	r3, #1
 800d8c2:	60a3      	str	r3, [r4, #8]
 800d8c4:	6823      	ldr	r3, [r4, #0]
 800d8c6:	1c5a      	adds	r2, r3, #1
 800d8c8:	6022      	str	r2, [r4, #0]
 800d8ca:	701e      	strb	r6, [r3, #0]
 800d8cc:	6962      	ldr	r2, [r4, #20]
 800d8ce:	1c43      	adds	r3, r0, #1
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d004      	beq.n	800d8de <__swbuf_r+0x6e>
 800d8d4:	89a3      	ldrh	r3, [r4, #12]
 800d8d6:	07db      	lsls	r3, r3, #31
 800d8d8:	d5e1      	bpl.n	800d89e <__swbuf_r+0x2e>
 800d8da:	2e0a      	cmp	r6, #10
 800d8dc:	d1df      	bne.n	800d89e <__swbuf_r+0x2e>
 800d8de:	4621      	mov	r1, r4
 800d8e0:	4628      	mov	r0, r5
 800d8e2:	f7ff fde5 	bl	800d4b0 <_fflush_r>
 800d8e6:	2800      	cmp	r0, #0
 800d8e8:	d0d9      	beq.n	800d89e <__swbuf_r+0x2e>
 800d8ea:	e7d6      	b.n	800d89a <__swbuf_r+0x2a>

0800d8ec <__swsetup_r>:
 800d8ec:	b538      	push	{r3, r4, r5, lr}
 800d8ee:	4b29      	ldr	r3, [pc, #164]	@ (800d994 <__swsetup_r+0xa8>)
 800d8f0:	4605      	mov	r5, r0
 800d8f2:	6818      	ldr	r0, [r3, #0]
 800d8f4:	460c      	mov	r4, r1
 800d8f6:	b118      	cbz	r0, 800d900 <__swsetup_r+0x14>
 800d8f8:	6a03      	ldr	r3, [r0, #32]
 800d8fa:	b90b      	cbnz	r3, 800d900 <__swsetup_r+0x14>
 800d8fc:	f7fe fa26 	bl	800bd4c <__sinit>
 800d900:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d904:	0719      	lsls	r1, r3, #28
 800d906:	d422      	bmi.n	800d94e <__swsetup_r+0x62>
 800d908:	06da      	lsls	r2, r3, #27
 800d90a:	d407      	bmi.n	800d91c <__swsetup_r+0x30>
 800d90c:	2209      	movs	r2, #9
 800d90e:	602a      	str	r2, [r5, #0]
 800d910:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d914:	f04f 30ff 	mov.w	r0, #4294967295
 800d918:	81a3      	strh	r3, [r4, #12]
 800d91a:	e033      	b.n	800d984 <__swsetup_r+0x98>
 800d91c:	0758      	lsls	r0, r3, #29
 800d91e:	d512      	bpl.n	800d946 <__swsetup_r+0x5a>
 800d920:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d922:	b141      	cbz	r1, 800d936 <__swsetup_r+0x4a>
 800d924:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d928:	4299      	cmp	r1, r3
 800d92a:	d002      	beq.n	800d932 <__swsetup_r+0x46>
 800d92c:	4628      	mov	r0, r5
 800d92e:	f7ff f977 	bl	800cc20 <_free_r>
 800d932:	2300      	movs	r3, #0
 800d934:	6363      	str	r3, [r4, #52]	@ 0x34
 800d936:	89a3      	ldrh	r3, [r4, #12]
 800d938:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d93c:	81a3      	strh	r3, [r4, #12]
 800d93e:	2300      	movs	r3, #0
 800d940:	6063      	str	r3, [r4, #4]
 800d942:	6923      	ldr	r3, [r4, #16]
 800d944:	6023      	str	r3, [r4, #0]
 800d946:	89a3      	ldrh	r3, [r4, #12]
 800d948:	f043 0308 	orr.w	r3, r3, #8
 800d94c:	81a3      	strh	r3, [r4, #12]
 800d94e:	6923      	ldr	r3, [r4, #16]
 800d950:	b94b      	cbnz	r3, 800d966 <__swsetup_r+0x7a>
 800d952:	89a3      	ldrh	r3, [r4, #12]
 800d954:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d958:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d95c:	d003      	beq.n	800d966 <__swsetup_r+0x7a>
 800d95e:	4621      	mov	r1, r4
 800d960:	4628      	mov	r0, r5
 800d962:	f000 f882 	bl	800da6a <__smakebuf_r>
 800d966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d96a:	f013 0201 	ands.w	r2, r3, #1
 800d96e:	d00a      	beq.n	800d986 <__swsetup_r+0x9a>
 800d970:	2200      	movs	r2, #0
 800d972:	60a2      	str	r2, [r4, #8]
 800d974:	6962      	ldr	r2, [r4, #20]
 800d976:	4252      	negs	r2, r2
 800d978:	61a2      	str	r2, [r4, #24]
 800d97a:	6922      	ldr	r2, [r4, #16]
 800d97c:	b942      	cbnz	r2, 800d990 <__swsetup_r+0xa4>
 800d97e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d982:	d1c5      	bne.n	800d910 <__swsetup_r+0x24>
 800d984:	bd38      	pop	{r3, r4, r5, pc}
 800d986:	0799      	lsls	r1, r3, #30
 800d988:	bf58      	it	pl
 800d98a:	6962      	ldrpl	r2, [r4, #20]
 800d98c:	60a2      	str	r2, [r4, #8]
 800d98e:	e7f4      	b.n	800d97a <__swsetup_r+0x8e>
 800d990:	2000      	movs	r0, #0
 800d992:	e7f7      	b.n	800d984 <__swsetup_r+0x98>
 800d994:	200001d4 	.word	0x200001d4

0800d998 <_raise_r>:
 800d998:	291f      	cmp	r1, #31
 800d99a:	b538      	push	{r3, r4, r5, lr}
 800d99c:	4605      	mov	r5, r0
 800d99e:	460c      	mov	r4, r1
 800d9a0:	d904      	bls.n	800d9ac <_raise_r+0x14>
 800d9a2:	2316      	movs	r3, #22
 800d9a4:	6003      	str	r3, [r0, #0]
 800d9a6:	f04f 30ff 	mov.w	r0, #4294967295
 800d9aa:	bd38      	pop	{r3, r4, r5, pc}
 800d9ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d9ae:	b112      	cbz	r2, 800d9b6 <_raise_r+0x1e>
 800d9b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9b4:	b94b      	cbnz	r3, 800d9ca <_raise_r+0x32>
 800d9b6:	4628      	mov	r0, r5
 800d9b8:	f000 f830 	bl	800da1c <_getpid_r>
 800d9bc:	4622      	mov	r2, r4
 800d9be:	4601      	mov	r1, r0
 800d9c0:	4628      	mov	r0, r5
 800d9c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9c6:	f000 b817 	b.w	800d9f8 <_kill_r>
 800d9ca:	2b01      	cmp	r3, #1
 800d9cc:	d00a      	beq.n	800d9e4 <_raise_r+0x4c>
 800d9ce:	1c59      	adds	r1, r3, #1
 800d9d0:	d103      	bne.n	800d9da <_raise_r+0x42>
 800d9d2:	2316      	movs	r3, #22
 800d9d4:	6003      	str	r3, [r0, #0]
 800d9d6:	2001      	movs	r0, #1
 800d9d8:	e7e7      	b.n	800d9aa <_raise_r+0x12>
 800d9da:	2100      	movs	r1, #0
 800d9dc:	4620      	mov	r0, r4
 800d9de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d9e2:	4798      	blx	r3
 800d9e4:	2000      	movs	r0, #0
 800d9e6:	e7e0      	b.n	800d9aa <_raise_r+0x12>

0800d9e8 <raise>:
 800d9e8:	4b02      	ldr	r3, [pc, #8]	@ (800d9f4 <raise+0xc>)
 800d9ea:	4601      	mov	r1, r0
 800d9ec:	6818      	ldr	r0, [r3, #0]
 800d9ee:	f7ff bfd3 	b.w	800d998 <_raise_r>
 800d9f2:	bf00      	nop
 800d9f4:	200001d4 	.word	0x200001d4

0800d9f8 <_kill_r>:
 800d9f8:	b538      	push	{r3, r4, r5, lr}
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	4d06      	ldr	r5, [pc, #24]	@ (800da18 <_kill_r+0x20>)
 800d9fe:	4604      	mov	r4, r0
 800da00:	4608      	mov	r0, r1
 800da02:	4611      	mov	r1, r2
 800da04:	602b      	str	r3, [r5, #0]
 800da06:	f7f5 f906 	bl	8002c16 <_kill>
 800da0a:	1c43      	adds	r3, r0, #1
 800da0c:	d102      	bne.n	800da14 <_kill_r+0x1c>
 800da0e:	682b      	ldr	r3, [r5, #0]
 800da10:	b103      	cbz	r3, 800da14 <_kill_r+0x1c>
 800da12:	6023      	str	r3, [r4, #0]
 800da14:	bd38      	pop	{r3, r4, r5, pc}
 800da16:	bf00      	nop
 800da18:	20001918 	.word	0x20001918

0800da1c <_getpid_r>:
 800da1c:	f7f5 b8f4 	b.w	8002c08 <_getpid>

0800da20 <__swhatbuf_r>:
 800da20:	b570      	push	{r4, r5, r6, lr}
 800da22:	460c      	mov	r4, r1
 800da24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da28:	4615      	mov	r5, r2
 800da2a:	2900      	cmp	r1, #0
 800da2c:	461e      	mov	r6, r3
 800da2e:	b096      	sub	sp, #88	@ 0x58
 800da30:	da0c      	bge.n	800da4c <__swhatbuf_r+0x2c>
 800da32:	89a3      	ldrh	r3, [r4, #12]
 800da34:	2100      	movs	r1, #0
 800da36:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800da3a:	bf14      	ite	ne
 800da3c:	2340      	movne	r3, #64	@ 0x40
 800da3e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800da42:	2000      	movs	r0, #0
 800da44:	6031      	str	r1, [r6, #0]
 800da46:	602b      	str	r3, [r5, #0]
 800da48:	b016      	add	sp, #88	@ 0x58
 800da4a:	bd70      	pop	{r4, r5, r6, pc}
 800da4c:	466a      	mov	r2, sp
 800da4e:	f000 f849 	bl	800dae4 <_fstat_r>
 800da52:	2800      	cmp	r0, #0
 800da54:	dbed      	blt.n	800da32 <__swhatbuf_r+0x12>
 800da56:	9901      	ldr	r1, [sp, #4]
 800da58:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800da5c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800da60:	4259      	negs	r1, r3
 800da62:	4159      	adcs	r1, r3
 800da64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da68:	e7eb      	b.n	800da42 <__swhatbuf_r+0x22>

0800da6a <__smakebuf_r>:
 800da6a:	898b      	ldrh	r3, [r1, #12]
 800da6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da6e:	079d      	lsls	r5, r3, #30
 800da70:	4606      	mov	r6, r0
 800da72:	460c      	mov	r4, r1
 800da74:	d507      	bpl.n	800da86 <__smakebuf_r+0x1c>
 800da76:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800da7a:	6023      	str	r3, [r4, #0]
 800da7c:	6123      	str	r3, [r4, #16]
 800da7e:	2301      	movs	r3, #1
 800da80:	6163      	str	r3, [r4, #20]
 800da82:	b003      	add	sp, #12
 800da84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da86:	466a      	mov	r2, sp
 800da88:	ab01      	add	r3, sp, #4
 800da8a:	f7ff ffc9 	bl	800da20 <__swhatbuf_r>
 800da8e:	9f00      	ldr	r7, [sp, #0]
 800da90:	4605      	mov	r5, r0
 800da92:	4639      	mov	r1, r7
 800da94:	4630      	mov	r0, r6
 800da96:	f7fd fbe5 	bl	800b264 <_malloc_r>
 800da9a:	b948      	cbnz	r0, 800dab0 <__smakebuf_r+0x46>
 800da9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800daa0:	059a      	lsls	r2, r3, #22
 800daa2:	d4ee      	bmi.n	800da82 <__smakebuf_r+0x18>
 800daa4:	f023 0303 	bic.w	r3, r3, #3
 800daa8:	f043 0302 	orr.w	r3, r3, #2
 800daac:	81a3      	strh	r3, [r4, #12]
 800daae:	e7e2      	b.n	800da76 <__smakebuf_r+0xc>
 800dab0:	89a3      	ldrh	r3, [r4, #12]
 800dab2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800daba:	81a3      	strh	r3, [r4, #12]
 800dabc:	9b01      	ldr	r3, [sp, #4]
 800dabe:	6020      	str	r0, [r4, #0]
 800dac0:	b15b      	cbz	r3, 800dada <__smakebuf_r+0x70>
 800dac2:	4630      	mov	r0, r6
 800dac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dac8:	f000 f81e 	bl	800db08 <_isatty_r>
 800dacc:	b128      	cbz	r0, 800dada <__smakebuf_r+0x70>
 800dace:	89a3      	ldrh	r3, [r4, #12]
 800dad0:	f023 0303 	bic.w	r3, r3, #3
 800dad4:	f043 0301 	orr.w	r3, r3, #1
 800dad8:	81a3      	strh	r3, [r4, #12]
 800dada:	89a3      	ldrh	r3, [r4, #12]
 800dadc:	431d      	orrs	r5, r3
 800dade:	81a5      	strh	r5, [r4, #12]
 800dae0:	e7cf      	b.n	800da82 <__smakebuf_r+0x18>
	...

0800dae4 <_fstat_r>:
 800dae4:	b538      	push	{r3, r4, r5, lr}
 800dae6:	2300      	movs	r3, #0
 800dae8:	4d06      	ldr	r5, [pc, #24]	@ (800db04 <_fstat_r+0x20>)
 800daea:	4604      	mov	r4, r0
 800daec:	4608      	mov	r0, r1
 800daee:	4611      	mov	r1, r2
 800daf0:	602b      	str	r3, [r5, #0]
 800daf2:	f7f5 f8ef 	bl	8002cd4 <_fstat>
 800daf6:	1c43      	adds	r3, r0, #1
 800daf8:	d102      	bne.n	800db00 <_fstat_r+0x1c>
 800dafa:	682b      	ldr	r3, [r5, #0]
 800dafc:	b103      	cbz	r3, 800db00 <_fstat_r+0x1c>
 800dafe:	6023      	str	r3, [r4, #0]
 800db00:	bd38      	pop	{r3, r4, r5, pc}
 800db02:	bf00      	nop
 800db04:	20001918 	.word	0x20001918

0800db08 <_isatty_r>:
 800db08:	b538      	push	{r3, r4, r5, lr}
 800db0a:	2300      	movs	r3, #0
 800db0c:	4d05      	ldr	r5, [pc, #20]	@ (800db24 <_isatty_r+0x1c>)
 800db0e:	4604      	mov	r4, r0
 800db10:	4608      	mov	r0, r1
 800db12:	602b      	str	r3, [r5, #0]
 800db14:	f7f5 f8ed 	bl	8002cf2 <_isatty>
 800db18:	1c43      	adds	r3, r0, #1
 800db1a:	d102      	bne.n	800db22 <_isatty_r+0x1a>
 800db1c:	682b      	ldr	r3, [r5, #0]
 800db1e:	b103      	cbz	r3, 800db22 <_isatty_r+0x1a>
 800db20:	6023      	str	r3, [r4, #0]
 800db22:	bd38      	pop	{r3, r4, r5, pc}
 800db24:	20001918 	.word	0x20001918

0800db28 <log>:
 800db28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db2a:	4604      	mov	r4, r0
 800db2c:	460d      	mov	r5, r1
 800db2e:	f000 f833 	bl	800db98 <__ieee754_log>
 800db32:	4622      	mov	r2, r4
 800db34:	4606      	mov	r6, r0
 800db36:	460f      	mov	r7, r1
 800db38:	462b      	mov	r3, r5
 800db3a:	4620      	mov	r0, r4
 800db3c:	4629      	mov	r1, r5
 800db3e:	f7f2 ffa1 	bl	8000a84 <__aeabi_dcmpun>
 800db42:	b998      	cbnz	r0, 800db6c <log+0x44>
 800db44:	2200      	movs	r2, #0
 800db46:	2300      	movs	r3, #0
 800db48:	4620      	mov	r0, r4
 800db4a:	4629      	mov	r1, r5
 800db4c:	f7f2 ff90 	bl	8000a70 <__aeabi_dcmpgt>
 800db50:	b960      	cbnz	r0, 800db6c <log+0x44>
 800db52:	2200      	movs	r2, #0
 800db54:	2300      	movs	r3, #0
 800db56:	4620      	mov	r0, r4
 800db58:	4629      	mov	r1, r5
 800db5a:	f7f2 ff61 	bl	8000a20 <__aeabi_dcmpeq>
 800db5e:	b140      	cbz	r0, 800db72 <log+0x4a>
 800db60:	f7fe f9d0 	bl	800bf04 <__errno>
 800db64:	2322      	movs	r3, #34	@ 0x22
 800db66:	2600      	movs	r6, #0
 800db68:	4f06      	ldr	r7, [pc, #24]	@ (800db84 <log+0x5c>)
 800db6a:	6003      	str	r3, [r0, #0]
 800db6c:	4630      	mov	r0, r6
 800db6e:	4639      	mov	r1, r7
 800db70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db72:	f7fe f9c7 	bl	800bf04 <__errno>
 800db76:	2321      	movs	r3, #33	@ 0x21
 800db78:	6003      	str	r3, [r0, #0]
 800db7a:	4803      	ldr	r0, [pc, #12]	@ (800db88 <log+0x60>)
 800db7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800db80:	f000 b804 	b.w	800db8c <nan>
 800db84:	fff00000 	.word	0xfff00000
 800db88:	0800e5dd 	.word	0x0800e5dd

0800db8c <nan>:
 800db8c:	2000      	movs	r0, #0
 800db8e:	4901      	ldr	r1, [pc, #4]	@ (800db94 <nan+0x8>)
 800db90:	4770      	bx	lr
 800db92:	bf00      	nop
 800db94:	7ff80000 	.word	0x7ff80000

0800db98 <__ieee754_log>:
 800db98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db9c:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800dba0:	4602      	mov	r2, r0
 800dba2:	460b      	mov	r3, r1
 800dba4:	460d      	mov	r5, r1
 800dba6:	b087      	sub	sp, #28
 800dba8:	da24      	bge.n	800dbf4 <__ieee754_log+0x5c>
 800dbaa:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800dbae:	4304      	orrs	r4, r0
 800dbb0:	d108      	bne.n	800dbc4 <__ieee754_log+0x2c>
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	2000      	movs	r0, #0
 800dbb8:	49cb      	ldr	r1, [pc, #812]	@ (800dee8 <__ieee754_log+0x350>)
 800dbba:	f7f2 fdf3 	bl	80007a4 <__aeabi_ddiv>
 800dbbe:	b007      	add	sp, #28
 800dbc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbc4:	2900      	cmp	r1, #0
 800dbc6:	da04      	bge.n	800dbd2 <__ieee754_log+0x3a>
 800dbc8:	f7f2 fb0a 	bl	80001e0 <__aeabi_dsub>
 800dbcc:	2200      	movs	r2, #0
 800dbce:	2300      	movs	r3, #0
 800dbd0:	e7f3      	b.n	800dbba <__ieee754_log+0x22>
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	4bc5      	ldr	r3, [pc, #788]	@ (800deec <__ieee754_log+0x354>)
 800dbd6:	f7f2 fcbb 	bl	8000550 <__aeabi_dmul>
 800dbda:	460b      	mov	r3, r1
 800dbdc:	460d      	mov	r5, r1
 800dbde:	4602      	mov	r2, r0
 800dbe0:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 800dbe4:	48c2      	ldr	r0, [pc, #776]	@ (800def0 <__ieee754_log+0x358>)
 800dbe6:	4285      	cmp	r5, r0
 800dbe8:	dd06      	ble.n	800dbf8 <__ieee754_log+0x60>
 800dbea:	4610      	mov	r0, r2
 800dbec:	4619      	mov	r1, r3
 800dbee:	f7f2 faf9 	bl	80001e4 <__adddf3>
 800dbf2:	e7e4      	b.n	800dbbe <__ieee754_log+0x26>
 800dbf4:	2100      	movs	r1, #0
 800dbf6:	e7f5      	b.n	800dbe4 <__ieee754_log+0x4c>
 800dbf8:	152c      	asrs	r4, r5, #20
 800dbfa:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800dbfe:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800dc02:	440c      	add	r4, r1
 800dc04:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 800dc08:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 800dc0c:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 800dc10:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 800dc14:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 800dc18:	ea41 0305 	orr.w	r3, r1, r5
 800dc1c:	4610      	mov	r0, r2
 800dc1e:	4619      	mov	r1, r3
 800dc20:	2200      	movs	r2, #0
 800dc22:	4bb4      	ldr	r3, [pc, #720]	@ (800def4 <__ieee754_log+0x35c>)
 800dc24:	f7f2 fadc 	bl	80001e0 <__aeabi_dsub>
 800dc28:	1cab      	adds	r3, r5, #2
 800dc2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc2e:	2b02      	cmp	r3, #2
 800dc30:	4682      	mov	sl, r0
 800dc32:	468b      	mov	fp, r1
 800dc34:	f04f 0200 	mov.w	r2, #0
 800dc38:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800dc3c:	dc53      	bgt.n	800dce6 <__ieee754_log+0x14e>
 800dc3e:	2300      	movs	r3, #0
 800dc40:	f7f2 feee 	bl	8000a20 <__aeabi_dcmpeq>
 800dc44:	b1d0      	cbz	r0, 800dc7c <__ieee754_log+0xe4>
 800dc46:	2c00      	cmp	r4, #0
 800dc48:	f000 8120 	beq.w	800de8c <__ieee754_log+0x2f4>
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	f7f2 fc15 	bl	800047c <__aeabi_i2d>
 800dc52:	a391      	add	r3, pc, #580	@ (adr r3, 800de98 <__ieee754_log+0x300>)
 800dc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc58:	4606      	mov	r6, r0
 800dc5a:	460f      	mov	r7, r1
 800dc5c:	f7f2 fc78 	bl	8000550 <__aeabi_dmul>
 800dc60:	a38f      	add	r3, pc, #572	@ (adr r3, 800dea0 <__ieee754_log+0x308>)
 800dc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc66:	4604      	mov	r4, r0
 800dc68:	460d      	mov	r5, r1
 800dc6a:	4630      	mov	r0, r6
 800dc6c:	4639      	mov	r1, r7
 800dc6e:	f7f2 fc6f 	bl	8000550 <__aeabi_dmul>
 800dc72:	4602      	mov	r2, r0
 800dc74:	460b      	mov	r3, r1
 800dc76:	4620      	mov	r0, r4
 800dc78:	4629      	mov	r1, r5
 800dc7a:	e7b8      	b.n	800dbee <__ieee754_log+0x56>
 800dc7c:	a38a      	add	r3, pc, #552	@ (adr r3, 800dea8 <__ieee754_log+0x310>)
 800dc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc82:	4650      	mov	r0, sl
 800dc84:	4659      	mov	r1, fp
 800dc86:	f7f2 fc63 	bl	8000550 <__aeabi_dmul>
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	460b      	mov	r3, r1
 800dc8e:	2000      	movs	r0, #0
 800dc90:	4999      	ldr	r1, [pc, #612]	@ (800def8 <__ieee754_log+0x360>)
 800dc92:	f7f2 faa5 	bl	80001e0 <__aeabi_dsub>
 800dc96:	4652      	mov	r2, sl
 800dc98:	4606      	mov	r6, r0
 800dc9a:	460f      	mov	r7, r1
 800dc9c:	465b      	mov	r3, fp
 800dc9e:	4650      	mov	r0, sl
 800dca0:	4659      	mov	r1, fp
 800dca2:	f7f2 fc55 	bl	8000550 <__aeabi_dmul>
 800dca6:	4602      	mov	r2, r0
 800dca8:	460b      	mov	r3, r1
 800dcaa:	4630      	mov	r0, r6
 800dcac:	4639      	mov	r1, r7
 800dcae:	f7f2 fc4f 	bl	8000550 <__aeabi_dmul>
 800dcb2:	4606      	mov	r6, r0
 800dcb4:	460f      	mov	r7, r1
 800dcb6:	b914      	cbnz	r4, 800dcbe <__ieee754_log+0x126>
 800dcb8:	4632      	mov	r2, r6
 800dcba:	463b      	mov	r3, r7
 800dcbc:	e0a0      	b.n	800de00 <__ieee754_log+0x268>
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	f7f2 fbdc 	bl	800047c <__aeabi_i2d>
 800dcc4:	a374      	add	r3, pc, #464	@ (adr r3, 800de98 <__ieee754_log+0x300>)
 800dcc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcca:	4680      	mov	r8, r0
 800dccc:	4689      	mov	r9, r1
 800dcce:	f7f2 fc3f 	bl	8000550 <__aeabi_dmul>
 800dcd2:	a373      	add	r3, pc, #460	@ (adr r3, 800dea0 <__ieee754_log+0x308>)
 800dcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd8:	4604      	mov	r4, r0
 800dcda:	460d      	mov	r5, r1
 800dcdc:	4640      	mov	r0, r8
 800dcde:	4649      	mov	r1, r9
 800dce0:	f7f2 fc36 	bl	8000550 <__aeabi_dmul>
 800dce4:	e0a5      	b.n	800de32 <__ieee754_log+0x29a>
 800dce6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dcea:	f7f2 fa7b 	bl	80001e4 <__adddf3>
 800dcee:	4602      	mov	r2, r0
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	4650      	mov	r0, sl
 800dcf4:	4659      	mov	r1, fp
 800dcf6:	f7f2 fd55 	bl	80007a4 <__aeabi_ddiv>
 800dcfa:	e9cd 0100 	strd	r0, r1, [sp]
 800dcfe:	4620      	mov	r0, r4
 800dd00:	f7f2 fbbc 	bl	800047c <__aeabi_i2d>
 800dd04:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd0c:	4610      	mov	r0, r2
 800dd0e:	4619      	mov	r1, r3
 800dd10:	f7f2 fc1e 	bl	8000550 <__aeabi_dmul>
 800dd14:	4602      	mov	r2, r0
 800dd16:	460b      	mov	r3, r1
 800dd18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dd1c:	f7f2 fc18 	bl	8000550 <__aeabi_dmul>
 800dd20:	a363      	add	r3, pc, #396	@ (adr r3, 800deb0 <__ieee754_log+0x318>)
 800dd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd26:	4680      	mov	r8, r0
 800dd28:	4689      	mov	r9, r1
 800dd2a:	f7f2 fc11 	bl	8000550 <__aeabi_dmul>
 800dd2e:	a362      	add	r3, pc, #392	@ (adr r3, 800deb8 <__ieee754_log+0x320>)
 800dd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd34:	f7f2 fa56 	bl	80001e4 <__adddf3>
 800dd38:	4642      	mov	r2, r8
 800dd3a:	464b      	mov	r3, r9
 800dd3c:	f7f2 fc08 	bl	8000550 <__aeabi_dmul>
 800dd40:	a35f      	add	r3, pc, #380	@ (adr r3, 800dec0 <__ieee754_log+0x328>)
 800dd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd46:	f7f2 fa4d 	bl	80001e4 <__adddf3>
 800dd4a:	4642      	mov	r2, r8
 800dd4c:	464b      	mov	r3, r9
 800dd4e:	f7f2 fbff 	bl	8000550 <__aeabi_dmul>
 800dd52:	a35d      	add	r3, pc, #372	@ (adr r3, 800dec8 <__ieee754_log+0x330>)
 800dd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd58:	f7f2 fa44 	bl	80001e4 <__adddf3>
 800dd5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd60:	f7f2 fbf6 	bl	8000550 <__aeabi_dmul>
 800dd64:	a35a      	add	r3, pc, #360	@ (adr r3, 800ded0 <__ieee754_log+0x338>)
 800dd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd6e:	4640      	mov	r0, r8
 800dd70:	4649      	mov	r1, r9
 800dd72:	f7f2 fbed 	bl	8000550 <__aeabi_dmul>
 800dd76:	a358      	add	r3, pc, #352	@ (adr r3, 800ded8 <__ieee754_log+0x340>)
 800dd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7c:	f7f2 fa32 	bl	80001e4 <__adddf3>
 800dd80:	4642      	mov	r2, r8
 800dd82:	464b      	mov	r3, r9
 800dd84:	f7f2 fbe4 	bl	8000550 <__aeabi_dmul>
 800dd88:	a355      	add	r3, pc, #340	@ (adr r3, 800dee0 <__ieee754_log+0x348>)
 800dd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd8e:	f7f2 fa29 	bl	80001e4 <__adddf3>
 800dd92:	4642      	mov	r2, r8
 800dd94:	464b      	mov	r3, r9
 800dd96:	f7f2 fbdb 	bl	8000550 <__aeabi_dmul>
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	460b      	mov	r3, r1
 800dd9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dda2:	f7f2 fa1f 	bl	80001e4 <__adddf3>
 800dda6:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800ddaa:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800ddae:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 800ddb2:	3551      	adds	r5, #81	@ 0x51
 800ddb4:	4335      	orrs	r5, r6
 800ddb6:	2d00      	cmp	r5, #0
 800ddb8:	4680      	mov	r8, r0
 800ddba:	4689      	mov	r9, r1
 800ddbc:	dd48      	ble.n	800de50 <__ieee754_log+0x2b8>
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	4b4d      	ldr	r3, [pc, #308]	@ (800def8 <__ieee754_log+0x360>)
 800ddc2:	4650      	mov	r0, sl
 800ddc4:	4659      	mov	r1, fp
 800ddc6:	f7f2 fbc3 	bl	8000550 <__aeabi_dmul>
 800ddca:	4652      	mov	r2, sl
 800ddcc:	465b      	mov	r3, fp
 800ddce:	f7f2 fbbf 	bl	8000550 <__aeabi_dmul>
 800ddd2:	4602      	mov	r2, r0
 800ddd4:	460b      	mov	r3, r1
 800ddd6:	4606      	mov	r6, r0
 800ddd8:	460f      	mov	r7, r1
 800ddda:	4640      	mov	r0, r8
 800dddc:	4649      	mov	r1, r9
 800ddde:	f7f2 fa01 	bl	80001e4 <__adddf3>
 800dde2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dde6:	f7f2 fbb3 	bl	8000550 <__aeabi_dmul>
 800ddea:	4680      	mov	r8, r0
 800ddec:	4689      	mov	r9, r1
 800ddee:	b964      	cbnz	r4, 800de0a <__ieee754_log+0x272>
 800ddf0:	4602      	mov	r2, r0
 800ddf2:	460b      	mov	r3, r1
 800ddf4:	4630      	mov	r0, r6
 800ddf6:	4639      	mov	r1, r7
 800ddf8:	f7f2 f9f2 	bl	80001e0 <__aeabi_dsub>
 800ddfc:	4602      	mov	r2, r0
 800ddfe:	460b      	mov	r3, r1
 800de00:	4650      	mov	r0, sl
 800de02:	4659      	mov	r1, fp
 800de04:	f7f2 f9ec 	bl	80001e0 <__aeabi_dsub>
 800de08:	e6d9      	b.n	800dbbe <__ieee754_log+0x26>
 800de0a:	a323      	add	r3, pc, #140	@ (adr r3, 800de98 <__ieee754_log+0x300>)
 800de0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de14:	f7f2 fb9c 	bl	8000550 <__aeabi_dmul>
 800de18:	a321      	add	r3, pc, #132	@ (adr r3, 800dea0 <__ieee754_log+0x308>)
 800de1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de1e:	4604      	mov	r4, r0
 800de20:	460d      	mov	r5, r1
 800de22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de26:	f7f2 fb93 	bl	8000550 <__aeabi_dmul>
 800de2a:	4642      	mov	r2, r8
 800de2c:	464b      	mov	r3, r9
 800de2e:	f7f2 f9d9 	bl	80001e4 <__adddf3>
 800de32:	4602      	mov	r2, r0
 800de34:	460b      	mov	r3, r1
 800de36:	4630      	mov	r0, r6
 800de38:	4639      	mov	r1, r7
 800de3a:	f7f2 f9d1 	bl	80001e0 <__aeabi_dsub>
 800de3e:	4652      	mov	r2, sl
 800de40:	465b      	mov	r3, fp
 800de42:	f7f2 f9cd 	bl	80001e0 <__aeabi_dsub>
 800de46:	4602      	mov	r2, r0
 800de48:	460b      	mov	r3, r1
 800de4a:	4620      	mov	r0, r4
 800de4c:	4629      	mov	r1, r5
 800de4e:	e7d9      	b.n	800de04 <__ieee754_log+0x26c>
 800de50:	4602      	mov	r2, r0
 800de52:	460b      	mov	r3, r1
 800de54:	4650      	mov	r0, sl
 800de56:	4659      	mov	r1, fp
 800de58:	f7f2 f9c2 	bl	80001e0 <__aeabi_dsub>
 800de5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de60:	f7f2 fb76 	bl	8000550 <__aeabi_dmul>
 800de64:	4606      	mov	r6, r0
 800de66:	460f      	mov	r7, r1
 800de68:	2c00      	cmp	r4, #0
 800de6a:	f43f af25 	beq.w	800dcb8 <__ieee754_log+0x120>
 800de6e:	a30a      	add	r3, pc, #40	@ (adr r3, 800de98 <__ieee754_log+0x300>)
 800de70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de78:	f7f2 fb6a 	bl	8000550 <__aeabi_dmul>
 800de7c:	a308      	add	r3, pc, #32	@ (adr r3, 800dea0 <__ieee754_log+0x308>)
 800de7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de82:	4604      	mov	r4, r0
 800de84:	460d      	mov	r5, r1
 800de86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de8a:	e729      	b.n	800dce0 <__ieee754_log+0x148>
 800de8c:	2000      	movs	r0, #0
 800de8e:	2100      	movs	r1, #0
 800de90:	e695      	b.n	800dbbe <__ieee754_log+0x26>
 800de92:	bf00      	nop
 800de94:	f3af 8000 	nop.w
 800de98:	fee00000 	.word	0xfee00000
 800de9c:	3fe62e42 	.word	0x3fe62e42
 800dea0:	35793c76 	.word	0x35793c76
 800dea4:	3dea39ef 	.word	0x3dea39ef
 800dea8:	55555555 	.word	0x55555555
 800deac:	3fd55555 	.word	0x3fd55555
 800deb0:	df3e5244 	.word	0xdf3e5244
 800deb4:	3fc2f112 	.word	0x3fc2f112
 800deb8:	96cb03de 	.word	0x96cb03de
 800debc:	3fc74664 	.word	0x3fc74664
 800dec0:	94229359 	.word	0x94229359
 800dec4:	3fd24924 	.word	0x3fd24924
 800dec8:	55555593 	.word	0x55555593
 800decc:	3fe55555 	.word	0x3fe55555
 800ded0:	d078c69f 	.word	0xd078c69f
 800ded4:	3fc39a09 	.word	0x3fc39a09
 800ded8:	1d8e78af 	.word	0x1d8e78af
 800dedc:	3fcc71c5 	.word	0x3fcc71c5
 800dee0:	9997fa04 	.word	0x9997fa04
 800dee4:	3fd99999 	.word	0x3fd99999
 800dee8:	c3500000 	.word	0xc3500000
 800deec:	43500000 	.word	0x43500000
 800def0:	7fefffff 	.word	0x7fefffff
 800def4:	3ff00000 	.word	0x3ff00000
 800def8:	3fe00000 	.word	0x3fe00000

0800defc <_init>:
 800defc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800defe:	bf00      	nop
 800df00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df02:	bc08      	pop	{r3}
 800df04:	469e      	mov	lr, r3
 800df06:	4770      	bx	lr

0800df08 <_fini>:
 800df08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df0a:	bf00      	nop
 800df0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df0e:	bc08      	pop	{r3}
 800df10:	469e      	mov	lr, r3
 800df12:	4770      	bx	lr
