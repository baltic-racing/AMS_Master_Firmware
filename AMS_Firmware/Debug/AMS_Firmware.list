
AMS_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cddc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  0800cf68  0800cf68  0001cf68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d73c  0800d73c  000203a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d73c  0800d73c  0001d73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d744  0800d744  000203a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d744  0800d744  0001d744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d748  0800d748  0001d748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003a8  20000000  0800d74c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001568  200003a8  0800daf4  000203a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001910  0800daf4  00021910  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000203d1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018a76  00000000  00000000  00020414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004531  00000000  00000000  00038e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001600  00000000  00000000  0003d3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ae  00000000  00000000  0003e9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023309  00000000  00000000  0003fa6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c38d  00000000  00000000  00062d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0a4c  00000000  00000000  0007f104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b8c  00000000  00000000  0013fb50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001466dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200003a8 	.word	0x200003a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800cf4c 	.word	0x0800cf4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200003ac 	.word	0x200003ac
 80001c4:	0800cf4c 	.word	0x0800cf4c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b972 	b.w	8000e3c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	460d      	mov	r5, r1
 8000b78:	4604      	mov	r4, r0
 8000b7a:	468e      	mov	lr, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14c      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4694      	mov	ip, r2
 8000b84:	d967      	bls.n	8000c56 <__udivmoddi4+0xe6>
 8000b86:	fab2 f382 	clz	r3, r2
 8000b8a:	b153      	cbz	r3, 8000ba2 <__udivmoddi4+0x32>
 8000b8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b90:	f1c3 0220 	rsb	r2, r3, #32
 8000b94:	fa01 fe03 	lsl.w	lr, r1, r3
 8000b98:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9c:	ea42 0e0e 	orr.w	lr, r2, lr
 8000ba0:	409c      	lsls	r4, r3
 8000ba2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba6:	fbbe f1f7 	udiv	r1, lr, r7
 8000baa:	fa1f f58c 	uxth.w	r5, ip
 8000bae:	fb07 ee11 	mls	lr, r7, r1, lr
 8000bb2:	fb01 f005 	mul.w	r0, r1, r5
 8000bb6:	0c22      	lsrs	r2, r4, #16
 8000bb8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000bbc:	4290      	cmp	r0, r2
 8000bbe:	d90a      	bls.n	8000bd6 <__udivmoddi4+0x66>
 8000bc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc4:	f101 3eff 	add.w	lr, r1, #4294967295
 8000bc8:	f080 8119 	bcs.w	8000dfe <__udivmoddi4+0x28e>
 8000bcc:	4290      	cmp	r0, r2
 8000bce:	f240 8116 	bls.w	8000dfe <__udivmoddi4+0x28e>
 8000bd2:	3902      	subs	r1, #2
 8000bd4:	4462      	add	r2, ip
 8000bd6:	1a12      	subs	r2, r2, r0
 8000bd8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bdc:	fb07 2210 	mls	r2, r7, r0, r2
 8000be0:	fb00 f505 	mul.w	r5, r0, r5
 8000be4:	b2a4      	uxth	r4, r4
 8000be6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bea:	42a5      	cmp	r5, r4
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x94>
 8000bee:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf6:	f080 8104 	bcs.w	8000e02 <__udivmoddi4+0x292>
 8000bfa:	42a5      	cmp	r5, r4
 8000bfc:	f240 8101 	bls.w	8000e02 <__udivmoddi4+0x292>
 8000c00:	4464      	add	r4, ip
 8000c02:	3802      	subs	r0, #2
 8000c04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c08:	2100      	movs	r1, #0
 8000c0a:	1b64      	subs	r4, r4, r5
 8000c0c:	b11e      	cbz	r6, 8000c16 <__udivmoddi4+0xa6>
 8000c0e:	40dc      	lsrs	r4, r3
 8000c10:	2300      	movs	r3, #0
 8000c12:	e9c6 4300 	strd	r4, r3, [r6]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0xc0>
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	f000 80ea 	beq.w	8000df8 <__udivmoddi4+0x288>
 8000c24:	2100      	movs	r1, #0
 8000c26:	e9c6 0500 	strd	r0, r5, [r6]
 8000c2a:	4608      	mov	r0, r1
 8000c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c30:	fab3 f183 	clz	r1, r3
 8000c34:	2900      	cmp	r1, #0
 8000c36:	d148      	bne.n	8000cca <__udivmoddi4+0x15a>
 8000c38:	42ab      	cmp	r3, r5
 8000c3a:	d302      	bcc.n	8000c42 <__udivmoddi4+0xd2>
 8000c3c:	4282      	cmp	r2, r0
 8000c3e:	f200 80f8 	bhi.w	8000e32 <__udivmoddi4+0x2c2>
 8000c42:	1a84      	subs	r4, r0, r2
 8000c44:	eb65 0203 	sbc.w	r2, r5, r3
 8000c48:	2001      	movs	r0, #1
 8000c4a:	4696      	mov	lr, r2
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	d0e2      	beq.n	8000c16 <__udivmoddi4+0xa6>
 8000c50:	e9c6 4e00 	strd	r4, lr, [r6]
 8000c54:	e7df      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c56:	b902      	cbnz	r2, 8000c5a <__udivmoddi4+0xea>
 8000c58:	deff      	udf	#255	; 0xff
 8000c5a:	fab2 f382 	clz	r3, r2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f040 808e 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c64:	1a88      	subs	r0, r1, r2
 8000c66:	2101      	movs	r1, #1
 8000c68:	0c17      	lsrs	r7, r2, #16
 8000c6a:	fa1f fe82 	uxth.w	lr, r2
 8000c6e:	fbb0 f5f7 	udiv	r5, r0, r7
 8000c72:	fb07 0015 	mls	r0, r7, r5, r0
 8000c76:	0c22      	lsrs	r2, r4, #16
 8000c78:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c7c:	fb0e f005 	mul.w	r0, lr, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x126>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c8c:	d202      	bcs.n	8000c94 <__udivmoddi4+0x124>
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	f200 80cc 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c94:	4645      	mov	r5, r8
 8000c96:	1a12      	subs	r2, r2, r0
 8000c98:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c9c:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ca4:	b2a4      	uxth	r4, r4
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x150>
 8000cae:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x14e>
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	f200 80b4 	bhi.w	8000e26 <__udivmoddi4+0x2b6>
 8000cbe:	4610      	mov	r0, r2
 8000cc0:	eba4 040e 	sub.w	r4, r4, lr
 8000cc4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cc8:	e7a0      	b.n	8000c0c <__udivmoddi4+0x9c>
 8000cca:	f1c1 0720 	rsb	r7, r1, #32
 8000cce:	408b      	lsls	r3, r1
 8000cd0:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cd4:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cd8:	fa25 fa07 	lsr.w	sl, r5, r7
 8000cdc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ce0:	fbba f8f9 	udiv	r8, sl, r9
 8000ce4:	408d      	lsls	r5, r1
 8000ce6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cea:	fb09 aa18 	mls	sl, r9, r8, sl
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	432b      	orrs	r3, r5
 8000cf4:	fa00 f501 	lsl.w	r5, r0, r1
 8000cf8:	fb08 f00e 	mul.w	r0, r8, lr
 8000cfc:	0c1c      	lsrs	r4, r3, #16
 8000cfe:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d02:	42a0      	cmp	r0, r4
 8000d04:	fa02 f201 	lsl.w	r2, r2, r1
 8000d08:	d90b      	bls.n	8000d22 <__udivmoddi4+0x1b2>
 8000d0a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d12:	f080 8086 	bcs.w	8000e22 <__udivmoddi4+0x2b2>
 8000d16:	42a0      	cmp	r0, r4
 8000d18:	f240 8083 	bls.w	8000e22 <__udivmoddi4+0x2b2>
 8000d1c:	f1a8 0802 	sub.w	r8, r8, #2
 8000d20:	4464      	add	r4, ip
 8000d22:	1a24      	subs	r4, r4, r0
 8000d24:	b298      	uxth	r0, r3
 8000d26:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d2a:	fb09 4413 	mls	r4, r9, r3, r4
 8000d2e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d32:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x1dc>
 8000d3a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d42:	d26a      	bcs.n	8000e1a <__udivmoddi4+0x2aa>
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d968      	bls.n	8000e1a <__udivmoddi4+0x2aa>
 8000d48:	3b02      	subs	r3, #2
 8000d4a:	4464      	add	r4, ip
 8000d4c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d50:	fba0 9302 	umull	r9, r3, r0, r2
 8000d54:	eba4 040e 	sub.w	r4, r4, lr
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	46c8      	mov	r8, r9
 8000d5c:	469e      	mov	lr, r3
 8000d5e:	d354      	bcc.n	8000e0a <__udivmoddi4+0x29a>
 8000d60:	d051      	beq.n	8000e06 <__udivmoddi4+0x296>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d067      	beq.n	8000e36 <__udivmoddi4+0x2c6>
 8000d66:	ebb5 0308 	subs.w	r3, r5, r8
 8000d6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d6e:	40cb      	lsrs	r3, r1
 8000d70:	fa04 f707 	lsl.w	r7, r4, r7
 8000d74:	431f      	orrs	r7, r3
 8000d76:	40cc      	lsrs	r4, r1
 8000d78:	e9c6 7400 	strd	r7, r4, [r6]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e74a      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0020 	rsb	r0, r3, #32
 8000d88:	40c1      	lsrs	r1, r0
 8000d8a:	409d      	lsls	r5, r3
 8000d8c:	fa24 f000 	lsr.w	r0, r4, r0
 8000d90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d94:	4328      	orrs	r0, r5
 8000d96:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d9a:	fb07 1115 	mls	r1, r7, r5, r1
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	0c02      	lsrs	r2, r0, #16
 8000da4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000da8:	fb05 f10e 	mul.w	r1, r5, lr
 8000dac:	4291      	cmp	r1, r2
 8000dae:	fa04 f403 	lsl.w	r4, r4, r3
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x256>
 8000db4:	eb1c 0202 	adds.w	r2, ip, r2
 8000db8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dbc:	d22f      	bcs.n	8000e1e <__udivmoddi4+0x2ae>
 8000dbe:	4291      	cmp	r1, r2
 8000dc0:	d92d      	bls.n	8000e1e <__udivmoddi4+0x2ae>
 8000dc2:	3d02      	subs	r5, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a52      	subs	r2, r2, r1
 8000dc8:	fbb2 f1f7 	udiv	r1, r2, r7
 8000dcc:	fb07 2211 	mls	r2, r7, r1, r2
 8000dd0:	b280      	uxth	r0, r0
 8000dd2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000dd6:	fb01 f20e 	mul.w	r2, r1, lr
 8000dda:	4282      	cmp	r2, r0
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x280>
 8000dde:	eb1c 0000 	adds.w	r0, ip, r0
 8000de2:	f101 38ff 	add.w	r8, r1, #4294967295
 8000de6:	d216      	bcs.n	8000e16 <__udivmoddi4+0x2a6>
 8000de8:	4282      	cmp	r2, r0
 8000dea:	d914      	bls.n	8000e16 <__udivmoddi4+0x2a6>
 8000dec:	3902      	subs	r1, #2
 8000dee:	4460      	add	r0, ip
 8000df0:	1a80      	subs	r0, r0, r2
 8000df2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000df6:	e73a      	b.n	8000c6e <__udivmoddi4+0xfe>
 8000df8:	4631      	mov	r1, r6
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e70b      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000dfe:	4671      	mov	r1, lr
 8000e00:	e6e9      	b.n	8000bd6 <__udivmoddi4+0x66>
 8000e02:	4610      	mov	r0, r2
 8000e04:	e6fe      	b.n	8000c04 <__udivmoddi4+0x94>
 8000e06:	454d      	cmp	r5, r9
 8000e08:	d2ab      	bcs.n	8000d62 <__udivmoddi4+0x1f2>
 8000e0a:	ebb9 0802 	subs.w	r8, r9, r2
 8000e0e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000e12:	3801      	subs	r0, #1
 8000e14:	e7a5      	b.n	8000d62 <__udivmoddi4+0x1f2>
 8000e16:	4641      	mov	r1, r8
 8000e18:	e7ea      	b.n	8000df0 <__udivmoddi4+0x280>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	e796      	b.n	8000d4c <__udivmoddi4+0x1dc>
 8000e1e:	4645      	mov	r5, r8
 8000e20:	e7d1      	b.n	8000dc6 <__udivmoddi4+0x256>
 8000e22:	46d0      	mov	r8, sl
 8000e24:	e77d      	b.n	8000d22 <__udivmoddi4+0x1b2>
 8000e26:	4464      	add	r4, ip
 8000e28:	3802      	subs	r0, #2
 8000e2a:	e749      	b.n	8000cc0 <__udivmoddi4+0x150>
 8000e2c:	3d02      	subs	r5, #2
 8000e2e:	4462      	add	r2, ip
 8000e30:	e731      	b.n	8000c96 <__udivmoddi4+0x126>
 8000e32:	4608      	mov	r0, r1
 8000e34:	e70a      	b.n	8000c4c <__udivmoddi4+0xdc>
 8000e36:	4631      	mov	r1, r6
 8000e38:	e6ed      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <spi_write_array>:
 * @param len length of the data array
 * @param data pointer to the data array
 */

static inline void spi_write_array(uint8_t len, uint8_t data[])
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi3, data, len, HAL_MAX_DELAY);
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
 8000e54:	6839      	ldr	r1, [r7, #0]
 8000e56:	4803      	ldr	r0, [pc, #12]	; (8000e64 <spi_write_array+0x24>)
 8000e58:	f004 fcc5 	bl	80057e6 <HAL_SPI_Transmit>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000550 	.word	0x20000550

08000e68 <spi_write_read>:
 * @param tx_len length of the data array to be transmitted
 * @param rx_data pointer to the data array to be received
 * @param rx_len length of the data array to be received
 */
static inline void spi_write_read(uint8_t tx_Data[], uint8_t tx_len, uint8_t *rx_data, uint8_t rx_len)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	461a      	mov	r2, r3
 8000e74:	460b      	mov	r3, r1
 8000e76:	72fb      	strb	r3, [r7, #11]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	72bb      	strb	r3, [r7, #10]
  HAL_SPI_Transmit(&hspi3, tx_Data, tx_len, HAL_MAX_DELAY);
 8000e7c:	7afb      	ldrb	r3, [r7, #11]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
 8000e84:	68f9      	ldr	r1, [r7, #12]
 8000e86:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <spi_write_read+0x3c>)
 8000e88:	f004 fcad 	bl	80057e6 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3, rx_data, rx_len, HAL_MAX_DELAY);
 8000e8c:	7abb      	ldrb	r3, [r7, #10]
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	f04f 33ff 	mov.w	r3, #4294967295
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <spi_write_read+0x3c>)
 8000e98:	f004 fde8 	bl	8005a6c <HAL_SPI_Receive>

}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000550 	.word	0x20000550

08000ea8 <LTC6811_initialize>:
uint8_t wakeup = 0x00;

/*@brief Initializes all command variables
 */
void LTC6811_initialize()
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af02      	add	r7, sp, #8
  set_adc(MD_NORMAL, DCP_DISABLED, CELL_CH_ALL, AUX_CH_ALL, CHST_SC);
 8000eae:	2301      	movs	r3, #1
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f000 f81f 	bl	8000efc <set_adc>
  //set_selftest(MD_NORMAL, ST_1);
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <wakeup_idle>:

void wakeup_idle()
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ece:	4808      	ldr	r0, [pc, #32]	; (8000ef0 <wakeup_idle+0x2c>)
 8000ed0:	f002 fd8e 	bl	80039f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4906      	ldr	r1, [pc, #24]	; (8000ef4 <wakeup_idle+0x30>)
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <wakeup_idle+0x34>)
 8000edc:	f004 fc83 	bl	80057e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee6:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <wakeup_idle+0x2c>)
 8000ee8:	f002 fd82 	bl	80039f0 <HAL_GPIO_WritePin>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	200003ca 	.word	0x200003ca
 8000ef8:	20000550 	.word	0x20000550

08000efc <set_adc>:
			|-----------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|
			|ADCV:	    |   0   |   1   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CH[2] | CH[1] | CH[0] |
			|ADAX:	    |   1   |   0   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CHG[2]| CHG[1]| CHG[0]|
 ******************************************************************************************************************/
void set_adc(uint8_t MD, uint8_t DCP, uint8_t CH, uint8_t CHG, uint8_t CHST)
{
 8000efc:	b490      	push	{r4, r7}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4604      	mov	r4, r0
 8000f04:	4608      	mov	r0, r1
 8000f06:	4611      	mov	r1, r2
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4623      	mov	r3, r4
 8000f0c:	71fb      	strb	r3, [r7, #7]
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71bb      	strb	r3, [r7, #6]
 8000f12:	460b      	mov	r3, r1
 8000f14:	717b      	strb	r3, [r7, #5]
 8000f16:	4613      	mov	r3, r2
 8000f18:	713b      	strb	r3, [r7, #4]
  uint8_t md_bits;

  md_bits = (MD & 0x02) >> 1;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	105b      	asrs	r3, r3, #1
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]
  ADCV[0] = md_bits | 0x02;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <set_adc+0x94>)
 8000f30:	701a      	strb	r2, [r3, #0]
  md_bits = (MD & 0x01) << 7;
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	01db      	lsls	r3, r3, #7
 8000f36:	73fb      	strb	r3, [r7, #15]
  ADCV[1] = md_bits | 0x60 | (DCP << 4) | CH;
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	797b      	ldrb	r3, [r7, #5]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <set_adc+0x94>)
 8000f52:	705a      	strb	r2, [r3, #1]

  md_bits = (MD & 0x02) >> 1;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	105b      	asrs	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
  ADAX[0] = md_bits | 0x04;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <set_adc+0x98>)
 8000f6a:	701a      	strb	r2, [r3, #0]
  md_bits = (MD & 0x01) << 7;
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	01db      	lsls	r3, r3, #7
 8000f70:	73fb      	strb	r3, [r7, #15]
  ADAX[1] = md_bits | 0x60 | CHG;
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	793b      	ldrb	r3, [r7, #4]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <set_adc+0x98>)
 8000f82:	705a      	strb	r2, [r3, #1]
  md_bits = (MD & 0x02) >> 1;
  ADSTAT[0] = md_bits | 0x04;
  md_bits = (MD & 0x01) << 7;
  ADSTAT[1] = md_bits | 0x68 | CHST;
  */
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc90      	pop	{r4, r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	200003c4 	.word	0x200003c4
 8000f94:	200003c8 	.word	0x200003c8

08000f98 <LTC6811_adcv>:
 | CH     | Determines which cell channels are converted |
 | DCP    | Determines if Discharge is Permitted	     |

***********************************************************************************************/
void LTC6811_adcv()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;
	//1
	cmd[0] = ADCV[0];
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <LTC6811_adcv+0x74>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADCV[1];
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <LTC6811_adcv+0x74>)
 8000fa6:	785b      	ldrb	r3, [r3, #1]
 8000fa8:	707b      	strb	r3, [r7, #1]
	//2
	temp_pec = pec15_calc(2, ADCV);
 8000faa:	4918      	ldr	r1, [pc, #96]	; (800100c <LTC6811_adcv+0x74>)
 8000fac:	2002      	movs	r0, #2
 8000fae:	f000 fb0d 	bl	80015cc <pec15_calc>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	70fb      	strb	r3, [r7, #3]
	//3
	wakeup_idle();
 8000fc6:	f7ff ff7d 	bl	8000ec4 <wakeup_idle>
	//4
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd0:	480f      	ldr	r0, [pc, #60]	; (8001010 <LTC6811_adcv+0x78>)
 8000fd2:	f002 fd0d 	bl	80039f0 <HAL_GPIO_WritePin>
	spi_write_array(4, cmd);
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	2004      	movs	r0, #4
 8000fdc:	f7ff ff30 	bl	8000e40 <spi_write_array>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fe6:	480a      	ldr	r0, [pc, #40]	; (8001010 <LTC6811_adcv+0x78>)
 8000fe8:	f002 fd02 	bl	80039f0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000fec:	2301      	movs	r3, #1
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4908      	ldr	r1, [pc, #32]	; (8001014 <LTC6811_adcv+0x7c>)
 8000ff2:	4809      	ldr	r0, [pc, #36]	; (8001018 <LTC6811_adcv+0x80>)
 8000ff4:	f004 fbf7 	bl	80057e6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4905      	ldr	r1, [pc, #20]	; (8001014 <LTC6811_adcv+0x7c>)
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <LTC6811_adcv+0x80>)
 8001000:	f004 fbf1 	bl	80057e6 <HAL_SPI_Transmit>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200003c4 	.word	0x200003c4
 8001010:	40020000 	.word	0x40020000
 8001014:	200003ca 	.word	0x200003ca
 8001018:	20000550 	.word	0x20000550

0800101c <LTC6811_adax>:
 | MD     | Determines the filter corner of the ADC      |
 | CHG    | Determines which GPIO channels are converted |

*********************************************************************************************************/
void LTC6811_adax()
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;

	//1
	cmd[0] = ADAX[0];
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <LTC6811_adax+0x74>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADAX[1];
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <LTC6811_adax+0x74>)
 800102a:	785b      	ldrb	r3, [r3, #1]
 800102c:	707b      	strb	r3, [r7, #1]
	//2
	temp_pec = pec15_calc(2, ADAX);
 800102e:	4918      	ldr	r1, [pc, #96]	; (8001090 <LTC6811_adax+0x74>)
 8001030:	2002      	movs	r0, #2
 8001032:	f000 facb 	bl	80015cc <pec15_calc>
 8001036:	4603      	mov	r3, r0
 8001038:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	b29b      	uxth	r3, r3
 8001040:	b2db      	uxtb	r3, r3
 8001042:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	70fb      	strb	r3, [r7, #3]
	//3
	wakeup_idle();
 800104a:	f7ff ff3b 	bl	8000ec4 <wakeup_idle>
	//4
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001054:	480f      	ldr	r0, [pc, #60]	; (8001094 <LTC6811_adax+0x78>)
 8001056:	f002 fccb 	bl	80039f0 <HAL_GPIO_WritePin>
	spi_write_array(4, cmd);
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	2004      	movs	r0, #4
 8001060:	f7ff feee 	bl	8000e40 <spi_write_array>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800106a:	480a      	ldr	r0, [pc, #40]	; (8001094 <LTC6811_adax+0x78>)
 800106c:	f002 fcc0 	bl	80039f0 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8001070:	2301      	movs	r3, #1
 8001072:	2201      	movs	r2, #1
 8001074:	4908      	ldr	r1, [pc, #32]	; (8001098 <LTC6811_adax+0x7c>)
 8001076:	4809      	ldr	r0, [pc, #36]	; (800109c <LTC6811_adax+0x80>)
 8001078:	f004 fbb5 	bl	80057e6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 800107c:	2301      	movs	r3, #1
 800107e:	2201      	movs	r2, #1
 8001080:	4905      	ldr	r1, [pc, #20]	; (8001098 <LTC6811_adax+0x7c>)
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <LTC6811_adax+0x80>)
 8001084:	f004 fbaf 	bl	80057e6 <HAL_SPI_Transmit>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200003c8 	.word	0x200003c8
 8001094:	40020000 	.word	0x40020000
 8001098:	200003ca 	.word	0x200003ca
 800109c:	20000550 	.word	0x20000550

080010a0 <LTC6811_wrcfg>:


void LTC6811_wrcfg(uint8_t nIC, uint8_t config [][6])

{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 80010ac:	2306      	movs	r3, #6
 80010ae:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * nIC);
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	3304      	adds	r3, #4
 80010b8:	74fb      	strb	r3, [r7, #19]

	uint16_t temp_pec;
	uint8_t current_ic;
	uint8_t WRCFG_index = 4;
 80010ba:	2304      	movs	r3, #4
 80010bc:	75bb      	strb	r3, [r7, #22]
	uint8_t *WRCFG;


	WRCFG = (uint8_t *)malloc(CMD_LEN * sizeof(uint8_t));
 80010be:	7cfb      	ldrb	r3, [r7, #19]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f009 f8a9 	bl	800a218 <malloc>
 80010c6:	4603      	mov	r3, r0
 80010c8:	60fb      	str	r3, [r7, #12]

	for(current_ic = 0; current_ic < nIC; current_ic++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	75fb      	strb	r3, [r7, #23]
 80010ce:	e03f      	b.n	8001150 <LTC6811_wrcfg+0xb0>
	{
		for(uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	757b      	strb	r3, [r7, #21]
 80010d4:	e013      	b.n	80010fe <LTC6811_wrcfg+0x5e>
		{
			WRCFG[WRCFG_index] = config[current_ic][current_byte];
 80010d6:	7dfa      	ldrb	r2, [r7, #23]
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	461a      	mov	r2, r3
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	1899      	adds	r1, r3, r2
 80010e6:	7d7a      	ldrb	r2, [r7, #21]
 80010e8:	7dbb      	ldrb	r3, [r7, #22]
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	4403      	add	r3, r0
 80010ee:	5c8a      	ldrb	r2, [r1, r2]
 80010f0:	701a      	strb	r2, [r3, #0]
			WRCFG_index++;
 80010f2:	7dbb      	ldrb	r3, [r7, #22]
 80010f4:	3301      	adds	r3, #1
 80010f6:	75bb      	strb	r3, [r7, #22]
		for(uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80010f8:	7d7b      	ldrb	r3, [r7, #21]
 80010fa:	3301      	adds	r3, #1
 80010fc:	757b      	strb	r3, [r7, #21]
 80010fe:	7d7a      	ldrb	r2, [r7, #21]
 8001100:	7d3b      	ldrb	r3, [r7, #20]
 8001102:	429a      	cmp	r2, r3
 8001104:	d3e7      	bcc.n	80010d6 <LTC6811_wrcfg+0x36>
		}

		temp_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic][0]);
 8001106:	7dfa      	ldrb	r2, [r7, #23]
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	461a      	mov	r2, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	4413      	add	r3, r2
 8001116:	461a      	mov	r2, r3
 8001118:	7d3b      	ldrb	r3, [r7, #20]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fa55 	bl	80015cc <pec15_calc>
 8001122:	4603      	mov	r3, r0
 8001124:	817b      	strh	r3, [r7, #10]
		WRCFG[WRCFG_index] = (uint8_t)(temp_pec >> 8);
 8001126:	897b      	ldrh	r3, [r7, #10]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b299      	uxth	r1, r3
 800112c:	7dbb      	ldrb	r3, [r7, #22]
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	b2ca      	uxtb	r2, r1
 8001134:	701a      	strb	r2, [r3, #0]
		WRCFG[WRCFG_index + 1] = (uint8_t)temp_pec;
 8001136:	7dbb      	ldrb	r3, [r7, #22]
 8001138:	3301      	adds	r3, #1
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	4413      	add	r3, r2
 800113e:	897a      	ldrh	r2, [r7, #10]
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	701a      	strb	r2, [r3, #0]
		WRCFG_index += 2;
 8001144:	7dbb      	ldrb	r3, [r7, #22]
 8001146:	3302      	adds	r3, #2
 8001148:	75bb      	strb	r3, [r7, #22]
	for(current_ic = 0; current_ic < nIC; current_ic++)
 800114a:	7dfb      	ldrb	r3, [r7, #23]
 800114c:	3301      	adds	r3, #1
 800114e:	75fb      	strb	r3, [r7, #23]
 8001150:	7dfa      	ldrb	r2, [r7, #23]
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	429a      	cmp	r2, r3
 8001156:	d3bb      	bcc.n	80010d0 <LTC6811_wrcfg+0x30>
	}

	wakeup_idle();
 8001158:	f7ff feb4 	bl	8000ec4 <wakeup_idle>

	for(current_ic = 0; current_ic < nIC; current_ic++)
 800115c:	2300      	movs	r3, #0
 800115e:	75fb      	strb	r3, [r7, #23]
 8001160:	e045      	b.n	80011ee <LTC6811_wrcfg+0x14e>
	{
	    WRCFG[0] = 0x80 + (current_ic << 3); //Setting address
 8001162:	7dfb      	ldrb	r3, [r7, #23]
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	3b80      	subs	r3, #128	; 0x80
 800116a:	b2da      	uxtb	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	701a      	strb	r2, [r3, #0]
	    WRCFG[1] = 0x01;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3301      	adds	r3, #1
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
	    temp_pec = pec15_calc(2, WRCFG);
 8001178:	68f9      	ldr	r1, [r7, #12]
 800117a:	2002      	movs	r0, #2
 800117c:	f000 fa26 	bl	80015cc <pec15_calc>
 8001180:	4603      	mov	r3, r0
 8001182:	817b      	strh	r3, [r7, #10]
	    WRCFG[2] = (uint8_t)(temp_pec >> 8);
 8001184:	897b      	ldrh	r3, [r7, #10]
 8001186:	0a1b      	lsrs	r3, r3, #8
 8001188:	b29a      	uxth	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	3302      	adds	r3, #2
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	701a      	strb	r2, [r3, #0]
	    WRCFG[3] = (uint8_t)(temp_pec);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3303      	adds	r3, #3
 8001196:	897a      	ldrh	r2, [r7, #10]
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a2:	4818      	ldr	r0, [pc, #96]	; (8001204 <LTC6811_wrcfg+0x164>)
 80011a4:	f002 fc24 	bl	80039f0 <HAL_GPIO_WritePin>
		spi_write_array(4, WRCFG);
 80011a8:	68f9      	ldr	r1, [r7, #12]
 80011aa:	2004      	movs	r0, #4
 80011ac:	f7ff fe48 	bl	8000e40 <spi_write_array>
		spi_write_array(8, &WRCFG[4 + (8 * current_ic)]);
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	3304      	adds	r3, #4
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	2008      	movs	r0, #8
 80011c0:	f7ff fe3e 	bl	8000e40 <spi_write_array>
		HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ca:	480e      	ldr	r0, [pc, #56]	; (8001204 <LTC6811_wrcfg+0x164>)
 80011cc:	f002 fc10 	bl	80039f0 <HAL_GPIO_WritePin>


		HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 80011d0:	2301      	movs	r3, #1
 80011d2:	2201      	movs	r2, #1
 80011d4:	490c      	ldr	r1, [pc, #48]	; (8001208 <LTC6811_wrcfg+0x168>)
 80011d6:	480d      	ldr	r0, [pc, #52]	; (800120c <LTC6811_wrcfg+0x16c>)
 80011d8:	f004 fb05 	bl	80057e6 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 80011dc:	2301      	movs	r3, #1
 80011de:	2201      	movs	r2, #1
 80011e0:	4909      	ldr	r1, [pc, #36]	; (8001208 <LTC6811_wrcfg+0x168>)
 80011e2:	480a      	ldr	r0, [pc, #40]	; (800120c <LTC6811_wrcfg+0x16c>)
 80011e4:	f004 faff 	bl	80057e6 <HAL_SPI_Transmit>
	for(current_ic = 0; current_ic < nIC; current_ic++)
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	3301      	adds	r3, #1
 80011ec:	75fb      	strb	r3, [r7, #23]
 80011ee:	7dfa      	ldrb	r2, [r7, #23]
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d3b5      	bcc.n	8001162 <LTC6811_wrcfg+0xc2>

	}

	free(WRCFG);
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f009 f816 	bl	800a228 <free>
}
 80011fc:	bf00      	nop
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40020000 	.word	0x40020000
 8001208:	200003ca 	.word	0x200003ca
 800120c:	20000550 	.word	0x20000550

08001210 <LTC6811_rdcv>:
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
}
*/

uint8_t LTC6811_rdcv(uint8_t reg, uint8_t nIC, uint16_t cell_codes[][12])
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	603a      	str	r2, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
 800121c:	460b      	mov	r3, r1
 800121e:	71bb      	strb	r3, [r7, #6]
	const uint8_t NUM_RX_BYT = 8;
 8001220:	2308      	movs	r3, #8
 8001222:	76bb      	strb	r3, [r7, #26]
	const uint8_t BYT_IN_REG = 6;
 8001224:	2306      	movs	r3, #6
 8001226:	767b      	strb	r3, [r7, #25]
	const uint8_t CELL_IN_REG = 3;
 8001228:	2303      	movs	r3, #3
 800122a:	763b      	strb	r3, [r7, #24]

	uint8_t pec_error = 0; //pec Error wenn -1
 800122c:	2300      	movs	r3, #0
 800122e:	77fb      	strb	r3, [r7, #31]
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	77bb      	strb	r3, [r7, #30]
	uint8_t *cell_data;
	cell_data = (uint8_t *)malloc((NUM_RX_BYT * nIC) * sizeof(uint8_t));
 8001234:	7ebb      	ldrb	r3, [r7, #26]
 8001236:	79ba      	ldrb	r2, [r7, #6]
 8001238:	fb02 f303 	mul.w	r3, r2, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f008 ffeb 	bl	800a218 <malloc>
 8001242:	4603      	mov	r3, r0
 8001244:	617b      	str	r3, [r7, #20]

	for(uint8_t cell_reg = 1; cell_reg < 5; cell_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001246:	2301      	movs	r3, #1
 8001248:	777b      	strb	r3, [r7, #29]
 800124a:	e068      	b.n	800131e <LTC6811_rdcv+0x10e>
	{
		data_counter = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	77bb      	strb	r3, [r7, #30]
		LTC6811_rdcv_reg(cell_reg, nIC, cell_data);
 8001250:	79b9      	ldrb	r1, [r7, #6]
 8001252:	7f7b      	ldrb	r3, [r7, #29]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f86c 	bl	8001334 <LTC6811_rdcv_reg>

		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 800125c:	2300      	movs	r3, #0
 800125e:	773b      	strb	r3, [r7, #28]
 8001260:	e056      	b.n	8001310 <LTC6811_rdcv+0x100>
		{
			 // current_ic is used as an IC counter
			for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 8001262:	2300      	movs	r3, #0
 8001264:	76fb      	strb	r3, [r7, #27]
 8001266:	e026      	b.n	80012b6 <LTC6811_rdcv+0xa6>
			{
				uint16_t parsed_cell = cell_data[data_counter] | (cell_data[data_counter + 1] << 8);
 8001268:	7fbb      	ldrb	r3, [r7, #30]
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b21a      	sxth	r2, r3
 8001272:	7fbb      	ldrb	r3, [r7, #30]
 8001274:	3301      	adds	r3, #1
 8001276:	6979      	ldr	r1, [r7, #20]
 8001278:	440b      	add	r3, r1
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	b21b      	sxth	r3, r3
 8001280:	4313      	orrs	r3, r2
 8001282:	b21b      	sxth	r3, r3
 8001284:	81fb      	strh	r3, [r7, #14]
				cell_codes[current_ic][current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8001286:	7f3a      	ldrb	r2, [r7, #28]
 8001288:	4613      	mov	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4413      	add	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	461a      	mov	r2, r3
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	4413      	add	r3, r2
 8001296:	7ef9      	ldrb	r1, [r7, #27]
 8001298:	7f7a      	ldrb	r2, [r7, #29]
 800129a:	3a01      	subs	r2, #1
 800129c:	7e38      	ldrb	r0, [r7, #24]
 800129e:	fb00 f202 	mul.w	r2, r0, r2
 80012a2:	440a      	add	r2, r1
 80012a4:	89f9      	ldrh	r1, [r7, #14]
 80012a6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter = data_counter + 2;
 80012aa:	7fbb      	ldrb	r3, [r7, #30]
 80012ac:	3302      	adds	r3, #2
 80012ae:	77bb      	strb	r3, [r7, #30]
			for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 80012b0:	7efb      	ldrb	r3, [r7, #27]
 80012b2:	3301      	adds	r3, #1
 80012b4:	76fb      	strb	r3, [r7, #27]
 80012b6:	7efa      	ldrb	r2, [r7, #27]
 80012b8:	7e3b      	ldrb	r3, [r7, #24]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d3d4      	bcc.n	8001268 <LTC6811_rdcv+0x58>
			}
			received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter + 1];
 80012be:	7fbb      	ldrb	r3, [r7, #30]
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	4413      	add	r3, r2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	7fbb      	ldrb	r3, [r7, #30]
 80012ce:	3301      	adds	r3, #1
 80012d0:	6979      	ldr	r1, [r7, #20]
 80012d2:	440b      	add	r3, r1
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	4413      	add	r3, r2
 80012da:	827b      	strh	r3, [r7, #18]
			data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 80012dc:	7f3b      	ldrb	r3, [r7, #28]
 80012de:	7eba      	ldrb	r2, [r7, #26]
 80012e0:	fb02 f303 	mul.w	r3, r2, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	441a      	add	r2, r3
 80012ea:	7e7b      	ldrb	r3, [r7, #25]
 80012ec:	4611      	mov	r1, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f96c 	bl	80015cc <pec15_calc>
 80012f4:	4603      	mov	r3, r0
 80012f6:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 80012f8:	8a7a      	ldrh	r2, [r7, #18]
 80012fa:	8a3b      	ldrh	r3, [r7, #16]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d001      	beq.n	8001304 <LTC6811_rdcv+0xf4>
			{
			  pec_error = -1;
 8001300:	23ff      	movs	r3, #255	; 0xff
 8001302:	77fb      	strb	r3, [r7, #31]
			}
			data_counter = data_counter + 2;
 8001304:	7fbb      	ldrb	r3, [r7, #30]
 8001306:	3302      	adds	r3, #2
 8001308:	77bb      	strb	r3, [r7, #30]
		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 800130a:	7f3b      	ldrb	r3, [r7, #28]
 800130c:	3301      	adds	r3, #1
 800130e:	773b      	strb	r3, [r7, #28]
 8001310:	7f3a      	ldrb	r2, [r7, #28]
 8001312:	79bb      	ldrb	r3, [r7, #6]
 8001314:	429a      	cmp	r2, r3
 8001316:	d3a4      	bcc.n	8001262 <LTC6811_rdcv+0x52>
	for(uint8_t cell_reg = 1; cell_reg < 5; cell_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001318:	7f7b      	ldrb	r3, [r7, #29]
 800131a:	3301      	adds	r3, #1
 800131c:	777b      	strb	r3, [r7, #29]
 800131e:	7f7b      	ldrb	r3, [r7, #29]
 8001320:	2b04      	cmp	r3, #4
 8001322:	d993      	bls.n	800124c <LTC6811_rdcv+0x3c>
		}
	}

	free(cell_data);
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f008 ff7f 	bl	800a228 <free>
	return(pec_error);
 800132a:	7ffb      	ldrb	r3, [r7, #31]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <LTC6811_rdcv_reg>:

void LTC6811_rdcv_reg(uint8_t reg, uint8_t nIC, uint8_t *data)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	603a      	str	r2, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	460b      	mov	r3, r1
 8001342:	71bb      	strb	r3, [r7, #6]
	uint8_t RDCV[4];
	uint16_t temp_pec;

	switch(reg){
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	3b01      	subs	r3, #1
 8001348:	2b03      	cmp	r3, #3
 800134a:	d817      	bhi.n	800137c <LTC6811_rdcv_reg+0x48>
 800134c:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <LTC6811_rdcv_reg+0x20>)
 800134e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001352:	bf00      	nop
 8001354:	08001365 	.word	0x08001365
 8001358:	0800136b 	.word	0x0800136b
 800135c:	08001371 	.word	0x08001371
 8001360:	08001377 	.word	0x08001377
		case 1: RDCV[1] = 0x04; break;
 8001364:	2304      	movs	r3, #4
 8001366:	727b      	strb	r3, [r7, #9]
 8001368:	e008      	b.n	800137c <LTC6811_rdcv_reg+0x48>
		case 2: RDCV[1] = 0x06; break;
 800136a:	2306      	movs	r3, #6
 800136c:	727b      	strb	r3, [r7, #9]
 800136e:	e005      	b.n	800137c <LTC6811_rdcv_reg+0x48>
		case 3: RDCV[1] = 0x08; break;
 8001370:	2308      	movs	r3, #8
 8001372:	727b      	strb	r3, [r7, #9]
 8001374:	e002      	b.n	800137c <LTC6811_rdcv_reg+0x48>
		case 4: RDCV[1] = 0x0a; break;
 8001376:	230a      	movs	r3, #10
 8001378:	727b      	strb	r3, [r7, #9]
 800137a:	bf00      	nop
	}

	wakeup_idle();
 800137c:	f7ff fda2 	bl	8000ec4 <wakeup_idle>

    //Register A-D = reg 1-4
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	e02f      	b.n	80013e6 <LTC6811_rdcv_reg+0xb2>
    {
    	RDCV[0] = 0x80 + (current_ic << 3);
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	3b80      	subs	r3, #128	; 0x80
 800138e:	b2db      	uxtb	r3, r3
 8001390:	723b      	strb	r3, [r7, #8]
        temp_pec = pec15_calc(2, RDCV);
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	4619      	mov	r1, r3
 8001398:	2002      	movs	r0, #2
 800139a:	f000 f917 	bl	80015cc <pec15_calc>
 800139e:	4603      	mov	r3, r0
 80013a0:	81bb      	strh	r3, [r7, #12]
        RDCV[2] = (uint8_t)(temp_pec >> 8);
 80013a2:	89bb      	ldrh	r3, [r7, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	72bb      	strb	r3, [r7, #10]
        RDCV[3] = (uint8_t)(temp_pec);
 80013ac:	89bb      	ldrh	r3, [r7, #12]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b8:	480f      	ldr	r0, [pc, #60]	; (80013f8 <LTC6811_rdcv_reg+0xc4>)
 80013ba:	f002 fb19 	bl	80039f0 <HAL_GPIO_WritePin>
        spi_write_read(RDCV, 4, &data[current_ic * 8], 8);
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	461a      	mov	r2, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	441a      	add	r2, r3
 80013c8:	f107 0008 	add.w	r0, r7, #8
 80013cc:	2308      	movs	r3, #8
 80013ce:	2104      	movs	r1, #4
 80013d0:	f7ff fd4a 	bl	8000e68 <spi_write_read>
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013da:	4807      	ldr	r0, [pc, #28]	; (80013f8 <LTC6811_rdcv_reg+0xc4>)
 80013dc:	f002 fb08 	bl	80039f0 <HAL_GPIO_WritePin>
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	3301      	adds	r3, #1
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d3cb      	bcc.n	8001386 <LTC6811_rdcv_reg+0x52>
    }
}
 80013ee:	bf00      	nop
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40020000 	.word	0x40020000

080013fc <LTC6811_rdaux>:

int8_t LTC6811_rdaux(uint8_t reg, uint8_t nIC, uint16_t aux_codes[][6])
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	603a      	str	r2, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	460b      	mov	r3, r1
 800140a:	71bb      	strb	r3, [r7, #6]
	const uint8_t NUM_RX_BYT = 8;
 800140c:	2308      	movs	r3, #8
 800140e:	76bb      	strb	r3, [r7, #26]
	const uint8_t BYT_IN_REG = 6;
 8001410:	2306      	movs	r3, #6
 8001412:	767b      	strb	r3, [r7, #25]
	const uint8_t AUX_IN_REG = 3;
 8001414:	2303      	movs	r3, #3
 8001416:	763b      	strb	r3, [r7, #24]

	uint8_t pec_error = 0; //pec Error wenn -1
 8001418:	2300      	movs	r3, #0
 800141a:	77fb      	strb	r3, [r7, #31]
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	77bb      	strb	r3, [r7, #30]
	uint8_t *aux_data;

	aux_data = (uint8_t *)malloc((NUM_RX_BYT * nIC) * sizeof(uint8_t));
 8001420:	7ebb      	ldrb	r3, [r7, #26]
 8001422:	79ba      	ldrb	r2, [r7, #6]
 8001424:	fb02 f303 	mul.w	r3, r2, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f008 fef5 	bl	800a218 <malloc>
 800142e:	4603      	mov	r3, r0
 8001430:	617b      	str	r3, [r7, #20]

	for(uint8_t aux_reg = 1; aux_reg < AUX_IN_REG; aux_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001432:	2301      	movs	r3, #1
 8001434:	777b      	strb	r3, [r7, #29]
 8001436:	e068      	b.n	800150a <LTC6811_rdaux+0x10e>
	{
		data_counter = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	77bb      	strb	r3, [r7, #30]
		LTC6811_rdaux_reg(aux_reg, nIC, aux_data);
 800143c:	79b9      	ldrb	r1, [r7, #6]
 800143e:	7f7b      	ldrb	r3, [r7, #29]
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f86e 	bl	8001524 <LTC6811_rdaux_reg>

		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 8001448:	2300      	movs	r3, #0
 800144a:	773b      	strb	r3, [r7, #28]
 800144c:	e056      	b.n	80014fc <LTC6811_rdaux+0x100>
		{
			 // current_ic is used as an IC counter
			for(uint8_t current_cell = 0; current_cell < AUX_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 800144e:	2300      	movs	r3, #0
 8001450:	76fb      	strb	r3, [r7, #27]
 8001452:	e026      	b.n	80014a2 <LTC6811_rdaux+0xa6>
			{
				uint16_t parsed_cell = aux_data[data_counter] | (aux_data[data_counter + 1] << 8);
 8001454:	7fbb      	ldrb	r3, [r7, #30]
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	4413      	add	r3, r2
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b21a      	sxth	r2, r3
 800145e:	7fbb      	ldrb	r3, [r7, #30]
 8001460:	3301      	adds	r3, #1
 8001462:	6979      	ldr	r1, [r7, #20]
 8001464:	440b      	add	r3, r1
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21b      	sxth	r3, r3
 8001470:	81fb      	strh	r3, [r7, #14]
				aux_codes[current_ic][current_cell + ((aux_reg - 1) * AUX_IN_REG)] = parsed_cell;
 8001472:	7f3a      	ldrb	r2, [r7, #28]
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	461a      	mov	r2, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	4413      	add	r3, r2
 8001482:	7ef9      	ldrb	r1, [r7, #27]
 8001484:	7f7a      	ldrb	r2, [r7, #29]
 8001486:	3a01      	subs	r2, #1
 8001488:	7e38      	ldrb	r0, [r7, #24]
 800148a:	fb00 f202 	mul.w	r2, r0, r2
 800148e:	440a      	add	r2, r1
 8001490:	89f9      	ldrh	r1, [r7, #14]
 8001492:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter += 2;
 8001496:	7fbb      	ldrb	r3, [r7, #30]
 8001498:	3302      	adds	r3, #2
 800149a:	77bb      	strb	r3, [r7, #30]
			for(uint8_t current_cell = 0; current_cell < AUX_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 800149c:	7efb      	ldrb	r3, [r7, #27]
 800149e:	3301      	adds	r3, #1
 80014a0:	76fb      	strb	r3, [r7, #27]
 80014a2:	7efa      	ldrb	r2, [r7, #27]
 80014a4:	7e3b      	ldrb	r3, [r7, #24]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d3d4      	bcc.n	8001454 <LTC6811_rdaux+0x58>
			}
			received_pec = (aux_data[data_counter] << 8) + aux_data[data_counter + 1];
 80014aa:	7fbb      	ldrb	r3, [r7, #30]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	7fbb      	ldrb	r3, [r7, #30]
 80014ba:	3301      	adds	r3, #1
 80014bc:	6979      	ldr	r1, [r7, #20]
 80014be:	440b      	add	r3, r1
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	4413      	add	r3, r2
 80014c6:	827b      	strh	r3, [r7, #18]
			data_pec = pec15_calc(BYT_IN_REG, &aux_data[current_ic * NUM_RX_BYT]);
 80014c8:	7f3b      	ldrb	r3, [r7, #28]
 80014ca:	7eba      	ldrb	r2, [r7, #26]
 80014cc:	fb02 f303 	mul.w	r3, r2, r3
 80014d0:	461a      	mov	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	441a      	add	r2, r3
 80014d6:	7e7b      	ldrb	r3, [r7, #25]
 80014d8:	4611      	mov	r1, r2
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f876 	bl	80015cc <pec15_calc>
 80014e0:	4603      	mov	r3, r0
 80014e2:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 80014e4:	8a7a      	ldrh	r2, [r7, #18]
 80014e6:	8a3b      	ldrh	r3, [r7, #16]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d001      	beq.n	80014f0 <LTC6811_rdaux+0xf4>
			{
			  pec_error = -1;
 80014ec:	23ff      	movs	r3, #255	; 0xff
 80014ee:	77fb      	strb	r3, [r7, #31]
			}
			data_counter += 2;
 80014f0:	7fbb      	ldrb	r3, [r7, #30]
 80014f2:	3302      	adds	r3, #2
 80014f4:	77bb      	strb	r3, [r7, #30]
		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 80014f6:	7f3b      	ldrb	r3, [r7, #28]
 80014f8:	3301      	adds	r3, #1
 80014fa:	773b      	strb	r3, [r7, #28]
 80014fc:	7f3a      	ldrb	r2, [r7, #28]
 80014fe:	79bb      	ldrb	r3, [r7, #6]
 8001500:	429a      	cmp	r2, r3
 8001502:	d3a4      	bcc.n	800144e <LTC6811_rdaux+0x52>
	for(uint8_t aux_reg = 1; aux_reg < AUX_IN_REG; aux_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001504:	7f7b      	ldrb	r3, [r7, #29]
 8001506:	3301      	adds	r3, #1
 8001508:	777b      	strb	r3, [r7, #29]
 800150a:	7f7a      	ldrb	r2, [r7, #29]
 800150c:	7e3b      	ldrb	r3, [r7, #24]
 800150e:	429a      	cmp	r2, r3
 8001510:	d392      	bcc.n	8001438 <LTC6811_rdaux+0x3c>
		}
	}

	free(aux_data);
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f008 fe88 	bl	800a228 <free>
	return(pec_error);
 8001518:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <LTC6811_rdaux_reg>:

void LTC6811_rdaux_reg(uint8_t reg, uint8_t nIC, uint8_t *data)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	603a      	str	r2, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
 8001530:	460b      	mov	r3, r1
 8001532:	71bb      	strb	r3, [r7, #6]
	uint8_t RDAUX[4];
	uint16_t temp_pec;

	switch(reg){
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d002      	beq.n	8001540 <LTC6811_rdaux_reg+0x1c>
 800153a:	2b02      	cmp	r3, #2
 800153c:	d003      	beq.n	8001546 <LTC6811_rdaux_reg+0x22>
 800153e:	e005      	b.n	800154c <LTC6811_rdaux_reg+0x28>
		case 1: RDAUX[1] = 0xC; break;
 8001540:	230c      	movs	r3, #12
 8001542:	727b      	strb	r3, [r7, #9]
 8001544:	e002      	b.n	800154c <LTC6811_rdaux_reg+0x28>
		case 2: RDAUX[1] = 0xE; break;
 8001546:	230e      	movs	r3, #14
 8001548:	727b      	strb	r3, [r7, #9]
 800154a:	bf00      	nop
	}

	wakeup_idle();
 800154c:	f7ff fcba 	bl	8000ec4 <wakeup_idle>

    //Register A-D = reg 1-4
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e02f      	b.n	80015b6 <LTC6811_rdaux_reg+0x92>
    {
    	RDAUX[0] = 0x80 + (current_ic << 3);
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	3b80      	subs	r3, #128	; 0x80
 800155e:	b2db      	uxtb	r3, r3
 8001560:	723b      	strb	r3, [r7, #8]
        temp_pec = pec15_calc(2, RDAUX);
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	4619      	mov	r1, r3
 8001568:	2002      	movs	r0, #2
 800156a:	f000 f82f 	bl	80015cc <pec15_calc>
 800156e:	4603      	mov	r3, r0
 8001570:	81bb      	strh	r3, [r7, #12]
        RDAUX[2] = (uint8_t)(temp_pec >> 8);
 8001572:	89bb      	ldrh	r3, [r7, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	b29b      	uxth	r3, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	72bb      	strb	r3, [r7, #10]
        RDAUX[3] = (uint8_t)(temp_pec);
 800157c:	89bb      	ldrh	r3, [r7, #12]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001588:	480f      	ldr	r0, [pc, #60]	; (80015c8 <LTC6811_rdaux_reg+0xa4>)
 800158a:	f002 fa31 	bl	80039f0 <HAL_GPIO_WritePin>
        spi_write_read(RDAUX, 4, &data[current_ic * 8], 8);
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	461a      	mov	r2, r3
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	441a      	add	r2, r3
 8001598:	f107 0008 	add.w	r0, r7, #8
 800159c:	2308      	movs	r3, #8
 800159e:	2104      	movs	r1, #4
 80015a0:	f7ff fc62 	bl	8000e68 <spi_write_read>
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015aa:	4807      	ldr	r0, [pc, #28]	; (80015c8 <LTC6811_rdaux_reg+0xa4>)
 80015ac:	f002 fa20 	bl	80039f0 <HAL_GPIO_WritePin>
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	3301      	adds	r3, #1
 80015b4:	73fb      	strb	r3, [r7, #15]
 80015b6:	7bfa      	ldrb	r2, [r7, #15]
 80015b8:	79bb      	ldrb	r3, [r7, #6]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d3cb      	bcc.n	8001556 <LTC6811_rdaux_reg+0x32>
    }
}
 80015be:	bf00      	nop
 80015c0:	bf00      	nop
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40020000 	.word	0x40020000

080015cc <pec15_calc>:
}
*/

//char *data uint8_t *data , uint8_t len
uint16_t pec15_calc(uint8_t len, uint8_t *data)
 {
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
 uint16_t remainder, address;

 remainder = 16;//PEC seed
 80015d8:	2310      	movs	r3, #16
 80015da:	82fb      	strh	r3, [r7, #22]
 for (int i = 0; i < len; i++)
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	e018      	b.n	8001614 <pec15_calc+0x48>
 {
 address = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 80015e2:	8afb      	ldrh	r3, [r7, #22]
 80015e4:	09db      	lsrs	r3, r3, #7
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	6839      	ldr	r1, [r7, #0]
 80015ec:	440b      	add	r3, r1
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	4053      	eors	r3, r2
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	81fb      	strh	r3, [r7, #14]
 remainder = (remainder << 8 ) ^ pec15Table[address];
 80015fa:	8afb      	ldrh	r3, [r7, #22]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	b29a      	uxth	r2, r3
 8001600:	89fb      	ldrh	r3, [r7, #14]
 8001602:	490a      	ldr	r1, [pc, #40]	; (800162c <pec15_calc+0x60>)
 8001604:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001608:	b29b      	uxth	r3, r3
 800160a:	4053      	eors	r3, r2
 800160c:	82fb      	strh	r3, [r7, #22]
 for (int i = 0; i < len; i++)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	3301      	adds	r3, #1
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	429a      	cmp	r2, r3
 800161a:	dbe2      	blt.n	80015e2 <pec15_calc+0x16>
 }
 return (remainder*2);//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 800161c:	8afb      	ldrh	r3, [r7, #22]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	b29b      	uxth	r3, r3
 }
 8001622:	4618      	mov	r0, r3
 8001624:	371c      	adds	r7, #28
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	0800cfbc 	.word	0x0800cfbc

08001630 <HAL_TIM_PeriodElapsedCallback>:
 * HLCK 96 MHz
 * APB1 48 MHz
 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

CAN_interrupt();
 8001638:	f000 fa26 	bl	8001a88 <CAN_interrupt>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
   {
 8001644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001646:	b089      	sub	sp, #36	; 0x24
 8001648:	af06      	add	r7, sp, #24
 800164a:	6078      	str	r0, [r7, #4]
    CAN_RX(hcan1);
 800164c:	4e08      	ldr	r6, [pc, #32]	; (8001670 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800164e:	466d      	mov	r5, sp
 8001650:	f106 0410 	add.w	r4, r6, #16
 8001654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001656:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001658:	e894 0003 	ldmia.w	r4, {r0, r1}
 800165c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001660:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001664:	f000 fb3c 	bl	8001ce0 <CAN_RX>
   }
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001670:	200004f8 	.word	0x200004f8

08001674 <BMS_init>:


void BMS_init()
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	LTC6811_initialize();
 8001678:	f7ff fc16 	bl	8000ea8 <LTC6811_initialize>
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <BMS>:

void BMS()		// Battery Management System function for main loop.
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
	uint8_t pec = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	713b      	strb	r3, [r7, #4]
	static uint8_t selTemp = 0;
	uint16_t VOV = MAX_VOLTAGE/16;					// Formeln aus Datenblatt S.65
 800168a:	f640 1385 	movw	r3, #2437	; 0x985
 800168e:	807b      	strh	r3, [r7, #2]
	uint16_t VUV = (MIN_VOLTAGE/16)-1;
 8001690:	f240 7352 	movw	r3, #1874	; 0x752
 8001694:	803b      	strh	r3, [r7, #0]


	for (uint8_t i = 0; i < NUM_STACK; i++)
 8001696:	2300      	movs	r3, #0
 8001698:	71fb      	strb	r3, [r7, #7]
 800169a:	e0b4      	b.n	8001806 <BMS+0x186>
		cfg[i][4] = 0x00 | OV_flag[i];
		cfg[i][5] = 0x00 | (OV_flag[i]>>8);

*/
		//Balancing without flags
		cfg[i][0] = 0x3C | ((selTemp << 6) & 0xC0);		//cfg : Databytes in config register of the LTC6811
 800169c:	4b7f      	ldr	r3, [pc, #508]	; (800189c <BMS+0x21c>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	019b      	lsls	r3, r3, #6
 80016a2:	b25b      	sxtb	r3, r3
 80016a4:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	79fa      	ldrb	r2, [r7, #7]
 80016ac:	b2d8      	uxtb	r0, r3
 80016ae:	497c      	ldr	r1, [pc, #496]	; (80018a0 <BMS+0x220>)
 80016b0:	4613      	mov	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4413      	add	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	440b      	add	r3, r1
 80016ba:	4602      	mov	r2, r0
 80016bc:	701a      	strb	r2, [r3, #0]
		cfg[i][1] = 0x00;
 80016be:	79fa      	ldrb	r2, [r7, #7]
 80016c0:	4977      	ldr	r1, [pc, #476]	; (80018a0 <BMS+0x220>)
 80016c2:	4613      	mov	r3, r2
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4413      	add	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	440b      	add	r3, r1
 80016cc:	3301      	adds	r3, #1
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
		cfg[i][2] = 0x00;
 80016d2:	79fa      	ldrb	r2, [r7, #7]
 80016d4:	4972      	ldr	r1, [pc, #456]	; (80018a0 <BMS+0x220>)
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	440b      	add	r3, r1
 80016e0:	3302      	adds	r3, #2
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
		cfg[i][3] = 0x00;
 80016e6:	79fa      	ldrb	r2, [r7, #7]
 80016e8:	496d      	ldr	r1, [pc, #436]	; (80018a0 <BMS+0x220>)
 80016ea:	4613      	mov	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4413      	add	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	440b      	add	r3, r1
 80016f4:	3303      	adds	r3, #3
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
		cfg[i][4] = 0x00;
 80016fa:	79fa      	ldrb	r2, [r7, #7]
 80016fc:	4968      	ldr	r1, [pc, #416]	; (80018a0 <BMS+0x220>)
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	440b      	add	r3, r1
 8001708:	3304      	adds	r3, #4
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
		cfg[i][5] = 0x00;
 800170e:	79fa      	ldrb	r2, [r7, #7]
 8001710:	4963      	ldr	r1, [pc, #396]	; (80018a0 <BMS+0x220>)
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	440b      	add	r3, r1
 800171c:	3305      	adds	r3, #5
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]

		if(balancing)
 8001722:	4b60      	ldr	r3, [pc, #384]	; (80018a4 <BMS+0x224>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d06a      	beq.n	8001800 <BMS+0x180>
		{
			if(selTemp < 3)
 800172a:	4b5c      	ldr	r3, [pc, #368]	; (800189c <BMS+0x21c>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d866      	bhi.n	8001800 <BMS+0x180>
			{
				for(uint8_t j = 0; j < 8; j++)
 8001732:	2300      	movs	r3, #0
 8001734:	71bb      	strb	r3, [r7, #6]
 8001736:	e02c      	b.n	8001792 <BMS+0x112>
				{
					if(cellVoltages[i * NUM_STACK + j] - MAX_VOLTAGE > balanceMargin)cfg[i][4] |= 1 << j;
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	005a      	lsls	r2, r3, #1
 800173c:	79bb      	ldrb	r3, [r7, #6]
 800173e:	4413      	add	r3, r2
 8001740:	4a59      	ldr	r2, [pc, #356]	; (80018a8 <BMS+0x228>)
 8001742:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001746:	f5a3 4318 	sub.w	r3, r3, #38912	; 0x9800
 800174a:	3b58      	subs	r3, #88	; 0x58
 800174c:	4a57      	ldr	r2, [pc, #348]	; (80018ac <BMS+0x22c>)
 800174e:	8812      	ldrh	r2, [r2, #0]
 8001750:	4293      	cmp	r3, r2
 8001752:	dd1b      	ble.n	800178c <BMS+0x10c>
 8001754:	79fa      	ldrb	r2, [r7, #7]
 8001756:	4952      	ldr	r1, [pc, #328]	; (80018a0 <BMS+0x220>)
 8001758:	4613      	mov	r3, r2
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4413      	add	r3, r2
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	440b      	add	r3, r1
 8001762:	3304      	adds	r3, #4
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	b25a      	sxtb	r2, r3
 8001768:	79bb      	ldrb	r3, [r7, #6]
 800176a:	2101      	movs	r1, #1
 800176c:	fa01 f303 	lsl.w	r3, r1, r3
 8001770:	b25b      	sxtb	r3, r3
 8001772:	4313      	orrs	r3, r2
 8001774:	b25b      	sxtb	r3, r3
 8001776:	79fa      	ldrb	r2, [r7, #7]
 8001778:	b2d8      	uxtb	r0, r3
 800177a:	4949      	ldr	r1, [pc, #292]	; (80018a0 <BMS+0x220>)
 800177c:	4613      	mov	r3, r2
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	4413      	add	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	440b      	add	r3, r1
 8001786:	3304      	adds	r3, #4
 8001788:	4602      	mov	r2, r0
 800178a:	701a      	strb	r2, [r3, #0]
				for(uint8_t j = 0; j < 8; j++)
 800178c:	79bb      	ldrb	r3, [r7, #6]
 800178e:	3301      	adds	r3, #1
 8001790:	71bb      	strb	r3, [r7, #6]
 8001792:	79bb      	ldrb	r3, [r7, #6]
 8001794:	2b07      	cmp	r3, #7
 8001796:	d9cf      	bls.n	8001738 <BMS+0xb8>
				}
				for(uint8_t j = 0; j < 3; j++)
 8001798:	2300      	movs	r3, #0
 800179a:	717b      	strb	r3, [r7, #5]
 800179c:	e02d      	b.n	80017fa <BMS+0x17a>
				{
					if(cellVoltages[i * NUM_STACK + j + 8] - MAX_VOLTAGE > balanceMargin)cfg[i][5] |= 1 << j;
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	005a      	lsls	r2, r3, #1
 80017a2:	797b      	ldrb	r3, [r7, #5]
 80017a4:	4413      	add	r3, r2
 80017a6:	3308      	adds	r3, #8
 80017a8:	4a3f      	ldr	r2, [pc, #252]	; (80018a8 <BMS+0x228>)
 80017aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017ae:	f5a3 4318 	sub.w	r3, r3, #38912	; 0x9800
 80017b2:	3b58      	subs	r3, #88	; 0x58
 80017b4:	4a3d      	ldr	r2, [pc, #244]	; (80018ac <BMS+0x22c>)
 80017b6:	8812      	ldrh	r2, [r2, #0]
 80017b8:	4293      	cmp	r3, r2
 80017ba:	dd1b      	ble.n	80017f4 <BMS+0x174>
 80017bc:	79fa      	ldrb	r2, [r7, #7]
 80017be:	4938      	ldr	r1, [pc, #224]	; (80018a0 <BMS+0x220>)
 80017c0:	4613      	mov	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4413      	add	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	440b      	add	r3, r1
 80017ca:	3305      	adds	r3, #5
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b25a      	sxtb	r2, r3
 80017d0:	797b      	ldrb	r3, [r7, #5]
 80017d2:	2101      	movs	r1, #1
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	4313      	orrs	r3, r2
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	79fa      	ldrb	r2, [r7, #7]
 80017e0:	b2d8      	uxtb	r0, r3
 80017e2:	492f      	ldr	r1, [pc, #188]	; (80018a0 <BMS+0x220>)
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	440b      	add	r3, r1
 80017ee:	3305      	adds	r3, #5
 80017f0:	4602      	mov	r2, r0
 80017f2:	701a      	strb	r2, [r3, #0]
				for(uint8_t j = 0; j < 3; j++)
 80017f4:	797b      	ldrb	r3, [r7, #5]
 80017f6:	3301      	adds	r3, #1
 80017f8:	717b      	strb	r3, [r7, #5]
 80017fa:	797b      	ldrb	r3, [r7, #5]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d9ce      	bls.n	800179e <BMS+0x11e>
	for (uint8_t i = 0; i < NUM_STACK; i++)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	3301      	adds	r3, #1
 8001804:	71fb      	strb	r3, [r7, #7]
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	2b01      	cmp	r3, #1
 800180a:	f67f af47 	bls.w	800169c <BMS+0x1c>
	/*
	LTC6811_clrstat();
	HAL_Delay(3);
*/

	LTC6811_wrcfg(NUM_STACK, (uint8_t(*)[6])cfg);		// Write config
 800180e:	4924      	ldr	r1, [pc, #144]	; (80018a0 <BMS+0x220>)
 8001810:	2002      	movs	r0, #2
 8001812:	f7ff fc45 	bl	80010a0 <LTC6811_wrcfg>
	HAL_Delay(3);
 8001816:	2003      	movs	r0, #3
 8001818:	f001 f8a2 	bl	8002960 <HAL_Delay>

	//wakeup_idle();									// read config
	//LTC6811_rdcfg();
	//HAL_Delay(3);

	LTC6811_adcv();										// measure voltages
 800181c:	f7ff fbbc 	bl	8000f98 <LTC6811_adcv>
	HAL_Delay(3);
 8001820:	2003      	movs	r0, #3
 8001822:	f001 f89d 	bl	8002960 <HAL_Delay>

	pec += LTC6811_rdcv(0, NUM_STACK, (uint16_t(*)[12])cellVoltages);	//read voltages
 8001826:	4a20      	ldr	r2, [pc, #128]	; (80018a8 <BMS+0x228>)
 8001828:	2102      	movs	r1, #2
 800182a:	2000      	movs	r0, #0
 800182c:	f7ff fcf0 	bl	8001210 <LTC6811_rdcv>
 8001830:	4603      	mov	r3, r0
 8001832:	461a      	mov	r2, r3
 8001834:	793b      	ldrb	r3, [r7, #4]
 8001836:	4413      	add	r3, r2
 8001838:	713b      	strb	r3, [r7, #4]
	HAL_Delay(3);
 800183a:	2003      	movs	r0, #3
 800183c:	f001 f890 	bl	8002960 <HAL_Delay>

	//CAN_interrupt();

	LTC6811_adax();										// measure 3 celltemp
 8001840:	f7ff fbec 	bl	800101c <LTC6811_adax>
	HAL_Delay(3);
 8001844:	2003      	movs	r0, #3
 8001846:	f001 f88b 	bl	8002960 <HAL_Delay>

	pec += LTC6811_rdaux(0, NUM_STACK, (uint16_t(*)[6])slaveGPIOs);	// read celltemp
 800184a:	4a19      	ldr	r2, [pc, #100]	; (80018b0 <BMS+0x230>)
 800184c:	2102      	movs	r1, #2
 800184e:	2000      	movs	r0, #0
 8001850:	f7ff fdd4 	bl	80013fc <LTC6811_rdaux>
 8001854:	4603      	mov	r3, r0
 8001856:	b2da      	uxtb	r2, r3
 8001858:	793b      	ldrb	r3, [r7, #4]
 800185a:	4413      	add	r3, r2
 800185c:	713b      	strb	r3, [r7, #4]
	HAL_Delay(3);
 800185e:	2003      	movs	r0, #3
 8001860:	f001 f87e 	bl	8002960 <HAL_Delay>

	//pec += LTC6811_rdstatb(NUM_STACK, OV_flag, UV_flag, r_statb);
	//HAL_Delay(3);


	convertVoltage();
 8001864:	f000 f826 	bl	80018b4 <convertVoltage>

	convertTemperature(selTemp);
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <BMS+0x21c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f000 f967 	bl	8001b40 <convertTemperature>

	wakeup_idle();
	LTC6811_rdstat();
*/

	if (selTemp < 3)		// Variable for cycling the multiplexers for temp measurement.
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <BMS+0x21c>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d806      	bhi.n	8001888 <BMS+0x208>
	{
		selTemp++;
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <BMS+0x21c>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	3301      	adds	r3, #1
 8001880:	b2da      	uxtb	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <BMS+0x21c>)
 8001884:	701a      	strb	r2, [r3, #0]
 8001886:	e002      	b.n	800188e <BMS+0x20e>
		//CAN_interrupt();
	}


	else
		selTemp = 0;
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <BMS+0x21c>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]

	send_usb();
 800188e:	f000 f9c7 	bl	8001c20 <send_usb>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200004d0 	.word	0x200004d0
 80018a0:	200003fc 	.word	0x200003fc
 80018a4:	20000000 	.word	0x20000000
 80018a8:	200003cc 	.word	0x200003cc
 80018ac:	20000002 	.word	0x20000002
 80018b0:	20000408 	.word	0x20000408

080018b4 <convertVoltage>:

void convertVoltage()		//convert and sort Voltages
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
	//double voltage[NUM_CELLS];
	uint16_t cell_max = cellVoltages[0];
 80018ba:	4b3c      	ldr	r3, [pc, #240]	; (80019ac <convertVoltage+0xf8>)
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	80fb      	strh	r3, [r7, #6]
	uint16_t cell_min = cellVoltages[0];
 80018c0:	4b3a      	ldr	r3, [pc, #232]	; (80019ac <convertVoltage+0xf8>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	80bb      	strh	r3, [r7, #4]

	for(uint8_t i = 0; i < NUM_CELLS; i++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	70fb      	strb	r3, [r7, #3]
 80018ca:	e00f      	b.n	80018ec <convertVoltage+0x38>
	{
		usb_voltages[i] = cellVoltages[i]/1000;
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	4a37      	ldr	r2, [pc, #220]	; (80019ac <convertVoltage+0xf8>)
 80018d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018d4:	4a36      	ldr	r2, [pc, #216]	; (80019b0 <convertVoltage+0xfc>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	099b      	lsrs	r3, r3, #6
 80018dc:	b29a      	uxth	r2, r3
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	b2d1      	uxtb	r1, r2
 80018e2:	4a34      	ldr	r2, [pc, #208]	; (80019b4 <convertVoltage+0x100>)
 80018e4:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < NUM_CELLS; i++)
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	3301      	adds	r3, #1
 80018ea:	70fb      	strb	r3, [r7, #3]
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	2b17      	cmp	r3, #23
 80018f0:	d9ec      	bls.n	80018cc <convertVoltage+0x18>
	}


	for(uint8_t k = 0; k < NUM_STACK; k++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	70bb      	strb	r3, [r7, #2]
 80018f6:	e03c      	b.n	8001972 <convertVoltage+0xbe>
	{
		for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	707b      	strb	r3, [r7, #1]
 80018fc:	e033      	b.n	8001966 <convertVoltage+0xb2>
		{
			if(cellVoltages[i + k * 12] > cell_max) cell_max = cellVoltages[i + k * 12];
 80018fe:	7879      	ldrb	r1, [r7, #1]
 8001900:	78ba      	ldrb	r2, [r7, #2]
 8001902:	4613      	mov	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4413      	add	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	4a27      	ldr	r2, [pc, #156]	; (80019ac <convertVoltage+0xf8>)
 800190e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001912:	88fa      	ldrh	r2, [r7, #6]
 8001914:	429a      	cmp	r2, r3
 8001916:	d20b      	bcs.n	8001930 <convertVoltage+0x7c>
 8001918:	7879      	ldrb	r1, [r7, #1]
 800191a:	78ba      	ldrb	r2, [r7, #2]
 800191c:	4613      	mov	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4413      	add	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	4a21      	ldr	r2, [pc, #132]	; (80019ac <convertVoltage+0xf8>)
 8001928:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800192c:	80fb      	strh	r3, [r7, #6]
 800192e:	e017      	b.n	8001960 <convertVoltage+0xac>
			else if(cellVoltages[i + k * 12] < cell_min) cell_min = cellVoltages[i + k * 12];
 8001930:	7879      	ldrb	r1, [r7, #1]
 8001932:	78ba      	ldrb	r2, [r7, #2]
 8001934:	4613      	mov	r3, r2
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4413      	add	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	4a1b      	ldr	r2, [pc, #108]	; (80019ac <convertVoltage+0xf8>)
 8001940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001944:	88ba      	ldrh	r2, [r7, #4]
 8001946:	429a      	cmp	r2, r3
 8001948:	d90a      	bls.n	8001960 <convertVoltage+0xac>
 800194a:	7879      	ldrb	r1, [r7, #1]
 800194c:	78ba      	ldrb	r2, [r7, #2]
 800194e:	4613      	mov	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4413      	add	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	440b      	add	r3, r1
 8001958:	4a14      	ldr	r2, [pc, #80]	; (80019ac <convertVoltage+0xf8>)
 800195a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800195e:	80bb      	strh	r3, [r7, #4]
		for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 8001960:	787b      	ldrb	r3, [r7, #1]
 8001962:	3301      	adds	r3, #1
 8001964:	707b      	strb	r3, [r7, #1]
 8001966:	787b      	ldrb	r3, [r7, #1]
 8001968:	2b0b      	cmp	r3, #11
 800196a:	d9c8      	bls.n	80018fe <convertVoltage+0x4a>
	for(uint8_t k = 0; k < NUM_STACK; k++)
 800196c:	78bb      	ldrb	r3, [r7, #2]
 800196e:	3301      	adds	r3, #1
 8001970:	70bb      	strb	r3, [r7, #2]
 8001972:	78bb      	ldrb	r3, [r7, #2]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d9bf      	bls.n	80018f8 <convertVoltage+0x44>

			//voltage[i + k * 12] = (double)cellVoltages[i + k * 12]/10000;
			//printf(" Stack %d Cell %d = %.4f V \r\n", k, i, voltage[i + k * 12]);
		}
	}
	AMS2_databytes[0] = cell_min;
 8001978:	88bb      	ldrh	r3, [r7, #4]
 800197a:	b2da      	uxtb	r2, r3
 800197c:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <convertVoltage+0x104>)
 800197e:	701a      	strb	r2, [r3, #0]
	AMS2_databytes[1] = (cell_min >> 8);
 8001980:	88bb      	ldrh	r3, [r7, #4]
 8001982:	0a1b      	lsrs	r3, r3, #8
 8001984:	b29b      	uxth	r3, r3
 8001986:	b2da      	uxtb	r2, r3
 8001988:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <convertVoltage+0x104>)
 800198a:	705a      	strb	r2, [r3, #1]
	AMS2_databytes[2] = cell_max;
 800198c:	88fb      	ldrh	r3, [r7, #6]
 800198e:	b2da      	uxtb	r2, r3
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <convertVoltage+0x104>)
 8001992:	709a      	strb	r2, [r3, #2]
	AMS2_databytes[3] = (cell_max >> 8);
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	0a1b      	lsrs	r3, r3, #8
 8001998:	b29b      	uxth	r3, r3
 800199a:	b2da      	uxtb	r2, r3
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <convertVoltage+0x104>)
 800199e:	70da      	strb	r2, [r3, #3]



}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	200003cc 	.word	0x200003cc
 80019b0:	10624dd3 	.word	0x10624dd3
 80019b4:	20000484 	.word	0x20000484
 80019b8:	200004b4 	.word	0x200004b4
 80019bc:	00000000 	.word	0x00000000

080019c0 <calculateTemperature>:


uint16_t calculateTemperature(uint16_t voltageCode, uint16_t referenceCode)		//convert temp
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	460a      	mov	r2, r1
 80019ca:	80fb      	strh	r3, [r7, #6]
 80019cc:	4613      	mov	r3, r2
 80019ce:	80bb      	strh	r3, [r7, #4]
	if(referenceCode - voltageCode != 0)
 80019d0:	88ba      	ldrh	r2, [r7, #4]
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d03e      	beq.n	8001a56 <calculateTemperature+0x96>
	{
		uint32_t convert_R = (voltageCode * 100000)/(referenceCode - voltageCode);
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	4a29      	ldr	r2, [pc, #164]	; (8001a80 <calculateTemperature+0xc0>)
 80019dc:	fb03 f202 	mul.w	r2, r3, r2
 80019e0:	88b9      	ldrh	r1, [r7, #4]
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	1acb      	subs	r3, r1, r3
 80019e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80019ea:	60fb      	str	r3, [r7, #12]
		return 100.0 / ((1.0 / 298.15) - (log(10000.0 / convert_R) / 3435.0)) - 27315.0;
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f7fe fd35 	bl	800045c <__aeabi_ui2d>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	a11a      	add	r1, pc, #104	; (adr r1, 8001a60 <calculateTemperature+0xa0>)
 80019f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019fc:	f7fe fed2 	bl	80007a4 <__aeabi_ddiv>
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	f00b f8b4 	bl	800cb74 <log>
 8001a0c:	a316      	add	r3, pc, #88	; (adr r3, 8001a68 <calculateTemperature+0xa8>)
 8001a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a12:	f7fe fec7 	bl	80007a4 <__aeabi_ddiv>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	a115      	add	r1, pc, #84	; (adr r1, 8001a70 <calculateTemperature+0xb0>)
 8001a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a20:	f7fe fbde 	bl	80001e0 <__aeabi_dsub>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	f04f 0000 	mov.w	r0, #0
 8001a2c:	4915      	ldr	r1, [pc, #84]	; (8001a84 <calculateTemperature+0xc4>)
 8001a2e:	f7fe feb9 	bl	80007a4 <__aeabi_ddiv>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4610      	mov	r0, r2
 8001a38:	4619      	mov	r1, r3
 8001a3a:	a30f      	add	r3, pc, #60	; (adr r3, 8001a78 <calculateTemperature+0xb8>)
 8001a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a40:	f7fe fbce 	bl	80001e0 <__aeabi_dsub>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f7ff f858 	bl	8000b00 <__aeabi_d2uiz>
 8001a50:	4603      	mov	r3, r0
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	e000      	b.n	8001a58 <calculateTemperature+0x98>
	}
	else
		return 0x00;
 8001a56:	2300      	movs	r3, #0


}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	00000000 	.word	0x00000000
 8001a64:	40c38800 	.word	0x40c38800
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	40aad600 	.word	0x40aad600
 8001a70:	dcb5db83 	.word	0xdcb5db83
 8001a74:	3f6b79e1 	.word	0x3f6b79e1
 8001a78:	00000000 	.word	0x00000000
 8001a7c:	40daacc0 	.word	0x40daacc0
 8001a80:	000186a0 	.word	0x000186a0
 8001a84:	40590000 	.word	0x40590000

08001a88 <CAN_interrupt>:

void CAN_interrupt()
{
 8001a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0

	if (HAL_GetTick()>= last10 + 10)
 8001a90:	f000 ff5c 	bl	800294c <HAL_GetTick>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2200      	movs	r2, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	617a      	str	r2, [r7, #20]
 8001a9c:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <CAN_interrupt+0xa4>)
 8001a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa2:	f112 080a 	adds.w	r8, r2, #10
 8001aa6:	f143 0900 	adc.w	r9, r3, #0
 8001aaa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4541      	cmp	r1, r8
 8001ab2:	eb73 0309 	sbcs.w	r3, r3, r9
 8001ab6:	d30c      	bcc.n	8001ad2 <CAN_interrupt+0x4a>
	{
		CAN_100();
 8001ab8:	f000 f940 	bl	8001d3c <CAN_100>
		last10 = HAL_GetTick();
 8001abc:	f000 ff46 	bl	800294c <HAL_GetTick>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	60fa      	str	r2, [r7, #12]
 8001ac8:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <CAN_interrupt+0xa4>)
 8001aca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001ace:	e9c3 1200 	strd	r1, r2, [r3]

	}
	if (HAL_GetTick()>= last100 + 100)
 8001ad2:	f000 ff3b 	bl	800294c <HAL_GetTick>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2200      	movs	r2, #0
 8001ada:	469a      	mov	sl, r3
 8001adc:	4693      	mov	fp, r2
 8001ade:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <CAN_interrupt+0xa8>)
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	f112 0464 	adds.w	r4, r2, #100	; 0x64
 8001ae8:	f143 0500 	adc.w	r5, r3, #0
 8001aec:	45a2      	cmp	sl, r4
 8001aee:	eb7b 0305 	sbcs.w	r3, fp, r5
 8001af2:	d316      	bcc.n	8001b22 <CAN_interrupt+0x9a>
	{
		CAN_10(AMS2_databytes);
 8001af4:	480f      	ldr	r0, [pc, #60]	; (8001b34 <CAN_interrupt+0xac>)
 8001af6:	f000 f947 	bl	8001d88 <CAN_10>

		HAL_GPIO_TogglePin(GPIOA, WDI_Pin);		// toggle watchdog
 8001afa:	2110      	movs	r1, #16
 8001afc:	480e      	ldr	r0, [pc, #56]	; (8001b38 <CAN_interrupt+0xb0>)
 8001afe:	f001 ff8f 	bl	8003a20 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, LED_GN_Pin);	// toggle LED
 8001b02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b06:	480d      	ldr	r0, [pc, #52]	; (8001b3c <CAN_interrupt+0xb4>)
 8001b08:	f001 ff8a 	bl	8003a20 <HAL_GPIO_TogglePin>
		last100 = HAL_GetTick();
 8001b0c:	f000 ff1e 	bl	800294c <HAL_GetTick>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2200      	movs	r2, #0
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <CAN_interrupt+0xa8>)
 8001b1a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001b1e:	e9c3 1200 	strd	r1, r2, [r3]
	}
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b2c:	200004c0 	.word	0x200004c0
 8001b30:	200004c8 	.word	0x200004c8
 8001b34:	200004b4 	.word	0x200004b4
 8001b38:	40020000 	.word	0x40020000
 8001b3c:	40020800 	.word	0x40020800

08001b40 <convertTemperature>:


void convertTemperature(uint8_t selTemp)		// sort temp
{
 8001b40:	b5b0      	push	{r4, r5, r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
*/

	//min und max Werte noch finden


	uint8_t indexOffset[12] = {9, 4, 11, 7, 6, 1, 0, 3, 10, 2, 5, 8};
 8001b4a:	4a30      	ldr	r2, [pc, #192]	; (8001c0c <convertTemperature+0xcc>)
 8001b4c:	f107 0308 	add.w	r3, r7, #8
 8001b50:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001b56:	2300      	movs	r3, #0
 8001b58:	75fb      	strb	r3, [r7, #23]
 8001b5a:	e037      	b.n	8001bcc <convertTemperature+0x8c>
	{
			for(uint8_t j = 0; j < 3; j++)
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	75bb      	strb	r3, [r7, #22]
 8001b60:	e02e      	b.n	8001bc0 <convertTemperature+0x80>
			{
				temperature[k * NUM_CELLS_STACK + indexOffset[j + selTemp * 3]] = calculateTemperature(slaveGPIOs[j + k * 6], slaveGPIOs[5 + k * NUM_GPIO_STACK]);
 8001b62:	7db9      	ldrb	r1, [r7, #22]
 8001b64:	7dfa      	ldrb	r2, [r7, #23]
 8001b66:	4613      	mov	r3, r2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	4413      	add	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	440b      	add	r3, r1
 8001b70:	4a27      	ldr	r2, [pc, #156]	; (8001c10 <convertTemperature+0xd0>)
 8001b72:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8001b76:	7dfa      	ldrb	r2, [r7, #23]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	3305      	adds	r3, #5
 8001b82:	4a23      	ldr	r2, [pc, #140]	; (8001c10 <convertTemperature+0xd0>)
 8001b84:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8001b88:	7dfa      	ldrb	r2, [r7, #23]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	461c      	mov	r4, r3
 8001b94:	7db9      	ldrb	r1, [r7, #22]
 8001b96:	79fa      	ldrb	r2, [r7, #7]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	3318      	adds	r3, #24
 8001ba2:	443b      	add	r3, r7
 8001ba4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001ba8:	441c      	add	r4, r3
 8001baa:	4629      	mov	r1, r5
 8001bac:	f7ff ff08 	bl	80019c0 <calculateTemperature>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <convertTemperature+0xd4>)
 8001bb6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			for(uint8_t j = 0; j < 3; j++)
 8001bba:	7dbb      	ldrb	r3, [r7, #22]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	75bb      	strb	r3, [r7, #22]
 8001bc0:	7dbb      	ldrb	r3, [r7, #22]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d9cd      	bls.n	8001b62 <convertTemperature+0x22>
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001bc6:	7dfb      	ldrb	r3, [r7, #23]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	75fb      	strb	r3, [r7, #23]
 8001bcc:	7dfb      	ldrb	r3, [r7, #23]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d9c4      	bls.n	8001b5c <convertTemperature+0x1c>
			}
	}

	if(selTemp == 3)
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d115      	bne.n	8001c04 <convertTemperature+0xc4>
	{
		for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	757b      	strb	r3, [r7, #21]
 8001bdc:	e00f      	b.n	8001bfe <convertTemperature+0xbe>
		{
			usb_temperatures[i] = temperature[i]/100;
 8001bde:	7d7b      	ldrb	r3, [r7, #21]
 8001be0:	4a0c      	ldr	r2, [pc, #48]	; (8001c14 <convertTemperature+0xd4>)
 8001be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001be6:	4a0c      	ldr	r2, [pc, #48]	; (8001c18 <convertTemperature+0xd8>)
 8001be8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bec:	095b      	lsrs	r3, r3, #5
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	7d7b      	ldrb	r3, [r7, #21]
 8001bf2:	b2d1      	uxtb	r1, r2
 8001bf4:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <convertTemperature+0xdc>)
 8001bf6:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001bf8:	7d7b      	ldrb	r3, [r7, #21]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	757b      	strb	r3, [r7, #21]
 8001bfe:	7d7b      	ldrb	r3, [r7, #21]
 8001c00:	2b17      	cmp	r3, #23
 8001c02:	d9ec      	bls.n	8001bde <convertTemperature+0x9e>
			}
		}
		*/
	}

}
 8001c04:	bf00      	nop
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c0c:	0800cf68 	.word	0x0800cf68
 8001c10:	20000408 	.word	0x20000408
 8001c14:	20000420 	.word	0x20000420
 8001c18:	51eb851f 	.word	0x51eb851f
 8001c1c:	2000049c 	.word	0x2000049c

08001c20 <send_usb>:

void send_usb()
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
	usb_data[NUM_CELLS * 2] = 0xff;
 8001c26:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <send_usb+0x4c>)
 8001c28:	22ff      	movs	r2, #255	; 0xff
 8001c2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	71fb      	strb	r3, [r7, #7]
 8001c32:	e00f      	b.n	8001c54 <send_usb+0x34>
	{
		usb_data[i] = usb_voltages[i];
 8001c34:	79fa      	ldrb	r2, [r7, #7]
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	490d      	ldr	r1, [pc, #52]	; (8001c70 <send_usb+0x50>)
 8001c3a:	5c89      	ldrb	r1, [r1, r2]
 8001c3c:	4a0b      	ldr	r2, [pc, #44]	; (8001c6c <send_usb+0x4c>)
 8001c3e:	54d1      	strb	r1, [r2, r3]
		usb_data[NUM_CELLS + i] = usb_temperatures[i];
 8001c40:	79fa      	ldrb	r2, [r7, #7]
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	3318      	adds	r3, #24
 8001c46:	490b      	ldr	r1, [pc, #44]	; (8001c74 <send_usb+0x54>)
 8001c48:	5c89      	ldrb	r1, [r1, r2]
 8001c4a:	4a08      	ldr	r2, [pc, #32]	; (8001c6c <send_usb+0x4c>)
 8001c4c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	3301      	adds	r3, #1
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	2b17      	cmp	r3, #23
 8001c58:	d9ec      	bls.n	8001c34 <send_usb+0x14>

	}

	CDC_Transmit_FS(usb_data, NUM_CELLS * 2 + 1);
 8001c5a:	2131      	movs	r1, #49	; 0x31
 8001c5c:	4803      	ldr	r0, [pc, #12]	; (8001c6c <send_usb+0x4c>)
 8001c5e:	f007 fe9b 	bl	8009998 <CDC_Transmit_FS>
	//CDC_Transmit_FS(usb_voltages, NUM_CELLS + 1);

}
 8001c62:	bf00      	nop
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000450 	.word	0x20000450
 8001c70:	20000484 	.word	0x20000484
 8001c74:	2000049c 	.word	0x2000049c

08001c78 <CAN_TX>:

uint32_t RxFifo;

	// transmit CAN Message
void CAN_TX(CAN_HandleTypeDef hcan, CAN_TxHeaderTypeDef TxHeader, uint8_t* TxData)
{
 8001c78:	b084      	sub	sp, #16
 8001c7a:	b5b0      	push	{r4, r5, r7, lr}
 8001c7c:	b090      	sub	sp, #64	; 0x40
 8001c7e:	af0e      	add	r7, sp, #56	; 0x38
 8001c80:	f107 0418 	add.w	r4, r7, #24
 8001c84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t TxMailbox;
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001c8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c90:	f107 0018 	add.w	r0, r7, #24
 8001c94:	f000 ffc7 	bl	8002c26 <HAL_CAN_AddTxMessage>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d018      	beq.n	8001cd0 <CAN_TX+0x58>
	{
		CAN_TX(hcan, TxHeader, TxData);		//retry when failed
 8001c9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ca0:	930c      	str	r3, [sp, #48]	; 0x30
 8001ca2:	ad06      	add	r5, sp, #24
 8001ca4:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cb4:	466d      	mov	r5, sp
 8001cb6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cc2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cc6:	f107 0318 	add.w	r3, r7, #24
 8001cca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ccc:	f7ff ffd4 	bl	8001c78 <CAN_TX>
	}
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001cda:	b004      	add	sp, #16
 8001cdc:	4770      	bx	lr
	...

08001ce0 <CAN_RX>:

	// receive CAN Message
void CAN_RX(CAN_HandleTypeDef hcan)
{
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b08a      	sub	sp, #40	; 0x28
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8001cec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];


	if (HAL_CAN_GetRxMessage(&hcan, RxFifo, &RxHeader, RxData) != HAL_OK)
 8001cf0:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <CAN_RX+0x50>)
 8001cf2:	6819      	ldr	r1, [r3, #0]
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	f107 020c 	add.w	r2, r7, #12
 8001cfa:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001cfe:	f001 f861 	bl	8002dc4 <HAL_CAN_GetRxMessage>
	{

	}

	if( RxHeader.StdId == 0x500)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001d08:	d10b      	bne.n	8001d22 <CAN_RX+0x42>
	{

		DIC0_databytes[8] = RxData[8];
 8001d0a:	7b3a      	ldrb	r2, [r7, #12]
 8001d0c:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <CAN_RX+0x54>)
 8001d0e:	721a      	strb	r2, [r3, #8]

		AIR_Logic(DIC0_databytes[0], AMS3_databytes[0], DIC0_databytes[1]);
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <CAN_RX+0x54>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	4a08      	ldr	r2, [pc, #32]	; (8001d38 <CAN_RX+0x58>)
 8001d16:	7811      	ldrb	r1, [r2, #0]
 8001d18:	4a06      	ldr	r2, [pc, #24]	; (8001d34 <CAN_RX+0x54>)
 8001d1a:	7852      	ldrb	r2, [r2, #1]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 f9db 	bl	80020d8 <AIR_Logic>

	}

	// hier kann man weitere Nachrichten zum Empfangen hinzufügen

}
 8001d22:	bf00      	nop
 8001d24:	3728      	adds	r7, #40	; 0x28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d2c:	b004      	add	sp, #16
 8001d2e:	4770      	bx	lr
 8001d30:	200004f4 	.word	0x200004f4
 8001d34:	200004ec 	.word	0x200004ec
 8001d38:	200004dc 	.word	0x200004dc

08001d3c <CAN_100>:




void CAN_100()		// CAN Messages transmitted with 100 Hz
{
 8001d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3e:	b08f      	sub	sp, #60	; 0x3c
 8001d40:	af0e      	add	r7, sp, #56	; 0x38

	CAN_TX(hcan1, AMS0_header, AMS0_databytes);
 8001d42:	4e0e      	ldr	r6, [pc, #56]	; (8001d7c <CAN_100+0x40>)
 8001d44:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <CAN_100+0x44>)
 8001d46:	930c      	str	r3, [sp, #48]	; 0x30
 8001d48:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <CAN_100+0x48>)
 8001d4a:	ac06      	add	r4, sp, #24
 8001d4c:	461d      	mov	r5, r3
 8001d4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d52:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d56:	e884 0003 	stmia.w	r4, {r0, r1}
 8001d5a:	466d      	mov	r5, sp
 8001d5c:	f106 0410 	add.w	r4, r6, #16
 8001d60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d68:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d6c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001d70:	f7ff ff82 	bl	8001c78 <CAN_TX>
}
 8001d74:	bf00      	nop
 8001d76:	3704      	adds	r7, #4
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d7c:	200004f8 	.word	0x200004f8
 8001d80:	200004d4 	.word	0x200004d4
 8001d84:	20000004 	.word	0x20000004

08001d88 <CAN_10>:

void CAN_10(uint8_t bms_data[])		// CAN Messages transmitted with 10 Hz
{
 8001d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d8a:	b091      	sub	sp, #68	; 0x44
 8001d8c:	af0e      	add	r7, sp, #56	; 0x38
 8001d8e:	6078      	str	r0, [r7, #4]
	CAN_TX(hcan1, AMS1_header, AMS1_databytes);
 8001d90:	4e27      	ldr	r6, [pc, #156]	; (8001e30 <CAN_10+0xa8>)
 8001d92:	4b28      	ldr	r3, [pc, #160]	; (8001e34 <CAN_10+0xac>)
 8001d94:	930c      	str	r3, [sp, #48]	; 0x30
 8001d96:	4b28      	ldr	r3, [pc, #160]	; (8001e38 <CAN_10+0xb0>)
 8001d98:	ac06      	add	r4, sp, #24
 8001d9a:	461d      	mov	r5, r3
 8001d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001da0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001da4:	e884 0003 	stmia.w	r4, {r0, r1}
 8001da8:	466d      	mov	r5, sp
 8001daa:	f106 0410 	add.w	r4, r6, #16
 8001dae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001db0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001db2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001db6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dba:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001dbe:	f7ff ff5b 	bl	8001c78 <CAN_TX>
	CAN_TX(hcan1, AMS2_header, bms_data);
 8001dc2:	4e1b      	ldr	r6, [pc, #108]	; (8001e30 <CAN_10+0xa8>)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	930c      	str	r3, [sp, #48]	; 0x30
 8001dc8:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <CAN_10+0xb4>)
 8001dca:	ac06      	add	r4, sp, #24
 8001dcc:	461d      	mov	r5, r3
 8001dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001dd6:	e884 0003 	stmia.w	r4, {r0, r1}
 8001dda:	466d      	mov	r5, sp
 8001ddc:	f106 0410 	add.w	r4, r6, #16
 8001de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001de2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001de4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001de8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dec:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001df0:	f7ff ff42 	bl	8001c78 <CAN_TX>
	CAN_TX(hcan1, AMS3_header, AMS3_databytes);
 8001df4:	4e0e      	ldr	r6, [pc, #56]	; (8001e30 <CAN_10+0xa8>)
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <CAN_10+0xb8>)
 8001df8:	930c      	str	r3, [sp, #48]	; 0x30
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <CAN_10+0xbc>)
 8001dfc:	ac06      	add	r4, sp, #24
 8001dfe:	461d      	mov	r5, r3
 8001e00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e04:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e08:	e884 0003 	stmia.w	r4, {r0, r1}
 8001e0c:	466d      	mov	r5, sp
 8001e0e:	f106 0410 	add.w	r4, r6, #16
 8001e12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e1e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001e22:	f7ff ff29 	bl	8001c78 <CAN_TX>
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200004f8 	.word	0x200004f8
 8001e34:	200004e4 	.word	0x200004e4
 8001e38:	2000001c 	.word	0x2000001c
 8001e3c:	20000034 	.word	0x20000034
 8001e40:	200004dc 	.word	0x200004dc
 8001e44:	2000004c 	.word	0x2000004c

08001e48 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */
AMS3_databytes[0]=0;
 8001e4c:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <MX_CAN1_Init+0xa8>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
AMS3_databytes[1]=0;
 8001e52:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <MX_CAN1_Init+0xa8>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	705a      	strb	r2, [r3, #1]
AMS3_databytes[2]=0;
 8001e58:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <MX_CAN1_Init+0xa8>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	709a      	strb	r2, [r3, #2]
AMS3_databytes[3]=0;
 8001e5e:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <MX_CAN1_Init+0xa8>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	70da      	strb	r2, [r3, #3]
AMS3_databytes[4]=0;
 8001e64:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <MX_CAN1_Init+0xa8>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	711a      	strb	r2, [r3, #4]
AMS3_databytes[5]=0;
 8001e6a:	4b21      	ldr	r3, [pc, #132]	; (8001ef0 <MX_CAN1_Init+0xa8>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	715a      	strb	r2, [r3, #5]
AMS3_databytes[6]=0;
 8001e70:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <MX_CAN1_Init+0xa8>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	719a      	strb	r2, [r3, #6]
AMS3_databytes[7]=0;
 8001e76:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <MX_CAN1_Init+0xa8>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	71da      	strb	r2, [r3, #7]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <MX_CAN1_Init+0xac>)
 8001e7e:	4a1e      	ldr	r2, [pc, #120]	; (8001ef8 <MX_CAN1_Init+0xb0>)
 8001e80:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8001e82:	4b1c      	ldr	r3, [pc, #112]	; (8001ef4 <MX_CAN1_Init+0xac>)
 8001e84:	2204      	movs	r2, #4
 8001e86:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001e88:	4b1a      	ldr	r3, [pc, #104]	; (8001ef4 <MX_CAN1_Init+0xac>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e8e:	4b19      	ldr	r3, [pc, #100]	; (8001ef4 <MX_CAN1_Init+0xac>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001e94:	4b17      	ldr	r3, [pc, #92]	; (8001ef4 <MX_CAN1_Init+0xac>)
 8001e96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e9a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001e9c:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <MX_CAN1_Init+0xac>)
 8001e9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ea2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001ea4:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <MX_CAN1_Init+0xac>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001eaa:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <MX_CAN1_Init+0xac>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001eb0:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <MX_CAN1_Init+0xac>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <MX_CAN1_Init+0xac>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ebc:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <MX_CAN1_Init+0xac>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <MX_CAN1_Init+0xac>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001ec8:	480a      	ldr	r0, [pc, #40]	; (8001ef4 <MX_CAN1_Init+0xac>)
 8001eca:	f000 fd6d 	bl	80029a8 <HAL_CAN_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_CAN1_Init+0x90>
  {
    Error_Handler();
 8001ed4:	f000 fa71 	bl	80023ba <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001ed8:	2102      	movs	r1, #2
 8001eda:	4806      	ldr	r0, [pc, #24]	; (8001ef4 <MX_CAN1_Init+0xac>)
 8001edc:	f001 f893 	bl	8003006 <HAL_CAN_ActivateNotification>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_CAN1_Init+0xa2>
    {
  	  Error_Handler();
 8001ee6:	f000 fa68 	bl	80023ba <Error_Handler>
    }
  /* USER CODE END CAN1_Init 2 */

}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200004dc 	.word	0x200004dc
 8001ef4:	200004f8 	.word	0x200004f8
 8001ef8:	40006400 	.word	0x40006400

08001efc <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001f00:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <MX_CAN2_Init+0x64>)
 8001f02:	4a18      	ldr	r2, [pc, #96]	; (8001f64 <MX_CAN2_Init+0x68>)
 8001f04:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <MX_CAN2_Init+0x64>)
 8001f08:	2204      	movs	r2, #4
 8001f0a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <MX_CAN2_Init+0x64>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f12:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <MX_CAN2_Init+0x64>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <MX_CAN2_Init+0x64>)
 8001f1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f1e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <MX_CAN2_Init+0x64>)
 8001f22:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f26:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001f28:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <MX_CAN2_Init+0x64>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <MX_CAN2_Init+0x64>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <MX_CAN2_Init+0x64>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <MX_CAN2_Init+0x64>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <MX_CAN2_Init+0x64>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <MX_CAN2_Init+0x64>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001f4c:	4804      	ldr	r0, [pc, #16]	; (8001f60 <MX_CAN2_Init+0x64>)
 8001f4e:	f000 fd2b 	bl	80029a8 <HAL_CAN_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001f58:	f000 fa2f 	bl	80023ba <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000520 	.word	0x20000520
 8001f64:	40006800 	.word	0x40006800

08001f68 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08c      	sub	sp, #48	; 0x30
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a4f      	ldr	r2, [pc, #316]	; (80020c4 <HAL_CAN_MspInit+0x15c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d146      	bne.n	8002018 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001f8a:	4b4f      	ldr	r3, [pc, #316]	; (80020c8 <HAL_CAN_MspInit+0x160>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	4a4d      	ldr	r2, [pc, #308]	; (80020c8 <HAL_CAN_MspInit+0x160>)
 8001f92:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001f94:	4b4c      	ldr	r3, [pc, #304]	; (80020c8 <HAL_CAN_MspInit+0x160>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d10d      	bne.n	8001fb8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61bb      	str	r3, [r7, #24]
 8001fa0:	4b4a      	ldr	r3, [pc, #296]	; (80020cc <HAL_CAN_MspInit+0x164>)
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	4a49      	ldr	r2, [pc, #292]	; (80020cc <HAL_CAN_MspInit+0x164>)
 8001fa6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001faa:	6413      	str	r3, [r2, #64]	; 0x40
 8001fac:	4b47      	ldr	r3, [pc, #284]	; (80020cc <HAL_CAN_MspInit+0x164>)
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	4b43      	ldr	r3, [pc, #268]	; (80020cc <HAL_CAN_MspInit+0x164>)
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	4a42      	ldr	r2, [pc, #264]	; (80020cc <HAL_CAN_MspInit+0x164>)
 8001fc2:	f043 0302 	orr.w	r3, r3, #2
 8001fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc8:	4b40      	ldr	r3, [pc, #256]	; (80020cc <HAL_CAN_MspInit+0x164>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fd4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001fe6:	2309      	movs	r3, #9
 8001fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fea:	f107 031c 	add.w	r3, r7, #28
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4837      	ldr	r0, [pc, #220]	; (80020d0 <HAL_CAN_MspInit+0x168>)
 8001ff2:	f001 fb5f 	bl	80036b4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	2013      	movs	r0, #19
 8001ffc:	f001 fb23 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002000:	2013      	movs	r0, #19
 8002002:	f001 fb3c 	bl	800367e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002006:	2200      	movs	r2, #0
 8002008:	2100      	movs	r1, #0
 800200a:	2014      	movs	r0, #20
 800200c:	f001 fb1b 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002010:	2014      	movs	r0, #20
 8002012:	f001 fb34 	bl	800367e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8002016:	e050      	b.n	80020ba <HAL_CAN_MspInit+0x152>
  else if(canHandle->Instance==CAN2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a2d      	ldr	r2, [pc, #180]	; (80020d4 <HAL_CAN_MspInit+0x16c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d14b      	bne.n	80020ba <HAL_CAN_MspInit+0x152>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	4b29      	ldr	r3, [pc, #164]	; (80020cc <HAL_CAN_MspInit+0x164>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	4a28      	ldr	r2, [pc, #160]	; (80020cc <HAL_CAN_MspInit+0x164>)
 800202c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002030:	6413      	str	r3, [r2, #64]	; 0x40
 8002032:	4b26      	ldr	r3, [pc, #152]	; (80020cc <HAL_CAN_MspInit+0x164>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800203e:	4b22      	ldr	r3, [pc, #136]	; (80020c8 <HAL_CAN_MspInit+0x160>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	3301      	adds	r3, #1
 8002044:	4a20      	ldr	r2, [pc, #128]	; (80020c8 <HAL_CAN_MspInit+0x160>)
 8002046:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002048:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <HAL_CAN_MspInit+0x160>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d10d      	bne.n	800206c <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <HAL_CAN_MspInit+0x164>)
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	4a1c      	ldr	r2, [pc, #112]	; (80020cc <HAL_CAN_MspInit+0x164>)
 800205a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800205e:	6413      	str	r3, [r2, #64]	; 0x40
 8002060:	4b1a      	ldr	r3, [pc, #104]	; (80020cc <HAL_CAN_MspInit+0x164>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	4b16      	ldr	r3, [pc, #88]	; (80020cc <HAL_CAN_MspInit+0x164>)
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	4a15      	ldr	r2, [pc, #84]	; (80020cc <HAL_CAN_MspInit+0x164>)
 8002076:	f043 0302 	orr.w	r3, r3, #2
 800207a:	6313      	str	r3, [r2, #48]	; 0x30
 800207c:	4b13      	ldr	r3, [pc, #76]	; (80020cc <HAL_CAN_MspInit+0x164>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002088:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800208c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002096:	2303      	movs	r3, #3
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800209a:	2309      	movs	r3, #9
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209e:	f107 031c 	add.w	r3, r7, #28
 80020a2:	4619      	mov	r1, r3
 80020a4:	480a      	ldr	r0, [pc, #40]	; (80020d0 <HAL_CAN_MspInit+0x168>)
 80020a6:	f001 fb05 	bl	80036b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2100      	movs	r1, #0
 80020ae:	2040      	movs	r0, #64	; 0x40
 80020b0:	f001 fac9 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80020b4:	2040      	movs	r0, #64	; 0x40
 80020b6:	f001 fae2 	bl	800367e <HAL_NVIC_EnableIRQ>
}
 80020ba:	bf00      	nop
 80020bc:	3730      	adds	r7, #48	; 0x30
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40006400 	.word	0x40006400
 80020c8:	20000548 	.word	0x20000548
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40020400 	.word	0x40020400
 80020d4:	40006800 	.word	0x40006800

080020d8 <AIR_Logic>:
	// returns 0 if open
	return HAL_GPIO_ReadPin(GPIOC,AIR_N_INT_Pin);
}

void AIR_Logic(uint8_t ts_on, uint8_t ts_ready, uint8_t ts_start)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
 80020e2:	460b      	mov	r3, r1
 80020e4:	71bb      	strb	r3, [r7, #6]
 80020e6:	4613      	mov	r3, r2
 80020e8:	717b      	strb	r3, [r7, #5]

	 if (error == 0)
 80020ea:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <AIR_Logic+0x4c>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d113      	bne.n	800211a <AIR_Logic+0x42>
	 {
		 if (ts_on>= 1)
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d007      	beq.n	8002108 <AIR_Logic+0x30>
		 {

			 HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_SET);
 80020f8:	2201      	movs	r2, #1
 80020fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020fe:	480a      	ldr	r0, [pc, #40]	; (8002128 <AIR_Logic+0x50>)
 8002100:	f001 fc76 	bl	80039f0 <HAL_GPIO_WritePin>
			 ts_ready = 1;
 8002104:	2301      	movs	r3, #1
 8002106:	71bb      	strb	r3, [r7, #6]

		 }

		 if (ts_start>= 1)
 8002108:	797b      	ldrb	r3, [r7, #5]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d005      	beq.n	800211a <AIR_Logic+0x42>
		 {
			 HAL_GPIO_WritePin(GPIOC,AIR_P_SW_Pin, GPIO_PIN_SET);
 800210e:	2201      	movs	r2, #1
 8002110:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002114:	4805      	ldr	r0, [pc, #20]	; (800212c <AIR_Logic+0x54>)
 8002116:	f001 fc6b 	bl	80039f0 <HAL_GPIO_WritePin>
		 }
	}
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	2000054c 	.word	0x2000054c
 8002128:	40020400 	.word	0x40020400
 800212c:	40020800 	.word	0x40020800

08002130 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	; 0x28
 8002134:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	60da      	str	r2, [r3, #12]
 8002144:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	4b5e      	ldr	r3, [pc, #376]	; (80022c4 <MX_GPIO_Init+0x194>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a5d      	ldr	r2, [pc, #372]	; (80022c4 <MX_GPIO_Init+0x194>)
 8002150:	f043 0304 	orr.w	r3, r3, #4
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b5b      	ldr	r3, [pc, #364]	; (80022c4 <MX_GPIO_Init+0x194>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4b57      	ldr	r3, [pc, #348]	; (80022c4 <MX_GPIO_Init+0x194>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a56      	ldr	r2, [pc, #344]	; (80022c4 <MX_GPIO_Init+0x194>)
 800216c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b54      	ldr	r3, [pc, #336]	; (80022c4 <MX_GPIO_Init+0x194>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	4b50      	ldr	r3, [pc, #320]	; (80022c4 <MX_GPIO_Init+0x194>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a4f      	ldr	r2, [pc, #316]	; (80022c4 <MX_GPIO_Init+0x194>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b4d      	ldr	r3, [pc, #308]	; (80022c4 <MX_GPIO_Init+0x194>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]
 800219e:	4b49      	ldr	r3, [pc, #292]	; (80022c4 <MX_GPIO_Init+0x194>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a48      	ldr	r2, [pc, #288]	; (80022c4 <MX_GPIO_Init+0x194>)
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b46      	ldr	r3, [pc, #280]	; (80022c4 <MX_GPIO_Init+0x194>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	603b      	str	r3, [r7, #0]
 80021ba:	4b42      	ldr	r3, [pc, #264]	; (80022c4 <MX_GPIO_Init+0x194>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	4a41      	ldr	r2, [pc, #260]	; (80022c4 <MX_GPIO_Init+0x194>)
 80021c0:	f043 0308 	orr.w	r3, r3, #8
 80021c4:	6313      	str	r3, [r2, #48]	; 0x30
 80021c6:	4b3f      	ldr	r3, [pc, #252]	; (80022c4 <MX_GPIO_Init+0x194>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	603b      	str	r3, [r7, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GN_Pin|LED_YW_Pin|LED_RD_Pin|AIR_P_SW_Pin, GPIO_PIN_RESET);
 80021d2:	2200      	movs	r2, #0
 80021d4:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80021d8:	483b      	ldr	r0, [pc, #236]	; (80022c8 <MX_GPIO_Init+0x198>)
 80021da:	f001 fc09 	bl	80039f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WDI_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 80021de:	2200      	movs	r2, #0
 80021e0:	f248 0110 	movw	r1, #32784	; 0x8010
 80021e4:	4839      	ldr	r0, [pc, #228]	; (80022cc <MX_GPIO_Init+0x19c>)
 80021e6:	f001 fc03 	bl	80039f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SC_OPEN_GPIO_Port, SC_OPEN_Pin, GPIO_PIN_SET);
 80021ea:	2201      	movs	r2, #1
 80021ec:	2180      	movs	r1, #128	; 0x80
 80021ee:	4837      	ldr	r0, [pc, #220]	; (80022cc <MX_GPIO_Init+0x19c>)
 80021f0:	f001 fbfe 	bl	80039f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_RESET);
 80021f4:	2200      	movs	r2, #0
 80021f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021fa:	4835      	ldr	r0, [pc, #212]	; (80022d0 <MX_GPIO_Init+0x1a0>)
 80021fc:	f001 fbf8 	bl	80039f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_GN_Pin|LED_YW_Pin|LED_RD_Pin|AIR_P_SW_Pin;
 8002200:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8002204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002206:	2301      	movs	r3, #1
 8002208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002212:	f107 0314 	add.w	r3, r7, #20
 8002216:	4619      	mov	r1, r3
 8002218:	482b      	ldr	r0, [pc, #172]	; (80022c8 <MX_GPIO_Init+0x198>)
 800221a:	f001 fa4b 	bl	80036b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = V_VEHI_Pin|V_ACCU_Pin|SC_CLOSING_Pin|SC_STATE_Pin
 800221e:	23f3      	movs	r3, #243	; 0xf3
 8002220:	617b      	str	r3, [r7, #20]
                          |AIR_N_ACT_Pin|AIR_N_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	4619      	mov	r1, r3
 8002230:	4825      	ldr	r0, [pc, #148]	; (80022c8 <MX_GPIO_Init+0x198>)
 8002232:	f001 fa3f 	bl	80036b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_STATE_Pin|IMD_SAFE_Pin|SC_OPENING_Pin;
 8002236:	2368      	movs	r3, #104	; 0x68
 8002238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	4619      	mov	r1, r3
 8002248:	4820      	ldr	r0, [pc, #128]	; (80022cc <MX_GPIO_Init+0x19c>)
 800224a:	f001 fa33 	bl	80036b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WDI_Pin|SC_OPEN_Pin|SPI3_CS_Pin;
 800224e:	f248 0390 	movw	r3, #32912	; 0x8090
 8002252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002254:	2301      	movs	r3, #1
 8002256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225c:	2300      	movs	r3, #0
 800225e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4619      	mov	r1, r3
 8002266:	4819      	ldr	r0, [pc, #100]	; (80022cc <MX_GPIO_Init+0x19c>)
 8002268:	f001 fa24 	bl	80036b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_ACTIVATE_Pin;
 800226c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002272:	2301      	movs	r3, #1
 8002274:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TS_ACTIVATE_GPIO_Port, &GPIO_InitStruct);
 800227e:	f107 0314 	add.w	r3, r7, #20
 8002282:	4619      	mov	r1, r3
 8002284:	4812      	ldr	r0, [pc, #72]	; (80022d0 <MX_GPIO_Init+0x1a0>)
 8002286:	f001 fa15 	bl	80036b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DANGER_V_Pin|AIR_P_ACT_Pin|AIR_P_INT_Pin;
 800228a:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 800228e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002290:	2300      	movs	r3, #0
 8002292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	4619      	mov	r1, r3
 800229e:	480c      	ldr	r0, [pc, #48]	; (80022d0 <MX_GPIO_Init+0x1a0>)
 80022a0:	f001 fa08 	bl	80036b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PCHRG_ACT_Pin;
 80022a4:	2304      	movs	r3, #4
 80022a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PCHRG_ACT_GPIO_Port, &GPIO_InitStruct);
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	4619      	mov	r1, r3
 80022b6:	4807      	ldr	r0, [pc, #28]	; (80022d4 <MX_GPIO_Init+0x1a4>)
 80022b8:	f001 f9fc 	bl	80036b4 <HAL_GPIO_Init>

}
 80022bc:	bf00      	nop
 80022be:	3728      	adds	r7, #40	; 0x28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40020800 	.word	0x40020800
 80022cc:	40020000 	.word	0x40020000
 80022d0:	40020400 	.word	0x40020400
 80022d4:	40020c00 	.word	0x40020c00

080022d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022dc:	f000 fad2 	bl	8002884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022e0:	f000 f824 	bl	800232c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022e4:	f7ff ff24 	bl	8002130 <MX_GPIO_Init>
  MX_SPI3_Init();
 80022e8:	f000 f86c 	bl	80023c4 <MX_SPI3_Init>
  MX_TIM2_Init();
 80022ec:	f000 fa2e 	bl	800274c <MX_TIM2_Init>
  MX_CAN1_Init();
 80022f0:	f7ff fdaa 	bl	8001e48 <MX_CAN1_Init>
  MX_CAN2_Init();
 80022f4:	f7ff fe02 	bl	8001efc <MX_CAN2_Init>
  MX_USB_DEVICE_Init();
 80022f8:	f007 fa90 	bl	800981c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  // Start timer
  HAL_TIM_Base_Start_IT(&htim2);
 80022fc:	4809      	ldr	r0, [pc, #36]	; (8002324 <main+0x4c>)
 80022fe:	f003 ffa7 	bl	8006250 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan1);
 8002302:	4809      	ldr	r0, [pc, #36]	; (8002328 <main+0x50>)
 8002304:	f000 fc4b 	bl	8002b9e <HAL_CAN_Start>
  BMS_init();
 8002308:	f7ff f9b4 	bl	8001674 <BMS_init>

    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800230c:	2102      	movs	r1, #2
 800230e:	4806      	ldr	r0, [pc, #24]	; (8002328 <main+0x50>)
 8002310:	f000 fe79 	bl	8003006 <HAL_CAN_ActivateNotification>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <main+0x46>
    {
  	  Error_Handler();
 800231a:	f000 f84e 	bl	80023ba <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 BMS();
 800231e:	f7ff f9af 	bl	8001680 <BMS>
 8002322:	e7fc      	b.n	800231e <main+0x46>
 8002324:	200005ac 	.word	0x200005ac
 8002328:	200004f8 	.word	0x200004f8

0800232c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b092      	sub	sp, #72	; 0x48
 8002330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002332:	f107 0318 	add.w	r3, r7, #24
 8002336:	2230      	movs	r2, #48	; 0x30
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f008 fd8b 	bl	800ae56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002340:	1d3b      	adds	r3, r7, #4
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	60da      	str	r2, [r3, #12]
 800234c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800234e:	2302      	movs	r3, #2
 8002350:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002352:	2301      	movs	r3, #1
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002356:	2310      	movs	r3, #16
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800235a:	2302      	movs	r3, #2
 800235c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800235e:	2300      	movs	r3, #0
 8002360:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002362:	2308      	movs	r3, #8
 8002364:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002366:	23c0      	movs	r3, #192	; 0xc0
 8002368:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800236a:	2304      	movs	r3, #4
 800236c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800236e:	2308      	movs	r3, #8
 8002370:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002372:	f107 0318 	add.w	r3, r7, #24
 8002376:	4618      	mov	r0, r3
 8002378:	f002 fd9c 	bl	8004eb4 <HAL_RCC_OscConfig>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8002382:	f000 f81a 	bl	80023ba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002386:	230f      	movs	r3, #15
 8002388:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800238a:	2302      	movs	r3, #2
 800238c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002392:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002396:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800239c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800239e:	1d3b      	adds	r3, r7, #4
 80023a0:	2103      	movs	r1, #3
 80023a2:	4618      	mov	r0, r3
 80023a4:	f002 ffda 	bl	800535c <HAL_RCC_ClockConfig>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80023ae:	f000 f804 	bl	80023ba <Error_Handler>
  }
}
 80023b2:	bf00      	nop
 80023b4:	3748      	adds	r7, #72	; 0x48
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023be:	b672      	cpsid	i
}
 80023c0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023c2:	e7fe      	b.n	80023c2 <Error_Handler+0x8>

080023c4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80023c8:	4b17      	ldr	r3, [pc, #92]	; (8002428 <MX_SPI3_Init+0x64>)
 80023ca:	4a18      	ldr	r2, [pc, #96]	; (800242c <MX_SPI3_Init+0x68>)
 80023cc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80023ce:	4b16      	ldr	r3, [pc, #88]	; (8002428 <MX_SPI3_Init+0x64>)
 80023d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023d4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80023d6:	4b14      	ldr	r3, [pc, #80]	; (8002428 <MX_SPI3_Init+0x64>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80023dc:	4b12      	ldr	r3, [pc, #72]	; (8002428 <MX_SPI3_Init+0x64>)
 80023de:	2200      	movs	r2, #0
 80023e0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <MX_SPI3_Init+0x64>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023e8:	4b0f      	ldr	r3, [pc, #60]	; (8002428 <MX_SPI3_Init+0x64>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80023ee:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <MX_SPI3_Init+0x64>)
 80023f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023f4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80023f6:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <MX_SPI3_Init+0x64>)
 80023f8:	2220      	movs	r2, #32
 80023fa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023fc:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <MX_SPI3_Init+0x64>)
 80023fe:	2200      	movs	r2, #0
 8002400:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <MX_SPI3_Init+0x64>)
 8002404:	2200      	movs	r2, #0
 8002406:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <MX_SPI3_Init+0x64>)
 800240a:	2200      	movs	r2, #0
 800240c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800240e:	4b06      	ldr	r3, [pc, #24]	; (8002428 <MX_SPI3_Init+0x64>)
 8002410:	220a      	movs	r2, #10
 8002412:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002414:	4804      	ldr	r0, [pc, #16]	; (8002428 <MX_SPI3_Init+0x64>)
 8002416:	f003 f95d 	bl	80056d4 <HAL_SPI_Init>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002420:	f7ff ffcb 	bl	80023ba <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000550 	.word	0x20000550
 800242c:	40003c00 	.word	0x40003c00

08002430 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	; 0x28
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	2200      	movs	r2, #0
 800243e:	601a      	str	r2, [r3, #0]
 8002440:	605a      	str	r2, [r3, #4]
 8002442:	609a      	str	r2, [r3, #8]
 8002444:	60da      	str	r2, [r3, #12]
 8002446:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a19      	ldr	r2, [pc, #100]	; (80024b4 <HAL_SPI_MspInit+0x84>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d12c      	bne.n	80024ac <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <HAL_SPI_MspInit+0x88>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	4a17      	ldr	r2, [pc, #92]	; (80024b8 <HAL_SPI_MspInit+0x88>)
 800245c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002460:	6413      	str	r3, [r2, #64]	; 0x40
 8002462:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <HAL_SPI_MspInit+0x88>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <HAL_SPI_MspInit+0x88>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	4a10      	ldr	r2, [pc, #64]	; (80024b8 <HAL_SPI_MspInit+0x88>)
 8002478:	f043 0304 	orr.w	r3, r3, #4
 800247c:	6313      	str	r3, [r2, #48]	; 0x30
 800247e:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <HAL_SPI_MspInit+0x88>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800248a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800248e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002490:	2302      	movs	r3, #2
 8002492:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002494:	2300      	movs	r3, #0
 8002496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002498:	2303      	movs	r3, #3
 800249a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800249c:	2306      	movs	r3, #6
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	4619      	mov	r1, r3
 80024a6:	4805      	ldr	r0, [pc, #20]	; (80024bc <HAL_SPI_MspInit+0x8c>)
 80024a8:	f001 f904 	bl	80036b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80024ac:	bf00      	nop
 80024ae:	3728      	adds	r7, #40	; 0x28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40003c00 	.word	0x40003c00
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40020800 	.word	0x40020800

080024c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <HAL_MspInit+0x48>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	4a0e      	ldr	r2, [pc, #56]	; (8002508 <HAL_MspInit+0x48>)
 80024d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d4:	6453      	str	r3, [r2, #68]	; 0x44
 80024d6:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <HAL_MspInit+0x48>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	603b      	str	r3, [r7, #0]
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <HAL_MspInit+0x48>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	4a07      	ldr	r2, [pc, #28]	; (8002508 <HAL_MspInit+0x48>)
 80024ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f0:	6413      	str	r3, [r2, #64]	; 0x40
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_MspInit+0x48>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fa:	603b      	str	r3, [r7, #0]
 80024fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	bc80      	pop	{r7}
 8002506:	4770      	bx	lr
 8002508:	40023800 	.word	0x40023800

0800250c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002510:	e7fe      	b.n	8002510 <NMI_Handler+0x4>

08002512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002516:	e7fe      	b.n	8002516 <HardFault_Handler+0x4>

08002518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800251c:	e7fe      	b.n	800251c <MemManage_Handler+0x4>

0800251e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002522:	e7fe      	b.n	8002522 <BusFault_Handler+0x4>

08002524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002528:	e7fe      	b.n	8002528 <UsageFault_Handler+0x4>

0800252a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	bc80      	pop	{r7}
 8002534:	4770      	bx	lr

08002536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr

0800254e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002552:	f000 f9e9 	bl	8002928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002560:	4802      	ldr	r0, [pc, #8]	; (800256c <CAN1_TX_IRQHandler+0x10>)
 8002562:	f000 fd75 	bl	8003050 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	200004f8 	.word	0x200004f8

08002570 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002574:	4802      	ldr	r0, [pc, #8]	; (8002580 <CAN1_RX0_IRQHandler+0x10>)
 8002576:	f000 fd6b 	bl	8003050 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200004f8 	.word	0x200004f8

08002584 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002588:	4802      	ldr	r0, [pc, #8]	; (8002594 <TIM2_IRQHandler+0x10>)
 800258a:	f003 fecf 	bl	800632c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	200005ac 	.word	0x200005ac

08002598 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800259c:	4802      	ldr	r0, [pc, #8]	; (80025a8 <CAN2_RX0_IRQHandler+0x10>)
 800259e:	f000 fd57 	bl	8003050 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000520 	.word	0x20000520

080025ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80025b0:	4802      	ldr	r0, [pc, #8]	; (80025bc <OTG_FS_IRQHandler+0x10>)
 80025b2:	f001 fb8d 	bl	8003cd0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200012c0 	.word	0x200012c0

080025c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return 1;
 80025c4:	2301      	movs	r3, #1
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr

080025ce <_kill>:

int _kill(int pid, int sig)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025d8:	f008 fca0 	bl	800af1c <__errno>
 80025dc:	4603      	mov	r3, r0
 80025de:	2216      	movs	r2, #22
 80025e0:	601a      	str	r2, [r3, #0]
  return -1;
 80025e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <_exit>:

void _exit (int status)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025f6:	f04f 31ff 	mov.w	r1, #4294967295
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff ffe7 	bl	80025ce <_kill>
  while (1) {}    /* Make sure we hang here */
 8002600:	e7fe      	b.n	8002600 <_exit+0x12>

08002602 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b086      	sub	sp, #24
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	e00a      	b.n	800262a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002614:	f3af 8000 	nop.w
 8002618:	4601      	mov	r1, r0
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	60ba      	str	r2, [r7, #8]
 8002620:	b2ca      	uxtb	r2, r1
 8002622:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	3301      	adds	r3, #1
 8002628:	617b      	str	r3, [r7, #20]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	429a      	cmp	r2, r3
 8002630:	dbf0      	blt.n	8002614 <_read+0x12>
  }

  return len;
 8002632:	687b      	ldr	r3, [r7, #4]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	e009      	b.n	8002662 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	1c5a      	adds	r2, r3, #1
 8002652:	60ba      	str	r2, [r7, #8]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	3301      	adds	r3, #1
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	429a      	cmp	r2, r3
 8002668:	dbf1      	blt.n	800264e <_write+0x12>
    //ITM_SendChar(*ptr++); //Diese Zeile kann gelöscht werden wenn kein printf über SWV mehr gewollt ist
  }
  return len;
 800266a:	687b      	ldr	r3, [r7, #4]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <_close>:

int _close(int file)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800267c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr

0800268a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800269a:	605a      	str	r2, [r3, #4]
  return 0;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <_isatty>:

int _isatty(int file)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026b0:	2301      	movs	r3, #1
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026dc:	4a14      	ldr	r2, [pc, #80]	; (8002730 <_sbrk+0x5c>)
 80026de:	4b15      	ldr	r3, [pc, #84]	; (8002734 <_sbrk+0x60>)
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026e8:	4b13      	ldr	r3, [pc, #76]	; (8002738 <_sbrk+0x64>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d102      	bne.n	80026f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026f0:	4b11      	ldr	r3, [pc, #68]	; (8002738 <_sbrk+0x64>)
 80026f2:	4a12      	ldr	r2, [pc, #72]	; (800273c <_sbrk+0x68>)
 80026f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026f6:	4b10      	ldr	r3, [pc, #64]	; (8002738 <_sbrk+0x64>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	429a      	cmp	r2, r3
 8002702:	d207      	bcs.n	8002714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002704:	f008 fc0a 	bl	800af1c <__errno>
 8002708:	4603      	mov	r3, r0
 800270a:	220c      	movs	r2, #12
 800270c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800270e:	f04f 33ff 	mov.w	r3, #4294967295
 8002712:	e009      	b.n	8002728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <_sbrk+0x64>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800271a:	4b07      	ldr	r3, [pc, #28]	; (8002738 <_sbrk+0x64>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	4a05      	ldr	r2, [pc, #20]	; (8002738 <_sbrk+0x64>)
 8002724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002726:	68fb      	ldr	r3, [r7, #12]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	2000c000 	.word	0x2000c000
 8002734:	00000400 	.word	0x00000400
 8002738:	200005a8 	.word	0x200005a8
 800273c:	20001910 	.word	0x20001910

08002740 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002752:	f107 0308 	add.w	r3, r7, #8
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	605a      	str	r2, [r3, #4]
 800275c:	609a      	str	r2, [r3, #8]
 800275e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002760:	463b      	mov	r3, r7
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002768:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <MX_TIM2_Init+0x94>)
 800276a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800276e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8002770:	4b1b      	ldr	r3, [pc, #108]	; (80027e0 <MX_TIM2_Init+0x94>)
 8002772:	222f      	movs	r2, #47	; 0x2f
 8002774:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002776:	4b1a      	ldr	r3, [pc, #104]	; (80027e0 <MX_TIM2_Init+0x94>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 800277c:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <MX_TIM2_Init+0x94>)
 800277e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002782:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002784:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <MX_TIM2_Init+0x94>)
 8002786:	2200      	movs	r2, #0
 8002788:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <MX_TIM2_Init+0x94>)
 800278c:	2200      	movs	r2, #0
 800278e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002790:	4813      	ldr	r0, [pc, #76]	; (80027e0 <MX_TIM2_Init+0x94>)
 8002792:	f003 fd0e 	bl	80061b2 <HAL_TIM_Base_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800279c:	f7ff fe0d 	bl	80023ba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027a6:	f107 0308 	add.w	r3, r7, #8
 80027aa:	4619      	mov	r1, r3
 80027ac:	480c      	ldr	r0, [pc, #48]	; (80027e0 <MX_TIM2_Init+0x94>)
 80027ae:	f003 fec5 	bl	800653c <HAL_TIM_ConfigClockSource>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80027b8:	f7ff fdff 	bl	80023ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027bc:	2300      	movs	r3, #0
 80027be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027c4:	463b      	mov	r3, r7
 80027c6:	4619      	mov	r1, r3
 80027c8:	4805      	ldr	r0, [pc, #20]	; (80027e0 <MX_TIM2_Init+0x94>)
 80027ca:	f004 f8d7 	bl	800697c <HAL_TIMEx_MasterConfigSynchronization>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80027d4:	f7ff fdf1 	bl	80023ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027d8:	bf00      	nop
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	200005ac 	.word	0x200005ac

080027e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f4:	d115      	bne.n	8002822 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <HAL_TIM_Base_MspInit+0x48>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	4a0b      	ldr	r2, [pc, #44]	; (800282c <HAL_TIM_Base_MspInit+0x48>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6413      	str	r3, [r2, #64]	; 0x40
 8002806:	4b09      	ldr	r3, [pc, #36]	; (800282c <HAL_TIM_Base_MspInit+0x48>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002812:	2200      	movs	r2, #0
 8002814:	2100      	movs	r1, #0
 8002816:	201c      	movs	r0, #28
 8002818:	f000 ff15 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800281c:	201c      	movs	r0, #28
 800281e:	f000 ff2e 	bl	800367e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800

08002830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002868 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8002834:	f7ff ff84 	bl	8002740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002838:	480c      	ldr	r0, [pc, #48]	; (800286c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800283a:	490d      	ldr	r1, [pc, #52]	; (8002870 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800283c:	4a0d      	ldr	r2, [pc, #52]	; (8002874 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800283e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002840:	e002      	b.n	8002848 <LoopCopyDataInit>

08002842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002846:	3304      	adds	r3, #4

08002848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800284a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800284c:	d3f9      	bcc.n	8002842 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800284e:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002850:	4c0a      	ldr	r4, [pc, #40]	; (800287c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002854:	e001      	b.n	800285a <LoopFillZerobss>

08002856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002858:	3204      	adds	r2, #4

0800285a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800285a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800285c:	d3fb      	bcc.n	8002856 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800285e:	f008 fb63 	bl	800af28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002862:	f7ff fd39 	bl	80022d8 <main>
  bx  lr    
 8002866:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002868:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 800286c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002870:	200003a8 	.word	0x200003a8
  ldr r2, =_sidata
 8002874:	0800d74c 	.word	0x0800d74c
  ldr r2, =_sbss
 8002878:	200003a8 	.word	0x200003a8
  ldr r4, =_ebss
 800287c:	20001910 	.word	0x20001910

08002880 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002880:	e7fe      	b.n	8002880 <ADC_IRQHandler>
	...

08002884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002888:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <HAL_Init+0x40>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0d      	ldr	r2, [pc, #52]	; (80028c4 <HAL_Init+0x40>)
 800288e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002892:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_Init+0x40>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <HAL_Init+0x40>)
 800289a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800289e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028a0:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <HAL_Init+0x40>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a07      	ldr	r2, [pc, #28]	; (80028c4 <HAL_Init+0x40>)
 80028a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028ac:	2003      	movs	r0, #3
 80028ae:	f000 febf 	bl	8003630 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028b2:	200f      	movs	r0, #15
 80028b4:	f000 f808 	bl	80028c8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80028b8:	f7ff fe02 	bl	80024c0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40023c00 	.word	0x40023c00

080028c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028d0:	4b12      	ldr	r3, [pc, #72]	; (800291c <HAL_InitTick+0x54>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b12      	ldr	r3, [pc, #72]	; (8002920 <HAL_InitTick+0x58>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	4619      	mov	r1, r3
 80028da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028de:	fbb3 f3f1 	udiv	r3, r3, r1
 80028e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 fed7 	bl	800369a <HAL_SYSTICK_Config>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e00e      	b.n	8002914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b0f      	cmp	r3, #15
 80028fa:	d80a      	bhi.n	8002912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028fc:	2200      	movs	r2, #0
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	f04f 30ff 	mov.w	r0, #4294967295
 8002904:	f000 fe9f 	bl	8003646 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002908:	4a06      	ldr	r2, [pc, #24]	; (8002924 <HAL_InitTick+0x5c>)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	e000      	b.n	8002914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
}
 8002914:	4618      	mov	r0, r3
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	20000064 	.word	0x20000064
 8002920:	2000006c 	.word	0x2000006c
 8002924:	20000068 	.word	0x20000068

08002928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_IncTick+0x1c>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	4b05      	ldr	r3, [pc, #20]	; (8002948 <HAL_IncTick+0x20>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4413      	add	r3, r2
 8002938:	4a03      	ldr	r2, [pc, #12]	; (8002948 <HAL_IncTick+0x20>)
 800293a:	6013      	str	r3, [r2, #0]
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	2000006c 	.word	0x2000006c
 8002948:	200005f4 	.word	0x200005f4

0800294c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return uwTick;
 8002950:	4b02      	ldr	r3, [pc, #8]	; (800295c <HAL_GetTick+0x10>)
 8002952:	681b      	ldr	r3, [r3, #0]
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	200005f4 	.word	0x200005f4

08002960 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002968:	f7ff fff0 	bl	800294c <HAL_GetTick>
 800296c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002978:	d005      	beq.n	8002986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <HAL_Delay+0x44>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4413      	add	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002986:	bf00      	nop
 8002988:	f7ff ffe0 	bl	800294c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	429a      	cmp	r2, r3
 8002996:	d8f7      	bhi.n	8002988 <HAL_Delay+0x28>
  {
  }
}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	2000006c 	.word	0x2000006c

080029a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e0ed      	b.n	8002b96 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d102      	bne.n	80029cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff face 	bl	8001f68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0201 	orr.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029dc:	f7ff ffb6 	bl	800294c <HAL_GetTick>
 80029e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029e2:	e012      	b.n	8002a0a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029e4:	f7ff ffb2 	bl	800294c <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b0a      	cmp	r3, #10
 80029f0:	d90b      	bls.n	8002a0a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2205      	movs	r2, #5
 8002a02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e0c5      	b.n	8002b96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0e5      	beq.n	80029e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0202 	bic.w	r2, r2, #2
 8002a26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a28:	f7ff ff90 	bl	800294c <HAL_GetTick>
 8002a2c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a2e:	e012      	b.n	8002a56 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a30:	f7ff ff8c 	bl	800294c <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b0a      	cmp	r3, #10
 8002a3c:	d90b      	bls.n	8002a56 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2205      	movs	r2, #5
 8002a4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e09f      	b.n	8002b96 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1e5      	bne.n	8002a30 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	7e1b      	ldrb	r3, [r3, #24]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d108      	bne.n	8002a7e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e007      	b.n	8002a8e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	7e5b      	ldrb	r3, [r3, #25]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d108      	bne.n	8002aa8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	e007      	b.n	8002ab8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ab6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	7e9b      	ldrb	r3, [r3, #26]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d108      	bne.n	8002ad2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0220 	orr.w	r2, r2, #32
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	e007      	b.n	8002ae2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0220 	bic.w	r2, r2, #32
 8002ae0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	7edb      	ldrb	r3, [r3, #27]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d108      	bne.n	8002afc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0210 	bic.w	r2, r2, #16
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	e007      	b.n	8002b0c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0210 	orr.w	r2, r2, #16
 8002b0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	7f1b      	ldrb	r3, [r3, #28]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d108      	bne.n	8002b26 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0208 	orr.w	r2, r2, #8
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	e007      	b.n	8002b36 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0208 	bic.w	r2, r2, #8
 8002b34:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	7f5b      	ldrb	r3, [r3, #29]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d108      	bne.n	8002b50 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0204 	orr.w	r2, r2, #4
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	e007      	b.n	8002b60 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0204 	bic.w	r2, r2, #4
 8002b5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	ea42 0103 	orr.w	r1, r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	1e5a      	subs	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d12e      	bne.n	8002c10 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0201 	bic.w	r2, r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002bca:	f7ff febf 	bl	800294c <HAL_GetTick>
 8002bce:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002bd0:	e012      	b.n	8002bf8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bd2:	f7ff febb 	bl	800294c <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b0a      	cmp	r3, #10
 8002bde:	d90b      	bls.n	8002bf8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2205      	movs	r2, #5
 8002bf0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e012      	b.n	8002c1e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1e5      	bne.n	8002bd2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e006      	b.n	8002c1e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c14:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
  }
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b089      	sub	sp, #36	; 0x24
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	60f8      	str	r0, [r7, #12]
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	607a      	str	r2, [r7, #4]
 8002c32:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c44:	7ffb      	ldrb	r3, [r7, #31]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d003      	beq.n	8002c52 <HAL_CAN_AddTxMessage+0x2c>
 8002c4a:	7ffb      	ldrb	r3, [r7, #31]
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	f040 80ad 	bne.w	8002dac <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10a      	bne.n	8002c72 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d105      	bne.n	8002c72 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 8095 	beq.w	8002d9c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	0e1b      	lsrs	r3, r3, #24
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	409a      	lsls	r2, r3
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10d      	bne.n	8002caa <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002c98:	68f9      	ldr	r1, [r7, #12]
 8002c9a:	6809      	ldr	r1, [r1, #0]
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	3318      	adds	r3, #24
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	440b      	add	r3, r1
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	e00f      	b.n	8002cca <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002cb4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002cba:	68f9      	ldr	r1, [r7, #12]
 8002cbc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002cbe:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	3318      	adds	r3, #24
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	440b      	add	r3, r1
 8002cc8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6819      	ldr	r1, [r3, #0]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	3318      	adds	r3, #24
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	440b      	add	r3, r1
 8002cda:	3304      	adds	r3, #4
 8002cdc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	7d1b      	ldrb	r3, [r3, #20]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d111      	bne.n	8002d0a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	3318      	adds	r3, #24
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	6811      	ldr	r1, [r2, #0]
 8002cfa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	3318      	adds	r3, #24
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	440b      	add	r3, r1
 8002d06:	3304      	adds	r3, #4
 8002d08:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3307      	adds	r3, #7
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	061a      	lsls	r2, r3, #24
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3306      	adds	r3, #6
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	041b      	lsls	r3, r3, #16
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3305      	adds	r3, #5
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	021b      	lsls	r3, r3, #8
 8002d24:	4313      	orrs	r3, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	3204      	adds	r2, #4
 8002d2a:	7812      	ldrb	r2, [r2, #0]
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	6811      	ldr	r1, [r2, #0]
 8002d32:	ea43 0200 	orr.w	r2, r3, r0
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	011b      	lsls	r3, r3, #4
 8002d3a:	440b      	add	r3, r1
 8002d3c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002d40:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3303      	adds	r3, #3
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	061a      	lsls	r2, r3, #24
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3302      	adds	r3, #2
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	041b      	lsls	r3, r3, #16
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3301      	adds	r3, #1
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	021b      	lsls	r3, r3, #8
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	7812      	ldrb	r2, [r2, #0]
 8002d62:	4610      	mov	r0, r2
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	6811      	ldr	r1, [r2, #0]
 8002d68:	ea43 0200 	orr.w	r2, r3, r0
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	440b      	add	r3, r1
 8002d72:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002d76:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	3318      	adds	r3, #24
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	4413      	add	r3, r2
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	6811      	ldr	r1, [r2, #0]
 8002d8a:	f043 0201 	orr.w	r2, r3, #1
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	3318      	adds	r3, #24
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	440b      	add	r3, r1
 8002d96:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	e00e      	b.n	8002dba <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e006      	b.n	8002dba <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
  }
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3724      	adds	r7, #36	; 0x24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dd8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002dda:	7dfb      	ldrb	r3, [r7, #23]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d003      	beq.n	8002de8 <HAL_CAN_GetRxMessage+0x24>
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	f040 8103 	bne.w	8002fee <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10e      	bne.n	8002e0c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d116      	bne.n	8002e2a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0f7      	b.n	8002ffc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0303 	and.w	r3, r3, #3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d107      	bne.n	8002e2a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e0e8      	b.n	8002ffc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	331b      	adds	r3, #27
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	4413      	add	r3, r2
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0204 	and.w	r2, r3, #4
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10c      	bne.n	8002e62 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	331b      	adds	r3, #27
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	4413      	add	r3, r2
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	0d5b      	lsrs	r3, r3, #21
 8002e58:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e00b      	b.n	8002e7a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	331b      	adds	r3, #27
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	4413      	add	r3, r2
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	08db      	lsrs	r3, r3, #3
 8002e72:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	331b      	adds	r3, #27
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	4413      	add	r3, r2
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0202 	and.w	r2, r3, #2
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	331b      	adds	r3, #27
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2208      	movs	r2, #8
 8002eac:	611a      	str	r2, [r3, #16]
 8002eae:	e00b      	b.n	8002ec8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	331b      	adds	r3, #27
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	4413      	add	r3, r2
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 020f 	and.w	r2, r3, #15
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	331b      	adds	r3, #27
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	331b      	adds	r3, #27
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	4413      	add	r3, r2
 8002eec:	3304      	adds	r3, #4
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	0c1b      	lsrs	r3, r3, #16
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	b2da      	uxtb	r2, r3
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	0a1a      	lsrs	r2, r3, #8
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	3301      	adds	r3, #1
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	0c1a      	lsrs	r2, r3, #16
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	3302      	adds	r3, #2
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	0e1a      	lsrs	r2, r3, #24
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	3303      	adds	r3, #3
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	3304      	adds	r3, #4
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	0a1a      	lsrs	r2, r3, #8
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	3305      	adds	r3, #5
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	0c1a      	lsrs	r2, r3, #16
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	3306      	adds	r3, #6
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	0e1a      	lsrs	r2, r3, #24
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	3307      	adds	r3, #7
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d108      	bne.n	8002fda <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0220 	orr.w	r2, r2, #32
 8002fd6:	60da      	str	r2, [r3, #12]
 8002fd8:	e007      	b.n	8002fea <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	691a      	ldr	r2, [r3, #16]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 0220 	orr.w	r2, r2, #32
 8002fe8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	e006      	b.n	8002ffc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
  }
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	371c      	adds	r7, #28
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr

08003006 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003006:	b480      	push	{r7}
 8003008:	b085      	sub	sp, #20
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003016:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d002      	beq.n	8003024 <HAL_CAN_ActivateNotification+0x1e>
 800301e:	7bfb      	ldrb	r3, [r7, #15]
 8003020:	2b02      	cmp	r3, #2
 8003022:	d109      	bne.n	8003038 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6959      	ldr	r1, [r3, #20]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	e006      	b.n	8003046 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
  }
}
 8003046:	4618      	mov	r0, r3
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08a      	sub	sp, #40	; 0x28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003058:	2300      	movs	r3, #0
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d07c      	beq.n	8003190 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d023      	beq.n	80030e8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2201      	movs	r2, #1
 80030a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f983 	bl	80033be <HAL_CAN_TxMailbox0CompleteCallback>
 80030b8:	e016      	b.n	80030e8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d004      	beq.n	80030ce <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
 80030cc:	e00c      	b.n	80030e8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d004      	beq.n	80030e2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030de:	627b      	str	r3, [r7, #36]	; 0x24
 80030e0:	e002      	b.n	80030e8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f986 	bl	80033f4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d024      	beq.n	800313c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f962 	bl	80033d0 <HAL_CAN_TxMailbox1CompleteCallback>
 800310c:	e016      	b.n	800313c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003114:	2b00      	cmp	r3, #0
 8003116:	d004      	beq.n	8003122 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
 8003120:	e00c      	b.n	800313c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003128:	2b00      	cmp	r3, #0
 800312a:	d004      	beq.n	8003136 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
 8003134:	e002      	b.n	800313c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f965 	bl	8003406 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d024      	beq.n	8003190 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800314e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f941 	bl	80033e2 <HAL_CAN_TxMailbox2CompleteCallback>
 8003160:	e016      	b.n	8003190 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d004      	beq.n	8003176 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
 8003174:	e00c      	b.n	8003190 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d004      	beq.n	800318a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
 8003188:	e002      	b.n	8003190 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f944 	bl	8003418 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00c      	beq.n	80031b4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d007      	beq.n	80031b4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2210      	movs	r2, #16
 80031b2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d006      	beq.n	80031d6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2208      	movs	r2, #8
 80031ce:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f92a 	bl	800342a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d009      	beq.n	80031f4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fe fa28 	bl	8001644 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00c      	beq.n	8003218 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f003 0310 	and.w	r3, r3, #16
 8003204:	2b00      	cmp	r3, #0
 8003206:	d007      	beq.n	8003218 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800320e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2210      	movs	r2, #16
 8003216:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	f003 0320 	and.w	r3, r3, #32
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00b      	beq.n	800323a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	f003 0308 	and.w	r3, r3, #8
 8003228:	2b00      	cmp	r3, #0
 800322a:	d006      	beq.n	800323a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2208      	movs	r2, #8
 8003232:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f90a 	bl	800344e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	f003 0310 	and.w	r3, r3, #16
 8003240:	2b00      	cmp	r3, #0
 8003242:	d009      	beq.n	8003258 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d002      	beq.n	8003258 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f8f2 	bl	800343c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f003 0310 	and.w	r3, r3, #16
 8003268:	2b00      	cmp	r3, #0
 800326a:	d006      	beq.n	800327a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2210      	movs	r2, #16
 8003272:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f8f3 	bl	8003460 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00b      	beq.n	800329c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d006      	beq.n	800329c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2208      	movs	r2, #8
 8003294:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f8eb 	bl	8003472 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d07b      	beq.n	800339e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d072      	beq.n	8003396 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d008      	beq.n	80032cc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d008      	beq.n	80032e8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	f043 0302 	orr.w	r3, r3, #2
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d008      	beq.n	8003304 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	f043 0304 	orr.w	r3, r3, #4
 8003302:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800330a:	2b00      	cmp	r3, #0
 800330c:	d043      	beq.n	8003396 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003314:	2b00      	cmp	r3, #0
 8003316:	d03e      	beq.n	8003396 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800331e:	2b60      	cmp	r3, #96	; 0x60
 8003320:	d02b      	beq.n	800337a <HAL_CAN_IRQHandler+0x32a>
 8003322:	2b60      	cmp	r3, #96	; 0x60
 8003324:	d82e      	bhi.n	8003384 <HAL_CAN_IRQHandler+0x334>
 8003326:	2b50      	cmp	r3, #80	; 0x50
 8003328:	d022      	beq.n	8003370 <HAL_CAN_IRQHandler+0x320>
 800332a:	2b50      	cmp	r3, #80	; 0x50
 800332c:	d82a      	bhi.n	8003384 <HAL_CAN_IRQHandler+0x334>
 800332e:	2b40      	cmp	r3, #64	; 0x40
 8003330:	d019      	beq.n	8003366 <HAL_CAN_IRQHandler+0x316>
 8003332:	2b40      	cmp	r3, #64	; 0x40
 8003334:	d826      	bhi.n	8003384 <HAL_CAN_IRQHandler+0x334>
 8003336:	2b30      	cmp	r3, #48	; 0x30
 8003338:	d010      	beq.n	800335c <HAL_CAN_IRQHandler+0x30c>
 800333a:	2b30      	cmp	r3, #48	; 0x30
 800333c:	d822      	bhi.n	8003384 <HAL_CAN_IRQHandler+0x334>
 800333e:	2b10      	cmp	r3, #16
 8003340:	d002      	beq.n	8003348 <HAL_CAN_IRQHandler+0x2f8>
 8003342:	2b20      	cmp	r3, #32
 8003344:	d005      	beq.n	8003352 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003346:	e01d      	b.n	8003384 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	f043 0308 	orr.w	r3, r3, #8
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003350:	e019      	b.n	8003386 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	f043 0310 	orr.w	r3, r3, #16
 8003358:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800335a:	e014      	b.n	8003386 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	f043 0320 	orr.w	r3, r3, #32
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003364:	e00f      	b.n	8003386 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800336e:	e00a      	b.n	8003386 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003378:	e005      	b.n	8003386 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003382:	e000      	b.n	8003386 <HAL_CAN_IRQHandler+0x336>
            break;
 8003384:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699a      	ldr	r2, [r3, #24]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003394:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2204      	movs	r2, #4
 800339c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f867 	bl	8003484 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80033b6:	bf00      	nop
 80033b8:	3728      	adds	r7, #40	; 0x28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr

080033d0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr

080033e2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr

080033f4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr

08003406 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	bc80      	pop	{r7}
 8003416:	4770      	bx	lr

08003418 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr

0800342a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr

0800344e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	bc80      	pop	{r7}
 8003470:	4770      	bx	lr

08003472 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr

08003484 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr
	...

08003498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034a8:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <__NVIC_SetPriorityGrouping+0x44>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034b4:	4013      	ands	r3, r2
 80034b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ca:	4a04      	ldr	r2, [pc, #16]	; (80034dc <__NVIC_SetPriorityGrouping+0x44>)
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	60d3      	str	r3, [r2, #12]
}
 80034d0:	bf00      	nop
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034e4:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <__NVIC_GetPriorityGrouping+0x18>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	0a1b      	lsrs	r3, r3, #8
 80034ea:	f003 0307 	and.w	r3, r3, #7
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	e000ed00 	.word	0xe000ed00

080034fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350a:	2b00      	cmp	r3, #0
 800350c:	db0b      	blt.n	8003526 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	f003 021f 	and.w	r2, r3, #31
 8003514:	4906      	ldr	r1, [pc, #24]	; (8003530 <__NVIC_EnableIRQ+0x34>)
 8003516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351a:	095b      	lsrs	r3, r3, #5
 800351c:	2001      	movs	r0, #1
 800351e:	fa00 f202 	lsl.w	r2, r0, r2
 8003522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr
 8003530:	e000e100 	.word	0xe000e100

08003534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	6039      	str	r1, [r7, #0]
 800353e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003544:	2b00      	cmp	r3, #0
 8003546:	db0a      	blt.n	800355e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	b2da      	uxtb	r2, r3
 800354c:	490c      	ldr	r1, [pc, #48]	; (8003580 <__NVIC_SetPriority+0x4c>)
 800354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003552:	0112      	lsls	r2, r2, #4
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	440b      	add	r3, r1
 8003558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800355c:	e00a      	b.n	8003574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	4908      	ldr	r1, [pc, #32]	; (8003584 <__NVIC_SetPriority+0x50>)
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	3b04      	subs	r3, #4
 800356c:	0112      	lsls	r2, r2, #4
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	440b      	add	r3, r1
 8003572:	761a      	strb	r2, [r3, #24]
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	bc80      	pop	{r7}
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	e000e100 	.word	0xe000e100
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003588:	b480      	push	{r7}
 800358a:	b089      	sub	sp, #36	; 0x24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f1c3 0307 	rsb	r3, r3, #7
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	bf28      	it	cs
 80035a6:	2304      	movcs	r3, #4
 80035a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3304      	adds	r3, #4
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d902      	bls.n	80035b8 <NVIC_EncodePriority+0x30>
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3b03      	subs	r3, #3
 80035b6:	e000      	b.n	80035ba <NVIC_EncodePriority+0x32>
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035bc:	f04f 32ff 	mov.w	r2, #4294967295
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43da      	mvns	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	401a      	ands	r2, r3
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d0:	f04f 31ff 	mov.w	r1, #4294967295
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	fa01 f303 	lsl.w	r3, r1, r3
 80035da:	43d9      	mvns	r1, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e0:	4313      	orrs	r3, r2
         );
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3724      	adds	r7, #36	; 0x24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr

080035ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3b01      	subs	r3, #1
 80035f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035fc:	d301      	bcc.n	8003602 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035fe:	2301      	movs	r3, #1
 8003600:	e00f      	b.n	8003622 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003602:	4a0a      	ldr	r2, [pc, #40]	; (800362c <SysTick_Config+0x40>)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3b01      	subs	r3, #1
 8003608:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800360a:	210f      	movs	r1, #15
 800360c:	f04f 30ff 	mov.w	r0, #4294967295
 8003610:	f7ff ff90 	bl	8003534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003614:	4b05      	ldr	r3, [pc, #20]	; (800362c <SysTick_Config+0x40>)
 8003616:	2200      	movs	r2, #0
 8003618:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800361a:	4b04      	ldr	r3, [pc, #16]	; (800362c <SysTick_Config+0x40>)
 800361c:	2207      	movs	r2, #7
 800361e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	e000e010 	.word	0xe000e010

08003630 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7ff ff2d 	bl	8003498 <__NVIC_SetPriorityGrouping>
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	4603      	mov	r3, r0
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003658:	f7ff ff42 	bl	80034e0 <__NVIC_GetPriorityGrouping>
 800365c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	68b9      	ldr	r1, [r7, #8]
 8003662:	6978      	ldr	r0, [r7, #20]
 8003664:	f7ff ff90 	bl	8003588 <NVIC_EncodePriority>
 8003668:	4602      	mov	r2, r0
 800366a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366e:	4611      	mov	r1, r2
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ff5f 	bl	8003534 <__NVIC_SetPriority>
}
 8003676:	bf00      	nop
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	4603      	mov	r3, r0
 8003686:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff ff35 	bl	80034fc <__NVIC_EnableIRQ>
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff ffa2 	bl	80035ec <SysTick_Config>
 80036a8:	4603      	mov	r3, r0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036c2:	e16f      	b.n	80039a4 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	2101      	movs	r1, #1
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	fa01 f303 	lsl.w	r3, r1, r3
 80036d0:	4013      	ands	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 8161 	beq.w	800399e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d005      	beq.n	80036f4 <HAL_GPIO_Init+0x40>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d130      	bne.n	8003756 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	2203      	movs	r2, #3
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4013      	ands	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800372a:	2201      	movs	r2, #1
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	43db      	mvns	r3, r3
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	4013      	ands	r3, r2
 8003738:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	091b      	lsrs	r3, r3, #4
 8003740:	f003 0201 	and.w	r2, r3, #1
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	2b03      	cmp	r3, #3
 8003760:	d017      	beq.n	8003792 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	2203      	movs	r2, #3
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4013      	ands	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d123      	bne.n	80037e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	08da      	lsrs	r2, r3, #3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3208      	adds	r2, #8
 80037a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	220f      	movs	r2, #15
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43db      	mvns	r3, r3
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4013      	ands	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	691a      	ldr	r2, [r3, #16]
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	08da      	lsrs	r2, r3, #3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3208      	adds	r2, #8
 80037e0:	6939      	ldr	r1, [r7, #16]
 80037e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	2203      	movs	r2, #3
 80037f2:	fa02 f303 	lsl.w	r3, r2, r3
 80037f6:	43db      	mvns	r3, r3
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4013      	ands	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f003 0203 	and.w	r2, r3, #3
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	fa02 f303 	lsl.w	r3, r2, r3
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 80bb 	beq.w	800399e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003828:	2300      	movs	r3, #0
 800382a:	60bb      	str	r3, [r7, #8]
 800382c:	4b64      	ldr	r3, [pc, #400]	; (80039c0 <HAL_GPIO_Init+0x30c>)
 800382e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003830:	4a63      	ldr	r2, [pc, #396]	; (80039c0 <HAL_GPIO_Init+0x30c>)
 8003832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003836:	6453      	str	r3, [r2, #68]	; 0x44
 8003838:	4b61      	ldr	r3, [pc, #388]	; (80039c0 <HAL_GPIO_Init+0x30c>)
 800383a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003844:	4a5f      	ldr	r2, [pc, #380]	; (80039c4 <HAL_GPIO_Init+0x310>)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	089b      	lsrs	r3, r3, #2
 800384a:	3302      	adds	r3, #2
 800384c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003850:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	220f      	movs	r2, #15
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4013      	ands	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a57      	ldr	r2, [pc, #348]	; (80039c8 <HAL_GPIO_Init+0x314>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d031      	beq.n	80038d4 <HAL_GPIO_Init+0x220>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a56      	ldr	r2, [pc, #344]	; (80039cc <HAL_GPIO_Init+0x318>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d02b      	beq.n	80038d0 <HAL_GPIO_Init+0x21c>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a55      	ldr	r2, [pc, #340]	; (80039d0 <HAL_GPIO_Init+0x31c>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d025      	beq.n	80038cc <HAL_GPIO_Init+0x218>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a54      	ldr	r2, [pc, #336]	; (80039d4 <HAL_GPIO_Init+0x320>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d01f      	beq.n	80038c8 <HAL_GPIO_Init+0x214>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a53      	ldr	r2, [pc, #332]	; (80039d8 <HAL_GPIO_Init+0x324>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d019      	beq.n	80038c4 <HAL_GPIO_Init+0x210>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a52      	ldr	r2, [pc, #328]	; (80039dc <HAL_GPIO_Init+0x328>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d013      	beq.n	80038c0 <HAL_GPIO_Init+0x20c>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a51      	ldr	r2, [pc, #324]	; (80039e0 <HAL_GPIO_Init+0x32c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00d      	beq.n	80038bc <HAL_GPIO_Init+0x208>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a50      	ldr	r2, [pc, #320]	; (80039e4 <HAL_GPIO_Init+0x330>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d007      	beq.n	80038b8 <HAL_GPIO_Init+0x204>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a4f      	ldr	r2, [pc, #316]	; (80039e8 <HAL_GPIO_Init+0x334>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d101      	bne.n	80038b4 <HAL_GPIO_Init+0x200>
 80038b0:	2308      	movs	r3, #8
 80038b2:	e010      	b.n	80038d6 <HAL_GPIO_Init+0x222>
 80038b4:	2309      	movs	r3, #9
 80038b6:	e00e      	b.n	80038d6 <HAL_GPIO_Init+0x222>
 80038b8:	2307      	movs	r3, #7
 80038ba:	e00c      	b.n	80038d6 <HAL_GPIO_Init+0x222>
 80038bc:	2306      	movs	r3, #6
 80038be:	e00a      	b.n	80038d6 <HAL_GPIO_Init+0x222>
 80038c0:	2305      	movs	r3, #5
 80038c2:	e008      	b.n	80038d6 <HAL_GPIO_Init+0x222>
 80038c4:	2304      	movs	r3, #4
 80038c6:	e006      	b.n	80038d6 <HAL_GPIO_Init+0x222>
 80038c8:	2303      	movs	r3, #3
 80038ca:	e004      	b.n	80038d6 <HAL_GPIO_Init+0x222>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e002      	b.n	80038d6 <HAL_GPIO_Init+0x222>
 80038d0:	2301      	movs	r3, #1
 80038d2:	e000      	b.n	80038d6 <HAL_GPIO_Init+0x222>
 80038d4:	2300      	movs	r3, #0
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	f002 0203 	and.w	r2, r2, #3
 80038dc:	0092      	lsls	r2, r2, #2
 80038de:	4093      	lsls	r3, r2
 80038e0:	461a      	mov	r2, r3
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038e8:	4936      	ldr	r1, [pc, #216]	; (80039c4 <HAL_GPIO_Init+0x310>)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	089b      	lsrs	r3, r3, #2
 80038ee:	3302      	adds	r3, #2
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038f6:	4b3d      	ldr	r3, [pc, #244]	; (80039ec <HAL_GPIO_Init+0x338>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	43db      	mvns	r3, r3
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4013      	ands	r3, r2
 8003904:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800391a:	4a34      	ldr	r2, [pc, #208]	; (80039ec <HAL_GPIO_Init+0x338>)
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003920:	4b32      	ldr	r3, [pc, #200]	; (80039ec <HAL_GPIO_Init+0x338>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	43db      	mvns	r3, r3
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	4013      	ands	r3, r2
 800392e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	4313      	orrs	r3, r2
 8003942:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003944:	4a29      	ldr	r2, [pc, #164]	; (80039ec <HAL_GPIO_Init+0x338>)
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800394a:	4b28      	ldr	r3, [pc, #160]	; (80039ec <HAL_GPIO_Init+0x338>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	43db      	mvns	r3, r3
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4013      	ands	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800396e:	4a1f      	ldr	r2, [pc, #124]	; (80039ec <HAL_GPIO_Init+0x338>)
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003974:	4b1d      	ldr	r3, [pc, #116]	; (80039ec <HAL_GPIO_Init+0x338>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	43db      	mvns	r3, r3
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4013      	ands	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003998:	4a14      	ldr	r2, [pc, #80]	; (80039ec <HAL_GPIO_Init+0x338>)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	3301      	adds	r3, #1
 80039a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	fa22 f303 	lsr.w	r3, r2, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f47f ae88 	bne.w	80036c4 <HAL_GPIO_Init+0x10>
  }
}
 80039b4:	bf00      	nop
 80039b6:	bf00      	nop
 80039b8:	371c      	adds	r7, #28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bc80      	pop	{r7}
 80039be:	4770      	bx	lr
 80039c0:	40023800 	.word	0x40023800
 80039c4:	40013800 	.word	0x40013800
 80039c8:	40020000 	.word	0x40020000
 80039cc:	40020400 	.word	0x40020400
 80039d0:	40020800 	.word	0x40020800
 80039d4:	40020c00 	.word	0x40020c00
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40021400 	.word	0x40021400
 80039e0:	40021800 	.word	0x40021800
 80039e4:	40021c00 	.word	0x40021c00
 80039e8:	40022000 	.word	0x40022000
 80039ec:	40013c00 	.word	0x40013c00

080039f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	807b      	strh	r3, [r7, #2]
 80039fc:	4613      	mov	r3, r2
 80039fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a00:	787b      	ldrb	r3, [r7, #1]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a06:	887a      	ldrh	r2, [r7, #2]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a0c:	e003      	b.n	8003a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a0e:	887b      	ldrh	r3, [r7, #2]
 8003a10:	041a      	lsls	r2, r3, #16
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	619a      	str	r2, [r3, #24]
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr

08003a20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a32:	887a      	ldrh	r2, [r7, #2]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4013      	ands	r3, r2
 8003a38:	041a      	lsls	r2, r3, #16
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	43d9      	mvns	r1, r3
 8003a3e:	887b      	ldrh	r3, [r7, #2]
 8003a40:	400b      	ands	r3, r1
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	619a      	str	r2, [r3, #24]
}
 8003a48:	bf00      	nop
 8003a4a:	3714      	adds	r7, #20
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr

08003a52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a54:	b08f      	sub	sp, #60	; 0x3c
 8003a56:	af0a      	add	r7, sp, #40	; 0x28
 8003a58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e10f      	b.n	8003c84 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f006 f8be 	bl	8009c00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2203      	movs	r2, #3
 8003a88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d102      	bne.n	8003a9e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f003 f900 	bl	8006ca8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	603b      	str	r3, [r7, #0]
 8003aae:	687e      	ldr	r6, [r7, #4]
 8003ab0:	466d      	mov	r5, sp
 8003ab2:	f106 0410 	add.w	r4, r6, #16
 8003ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003abc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003abe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ac2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ac6:	1d33      	adds	r3, r6, #4
 8003ac8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003aca:	6838      	ldr	r0, [r7, #0]
 8003acc:	f002 ffe2 	bl	8006a94 <USB_CoreInit>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e0d0      	b.n	8003c84 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f003 f8ed 	bl	8006cc8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aee:	2300      	movs	r3, #0
 8003af0:	73fb      	strb	r3, [r7, #15]
 8003af2:	e04a      	b.n	8003b8a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003af4:	7bfa      	ldrb	r2, [r7, #15]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4413      	add	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	333d      	adds	r3, #61	; 0x3d
 8003b04:	2201      	movs	r2, #1
 8003b06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b08:	7bfa      	ldrb	r2, [r7, #15]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	333c      	adds	r3, #60	; 0x3c
 8003b18:	7bfa      	ldrb	r2, [r7, #15]
 8003b1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
 8003b20:	b298      	uxth	r0, r3
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	3356      	adds	r3, #86	; 0x56
 8003b30:	4602      	mov	r2, r0
 8003b32:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b34:	7bfa      	ldrb	r2, [r7, #15]
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	3340      	adds	r3, #64	; 0x40
 8003b44:	2200      	movs	r2, #0
 8003b46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b48:	7bfa      	ldrb	r2, [r7, #15]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	3344      	adds	r3, #68	; 0x44
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b5c:	7bfa      	ldrb	r2, [r7, #15]
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	3348      	adds	r3, #72	; 0x48
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b70:	7bfa      	ldrb	r2, [r7, #15]
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	4413      	add	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	334c      	adds	r3, #76	; 0x4c
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
 8003b86:	3301      	adds	r3, #1
 8003b88:	73fb      	strb	r3, [r7, #15]
 8003b8a:	7bfa      	ldrb	r2, [r7, #15]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d3af      	bcc.n	8003af4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b94:	2300      	movs	r3, #0
 8003b96:	73fb      	strb	r3, [r7, #15]
 8003b98:	e044      	b.n	8003c24 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b9a:	7bfa      	ldrb	r2, [r7, #15]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003bac:	2200      	movs	r2, #0
 8003bae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003bb0:	7bfa      	ldrb	r2, [r7, #15]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	4413      	add	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003bc2:	7bfa      	ldrb	r2, [r7, #15]
 8003bc4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bc6:	7bfa      	ldrb	r2, [r7, #15]
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	4413      	add	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003bd8:	2200      	movs	r2, #0
 8003bda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bdc:	7bfa      	ldrb	r2, [r7, #15]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bf2:	7bfa      	ldrb	r2, [r7, #15]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c08:	7bfa      	ldrb	r2, [r7, #15]
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	3301      	adds	r3, #1
 8003c22:	73fb      	strb	r3, [r7, #15]
 8003c24:	7bfa      	ldrb	r2, [r7, #15]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d3b5      	bcc.n	8003b9a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	603b      	str	r3, [r7, #0]
 8003c34:	687e      	ldr	r6, [r7, #4]
 8003c36:	466d      	mov	r5, sp
 8003c38:	f106 0410 	add.w	r4, r6, #16
 8003c3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c48:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c4c:	1d33      	adds	r3, r6, #4
 8003c4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c50:	6838      	ldr	r0, [r7, #0]
 8003c52:	f003 f885 	bl	8006d60 <USB_DevInit>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e00d      	b.n	8003c84 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f004 f8b7 	bl	8007df0 <USB_DevDisconnect>

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c8c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_PCD_Start+0x16>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e012      	b.n	8003cc8 <HAL_PCD_Start+0x3c>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f002 ffea 	bl	8006c88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f004 f879 	bl	8007db0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003cd0:	b590      	push	{r4, r7, lr}
 8003cd2:	b08d      	sub	sp, #52	; 0x34
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f004 f930 	bl	8007f4c <USB_GetMode>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f040 847c 	bne.w	80045ec <HAL_PCD_IRQHandler+0x91c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f004 f899 	bl	8007e30 <USB_ReadInterrupts>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 8472 	beq.w	80045ea <HAL_PCD_IRQHandler+0x91a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	0a1b      	lsrs	r3, r3, #8
 8003d10:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f004 f886 	bl	8007e30 <USB_ReadInterrupts>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d107      	bne.n	8003d3e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695a      	ldr	r2, [r3, #20]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f002 0202 	and.w	r2, r2, #2
 8003d3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f004 f874 	bl	8007e30 <USB_ReadInterrupts>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f003 0310 	and.w	r3, r3, #16
 8003d4e:	2b10      	cmp	r3, #16
 8003d50:	d161      	bne.n	8003e16 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	699a      	ldr	r2, [r3, #24]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0210 	bic.w	r2, r2, #16
 8003d60:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	f003 020f 	and.w	r2, r3, #15
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3304      	adds	r3, #4
 8003d80:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	0c5b      	lsrs	r3, r3, #17
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d124      	bne.n	8003dd8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d035      	beq.n	8003e06 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003da4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	461a      	mov	r2, r3
 8003dac:	6a38      	ldr	r0, [r7, #32]
 8003dae:	f003 feb1 	bl	8007b14 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	68da      	ldr	r2, [r3, #12]
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	091b      	lsrs	r3, r3, #4
 8003dba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dbe:	441a      	add	r2, r3
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	695a      	ldr	r2, [r3, #20]
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	091b      	lsrs	r3, r3, #4
 8003dcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dd0:	441a      	add	r2, r3
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	615a      	str	r2, [r3, #20]
 8003dd6:	e016      	b.n	8003e06 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	0c5b      	lsrs	r3, r3, #17
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	2b06      	cmp	r3, #6
 8003de2:	d110      	bne.n	8003e06 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003dea:	2208      	movs	r2, #8
 8003dec:	4619      	mov	r1, r3
 8003dee:	6a38      	ldr	r0, [r7, #32]
 8003df0:	f003 fe90 	bl	8007b14 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	695a      	ldr	r2, [r3, #20]
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	091b      	lsrs	r3, r3, #4
 8003dfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e00:	441a      	add	r2, r3
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699a      	ldr	r2, [r3, #24]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f042 0210 	orr.w	r2, r2, #16
 8003e14:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f004 f808 	bl	8007e30 <USB_ReadInterrupts>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e2a:	f040 80a7 	bne.w	8003f7c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f004 f80c 	bl	8007e54 <USB_ReadDevAllOutEpInterrupt>
 8003e3c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003e3e:	e099      	b.n	8003f74 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 808e 	beq.w	8003f68 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	4611      	mov	r1, r2
 8003e56:	4618      	mov	r0, r3
 8003e58:	f004 f82e 	bl	8007eb8 <USB_ReadDevOutEPInterrupt>
 8003e5c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00c      	beq.n	8003e82 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e74:	461a      	mov	r2, r3
 8003e76:	2301      	movs	r3, #1
 8003e78:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003e7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 fe95 	bl	8004bac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f003 0308 	and.w	r3, r3, #8
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00c      	beq.n	8003ea6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e98:	461a      	mov	r2, r3
 8003e9a:	2308      	movs	r3, #8
 8003e9c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 ff6b 	bl	8004d7c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d008      	beq.n	8003ec2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	2310      	movs	r3, #16
 8003ec0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d030      	beq.n	8003f2e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed4:	2b80      	cmp	r3, #128	; 0x80
 8003ed6:	d109      	bne.n	8003eec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	69fa      	ldr	r2, [r7, #28]
 8003ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eee:	4613      	mov	r3, r2
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	4413      	add	r3, r2
 8003efe:	3304      	adds	r3, #4
 8003f00:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	78db      	ldrb	r3, [r3, #3]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d108      	bne.n	8003f1c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	4619      	mov	r1, r3
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f005 ff86 	bl	8009e28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f28:	461a      	mov	r2, r3
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f44:	461a      	mov	r2, r3
 8003f46:	2320      	movs	r3, #32
 8003f48:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d009      	beq.n	8003f68 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f60:	461a      	mov	r2, r3
 8003f62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f66:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f70:	085b      	lsrs	r3, r3, #1
 8003f72:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f47f af62 	bne.w	8003e40 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f003 ff55 	bl	8007e30 <USB_ReadInterrupts>
 8003f86:	4603      	mov	r3, r0
 8003f88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f90:	f040 80db 	bne.w	800414a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f003 ff74 	bl	8007e86 <USB_ReadDevAllInEpInterrupt>
 8003f9e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003fa4:	e0cd      	b.n	8004142 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 80c2 	beq.w	8004136 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb8:	b2d2      	uxtb	r2, r2
 8003fba:	4611      	mov	r1, r2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f003 ff98 	bl	8007ef2 <USB_ReadDevInEPInterrupt>
 8003fc2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d057      	beq.n	800407e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fda:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	69f9      	ldr	r1, [r7, #28]
 8003fea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fee:	4013      	ands	r3, r2
 8003ff0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffe:	461a      	mov	r2, r3
 8004000:	2301      	movs	r3, #1
 8004002:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d132      	bne.n	8004072 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004010:	4613      	mov	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	440b      	add	r3, r1
 800401a:	3348      	adds	r3, #72	; 0x48
 800401c:	6819      	ldr	r1, [r3, #0]
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004022:	4613      	mov	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4403      	add	r3, r0
 800402c:	3344      	adds	r3, #68	; 0x44
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4419      	add	r1, r3
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004036:	4613      	mov	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	4413      	add	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4403      	add	r3, r0
 8004040:	3348      	adds	r3, #72	; 0x48
 8004042:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	2b00      	cmp	r3, #0
 8004048:	d113      	bne.n	8004072 <HAL_PCD_IRQHandler+0x3a2>
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404e:	4613      	mov	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	440b      	add	r3, r1
 8004058:	334c      	adds	r3, #76	; 0x4c
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d108      	bne.n	8004072 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800406a:	461a      	mov	r2, r3
 800406c:	2101      	movs	r1, #1
 800406e:	f003 ff9d 	bl	8007fac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	b2db      	uxtb	r3, r3
 8004076:	4619      	mov	r1, r3
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f005 fe50 	bl	8009d1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b00      	cmp	r3, #0
 8004086:	d008      	beq.n	800409a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004094:	461a      	mov	r2, r3
 8004096:	2308      	movs	r3, #8
 8004098:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f003 0310 	and.w	r3, r3, #16
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b0:	461a      	mov	r2, r3
 80040b2:	2310      	movs	r3, #16
 80040b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040cc:	461a      	mov	r2, r3
 80040ce:	2340      	movs	r3, #64	; 0x40
 80040d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d023      	beq.n	8004124 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80040dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040de:	6a38      	ldr	r0, [r7, #32]
 80040e0:	f002 ff98 	bl	8007014 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80040e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e6:	4613      	mov	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	4413      	add	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	3338      	adds	r3, #56	; 0x38
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	4413      	add	r3, r2
 80040f4:	3304      	adds	r3, #4
 80040f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	78db      	ldrb	r3, [r3, #3]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d108      	bne.n	8004112 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2200      	movs	r2, #0
 8004104:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	b2db      	uxtb	r3, r3
 800410a:	4619      	mov	r1, r3
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f005 fe9d 	bl	8009e4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411e:	461a      	mov	r2, r3
 8004120:	2302      	movs	r3, #2
 8004122:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800412e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fcae 	bl	8004a92 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	3301      	adds	r3, #1
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800413c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413e:	085b      	lsrs	r3, r3, #1
 8004140:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	2b00      	cmp	r3, #0
 8004146:	f47f af2e 	bne.w	8003fa6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f003 fe6e 	bl	8007e30 <USB_ReadInterrupts>
 8004154:	4603      	mov	r3, r0
 8004156:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800415a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800415e:	d114      	bne.n	800418a <HAL_PCD_IRQHandler+0x4ba>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	69fa      	ldr	r2, [r7, #28]
 800416a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f005 fe49 	bl	8009e0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	695a      	ldr	r2, [r3, #20]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004188:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f003 fe4e 	bl	8007e30 <USB_ReadInterrupts>
 8004194:	4603      	mov	r3, r0
 8004196:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800419a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800419e:	d112      	bne.n	80041c6 <HAL_PCD_IRQHandler+0x4f6>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d102      	bne.n	80041b6 <HAL_PCD_IRQHandler+0x4e6>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f005 fe05 	bl	8009dc0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695a      	ldr	r2, [r3, #20]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80041c4:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f003 fe30 	bl	8007e30 <USB_ReadInterrupts>
 80041d0:	4603      	mov	r3, r0
 80041d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041da:	f040 80b7 	bne.w	800434c <HAL_PCD_IRQHandler+0x67c>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	69fa      	ldr	r2, [r7, #28]
 80041e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041ec:	f023 0301 	bic.w	r3, r3, #1
 80041f0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2110      	movs	r1, #16
 80041f8:	4618      	mov	r0, r3
 80041fa:	f002 ff0b 	bl	8007014 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041fe:	2300      	movs	r3, #0
 8004200:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004202:	e046      	b.n	8004292 <HAL_PCD_IRQHandler+0x5c2>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004210:	461a      	mov	r2, r3
 8004212:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004216:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004228:	0151      	lsls	r1, r2, #5
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	440a      	add	r2, r1
 800422e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004232:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004236:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004244:	461a      	mov	r2, r3
 8004246:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800424a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800424c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800425c:	0151      	lsls	r1, r2, #5
 800425e:	69fa      	ldr	r2, [r7, #28]
 8004260:	440a      	add	r2, r1
 8004262:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004266:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800426a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800426c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800427c:	0151      	lsls	r1, r2, #5
 800427e:	69fa      	ldr	r2, [r7, #28]
 8004280:	440a      	add	r2, r1
 8004282:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004286:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800428a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800428c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428e:	3301      	adds	r3, #1
 8004290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004298:	429a      	cmp	r2, r3
 800429a:	d3b3      	bcc.n	8004204 <HAL_PCD_IRQHandler+0x534>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042aa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80042ae:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d016      	beq.n	80042e6 <HAL_PCD_IRQHandler+0x616>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c2:	69fa      	ldr	r2, [r7, #28]
 80042c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042c8:	f043 030b 	orr.w	r3, r3, #11
 80042cc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d8:	69fa      	ldr	r2, [r7, #28]
 80042da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042de:	f043 030b 	orr.w	r3, r3, #11
 80042e2:	6453      	str	r3, [r2, #68]	; 0x44
 80042e4:	e015      	b.n	8004312 <HAL_PCD_IRQHandler+0x642>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	69fa      	ldr	r2, [r7, #28]
 80042f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80042f8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80042fc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800430c:	f043 030b 	orr.w	r3, r3, #11
 8004310:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004320:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004324:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004336:	461a      	mov	r2, r3
 8004338:	f003 fe38 	bl	8007fac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695a      	ldr	r2, [r3, #20]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800434a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f003 fd6d 	bl	8007e30 <USB_ReadInterrupts>
 8004356:	4603      	mov	r3, r0
 8004358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800435c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004360:	d124      	bne.n	80043ac <HAL_PCD_IRQHandler+0x6dc>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f003 fdfd 	bl	8007f66 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f002 fecb 	bl	800710c <USB_GetDevSpeed>
 8004376:	4603      	mov	r3, r0
 8004378:	461a      	mov	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681c      	ldr	r4, [r3, #0]
 8004382:	f001 f99d 	bl	80056c0 <HAL_RCC_GetHCLKFreq>
 8004386:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800438c:	b2db      	uxtb	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	4620      	mov	r0, r4
 8004392:	f002 fbd7 	bl	8006b44 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f005 fce9 	bl	8009d6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695a      	ldr	r2, [r3, #20]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80043aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f003 fd3d 	bl	8007e30 <USB_ReadInterrupts>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d10a      	bne.n	80043d6 <HAL_PCD_IRQHandler+0x706>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f005 fcc6 	bl	8009d52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	695a      	ldr	r2, [r3, #20]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f002 0208 	and.w	r2, r2, #8
 80043d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4618      	mov	r0, r3
 80043dc:	f003 fd28 	bl	8007e30 <USB_ReadInterrupts>
 80043e0:	4603      	mov	r3, r0
 80043e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e6:	2b80      	cmp	r3, #128	; 0x80
 80043e8:	d122      	bne.n	8004430 <HAL_PCD_IRQHandler+0x760>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043f6:	2301      	movs	r3, #1
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
 80043fa:	e014      	b.n	8004426 <HAL_PCD_IRQHandler+0x756>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004400:	4613      	mov	r3, r2
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d105      	bne.n	8004420 <HAL_PCD_IRQHandler+0x750>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	b2db      	uxtb	r3, r3
 8004418:	4619      	mov	r1, r3
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 fb08 	bl	8004a30 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	3301      	adds	r3, #1
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442c:	429a      	cmp	r2, r3
 800442e:	d3e5      	bcc.n	80043fc <HAL_PCD_IRQHandler+0x72c>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f003 fcfb 	bl	8007e30 <USB_ReadInterrupts>
 800443a:	4603      	mov	r3, r0
 800443c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004440:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004444:	d13b      	bne.n	80044be <HAL_PCD_IRQHandler+0x7ee>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004446:	2301      	movs	r3, #1
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
 800444a:	e02b      	b.n	80044a4 <HAL_PCD_IRQHandler+0x7d4>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	4413      	add	r3, r2
 8004454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004460:	4613      	mov	r3, r2
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	4413      	add	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	3340      	adds	r3, #64	; 0x40
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d115      	bne.n	800449e <HAL_PCD_IRQHandler+0x7ce>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004472:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004474:	2b00      	cmp	r3, #0
 8004476:	da12      	bge.n	800449e <HAL_PCD_IRQHandler+0x7ce>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800447c:	4613      	mov	r3, r2
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	4413      	add	r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	333f      	adds	r3, #63	; 0x3f
 8004488:	2201      	movs	r2, #1
 800448a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	b2db      	uxtb	r3, r3
 8004490:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004494:	b2db      	uxtb	r3, r3
 8004496:	4619      	mov	r1, r3
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 fac9 	bl	8004a30 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	3301      	adds	r3, #1
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d3ce      	bcc.n	800444c <HAL_PCD_IRQHandler+0x77c>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80044bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f003 fcb4 	bl	8007e30 <USB_ReadInterrupts>
 80044c8:	4603      	mov	r3, r0
 80044ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044d2:	d155      	bne.n	8004580 <HAL_PCD_IRQHandler+0x8b0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044d4:	2301      	movs	r3, #1
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24
 80044d8:	e045      	b.n	8004566 <HAL_PCD_IRQHandler+0x896>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ee:	4613      	mov	r3, r2
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	440b      	add	r3, r1
 80044f8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d12e      	bne.n	8004560 <HAL_PCD_IRQHandler+0x890>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004502:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004504:	2b00      	cmp	r3, #0
 8004506:	da2b      	bge.n	8004560 <HAL_PCD_IRQHandler+0x890>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004514:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004518:	429a      	cmp	r2, r3
 800451a:	d121      	bne.n	8004560 <HAL_PCD_IRQHandler+0x890>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004520:	4613      	mov	r3, r2
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800452e:	2201      	movs	r2, #1
 8004530:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10a      	bne.n	8004560 <HAL_PCD_IRQHandler+0x890>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	69fa      	ldr	r2, [r7, #28]
 8004554:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004558:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800455c:	6053      	str	r3, [r2, #4]
            break;
 800455e:	e007      	b.n	8004570 <HAL_PCD_IRQHandler+0x8a0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	3301      	adds	r3, #1
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456c:	429a      	cmp	r2, r3
 800456e:	d3b4      	bcc.n	80044da <HAL_PCD_IRQHandler+0x80a>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695a      	ldr	r2, [r3, #20]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800457e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4618      	mov	r0, r3
 8004586:	f003 fc53 	bl	8007e30 <USB_ReadInterrupts>
 800458a:	4603      	mov	r3, r0
 800458c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004594:	d10a      	bne.n	80045ac <HAL_PCD_IRQHandler+0x8dc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f005 fc6a 	bl	8009e70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695a      	ldr	r2, [r3, #20]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80045aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f003 fc3d 	bl	8007e30 <USB_ReadInterrupts>
 80045b6:	4603      	mov	r3, r0
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b04      	cmp	r3, #4
 80045be:	d115      	bne.n	80045ec <HAL_PCD_IRQHandler+0x91c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	f003 0304 	and.w	r3, r3, #4
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <HAL_PCD_IRQHandler+0x908>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f005 fc5a 	bl	8009e8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	6859      	ldr	r1, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	605a      	str	r2, [r3, #4]
 80045e8:	e000      	b.n	80045ec <HAL_PCD_IRQHandler+0x91c>
      return;
 80045ea:	bf00      	nop
    }
  }
}
 80045ec:	3734      	adds	r7, #52	; 0x34
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd90      	pop	{r4, r7, pc}

080045f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	460b      	mov	r3, r1
 80045fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_PCD_SetAddress+0x1a>
 8004608:	2302      	movs	r3, #2
 800460a:	e013      	b.n	8004634 <HAL_PCD_SetAddress+0x42>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	78fa      	ldrb	r2, [r7, #3]
 8004618:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	78fa      	ldrb	r2, [r7, #3]
 8004622:	4611      	mov	r1, r2
 8004624:	4618      	mov	r0, r3
 8004626:	f003 fb9e 	bl	8007d66 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	4608      	mov	r0, r1
 8004646:	4611      	mov	r1, r2
 8004648:	461a      	mov	r2, r3
 800464a:	4603      	mov	r3, r0
 800464c:	70fb      	strb	r3, [r7, #3]
 800464e:	460b      	mov	r3, r1
 8004650:	803b      	strh	r3, [r7, #0]
 8004652:	4613      	mov	r3, r2
 8004654:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800465a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800465e:	2b00      	cmp	r3, #0
 8004660:	da0f      	bge.n	8004682 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004662:	78fb      	ldrb	r3, [r7, #3]
 8004664:	f003 020f 	and.w	r2, r3, #15
 8004668:	4613      	mov	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	4413      	add	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	3338      	adds	r3, #56	; 0x38
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	4413      	add	r3, r2
 8004676:	3304      	adds	r3, #4
 8004678:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	705a      	strb	r2, [r3, #1]
 8004680:	e00f      	b.n	80046a2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004682:	78fb      	ldrb	r3, [r7, #3]
 8004684:	f003 020f 	and.w	r2, r3, #15
 8004688:	4613      	mov	r3, r2
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4413      	add	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	4413      	add	r3, r2
 8004698:	3304      	adds	r3, #4
 800469a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80046a2:	78fb      	ldrb	r3, [r7, #3]
 80046a4:	f003 030f 	and.w	r3, r3, #15
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80046ae:	883a      	ldrh	r2, [r7, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	78ba      	ldrb	r2, [r7, #2]
 80046b8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	785b      	ldrb	r3, [r3, #1]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d004      	beq.n	80046cc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80046cc:	78bb      	ldrb	r3, [r7, #2]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d102      	bne.n	80046d8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d101      	bne.n	80046e6 <HAL_PCD_EP_Open+0xaa>
 80046e2:	2302      	movs	r3, #2
 80046e4:	e00e      	b.n	8004704 <HAL_PCD_EP_Open+0xc8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68f9      	ldr	r1, [r7, #12]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f002 fd2d 	bl	8007154 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004702:	7afb      	ldrb	r3, [r7, #11]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	460b      	mov	r3, r1
 8004716:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004718:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800471c:	2b00      	cmp	r3, #0
 800471e:	da0f      	bge.n	8004740 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004720:	78fb      	ldrb	r3, [r7, #3]
 8004722:	f003 020f 	and.w	r2, r3, #15
 8004726:	4613      	mov	r3, r2
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	4413      	add	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	3338      	adds	r3, #56	; 0x38
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	4413      	add	r3, r2
 8004734:	3304      	adds	r3, #4
 8004736:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2201      	movs	r2, #1
 800473c:	705a      	strb	r2, [r3, #1]
 800473e:	e00f      	b.n	8004760 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	f003 020f 	and.w	r2, r3, #15
 8004746:	4613      	mov	r3, r2
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	4413      	add	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	4413      	add	r3, r2
 8004756:	3304      	adds	r3, #4
 8004758:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004760:	78fb      	ldrb	r3, [r7, #3]
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	b2da      	uxtb	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <HAL_PCD_EP_Close+0x6e>
 8004776:	2302      	movs	r3, #2
 8004778:	e00e      	b.n	8004798 <HAL_PCD_EP_Close+0x8c>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68f9      	ldr	r1, [r7, #12]
 8004788:	4618      	mov	r0, r3
 800478a:	f002 fd69 	bl	8007260 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	607a      	str	r2, [r7, #4]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	460b      	mov	r3, r1
 80047ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047b0:	7afb      	ldrb	r3, [r7, #11]
 80047b2:	f003 020f 	and.w	r2, r3, #15
 80047b6:	4613      	mov	r3, r2
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	4413      	add	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4413      	add	r3, r2
 80047c6:	3304      	adds	r3, #4
 80047c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2200      	movs	r2, #0
 80047da:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	2200      	movs	r2, #0
 80047e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047e2:	7afb      	ldrb	r3, [r7, #11]
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d102      	bne.n	80047fc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6818      	ldr	r0, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	b2db      	uxtb	r3, r3
 8004806:	461a      	mov	r2, r3
 8004808:	6979      	ldr	r1, [r7, #20]
 800480a:	f002 fe05 	bl	8007418 <USB_EPStartXfer>

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	460b      	mov	r3, r1
 8004822:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	f003 020f 	and.w	r2, r3, #15
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	4613      	mov	r3, r2
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	4413      	add	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800483a:	681b      	ldr	r3, [r3, #0]
}
 800483c:	4618      	mov	r0, r3
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr

08004846 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b086      	sub	sp, #24
 800484a:	af00      	add	r7, sp, #0
 800484c:	60f8      	str	r0, [r7, #12]
 800484e:	607a      	str	r2, [r7, #4]
 8004850:	603b      	str	r3, [r7, #0]
 8004852:	460b      	mov	r3, r1
 8004854:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004856:	7afb      	ldrb	r3, [r7, #11]
 8004858:	f003 020f 	and.w	r2, r3, #15
 800485c:	4613      	mov	r3, r2
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	3338      	adds	r3, #56	; 0x38
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4413      	add	r3, r2
 800486a:	3304      	adds	r3, #4
 800486c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	2200      	movs	r2, #0
 800487e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2201      	movs	r2, #1
 8004884:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004886:	7afb      	ldrb	r3, [r7, #11]
 8004888:	f003 030f 	and.w	r3, r3, #15
 800488c:	b2da      	uxtb	r2, r3
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d102      	bne.n	80048a0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6818      	ldr	r0, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	6979      	ldr	r1, [r7, #20]
 80048ae:	f002 fdb3 	bl	8007418 <USB_EPStartXfer>

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3718      	adds	r7, #24
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80048c8:	78fb      	ldrb	r3, [r7, #3]
 80048ca:	f003 020f 	and.w	r2, r3, #15
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d901      	bls.n	80048da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e050      	b.n	800497c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	da0f      	bge.n	8004902 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048e2:	78fb      	ldrb	r3, [r7, #3]
 80048e4:	f003 020f 	and.w	r2, r3, #15
 80048e8:	4613      	mov	r3, r2
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	4413      	add	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	3338      	adds	r3, #56	; 0x38
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	4413      	add	r3, r2
 80048f6:	3304      	adds	r3, #4
 80048f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	705a      	strb	r2, [r3, #1]
 8004900:	e00d      	b.n	800491e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004902:	78fa      	ldrb	r2, [r7, #3]
 8004904:	4613      	mov	r3, r2
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	4413      	add	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	4413      	add	r3, r2
 8004914:	3304      	adds	r3, #4
 8004916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2201      	movs	r2, #1
 8004922:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	b2da      	uxtb	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004936:	2b01      	cmp	r3, #1
 8004938:	d101      	bne.n	800493e <HAL_PCD_EP_SetStall+0x82>
 800493a:	2302      	movs	r3, #2
 800493c:	e01e      	b.n	800497c <HAL_PCD_EP_SetStall+0xc0>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2201      	movs	r2, #1
 8004942:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68f9      	ldr	r1, [r7, #12]
 800494c:	4618      	mov	r0, r3
 800494e:	f003 f938 	bl	8007bc2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004952:	78fb      	ldrb	r3, [r7, #3]
 8004954:	f003 030f 	and.w	r3, r3, #15
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10a      	bne.n	8004972 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6818      	ldr	r0, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	b2d9      	uxtb	r1, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800496c:	461a      	mov	r2, r3
 800496e:	f003 fb1d 	bl	8007fac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	460b      	mov	r3, r1
 800498e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	f003 020f 	and.w	r2, r3, #15
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	429a      	cmp	r2, r3
 800499c:	d901      	bls.n	80049a2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e042      	b.n	8004a28 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	da0f      	bge.n	80049ca <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049aa:	78fb      	ldrb	r3, [r7, #3]
 80049ac:	f003 020f 	and.w	r2, r3, #15
 80049b0:	4613      	mov	r3, r2
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	4413      	add	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	3338      	adds	r3, #56	; 0x38
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	4413      	add	r3, r2
 80049be:	3304      	adds	r3, #4
 80049c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2201      	movs	r2, #1
 80049c6:	705a      	strb	r2, [r3, #1]
 80049c8:	e00f      	b.n	80049ea <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	f003 020f 	and.w	r2, r3, #15
 80049d0:	4613      	mov	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	4413      	add	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	4413      	add	r3, r2
 80049e0:	3304      	adds	r3, #4
 80049e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_PCD_EP_ClrStall+0x86>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e00e      	b.n	8004a28 <HAL_PCD_EP_ClrStall+0xa4>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68f9      	ldr	r1, [r7, #12]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f003 f93f 	bl	8007c9c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	da0c      	bge.n	8004a5e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	f003 020f 	and.w	r2, r3, #15
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	3338      	adds	r3, #56	; 0x38
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	4413      	add	r3, r2
 8004a58:	3304      	adds	r3, #4
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e00c      	b.n	8004a78 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a5e:	78fb      	ldrb	r3, [r7, #3]
 8004a60:	f003 020f 	and.w	r2, r3, #15
 8004a64:	4613      	mov	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	4413      	add	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	4413      	add	r3, r2
 8004a74:	3304      	adds	r3, #4
 8004a76:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68f9      	ldr	r1, [r7, #12]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f002 ff62 	bl	8007948 <USB_EPStopXfer>
 8004a84:	4603      	mov	r3, r0
 8004a86:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a88:	7afb      	ldrb	r3, [r7, #11]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b08a      	sub	sp, #40	; 0x28
 8004a96:	af02      	add	r7, sp, #8
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	4413      	add	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	3338      	adds	r3, #56	; 0x38
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d901      	bls.n	8004aca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e06c      	b.n	8004ba4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	69fa      	ldr	r2, [r7, #28]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d902      	bls.n	8004ae6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	3303      	adds	r3, #3
 8004aea:	089b      	lsrs	r3, r3, #2
 8004aec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004aee:	e02b      	b.n	8004b48 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	691a      	ldr	r2, [r3, #16]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d902      	bls.n	8004b0c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	3303      	adds	r3, #3
 8004b10:	089b      	lsrs	r3, r3, #2
 8004b12:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	68d9      	ldr	r1, [r3, #12]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	4603      	mov	r3, r0
 8004b2a:	6978      	ldr	r0, [r7, #20]
 8004b2c:	f002 ffb5 	bl	8007a9a <USB_WritePacket>

    ep->xfer_buff  += len;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	441a      	add	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	695a      	ldr	r2, [r3, #20]
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	441a      	add	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d809      	bhi.n	8004b72 <PCD_WriteEmptyTxFifo+0xe0>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	695a      	ldr	r2, [r3, #20]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d203      	bcs.n	8004b72 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1be      	bne.n	8004af0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d811      	bhi.n	8004ba2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	f003 030f 	and.w	r3, r3, #15
 8004b84:	2201      	movs	r2, #1
 8004b86:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	43db      	mvns	r3, r3
 8004b98:	6939      	ldr	r1, [r7, #16]
 8004b9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3720      	adds	r7, #32
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b088      	sub	sp, #32
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	333c      	adds	r3, #60	; 0x3c
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d17b      	bne.n	8004cda <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f003 0308 	and.w	r3, r3, #8
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d015      	beq.n	8004c18 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	4a61      	ldr	r2, [pc, #388]	; (8004d74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	f240 80b9 	bls.w	8004d68 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 80b3 	beq.w	8004d68 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c14:	6093      	str	r3, [r2, #8]
 8004c16:	e0a7      	b.n	8004d68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	f003 0320 	and.w	r3, r3, #32
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d009      	beq.n	8004c36 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2e:	461a      	mov	r2, r3
 8004c30:	2320      	movs	r3, #32
 8004c32:	6093      	str	r3, [r2, #8]
 8004c34:	e098      	b.n	8004d68 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f040 8093 	bne.w	8004d68 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	4a4b      	ldr	r2, [pc, #300]	; (8004d74 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d90f      	bls.n	8004c6a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c60:	461a      	mov	r2, r3
 8004c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c66:	6093      	str	r3, [r2, #8]
 8004c68:	e07e      	b.n	8004d68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a1a      	ldr	r2, [r3, #32]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	0159      	lsls	r1, r3, #5
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	440b      	add	r3, r1
 8004c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c96:	1ad2      	subs	r2, r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d114      	bne.n	8004ccc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d109      	bne.n	8004cbe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	f003 f978 	bl	8007fac <USB_EP0_OutStart>
 8004cbc:	e006      	b.n	8004ccc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	68da      	ldr	r2, [r3, #12]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	441a      	add	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f005 f808 	bl	8009ce8 <HAL_PCD_DataOutStageCallback>
 8004cd8:	e046      	b.n	8004d68 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	4a26      	ldr	r2, [pc, #152]	; (8004d78 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d124      	bne.n	8004d2c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00a      	beq.n	8004d02 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cfe:	6093      	str	r3, [r2, #8]
 8004d00:	e032      	b.n	8004d68 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f003 0320 	and.w	r3, r3, #32
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d008      	beq.n	8004d1e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d18:	461a      	mov	r2, r3
 8004d1a:	2320      	movs	r3, #32
 8004d1c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	4619      	mov	r1, r3
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f004 ffdf 	bl	8009ce8 <HAL_PCD_DataOutStageCallback>
 8004d2a:	e01d      	b.n	8004d68 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d114      	bne.n	8004d5c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	4613      	mov	r3, r2
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d108      	bne.n	8004d5c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6818      	ldr	r0, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d54:	461a      	mov	r2, r3
 8004d56:	2100      	movs	r1, #0
 8004d58:	f003 f928 	bl	8007fac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	4619      	mov	r1, r3
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f004 ffc0 	bl	8009ce8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3720      	adds	r7, #32
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	4f54300a 	.word	0x4f54300a
 8004d78:	4f54310a 	.word	0x4f54310a

08004d7c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	333c      	adds	r3, #60	; 0x3c
 8004d94:	3304      	adds	r3, #4
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	015a      	lsls	r2, r3, #5
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4a15      	ldr	r2, [pc, #84]	; (8004e04 <PCD_EP_OutSetupPacket_int+0x88>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d90e      	bls.n	8004dd0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d009      	beq.n	8004dd0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc8:	461a      	mov	r2, r3
 8004dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dce:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f004 ff77 	bl	8009cc4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4a0a      	ldr	r2, [pc, #40]	; (8004e04 <PCD_EP_OutSetupPacket_int+0x88>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d90c      	bls.n	8004df8 <PCD_EP_OutSetupPacket_int+0x7c>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d108      	bne.n	8004df8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6818      	ldr	r0, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004df0:	461a      	mov	r2, r3
 8004df2:	2101      	movs	r1, #1
 8004df4:	f003 f8da 	bl	8007fac <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3718      	adds	r7, #24
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	4f54300a 	.word	0x4f54300a

08004e08 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	460b      	mov	r3, r1
 8004e12:	70fb      	strb	r3, [r7, #3]
 8004e14:	4613      	mov	r3, r2
 8004e16:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d107      	bne.n	8004e36 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004e26:	883b      	ldrh	r3, [r7, #0]
 8004e28:	0419      	lsls	r1, r3, #16
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	629a      	str	r2, [r3, #40]	; 0x28
 8004e34:	e028      	b.n	8004e88 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3c:	0c1b      	lsrs	r3, r3, #16
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	4413      	add	r3, r2
 8004e42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e44:	2300      	movs	r3, #0
 8004e46:	73fb      	strb	r3, [r7, #15]
 8004e48:	e00d      	b.n	8004e66 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	7bfb      	ldrb	r3, [r7, #15]
 8004e50:	3340      	adds	r3, #64	; 0x40
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	0c1b      	lsrs	r3, r3, #16
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e60:	7bfb      	ldrb	r3, [r7, #15]
 8004e62:	3301      	adds	r3, #1
 8004e64:	73fb      	strb	r3, [r7, #15]
 8004e66:	7bfa      	ldrb	r2, [r7, #15]
 8004e68:	78fb      	ldrb	r3, [r7, #3]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d3ec      	bcc.n	8004e4a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004e70:	883b      	ldrh	r3, [r7, #0]
 8004e72:	0418      	lsls	r0, r3, #16
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6819      	ldr	r1, [r3, #0]
 8004e78:	78fb      	ldrb	r3, [r7, #3]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	4302      	orrs	r2, r0
 8004e80:	3340      	adds	r3, #64	; 0x40
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr

08004e94 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	887a      	ldrh	r2, [r7, #2]
 8004ea6:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	370c      	adds	r7, #12
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bc80      	pop	{r7}
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08a      	sub	sp, #40	; 0x28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e23b      	b.n	800533e <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0301 	and.w	r3, r3, #1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d050      	beq.n	8004f74 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ed2:	4b9e      	ldr	r3, [pc, #632]	; (800514c <HAL_RCC_OscConfig+0x298>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 030c 	and.w	r3, r3, #12
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d00c      	beq.n	8004ef8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ede:	4b9b      	ldr	r3, [pc, #620]	; (800514c <HAL_RCC_OscConfig+0x298>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d112      	bne.n	8004f10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eea:	4b98      	ldr	r3, [pc, #608]	; (800514c <HAL_RCC_OscConfig+0x298>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ef6:	d10b      	bne.n	8004f10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef8:	4b94      	ldr	r3, [pc, #592]	; (800514c <HAL_RCC_OscConfig+0x298>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d036      	beq.n	8004f72 <HAL_RCC_OscConfig+0xbe>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d132      	bne.n	8004f72 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e216      	b.n	800533e <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	4b8e      	ldr	r3, [pc, #568]	; (8005150 <HAL_RCC_OscConfig+0x29c>)
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d013      	beq.n	8004f4a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f22:	f7fd fd13 	bl	800294c <HAL_GetTick>
 8004f26:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f28:	e008      	b.n	8004f3c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f2a:	f7fd fd0f 	bl	800294c <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b64      	cmp	r3, #100	; 0x64
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e200      	b.n	800533e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3c:	4b83      	ldr	r3, [pc, #524]	; (800514c <HAL_RCC_OscConfig+0x298>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0f0      	beq.n	8004f2a <HAL_RCC_OscConfig+0x76>
 8004f48:	e014      	b.n	8004f74 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4a:	f7fd fcff 	bl	800294c <HAL_GetTick>
 8004f4e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f50:	e008      	b.n	8004f64 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f52:	f7fd fcfb 	bl	800294c <HAL_GetTick>
 8004f56:	4602      	mov	r2, r0
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b64      	cmp	r3, #100	; 0x64
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e1ec      	b.n	800533e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f64:	4b79      	ldr	r3, [pc, #484]	; (800514c <HAL_RCC_OscConfig+0x298>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1f0      	bne.n	8004f52 <HAL_RCC_OscConfig+0x9e>
 8004f70:	e000      	b.n	8004f74 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f72:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d077      	beq.n	8005070 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f80:	4b72      	ldr	r3, [pc, #456]	; (800514c <HAL_RCC_OscConfig+0x298>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 030c 	and.w	r3, r3, #12
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00b      	beq.n	8004fa4 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f8c:	4b6f      	ldr	r3, [pc, #444]	; (800514c <HAL_RCC_OscConfig+0x298>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d126      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f98:	4b6c      	ldr	r3, [pc, #432]	; (800514c <HAL_RCC_OscConfig+0x298>)
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d120      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fa4:	4b69      	ldr	r3, [pc, #420]	; (800514c <HAL_RCC_OscConfig+0x298>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d005      	beq.n	8004fbc <HAL_RCC_OscConfig+0x108>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d001      	beq.n	8004fbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e1c0      	b.n	800533e <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fbc:	4b63      	ldr	r3, [pc, #396]	; (800514c <HAL_RCC_OscConfig+0x298>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	21f8      	movs	r1, #248	; 0xf8
 8004fca:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fcc:	69b9      	ldr	r1, [r7, #24]
 8004fce:	fa91 f1a1 	rbit	r1, r1
 8004fd2:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004fd4:	6979      	ldr	r1, [r7, #20]
 8004fd6:	fab1 f181 	clz	r1, r1
 8004fda:	b2c9      	uxtb	r1, r1
 8004fdc:	408b      	lsls	r3, r1
 8004fde:	495b      	ldr	r1, [pc, #364]	; (800514c <HAL_RCC_OscConfig+0x298>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fe4:	e044      	b.n	8005070 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d02a      	beq.n	8005044 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fee:	4b59      	ldr	r3, [pc, #356]	; (8005154 <HAL_RCC_OscConfig+0x2a0>)
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff4:	f7fd fcaa 	bl	800294c <HAL_GetTick>
 8004ff8:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ffc:	f7fd fca6 	bl	800294c <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e197      	b.n	800533e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800500e:	4b4f      	ldr	r3, [pc, #316]	; (800514c <HAL_RCC_OscConfig+0x298>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0f0      	beq.n	8004ffc <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800501a:	4b4c      	ldr	r3, [pc, #304]	; (800514c <HAL_RCC_OscConfig+0x298>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	21f8      	movs	r1, #248	; 0xf8
 8005028:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502a:	6939      	ldr	r1, [r7, #16]
 800502c:	fa91 f1a1 	rbit	r1, r1
 8005030:	60f9      	str	r1, [r7, #12]
  return result;
 8005032:	68f9      	ldr	r1, [r7, #12]
 8005034:	fab1 f181 	clz	r1, r1
 8005038:	b2c9      	uxtb	r1, r1
 800503a:	408b      	lsls	r3, r1
 800503c:	4943      	ldr	r1, [pc, #268]	; (800514c <HAL_RCC_OscConfig+0x298>)
 800503e:	4313      	orrs	r3, r2
 8005040:	600b      	str	r3, [r1, #0]
 8005042:	e015      	b.n	8005070 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005044:	4b43      	ldr	r3, [pc, #268]	; (8005154 <HAL_RCC_OscConfig+0x2a0>)
 8005046:	2200      	movs	r2, #0
 8005048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800504a:	f7fd fc7f 	bl	800294c <HAL_GetTick>
 800504e:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005052:	f7fd fc7b 	bl	800294c <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e16c      	b.n	800533e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005064:	4b39      	ldr	r3, [pc, #228]	; (800514c <HAL_RCC_OscConfig+0x298>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1f0      	bne.n	8005052 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0308 	and.w	r3, r3, #8
 8005078:	2b00      	cmp	r3, #0
 800507a:	d030      	beq.n	80050de <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d016      	beq.n	80050b2 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005084:	4b34      	ldr	r3, [pc, #208]	; (8005158 <HAL_RCC_OscConfig+0x2a4>)
 8005086:	2201      	movs	r2, #1
 8005088:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800508a:	f7fd fc5f 	bl	800294c <HAL_GetTick>
 800508e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005090:	e008      	b.n	80050a4 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005092:	f7fd fc5b 	bl	800294c <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e14c      	b.n	800533e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a4:	4b29      	ldr	r3, [pc, #164]	; (800514c <HAL_RCC_OscConfig+0x298>)
 80050a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0f0      	beq.n	8005092 <HAL_RCC_OscConfig+0x1de>
 80050b0:	e015      	b.n	80050de <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050b2:	4b29      	ldr	r3, [pc, #164]	; (8005158 <HAL_RCC_OscConfig+0x2a4>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b8:	f7fd fc48 	bl	800294c <HAL_GetTick>
 80050bc:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050c0:	f7fd fc44 	bl	800294c <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e135      	b.n	800533e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d2:	4b1e      	ldr	r3, [pc, #120]	; (800514c <HAL_RCC_OscConfig+0x298>)
 80050d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1f0      	bne.n	80050c0 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f000 8087 	beq.w	80051fa <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ec:	2300      	movs	r3, #0
 80050ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050f2:	4b16      	ldr	r3, [pc, #88]	; (800514c <HAL_RCC_OscConfig+0x298>)
 80050f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d110      	bne.n	8005120 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050fe:	2300      	movs	r3, #0
 8005100:	60bb      	str	r3, [r7, #8]
 8005102:	4b12      	ldr	r3, [pc, #72]	; (800514c <HAL_RCC_OscConfig+0x298>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	4a11      	ldr	r2, [pc, #68]	; (800514c <HAL_RCC_OscConfig+0x298>)
 8005108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800510c:	6413      	str	r3, [r2, #64]	; 0x40
 800510e:	4b0f      	ldr	r3, [pc, #60]	; (800514c <HAL_RCC_OscConfig+0x298>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005116:	60bb      	str	r3, [r7, #8]
 8005118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800511a:	2301      	movs	r3, #1
 800511c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005120:	4b0e      	ldr	r3, [pc, #56]	; (800515c <HAL_RCC_OscConfig+0x2a8>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a0d      	ldr	r2, [pc, #52]	; (800515c <HAL_RCC_OscConfig+0x2a8>)
 8005126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800512a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800512c:	4b0b      	ldr	r3, [pc, #44]	; (800515c <HAL_RCC_OscConfig+0x2a8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005134:	2b00      	cmp	r3, #0
 8005136:	d122      	bne.n	800517e <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005138:	4b08      	ldr	r3, [pc, #32]	; (800515c <HAL_RCC_OscConfig+0x2a8>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a07      	ldr	r2, [pc, #28]	; (800515c <HAL_RCC_OscConfig+0x2a8>)
 800513e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005142:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005144:	f7fd fc02 	bl	800294c <HAL_GetTick>
 8005148:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800514a:	e012      	b.n	8005172 <HAL_RCC_OscConfig+0x2be>
 800514c:	40023800 	.word	0x40023800
 8005150:	40023802 	.word	0x40023802
 8005154:	42470000 	.word	0x42470000
 8005158:	42470e80 	.word	0x42470e80
 800515c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005160:	f7fd fbf4 	bl	800294c <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b02      	cmp	r3, #2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e0e5      	b.n	800533e <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005172:	4b75      	ldr	r3, [pc, #468]	; (8005348 <HAL_RCC_OscConfig+0x494>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0f0      	beq.n	8005160 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	4b72      	ldr	r3, [pc, #456]	; (800534c <HAL_RCC_OscConfig+0x498>)
 8005184:	b2d2      	uxtb	r2, r2
 8005186:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d015      	beq.n	80051bc <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005190:	f7fd fbdc 	bl	800294c <HAL_GetTick>
 8005194:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005196:	e00a      	b.n	80051ae <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005198:	f7fd fbd8 	bl	800294c <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e0c7      	b.n	800533e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ae:	4b68      	ldr	r3, [pc, #416]	; (8005350 <HAL_RCC_OscConfig+0x49c>)
 80051b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b2:	f003 0302 	and.w	r3, r3, #2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0ee      	beq.n	8005198 <HAL_RCC_OscConfig+0x2e4>
 80051ba:	e014      	b.n	80051e6 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051bc:	f7fd fbc6 	bl	800294c <HAL_GetTick>
 80051c0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051c2:	e00a      	b.n	80051da <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051c4:	f7fd fbc2 	bl	800294c <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e0b1      	b.n	800533e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051da:	4b5d      	ldr	r3, [pc, #372]	; (8005350 <HAL_RCC_OscConfig+0x49c>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1ee      	bne.n	80051c4 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d105      	bne.n	80051fa <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ee:	4b58      	ldr	r3, [pc, #352]	; (8005350 <HAL_RCC_OscConfig+0x49c>)
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	4a57      	ldr	r2, [pc, #348]	; (8005350 <HAL_RCC_OscConfig+0x49c>)
 80051f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 809c 	beq.w	800533c <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005204:	4b52      	ldr	r3, [pc, #328]	; (8005350 <HAL_RCC_OscConfig+0x49c>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f003 030c 	and.w	r3, r3, #12
 800520c:	2b08      	cmp	r3, #8
 800520e:	d061      	beq.n	80052d4 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	2b02      	cmp	r3, #2
 8005216:	d146      	bne.n	80052a6 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005218:	4b4e      	ldr	r3, [pc, #312]	; (8005354 <HAL_RCC_OscConfig+0x4a0>)
 800521a:	2200      	movs	r2, #0
 800521c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800521e:	f7fd fb95 	bl	800294c <HAL_GetTick>
 8005222:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005224:	e008      	b.n	8005238 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005226:	f7fd fb91 	bl	800294c <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b64      	cmp	r3, #100	; 0x64
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e082      	b.n	800533e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005238:	4b45      	ldr	r3, [pc, #276]	; (8005350 <HAL_RCC_OscConfig+0x49c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1f0      	bne.n	8005226 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005244:	4b42      	ldr	r3, [pc, #264]	; (8005350 <HAL_RCC_OscConfig+0x49c>)
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	4b43      	ldr	r3, [pc, #268]	; (8005358 <HAL_RCC_OscConfig+0x4a4>)
 800524a:	4013      	ands	r3, r2
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	69d1      	ldr	r1, [r2, #28]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6a12      	ldr	r2, [r2, #32]
 8005254:	4311      	orrs	r1, r2
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800525a:	0192      	lsls	r2, r2, #6
 800525c:	4311      	orrs	r1, r2
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005262:	0612      	lsls	r2, r2, #24
 8005264:	4311      	orrs	r1, r2
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800526a:	0852      	lsrs	r2, r2, #1
 800526c:	3a01      	subs	r2, #1
 800526e:	0412      	lsls	r2, r2, #16
 8005270:	430a      	orrs	r2, r1
 8005272:	4937      	ldr	r1, [pc, #220]	; (8005350 <HAL_RCC_OscConfig+0x49c>)
 8005274:	4313      	orrs	r3, r2
 8005276:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005278:	4b36      	ldr	r3, [pc, #216]	; (8005354 <HAL_RCC_OscConfig+0x4a0>)
 800527a:	2201      	movs	r2, #1
 800527c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527e:	f7fd fb65 	bl	800294c <HAL_GetTick>
 8005282:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005284:	e008      	b.n	8005298 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005286:	f7fd fb61 	bl	800294c <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b64      	cmp	r3, #100	; 0x64
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e052      	b.n	800533e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005298:	4b2d      	ldr	r3, [pc, #180]	; (8005350 <HAL_RCC_OscConfig+0x49c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0f0      	beq.n	8005286 <HAL_RCC_OscConfig+0x3d2>
 80052a4:	e04a      	b.n	800533c <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052a6:	4b2b      	ldr	r3, [pc, #172]	; (8005354 <HAL_RCC_OscConfig+0x4a0>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052ac:	f7fd fb4e 	bl	800294c <HAL_GetTick>
 80052b0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052b4:	f7fd fb4a 	bl	800294c <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b64      	cmp	r3, #100	; 0x64
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e03b      	b.n	800533e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052c6:	4b22      	ldr	r3, [pc, #136]	; (8005350 <HAL_RCC_OscConfig+0x49c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f0      	bne.n	80052b4 <HAL_RCC_OscConfig+0x400>
 80052d2:	e033      	b.n	800533c <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d101      	bne.n	80052e0 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e02e      	b.n	800533e <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80052e0:	4b1b      	ldr	r3, [pc, #108]	; (8005350 <HAL_RCC_OscConfig+0x49c>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d121      	bne.n	8005338 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052fe:	429a      	cmp	r2, r3
 8005300:	d11a      	bne.n	8005338 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005302:	69fa      	ldr	r2, [r7, #28]
 8005304:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005308:	4013      	ands	r3, r2
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800530e:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005310:	4293      	cmp	r3, r2
 8005312:	d111      	bne.n	8005338 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	085b      	lsrs	r3, r3, #1
 8005320:	3b01      	subs	r3, #1
 8005322:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005324:	429a      	cmp	r2, r3
 8005326:	d107      	bne.n	8005338 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005332:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005334:	429a      	cmp	r2, r3
 8005336:	d001      	beq.n	800533c <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e000      	b.n	800533e <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3728      	adds	r7, #40	; 0x28
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	40007000 	.word	0x40007000
 800534c:	40023870 	.word	0x40023870
 8005350:	40023800 	.word	0x40023800
 8005354:	42470060 	.word	0x42470060
 8005358:	f0bc8000 	.word	0xf0bc8000

0800535c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e0d2      	b.n	8005516 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005370:	4b6b      	ldr	r3, [pc, #428]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 030f 	and.w	r3, r3, #15
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d90c      	bls.n	8005398 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537e:	4b68      	ldr	r3, [pc, #416]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005386:	4b66      	ldr	r3, [pc, #408]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 030f 	and.w	r3, r3, #15
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d001      	beq.n	8005398 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e0be      	b.n	8005516 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d020      	beq.n	80053e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053b0:	4b5c      	ldr	r3, [pc, #368]	; (8005524 <HAL_RCC_ClockConfig+0x1c8>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	4a5b      	ldr	r2, [pc, #364]	; (8005524 <HAL_RCC_ClockConfig+0x1c8>)
 80053b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0308 	and.w	r3, r3, #8
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80053c8:	4b56      	ldr	r3, [pc, #344]	; (8005524 <HAL_RCC_ClockConfig+0x1c8>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	4a55      	ldr	r2, [pc, #340]	; (8005524 <HAL_RCC_ClockConfig+0x1c8>)
 80053ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d4:	4b53      	ldr	r3, [pc, #332]	; (8005524 <HAL_RCC_ClockConfig+0x1c8>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	4950      	ldr	r1, [pc, #320]	; (8005524 <HAL_RCC_ClockConfig+0x1c8>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d040      	beq.n	8005474 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d107      	bne.n	800540a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053fa:	4b4a      	ldr	r3, [pc, #296]	; (8005524 <HAL_RCC_ClockConfig+0x1c8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d115      	bne.n	8005432 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e085      	b.n	8005516 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b02      	cmp	r3, #2
 8005410:	d107      	bne.n	8005422 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005412:	4b44      	ldr	r3, [pc, #272]	; (8005524 <HAL_RCC_ClockConfig+0x1c8>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d109      	bne.n	8005432 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e079      	b.n	8005516 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005422:	4b40      	ldr	r3, [pc, #256]	; (8005524 <HAL_RCC_ClockConfig+0x1c8>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e071      	b.n	8005516 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005432:	4b3c      	ldr	r3, [pc, #240]	; (8005524 <HAL_RCC_ClockConfig+0x1c8>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f023 0203 	bic.w	r2, r3, #3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	4939      	ldr	r1, [pc, #228]	; (8005524 <HAL_RCC_ClockConfig+0x1c8>)
 8005440:	4313      	orrs	r3, r2
 8005442:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005444:	f7fd fa82 	bl	800294c <HAL_GetTick>
 8005448:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544a:	e00a      	b.n	8005462 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800544c:	f7fd fa7e 	bl	800294c <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	f241 3288 	movw	r2, #5000	; 0x1388
 800545a:	4293      	cmp	r3, r2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e059      	b.n	8005516 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005462:	4b30      	ldr	r3, [pc, #192]	; (8005524 <HAL_RCC_ClockConfig+0x1c8>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 020c 	and.w	r2, r3, #12
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	429a      	cmp	r2, r3
 8005472:	d1eb      	bne.n	800544c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005474:	4b2a      	ldr	r3, [pc, #168]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 030f 	and.w	r3, r3, #15
 800547c:	683a      	ldr	r2, [r7, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d20c      	bcs.n	800549c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005482:	4b27      	ldr	r3, [pc, #156]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	b2d2      	uxtb	r2, r2
 8005488:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800548a:	4b25      	ldr	r3, [pc, #148]	; (8005520 <HAL_RCC_ClockConfig+0x1c4>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	683a      	ldr	r2, [r7, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	d001      	beq.n	800549c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e03c      	b.n	8005516 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d008      	beq.n	80054ba <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054a8:	4b1e      	ldr	r3, [pc, #120]	; (8005524 <HAL_RCC_ClockConfig+0x1c8>)
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	491b      	ldr	r1, [pc, #108]	; (8005524 <HAL_RCC_ClockConfig+0x1c8>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d009      	beq.n	80054da <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054c6:	4b17      	ldr	r3, [pc, #92]	; (8005524 <HAL_RCC_ClockConfig+0x1c8>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	4913      	ldr	r1, [pc, #76]	; (8005524 <HAL_RCC_ClockConfig+0x1c8>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80054da:	f000 f82b 	bl	8005534 <HAL_RCC_GetSysClockFreq>
 80054de:	4601      	mov	r1, r0
 80054e0:	4b10      	ldr	r3, [pc, #64]	; (8005524 <HAL_RCC_ClockConfig+0x1c8>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054e8:	22f0      	movs	r2, #240	; 0xf0
 80054ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	fa92 f2a2 	rbit	r2, r2
 80054f2:	60fa      	str	r2, [r7, #12]
  return result;
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	fab2 f282 	clz	r2, r2
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	40d3      	lsrs	r3, r2
 80054fe:	4a0a      	ldr	r2, [pc, #40]	; (8005528 <HAL_RCC_ClockConfig+0x1cc>)
 8005500:	5cd3      	ldrb	r3, [r2, r3]
 8005502:	fa21 f303 	lsr.w	r3, r1, r3
 8005506:	4a09      	ldr	r2, [pc, #36]	; (800552c <HAL_RCC_ClockConfig+0x1d0>)
 8005508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800550a:	4b09      	ldr	r3, [pc, #36]	; (8005530 <HAL_RCC_ClockConfig+0x1d4>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f7fd f9da 	bl	80028c8 <HAL_InitTick>

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	40023c00 	.word	0x40023c00
 8005524:	40023800 	.word	0x40023800
 8005528:	0800d3bc 	.word	0x0800d3bc
 800552c:	20000064 	.word	0x20000064
 8005530:	20000068 	.word	0x20000068

08005534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005538:	b090      	sub	sp, #64	; 0x40
 800553a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	637b      	str	r3, [r7, #52]	; 0x34
 8005540:	2300      	movs	r3, #0
 8005542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005544:	2300      	movs	r3, #0
 8005546:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800554c:	4b59      	ldr	r3, [pc, #356]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f003 030c 	and.w	r3, r3, #12
 8005554:	2b08      	cmp	r3, #8
 8005556:	d00d      	beq.n	8005574 <HAL_RCC_GetSysClockFreq+0x40>
 8005558:	2b08      	cmp	r3, #8
 800555a:	f200 80a2 	bhi.w	80056a2 <HAL_RCC_GetSysClockFreq+0x16e>
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <HAL_RCC_GetSysClockFreq+0x34>
 8005562:	2b04      	cmp	r3, #4
 8005564:	d003      	beq.n	800556e <HAL_RCC_GetSysClockFreq+0x3a>
 8005566:	e09c      	b.n	80056a2 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005568:	4b53      	ldr	r3, [pc, #332]	; (80056b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800556a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800556c:	e09c      	b.n	80056a8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800556e:	4b53      	ldr	r3, [pc, #332]	; (80056bc <HAL_RCC_GetSysClockFreq+0x188>)
 8005570:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005572:	e099      	b.n	80056a8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005574:	4b4f      	ldr	r3, [pc, #316]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800557c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800557e:	4b4d      	ldr	r3, [pc, #308]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d027      	beq.n	80055da <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800558a:	4b4a      	ldr	r3, [pc, #296]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	099b      	lsrs	r3, r3, #6
 8005590:	2200      	movs	r2, #0
 8005592:	623b      	str	r3, [r7, #32]
 8005594:	627a      	str	r2, [r7, #36]	; 0x24
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800559c:	2100      	movs	r1, #0
 800559e:	4b47      	ldr	r3, [pc, #284]	; (80056bc <HAL_RCC_GetSysClockFreq+0x188>)
 80055a0:	fb03 f201 	mul.w	r2, r3, r1
 80055a4:	2300      	movs	r3, #0
 80055a6:	fb00 f303 	mul.w	r3, r0, r3
 80055aa:	4413      	add	r3, r2
 80055ac:	4a43      	ldr	r2, [pc, #268]	; (80056bc <HAL_RCC_GetSysClockFreq+0x188>)
 80055ae:	fba0 2102 	umull	r2, r1, r0, r2
 80055b2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80055b4:	62ba      	str	r2, [r7, #40]	; 0x28
 80055b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055b8:	4413      	add	r3, r2
 80055ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055be:	2200      	movs	r2, #0
 80055c0:	61bb      	str	r3, [r7, #24]
 80055c2:	61fa      	str	r2, [r7, #28]
 80055c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80055cc:	f7fb fab8 	bl	8000b40 <__aeabi_uldivmod>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4613      	mov	r3, r2
 80055d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055d8:	e055      	b.n	8005686 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055da:	4b36      	ldr	r3, [pc, #216]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	099b      	lsrs	r3, r3, #6
 80055e0:	2200      	movs	r2, #0
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	617a      	str	r2, [r7, #20]
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80055ec:	f04f 0b00 	mov.w	fp, #0
 80055f0:	4652      	mov	r2, sl
 80055f2:	465b      	mov	r3, fp
 80055f4:	f04f 0000 	mov.w	r0, #0
 80055f8:	f04f 0100 	mov.w	r1, #0
 80055fc:	0159      	lsls	r1, r3, #5
 80055fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005602:	0150      	lsls	r0, r2, #5
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	ebb2 080a 	subs.w	r8, r2, sl
 800560c:	eb63 090b 	sbc.w	r9, r3, fp
 8005610:	f04f 0200 	mov.w	r2, #0
 8005614:	f04f 0300 	mov.w	r3, #0
 8005618:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800561c:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005620:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005624:	ebb2 0408 	subs.w	r4, r2, r8
 8005628:	eb63 0509 	sbc.w	r5, r3, r9
 800562c:	f04f 0200 	mov.w	r2, #0
 8005630:	f04f 0300 	mov.w	r3, #0
 8005634:	00eb      	lsls	r3, r5, #3
 8005636:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800563a:	00e2      	lsls	r2, r4, #3
 800563c:	4614      	mov	r4, r2
 800563e:	461d      	mov	r5, r3
 8005640:	eb14 030a 	adds.w	r3, r4, sl
 8005644:	603b      	str	r3, [r7, #0]
 8005646:	eb45 030b 	adc.w	r3, r5, fp
 800564a:	607b      	str	r3, [r7, #4]
 800564c:	f04f 0200 	mov.w	r2, #0
 8005650:	f04f 0300 	mov.w	r3, #0
 8005654:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005658:	4629      	mov	r1, r5
 800565a:	028b      	lsls	r3, r1, #10
 800565c:	4620      	mov	r0, r4
 800565e:	4629      	mov	r1, r5
 8005660:	4604      	mov	r4, r0
 8005662:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8005666:	4601      	mov	r1, r0
 8005668:	028a      	lsls	r2, r1, #10
 800566a:	4610      	mov	r0, r2
 800566c:	4619      	mov	r1, r3
 800566e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005670:	2200      	movs	r2, #0
 8005672:	60bb      	str	r3, [r7, #8]
 8005674:	60fa      	str	r2, [r7, #12]
 8005676:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800567a:	f7fb fa61 	bl	8000b40 <__aeabi_uldivmod>
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	4613      	mov	r3, r2
 8005684:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005686:	4b0b      	ldr	r3, [pc, #44]	; (80056b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	0c1b      	lsrs	r3, r3, #16
 800568c:	f003 0303 	and.w	r3, r3, #3
 8005690:	3301      	adds	r3, #1
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005696:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569a:	fbb2 f3f3 	udiv	r3, r2, r3
 800569e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80056a0:	e002      	b.n	80056a8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056a2:	4b05      	ldr	r3, [pc, #20]	; (80056b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80056a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80056a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3740      	adds	r7, #64	; 0x40
 80056ae:	46bd      	mov	sp, r7
 80056b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056b4:	40023800 	.word	0x40023800
 80056b8:	00f42400 	.word	0x00f42400
 80056bc:	017d7840 	.word	0x017d7840

080056c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056c0:	b480      	push	{r7}
 80056c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056c4:	4b02      	ldr	r3, [pc, #8]	; (80056d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80056c6:	681b      	ldr	r3, [r3, #0]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bc80      	pop	{r7}
 80056ce:	4770      	bx	lr
 80056d0:	20000064 	.word	0x20000064

080056d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e07b      	b.n	80057de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d108      	bne.n	8005700 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056f6:	d009      	beq.n	800570c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	61da      	str	r2, [r3, #28]
 80056fe:	e005      	b.n	800570c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d106      	bne.n	800572c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f7fc fe82 	bl	8002430 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005742:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800575e:	431a      	orrs	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	431a      	orrs	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005786:	431a      	orrs	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005790:	ea42 0103 	orr.w	r1, r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005798:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	0c1b      	lsrs	r3, r3, #16
 80057aa:	f003 0104 	and.w	r1, r3, #4
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	f003 0210 	and.w	r2, r3, #16
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	430a      	orrs	r2, r1
 80057bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	69da      	ldr	r2, [r3, #28]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}

080057e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b088      	sub	sp, #32
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	60f8      	str	r0, [r7, #12]
 80057ee:	60b9      	str	r1, [r7, #8]
 80057f0:	603b      	str	r3, [r7, #0]
 80057f2:	4613      	mov	r3, r2
 80057f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <HAL_SPI_Transmit+0x22>
 8005804:	2302      	movs	r3, #2
 8005806:	e12d      	b.n	8005a64 <HAL_SPI_Transmit+0x27e>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005810:	f7fd f89c 	bl	800294c <HAL_GetTick>
 8005814:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005816:	88fb      	ldrh	r3, [r7, #6]
 8005818:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b01      	cmp	r3, #1
 8005824:	d002      	beq.n	800582c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005826:	2302      	movs	r3, #2
 8005828:	77fb      	strb	r3, [r7, #31]
    goto error;
 800582a:	e116      	b.n	8005a5a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <HAL_SPI_Transmit+0x52>
 8005832:	88fb      	ldrh	r3, [r7, #6]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d102      	bne.n	800583e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800583c:	e10d      	b.n	8005a5a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2203      	movs	r2, #3
 8005842:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	88fa      	ldrh	r2, [r7, #6]
 8005856:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	88fa      	ldrh	r2, [r7, #6]
 800585c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005884:	d10f      	bne.n	80058a6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005894:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b0:	2b40      	cmp	r3, #64	; 0x40
 80058b2:	d007      	beq.n	80058c4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058cc:	d14f      	bne.n	800596e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <HAL_SPI_Transmit+0xf6>
 80058d6:	8afb      	ldrh	r3, [r7, #22]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d142      	bne.n	8005962 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e0:	881a      	ldrh	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ec:	1c9a      	adds	r2, r3, #2
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005900:	e02f      	b.n	8005962 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b02      	cmp	r3, #2
 800590e:	d112      	bne.n	8005936 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005914:	881a      	ldrh	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005920:	1c9a      	adds	r2, r3, #2
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	86da      	strh	r2, [r3, #54]	; 0x36
 8005934:	e015      	b.n	8005962 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005936:	f7fd f809 	bl	800294c <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	429a      	cmp	r2, r3
 8005944:	d803      	bhi.n	800594e <HAL_SPI_Transmit+0x168>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594c:	d102      	bne.n	8005954 <HAL_SPI_Transmit+0x16e>
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d106      	bne.n	8005962 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005960:	e07b      	b.n	8005a5a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005966:	b29b      	uxth	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1ca      	bne.n	8005902 <HAL_SPI_Transmit+0x11c>
 800596c:	e050      	b.n	8005a10 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <HAL_SPI_Transmit+0x196>
 8005976:	8afb      	ldrh	r3, [r7, #22]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d144      	bne.n	8005a06 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	330c      	adds	r3, #12
 8005986:	7812      	ldrb	r2, [r2, #0]
 8005988:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005998:	b29b      	uxth	r3, r3
 800599a:	3b01      	subs	r3, #1
 800599c:	b29a      	uxth	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80059a2:	e030      	b.n	8005a06 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d113      	bne.n	80059da <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	330c      	adds	r3, #12
 80059bc:	7812      	ldrb	r2, [r2, #0]
 80059be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80059d8:	e015      	b.n	8005a06 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059da:	f7fc ffb7 	bl	800294c <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d803      	bhi.n	80059f2 <HAL_SPI_Transmit+0x20c>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059f0:	d102      	bne.n	80059f8 <HAL_SPI_Transmit+0x212>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d106      	bne.n	8005a06 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005a04:	e029      	b.n	8005a5a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1c9      	bne.n	80059a4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	6839      	ldr	r1, [r7, #0]
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 fbae 	bl	8006176 <SPI_EndRxTxTransaction>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2220      	movs	r2, #32
 8005a24:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10a      	bne.n	8005a44 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a2e:	2300      	movs	r3, #0
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	613b      	str	r3, [r7, #16]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	613b      	str	r3, [r7, #16]
 8005a42:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	77fb      	strb	r3, [r7, #31]
 8005a50:	e003      	b.n	8005a5a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a62:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3720      	adds	r7, #32
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af02      	add	r7, sp, #8
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d002      	beq.n	8005a92 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a90:	e0fb      	b.n	8005c8a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a9a:	d112      	bne.n	8005ac2 <HAL_SPI_Receive+0x56>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10e      	bne.n	8005ac2 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2204      	movs	r2, #4
 8005aa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005aac:	88fa      	ldrh	r2, [r7, #6]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	68b9      	ldr	r1, [r7, #8]
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f000 f8ef 	bl	8005c9c <HAL_SPI_TransmitReceive>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	e0e8      	b.n	8005c94 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d101      	bne.n	8005ad0 <HAL_SPI_Receive+0x64>
 8005acc:	2302      	movs	r3, #2
 8005ace:	e0e1      	b.n	8005c94 <HAL_SPI_Receive+0x228>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ad8:	f7fc ff38 	bl	800294c <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <HAL_SPI_Receive+0x7e>
 8005ae4:	88fb      	ldrh	r3, [r7, #6]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d102      	bne.n	8005af0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005aee:	e0cc      	b.n	8005c8a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2204      	movs	r2, #4
 8005af4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	88fa      	ldrh	r2, [r7, #6]
 8005b08:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	88fa      	ldrh	r2, [r7, #6]
 8005b0e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b36:	d10f      	bne.n	8005b58 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b46:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b56:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b62:	2b40      	cmp	r3, #64	; 0x40
 8005b64:	d007      	beq.n	8005b76 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d16a      	bne.n	8005c54 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005b7e:	e032      	b.n	8005be6 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d115      	bne.n	8005bba <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f103 020c 	add.w	r2, r3, #12
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9a:	7812      	ldrb	r2, [r2, #0]
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bb8:	e015      	b.n	8005be6 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bba:	f7fc fec7 	bl	800294c <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	683a      	ldr	r2, [r7, #0]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d803      	bhi.n	8005bd2 <HAL_SPI_Receive+0x166>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd0:	d102      	bne.n	8005bd8 <HAL_SPI_Receive+0x16c>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d106      	bne.n	8005be6 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005be4:	e051      	b.n	8005c8a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1c7      	bne.n	8005b80 <HAL_SPI_Receive+0x114>
 8005bf0:	e035      	b.n	8005c5e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d113      	bne.n	8005c28 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0a:	b292      	uxth	r2, r2
 8005c0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c12:	1c9a      	adds	r2, r3, #2
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c26:	e015      	b.n	8005c54 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c28:	f7fc fe90 	bl	800294c <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d803      	bhi.n	8005c40 <HAL_SPI_Receive+0x1d4>
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3e:	d102      	bne.n	8005c46 <HAL_SPI_Receive+0x1da>
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d106      	bne.n	8005c54 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005c52:	e01a      	b.n	8005c8a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1c9      	bne.n	8005bf2 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	6839      	ldr	r1, [r7, #0]
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 fa52 	bl	800610c <SPI_EndRxTransaction>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d002      	beq.n	8005c74 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2220      	movs	r2, #32
 8005c72:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	75fb      	strb	r3, [r7, #23]
 8005c80:	e003      	b.n	8005c8a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b08c      	sub	sp, #48	; 0x30
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005caa:	2301      	movs	r3, #1
 8005cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d101      	bne.n	8005cc2 <HAL_SPI_TransmitReceive+0x26>
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	e198      	b.n	8005ff4 <HAL_SPI_TransmitReceive+0x358>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cca:	f7fc fe3f 	bl	800294c <HAL_GetTick>
 8005cce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005ce0:	887b      	ldrh	r3, [r7, #2]
 8005ce2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ce4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d00f      	beq.n	8005d0c <HAL_SPI_TransmitReceive+0x70>
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cf2:	d107      	bne.n	8005d04 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d103      	bne.n	8005d04 <HAL_SPI_TransmitReceive+0x68>
 8005cfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d00:	2b04      	cmp	r3, #4
 8005d02:	d003      	beq.n	8005d0c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005d04:	2302      	movs	r3, #2
 8005d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d0a:	e16d      	b.n	8005fe8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d005      	beq.n	8005d1e <HAL_SPI_TransmitReceive+0x82>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d002      	beq.n	8005d1e <HAL_SPI_TransmitReceive+0x82>
 8005d18:	887b      	ldrh	r3, [r7, #2]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d103      	bne.n	8005d26 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005d24:	e160      	b.n	8005fe8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b04      	cmp	r3, #4
 8005d30:	d003      	beq.n	8005d3a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2205      	movs	r2, #5
 8005d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	887a      	ldrh	r2, [r7, #2]
 8005d4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	887a      	ldrh	r2, [r7, #2]
 8005d50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	887a      	ldrh	r2, [r7, #2]
 8005d5c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	887a      	ldrh	r2, [r7, #2]
 8005d62:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7a:	2b40      	cmp	r3, #64	; 0x40
 8005d7c:	d007      	beq.n	8005d8e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d96:	d17c      	bne.n	8005e92 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d002      	beq.n	8005da6 <HAL_SPI_TransmitReceive+0x10a>
 8005da0:	8b7b      	ldrh	r3, [r7, #26]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d16a      	bne.n	8005e7c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005daa:	881a      	ldrh	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db6:	1c9a      	adds	r2, r3, #2
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dca:	e057      	b.n	8005e7c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d11b      	bne.n	8005e12 <HAL_SPI_TransmitReceive+0x176>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d016      	beq.n	8005e12 <HAL_SPI_TransmitReceive+0x176>
 8005de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d113      	bne.n	8005e12 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dee:	881a      	ldrh	r2, [r3, #0]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfa:	1c9a      	adds	r2, r3, #2
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	3b01      	subs	r3, #1
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f003 0301 	and.w	r3, r3, #1
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d119      	bne.n	8005e54 <HAL_SPI_TransmitReceive+0x1b8>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d014      	beq.n	8005e54 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68da      	ldr	r2, [r3, #12]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e34:	b292      	uxth	r2, r2
 8005e36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	1c9a      	adds	r2, r3, #2
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e50:	2301      	movs	r3, #1
 8005e52:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e54:	f7fc fd7a 	bl	800294c <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d80b      	bhi.n	8005e7c <HAL_SPI_TransmitReceive+0x1e0>
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6a:	d007      	beq.n	8005e7c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005e7a:	e0b5      	b.n	8005fe8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1a2      	bne.n	8005dcc <HAL_SPI_TransmitReceive+0x130>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d19d      	bne.n	8005dcc <HAL_SPI_TransmitReceive+0x130>
 8005e90:	e080      	b.n	8005f94 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <HAL_SPI_TransmitReceive+0x204>
 8005e9a:	8b7b      	ldrh	r3, [r7, #26]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d16f      	bne.n	8005f80 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	330c      	adds	r3, #12
 8005eaa:	7812      	ldrb	r2, [r2, #0]
 8005eac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ec6:	e05b      	b.n	8005f80 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d11c      	bne.n	8005f10 <HAL_SPI_TransmitReceive+0x274>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d017      	beq.n	8005f10 <HAL_SPI_TransmitReceive+0x274>
 8005ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d114      	bne.n	8005f10 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	330c      	adds	r3, #12
 8005ef0:	7812      	ldrb	r2, [r2, #0]
 8005ef2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef8:	1c5a      	adds	r2, r3, #1
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d119      	bne.n	8005f52 <HAL_SPI_TransmitReceive+0x2b6>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d014      	beq.n	8005f52 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	b2d2      	uxtb	r2, r2
 8005f34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	1c5a      	adds	r2, r3, #1
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	3b01      	subs	r3, #1
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f52:	f7fc fcfb 	bl	800294c <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d803      	bhi.n	8005f6a <HAL_SPI_TransmitReceive+0x2ce>
 8005f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f68:	d102      	bne.n	8005f70 <HAL_SPI_TransmitReceive+0x2d4>
 8005f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d107      	bne.n	8005f80 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005f70:	2303      	movs	r3, #3
 8005f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005f7e:	e033      	b.n	8005fe8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d19e      	bne.n	8005ec8 <HAL_SPI_TransmitReceive+0x22c>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d199      	bne.n	8005ec8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f000 f8ec 	bl	8006176 <SPI_EndRxTxTransaction>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d006      	beq.n	8005fb2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2220      	movs	r2, #32
 8005fae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005fb0:	e01a      	b.n	8005fe8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10a      	bne.n	8005fd0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005fba:	2300      	movs	r3, #0
 8005fbc:	617b      	str	r3, [r7, #20]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	617b      	str	r3, [r7, #20]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d003      	beq.n	8005fe0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fde:	e003      	b.n	8005fe8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005ff0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3730      	adds	r7, #48	; 0x30
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b088      	sub	sp, #32
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	603b      	str	r3, [r7, #0]
 8006008:	4613      	mov	r3, r2
 800600a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800600c:	f7fc fc9e 	bl	800294c <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006014:	1a9b      	subs	r3, r3, r2
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	4413      	add	r3, r2
 800601a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800601c:	f7fc fc96 	bl	800294c <HAL_GetTick>
 8006020:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006022:	4b39      	ldr	r3, [pc, #228]	; (8006108 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	015b      	lsls	r3, r3, #5
 8006028:	0d1b      	lsrs	r3, r3, #20
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	fb02 f303 	mul.w	r3, r2, r3
 8006030:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006032:	e054      	b.n	80060de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603a:	d050      	beq.n	80060de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800603c:	f7fc fc86 	bl	800294c <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	69fa      	ldr	r2, [r7, #28]
 8006048:	429a      	cmp	r2, r3
 800604a:	d902      	bls.n	8006052 <SPI_WaitFlagStateUntilTimeout+0x56>
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d13d      	bne.n	80060ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006060:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800606a:	d111      	bne.n	8006090 <SPI_WaitFlagStateUntilTimeout+0x94>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006074:	d004      	beq.n	8006080 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800607e:	d107      	bne.n	8006090 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800608e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006098:	d10f      	bne.n	80060ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e017      	b.n	80060fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d101      	bne.n	80060d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	3b01      	subs	r3, #1
 80060dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	4013      	ands	r3, r2
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	bf0c      	ite	eq
 80060ee:	2301      	moveq	r3, #1
 80060f0:	2300      	movne	r3, #0
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	461a      	mov	r2, r3
 80060f6:	79fb      	ldrb	r3, [r7, #7]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d19b      	bne.n	8006034 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3720      	adds	r7, #32
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20000064 	.word	0x20000064

0800610c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af02      	add	r7, sp, #8
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006120:	d111      	bne.n	8006146 <SPI_EndRxTransaction+0x3a>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800612a:	d004      	beq.n	8006136 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006134:	d107      	bne.n	8006146 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006144:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2200      	movs	r2, #0
 800614e:	2180      	movs	r1, #128	; 0x80
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f7ff ff53 	bl	8005ffc <SPI_WaitFlagStateUntilTimeout>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d007      	beq.n	800616c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006160:	f043 0220 	orr.w	r2, r3, #32
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e000      	b.n	800616e <SPI_EndRxTransaction+0x62>
  }
  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b086      	sub	sp, #24
 800617a:	af02      	add	r7, sp, #8
 800617c:	60f8      	str	r0, [r7, #12]
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2200      	movs	r2, #0
 800618a:	2180      	movs	r1, #128	; 0x80
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f7ff ff35 	bl	8005ffc <SPI_WaitFlagStateUntilTimeout>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d007      	beq.n	80061a8 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619c:	f043 0220 	orr.w	r2, r3, #32
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e000      	b.n	80061aa <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b082      	sub	sp, #8
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e041      	b.n	8006248 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d106      	bne.n	80061de <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7fc fb03 	bl	80027e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2202      	movs	r2, #2
 80061e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	3304      	adds	r3, #4
 80061ee:	4619      	mov	r1, r3
 80061f0:	4610      	mov	r0, r2
 80061f2:	f000 fa8f 	bl	8006714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b01      	cmp	r3, #1
 8006262:	d001      	beq.n	8006268 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e04e      	b.n	8006306 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68da      	ldr	r2, [r3, #12]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a22      	ldr	r2, [pc, #136]	; (8006310 <HAL_TIM_Base_Start_IT+0xc0>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d022      	beq.n	80062d0 <HAL_TIM_Base_Start_IT+0x80>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006292:	d01d      	beq.n	80062d0 <HAL_TIM_Base_Start_IT+0x80>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a1e      	ldr	r2, [pc, #120]	; (8006314 <HAL_TIM_Base_Start_IT+0xc4>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d018      	beq.n	80062d0 <HAL_TIM_Base_Start_IT+0x80>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a1d      	ldr	r2, [pc, #116]	; (8006318 <HAL_TIM_Base_Start_IT+0xc8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d013      	beq.n	80062d0 <HAL_TIM_Base_Start_IT+0x80>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a1b      	ldr	r2, [pc, #108]	; (800631c <HAL_TIM_Base_Start_IT+0xcc>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d00e      	beq.n	80062d0 <HAL_TIM_Base_Start_IT+0x80>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a1a      	ldr	r2, [pc, #104]	; (8006320 <HAL_TIM_Base_Start_IT+0xd0>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d009      	beq.n	80062d0 <HAL_TIM_Base_Start_IT+0x80>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a18      	ldr	r2, [pc, #96]	; (8006324 <HAL_TIM_Base_Start_IT+0xd4>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d004      	beq.n	80062d0 <HAL_TIM_Base_Start_IT+0x80>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a17      	ldr	r2, [pc, #92]	; (8006328 <HAL_TIM_Base_Start_IT+0xd8>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d111      	bne.n	80062f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2b06      	cmp	r3, #6
 80062e0:	d010      	beq.n	8006304 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f042 0201 	orr.w	r2, r2, #1
 80062f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062f2:	e007      	b.n	8006304 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0201 	orr.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3714      	adds	r7, #20
 800630a:	46bd      	mov	sp, r7
 800630c:	bc80      	pop	{r7}
 800630e:	4770      	bx	lr
 8006310:	40010000 	.word	0x40010000
 8006314:	40000400 	.word	0x40000400
 8006318:	40000800 	.word	0x40000800
 800631c:	40000c00 	.word	0x40000c00
 8006320:	40010400 	.word	0x40010400
 8006324:	40014000 	.word	0x40014000
 8006328:	40001800 	.word	0x40001800

0800632c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b02      	cmp	r3, #2
 8006340:	d122      	bne.n	8006388 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b02      	cmp	r3, #2
 800634e:	d11b      	bne.n	8006388 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f06f 0202 	mvn.w	r2, #2
 8006358:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	f003 0303 	and.w	r3, r3, #3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f9b4 	bl	80066dc <HAL_TIM_IC_CaptureCallback>
 8006374:	e005      	b.n	8006382 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f9a7 	bl	80066ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f9b6 	bl	80066ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f003 0304 	and.w	r3, r3, #4
 8006392:	2b04      	cmp	r3, #4
 8006394:	d122      	bne.n	80063dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f003 0304 	and.w	r3, r3, #4
 80063a0:	2b04      	cmp	r3, #4
 80063a2:	d11b      	bne.n	80063dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f06f 0204 	mvn.w	r2, #4
 80063ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2202      	movs	r2, #2
 80063b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 f98a 	bl	80066dc <HAL_TIM_IC_CaptureCallback>
 80063c8:	e005      	b.n	80063d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f97d 	bl	80066ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f98c 	bl	80066ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d122      	bne.n	8006430 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b08      	cmp	r3, #8
 80063f6:	d11b      	bne.n	8006430 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f06f 0208 	mvn.w	r2, #8
 8006400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2204      	movs	r2, #4
 8006406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	69db      	ldr	r3, [r3, #28]
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f960 	bl	80066dc <HAL_TIM_IC_CaptureCallback>
 800641c:	e005      	b.n	800642a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f953 	bl	80066ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 f962 	bl	80066ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f003 0310 	and.w	r3, r3, #16
 800643a:	2b10      	cmp	r3, #16
 800643c:	d122      	bne.n	8006484 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b10      	cmp	r3, #16
 800644a:	d11b      	bne.n	8006484 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f06f 0210 	mvn.w	r2, #16
 8006454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2208      	movs	r2, #8
 800645a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f936 	bl	80066dc <HAL_TIM_IC_CaptureCallback>
 8006470:	e005      	b.n	800647e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f929 	bl	80066ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f938 	bl	80066ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b01      	cmp	r3, #1
 8006490:	d10e      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b01      	cmp	r3, #1
 800649e:	d107      	bne.n	80064b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f06f 0201 	mvn.w	r2, #1
 80064a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7fb f8c0 	bl	8001630 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ba:	2b80      	cmp	r3, #128	; 0x80
 80064bc:	d10e      	bne.n	80064dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c8:	2b80      	cmp	r3, #128	; 0x80
 80064ca:	d107      	bne.n	80064dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fad3 	bl	8006a82 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e6:	2b40      	cmp	r3, #64	; 0x40
 80064e8:	d10e      	bne.n	8006508 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f4:	2b40      	cmp	r3, #64	; 0x40
 80064f6:	d107      	bne.n	8006508 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f8fc 	bl	8006700 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	f003 0320 	and.w	r3, r3, #32
 8006512:	2b20      	cmp	r3, #32
 8006514:	d10e      	bne.n	8006534 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f003 0320 	and.w	r3, r3, #32
 8006520:	2b20      	cmp	r3, #32
 8006522:	d107      	bne.n	8006534 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f06f 0220 	mvn.w	r2, #32
 800652c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 fa9e 	bl	8006a70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006534:	bf00      	nop
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006550:	2b01      	cmp	r3, #1
 8006552:	d101      	bne.n	8006558 <HAL_TIM_ConfigClockSource+0x1c>
 8006554:	2302      	movs	r3, #2
 8006556:	e0b4      	b.n	80066c2 <HAL_TIM_ConfigClockSource+0x186>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800657e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006590:	d03e      	beq.n	8006610 <HAL_TIM_ConfigClockSource+0xd4>
 8006592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006596:	f200 8087 	bhi.w	80066a8 <HAL_TIM_ConfigClockSource+0x16c>
 800659a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800659e:	f000 8086 	beq.w	80066ae <HAL_TIM_ConfigClockSource+0x172>
 80065a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a6:	d87f      	bhi.n	80066a8 <HAL_TIM_ConfigClockSource+0x16c>
 80065a8:	2b70      	cmp	r3, #112	; 0x70
 80065aa:	d01a      	beq.n	80065e2 <HAL_TIM_ConfigClockSource+0xa6>
 80065ac:	2b70      	cmp	r3, #112	; 0x70
 80065ae:	d87b      	bhi.n	80066a8 <HAL_TIM_ConfigClockSource+0x16c>
 80065b0:	2b60      	cmp	r3, #96	; 0x60
 80065b2:	d050      	beq.n	8006656 <HAL_TIM_ConfigClockSource+0x11a>
 80065b4:	2b60      	cmp	r3, #96	; 0x60
 80065b6:	d877      	bhi.n	80066a8 <HAL_TIM_ConfigClockSource+0x16c>
 80065b8:	2b50      	cmp	r3, #80	; 0x50
 80065ba:	d03c      	beq.n	8006636 <HAL_TIM_ConfigClockSource+0xfa>
 80065bc:	2b50      	cmp	r3, #80	; 0x50
 80065be:	d873      	bhi.n	80066a8 <HAL_TIM_ConfigClockSource+0x16c>
 80065c0:	2b40      	cmp	r3, #64	; 0x40
 80065c2:	d058      	beq.n	8006676 <HAL_TIM_ConfigClockSource+0x13a>
 80065c4:	2b40      	cmp	r3, #64	; 0x40
 80065c6:	d86f      	bhi.n	80066a8 <HAL_TIM_ConfigClockSource+0x16c>
 80065c8:	2b30      	cmp	r3, #48	; 0x30
 80065ca:	d064      	beq.n	8006696 <HAL_TIM_ConfigClockSource+0x15a>
 80065cc:	2b30      	cmp	r3, #48	; 0x30
 80065ce:	d86b      	bhi.n	80066a8 <HAL_TIM_ConfigClockSource+0x16c>
 80065d0:	2b20      	cmp	r3, #32
 80065d2:	d060      	beq.n	8006696 <HAL_TIM_ConfigClockSource+0x15a>
 80065d4:	2b20      	cmp	r3, #32
 80065d6:	d867      	bhi.n	80066a8 <HAL_TIM_ConfigClockSource+0x16c>
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d05c      	beq.n	8006696 <HAL_TIM_ConfigClockSource+0x15a>
 80065dc:	2b10      	cmp	r3, #16
 80065de:	d05a      	beq.n	8006696 <HAL_TIM_ConfigClockSource+0x15a>
 80065e0:	e062      	b.n	80066a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80065f2:	f000 f9a4 	bl	800693e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006604:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	609a      	str	r2, [r3, #8]
      break;
 800660e:	e04f      	b.n	80066b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006620:	f000 f98d 	bl	800693e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689a      	ldr	r2, [r3, #8]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006632:	609a      	str	r2, [r3, #8]
      break;
 8006634:	e03c      	b.n	80066b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006642:	461a      	mov	r2, r3
 8006644:	f000 f904 	bl	8006850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2150      	movs	r1, #80	; 0x50
 800664e:	4618      	mov	r0, r3
 8006650:	f000 f95b 	bl	800690a <TIM_ITRx_SetConfig>
      break;
 8006654:	e02c      	b.n	80066b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006662:	461a      	mov	r2, r3
 8006664:	f000 f922 	bl	80068ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2160      	movs	r1, #96	; 0x60
 800666e:	4618      	mov	r0, r3
 8006670:	f000 f94b 	bl	800690a <TIM_ITRx_SetConfig>
      break;
 8006674:	e01c      	b.n	80066b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006682:	461a      	mov	r2, r3
 8006684:	f000 f8e4 	bl	8006850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2140      	movs	r1, #64	; 0x40
 800668e:	4618      	mov	r0, r3
 8006690:	f000 f93b 	bl	800690a <TIM_ITRx_SetConfig>
      break;
 8006694:	e00c      	b.n	80066b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4619      	mov	r1, r3
 80066a0:	4610      	mov	r0, r2
 80066a2:	f000 f932 	bl	800690a <TIM_ITRx_SetConfig>
      break;
 80066a6:	e003      	b.n	80066b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	73fb      	strb	r3, [r7, #15]
      break;
 80066ac:	e000      	b.n	80066b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80066ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bc80      	pop	{r7}
 80066da:	4770      	bx	lr

080066dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bc80      	pop	{r7}
 80066ec:	4770      	bx	lr

080066ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b083      	sub	sp, #12
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066f6:	bf00      	nop
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bc80      	pop	{r7}
 80066fe:	4770      	bx	lr

08006700 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	bc80      	pop	{r7}
 8006710:	4770      	bx	lr
	...

08006714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	4a3f      	ldr	r2, [pc, #252]	; (8006824 <TIM_Base_SetConfig+0x110>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d013      	beq.n	8006754 <TIM_Base_SetConfig+0x40>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006732:	d00f      	beq.n	8006754 <TIM_Base_SetConfig+0x40>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a3c      	ldr	r2, [pc, #240]	; (8006828 <TIM_Base_SetConfig+0x114>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d00b      	beq.n	8006754 <TIM_Base_SetConfig+0x40>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a3b      	ldr	r2, [pc, #236]	; (800682c <TIM_Base_SetConfig+0x118>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d007      	beq.n	8006754 <TIM_Base_SetConfig+0x40>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a3a      	ldr	r2, [pc, #232]	; (8006830 <TIM_Base_SetConfig+0x11c>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d003      	beq.n	8006754 <TIM_Base_SetConfig+0x40>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a39      	ldr	r2, [pc, #228]	; (8006834 <TIM_Base_SetConfig+0x120>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d108      	bne.n	8006766 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800675a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	4313      	orrs	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a2e      	ldr	r2, [pc, #184]	; (8006824 <TIM_Base_SetConfig+0x110>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d02b      	beq.n	80067c6 <TIM_Base_SetConfig+0xb2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006774:	d027      	beq.n	80067c6 <TIM_Base_SetConfig+0xb2>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4a2b      	ldr	r2, [pc, #172]	; (8006828 <TIM_Base_SetConfig+0x114>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d023      	beq.n	80067c6 <TIM_Base_SetConfig+0xb2>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a2a      	ldr	r2, [pc, #168]	; (800682c <TIM_Base_SetConfig+0x118>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d01f      	beq.n	80067c6 <TIM_Base_SetConfig+0xb2>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a29      	ldr	r2, [pc, #164]	; (8006830 <TIM_Base_SetConfig+0x11c>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d01b      	beq.n	80067c6 <TIM_Base_SetConfig+0xb2>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a28      	ldr	r2, [pc, #160]	; (8006834 <TIM_Base_SetConfig+0x120>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d017      	beq.n	80067c6 <TIM_Base_SetConfig+0xb2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a27      	ldr	r2, [pc, #156]	; (8006838 <TIM_Base_SetConfig+0x124>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d013      	beq.n	80067c6 <TIM_Base_SetConfig+0xb2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a26      	ldr	r2, [pc, #152]	; (800683c <TIM_Base_SetConfig+0x128>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d00f      	beq.n	80067c6 <TIM_Base_SetConfig+0xb2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a25      	ldr	r2, [pc, #148]	; (8006840 <TIM_Base_SetConfig+0x12c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d00b      	beq.n	80067c6 <TIM_Base_SetConfig+0xb2>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a24      	ldr	r2, [pc, #144]	; (8006844 <TIM_Base_SetConfig+0x130>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d007      	beq.n	80067c6 <TIM_Base_SetConfig+0xb2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a23      	ldr	r2, [pc, #140]	; (8006848 <TIM_Base_SetConfig+0x134>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d003      	beq.n	80067c6 <TIM_Base_SetConfig+0xb2>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a22      	ldr	r2, [pc, #136]	; (800684c <TIM_Base_SetConfig+0x138>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d108      	bne.n	80067d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a09      	ldr	r2, [pc, #36]	; (8006824 <TIM_Base_SetConfig+0x110>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d003      	beq.n	800680c <TIM_Base_SetConfig+0xf8>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a0b      	ldr	r2, [pc, #44]	; (8006834 <TIM_Base_SetConfig+0x120>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d103      	bne.n	8006814 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	691a      	ldr	r2, [r3, #16]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	615a      	str	r2, [r3, #20]
}
 800681a:	bf00      	nop
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	bc80      	pop	{r7}
 8006822:	4770      	bx	lr
 8006824:	40010000 	.word	0x40010000
 8006828:	40000400 	.word	0x40000400
 800682c:	40000800 	.word	0x40000800
 8006830:	40000c00 	.word	0x40000c00
 8006834:	40010400 	.word	0x40010400
 8006838:	40014000 	.word	0x40014000
 800683c:	40014400 	.word	0x40014400
 8006840:	40014800 	.word	0x40014800
 8006844:	40001800 	.word	0x40001800
 8006848:	40001c00 	.word	0x40001c00
 800684c:	40002000 	.word	0x40002000

08006850 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	f023 0201 	bic.w	r2, r3, #1
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800687a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f023 030a 	bic.w	r3, r3, #10
 800688c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	4313      	orrs	r3, r2
 8006894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	621a      	str	r2, [r3, #32]
}
 80068a2:	bf00      	nop
 80068a4:	371c      	adds	r7, #28
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bc80      	pop	{r7}
 80068aa:	4770      	bx	lr

080068ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b087      	sub	sp, #28
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	f023 0210 	bic.w	r2, r3, #16
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	031b      	lsls	r3, r3, #12
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	4313      	orrs	r3, r2
 80068e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	011b      	lsls	r3, r3, #4
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	621a      	str	r2, [r3, #32]
}
 8006900:	bf00      	nop
 8006902:	371c      	adds	r7, #28
 8006904:	46bd      	mov	sp, r7
 8006906:	bc80      	pop	{r7}
 8006908:	4770      	bx	lr

0800690a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800690a:	b480      	push	{r7}
 800690c:	b085      	sub	sp, #20
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006920:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	f043 0307 	orr.w	r3, r3, #7
 800692c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	609a      	str	r2, [r3, #8]
}
 8006934:	bf00      	nop
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	bc80      	pop	{r7}
 800693c:	4770      	bx	lr

0800693e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800693e:	b480      	push	{r7}
 8006940:	b087      	sub	sp, #28
 8006942:	af00      	add	r7, sp, #0
 8006944:	60f8      	str	r0, [r7, #12]
 8006946:	60b9      	str	r1, [r7, #8]
 8006948:	607a      	str	r2, [r7, #4]
 800694a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006958:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	021a      	lsls	r2, r3, #8
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	431a      	orrs	r2, r3
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	4313      	orrs	r3, r2
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	4313      	orrs	r3, r2
 800696a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	609a      	str	r2, [r3, #8]
}
 8006972:	bf00      	nop
 8006974:	371c      	adds	r7, #28
 8006976:	46bd      	mov	sp, r7
 8006978:	bc80      	pop	{r7}
 800697a:	4770      	bx	lr

0800697c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800698c:	2b01      	cmp	r3, #1
 800698e:	d101      	bne.n	8006994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006990:	2302      	movs	r3, #2
 8006992:	e05a      	b.n	8006a4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2202      	movs	r2, #2
 80069a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a20      	ldr	r2, [pc, #128]	; (8006a54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d022      	beq.n	8006a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069e0:	d01d      	beq.n	8006a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a1c      	ldr	r2, [pc, #112]	; (8006a58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d018      	beq.n	8006a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a1a      	ldr	r2, [pc, #104]	; (8006a5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d013      	beq.n	8006a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a19      	ldr	r2, [pc, #100]	; (8006a60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d00e      	beq.n	8006a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a17      	ldr	r2, [pc, #92]	; (8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d009      	beq.n	8006a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a16      	ldr	r2, [pc, #88]	; (8006a68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d004      	beq.n	8006a1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a14      	ldr	r2, [pc, #80]	; (8006a6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d10c      	bne.n	8006a38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bc80      	pop	{r7}
 8006a52:	4770      	bx	lr
 8006a54:	40010000 	.word	0x40010000
 8006a58:	40000400 	.word	0x40000400
 8006a5c:	40000800 	.word	0x40000800
 8006a60:	40000c00 	.word	0x40000c00
 8006a64:	40010400 	.word	0x40010400
 8006a68:	40014000 	.word	0x40014000
 8006a6c:	40001800 	.word	0x40001800

08006a70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bc80      	pop	{r7}
 8006a80:	4770      	bx	lr

08006a82 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b083      	sub	sp, #12
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a8a:	bf00      	nop
 8006a8c:	370c      	adds	r7, #12
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bc80      	pop	{r7}
 8006a92:	4770      	bx	lr

08006a94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a94:	b084      	sub	sp, #16
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	f107 001c 	add.w	r0, r7, #28
 8006aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d122      	bne.n	8006af2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d105      	bne.n	8006ae6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f001 fabc 	bl	8008064 <USB_CoreReset>
 8006aec:	4603      	mov	r3, r0
 8006aee:	73fb      	strb	r3, [r7, #15]
 8006af0:	e010      	b.n	8006b14 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f001 fab0 	bl	8008064 <USB_CoreReset>
 8006b04:	4603      	mov	r3, r0
 8006b06:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d10b      	bne.n	8006b32 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f043 0206 	orr.w	r2, r3, #6
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f043 0220 	orr.w	r2, r3, #32
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b3e:	b004      	add	sp, #16
 8006b40:	4770      	bx	lr
	...

08006b44 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	4613      	mov	r3, r2
 8006b50:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006b52:	79fb      	ldrb	r3, [r7, #7]
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d165      	bne.n	8006c24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	4a41      	ldr	r2, [pc, #260]	; (8006c60 <USB_SetTurnaroundTime+0x11c>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d906      	bls.n	8006b6e <USB_SetTurnaroundTime+0x2a>
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	4a40      	ldr	r2, [pc, #256]	; (8006c64 <USB_SetTurnaroundTime+0x120>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d202      	bcs.n	8006b6e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006b68:	230f      	movs	r3, #15
 8006b6a:	617b      	str	r3, [r7, #20]
 8006b6c:	e062      	b.n	8006c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	4a3c      	ldr	r2, [pc, #240]	; (8006c64 <USB_SetTurnaroundTime+0x120>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d306      	bcc.n	8006b84 <USB_SetTurnaroundTime+0x40>
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	4a3b      	ldr	r2, [pc, #236]	; (8006c68 <USB_SetTurnaroundTime+0x124>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d202      	bcs.n	8006b84 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006b7e:	230e      	movs	r3, #14
 8006b80:	617b      	str	r3, [r7, #20]
 8006b82:	e057      	b.n	8006c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	4a38      	ldr	r2, [pc, #224]	; (8006c68 <USB_SetTurnaroundTime+0x124>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d306      	bcc.n	8006b9a <USB_SetTurnaroundTime+0x56>
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	4a37      	ldr	r2, [pc, #220]	; (8006c6c <USB_SetTurnaroundTime+0x128>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d202      	bcs.n	8006b9a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006b94:	230d      	movs	r3, #13
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	e04c      	b.n	8006c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	4a33      	ldr	r2, [pc, #204]	; (8006c6c <USB_SetTurnaroundTime+0x128>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d306      	bcc.n	8006bb0 <USB_SetTurnaroundTime+0x6c>
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	4a32      	ldr	r2, [pc, #200]	; (8006c70 <USB_SetTurnaroundTime+0x12c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d802      	bhi.n	8006bb0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006baa:	230c      	movs	r3, #12
 8006bac:	617b      	str	r3, [r7, #20]
 8006bae:	e041      	b.n	8006c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	4a2f      	ldr	r2, [pc, #188]	; (8006c70 <USB_SetTurnaroundTime+0x12c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d906      	bls.n	8006bc6 <USB_SetTurnaroundTime+0x82>
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	4a2e      	ldr	r2, [pc, #184]	; (8006c74 <USB_SetTurnaroundTime+0x130>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d802      	bhi.n	8006bc6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006bc0:	230b      	movs	r3, #11
 8006bc2:	617b      	str	r3, [r7, #20]
 8006bc4:	e036      	b.n	8006c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	4a2a      	ldr	r2, [pc, #168]	; (8006c74 <USB_SetTurnaroundTime+0x130>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d906      	bls.n	8006bdc <USB_SetTurnaroundTime+0x98>
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	4a29      	ldr	r2, [pc, #164]	; (8006c78 <USB_SetTurnaroundTime+0x134>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d802      	bhi.n	8006bdc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006bd6:	230a      	movs	r3, #10
 8006bd8:	617b      	str	r3, [r7, #20]
 8006bda:	e02b      	b.n	8006c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	4a26      	ldr	r2, [pc, #152]	; (8006c78 <USB_SetTurnaroundTime+0x134>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d906      	bls.n	8006bf2 <USB_SetTurnaroundTime+0xae>
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	4a25      	ldr	r2, [pc, #148]	; (8006c7c <USB_SetTurnaroundTime+0x138>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d202      	bcs.n	8006bf2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006bec:	2309      	movs	r3, #9
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	e020      	b.n	8006c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	4a21      	ldr	r2, [pc, #132]	; (8006c7c <USB_SetTurnaroundTime+0x138>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d306      	bcc.n	8006c08 <USB_SetTurnaroundTime+0xc4>
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	4a20      	ldr	r2, [pc, #128]	; (8006c80 <USB_SetTurnaroundTime+0x13c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d802      	bhi.n	8006c08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006c02:	2308      	movs	r3, #8
 8006c04:	617b      	str	r3, [r7, #20]
 8006c06:	e015      	b.n	8006c34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	4a1d      	ldr	r2, [pc, #116]	; (8006c80 <USB_SetTurnaroundTime+0x13c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d906      	bls.n	8006c1e <USB_SetTurnaroundTime+0xda>
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	4a1c      	ldr	r2, [pc, #112]	; (8006c84 <USB_SetTurnaroundTime+0x140>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d202      	bcs.n	8006c1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006c18:	2307      	movs	r3, #7
 8006c1a:	617b      	str	r3, [r7, #20]
 8006c1c:	e00a      	b.n	8006c34 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006c1e:	2306      	movs	r3, #6
 8006c20:	617b      	str	r3, [r7, #20]
 8006c22:	e007      	b.n	8006c34 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006c24:	79fb      	ldrb	r3, [r7, #7]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d102      	bne.n	8006c30 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006c2a:	2309      	movs	r3, #9
 8006c2c:	617b      	str	r3, [r7, #20]
 8006c2e:	e001      	b.n	8006c34 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006c30:	2309      	movs	r3, #9
 8006c32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	68da      	ldr	r2, [r3, #12]
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	029b      	lsls	r3, r3, #10
 8006c48:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006c4c:	431a      	orrs	r2, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	371c      	adds	r7, #28
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bc80      	pop	{r7}
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	00d8acbf 	.word	0x00d8acbf
 8006c64:	00e4e1c0 	.word	0x00e4e1c0
 8006c68:	00f42400 	.word	0x00f42400
 8006c6c:	01067380 	.word	0x01067380
 8006c70:	011a499f 	.word	0x011a499f
 8006c74:	01312cff 	.word	0x01312cff
 8006c78:	014ca43f 	.word	0x014ca43f
 8006c7c:	016e3600 	.word	0x016e3600
 8006c80:	01a6ab1f 	.word	0x01a6ab1f
 8006c84:	01e84800 	.word	0x01e84800

08006c88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f043 0201 	orr.w	r2, r3, #1
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bc80      	pop	{r7}
 8006ca6:	4770      	bx	lr

08006ca8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f023 0201 	bic.w	r2, r3, #1
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bc80      	pop	{r7}
 8006cc6:	4770      	bx	lr

08006cc8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ce4:	78fb      	ldrb	r3, [r7, #3]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d115      	bne.n	8006d16 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cf6:	2001      	movs	r0, #1
 8006cf8:	f7fb fe32 	bl	8002960 <HAL_Delay>
      ms++;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f001 f922 	bl	8007f4c <USB_GetMode>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d01e      	beq.n	8006d4c <USB_SetCurrentMode+0x84>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2b31      	cmp	r3, #49	; 0x31
 8006d12:	d9f0      	bls.n	8006cf6 <USB_SetCurrentMode+0x2e>
 8006d14:	e01a      	b.n	8006d4c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d16:	78fb      	ldrb	r3, [r7, #3]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d115      	bne.n	8006d48 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d28:	2001      	movs	r0, #1
 8006d2a:	f7fb fe19 	bl	8002960 <HAL_Delay>
      ms++;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	3301      	adds	r3, #1
 8006d32:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 f909 	bl	8007f4c <USB_GetMode>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d005      	beq.n	8006d4c <USB_SetCurrentMode+0x84>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b31      	cmp	r3, #49	; 0x31
 8006d44:	d9f0      	bls.n	8006d28 <USB_SetCurrentMode+0x60>
 8006d46:	e001      	b.n	8006d4c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e005      	b.n	8006d58 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b32      	cmp	r3, #50	; 0x32
 8006d50:	d101      	bne.n	8006d56 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e000      	b.n	8006d58 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d60:	b084      	sub	sp, #16
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b086      	sub	sp, #24
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d72:	2300      	movs	r3, #0
 8006d74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	613b      	str	r3, [r7, #16]
 8006d7e:	e009      	b.n	8006d94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	3340      	adds	r3, #64	; 0x40
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	4413      	add	r3, r2
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	3301      	adds	r3, #1
 8006d92:	613b      	str	r3, [r7, #16]
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	2b0e      	cmp	r3, #14
 8006d98:	d9f2      	bls.n	8006d80 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d11c      	bne.n	8006dda <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dae:	f043 0302 	orr.w	r3, r3, #2
 8006db2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	639a      	str	r2, [r3, #56]	; 0x38
 8006dd8:	e00b      	b.n	8006df2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dde:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006df8:	461a      	mov	r2, r3
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d10c      	bne.n	8006e1e <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d104      	bne.n	8006e14 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f965 	bl	80070dc <USB_SetDevSpeed>
 8006e12:	e008      	b.n	8006e26 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e14:	2101      	movs	r1, #1
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f960 	bl	80070dc <USB_SetDevSpeed>
 8006e1c:	e003      	b.n	8006e26 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e1e:	2103      	movs	r1, #3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 f95b 	bl	80070dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e26:	2110      	movs	r1, #16
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 f8f3 	bl	8007014 <USB_FlushTxFifo>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f91f 	bl	800707c <USB_FlushRxFifo>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e4e:	461a      	mov	r2, r3
 8006e50:	2300      	movs	r3, #0
 8006e52:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e66:	461a      	mov	r2, r3
 8006e68:	2300      	movs	r3, #0
 8006e6a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	613b      	str	r3, [r7, #16]
 8006e70:	e043      	b.n	8006efa <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e88:	d118      	bne.n	8006ebc <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10a      	bne.n	8006ea6 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ea2:	6013      	str	r3, [r2, #0]
 8006ea4:	e013      	b.n	8006ece <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006eb8:	6013      	str	r3, [r2, #0]
 8006eba:	e008      	b.n	8006ece <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec8:	461a      	mov	r2, r3
 8006eca:	2300      	movs	r3, #0
 8006ecc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eda:	461a      	mov	r2, r3
 8006edc:	2300      	movs	r3, #0
 8006ede:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eec:	461a      	mov	r2, r3
 8006eee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ef2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	613b      	str	r3, [r7, #16]
 8006efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d3b7      	bcc.n	8006e72 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f02:	2300      	movs	r3, #0
 8006f04:	613b      	str	r3, [r7, #16]
 8006f06:	e043      	b.n	8006f90 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	015a      	lsls	r2, r3, #5
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f1e:	d118      	bne.n	8006f52 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10a      	bne.n	8006f3c <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f32:	461a      	mov	r2, r3
 8006f34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	e013      	b.n	8006f64 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f48:	461a      	mov	r2, r3
 8006f4a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	e008      	b.n	8006f64 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5e:	461a      	mov	r2, r3
 8006f60:	2300      	movs	r3, #0
 8006f62:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f70:	461a      	mov	r2, r3
 8006f72:	2300      	movs	r3, #0
 8006f74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f82:	461a      	mov	r2, r3
 8006f84:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f88:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	613b      	str	r3, [r7, #16]
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d3b7      	bcc.n	8006f08 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006faa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006fb8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d105      	bne.n	8006fcc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	f043 0210 	orr.w	r2, r3, #16
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	699a      	ldr	r2, [r3, #24]
 8006fd0:	4b0f      	ldr	r3, [pc, #60]	; (8007010 <USB_DevInit+0x2b0>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d005      	beq.n	8006fea <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	f043 0208 	orr.w	r2, r3, #8
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d107      	bne.n	8007000 <USB_DevInit+0x2a0>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ff8:	f043 0304 	orr.w	r3, r3, #4
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007000:	7dfb      	ldrb	r3, [r7, #23]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800700c:	b004      	add	sp, #16
 800700e:	4770      	bx	lr
 8007010:	803c3800 	.word	0x803c3800

08007014 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3301      	adds	r3, #1
 8007026:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4a13      	ldr	r2, [pc, #76]	; (8007078 <USB_FlushTxFifo+0x64>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d901      	bls.n	8007034 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e01b      	b.n	800706c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	daf2      	bge.n	8007022 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	019b      	lsls	r3, r3, #6
 8007044:	f043 0220 	orr.w	r2, r3, #32
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	3301      	adds	r3, #1
 8007050:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	4a08      	ldr	r2, [pc, #32]	; (8007078 <USB_FlushTxFifo+0x64>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d901      	bls.n	800705e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e006      	b.n	800706c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b20      	cmp	r3, #32
 8007068:	d0f0      	beq.n	800704c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	bc80      	pop	{r7}
 8007074:	4770      	bx	lr
 8007076:	bf00      	nop
 8007078:	00030d40 	.word	0x00030d40

0800707c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007084:	2300      	movs	r3, #0
 8007086:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	3301      	adds	r3, #1
 800708c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	4a11      	ldr	r2, [pc, #68]	; (80070d8 <USB_FlushRxFifo+0x5c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d901      	bls.n	800709a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007096:	2303      	movs	r3, #3
 8007098:	e018      	b.n	80070cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	daf2      	bge.n	8007088 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80070a2:	2300      	movs	r3, #0
 80070a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2210      	movs	r2, #16
 80070aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	3301      	adds	r3, #1
 80070b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	4a08      	ldr	r2, [pc, #32]	; (80070d8 <USB_FlushRxFifo+0x5c>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d901      	bls.n	80070be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e006      	b.n	80070cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	f003 0310 	and.w	r3, r3, #16
 80070c6:	2b10      	cmp	r3, #16
 80070c8:	d0f0      	beq.n	80070ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bc80      	pop	{r7}
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	00030d40 	.word	0x00030d40

080070dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	78fb      	ldrb	r3, [r7, #3]
 80070f6:	68f9      	ldr	r1, [r7, #12]
 80070f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070fc:	4313      	orrs	r3, r2
 80070fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	bc80      	pop	{r7}
 800710a:	4770      	bx	lr

0800710c <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800710c:	b480      	push	{r7}
 800710e:	b087      	sub	sp, #28
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f003 0306 	and.w	r3, r3, #6
 8007124:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d102      	bne.n	8007132 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800712c:	2300      	movs	r3, #0
 800712e:	75fb      	strb	r3, [r7, #23]
 8007130:	e00a      	b.n	8007148 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2b02      	cmp	r3, #2
 8007136:	d002      	beq.n	800713e <USB_GetDevSpeed+0x32>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2b06      	cmp	r3, #6
 800713c:	d102      	bne.n	8007144 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800713e:	2302      	movs	r3, #2
 8007140:	75fb      	strb	r3, [r7, #23]
 8007142:	e001      	b.n	8007148 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007144:	230f      	movs	r3, #15
 8007146:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007148:	7dfb      	ldrb	r3, [r7, #23]
}
 800714a:	4618      	mov	r0, r3
 800714c:	371c      	adds	r7, #28
 800714e:	46bd      	mov	sp, r7
 8007150:	bc80      	pop	{r7}
 8007152:	4770      	bx	lr

08007154 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	785b      	ldrb	r3, [r3, #1]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d13a      	bne.n	80071e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007176:	69da      	ldr	r2, [r3, #28]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	f003 030f 	and.w	r3, r3, #15
 8007180:	2101      	movs	r1, #1
 8007182:	fa01 f303 	lsl.w	r3, r1, r3
 8007186:	b29b      	uxth	r3, r3
 8007188:	68f9      	ldr	r1, [r7, #12]
 800718a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800718e:	4313      	orrs	r3, r2
 8007190:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	015a      	lsls	r2, r3, #5
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	4413      	add	r3, r2
 800719a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d155      	bne.n	8007254 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	015a      	lsls	r2, r3, #5
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	791b      	ldrb	r3, [r3, #4]
 80071c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	059b      	lsls	r3, r3, #22
 80071ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071cc:	4313      	orrs	r3, r2
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	0151      	lsls	r1, r2, #5
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	440a      	add	r2, r1
 80071d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071e2:	6013      	str	r3, [r2, #0]
 80071e4:	e036      	b.n	8007254 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ec:	69da      	ldr	r2, [r3, #28]
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	f003 030f 	and.w	r3, r3, #15
 80071f6:	2101      	movs	r1, #1
 80071f8:	fa01 f303 	lsl.w	r3, r1, r3
 80071fc:	041b      	lsls	r3, r3, #16
 80071fe:	68f9      	ldr	r1, [r7, #12]
 8007200:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007204:	4313      	orrs	r3, r2
 8007206:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	015a      	lsls	r2, r3, #5
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4413      	add	r3, r2
 8007210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d11a      	bne.n	8007254 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	015a      	lsls	r2, r3, #5
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	4413      	add	r3, r2
 8007226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	791b      	ldrb	r3, [r3, #4]
 8007238:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800723a:	430b      	orrs	r3, r1
 800723c:	4313      	orrs	r3, r2
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	0151      	lsls	r1, r2, #5
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	440a      	add	r2, r1
 8007246:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800724a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800724e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007252:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	bc80      	pop	{r7}
 800725e:	4770      	bx	lr

08007260 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	785b      	ldrb	r3, [r3, #1]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d161      	bne.n	8007340 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800728e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007292:	d11f      	bne.n	80072d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	0151      	lsls	r1, r2, #5
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	440a      	add	r2, r1
 80072aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80072b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	0151      	lsls	r1, r2, #5
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	440a      	add	r2, r1
 80072ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	f003 030f 	and.w	r3, r3, #15
 80072e4:	2101      	movs	r1, #1
 80072e6:	fa01 f303 	lsl.w	r3, r1, r3
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	43db      	mvns	r3, r3
 80072ee:	68f9      	ldr	r1, [r7, #12]
 80072f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072f4:	4013      	ands	r3, r2
 80072f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072fe:	69da      	ldr	r2, [r3, #28]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	f003 030f 	and.w	r3, r3, #15
 8007308:	2101      	movs	r1, #1
 800730a:	fa01 f303 	lsl.w	r3, r1, r3
 800730e:	b29b      	uxth	r3, r3
 8007310:	43db      	mvns	r3, r3
 8007312:	68f9      	ldr	r1, [r7, #12]
 8007314:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007318:	4013      	ands	r3, r2
 800731a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4413      	add	r3, r2
 8007324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	0159      	lsls	r1, r3, #5
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	440b      	add	r3, r1
 8007332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007336:	4619      	mov	r1, r3
 8007338:	4b35      	ldr	r3, [pc, #212]	; (8007410 <USB_DeactivateEndpoint+0x1b0>)
 800733a:	4013      	ands	r3, r2
 800733c:	600b      	str	r3, [r1, #0]
 800733e:	e060      	b.n	8007402 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007352:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007356:	d11f      	bne.n	8007398 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4413      	add	r3, r2
 8007360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	0151      	lsls	r1, r2, #5
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	440a      	add	r2, r1
 800736e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007372:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007376:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	015a      	lsls	r2, r3, #5
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	4413      	add	r3, r2
 8007380:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	0151      	lsls	r1, r2, #5
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	440a      	add	r2, r1
 800738e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007392:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007396:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	f003 030f 	and.w	r3, r3, #15
 80073a8:	2101      	movs	r1, #1
 80073aa:	fa01 f303 	lsl.w	r3, r1, r3
 80073ae:	041b      	lsls	r3, r3, #16
 80073b0:	43db      	mvns	r3, r3
 80073b2:	68f9      	ldr	r1, [r7, #12]
 80073b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073b8:	4013      	ands	r3, r2
 80073ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c2:	69da      	ldr	r2, [r3, #28]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	f003 030f 	and.w	r3, r3, #15
 80073cc:	2101      	movs	r1, #1
 80073ce:	fa01 f303 	lsl.w	r3, r1, r3
 80073d2:	041b      	lsls	r3, r3, #16
 80073d4:	43db      	mvns	r3, r3
 80073d6:	68f9      	ldr	r1, [r7, #12]
 80073d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073dc:	4013      	ands	r3, r2
 80073de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	0159      	lsls	r1, r3, #5
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	440b      	add	r3, r1
 80073f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fa:	4619      	mov	r1, r3
 80073fc:	4b05      	ldr	r3, [pc, #20]	; (8007414 <USB_DeactivateEndpoint+0x1b4>)
 80073fe:	4013      	ands	r3, r2
 8007400:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3714      	adds	r7, #20
 8007408:	46bd      	mov	sp, r7
 800740a:	bc80      	pop	{r7}
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	ec337800 	.word	0xec337800
 8007414:	eff37800 	.word	0xeff37800

08007418 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b08a      	sub	sp, #40	; 0x28
 800741c:	af02      	add	r7, sp, #8
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	4613      	mov	r3, r2
 8007424:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	785b      	ldrb	r3, [r3, #1]
 8007434:	2b01      	cmp	r3, #1
 8007436:	f040 817a 	bne.w	800772e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d132      	bne.n	80074a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	015a      	lsls	r2, r3, #5
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	4413      	add	r3, r2
 800744a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	0151      	lsls	r1, r2, #5
 8007454:	69fa      	ldr	r2, [r7, #28]
 8007456:	440a      	add	r2, r1
 8007458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800745c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007460:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007464:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	015a      	lsls	r2, r3, #5
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	4413      	add	r3, r2
 800746e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	0151      	lsls	r1, r2, #5
 8007478:	69fa      	ldr	r2, [r7, #28]
 800747a:	440a      	add	r2, r1
 800747c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007480:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007484:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	015a      	lsls	r2, r3, #5
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	4413      	add	r3, r2
 800748e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	69ba      	ldr	r2, [r7, #24]
 8007496:	0151      	lsls	r1, r2, #5
 8007498:	69fa      	ldr	r2, [r7, #28]
 800749a:	440a      	add	r2, r1
 800749c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074a0:	0cdb      	lsrs	r3, r3, #19
 80074a2:	04db      	lsls	r3, r3, #19
 80074a4:	6113      	str	r3, [r2, #16]
 80074a6:	e092      	b.n	80075ce <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	015a      	lsls	r2, r3, #5
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	4413      	add	r3, r2
 80074b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	69ba      	ldr	r2, [r7, #24]
 80074b8:	0151      	lsls	r1, r2, #5
 80074ba:	69fa      	ldr	r2, [r7, #28]
 80074bc:	440a      	add	r2, r1
 80074be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074c2:	0cdb      	lsrs	r3, r3, #19
 80074c4:	04db      	lsls	r3, r3, #19
 80074c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	015a      	lsls	r2, r3, #5
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	4413      	add	r3, r2
 80074d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	69ba      	ldr	r2, [r7, #24]
 80074d8:	0151      	lsls	r1, r2, #5
 80074da:	69fa      	ldr	r2, [r7, #28]
 80074dc:	440a      	add	r2, r1
 80074de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074ea:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d11a      	bne.n	8007528 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	691a      	ldr	r2, [r3, #16]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d903      	bls.n	8007506 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	689a      	ldr	r2, [r3, #8]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	015a      	lsls	r2, r3, #5
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	4413      	add	r3, r2
 800750e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	0151      	lsls	r1, r2, #5
 8007518:	69fa      	ldr	r2, [r7, #28]
 800751a:	440a      	add	r2, r1
 800751c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007520:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007524:	6113      	str	r3, [r2, #16]
 8007526:	e01b      	b.n	8007560 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	015a      	lsls	r2, r3, #5
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	4413      	add	r3, r2
 8007530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007534:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	6919      	ldr	r1, [r3, #16]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	440b      	add	r3, r1
 8007540:	1e59      	subs	r1, r3, #1
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	fbb1 f3f3 	udiv	r3, r1, r3
 800754a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800754c:	4ba2      	ldr	r3, [pc, #648]	; (80077d8 <USB_EPStartXfer+0x3c0>)
 800754e:	400b      	ands	r3, r1
 8007550:	69b9      	ldr	r1, [r7, #24]
 8007552:	0148      	lsls	r0, r1, #5
 8007554:	69f9      	ldr	r1, [r7, #28]
 8007556:	4401      	add	r1, r0
 8007558:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800755c:	4313      	orrs	r3, r2
 800755e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	015a      	lsls	r2, r3, #5
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	4413      	add	r3, r2
 8007568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800756c:	691a      	ldr	r2, [r3, #16]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007576:	69b9      	ldr	r1, [r7, #24]
 8007578:	0148      	lsls	r0, r1, #5
 800757a:	69f9      	ldr	r1, [r7, #28]
 800757c:	4401      	add	r1, r0
 800757e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007582:	4313      	orrs	r3, r2
 8007584:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	791b      	ldrb	r3, [r3, #4]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d11f      	bne.n	80075ce <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	0151      	lsls	r1, r2, #5
 80075a0:	69fa      	ldr	r2, [r7, #28]
 80075a2:	440a      	add	r2, r1
 80075a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80075ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	0151      	lsls	r1, r2, #5
 80075c0:	69fa      	ldr	r2, [r7, #28]
 80075c2:	440a      	add	r2, r1
 80075c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80075ce:	79fb      	ldrb	r3, [r7, #7]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d14b      	bne.n	800766c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	69db      	ldr	r3, [r3, #28]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d009      	beq.n	80075f0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e8:	461a      	mov	r2, r3
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	69db      	ldr	r3, [r3, #28]
 80075ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	791b      	ldrb	r3, [r3, #4]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d128      	bne.n	800764a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007604:	2b00      	cmp	r3, #0
 8007606:	d110      	bne.n	800762a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	4413      	add	r3, r2
 8007610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	69ba      	ldr	r2, [r7, #24]
 8007618:	0151      	lsls	r1, r2, #5
 800761a:	69fa      	ldr	r2, [r7, #28]
 800761c:	440a      	add	r2, r1
 800761e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007622:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007626:	6013      	str	r3, [r2, #0]
 8007628:	e00f      	b.n	800764a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	4413      	add	r3, r2
 8007632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	69ba      	ldr	r2, [r7, #24]
 800763a:	0151      	lsls	r1, r2, #5
 800763c:	69fa      	ldr	r2, [r7, #28]
 800763e:	440a      	add	r2, r1
 8007640:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007648:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	015a      	lsls	r2, r3, #5
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	4413      	add	r3, r2
 8007652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	69ba      	ldr	r2, [r7, #24]
 800765a:	0151      	lsls	r1, r2, #5
 800765c:	69fa      	ldr	r2, [r7, #28]
 800765e:	440a      	add	r2, r1
 8007660:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007664:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007668:	6013      	str	r3, [r2, #0]
 800766a:	e165      	b.n	8007938 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	015a      	lsls	r2, r3, #5
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	4413      	add	r3, r2
 8007674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	0151      	lsls	r1, r2, #5
 800767e:	69fa      	ldr	r2, [r7, #28]
 8007680:	440a      	add	r2, r1
 8007682:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007686:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800768a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	791b      	ldrb	r3, [r3, #4]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d015      	beq.n	80076c0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 814d 	beq.w	8007938 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	f003 030f 	and.w	r3, r3, #15
 80076ae:	2101      	movs	r1, #1
 80076b0:	fa01 f303 	lsl.w	r3, r1, r3
 80076b4:	69f9      	ldr	r1, [r7, #28]
 80076b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076ba:	4313      	orrs	r3, r2
 80076bc:	634b      	str	r3, [r1, #52]	; 0x34
 80076be:	e13b      	b.n	8007938 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d110      	bne.n	80076f2 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	015a      	lsls	r2, r3, #5
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69ba      	ldr	r2, [r7, #24]
 80076e0:	0151      	lsls	r1, r2, #5
 80076e2:	69fa      	ldr	r2, [r7, #28]
 80076e4:	440a      	add	r2, r1
 80076e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076ee:	6013      	str	r3, [r2, #0]
 80076f0:	e00f      	b.n	8007712 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	015a      	lsls	r2, r3, #5
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	4413      	add	r3, r2
 80076fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	69ba      	ldr	r2, [r7, #24]
 8007702:	0151      	lsls	r1, r2, #5
 8007704:	69fa      	ldr	r2, [r7, #28]
 8007706:	440a      	add	r2, r1
 8007708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800770c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007710:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	68d9      	ldr	r1, [r3, #12]
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	781a      	ldrb	r2, [r3, #0]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	b298      	uxth	r0, r3
 8007720:	79fb      	ldrb	r3, [r7, #7]
 8007722:	9300      	str	r3, [sp, #0]
 8007724:	4603      	mov	r3, r0
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 f9b7 	bl	8007a9a <USB_WritePacket>
 800772c:	e104      	b.n	8007938 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	4413      	add	r3, r2
 8007736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	0151      	lsls	r1, r2, #5
 8007740:	69fa      	ldr	r2, [r7, #28]
 8007742:	440a      	add	r2, r1
 8007744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007748:	0cdb      	lsrs	r3, r3, #19
 800774a:	04db      	lsls	r3, r3, #19
 800774c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	015a      	lsls	r2, r3, #5
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	4413      	add	r3, r2
 8007756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	69ba      	ldr	r2, [r7, #24]
 800775e:	0151      	lsls	r1, r2, #5
 8007760:	69fa      	ldr	r2, [r7, #28]
 8007762:	440a      	add	r2, r1
 8007764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007768:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800776c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007770:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d131      	bne.n	80077dc <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d003      	beq.n	8007788 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	689a      	ldr	r2, [r3, #8]
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	015a      	lsls	r2, r3, #5
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	4413      	add	r3, r2
 8007798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800779c:	691a      	ldr	r2, [r3, #16]
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077a6:	69b9      	ldr	r1, [r7, #24]
 80077a8:	0148      	lsls	r0, r1, #5
 80077aa:	69f9      	ldr	r1, [r7, #28]
 80077ac:	4401      	add	r1, r0
 80077ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80077b2:	4313      	orrs	r3, r2
 80077b4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	69ba      	ldr	r2, [r7, #24]
 80077c6:	0151      	lsls	r1, r2, #5
 80077c8:	69fa      	ldr	r2, [r7, #28]
 80077ca:	440a      	add	r2, r1
 80077cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077d4:	6113      	str	r3, [r2, #16]
 80077d6:	e061      	b.n	800789c <USB_EPStartXfer+0x484>
 80077d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d123      	bne.n	800782c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f0:	691a      	ldr	r2, [r3, #16]
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077fa:	69b9      	ldr	r1, [r7, #24]
 80077fc:	0148      	lsls	r0, r1, #5
 80077fe:	69f9      	ldr	r1, [r7, #28]
 8007800:	4401      	add	r1, r0
 8007802:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007806:	4313      	orrs	r3, r2
 8007808:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	015a      	lsls	r2, r3, #5
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	4413      	add	r3, r2
 8007812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	69ba      	ldr	r2, [r7, #24]
 800781a:	0151      	lsls	r1, r2, #5
 800781c:	69fa      	ldr	r2, [r7, #28]
 800781e:	440a      	add	r2, r1
 8007820:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007824:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007828:	6113      	str	r3, [r2, #16]
 800782a:	e037      	b.n	800789c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	691a      	ldr	r2, [r3, #16]
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	4413      	add	r3, r2
 8007836:	1e5a      	subs	r2, r3, #1
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007840:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	8afa      	ldrh	r2, [r7, #22]
 8007848:	fb03 f202 	mul.w	r2, r3, r2
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	4413      	add	r3, r2
 8007858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800785c:	691a      	ldr	r2, [r3, #16]
 800785e:	8afb      	ldrh	r3, [r7, #22]
 8007860:	04d9      	lsls	r1, r3, #19
 8007862:	4b38      	ldr	r3, [pc, #224]	; (8007944 <USB_EPStartXfer+0x52c>)
 8007864:	400b      	ands	r3, r1
 8007866:	69b9      	ldr	r1, [r7, #24]
 8007868:	0148      	lsls	r0, r1, #5
 800786a:	69f9      	ldr	r1, [r7, #28]
 800786c:	4401      	add	r1, r0
 800786e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007872:	4313      	orrs	r3, r2
 8007874:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	015a      	lsls	r2, r3, #5
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	4413      	add	r3, r2
 800787e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007882:	691a      	ldr	r2, [r3, #16]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800788c:	69b9      	ldr	r1, [r7, #24]
 800788e:	0148      	lsls	r0, r1, #5
 8007890:	69f9      	ldr	r1, [r7, #28]
 8007892:	4401      	add	r1, r0
 8007894:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007898:	4313      	orrs	r3, r2
 800789a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800789c:	79fb      	ldrb	r3, [r7, #7]
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d10d      	bne.n	80078be <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d009      	beq.n	80078be <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	68d9      	ldr	r1, [r3, #12]
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ba:	460a      	mov	r2, r1
 80078bc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	791b      	ldrb	r3, [r3, #4]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d128      	bne.n	8007918 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d110      	bne.n	80078f8 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	015a      	lsls	r2, r3, #5
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	4413      	add	r3, r2
 80078de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	69ba      	ldr	r2, [r7, #24]
 80078e6:	0151      	lsls	r1, r2, #5
 80078e8:	69fa      	ldr	r2, [r7, #28]
 80078ea:	440a      	add	r2, r1
 80078ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80078f4:	6013      	str	r3, [r2, #0]
 80078f6:	e00f      	b.n	8007918 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	015a      	lsls	r2, r3, #5
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	4413      	add	r3, r2
 8007900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	69ba      	ldr	r2, [r7, #24]
 8007908:	0151      	lsls	r1, r2, #5
 800790a:	69fa      	ldr	r2, [r7, #28]
 800790c:	440a      	add	r2, r1
 800790e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007916:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	69ba      	ldr	r2, [r7, #24]
 8007928:	0151      	lsls	r1, r2, #5
 800792a:	69fa      	ldr	r2, [r7, #28]
 800792c:	440a      	add	r2, r1
 800792e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007932:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007936:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3720      	adds	r7, #32
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	1ff80000 	.word	0x1ff80000

08007948 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007948:	b480      	push	{r7}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007952:	2300      	movs	r3, #0
 8007954:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	785b      	ldrb	r3, [r3, #1]
 8007962:	2b01      	cmp	r3, #1
 8007964:	d14a      	bne.n	80079fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	4413      	add	r3, r2
 8007970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800797a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800797e:	f040 8086 	bne.w	8007a8e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	4413      	add	r3, r2
 800798c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	7812      	ldrb	r2, [r2, #0]
 8007996:	0151      	lsls	r1, r2, #5
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	440a      	add	r2, r1
 800799c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80079a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	015a      	lsls	r2, r3, #5
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	4413      	add	r3, r2
 80079b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	7812      	ldrb	r2, [r2, #0]
 80079ba:	0151      	lsls	r1, r2, #5
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	440a      	add	r2, r1
 80079c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	3301      	adds	r3, #1
 80079ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d902      	bls.n	80079e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	75fb      	strb	r3, [r7, #23]
          break;
 80079de:	e056      	b.n	8007a8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079f8:	d0e7      	beq.n	80079ca <USB_EPStopXfer+0x82>
 80079fa:	e048      	b.n	8007a8e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a14:	d13b      	bne.n	8007a8e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	015a      	lsls	r2, r3, #5
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	7812      	ldrb	r2, [r2, #0]
 8007a2a:	0151      	lsls	r1, r2, #5
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	440a      	add	r2, r1
 8007a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a38:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	015a      	lsls	r2, r3, #5
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	4413      	add	r3, r2
 8007a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	683a      	ldr	r2, [r7, #0]
 8007a4c:	7812      	ldrb	r2, [r2, #0]
 8007a4e:	0151      	lsls	r1, r2, #5
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	440a      	add	r2, r1
 8007a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	3301      	adds	r3, #1
 8007a62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f242 7210 	movw	r2, #10000	; 0x2710
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d902      	bls.n	8007a74 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	75fb      	strb	r3, [r7, #23]
          break;
 8007a72:	e00c      	b.n	8007a8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	015a      	lsls	r2, r3, #5
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a8c:	d0e7      	beq.n	8007a5e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	371c      	adds	r7, #28
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bc80      	pop	{r7}
 8007a98:	4770      	bx	lr

08007a9a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b089      	sub	sp, #36	; 0x24
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	60f8      	str	r0, [r7, #12]
 8007aa2:	60b9      	str	r1, [r7, #8]
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	71fb      	strb	r3, [r7, #7]
 8007aac:	4613      	mov	r3, r2
 8007aae:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007ab8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d123      	bne.n	8007b08 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007ac0:	88bb      	ldrh	r3, [r7, #4]
 8007ac2:	3303      	adds	r3, #3
 8007ac4:	089b      	lsrs	r3, r3, #2
 8007ac6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007ac8:	2300      	movs	r3, #0
 8007aca:	61bb      	str	r3, [r7, #24]
 8007acc:	e018      	b.n	8007b00 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ace:	79fb      	ldrb	r3, [r7, #7]
 8007ad0:	031a      	lsls	r2, r3, #12
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ada:	461a      	mov	r2, r3
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	3301      	adds	r3, #1
 8007aec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	3301      	adds	r3, #1
 8007af2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	3301      	adds	r3, #1
 8007af8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	3301      	adds	r3, #1
 8007afe:	61bb      	str	r3, [r7, #24]
 8007b00:	69ba      	ldr	r2, [r7, #24]
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d3e2      	bcc.n	8007ace <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3724      	adds	r7, #36	; 0x24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bc80      	pop	{r7}
 8007b12:	4770      	bx	lr

08007b14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b08b      	sub	sp, #44	; 0x2c
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b2a:	88fb      	ldrh	r3, [r7, #6]
 8007b2c:	089b      	lsrs	r3, r3, #2
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007b32:	88fb      	ldrh	r3, [r7, #6]
 8007b34:	f003 0303 	and.w	r3, r3, #3
 8007b38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	623b      	str	r3, [r7, #32]
 8007b3e:	e014      	b.n	8007b6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4e:	3301      	adds	r3, #1
 8007b50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b54:	3301      	adds	r3, #1
 8007b56:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	3301      	adds	r3, #1
 8007b62:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	3301      	adds	r3, #1
 8007b68:	623b      	str	r3, [r7, #32]
 8007b6a:	6a3a      	ldr	r2, [r7, #32]
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d3e6      	bcc.n	8007b40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007b72:	8bfb      	ldrh	r3, [r7, #30]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d01e      	beq.n	8007bb6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b82:	461a      	mov	r2, r3
 8007b84:	f107 0310 	add.w	r3, r7, #16
 8007b88:	6812      	ldr	r2, [r2, #0]
 8007b8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	fa22 f303 	lsr.w	r3, r2, r3
 8007b98:	b2da      	uxtb	r2, r3
 8007b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9c:	701a      	strb	r2, [r3, #0]
      i++;
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	3301      	adds	r3, #1
 8007ba2:	623b      	str	r3, [r7, #32]
      pDest++;
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007baa:	8bfb      	ldrh	r3, [r7, #30]
 8007bac:	3b01      	subs	r3, #1
 8007bae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007bb0:	8bfb      	ldrh	r3, [r7, #30]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1ea      	bne.n	8007b8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	372c      	adds	r7, #44	; 0x2c
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bc80      	pop	{r7}
 8007bc0:	4770      	bx	lr

08007bc2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b085      	sub	sp, #20
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
 8007bca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	785b      	ldrb	r3, [r3, #1]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d12c      	bne.n	8007c38 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	015a      	lsls	r2, r3, #5
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	4413      	add	r3, r2
 8007be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	db12      	blt.n	8007c16 <USB_EPSetStall+0x54>
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00f      	beq.n	8007c16 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	0151      	lsls	r1, r2, #5
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	440a      	add	r2, r1
 8007c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c14:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	015a      	lsls	r2, r3, #5
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	0151      	lsls	r1, r2, #5
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	440a      	add	r2, r1
 8007c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c34:	6013      	str	r3, [r2, #0]
 8007c36:	e02b      	b.n	8007c90 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	015a      	lsls	r2, r3, #5
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	db12      	blt.n	8007c70 <USB_EPSetStall+0xae>
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00f      	beq.n	8007c70 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	015a      	lsls	r2, r3, #5
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	4413      	add	r3, r2
 8007c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	0151      	lsls	r1, r2, #5
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	440a      	add	r2, r1
 8007c66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007c6e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	015a      	lsls	r2, r3, #5
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	4413      	add	r3, r2
 8007c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	0151      	lsls	r1, r2, #5
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	440a      	add	r2, r1
 8007c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bc80      	pop	{r7}
 8007c9a:	4770      	bx	lr

08007c9c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	785b      	ldrb	r3, [r3, #1]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d128      	bne.n	8007d0a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	015a      	lsls	r2, r3, #5
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68ba      	ldr	r2, [r7, #8]
 8007cc8:	0151      	lsls	r1, r2, #5
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	440a      	add	r2, r1
 8007cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007cd6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	791b      	ldrb	r3, [r3, #4]
 8007cdc:	2b03      	cmp	r3, #3
 8007cde:	d003      	beq.n	8007ce8 <USB_EPClearStall+0x4c>
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	791b      	ldrb	r3, [r3, #4]
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d138      	bne.n	8007d5a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	0151      	lsls	r1, r2, #5
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	440a      	add	r2, r1
 8007cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d06:	6013      	str	r3, [r2, #0]
 8007d08:	e027      	b.n	8007d5a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	015a      	lsls	r2, r3, #5
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	0151      	lsls	r1, r2, #5
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	440a      	add	r2, r1
 8007d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d28:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	791b      	ldrb	r3, [r3, #4]
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	d003      	beq.n	8007d3a <USB_EPClearStall+0x9e>
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	791b      	ldrb	r3, [r3, #4]
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d10f      	bne.n	8007d5a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	015a      	lsls	r2, r3, #5
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	4413      	add	r3, r2
 8007d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	0151      	lsls	r1, r2, #5
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	440a      	add	r2, r1
 8007d50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d58:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bc80      	pop	{r7}
 8007d64:	4770      	bx	lr

08007d66 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b085      	sub	sp, #20
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d84:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007d88:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	78fb      	ldrb	r3, [r7, #3]
 8007d94:	011b      	lsls	r3, r3, #4
 8007d96:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007d9a:	68f9      	ldr	r1, [r7, #12]
 8007d9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007da0:	4313      	orrs	r3, r2
 8007da2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bc80      	pop	{r7}
 8007dae:	4770      	bx	lr

08007db0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68fa      	ldr	r2, [r7, #12]
 8007dc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007dca:	f023 0303 	bic.w	r3, r3, #3
 8007dce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dde:	f023 0302 	bic.w	r3, r3, #2
 8007de2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bc80      	pop	{r7}
 8007dee:	4770      	bx	lr

08007df0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e0a:	f023 0303 	bic.w	r3, r3, #3
 8007e0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e1e:	f043 0302 	orr.w	r3, r3, #2
 8007e22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3714      	adds	r7, #20
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bc80      	pop	{r7}
 8007e2e:	4770      	bx	lr

08007e30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	695b      	ldr	r3, [r3, #20]
 8007e3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	4013      	ands	r3, r2
 8007e46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e48:	68fb      	ldr	r3, [r7, #12]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3714      	adds	r7, #20
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bc80      	pop	{r7}
 8007e52:	4770      	bx	lr

08007e54 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b085      	sub	sp, #20
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e70:	69db      	ldr	r3, [r3, #28]
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	4013      	ands	r3, r2
 8007e76:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	0c1b      	lsrs	r3, r3, #16
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3714      	adds	r7, #20
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bc80      	pop	{r7}
 8007e84:	4770      	bx	lr

08007e86 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b085      	sub	sp, #20
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea2:	69db      	ldr	r3, [r3, #28]
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	b29b      	uxth	r3, r3
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bc80      	pop	{r7}
 8007eb6:	4770      	bx	lr

08007eb8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007ec8:	78fb      	ldrb	r3, [r7, #3]
 8007eca:	015a      	lsls	r2, r3, #5
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4413      	add	r3, r2
 8007ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ede:	695b      	ldr	r3, [r3, #20]
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ee6:	68bb      	ldr	r3, [r7, #8]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bc80      	pop	{r7}
 8007ef0:	4770      	bx	lr

08007ef2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	b087      	sub	sp, #28
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	460b      	mov	r3, r1
 8007efc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f14:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007f16:	78fb      	ldrb	r3, [r7, #3]
 8007f18:	f003 030f 	and.w	r3, r3, #15
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f22:	01db      	lsls	r3, r3, #7
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007f2c:	78fb      	ldrb	r3, [r7, #3]
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f40:	68bb      	ldr	r3, [r7, #8]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	371c      	adds	r7, #28
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bc80      	pop	{r7}
 8007f4a:	4770      	bx	lr

08007f4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	695b      	ldr	r3, [r3, #20]
 8007f58:	f003 0301 	and.w	r3, r3, #1
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bc80      	pop	{r7}
 8007f64:	4770      	bx	lr

08007f66 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b085      	sub	sp, #20
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f80:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007f84:	f023 0307 	bic.w	r3, r3, #7
 8007f88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3714      	adds	r7, #20
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bc80      	pop	{r7}
 8007fa8:	4770      	bx	lr
	...

08007fac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b087      	sub	sp, #28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	607a      	str	r2, [r7, #4]
 8007fb8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	333c      	adds	r3, #60	; 0x3c
 8007fc2:	3304      	adds	r3, #4
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	4a25      	ldr	r2, [pc, #148]	; (8008060 <USB_EP0_OutStart+0xb4>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d90a      	bls.n	8007fe6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fe0:	d101      	bne.n	8007fe6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	e037      	b.n	8008056 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fec:	461a      	mov	r2, r3
 8007fee:	2300      	movs	r3, #0
 8007ff0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	697a      	ldr	r2, [r7, #20]
 8007ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008000:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008004:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008014:	f043 0318 	orr.w	r3, r3, #24
 8008018:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008028:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800802c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800802e:	7afb      	ldrb	r3, [r7, #11]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d10f      	bne.n	8008054 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800803a:	461a      	mov	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800804e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008052:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	371c      	adds	r7, #28
 800805a:	46bd      	mov	sp, r7
 800805c:	bc80      	pop	{r7}
 800805e:	4770      	bx	lr
 8008060:	4f54300a 	.word	0x4f54300a

08008064 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	3301      	adds	r3, #1
 8008074:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	4a12      	ldr	r2, [pc, #72]	; (80080c4 <USB_CoreReset+0x60>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d901      	bls.n	8008082 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e01b      	b.n	80080ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	2b00      	cmp	r3, #0
 8008088:	daf2      	bge.n	8008070 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800808a:	2300      	movs	r3, #0
 800808c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	f043 0201 	orr.w	r2, r3, #1
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	3301      	adds	r3, #1
 800809e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	4a08      	ldr	r2, [pc, #32]	; (80080c4 <USB_CoreReset+0x60>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d901      	bls.n	80080ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e006      	b.n	80080ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	f003 0301 	and.w	r3, r3, #1
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d0f0      	beq.n	800809a <USB_CoreReset+0x36>

  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3714      	adds	r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	bc80      	pop	{r7}
 80080c2:	4770      	bx	lr
 80080c4:	00030d40 	.word	0x00030d40

080080c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	460b      	mov	r3, r1
 80080d2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	7c1b      	ldrb	r3, [r3, #16]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d115      	bne.n	800810c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80080e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080e4:	2202      	movs	r2, #2
 80080e6:	2181      	movs	r1, #129	; 0x81
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f001 ff42 	bl	8009f72 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80080f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080f8:	2202      	movs	r2, #2
 80080fa:	2101      	movs	r1, #1
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f001 ff38 	bl	8009f72 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800810a:	e012      	b.n	8008132 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800810c:	2340      	movs	r3, #64	; 0x40
 800810e:	2202      	movs	r2, #2
 8008110:	2181      	movs	r1, #129	; 0x81
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f001 ff2d 	bl	8009f72 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800811e:	2340      	movs	r3, #64	; 0x40
 8008120:	2202      	movs	r2, #2
 8008122:	2101      	movs	r1, #1
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f001 ff24 	bl	8009f72 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008132:	2308      	movs	r3, #8
 8008134:	2203      	movs	r2, #3
 8008136:	2182      	movs	r1, #130	; 0x82
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f001 ff1a 	bl	8009f72 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008144:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008148:	f002 f866 	bl	800a218 <malloc>
 800814c:	4603      	mov	r3, r0
 800814e:	461a      	mov	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800815c:	2b00      	cmp	r3, #0
 800815e:	d102      	bne.n	8008166 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8008160:	2301      	movs	r3, #1
 8008162:	73fb      	strb	r3, [r7, #15]
 8008164:	e026      	b.n	80081b4 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800816c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2200      	movs	r2, #0
 800817c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	2200      	movs	r2, #0
 8008184:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	7c1b      	ldrb	r3, [r3, #16]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d109      	bne.n	80081a4 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800819a:	2101      	movs	r1, #1
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f001 ffd8 	bl	800a152 <USBD_LL_PrepareReceive>
 80081a2:	e007      	b.n	80081b4 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081aa:	2340      	movs	r3, #64	; 0x40
 80081ac:	2101      	movs	r1, #1
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f001 ffcf 	bl	800a152 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b084      	sub	sp, #16
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	460b      	mov	r3, r1
 80081c8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80081ca:	2300      	movs	r3, #0
 80081cc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80081ce:	2181      	movs	r1, #129	; 0x81
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f001 fef4 	bl	8009fbe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80081dc:	2101      	movs	r1, #1
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f001 feed 	bl	8009fbe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80081ec:	2182      	movs	r1, #130	; 0x82
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f001 fee5 	bl	8009fbe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00e      	beq.n	8008222 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008214:	4618      	mov	r0, r3
 8008216:	f002 f807 	bl	800a228 <free>
    pdev->pClassData = NULL;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008222:	7bfb      	ldrb	r3, [r7, #15]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800823c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800823e:	2300      	movs	r3, #0
 8008240:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008242:	2300      	movs	r3, #0
 8008244:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008246:	2300      	movs	r3, #0
 8008248:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008252:	2b00      	cmp	r3, #0
 8008254:	d039      	beq.n	80082ca <USBD_CDC_Setup+0x9e>
 8008256:	2b20      	cmp	r3, #32
 8008258:	d17f      	bne.n	800835a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	88db      	ldrh	r3, [r3, #6]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d029      	beq.n	80082b6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	b25b      	sxtb	r3, r3
 8008268:	2b00      	cmp	r3, #0
 800826a:	da11      	bge.n	8008290 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008278:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	88d2      	ldrh	r2, [r2, #6]
 800827e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008280:	6939      	ldr	r1, [r7, #16]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	88db      	ldrh	r3, [r3, #6]
 8008286:	461a      	mov	r2, r3
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f001 fa42 	bl	8009712 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800828e:	e06b      	b.n	8008368 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	785a      	ldrb	r2, [r3, #1]
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	88db      	ldrh	r3, [r3, #6]
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80082a6:	6939      	ldr	r1, [r7, #16]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	88db      	ldrh	r3, [r3, #6]
 80082ac:	461a      	mov	r2, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f001 fa5d 	bl	800976e <USBD_CtlPrepareRx>
      break;
 80082b4:	e058      	b.n	8008368 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	683a      	ldr	r2, [r7, #0]
 80082c0:	7850      	ldrb	r0, [r2, #1]
 80082c2:	2200      	movs	r2, #0
 80082c4:	6839      	ldr	r1, [r7, #0]
 80082c6:	4798      	blx	r3
      break;
 80082c8:	e04e      	b.n	8008368 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	785b      	ldrb	r3, [r3, #1]
 80082ce:	2b0b      	cmp	r3, #11
 80082d0:	d02e      	beq.n	8008330 <USBD_CDC_Setup+0x104>
 80082d2:	2b0b      	cmp	r3, #11
 80082d4:	dc38      	bgt.n	8008348 <USBD_CDC_Setup+0x11c>
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d002      	beq.n	80082e0 <USBD_CDC_Setup+0xb4>
 80082da:	2b0a      	cmp	r3, #10
 80082dc:	d014      	beq.n	8008308 <USBD_CDC_Setup+0xdc>
 80082de:	e033      	b.n	8008348 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	d107      	bne.n	80082fa <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80082ea:	f107 030c 	add.w	r3, r7, #12
 80082ee:	2202      	movs	r2, #2
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f001 fa0d 	bl	8009712 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082f8:	e02e      	b.n	8008358 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f001 f99e 	bl	800963e <USBD_CtlError>
            ret = USBD_FAIL;
 8008302:	2302      	movs	r3, #2
 8008304:	75fb      	strb	r3, [r7, #23]
          break;
 8008306:	e027      	b.n	8008358 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800830e:	2b03      	cmp	r3, #3
 8008310:	d107      	bne.n	8008322 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008312:	f107 030f 	add.w	r3, r7, #15
 8008316:	2201      	movs	r2, #1
 8008318:	4619      	mov	r1, r3
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f001 f9f9 	bl	8009712 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008320:	e01a      	b.n	8008358 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f001 f98a 	bl	800963e <USBD_CtlError>
            ret = USBD_FAIL;
 800832a:	2302      	movs	r3, #2
 800832c:	75fb      	strb	r3, [r7, #23]
          break;
 800832e:	e013      	b.n	8008358 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008336:	2b03      	cmp	r3, #3
 8008338:	d00d      	beq.n	8008356 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800833a:	6839      	ldr	r1, [r7, #0]
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f001 f97e 	bl	800963e <USBD_CtlError>
            ret = USBD_FAIL;
 8008342:	2302      	movs	r3, #2
 8008344:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008346:	e006      	b.n	8008356 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008348:	6839      	ldr	r1, [r7, #0]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f001 f977 	bl	800963e <USBD_CtlError>
          ret = USBD_FAIL;
 8008350:	2302      	movs	r3, #2
 8008352:	75fb      	strb	r3, [r7, #23]
          break;
 8008354:	e000      	b.n	8008358 <USBD_CDC_Setup+0x12c>
          break;
 8008356:	bf00      	nop
      }
      break;
 8008358:	e006      	b.n	8008368 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800835a:	6839      	ldr	r1, [r7, #0]
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f001 f96e 	bl	800963e <USBD_CtlError>
      ret = USBD_FAIL;
 8008362:	2302      	movs	r3, #2
 8008364:	75fb      	strb	r3, [r7, #23]
      break;
 8008366:	bf00      	nop
  }

  return ret;
 8008368:	7dfb      	ldrb	r3, [r7, #23]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3718      	adds	r7, #24
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b084      	sub	sp, #16
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	460b      	mov	r3, r1
 800837c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008384:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800838c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008394:	2b00      	cmp	r3, #0
 8008396:	d03a      	beq.n	800840e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008398:	78fa      	ldrb	r2, [r7, #3]
 800839a:	6879      	ldr	r1, [r7, #4]
 800839c:	4613      	mov	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4413      	add	r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	440b      	add	r3, r1
 80083a6:	331c      	adds	r3, #28
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d029      	beq.n	8008402 <USBD_CDC_DataIn+0x90>
 80083ae:	78fa      	ldrb	r2, [r7, #3]
 80083b0:	6879      	ldr	r1, [r7, #4]
 80083b2:	4613      	mov	r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	440b      	add	r3, r1
 80083bc:	331c      	adds	r3, #28
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	78f9      	ldrb	r1, [r7, #3]
 80083c2:	68b8      	ldr	r0, [r7, #8]
 80083c4:	460b      	mov	r3, r1
 80083c6:	00db      	lsls	r3, r3, #3
 80083c8:	440b      	add	r3, r1
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	4403      	add	r3, r0
 80083ce:	3344      	adds	r3, #68	; 0x44
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	fbb2 f1f3 	udiv	r1, r2, r3
 80083d6:	fb01 f303 	mul.w	r3, r1, r3
 80083da:	1ad3      	subs	r3, r2, r3
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d110      	bne.n	8008402 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80083e0:	78fa      	ldrb	r2, [r7, #3]
 80083e2:	6879      	ldr	r1, [r7, #4]
 80083e4:	4613      	mov	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4413      	add	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	440b      	add	r3, r1
 80083ee:	331c      	adds	r3, #28
 80083f0:	2200      	movs	r2, #0
 80083f2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80083f4:	78f9      	ldrb	r1, [r7, #3]
 80083f6:	2300      	movs	r3, #0
 80083f8:	2200      	movs	r2, #0
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f001 fe86 	bl	800a10c <USBD_LL_Transmit>
 8008400:	e003      	b.n	800840a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	e000      	b.n	8008410 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800840e:	2302      	movs	r3, #2
  }
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	460b      	mov	r3, r1
 8008422:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800842a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800842c:	78fb      	ldrb	r3, [r7, #3]
 800842e:	4619      	mov	r1, r3
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f001 feb1 	bl	800a198 <USBD_LL_GetRxDataSize>
 8008436:	4602      	mov	r2, r0
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00d      	beq.n	8008464 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800845c:	4611      	mov	r1, r2
 800845e:	4798      	blx	r3

    return USBD_OK;
 8008460:	2300      	movs	r3, #0
 8008462:	e000      	b.n	8008466 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008464:	2302      	movs	r3, #2
  }
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b084      	sub	sp, #16
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800847c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008484:	2b00      	cmp	r3, #0
 8008486:	d015      	beq.n	80084b4 <USBD_CDC_EP0_RxReady+0x46>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800848e:	2bff      	cmp	r3, #255	; 0xff
 8008490:	d010      	beq.n	80084b4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80084a0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80084a8:	b292      	uxth	r2, r2
 80084aa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	22ff      	movs	r2, #255	; 0xff
 80084b0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
	...

080084c0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2243      	movs	r2, #67	; 0x43
 80084cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80084ce:	4b03      	ldr	r3, [pc, #12]	; (80084dc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bc80      	pop	{r7}
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	200000f8 	.word	0x200000f8

080084e0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2243      	movs	r2, #67	; 0x43
 80084ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80084ee:	4b03      	ldr	r3, [pc, #12]	; (80084fc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bc80      	pop	{r7}
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	200000b4 	.word	0x200000b4

08008500 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2243      	movs	r2, #67	; 0x43
 800850c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800850e:	4b03      	ldr	r3, [pc, #12]	; (800851c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008510:	4618      	mov	r0, r3
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	bc80      	pop	{r7}
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	2000013c 	.word	0x2000013c

08008520 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	220a      	movs	r2, #10
 800852c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800852e:	4b03      	ldr	r3, [pc, #12]	; (800853c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008530:	4618      	mov	r0, r3
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	bc80      	pop	{r7}
 8008538:	4770      	bx	lr
 800853a:	bf00      	nop
 800853c:	20000070 	.word	0x20000070

08008540 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800854a:	2302      	movs	r3, #2
 800854c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d005      	beq.n	8008560 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800855c:	2300      	movs	r3, #0
 800855e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008560:	7bfb      	ldrb	r3, [r7, #15]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3714      	adds	r7, #20
 8008566:	46bd      	mov	sp, r7
 8008568:	bc80      	pop	{r7}
 800856a:	4770      	bx	lr

0800856c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800856c:	b480      	push	{r7}
 800856e:	b087      	sub	sp, #28
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	4613      	mov	r3, r2
 8008578:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008580:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800858a:	88fa      	ldrh	r2, [r7, #6]
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	371c      	adds	r7, #28
 8008598:	46bd      	mov	sp, r7
 800859a:	bc80      	pop	{r7}
 800859c:	4770      	bx	lr

0800859e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800859e:	b480      	push	{r7}
 80085a0:	b085      	sub	sp, #20
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ae:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3714      	adds	r7, #20
 80085be:	46bd      	mov	sp, r7
 80085c0:	bc80      	pop	{r7}
 80085c2:	4770      	bx	lr

080085c4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d01c      	beq.n	8008618 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d115      	bne.n	8008614 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008606:	b29b      	uxth	r3, r3
 8008608:	2181      	movs	r1, #129	; 0x81
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f001 fd7e 	bl	800a10c <USBD_LL_Transmit>

      return USBD_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	e002      	b.n	800861a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008614:	2301      	movs	r3, #1
 8008616:	e000      	b.n	800861a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008618:	2302      	movs	r3, #2
  }
}
 800861a:	4618      	mov	r0, r3
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b084      	sub	sp, #16
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008630:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008638:	2b00      	cmp	r3, #0
 800863a:	d017      	beq.n	800866c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	7c1b      	ldrb	r3, [r3, #16]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d109      	bne.n	8008658 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800864a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800864e:	2101      	movs	r1, #1
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f001 fd7e 	bl	800a152 <USBD_LL_PrepareReceive>
 8008656:	e007      	b.n	8008668 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800865e:	2340      	movs	r3, #64	; 0x40
 8008660:	2101      	movs	r1, #1
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f001 fd75 	bl	800a152 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008668:	2300      	movs	r3, #0
 800866a:	e000      	b.n	800866e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800866c:	2302      	movs	r3, #2
  }
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b084      	sub	sp, #16
 800867a:	af00      	add	r7, sp, #0
 800867c:	60f8      	str	r0, [r7, #12]
 800867e:	60b9      	str	r1, [r7, #8]
 8008680:	4613      	mov	r3, r2
 8008682:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800868a:	2302      	movs	r3, #2
 800868c:	e01a      	b.n	80086c4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008694:	2b00      	cmp	r3, #0
 8008696:	d003      	beq.n	80086a0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d003      	beq.n	80086ae <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	68ba      	ldr	r2, [r7, #8]
 80086aa:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	79fa      	ldrb	r2, [r7, #7]
 80086ba:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f001 fbf3 	bl	8009ea8 <USBD_LL_Init>

  return USBD_OK;
 80086c2:	2300      	movs	r3, #0
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d006      	beq.n	80086ee <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	683a      	ldr	r2, [r7, #0]
 80086e4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	73fb      	strb	r3, [r7, #15]
 80086ec:	e001      	b.n	80086f2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80086ee:	2302      	movs	r3, #2
 80086f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bc80      	pop	{r7}
 80086fc:	4770      	bx	lr

080086fe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b082      	sub	sp, #8
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	f001 fc18 	bl	8009f3c <USBD_LL_Start>

  return USBD_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008716:	b480      	push	{r7}
 8008718:	b083      	sub	sp, #12
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800871e:	2300      	movs	r3, #0
}
 8008720:	4618      	mov	r0, r3
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	bc80      	pop	{r7}
 8008728:	4770      	bx	lr

0800872a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
 8008732:	460b      	mov	r3, r1
 8008734:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008736:	2302      	movs	r3, #2
 8008738:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00c      	beq.n	800875e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	78fa      	ldrb	r2, [r7, #3]
 800874e:	4611      	mov	r1, r2
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	4798      	blx	r3
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800875e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008760:	4618      	mov	r0, r3
 8008762:	3710      	adds	r7, #16
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	78fa      	ldrb	r2, [r7, #3]
 800877e:	4611      	mov	r1, r2
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	4798      	blx	r3

  return USBD_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b082      	sub	sp, #8
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	4618      	mov	r0, r3
 80087a2:	f000 ff10 	bl	80095c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80087b4:	461a      	mov	r2, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80087c2:	f003 031f 	and.w	r3, r3, #31
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d016      	beq.n	80087f8 <USBD_LL_SetupStage+0x6a>
 80087ca:	2b02      	cmp	r3, #2
 80087cc:	d81c      	bhi.n	8008808 <USBD_LL_SetupStage+0x7a>
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d002      	beq.n	80087d8 <USBD_LL_SetupStage+0x4a>
 80087d2:	2b01      	cmp	r3, #1
 80087d4:	d008      	beq.n	80087e8 <USBD_LL_SetupStage+0x5a>
 80087d6:	e017      	b.n	8008808 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fa03 	bl	8008bec <USBD_StdDevReq>
      break;
 80087e6:	e01a      	b.n	800881e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80087ee:	4619      	mov	r1, r3
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fa65 	bl	8008cc0 <USBD_StdItfReq>
      break;
 80087f6:	e012      	b.n	800881e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80087fe:	4619      	mov	r1, r3
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 faa5 	bl	8008d50 <USBD_StdEPReq>
      break;
 8008806:	e00a      	b.n	800881e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800880e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008812:	b2db      	uxtb	r3, r3
 8008814:	4619      	mov	r1, r3
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f001 fbf0 	bl	8009ffc <USBD_LL_StallEP>
      break;
 800881c:	bf00      	nop
  }

  return USBD_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	460b      	mov	r3, r1
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008836:	7afb      	ldrb	r3, [r7, #11]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d14b      	bne.n	80088d4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008842:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800884a:	2b03      	cmp	r3, #3
 800884c:	d134      	bne.n	80088b8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	68da      	ldr	r2, [r3, #12]
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	429a      	cmp	r2, r3
 8008858:	d919      	bls.n	800888e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	68da      	ldr	r2, [r3, #12]
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	1ad2      	subs	r2, r2, r3
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	68da      	ldr	r2, [r3, #12]
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008870:	429a      	cmp	r2, r3
 8008872:	d203      	bcs.n	800887c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008878:	b29b      	uxth	r3, r3
 800887a:	e002      	b.n	8008882 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008880:	b29b      	uxth	r3, r3
 8008882:	461a      	mov	r2, r3
 8008884:	6879      	ldr	r1, [r7, #4]
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f000 ff8f 	bl	80097aa <USBD_CtlContinueRx>
 800888c:	e038      	b.n	8008900 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00a      	beq.n	80088b0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80088a0:	2b03      	cmp	r3, #3
 80088a2:	d105      	bne.n	80088b0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 ff8c 	bl	80097ce <USBD_CtlSendStatus>
 80088b6:	e023      	b.n	8008900 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088be:	2b05      	cmp	r3, #5
 80088c0:	d11e      	bne.n	8008900 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80088ca:	2100      	movs	r1, #0
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f001 fb95 	bl	8009ffc <USBD_LL_StallEP>
 80088d2:	e015      	b.n	8008900 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00d      	beq.n	80088fc <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80088e6:	2b03      	cmp	r3, #3
 80088e8:	d108      	bne.n	80088fc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	7afa      	ldrb	r2, [r7, #11]
 80088f4:	4611      	mov	r1, r2
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	4798      	blx	r3
 80088fa:	e001      	b.n	8008900 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80088fc:	2302      	movs	r3, #2
 80088fe:	e000      	b.n	8008902 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	3718      	adds	r7, #24
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800890a:	b580      	push	{r7, lr}
 800890c:	b086      	sub	sp, #24
 800890e:	af00      	add	r7, sp, #0
 8008910:	60f8      	str	r0, [r7, #12]
 8008912:	460b      	mov	r3, r1
 8008914:	607a      	str	r2, [r7, #4]
 8008916:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008918:	7afb      	ldrb	r3, [r7, #11]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d17f      	bne.n	8008a1e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	3314      	adds	r3, #20
 8008922:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800892a:	2b02      	cmp	r3, #2
 800892c:	d15c      	bne.n	80089e8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	68da      	ldr	r2, [r3, #12]
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	691b      	ldr	r3, [r3, #16]
 8008936:	429a      	cmp	r2, r3
 8008938:	d915      	bls.n	8008966 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	68da      	ldr	r2, [r3, #12]
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	691b      	ldr	r3, [r3, #16]
 8008942:	1ad2      	subs	r2, r2, r3
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	b29b      	uxth	r3, r3
 800894e:	461a      	mov	r2, r3
 8008950:	6879      	ldr	r1, [r7, #4]
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f000 fef9 	bl	800974a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008958:	2300      	movs	r3, #0
 800895a:	2200      	movs	r2, #0
 800895c:	2100      	movs	r1, #0
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f001 fbf7 	bl	800a152 <USBD_LL_PrepareReceive>
 8008964:	e04e      	b.n	8008a04 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	6912      	ldr	r2, [r2, #16]
 800896e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008972:	fb01 f202 	mul.w	r2, r1, r2
 8008976:	1a9b      	subs	r3, r3, r2
 8008978:	2b00      	cmp	r3, #0
 800897a:	d11c      	bne.n	80089b6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	689a      	ldr	r2, [r3, #8]
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008984:	429a      	cmp	r2, r3
 8008986:	d316      	bcc.n	80089b6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	689a      	ldr	r2, [r3, #8]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008992:	429a      	cmp	r2, r3
 8008994:	d20f      	bcs.n	80089b6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008996:	2200      	movs	r2, #0
 8008998:	2100      	movs	r1, #0
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f000 fed5 	bl	800974a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089a8:	2300      	movs	r3, #0
 80089aa:	2200      	movs	r2, #0
 80089ac:	2100      	movs	r1, #0
 80089ae:	68f8      	ldr	r0, [r7, #12]
 80089b0:	f001 fbcf 	bl	800a152 <USBD_LL_PrepareReceive>
 80089b4:	e026      	b.n	8008a04 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00a      	beq.n	80089d8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80089c8:	2b03      	cmp	r3, #3
 80089ca:	d105      	bne.n	80089d8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80089d8:	2180      	movs	r1, #128	; 0x80
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f001 fb0e 	bl	8009ffc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f000 ff07 	bl	80097f4 <USBD_CtlReceiveStatus>
 80089e6:	e00d      	b.n	8008a04 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089ee:	2b04      	cmp	r3, #4
 80089f0:	d004      	beq.n	80089fc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d103      	bne.n	8008a04 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80089fc:	2180      	movs	r1, #128	; 0x80
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f001 fafc 	bl	8009ffc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d11d      	bne.n	8008a4a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008a0e:	68f8      	ldr	r0, [r7, #12]
 8008a10:	f7ff fe81 	bl	8008716 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008a1c:	e015      	b.n	8008a4a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00d      	beq.n	8008a46 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008a30:	2b03      	cmp	r3, #3
 8008a32:	d108      	bne.n	8008a46 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a3a:	695b      	ldr	r3, [r3, #20]
 8008a3c:	7afa      	ldrb	r2, [r7, #11]
 8008a3e:	4611      	mov	r1, r2
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	4798      	blx	r3
 8008a44:	e001      	b.n	8008a4a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008a46:	2302      	movs	r3, #2
 8008a48:	e000      	b.n	8008a4c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008a4a:	2300      	movs	r3, #0
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3718      	adds	r7, #24
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a5c:	2340      	movs	r3, #64	; 0x40
 8008a5e:	2200      	movs	r2, #0
 8008a60:	2100      	movs	r1, #0
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f001 fa85 	bl	8009f72 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2240      	movs	r2, #64	; 0x40
 8008a74:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a78:	2340      	movs	r3, #64	; 0x40
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	2180      	movs	r1, #128	; 0x80
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f001 fa77 	bl	8009f72 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2240      	movs	r2, #64	; 0x40
 8008a8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d009      	beq.n	8008acc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	6852      	ldr	r2, [r2, #4]
 8008ac4:	b2d2      	uxtb	r2, r2
 8008ac6:	4611      	mov	r1, r2
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	4798      	blx	r3
  }

  return USBD_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b083      	sub	sp, #12
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	460b      	mov	r3, r1
 8008ae0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	78fa      	ldrb	r2, [r7, #3]
 8008ae6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	370c      	adds	r7, #12
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bc80      	pop	{r7}
 8008af2:	4770      	bx	lr

08008af4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2204      	movs	r2, #4
 8008b0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	370c      	adds	r7, #12
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bc80      	pop	{r7}
 8008b1a:	4770      	bx	lr

08008b1c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b2a:	2b04      	cmp	r3, #4
 8008b2c:	d105      	bne.n	8008b3a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bc80      	pop	{r7}
 8008b44:	4770      	bx	lr

08008b46 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b082      	sub	sp, #8
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b54:	2b03      	cmp	r3, #3
 8008b56:	d10b      	bne.n	8008b70 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b5e:	69db      	ldr	r3, [r3, #28]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d005      	beq.n	8008b70 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b6a:	69db      	ldr	r3, [r3, #28]
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b083      	sub	sp, #12
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	460b      	mov	r3, r1
 8008b84:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bc80      	pop	{r7}
 8008b90:	4770      	bx	lr

08008b92 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008b92:	b480      	push	{r7}
 8008b94:	b083      	sub	sp, #12
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	370c      	adds	r7, #12
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bc80      	pop	{r7}
 8008ba8:	4770      	bx	lr

08008baa <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bc80      	pop	{r7}
 8008bbc:	4770      	bx	lr

08008bbe <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b082      	sub	sp, #8
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	6852      	ldr	r2, [r2, #4]
 8008bda:	b2d2      	uxtb	r2, r2
 8008bdc:	4611      	mov	r1, r2
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	4798      	blx	r3

  return USBD_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c02:	2b40      	cmp	r3, #64	; 0x40
 8008c04:	d005      	beq.n	8008c12 <USBD_StdDevReq+0x26>
 8008c06:	2b40      	cmp	r3, #64	; 0x40
 8008c08:	d84f      	bhi.n	8008caa <USBD_StdDevReq+0xbe>
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d009      	beq.n	8008c22 <USBD_StdDevReq+0x36>
 8008c0e:	2b20      	cmp	r3, #32
 8008c10:	d14b      	bne.n	8008caa <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	6839      	ldr	r1, [r7, #0]
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	4798      	blx	r3
      break;
 8008c20:	e048      	b.n	8008cb4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	785b      	ldrb	r3, [r3, #1]
 8008c26:	2b09      	cmp	r3, #9
 8008c28:	d839      	bhi.n	8008c9e <USBD_StdDevReq+0xb2>
 8008c2a:	a201      	add	r2, pc, #4	; (adr r2, 8008c30 <USBD_StdDevReq+0x44>)
 8008c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c30:	08008c81 	.word	0x08008c81
 8008c34:	08008c95 	.word	0x08008c95
 8008c38:	08008c9f 	.word	0x08008c9f
 8008c3c:	08008c8b 	.word	0x08008c8b
 8008c40:	08008c9f 	.word	0x08008c9f
 8008c44:	08008c63 	.word	0x08008c63
 8008c48:	08008c59 	.word	0x08008c59
 8008c4c:	08008c9f 	.word	0x08008c9f
 8008c50:	08008c77 	.word	0x08008c77
 8008c54:	08008c6d 	.word	0x08008c6d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c58:	6839      	ldr	r1, [r7, #0]
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f9dc 	bl	8009018 <USBD_GetDescriptor>
          break;
 8008c60:	e022      	b.n	8008ca8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008c62:	6839      	ldr	r1, [r7, #0]
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fb3f 	bl	80092e8 <USBD_SetAddress>
          break;
 8008c6a:	e01d      	b.n	8008ca8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fb7e 	bl	8009370 <USBD_SetConfig>
          break;
 8008c74:	e018      	b.n	8008ca8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008c76:	6839      	ldr	r1, [r7, #0]
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 fc07 	bl	800948c <USBD_GetConfig>
          break;
 8008c7e:	e013      	b.n	8008ca8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fc37 	bl	80094f6 <USBD_GetStatus>
          break;
 8008c88:	e00e      	b.n	8008ca8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008c8a:	6839      	ldr	r1, [r7, #0]
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 fc65 	bl	800955c <USBD_SetFeature>
          break;
 8008c92:	e009      	b.n	8008ca8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008c94:	6839      	ldr	r1, [r7, #0]
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fc74 	bl	8009584 <USBD_ClrFeature>
          break;
 8008c9c:	e004      	b.n	8008ca8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008c9e:	6839      	ldr	r1, [r7, #0]
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 fccc 	bl	800963e <USBD_CtlError>
          break;
 8008ca6:	bf00      	nop
      }
      break;
 8008ca8:	e004      	b.n	8008cb4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fcc6 	bl	800963e <USBD_CtlError>
      break;
 8008cb2:	bf00      	nop
  }

  return ret;
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop

08008cc0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cd6:	2b40      	cmp	r3, #64	; 0x40
 8008cd8:	d005      	beq.n	8008ce6 <USBD_StdItfReq+0x26>
 8008cda:	2b40      	cmp	r3, #64	; 0x40
 8008cdc:	d82e      	bhi.n	8008d3c <USBD_StdItfReq+0x7c>
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d001      	beq.n	8008ce6 <USBD_StdItfReq+0x26>
 8008ce2:	2b20      	cmp	r3, #32
 8008ce4:	d12a      	bne.n	8008d3c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cec:	3b01      	subs	r3, #1
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	d81d      	bhi.n	8008d2e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	889b      	ldrh	r3, [r3, #4]
 8008cf6:	b2db      	uxtb	r3, r3
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d813      	bhi.n	8008d24 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	6839      	ldr	r1, [r7, #0]
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	4798      	blx	r3
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	88db      	ldrh	r3, [r3, #6]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d110      	bne.n	8008d38 <USBD_StdItfReq+0x78>
 8008d16:	7bfb      	ldrb	r3, [r7, #15]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10d      	bne.n	8008d38 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 fd56 	bl	80097ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008d22:	e009      	b.n	8008d38 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008d24:	6839      	ldr	r1, [r7, #0]
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 fc89 	bl	800963e <USBD_CtlError>
          break;
 8008d2c:	e004      	b.n	8008d38 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008d2e:	6839      	ldr	r1, [r7, #0]
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fc84 	bl	800963e <USBD_CtlError>
          break;
 8008d36:	e000      	b.n	8008d3a <USBD_StdItfReq+0x7a>
          break;
 8008d38:	bf00      	nop
      }
      break;
 8008d3a:	e004      	b.n	8008d46 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008d3c:	6839      	ldr	r1, [r7, #0]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fc7d 	bl	800963e <USBD_CtlError>
      break;
 8008d44:	bf00      	nop
  }

  return USBD_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	889b      	ldrh	r3, [r3, #4]
 8008d62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d6c:	2b40      	cmp	r3, #64	; 0x40
 8008d6e:	d007      	beq.n	8008d80 <USBD_StdEPReq+0x30>
 8008d70:	2b40      	cmp	r3, #64	; 0x40
 8008d72:	f200 8146 	bhi.w	8009002 <USBD_StdEPReq+0x2b2>
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00a      	beq.n	8008d90 <USBD_StdEPReq+0x40>
 8008d7a:	2b20      	cmp	r3, #32
 8008d7c:	f040 8141 	bne.w	8009002 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	6839      	ldr	r1, [r7, #0]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	4798      	blx	r3
      break;
 8008d8e:	e13d      	b.n	800900c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d98:	2b20      	cmp	r3, #32
 8008d9a:	d10a      	bne.n	8008db2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	6839      	ldr	r1, [r7, #0]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	4798      	blx	r3
 8008daa:	4603      	mov	r3, r0
 8008dac:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008dae:	7bfb      	ldrb	r3, [r7, #15]
 8008db0:	e12d      	b.n	800900e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	785b      	ldrb	r3, [r3, #1]
 8008db6:	2b03      	cmp	r3, #3
 8008db8:	d007      	beq.n	8008dca <USBD_StdEPReq+0x7a>
 8008dba:	2b03      	cmp	r3, #3
 8008dbc:	f300 811b 	bgt.w	8008ff6 <USBD_StdEPReq+0x2a6>
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d072      	beq.n	8008eaa <USBD_StdEPReq+0x15a>
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d03a      	beq.n	8008e3e <USBD_StdEPReq+0xee>
 8008dc8:	e115      	b.n	8008ff6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	d002      	beq.n	8008dda <USBD_StdEPReq+0x8a>
 8008dd4:	2b03      	cmp	r3, #3
 8008dd6:	d015      	beq.n	8008e04 <USBD_StdEPReq+0xb4>
 8008dd8:	e02b      	b.n	8008e32 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008dda:	7bbb      	ldrb	r3, [r7, #14]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00c      	beq.n	8008dfa <USBD_StdEPReq+0xaa>
 8008de0:	7bbb      	ldrb	r3, [r7, #14]
 8008de2:	2b80      	cmp	r3, #128	; 0x80
 8008de4:	d009      	beq.n	8008dfa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008de6:	7bbb      	ldrb	r3, [r7, #14]
 8008de8:	4619      	mov	r1, r3
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f001 f906 	bl	8009ffc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008df0:	2180      	movs	r1, #128	; 0x80
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f001 f902 	bl	8009ffc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008df8:	e020      	b.n	8008e3c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008dfa:	6839      	ldr	r1, [r7, #0]
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 fc1e 	bl	800963e <USBD_CtlError>
              break;
 8008e02:	e01b      	b.n	8008e3c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	885b      	ldrh	r3, [r3, #2]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d10e      	bne.n	8008e2a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008e0c:	7bbb      	ldrb	r3, [r7, #14]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00b      	beq.n	8008e2a <USBD_StdEPReq+0xda>
 8008e12:	7bbb      	ldrb	r3, [r7, #14]
 8008e14:	2b80      	cmp	r3, #128	; 0x80
 8008e16:	d008      	beq.n	8008e2a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	88db      	ldrh	r3, [r3, #6]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d104      	bne.n	8008e2a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008e20:	7bbb      	ldrb	r3, [r7, #14]
 8008e22:	4619      	mov	r1, r3
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f001 f8e9 	bl	8009ffc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fccf 	bl	80097ce <USBD_CtlSendStatus>

              break;
 8008e30:	e004      	b.n	8008e3c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fc02 	bl	800963e <USBD_CtlError>
              break;
 8008e3a:	bf00      	nop
          }
          break;
 8008e3c:	e0e0      	b.n	8009000 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d002      	beq.n	8008e4e <USBD_StdEPReq+0xfe>
 8008e48:	2b03      	cmp	r3, #3
 8008e4a:	d015      	beq.n	8008e78 <USBD_StdEPReq+0x128>
 8008e4c:	e026      	b.n	8008e9c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e4e:	7bbb      	ldrb	r3, [r7, #14]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00c      	beq.n	8008e6e <USBD_StdEPReq+0x11e>
 8008e54:	7bbb      	ldrb	r3, [r7, #14]
 8008e56:	2b80      	cmp	r3, #128	; 0x80
 8008e58:	d009      	beq.n	8008e6e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008e5a:	7bbb      	ldrb	r3, [r7, #14]
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f001 f8cc 	bl	8009ffc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008e64:	2180      	movs	r1, #128	; 0x80
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f001 f8c8 	bl	8009ffc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e6c:	e01c      	b.n	8008ea8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008e6e:	6839      	ldr	r1, [r7, #0]
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fbe4 	bl	800963e <USBD_CtlError>
              break;
 8008e76:	e017      	b.n	8008ea8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	885b      	ldrh	r3, [r3, #2]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d112      	bne.n	8008ea6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008e80:	7bbb      	ldrb	r3, [r7, #14]
 8008e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d004      	beq.n	8008e94 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008e8a:	7bbb      	ldrb	r3, [r7, #14]
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f001 f8d3 	bl	800a03a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 fc9a 	bl	80097ce <USBD_CtlSendStatus>
              }
              break;
 8008e9a:	e004      	b.n	8008ea6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fbcd 	bl	800963e <USBD_CtlError>
              break;
 8008ea4:	e000      	b.n	8008ea8 <USBD_StdEPReq+0x158>
              break;
 8008ea6:	bf00      	nop
          }
          break;
 8008ea8:	e0aa      	b.n	8009000 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d002      	beq.n	8008eba <USBD_StdEPReq+0x16a>
 8008eb4:	2b03      	cmp	r3, #3
 8008eb6:	d032      	beq.n	8008f1e <USBD_StdEPReq+0x1ce>
 8008eb8:	e097      	b.n	8008fea <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008eba:	7bbb      	ldrb	r3, [r7, #14]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d007      	beq.n	8008ed0 <USBD_StdEPReq+0x180>
 8008ec0:	7bbb      	ldrb	r3, [r7, #14]
 8008ec2:	2b80      	cmp	r3, #128	; 0x80
 8008ec4:	d004      	beq.n	8008ed0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008ec6:	6839      	ldr	r1, [r7, #0]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fbb8 	bl	800963e <USBD_CtlError>
                break;
 8008ece:	e091      	b.n	8008ff4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ed0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	da0b      	bge.n	8008ef0 <USBD_StdEPReq+0x1a0>
 8008ed8:	7bbb      	ldrb	r3, [r7, #14]
 8008eda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ede:	4613      	mov	r3, r2
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	4413      	add	r3, r2
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	3310      	adds	r3, #16
 8008ee8:	687a      	ldr	r2, [r7, #4]
 8008eea:	4413      	add	r3, r2
 8008eec:	3304      	adds	r3, #4
 8008eee:	e00b      	b.n	8008f08 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ef0:	7bbb      	ldrb	r3, [r7, #14]
 8008ef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	4413      	add	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	4413      	add	r3, r2
 8008f06:	3304      	adds	r3, #4
 8008f08:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	2202      	movs	r2, #2
 8008f14:	4619      	mov	r1, r3
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fbfb 	bl	8009712 <USBD_CtlSendData>
              break;
 8008f1c:	e06a      	b.n	8008ff4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008f1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	da11      	bge.n	8008f4a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f26:	7bbb      	ldrb	r3, [r7, #14]
 8008f28:	f003 020f 	and.w	r2, r3, #15
 8008f2c:	6879      	ldr	r1, [r7, #4]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4413      	add	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	440b      	add	r3, r1
 8008f38:	3318      	adds	r3, #24
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d117      	bne.n	8008f70 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fb7b 	bl	800963e <USBD_CtlError>
                  break;
 8008f48:	e054      	b.n	8008ff4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f4a:	7bbb      	ldrb	r3, [r7, #14]
 8008f4c:	f003 020f 	and.w	r2, r3, #15
 8008f50:	6879      	ldr	r1, [r7, #4]
 8008f52:	4613      	mov	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	4413      	add	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	440b      	add	r3, r1
 8008f5c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d104      	bne.n	8008f70 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 fb68 	bl	800963e <USBD_CtlError>
                  break;
 8008f6e:	e041      	b.n	8008ff4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	da0b      	bge.n	8008f90 <USBD_StdEPReq+0x240>
 8008f78:	7bbb      	ldrb	r3, [r7, #14]
 8008f7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f7e:	4613      	mov	r3, r2
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4413      	add	r3, r2
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	3310      	adds	r3, #16
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	3304      	adds	r3, #4
 8008f8e:	e00b      	b.n	8008fa8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f90:	7bbb      	ldrb	r3, [r7, #14]
 8008f92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f96:	4613      	mov	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	3304      	adds	r3, #4
 8008fa8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008faa:	7bbb      	ldrb	r3, [r7, #14]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d002      	beq.n	8008fb6 <USBD_StdEPReq+0x266>
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
 8008fb2:	2b80      	cmp	r3, #128	; 0x80
 8008fb4:	d103      	bne.n	8008fbe <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	601a      	str	r2, [r3, #0]
 8008fbc:	e00e      	b.n	8008fdc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008fbe:	7bbb      	ldrb	r3, [r7, #14]
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f001 f858 	bl	800a078 <USBD_LL_IsStallEP>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d003      	beq.n	8008fd6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	601a      	str	r2, [r3, #0]
 8008fd4:	e002      	b.n	8008fdc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	2202      	movs	r2, #2
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fb95 	bl	8009712 <USBD_CtlSendData>
              break;
 8008fe8:	e004      	b.n	8008ff4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008fea:	6839      	ldr	r1, [r7, #0]
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 fb26 	bl	800963e <USBD_CtlError>
              break;
 8008ff2:	bf00      	nop
          }
          break;
 8008ff4:	e004      	b.n	8009000 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008ff6:	6839      	ldr	r1, [r7, #0]
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 fb20 	bl	800963e <USBD_CtlError>
          break;
 8008ffe:	bf00      	nop
      }
      break;
 8009000:	e004      	b.n	800900c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009002:	6839      	ldr	r1, [r7, #0]
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 fb1a 	bl	800963e <USBD_CtlError>
      break;
 800900a:	bf00      	nop
  }

  return ret;
 800900c:	7bfb      	ldrb	r3, [r7, #15]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
	...

08009018 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009022:	2300      	movs	r3, #0
 8009024:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009026:	2300      	movs	r3, #0
 8009028:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800902a:	2300      	movs	r3, #0
 800902c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	885b      	ldrh	r3, [r3, #2]
 8009032:	0a1b      	lsrs	r3, r3, #8
 8009034:	b29b      	uxth	r3, r3
 8009036:	3b01      	subs	r3, #1
 8009038:	2b06      	cmp	r3, #6
 800903a:	f200 8128 	bhi.w	800928e <USBD_GetDescriptor+0x276>
 800903e:	a201      	add	r2, pc, #4	; (adr r2, 8009044 <USBD_GetDescriptor+0x2c>)
 8009040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009044:	08009061 	.word	0x08009061
 8009048:	08009079 	.word	0x08009079
 800904c:	080090b9 	.word	0x080090b9
 8009050:	0800928f 	.word	0x0800928f
 8009054:	0800928f 	.word	0x0800928f
 8009058:	0800922f 	.word	0x0800922f
 800905c:	0800925b 	.word	0x0800925b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	7c12      	ldrb	r2, [r2, #16]
 800906c:	f107 0108 	add.w	r1, r7, #8
 8009070:	4610      	mov	r0, r2
 8009072:	4798      	blx	r3
 8009074:	60f8      	str	r0, [r7, #12]
      break;
 8009076:	e112      	b.n	800929e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	7c1b      	ldrb	r3, [r3, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d10d      	bne.n	800909c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009088:	f107 0208 	add.w	r2, r7, #8
 800908c:	4610      	mov	r0, r2
 800908e:	4798      	blx	r3
 8009090:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	3301      	adds	r3, #1
 8009096:	2202      	movs	r2, #2
 8009098:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800909a:	e100      	b.n	800929e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a4:	f107 0208 	add.w	r2, r7, #8
 80090a8:	4610      	mov	r0, r2
 80090aa:	4798      	blx	r3
 80090ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	3301      	adds	r3, #1
 80090b2:	2202      	movs	r2, #2
 80090b4:	701a      	strb	r2, [r3, #0]
      break;
 80090b6:	e0f2      	b.n	800929e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	885b      	ldrh	r3, [r3, #2]
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	2b05      	cmp	r3, #5
 80090c0:	f200 80ac 	bhi.w	800921c <USBD_GetDescriptor+0x204>
 80090c4:	a201      	add	r2, pc, #4	; (adr r2, 80090cc <USBD_GetDescriptor+0xb4>)
 80090c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ca:	bf00      	nop
 80090cc:	080090e5 	.word	0x080090e5
 80090d0:	08009119 	.word	0x08009119
 80090d4:	0800914d 	.word	0x0800914d
 80090d8:	08009181 	.word	0x08009181
 80090dc:	080091b5 	.word	0x080091b5
 80090e0:	080091e9 	.word	0x080091e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d00b      	beq.n	8009108 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	687a      	ldr	r2, [r7, #4]
 80090fa:	7c12      	ldrb	r2, [r2, #16]
 80090fc:	f107 0108 	add.w	r1, r7, #8
 8009100:	4610      	mov	r0, r2
 8009102:	4798      	blx	r3
 8009104:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009106:	e091      	b.n	800922c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009108:	6839      	ldr	r1, [r7, #0]
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fa97 	bl	800963e <USBD_CtlError>
            err++;
 8009110:	7afb      	ldrb	r3, [r7, #11]
 8009112:	3301      	adds	r3, #1
 8009114:	72fb      	strb	r3, [r7, #11]
          break;
 8009116:	e089      	b.n	800922c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00b      	beq.n	800913c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	7c12      	ldrb	r2, [r2, #16]
 8009130:	f107 0108 	add.w	r1, r7, #8
 8009134:	4610      	mov	r0, r2
 8009136:	4798      	blx	r3
 8009138:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800913a:	e077      	b.n	800922c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fa7d 	bl	800963e <USBD_CtlError>
            err++;
 8009144:	7afb      	ldrb	r3, [r7, #11]
 8009146:	3301      	adds	r3, #1
 8009148:	72fb      	strb	r3, [r7, #11]
          break;
 800914a:	e06f      	b.n	800922c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00b      	beq.n	8009170 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	7c12      	ldrb	r2, [r2, #16]
 8009164:	f107 0108 	add.w	r1, r7, #8
 8009168:	4610      	mov	r0, r2
 800916a:	4798      	blx	r3
 800916c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800916e:	e05d      	b.n	800922c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 fa63 	bl	800963e <USBD_CtlError>
            err++;
 8009178:	7afb      	ldrb	r3, [r7, #11]
 800917a:	3301      	adds	r3, #1
 800917c:	72fb      	strb	r3, [r7, #11]
          break;
 800917e:	e055      	b.n	800922c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009186:	691b      	ldr	r3, [r3, #16]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00b      	beq.n	80091a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	7c12      	ldrb	r2, [r2, #16]
 8009198:	f107 0108 	add.w	r1, r7, #8
 800919c:	4610      	mov	r0, r2
 800919e:	4798      	blx	r3
 80091a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091a2:	e043      	b.n	800922c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fa49 	bl	800963e <USBD_CtlError>
            err++;
 80091ac:	7afb      	ldrb	r3, [r7, #11]
 80091ae:	3301      	adds	r3, #1
 80091b0:	72fb      	strb	r3, [r7, #11]
          break;
 80091b2:	e03b      	b.n	800922c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091ba:	695b      	ldr	r3, [r3, #20]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00b      	beq.n	80091d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091c6:	695b      	ldr	r3, [r3, #20]
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	7c12      	ldrb	r2, [r2, #16]
 80091cc:	f107 0108 	add.w	r1, r7, #8
 80091d0:	4610      	mov	r0, r2
 80091d2:	4798      	blx	r3
 80091d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091d6:	e029      	b.n	800922c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091d8:	6839      	ldr	r1, [r7, #0]
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 fa2f 	bl	800963e <USBD_CtlError>
            err++;
 80091e0:	7afb      	ldrb	r3, [r7, #11]
 80091e2:	3301      	adds	r3, #1
 80091e4:	72fb      	strb	r3, [r7, #11]
          break;
 80091e6:	e021      	b.n	800922c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091ee:	699b      	ldr	r3, [r3, #24]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00b      	beq.n	800920c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091fa:	699b      	ldr	r3, [r3, #24]
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	7c12      	ldrb	r2, [r2, #16]
 8009200:	f107 0108 	add.w	r1, r7, #8
 8009204:	4610      	mov	r0, r2
 8009206:	4798      	blx	r3
 8009208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800920a:	e00f      	b.n	800922c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800920c:	6839      	ldr	r1, [r7, #0]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fa15 	bl	800963e <USBD_CtlError>
            err++;
 8009214:	7afb      	ldrb	r3, [r7, #11]
 8009216:	3301      	adds	r3, #1
 8009218:	72fb      	strb	r3, [r7, #11]
          break;
 800921a:	e007      	b.n	800922c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800921c:	6839      	ldr	r1, [r7, #0]
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 fa0d 	bl	800963e <USBD_CtlError>
          err++;
 8009224:	7afb      	ldrb	r3, [r7, #11]
 8009226:	3301      	adds	r3, #1
 8009228:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800922a:	e038      	b.n	800929e <USBD_GetDescriptor+0x286>
 800922c:	e037      	b.n	800929e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	7c1b      	ldrb	r3, [r3, #16]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d109      	bne.n	800924a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800923c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800923e:	f107 0208 	add.w	r2, r7, #8
 8009242:	4610      	mov	r0, r2
 8009244:	4798      	blx	r3
 8009246:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009248:	e029      	b.n	800929e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800924a:	6839      	ldr	r1, [r7, #0]
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 f9f6 	bl	800963e <USBD_CtlError>
        err++;
 8009252:	7afb      	ldrb	r3, [r7, #11]
 8009254:	3301      	adds	r3, #1
 8009256:	72fb      	strb	r3, [r7, #11]
      break;
 8009258:	e021      	b.n	800929e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	7c1b      	ldrb	r3, [r3, #16]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10d      	bne.n	800927e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800926a:	f107 0208 	add.w	r2, r7, #8
 800926e:	4610      	mov	r0, r2
 8009270:	4798      	blx	r3
 8009272:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	3301      	adds	r3, #1
 8009278:	2207      	movs	r2, #7
 800927a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800927c:	e00f      	b.n	800929e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800927e:	6839      	ldr	r1, [r7, #0]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 f9dc 	bl	800963e <USBD_CtlError>
        err++;
 8009286:	7afb      	ldrb	r3, [r7, #11]
 8009288:	3301      	adds	r3, #1
 800928a:	72fb      	strb	r3, [r7, #11]
      break;
 800928c:	e007      	b.n	800929e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800928e:	6839      	ldr	r1, [r7, #0]
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 f9d4 	bl	800963e <USBD_CtlError>
      err++;
 8009296:	7afb      	ldrb	r3, [r7, #11]
 8009298:	3301      	adds	r3, #1
 800929a:	72fb      	strb	r3, [r7, #11]
      break;
 800929c:	bf00      	nop
  }

  if (err != 0U)
 800929e:	7afb      	ldrb	r3, [r7, #11]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d11c      	bne.n	80092de <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80092a4:	893b      	ldrh	r3, [r7, #8]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d011      	beq.n	80092ce <USBD_GetDescriptor+0x2b6>
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	88db      	ldrh	r3, [r3, #6]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00d      	beq.n	80092ce <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	88da      	ldrh	r2, [r3, #6]
 80092b6:	893b      	ldrh	r3, [r7, #8]
 80092b8:	4293      	cmp	r3, r2
 80092ba:	bf28      	it	cs
 80092bc:	4613      	movcs	r3, r2
 80092be:	b29b      	uxth	r3, r3
 80092c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80092c2:	893b      	ldrh	r3, [r7, #8]
 80092c4:	461a      	mov	r2, r3
 80092c6:	68f9      	ldr	r1, [r7, #12]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 fa22 	bl	8009712 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	88db      	ldrh	r3, [r3, #6]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d104      	bne.n	80092e0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fa79 	bl	80097ce <USBD_CtlSendStatus>
 80092dc:	e000      	b.n	80092e0 <USBD_GetDescriptor+0x2c8>
    return;
 80092de:	bf00      	nop
    }
  }
}
 80092e0:	3710      	adds	r7, #16
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop

080092e8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	889b      	ldrh	r3, [r3, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d130      	bne.n	800935c <USBD_SetAddress+0x74>
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	88db      	ldrh	r3, [r3, #6]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d12c      	bne.n	800935c <USBD_SetAddress+0x74>
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	885b      	ldrh	r3, [r3, #2]
 8009306:	2b7f      	cmp	r3, #127	; 0x7f
 8009308:	d828      	bhi.n	800935c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	885b      	ldrh	r3, [r3, #2]
 800930e:	b2db      	uxtb	r3, r3
 8009310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009314:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800931c:	2b03      	cmp	r3, #3
 800931e:	d104      	bne.n	800932a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009320:	6839      	ldr	r1, [r7, #0]
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 f98b 	bl	800963e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009328:	e01d      	b.n	8009366 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	7bfa      	ldrb	r2, [r7, #15]
 800932e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009332:	7bfb      	ldrb	r3, [r7, #15]
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fec9 	bl	800a0ce <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fa46 	bl	80097ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009342:	7bfb      	ldrb	r3, [r7, #15]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d004      	beq.n	8009352 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2202      	movs	r2, #2
 800934c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009350:	e009      	b.n	8009366 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800935a:	e004      	b.n	8009366 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800935c:	6839      	ldr	r1, [r7, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f96d 	bl	800963e <USBD_CtlError>
  }
}
 8009364:	bf00      	nop
 8009366:	bf00      	nop
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
	...

08009370 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	885b      	ldrh	r3, [r3, #2]
 800937e:	b2da      	uxtb	r2, r3
 8009380:	4b41      	ldr	r3, [pc, #260]	; (8009488 <USBD_SetConfig+0x118>)
 8009382:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009384:	4b40      	ldr	r3, [pc, #256]	; (8009488 <USBD_SetConfig+0x118>)
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d904      	bls.n	8009396 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 f955 	bl	800963e <USBD_CtlError>
 8009394:	e075      	b.n	8009482 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800939c:	2b02      	cmp	r3, #2
 800939e:	d002      	beq.n	80093a6 <USBD_SetConfig+0x36>
 80093a0:	2b03      	cmp	r3, #3
 80093a2:	d023      	beq.n	80093ec <USBD_SetConfig+0x7c>
 80093a4:	e062      	b.n	800946c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80093a6:	4b38      	ldr	r3, [pc, #224]	; (8009488 <USBD_SetConfig+0x118>)
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d01a      	beq.n	80093e4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80093ae:	4b36      	ldr	r3, [pc, #216]	; (8009488 <USBD_SetConfig+0x118>)
 80093b0:	781b      	ldrb	r3, [r3, #0]
 80093b2:	461a      	mov	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2203      	movs	r2, #3
 80093bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80093c0:	4b31      	ldr	r3, [pc, #196]	; (8009488 <USBD_SetConfig+0x118>)
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	4619      	mov	r1, r3
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f7ff f9af 	bl	800872a <USBD_SetClassConfig>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d104      	bne.n	80093dc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80093d2:	6839      	ldr	r1, [r7, #0]
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f932 	bl	800963e <USBD_CtlError>
            return;
 80093da:	e052      	b.n	8009482 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f9f6 	bl	80097ce <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80093e2:	e04e      	b.n	8009482 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 f9f2 	bl	80097ce <USBD_CtlSendStatus>
        break;
 80093ea:	e04a      	b.n	8009482 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80093ec:	4b26      	ldr	r3, [pc, #152]	; (8009488 <USBD_SetConfig+0x118>)
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d112      	bne.n	800941a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2202      	movs	r2, #2
 80093f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80093fc:	4b22      	ldr	r3, [pc, #136]	; (8009488 <USBD_SetConfig+0x118>)
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	461a      	mov	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009406:	4b20      	ldr	r3, [pc, #128]	; (8009488 <USBD_SetConfig+0x118>)
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	4619      	mov	r1, r3
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f7ff f9ab 	bl	8008768 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f9db 	bl	80097ce <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009418:	e033      	b.n	8009482 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800941a:	4b1b      	ldr	r3, [pc, #108]	; (8009488 <USBD_SetConfig+0x118>)
 800941c:	781b      	ldrb	r3, [r3, #0]
 800941e:	461a      	mov	r2, r3
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	429a      	cmp	r2, r3
 8009426:	d01d      	beq.n	8009464 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	b2db      	uxtb	r3, r3
 800942e:	4619      	mov	r1, r3
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f7ff f999 	bl	8008768 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009436:	4b14      	ldr	r3, [pc, #80]	; (8009488 <USBD_SetConfig+0x118>)
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	461a      	mov	r2, r3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009440:	4b11      	ldr	r3, [pc, #68]	; (8009488 <USBD_SetConfig+0x118>)
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	4619      	mov	r1, r3
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f7ff f96f 	bl	800872a <USBD_SetClassConfig>
 800944c:	4603      	mov	r3, r0
 800944e:	2b02      	cmp	r3, #2
 8009450:	d104      	bne.n	800945c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 f8f2 	bl	800963e <USBD_CtlError>
            return;
 800945a:	e012      	b.n	8009482 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f9b6 	bl	80097ce <USBD_CtlSendStatus>
        break;
 8009462:	e00e      	b.n	8009482 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f9b2 	bl	80097ce <USBD_CtlSendStatus>
        break;
 800946a:	e00a      	b.n	8009482 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800946c:	6839      	ldr	r1, [r7, #0]
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f8e5 	bl	800963e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009474:	4b04      	ldr	r3, [pc, #16]	; (8009488 <USBD_SetConfig+0x118>)
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	4619      	mov	r1, r3
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f7ff f974 	bl	8008768 <USBD_ClrClassConfig>
        break;
 8009480:	bf00      	nop
    }
  }
}
 8009482:	3708      	adds	r7, #8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	200005f8 	.word	0x200005f8

0800948c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	88db      	ldrh	r3, [r3, #6]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d004      	beq.n	80094a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800949e:	6839      	ldr	r1, [r7, #0]
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f000 f8cc 	bl	800963e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80094a6:	e022      	b.n	80094ee <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	dc02      	bgt.n	80094b8 <USBD_GetConfig+0x2c>
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	dc03      	bgt.n	80094be <USBD_GetConfig+0x32>
 80094b6:	e015      	b.n	80094e4 <USBD_GetConfig+0x58>
 80094b8:	2b03      	cmp	r3, #3
 80094ba:	d00b      	beq.n	80094d4 <USBD_GetConfig+0x48>
 80094bc:	e012      	b.n	80094e4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	3308      	adds	r3, #8
 80094c8:	2201      	movs	r2, #1
 80094ca:	4619      	mov	r1, r3
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 f920 	bl	8009712 <USBD_CtlSendData>
        break;
 80094d2:	e00c      	b.n	80094ee <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	3304      	adds	r3, #4
 80094d8:	2201      	movs	r2, #1
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f918 	bl	8009712 <USBD_CtlSendData>
        break;
 80094e2:	e004      	b.n	80094ee <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80094e4:	6839      	ldr	r1, [r7, #0]
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f8a9 	bl	800963e <USBD_CtlError>
        break;
 80094ec:	bf00      	nop
}
 80094ee:	bf00      	nop
 80094f0:	3708      	adds	r7, #8
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094f6:	b580      	push	{r7, lr}
 80094f8:	b082      	sub	sp, #8
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
 80094fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009506:	3b01      	subs	r3, #1
 8009508:	2b02      	cmp	r3, #2
 800950a:	d81e      	bhi.n	800954a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	88db      	ldrh	r3, [r3, #6]
 8009510:	2b02      	cmp	r3, #2
 8009512:	d004      	beq.n	800951e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009514:	6839      	ldr	r1, [r7, #0]
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f891 	bl	800963e <USBD_CtlError>
        break;
 800951c:	e01a      	b.n	8009554 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2201      	movs	r2, #1
 8009522:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800952a:	2b00      	cmp	r3, #0
 800952c:	d005      	beq.n	800953a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	68db      	ldr	r3, [r3, #12]
 8009532:	f043 0202 	orr.w	r2, r3, #2
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	330c      	adds	r3, #12
 800953e:	2202      	movs	r2, #2
 8009540:	4619      	mov	r1, r3
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f8e5 	bl	8009712 <USBD_CtlSendData>
      break;
 8009548:	e004      	b.n	8009554 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f876 	bl	800963e <USBD_CtlError>
      break;
 8009552:	bf00      	nop
  }
}
 8009554:	bf00      	nop
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	885b      	ldrh	r3, [r3, #2]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d106      	bne.n	800957c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2201      	movs	r2, #1
 8009572:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 f929 	bl	80097ce <USBD_CtlSendStatus>
  }
}
 800957c:	bf00      	nop
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009594:	3b01      	subs	r3, #1
 8009596:	2b02      	cmp	r3, #2
 8009598:	d80b      	bhi.n	80095b2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	885b      	ldrh	r3, [r3, #2]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d10c      	bne.n	80095bc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f90f 	bl	80097ce <USBD_CtlSendStatus>
      }
      break;
 80095b0:	e004      	b.n	80095bc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80095b2:	6839      	ldr	r1, [r7, #0]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f842 	bl	800963e <USBD_CtlError>
      break;
 80095ba:	e000      	b.n	80095be <USBD_ClrFeature+0x3a>
      break;
 80095bc:	bf00      	nop
  }
}
 80095be:	bf00      	nop
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80095c6:	b480      	push	{r7}
 80095c8:	b083      	sub	sp, #12
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	781a      	ldrb	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	785a      	ldrb	r2, [r3, #1]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	3302      	adds	r3, #2
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	3303      	adds	r3, #3
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	021b      	lsls	r3, r3, #8
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	4413      	add	r3, r2
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	3304      	adds	r3, #4
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	b29a      	uxth	r2, r3
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	3305      	adds	r3, #5
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	b29b      	uxth	r3, r3
 800960c:	021b      	lsls	r3, r3, #8
 800960e:	b29b      	uxth	r3, r3
 8009610:	4413      	add	r3, r2
 8009612:	b29a      	uxth	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	3306      	adds	r3, #6
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	b29a      	uxth	r2, r3
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	3307      	adds	r3, #7
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	b29b      	uxth	r3, r3
 8009628:	021b      	lsls	r3, r3, #8
 800962a:	b29b      	uxth	r3, r3
 800962c:	4413      	add	r3, r2
 800962e:	b29a      	uxth	r2, r3
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	80da      	strh	r2, [r3, #6]

}
 8009634:	bf00      	nop
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	bc80      	pop	{r7}
 800963c:	4770      	bx	lr

0800963e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b082      	sub	sp, #8
 8009642:	af00      	add	r7, sp, #0
 8009644:	6078      	str	r0, [r7, #4]
 8009646:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009648:	2180      	movs	r1, #128	; 0x80
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fcd6 	bl	8009ffc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009650:	2100      	movs	r1, #0
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 fcd2 	bl	8009ffc <USBD_LL_StallEP>
}
 8009658:	bf00      	nop
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b086      	sub	sp, #24
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800966c:	2300      	movs	r3, #0
 800966e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d032      	beq.n	80096dc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f000 f834 	bl	80096e4 <USBD_GetLen>
 800967c:	4603      	mov	r3, r0
 800967e:	3301      	adds	r3, #1
 8009680:	b29b      	uxth	r3, r3
 8009682:	005b      	lsls	r3, r3, #1
 8009684:	b29a      	uxth	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800968a:	7dfb      	ldrb	r3, [r7, #23]
 800968c:	1c5a      	adds	r2, r3, #1
 800968e:	75fa      	strb	r2, [r7, #23]
 8009690:	461a      	mov	r2, r3
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	4413      	add	r3, r2
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	7812      	ldrb	r2, [r2, #0]
 800969a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800969c:	7dfb      	ldrb	r3, [r7, #23]
 800969e:	1c5a      	adds	r2, r3, #1
 80096a0:	75fa      	strb	r2, [r7, #23]
 80096a2:	461a      	mov	r2, r3
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	4413      	add	r3, r2
 80096a8:	2203      	movs	r2, #3
 80096aa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80096ac:	e012      	b.n	80096d4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	1c5a      	adds	r2, r3, #1
 80096b2:	60fa      	str	r2, [r7, #12]
 80096b4:	7dfa      	ldrb	r2, [r7, #23]
 80096b6:	1c51      	adds	r1, r2, #1
 80096b8:	75f9      	strb	r1, [r7, #23]
 80096ba:	4611      	mov	r1, r2
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	440a      	add	r2, r1
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80096c4:	7dfb      	ldrb	r3, [r7, #23]
 80096c6:	1c5a      	adds	r2, r3, #1
 80096c8:	75fa      	strb	r2, [r7, #23]
 80096ca:	461a      	mov	r2, r3
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	4413      	add	r3, r2
 80096d0:	2200      	movs	r2, #0
 80096d2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1e8      	bne.n	80096ae <USBD_GetString+0x4e>
    }
  }
}
 80096dc:	bf00      	nop
 80096de:	3718      	adds	r7, #24
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80096ec:	2300      	movs	r3, #0
 80096ee:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80096f0:	e005      	b.n	80096fe <USBD_GetLen+0x1a>
  {
    len++;
 80096f2:	7bfb      	ldrb	r3, [r7, #15]
 80096f4:	3301      	adds	r3, #1
 80096f6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	3301      	adds	r3, #1
 80096fc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1f5      	bne.n	80096f2 <USBD_GetLen+0xe>
  }

  return len;
 8009706:	7bfb      	ldrb	r3, [r7, #15]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	bc80      	pop	{r7}
 8009710:	4770      	bx	lr

08009712 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b084      	sub	sp, #16
 8009716:	af00      	add	r7, sp, #0
 8009718:	60f8      	str	r0, [r7, #12]
 800971a:	60b9      	str	r1, [r7, #8]
 800971c:	4613      	mov	r3, r2
 800971e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2202      	movs	r2, #2
 8009724:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009728:	88fa      	ldrh	r2, [r7, #6]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800972e:	88fa      	ldrh	r2, [r7, #6]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009734:	88fb      	ldrh	r3, [r7, #6]
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	2100      	movs	r1, #0
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	f000 fce6 	bl	800a10c <USBD_LL_Transmit>

  return USBD_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b084      	sub	sp, #16
 800974e:	af00      	add	r7, sp, #0
 8009750:	60f8      	str	r0, [r7, #12]
 8009752:	60b9      	str	r1, [r7, #8]
 8009754:	4613      	mov	r3, r2
 8009756:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009758:	88fb      	ldrh	r3, [r7, #6]
 800975a:	68ba      	ldr	r2, [r7, #8]
 800975c:	2100      	movs	r1, #0
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f000 fcd4 	bl	800a10c <USBD_LL_Transmit>

  return USBD_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b084      	sub	sp, #16
 8009772:	af00      	add	r7, sp, #0
 8009774:	60f8      	str	r0, [r7, #12]
 8009776:	60b9      	str	r1, [r7, #8]
 8009778:	4613      	mov	r3, r2
 800977a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2203      	movs	r2, #3
 8009780:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009784:	88fa      	ldrh	r2, [r7, #6]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800978c:	88fa      	ldrh	r2, [r7, #6]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009794:	88fb      	ldrh	r3, [r7, #6]
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	2100      	movs	r1, #0
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f000 fcd9 	bl	800a152 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}

080097aa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80097aa:	b580      	push	{r7, lr}
 80097ac:	b084      	sub	sp, #16
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	60f8      	str	r0, [r7, #12]
 80097b2:	60b9      	str	r1, [r7, #8]
 80097b4:	4613      	mov	r3, r2
 80097b6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097b8:	88fb      	ldrh	r3, [r7, #6]
 80097ba:	68ba      	ldr	r2, [r7, #8]
 80097bc:	2100      	movs	r1, #0
 80097be:	68f8      	ldr	r0, [r7, #12]
 80097c0:	f000 fcc7 	bl	800a152 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3710      	adds	r7, #16
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b082      	sub	sp, #8
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2204      	movs	r2, #4
 80097da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80097de:	2300      	movs	r3, #0
 80097e0:	2200      	movs	r2, #0
 80097e2:	2100      	movs	r1, #0
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 fc91 	bl	800a10c <USBD_LL_Transmit>

  return USBD_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2205      	movs	r2, #5
 8009800:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009804:	2300      	movs	r3, #0
 8009806:	2200      	movs	r2, #0
 8009808:	2100      	movs	r1, #0
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fca1 	bl	800a152 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
	...

0800981c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009820:	2200      	movs	r2, #0
 8009822:	4912      	ldr	r1, [pc, #72]	; (800986c <MX_USB_DEVICE_Init+0x50>)
 8009824:	4812      	ldr	r0, [pc, #72]	; (8009870 <MX_USB_DEVICE_Init+0x54>)
 8009826:	f7fe ff26 	bl	8008676 <USBD_Init>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d001      	beq.n	8009834 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009830:	f7f8 fdc3 	bl	80023ba <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009834:	490f      	ldr	r1, [pc, #60]	; (8009874 <MX_USB_DEVICE_Init+0x58>)
 8009836:	480e      	ldr	r0, [pc, #56]	; (8009870 <MX_USB_DEVICE_Init+0x54>)
 8009838:	f7fe ff48 	bl	80086cc <USBD_RegisterClass>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d001      	beq.n	8009846 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009842:	f7f8 fdba 	bl	80023ba <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009846:	490c      	ldr	r1, [pc, #48]	; (8009878 <MX_USB_DEVICE_Init+0x5c>)
 8009848:	4809      	ldr	r0, [pc, #36]	; (8009870 <MX_USB_DEVICE_Init+0x54>)
 800984a:	f7fe fe79 	bl	8008540 <USBD_CDC_RegisterInterface>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d001      	beq.n	8009858 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009854:	f7f8 fdb1 	bl	80023ba <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009858:	4805      	ldr	r0, [pc, #20]	; (8009870 <MX_USB_DEVICE_Init+0x54>)
 800985a:	f7fe ff50 	bl	80086fe <USBD_Start>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d001      	beq.n	8009868 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009864:	f7f8 fda9 	bl	80023ba <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009868:	bf00      	nop
 800986a:	bd80      	pop	{r7, pc}
 800986c:	20000190 	.word	0x20000190
 8009870:	200005fc 	.word	0x200005fc
 8009874:	2000007c 	.word	0x2000007c
 8009878:	20000180 	.word	0x20000180

0800987c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009880:	2200      	movs	r2, #0
 8009882:	4905      	ldr	r1, [pc, #20]	; (8009898 <CDC_Init_FS+0x1c>)
 8009884:	4805      	ldr	r0, [pc, #20]	; (800989c <CDC_Init_FS+0x20>)
 8009886:	f7fe fe71 	bl	800856c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800988a:	4905      	ldr	r1, [pc, #20]	; (80098a0 <CDC_Init_FS+0x24>)
 800988c:	4803      	ldr	r0, [pc, #12]	; (800989c <CDC_Init_FS+0x20>)
 800988e:	f7fe fe86 	bl	800859e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009892:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009894:	4618      	mov	r0, r3
 8009896:	bd80      	pop	{r7, pc}
 8009898:	20000cc0 	.word	0x20000cc0
 800989c:	200005fc 	.word	0x200005fc
 80098a0:	200008c0 	.word	0x200008c0

080098a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80098a4:	b480      	push	{r7}
 80098a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80098a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bc80      	pop	{r7}
 80098b0:	4770      	bx	lr
	...

080098b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	4603      	mov	r3, r0
 80098bc:	6039      	str	r1, [r7, #0]
 80098be:	71fb      	strb	r3, [r7, #7]
 80098c0:	4613      	mov	r3, r2
 80098c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80098c4:	79fb      	ldrb	r3, [r7, #7]
 80098c6:	2b23      	cmp	r3, #35	; 0x23
 80098c8:	d84a      	bhi.n	8009960 <CDC_Control_FS+0xac>
 80098ca:	a201      	add	r2, pc, #4	; (adr r2, 80098d0 <CDC_Control_FS+0x1c>)
 80098cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d0:	08009961 	.word	0x08009961
 80098d4:	08009961 	.word	0x08009961
 80098d8:	08009961 	.word	0x08009961
 80098dc:	08009961 	.word	0x08009961
 80098e0:	08009961 	.word	0x08009961
 80098e4:	08009961 	.word	0x08009961
 80098e8:	08009961 	.word	0x08009961
 80098ec:	08009961 	.word	0x08009961
 80098f0:	08009961 	.word	0x08009961
 80098f4:	08009961 	.word	0x08009961
 80098f8:	08009961 	.word	0x08009961
 80098fc:	08009961 	.word	0x08009961
 8009900:	08009961 	.word	0x08009961
 8009904:	08009961 	.word	0x08009961
 8009908:	08009961 	.word	0x08009961
 800990c:	08009961 	.word	0x08009961
 8009910:	08009961 	.word	0x08009961
 8009914:	08009961 	.word	0x08009961
 8009918:	08009961 	.word	0x08009961
 800991c:	08009961 	.word	0x08009961
 8009920:	08009961 	.word	0x08009961
 8009924:	08009961 	.word	0x08009961
 8009928:	08009961 	.word	0x08009961
 800992c:	08009961 	.word	0x08009961
 8009930:	08009961 	.word	0x08009961
 8009934:	08009961 	.word	0x08009961
 8009938:	08009961 	.word	0x08009961
 800993c:	08009961 	.word	0x08009961
 8009940:	08009961 	.word	0x08009961
 8009944:	08009961 	.word	0x08009961
 8009948:	08009961 	.word	0x08009961
 800994c:	08009961 	.word	0x08009961
 8009950:	08009961 	.word	0x08009961
 8009954:	08009961 	.word	0x08009961
 8009958:	08009961 	.word	0x08009961
 800995c:	08009961 	.word	0x08009961
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009960:	bf00      	nop
  }

  return (USBD_OK);
 8009962:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009964:	4618      	mov	r0, r3
 8009966:	370c      	adds	r7, #12
 8009968:	46bd      	mov	sp, r7
 800996a:	bc80      	pop	{r7}
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop

08009970 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800997a:	6879      	ldr	r1, [r7, #4]
 800997c:	4805      	ldr	r0, [pc, #20]	; (8009994 <CDC_Receive_FS+0x24>)
 800997e:	f7fe fe0e 	bl	800859e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009982:	4804      	ldr	r0, [pc, #16]	; (8009994 <CDC_Receive_FS+0x24>)
 8009984:	f7fe fe4d 	bl	8008622 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009988:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800998a:	4618      	mov	r0, r3
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	200005fc 	.word	0x200005fc

08009998 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	460b      	mov	r3, r1
 80099a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80099a8:	4b0d      	ldr	r3, [pc, #52]	; (80099e0 <CDC_Transmit_FS+0x48>)
 80099aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d001      	beq.n	80099be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80099ba:	2301      	movs	r3, #1
 80099bc:	e00b      	b.n	80099d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80099be:	887b      	ldrh	r3, [r7, #2]
 80099c0:	461a      	mov	r2, r3
 80099c2:	6879      	ldr	r1, [r7, #4]
 80099c4:	4806      	ldr	r0, [pc, #24]	; (80099e0 <CDC_Transmit_FS+0x48>)
 80099c6:	f7fe fdd1 	bl	800856c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80099ca:	4805      	ldr	r0, [pc, #20]	; (80099e0 <CDC_Transmit_FS+0x48>)
 80099cc:	f7fe fdfa 	bl	80085c4 <USBD_CDC_TransmitPacket>
 80099d0:	4603      	mov	r3, r0
 80099d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	200005fc 	.word	0x200005fc

080099e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	4603      	mov	r3, r0
 80099ec:	6039      	str	r1, [r7, #0]
 80099ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	2212      	movs	r2, #18
 80099f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80099f6:	4b03      	ldr	r3, [pc, #12]	; (8009a04 <USBD_FS_DeviceDescriptor+0x20>)
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bc80      	pop	{r7}
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	200001ac 	.word	0x200001ac

08009a08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	4603      	mov	r3, r0
 8009a10:	6039      	str	r1, [r7, #0]
 8009a12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	2204      	movs	r2, #4
 8009a18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009a1a:	4b03      	ldr	r3, [pc, #12]	; (8009a28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bc80      	pop	{r7}
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	200001c0 	.word	0x200001c0

08009a2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	4603      	mov	r3, r0
 8009a34:	6039      	str	r1, [r7, #0]
 8009a36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a38:	79fb      	ldrb	r3, [r7, #7]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d105      	bne.n	8009a4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	4907      	ldr	r1, [pc, #28]	; (8009a60 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a42:	4808      	ldr	r0, [pc, #32]	; (8009a64 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a44:	f7ff fe0c 	bl	8009660 <USBD_GetString>
 8009a48:	e004      	b.n	8009a54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	4904      	ldr	r1, [pc, #16]	; (8009a60 <USBD_FS_ProductStrDescriptor+0x34>)
 8009a4e:	4805      	ldr	r0, [pc, #20]	; (8009a64 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a50:	f7ff fe06 	bl	8009660 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a54:	4b02      	ldr	r3, [pc, #8]	; (8009a60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	200010c0 	.word	0x200010c0
 8009a64:	0800cf74 	.word	0x0800cf74

08009a68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	4603      	mov	r3, r0
 8009a70:	6039      	str	r1, [r7, #0]
 8009a72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009a74:	683a      	ldr	r2, [r7, #0]
 8009a76:	4904      	ldr	r1, [pc, #16]	; (8009a88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009a78:	4804      	ldr	r0, [pc, #16]	; (8009a8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009a7a:	f7ff fdf1 	bl	8009660 <USBD_GetString>
  return USBD_StrDesc;
 8009a7e:	4b02      	ldr	r3, [pc, #8]	; (8009a88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	200010c0 	.word	0x200010c0
 8009a8c:	0800cf8c 	.word	0x0800cf8c

08009a90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	4603      	mov	r3, r0
 8009a98:	6039      	str	r1, [r7, #0]
 8009a9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	221a      	movs	r2, #26
 8009aa0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009aa2:	f000 f843 	bl	8009b2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009aa6:	4b02      	ldr	r3, [pc, #8]	; (8009ab0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	200001c4 	.word	0x200001c4

08009ab4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	4603      	mov	r3, r0
 8009abc:	6039      	str	r1, [r7, #0]
 8009abe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009ac0:	79fb      	ldrb	r3, [r7, #7]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d105      	bne.n	8009ad2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	4907      	ldr	r1, [pc, #28]	; (8009ae8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009aca:	4808      	ldr	r0, [pc, #32]	; (8009aec <USBD_FS_ConfigStrDescriptor+0x38>)
 8009acc:	f7ff fdc8 	bl	8009660 <USBD_GetString>
 8009ad0:	e004      	b.n	8009adc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009ad2:	683a      	ldr	r2, [r7, #0]
 8009ad4:	4904      	ldr	r1, [pc, #16]	; (8009ae8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009ad6:	4805      	ldr	r0, [pc, #20]	; (8009aec <USBD_FS_ConfigStrDescriptor+0x38>)
 8009ad8:	f7ff fdc2 	bl	8009660 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009adc:	4b02      	ldr	r3, [pc, #8]	; (8009ae8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3708      	adds	r7, #8
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	200010c0 	.word	0x200010c0
 8009aec:	0800cfa0 	.word	0x0800cfa0

08009af0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	4603      	mov	r3, r0
 8009af8:	6039      	str	r1, [r7, #0]
 8009afa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009afc:	79fb      	ldrb	r3, [r7, #7]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d105      	bne.n	8009b0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b02:	683a      	ldr	r2, [r7, #0]
 8009b04:	4907      	ldr	r1, [pc, #28]	; (8009b24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b06:	4808      	ldr	r0, [pc, #32]	; (8009b28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b08:	f7ff fdaa 	bl	8009660 <USBD_GetString>
 8009b0c:	e004      	b.n	8009b18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b0e:	683a      	ldr	r2, [r7, #0]
 8009b10:	4904      	ldr	r1, [pc, #16]	; (8009b24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b12:	4805      	ldr	r0, [pc, #20]	; (8009b28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b14:	f7ff fda4 	bl	8009660 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b18:	4b02      	ldr	r3, [pc, #8]	; (8009b24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3708      	adds	r7, #8
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	200010c0 	.word	0x200010c0
 8009b28:	0800cfac 	.word	0x0800cfac

08009b2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009b32:	4b0f      	ldr	r3, [pc, #60]	; (8009b70 <Get_SerialNum+0x44>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009b38:	4b0e      	ldr	r3, [pc, #56]	; (8009b74 <Get_SerialNum+0x48>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009b3e:	4b0e      	ldr	r3, [pc, #56]	; (8009b78 <Get_SerialNum+0x4c>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4413      	add	r3, r2
 8009b4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d009      	beq.n	8009b66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009b52:	2208      	movs	r2, #8
 8009b54:	4909      	ldr	r1, [pc, #36]	; (8009b7c <Get_SerialNum+0x50>)
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f000 f814 	bl	8009b84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009b5c:	2204      	movs	r2, #4
 8009b5e:	4908      	ldr	r1, [pc, #32]	; (8009b80 <Get_SerialNum+0x54>)
 8009b60:	68b8      	ldr	r0, [r7, #8]
 8009b62:	f000 f80f 	bl	8009b84 <IntToUnicode>
  }
}
 8009b66:	bf00      	nop
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	1fff7a10 	.word	0x1fff7a10
 8009b74:	1fff7a14 	.word	0x1fff7a14
 8009b78:	1fff7a18 	.word	0x1fff7a18
 8009b7c:	200001c6 	.word	0x200001c6
 8009b80:	200001d6 	.word	0x200001d6

08009b84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b087      	sub	sp, #28
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	4613      	mov	r3, r2
 8009b90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009b92:	2300      	movs	r3, #0
 8009b94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009b96:	2300      	movs	r3, #0
 8009b98:	75fb      	strb	r3, [r7, #23]
 8009b9a:	e027      	b.n	8009bec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	0f1b      	lsrs	r3, r3, #28
 8009ba0:	2b09      	cmp	r3, #9
 8009ba2:	d80b      	bhi.n	8009bbc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	0f1b      	lsrs	r3, r3, #28
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	7dfb      	ldrb	r3, [r7, #23]
 8009bac:	005b      	lsls	r3, r3, #1
 8009bae:	4619      	mov	r1, r3
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	440b      	add	r3, r1
 8009bb4:	3230      	adds	r2, #48	; 0x30
 8009bb6:	b2d2      	uxtb	r2, r2
 8009bb8:	701a      	strb	r2, [r3, #0]
 8009bba:	e00a      	b.n	8009bd2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	0f1b      	lsrs	r3, r3, #28
 8009bc0:	b2da      	uxtb	r2, r3
 8009bc2:	7dfb      	ldrb	r3, [r7, #23]
 8009bc4:	005b      	lsls	r3, r3, #1
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	440b      	add	r3, r1
 8009bcc:	3237      	adds	r2, #55	; 0x37
 8009bce:	b2d2      	uxtb	r2, r2
 8009bd0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	011b      	lsls	r3, r3, #4
 8009bd6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009bd8:	7dfb      	ldrb	r3, [r7, #23]
 8009bda:	005b      	lsls	r3, r3, #1
 8009bdc:	3301      	adds	r3, #1
 8009bde:	68ba      	ldr	r2, [r7, #8]
 8009be0:	4413      	add	r3, r2
 8009be2:	2200      	movs	r2, #0
 8009be4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009be6:	7dfb      	ldrb	r3, [r7, #23]
 8009be8:	3301      	adds	r3, #1
 8009bea:	75fb      	strb	r3, [r7, #23]
 8009bec:	7dfa      	ldrb	r2, [r7, #23]
 8009bee:	79fb      	ldrb	r3, [r7, #7]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d3d3      	bcc.n	8009b9c <IntToUnicode+0x18>
  }
}
 8009bf4:	bf00      	nop
 8009bf6:	bf00      	nop
 8009bf8:	371c      	adds	r7, #28
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bc80      	pop	{r7}
 8009bfe:	4770      	bx	lr

08009c00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b08a      	sub	sp, #40	; 0x28
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c08:	f107 0314 	add.w	r3, r7, #20
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	601a      	str	r2, [r3, #0]
 8009c10:	605a      	str	r2, [r3, #4]
 8009c12:	609a      	str	r2, [r3, #8]
 8009c14:	60da      	str	r2, [r3, #12]
 8009c16:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c20:	d147      	bne.n	8009cb2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c22:	2300      	movs	r3, #0
 8009c24:	613b      	str	r3, [r7, #16]
 8009c26:	4b25      	ldr	r3, [pc, #148]	; (8009cbc <HAL_PCD_MspInit+0xbc>)
 8009c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c2a:	4a24      	ldr	r2, [pc, #144]	; (8009cbc <HAL_PCD_MspInit+0xbc>)
 8009c2c:	f043 0301 	orr.w	r3, r3, #1
 8009c30:	6313      	str	r3, [r2, #48]	; 0x30
 8009c32:	4b22      	ldr	r3, [pc, #136]	; (8009cbc <HAL_PCD_MspInit+0xbc>)
 8009c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c36:	f003 0301 	and.w	r3, r3, #1
 8009c3a:	613b      	str	r3, [r7, #16]
 8009c3c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009c3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009c44:	2300      	movs	r3, #0
 8009c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c4c:	f107 0314 	add.w	r3, r7, #20
 8009c50:	4619      	mov	r1, r3
 8009c52:	481b      	ldr	r0, [pc, #108]	; (8009cc0 <HAL_PCD_MspInit+0xc0>)
 8009c54:	f7f9 fd2e 	bl	80036b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009c58:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009c5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c5e:	2302      	movs	r3, #2
 8009c60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c62:	2300      	movs	r3, #0
 8009c64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c66:	2303      	movs	r3, #3
 8009c68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009c6a:	230a      	movs	r3, #10
 8009c6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c6e:	f107 0314 	add.w	r3, r7, #20
 8009c72:	4619      	mov	r1, r3
 8009c74:	4812      	ldr	r0, [pc, #72]	; (8009cc0 <HAL_PCD_MspInit+0xc0>)
 8009c76:	f7f9 fd1d 	bl	80036b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c7a:	4b10      	ldr	r3, [pc, #64]	; (8009cbc <HAL_PCD_MspInit+0xbc>)
 8009c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c7e:	4a0f      	ldr	r2, [pc, #60]	; (8009cbc <HAL_PCD_MspInit+0xbc>)
 8009c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c84:	6353      	str	r3, [r2, #52]	; 0x34
 8009c86:	2300      	movs	r3, #0
 8009c88:	60fb      	str	r3, [r7, #12]
 8009c8a:	4b0c      	ldr	r3, [pc, #48]	; (8009cbc <HAL_PCD_MspInit+0xbc>)
 8009c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c8e:	4a0b      	ldr	r2, [pc, #44]	; (8009cbc <HAL_PCD_MspInit+0xbc>)
 8009c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009c94:	6453      	str	r3, [r2, #68]	; 0x44
 8009c96:	4b09      	ldr	r3, [pc, #36]	; (8009cbc <HAL_PCD_MspInit+0xbc>)
 8009c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c9e:	60fb      	str	r3, [r7, #12]
 8009ca0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	2043      	movs	r0, #67	; 0x43
 8009ca8:	f7f9 fccd 	bl	8003646 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009cac:	2043      	movs	r0, #67	; 0x43
 8009cae:	f7f9 fce6 	bl	800367e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009cb2:	bf00      	nop
 8009cb4:	3728      	adds	r7, #40	; 0x28
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	40023800 	.word	0x40023800
 8009cc0:	40020000 	.word	0x40020000

08009cc4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009cd8:	4619      	mov	r1, r3
 8009cda:	4610      	mov	r0, r2
 8009cdc:	f7fe fd57 	bl	800878e <USBD_LL_SetupStage>
}
 8009ce0:	bf00      	nop
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8009cfa:	78fa      	ldrb	r2, [r7, #3]
 8009cfc:	6879      	ldr	r1, [r7, #4]
 8009cfe:	4613      	mov	r3, r2
 8009d00:	00db      	lsls	r3, r3, #3
 8009d02:	4413      	add	r3, r2
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	440b      	add	r3, r1
 8009d08:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	78fb      	ldrb	r3, [r7, #3]
 8009d10:	4619      	mov	r1, r3
 8009d12:	f7fe fd89 	bl	8008828 <USBD_LL_DataOutStage>
}
 8009d16:	bf00      	nop
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}

08009d1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d1e:	b580      	push	{r7, lr}
 8009d20:	b082      	sub	sp, #8
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
 8009d26:	460b      	mov	r3, r1
 8009d28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8009d30:	78fa      	ldrb	r2, [r7, #3]
 8009d32:	6879      	ldr	r1, [r7, #4]
 8009d34:	4613      	mov	r3, r2
 8009d36:	00db      	lsls	r3, r3, #3
 8009d38:	4413      	add	r3, r2
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	440b      	add	r3, r1
 8009d3e:	3348      	adds	r3, #72	; 0x48
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	78fb      	ldrb	r3, [r7, #3]
 8009d44:	4619      	mov	r1, r3
 8009d46:	f7fe fde0 	bl	800890a <USBD_LL_DataInStage>
}
 8009d4a:	bf00      	nop
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b082      	sub	sp, #8
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fe fef0 	bl	8008b46 <USBD_LL_SOF>
}
 8009d66:	bf00      	nop
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b084      	sub	sp, #16
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d76:	2301      	movs	r3, #1
 8009d78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d102      	bne.n	8009d88 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009d82:	2300      	movs	r3, #0
 8009d84:	73fb      	strb	r3, [r7, #15]
 8009d86:	e008      	b.n	8009d9a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	691b      	ldr	r3, [r3, #16]
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	d102      	bne.n	8009d96 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009d90:	2301      	movs	r3, #1
 8009d92:	73fb      	strb	r3, [r7, #15]
 8009d94:	e001      	b.n	8009d9a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009d96:	f7f8 fb10 	bl	80023ba <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009da0:	7bfa      	ldrb	r2, [r7, #15]
 8009da2:	4611      	mov	r1, r2
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7fe fe96 	bl	8008ad6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7fe fe4f 	bl	8008a54 <USBD_LL_Reset>
}
 8009db6:	bf00      	nop
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
	...

08009dc0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7fe fe90 	bl	8008af4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	6812      	ldr	r2, [r2, #0]
 8009de2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009de6:	f043 0301 	orr.w	r3, r3, #1
 8009dea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6a1b      	ldr	r3, [r3, #32]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d005      	beq.n	8009e00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009df4:	4b04      	ldr	r3, [pc, #16]	; (8009e08 <HAL_PCD_SuspendCallback+0x48>)
 8009df6:	691b      	ldr	r3, [r3, #16]
 8009df8:	4a03      	ldr	r2, [pc, #12]	; (8009e08 <HAL_PCD_SuspendCallback+0x48>)
 8009dfa:	f043 0306 	orr.w	r3, r3, #6
 8009dfe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009e00:	bf00      	nop
 8009e02:	3708      	adds	r7, #8
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bd80      	pop	{r7, pc}
 8009e08:	e000ed00 	.word	0xe000ed00

08009e0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7fe fe7e 	bl	8008b1c <USBD_LL_Resume>
}
 8009e20:	bf00      	nop
 8009e22:	3708      	adds	r7, #8
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	460b      	mov	r3, r1
 8009e32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009e3a:	78fa      	ldrb	r2, [r7, #3]
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7fe fea7 	bl	8008b92 <USBD_LL_IsoOUTIncomplete>
}
 8009e44:	bf00      	nop
 8009e46:	3708      	adds	r7, #8
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	460b      	mov	r3, r1
 8009e56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009e5e:	78fa      	ldrb	r2, [r7, #3]
 8009e60:	4611      	mov	r1, r2
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7fe fe89 	bl	8008b7a <USBD_LL_IsoINIncomplete>
}
 8009e68:	bf00      	nop
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b082      	sub	sp, #8
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7fe fe93 	bl	8008baa <USBD_LL_DevConnected>
}
 8009e84:	bf00      	nop
 8009e86:	3708      	adds	r7, #8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fe fe8f 	bl	8008bbe <USBD_LL_DevDisconnected>
}
 8009ea0:	bf00      	nop
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d139      	bne.n	8009f2c <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009eb8:	4a1f      	ldr	r2, [pc, #124]	; (8009f38 <USBD_LL_Init+0x90>)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	4a1d      	ldr	r2, [pc, #116]	; (8009f38 <USBD_LL_Init+0x90>)
 8009ec4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009ec8:	4b1b      	ldr	r3, [pc, #108]	; (8009f38 <USBD_LL_Init+0x90>)
 8009eca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009ece:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009ed0:	4b19      	ldr	r3, [pc, #100]	; (8009f38 <USBD_LL_Init+0x90>)
 8009ed2:	2204      	movs	r2, #4
 8009ed4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009ed6:	4b18      	ldr	r3, [pc, #96]	; (8009f38 <USBD_LL_Init+0x90>)
 8009ed8:	2202      	movs	r2, #2
 8009eda:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009edc:	4b16      	ldr	r3, [pc, #88]	; (8009f38 <USBD_LL_Init+0x90>)
 8009ede:	2200      	movs	r2, #0
 8009ee0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009ee2:	4b15      	ldr	r3, [pc, #84]	; (8009f38 <USBD_LL_Init+0x90>)
 8009ee4:	2202      	movs	r2, #2
 8009ee6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009ee8:	4b13      	ldr	r3, [pc, #76]	; (8009f38 <USBD_LL_Init+0x90>)
 8009eea:	2200      	movs	r2, #0
 8009eec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009eee:	4b12      	ldr	r3, [pc, #72]	; (8009f38 <USBD_LL_Init+0x90>)
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009ef4:	4b10      	ldr	r3, [pc, #64]	; (8009f38 <USBD_LL_Init+0x90>)
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009efa:	4b0f      	ldr	r3, [pc, #60]	; (8009f38 <USBD_LL_Init+0x90>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009f00:	480d      	ldr	r0, [pc, #52]	; (8009f38 <USBD_LL_Init+0x90>)
 8009f02:	f7f9 fda6 	bl	8003a52 <HAL_PCD_Init>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d001      	beq.n	8009f10 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8009f0c:	f7f8 fa55 	bl	80023ba <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009f10:	2180      	movs	r1, #128	; 0x80
 8009f12:	4809      	ldr	r0, [pc, #36]	; (8009f38 <USBD_LL_Init+0x90>)
 8009f14:	f7fa ffbe 	bl	8004e94 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009f18:	2240      	movs	r2, #64	; 0x40
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	4806      	ldr	r0, [pc, #24]	; (8009f38 <USBD_LL_Init+0x90>)
 8009f1e:	f7fa ff73 	bl	8004e08 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009f22:	2280      	movs	r2, #128	; 0x80
 8009f24:	2101      	movs	r1, #1
 8009f26:	4804      	ldr	r0, [pc, #16]	; (8009f38 <USBD_LL_Init+0x90>)
 8009f28:	f7fa ff6e 	bl	8004e08 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009f2c:	2300      	movs	r3, #0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	200012c0 	.word	0x200012c0

08009f3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f52:	4618      	mov	r0, r3
 8009f54:	f7f9 fe9a 	bl	8003c8c <HAL_PCD_Start>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f5c:	7bfb      	ldrb	r3, [r7, #15]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f000 f92e 	bl	800a1c0 <USBD_Get_USB_Status>
 8009f64:	4603      	mov	r3, r0
 8009f66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f68:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}

08009f72 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f72:	b580      	push	{r7, lr}
 8009f74:	b084      	sub	sp, #16
 8009f76:	af00      	add	r7, sp, #0
 8009f78:	6078      	str	r0, [r7, #4]
 8009f7a:	4608      	mov	r0, r1
 8009f7c:	4611      	mov	r1, r2
 8009f7e:	461a      	mov	r2, r3
 8009f80:	4603      	mov	r3, r0
 8009f82:	70fb      	strb	r3, [r7, #3]
 8009f84:	460b      	mov	r3, r1
 8009f86:	70bb      	strb	r3, [r7, #2]
 8009f88:	4613      	mov	r3, r2
 8009f8a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009f9a:	78bb      	ldrb	r3, [r7, #2]
 8009f9c:	883a      	ldrh	r2, [r7, #0]
 8009f9e:	78f9      	ldrb	r1, [r7, #3]
 8009fa0:	f7fa fb4c 	bl	800463c <HAL_PCD_EP_Open>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fa8:	7bfb      	ldrb	r3, [r7, #15]
 8009faa:	4618      	mov	r0, r3
 8009fac:	f000 f908 	bl	800a1c0 <USBD_Get_USB_Status>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}

08009fbe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b084      	sub	sp, #16
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
 8009fc6:	460b      	mov	r3, r1
 8009fc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009fd8:	78fa      	ldrb	r2, [r7, #3]
 8009fda:	4611      	mov	r1, r2
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7fa fb95 	bl	800470c <HAL_PCD_EP_Close>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fe6:	7bfb      	ldrb	r3, [r7, #15]
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f000 f8e9 	bl	800a1c0 <USBD_Get_USB_Status>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ff2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	460b      	mov	r3, r1
 800a006:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a016:	78fa      	ldrb	r2, [r7, #3]
 800a018:	4611      	mov	r1, r2
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7fa fc4e 	bl	80048bc <HAL_PCD_EP_SetStall>
 800a020:	4603      	mov	r3, r0
 800a022:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a024:	7bfb      	ldrb	r3, [r7, #15]
 800a026:	4618      	mov	r0, r3
 800a028:	f000 f8ca 	bl	800a1c0 <USBD_Get_USB_Status>
 800a02c:	4603      	mov	r3, r0
 800a02e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a030:	7bbb      	ldrb	r3, [r7, #14]
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}

0800a03a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b084      	sub	sp, #16
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
 800a042:	460b      	mov	r3, r1
 800a044:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a04a:	2300      	movs	r3, #0
 800a04c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a054:	78fa      	ldrb	r2, [r7, #3]
 800a056:	4611      	mov	r1, r2
 800a058:	4618      	mov	r0, r3
 800a05a:	f7fa fc93 	bl	8004984 <HAL_PCD_EP_ClrStall>
 800a05e:	4603      	mov	r3, r0
 800a060:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a062:	7bfb      	ldrb	r3, [r7, #15]
 800a064:	4618      	mov	r0, r3
 800a066:	f000 f8ab 	bl	800a1c0 <USBD_Get_USB_Status>
 800a06a:	4603      	mov	r3, r0
 800a06c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a06e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a070:	4618      	mov	r0, r3
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	460b      	mov	r3, r1
 800a082:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a08a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a08c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a090:	2b00      	cmp	r3, #0
 800a092:	da0b      	bge.n	800a0ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a094:	78fb      	ldrb	r3, [r7, #3]
 800a096:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a09a:	68f9      	ldr	r1, [r7, #12]
 800a09c:	4613      	mov	r3, r2
 800a09e:	00db      	lsls	r3, r3, #3
 800a0a0:	4413      	add	r3, r2
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	440b      	add	r3, r1
 800a0a6:	333e      	adds	r3, #62	; 0x3e
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	e00b      	b.n	800a0c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a0ac:	78fb      	ldrb	r3, [r7, #3]
 800a0ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0b2:	68f9      	ldr	r1, [r7, #12]
 800a0b4:	4613      	mov	r3, r2
 800a0b6:	00db      	lsls	r3, r3, #3
 800a0b8:	4413      	add	r3, r2
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	440b      	add	r3, r1
 800a0be:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a0c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3714      	adds	r7, #20
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bc80      	pop	{r7}
 800a0cc:	4770      	bx	lr

0800a0ce <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b084      	sub	sp, #16
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
 800a0d6:	460b      	mov	r3, r1
 800a0d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0e8:	78fa      	ldrb	r2, [r7, #3]
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7fa fa80 	bl	80045f2 <HAL_PCD_SetAddress>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0f6:	7bfb      	ldrb	r3, [r7, #15]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f000 f861 	bl	800a1c0 <USBD_Get_USB_Status>
 800a0fe:	4603      	mov	r3, r0
 800a100:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a102:	7bbb      	ldrb	r3, [r7, #14]
}
 800a104:	4618      	mov	r0, r3
 800a106:	3710      	adds	r7, #16
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b086      	sub	sp, #24
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	607a      	str	r2, [r7, #4]
 800a116:	461a      	mov	r2, r3
 800a118:	460b      	mov	r3, r1
 800a11a:	72fb      	strb	r3, [r7, #11]
 800a11c:	4613      	mov	r3, r2
 800a11e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a120:	2300      	movs	r3, #0
 800a122:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a12e:	893b      	ldrh	r3, [r7, #8]
 800a130:	7af9      	ldrb	r1, [r7, #11]
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	f7fa fb87 	bl	8004846 <HAL_PCD_EP_Transmit>
 800a138:	4603      	mov	r3, r0
 800a13a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a13c:	7dfb      	ldrb	r3, [r7, #23]
 800a13e:	4618      	mov	r0, r3
 800a140:	f000 f83e 	bl	800a1c0 <USBD_Get_USB_Status>
 800a144:	4603      	mov	r3, r0
 800a146:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a148:	7dbb      	ldrb	r3, [r7, #22]
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3718      	adds	r7, #24
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b086      	sub	sp, #24
 800a156:	af00      	add	r7, sp, #0
 800a158:	60f8      	str	r0, [r7, #12]
 800a15a:	607a      	str	r2, [r7, #4]
 800a15c:	461a      	mov	r2, r3
 800a15e:	460b      	mov	r3, r1
 800a160:	72fb      	strb	r3, [r7, #11]
 800a162:	4613      	mov	r3, r2
 800a164:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a166:	2300      	movs	r3, #0
 800a168:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a174:	893b      	ldrh	r3, [r7, #8]
 800a176:	7af9      	ldrb	r1, [r7, #11]
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	f7fa fb11 	bl	80047a0 <HAL_PCD_EP_Receive>
 800a17e:	4603      	mov	r3, r0
 800a180:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a182:	7dfb      	ldrb	r3, [r7, #23]
 800a184:	4618      	mov	r0, r3
 800a186:	f000 f81b 	bl	800a1c0 <USBD_Get_USB_Status>
 800a18a:	4603      	mov	r3, r0
 800a18c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a18e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3718      	adds	r7, #24
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1aa:	78fa      	ldrb	r2, [r7, #3]
 800a1ac:	4611      	mov	r1, r2
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7fa fb32 	bl	8004818 <HAL_PCD_EP_GetRxCount>
 800a1b4:	4603      	mov	r3, r0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3708      	adds	r7, #8
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
	...

0800a1c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b085      	sub	sp, #20
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a1ce:	79fb      	ldrb	r3, [r7, #7]
 800a1d0:	2b03      	cmp	r3, #3
 800a1d2:	d817      	bhi.n	800a204 <USBD_Get_USB_Status+0x44>
 800a1d4:	a201      	add	r2, pc, #4	; (adr r2, 800a1dc <USBD_Get_USB_Status+0x1c>)
 800a1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1da:	bf00      	nop
 800a1dc:	0800a1ed 	.word	0x0800a1ed
 800a1e0:	0800a1f3 	.word	0x0800a1f3
 800a1e4:	0800a1f9 	.word	0x0800a1f9
 800a1e8:	0800a1ff 	.word	0x0800a1ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a1f0:	e00b      	b.n	800a20a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a1f2:	2302      	movs	r3, #2
 800a1f4:	73fb      	strb	r3, [r7, #15]
    break;
 800a1f6:	e008      	b.n	800a20a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a1fc:	e005      	b.n	800a20a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a1fe:	2302      	movs	r3, #2
 800a200:	73fb      	strb	r3, [r7, #15]
    break;
 800a202:	e002      	b.n	800a20a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a204:	2302      	movs	r3, #2
 800a206:	73fb      	strb	r3, [r7, #15]
    break;
 800a208:	bf00      	nop
  }
  return usb_status;
 800a20a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3714      	adds	r7, #20
 800a210:	46bd      	mov	sp, r7
 800a212:	bc80      	pop	{r7}
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop

0800a218 <malloc>:
 800a218:	4b02      	ldr	r3, [pc, #8]	; (800a224 <malloc+0xc>)
 800a21a:	4601      	mov	r1, r0
 800a21c:	6818      	ldr	r0, [r3, #0]
 800a21e:	f000 b82b 	b.w	800a278 <_malloc_r>
 800a222:	bf00      	nop
 800a224:	20000238 	.word	0x20000238

0800a228 <free>:
 800a228:	4b02      	ldr	r3, [pc, #8]	; (800a234 <free+0xc>)
 800a22a:	4601      	mov	r1, r0
 800a22c:	6818      	ldr	r0, [r3, #0]
 800a22e:	f001 bd1f 	b.w	800bc70 <_free_r>
 800a232:	bf00      	nop
 800a234:	20000238 	.word	0x20000238

0800a238 <sbrk_aligned>:
 800a238:	b570      	push	{r4, r5, r6, lr}
 800a23a:	4e0e      	ldr	r6, [pc, #56]	; (800a274 <sbrk_aligned+0x3c>)
 800a23c:	460c      	mov	r4, r1
 800a23e:	6831      	ldr	r1, [r6, #0]
 800a240:	4605      	mov	r5, r0
 800a242:	b911      	cbnz	r1, 800a24a <sbrk_aligned+0x12>
 800a244:	f000 fe48 	bl	800aed8 <_sbrk_r>
 800a248:	6030      	str	r0, [r6, #0]
 800a24a:	4621      	mov	r1, r4
 800a24c:	4628      	mov	r0, r5
 800a24e:	f000 fe43 	bl	800aed8 <_sbrk_r>
 800a252:	1c43      	adds	r3, r0, #1
 800a254:	d00a      	beq.n	800a26c <sbrk_aligned+0x34>
 800a256:	1cc4      	adds	r4, r0, #3
 800a258:	f024 0403 	bic.w	r4, r4, #3
 800a25c:	42a0      	cmp	r0, r4
 800a25e:	d007      	beq.n	800a270 <sbrk_aligned+0x38>
 800a260:	1a21      	subs	r1, r4, r0
 800a262:	4628      	mov	r0, r5
 800a264:	f000 fe38 	bl	800aed8 <_sbrk_r>
 800a268:	3001      	adds	r0, #1
 800a26a:	d101      	bne.n	800a270 <sbrk_aligned+0x38>
 800a26c:	f04f 34ff 	mov.w	r4, #4294967295
 800a270:	4620      	mov	r0, r4
 800a272:	bd70      	pop	{r4, r5, r6, pc}
 800a274:	200017c8 	.word	0x200017c8

0800a278 <_malloc_r>:
 800a278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a27c:	1ccd      	adds	r5, r1, #3
 800a27e:	f025 0503 	bic.w	r5, r5, #3
 800a282:	3508      	adds	r5, #8
 800a284:	2d0c      	cmp	r5, #12
 800a286:	bf38      	it	cc
 800a288:	250c      	movcc	r5, #12
 800a28a:	2d00      	cmp	r5, #0
 800a28c:	4607      	mov	r7, r0
 800a28e:	db01      	blt.n	800a294 <_malloc_r+0x1c>
 800a290:	42a9      	cmp	r1, r5
 800a292:	d905      	bls.n	800a2a0 <_malloc_r+0x28>
 800a294:	230c      	movs	r3, #12
 800a296:	2600      	movs	r6, #0
 800a298:	603b      	str	r3, [r7, #0]
 800a29a:	4630      	mov	r0, r6
 800a29c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a374 <_malloc_r+0xfc>
 800a2a4:	f000 f868 	bl	800a378 <__malloc_lock>
 800a2a8:	f8d8 3000 	ldr.w	r3, [r8]
 800a2ac:	461c      	mov	r4, r3
 800a2ae:	bb5c      	cbnz	r4, 800a308 <_malloc_r+0x90>
 800a2b0:	4629      	mov	r1, r5
 800a2b2:	4638      	mov	r0, r7
 800a2b4:	f7ff ffc0 	bl	800a238 <sbrk_aligned>
 800a2b8:	1c43      	adds	r3, r0, #1
 800a2ba:	4604      	mov	r4, r0
 800a2bc:	d155      	bne.n	800a36a <_malloc_r+0xf2>
 800a2be:	f8d8 4000 	ldr.w	r4, [r8]
 800a2c2:	4626      	mov	r6, r4
 800a2c4:	2e00      	cmp	r6, #0
 800a2c6:	d145      	bne.n	800a354 <_malloc_r+0xdc>
 800a2c8:	2c00      	cmp	r4, #0
 800a2ca:	d048      	beq.n	800a35e <_malloc_r+0xe6>
 800a2cc:	6823      	ldr	r3, [r4, #0]
 800a2ce:	4631      	mov	r1, r6
 800a2d0:	4638      	mov	r0, r7
 800a2d2:	eb04 0903 	add.w	r9, r4, r3
 800a2d6:	f000 fdff 	bl	800aed8 <_sbrk_r>
 800a2da:	4581      	cmp	r9, r0
 800a2dc:	d13f      	bne.n	800a35e <_malloc_r+0xe6>
 800a2de:	6821      	ldr	r1, [r4, #0]
 800a2e0:	4638      	mov	r0, r7
 800a2e2:	1a6d      	subs	r5, r5, r1
 800a2e4:	4629      	mov	r1, r5
 800a2e6:	f7ff ffa7 	bl	800a238 <sbrk_aligned>
 800a2ea:	3001      	adds	r0, #1
 800a2ec:	d037      	beq.n	800a35e <_malloc_r+0xe6>
 800a2ee:	6823      	ldr	r3, [r4, #0]
 800a2f0:	442b      	add	r3, r5
 800a2f2:	6023      	str	r3, [r4, #0]
 800a2f4:	f8d8 3000 	ldr.w	r3, [r8]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d038      	beq.n	800a36e <_malloc_r+0xf6>
 800a2fc:	685a      	ldr	r2, [r3, #4]
 800a2fe:	42a2      	cmp	r2, r4
 800a300:	d12b      	bne.n	800a35a <_malloc_r+0xe2>
 800a302:	2200      	movs	r2, #0
 800a304:	605a      	str	r2, [r3, #4]
 800a306:	e00f      	b.n	800a328 <_malloc_r+0xb0>
 800a308:	6822      	ldr	r2, [r4, #0]
 800a30a:	1b52      	subs	r2, r2, r5
 800a30c:	d41f      	bmi.n	800a34e <_malloc_r+0xd6>
 800a30e:	2a0b      	cmp	r2, #11
 800a310:	d917      	bls.n	800a342 <_malloc_r+0xca>
 800a312:	1961      	adds	r1, r4, r5
 800a314:	42a3      	cmp	r3, r4
 800a316:	6025      	str	r5, [r4, #0]
 800a318:	bf18      	it	ne
 800a31a:	6059      	strne	r1, [r3, #4]
 800a31c:	6863      	ldr	r3, [r4, #4]
 800a31e:	bf08      	it	eq
 800a320:	f8c8 1000 	streq.w	r1, [r8]
 800a324:	5162      	str	r2, [r4, r5]
 800a326:	604b      	str	r3, [r1, #4]
 800a328:	4638      	mov	r0, r7
 800a32a:	f104 060b 	add.w	r6, r4, #11
 800a32e:	f000 f829 	bl	800a384 <__malloc_unlock>
 800a332:	f026 0607 	bic.w	r6, r6, #7
 800a336:	1d23      	adds	r3, r4, #4
 800a338:	1af2      	subs	r2, r6, r3
 800a33a:	d0ae      	beq.n	800a29a <_malloc_r+0x22>
 800a33c:	1b9b      	subs	r3, r3, r6
 800a33e:	50a3      	str	r3, [r4, r2]
 800a340:	e7ab      	b.n	800a29a <_malloc_r+0x22>
 800a342:	42a3      	cmp	r3, r4
 800a344:	6862      	ldr	r2, [r4, #4]
 800a346:	d1dd      	bne.n	800a304 <_malloc_r+0x8c>
 800a348:	f8c8 2000 	str.w	r2, [r8]
 800a34c:	e7ec      	b.n	800a328 <_malloc_r+0xb0>
 800a34e:	4623      	mov	r3, r4
 800a350:	6864      	ldr	r4, [r4, #4]
 800a352:	e7ac      	b.n	800a2ae <_malloc_r+0x36>
 800a354:	4634      	mov	r4, r6
 800a356:	6876      	ldr	r6, [r6, #4]
 800a358:	e7b4      	b.n	800a2c4 <_malloc_r+0x4c>
 800a35a:	4613      	mov	r3, r2
 800a35c:	e7cc      	b.n	800a2f8 <_malloc_r+0x80>
 800a35e:	230c      	movs	r3, #12
 800a360:	4638      	mov	r0, r7
 800a362:	603b      	str	r3, [r7, #0]
 800a364:	f000 f80e 	bl	800a384 <__malloc_unlock>
 800a368:	e797      	b.n	800a29a <_malloc_r+0x22>
 800a36a:	6025      	str	r5, [r4, #0]
 800a36c:	e7dc      	b.n	800a328 <_malloc_r+0xb0>
 800a36e:	605b      	str	r3, [r3, #4]
 800a370:	deff      	udf	#255	; 0xff
 800a372:	bf00      	nop
 800a374:	200017c4 	.word	0x200017c4

0800a378 <__malloc_lock>:
 800a378:	4801      	ldr	r0, [pc, #4]	; (800a380 <__malloc_lock+0x8>)
 800a37a:	f000 bdfa 	b.w	800af72 <__retarget_lock_acquire_recursive>
 800a37e:	bf00      	nop
 800a380:	2000190c 	.word	0x2000190c

0800a384 <__malloc_unlock>:
 800a384:	4801      	ldr	r0, [pc, #4]	; (800a38c <__malloc_unlock+0x8>)
 800a386:	f000 bdf5 	b.w	800af74 <__retarget_lock_release_recursive>
 800a38a:	bf00      	nop
 800a38c:	2000190c 	.word	0x2000190c

0800a390 <__cvt>:
 800a390:	2b00      	cmp	r3, #0
 800a392:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a396:	461f      	mov	r7, r3
 800a398:	bfbb      	ittet	lt
 800a39a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800a39e:	461f      	movlt	r7, r3
 800a3a0:	2300      	movge	r3, #0
 800a3a2:	232d      	movlt	r3, #45	; 0x2d
 800a3a4:	b088      	sub	sp, #32
 800a3a6:	4614      	mov	r4, r2
 800a3a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a3aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a3ac:	7013      	strb	r3, [r2, #0]
 800a3ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a3b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800a3b4:	f023 0820 	bic.w	r8, r3, #32
 800a3b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a3bc:	d005      	beq.n	800a3ca <__cvt+0x3a>
 800a3be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a3c2:	d100      	bne.n	800a3c6 <__cvt+0x36>
 800a3c4:	3501      	adds	r5, #1
 800a3c6:	2302      	movs	r3, #2
 800a3c8:	e000      	b.n	800a3cc <__cvt+0x3c>
 800a3ca:	2303      	movs	r3, #3
 800a3cc:	aa07      	add	r2, sp, #28
 800a3ce:	9204      	str	r2, [sp, #16]
 800a3d0:	aa06      	add	r2, sp, #24
 800a3d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a3d6:	e9cd 3500 	strd	r3, r5, [sp]
 800a3da:	4622      	mov	r2, r4
 800a3dc:	463b      	mov	r3, r7
 800a3de:	f000 fe63 	bl	800b0a8 <_dtoa_r>
 800a3e2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a3e6:	4606      	mov	r6, r0
 800a3e8:	d102      	bne.n	800a3f0 <__cvt+0x60>
 800a3ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3ec:	07db      	lsls	r3, r3, #31
 800a3ee:	d522      	bpl.n	800a436 <__cvt+0xa6>
 800a3f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a3f4:	eb06 0905 	add.w	r9, r6, r5
 800a3f8:	d110      	bne.n	800a41c <__cvt+0x8c>
 800a3fa:	7833      	ldrb	r3, [r6, #0]
 800a3fc:	2b30      	cmp	r3, #48	; 0x30
 800a3fe:	d10a      	bne.n	800a416 <__cvt+0x86>
 800a400:	2200      	movs	r2, #0
 800a402:	2300      	movs	r3, #0
 800a404:	4620      	mov	r0, r4
 800a406:	4639      	mov	r1, r7
 800a408:	f7f6 fb0a 	bl	8000a20 <__aeabi_dcmpeq>
 800a40c:	b918      	cbnz	r0, 800a416 <__cvt+0x86>
 800a40e:	f1c5 0501 	rsb	r5, r5, #1
 800a412:	f8ca 5000 	str.w	r5, [sl]
 800a416:	f8da 3000 	ldr.w	r3, [sl]
 800a41a:	4499      	add	r9, r3
 800a41c:	2200      	movs	r2, #0
 800a41e:	2300      	movs	r3, #0
 800a420:	4620      	mov	r0, r4
 800a422:	4639      	mov	r1, r7
 800a424:	f7f6 fafc 	bl	8000a20 <__aeabi_dcmpeq>
 800a428:	b108      	cbz	r0, 800a42e <__cvt+0x9e>
 800a42a:	f8cd 901c 	str.w	r9, [sp, #28]
 800a42e:	2230      	movs	r2, #48	; 0x30
 800a430:	9b07      	ldr	r3, [sp, #28]
 800a432:	454b      	cmp	r3, r9
 800a434:	d307      	bcc.n	800a446 <__cvt+0xb6>
 800a436:	4630      	mov	r0, r6
 800a438:	9b07      	ldr	r3, [sp, #28]
 800a43a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a43c:	1b9b      	subs	r3, r3, r6
 800a43e:	6013      	str	r3, [r2, #0]
 800a440:	b008      	add	sp, #32
 800a442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a446:	1c59      	adds	r1, r3, #1
 800a448:	9107      	str	r1, [sp, #28]
 800a44a:	701a      	strb	r2, [r3, #0]
 800a44c:	e7f0      	b.n	800a430 <__cvt+0xa0>

0800a44e <__exponent>:
 800a44e:	4603      	mov	r3, r0
 800a450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a452:	2900      	cmp	r1, #0
 800a454:	f803 2b02 	strb.w	r2, [r3], #2
 800a458:	bfb6      	itet	lt
 800a45a:	222d      	movlt	r2, #45	; 0x2d
 800a45c:	222b      	movge	r2, #43	; 0x2b
 800a45e:	4249      	neglt	r1, r1
 800a460:	2909      	cmp	r1, #9
 800a462:	7042      	strb	r2, [r0, #1]
 800a464:	dd2a      	ble.n	800a4bc <__exponent+0x6e>
 800a466:	f10d 0207 	add.w	r2, sp, #7
 800a46a:	4617      	mov	r7, r2
 800a46c:	260a      	movs	r6, #10
 800a46e:	fb91 f5f6 	sdiv	r5, r1, r6
 800a472:	4694      	mov	ip, r2
 800a474:	fb06 1415 	mls	r4, r6, r5, r1
 800a478:	3430      	adds	r4, #48	; 0x30
 800a47a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a47e:	460c      	mov	r4, r1
 800a480:	2c63      	cmp	r4, #99	; 0x63
 800a482:	4629      	mov	r1, r5
 800a484:	f102 32ff 	add.w	r2, r2, #4294967295
 800a488:	dcf1      	bgt.n	800a46e <__exponent+0x20>
 800a48a:	3130      	adds	r1, #48	; 0x30
 800a48c:	f1ac 0402 	sub.w	r4, ip, #2
 800a490:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a494:	4622      	mov	r2, r4
 800a496:	1c41      	adds	r1, r0, #1
 800a498:	42ba      	cmp	r2, r7
 800a49a:	d30a      	bcc.n	800a4b2 <__exponent+0x64>
 800a49c:	f10d 0209 	add.w	r2, sp, #9
 800a4a0:	eba2 020c 	sub.w	r2, r2, ip
 800a4a4:	42bc      	cmp	r4, r7
 800a4a6:	bf88      	it	hi
 800a4a8:	2200      	movhi	r2, #0
 800a4aa:	4413      	add	r3, r2
 800a4ac:	1a18      	subs	r0, r3, r0
 800a4ae:	b003      	add	sp, #12
 800a4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4b2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a4b6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a4ba:	e7ed      	b.n	800a498 <__exponent+0x4a>
 800a4bc:	2330      	movs	r3, #48	; 0x30
 800a4be:	3130      	adds	r1, #48	; 0x30
 800a4c0:	7083      	strb	r3, [r0, #2]
 800a4c2:	70c1      	strb	r1, [r0, #3]
 800a4c4:	1d03      	adds	r3, r0, #4
 800a4c6:	e7f1      	b.n	800a4ac <__exponent+0x5e>

0800a4c8 <_printf_float>:
 800a4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4cc:	b091      	sub	sp, #68	; 0x44
 800a4ce:	460c      	mov	r4, r1
 800a4d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800a4d4:	4616      	mov	r6, r2
 800a4d6:	461f      	mov	r7, r3
 800a4d8:	4605      	mov	r5, r0
 800a4da:	f000 fcc5 	bl	800ae68 <_localeconv_r>
 800a4de:	6803      	ldr	r3, [r0, #0]
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	9309      	str	r3, [sp, #36]	; 0x24
 800a4e4:	f7f5 fe70 	bl	80001c8 <strlen>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	930e      	str	r3, [sp, #56]	; 0x38
 800a4ec:	f8d8 3000 	ldr.w	r3, [r8]
 800a4f0:	900a      	str	r0, [sp, #40]	; 0x28
 800a4f2:	3307      	adds	r3, #7
 800a4f4:	f023 0307 	bic.w	r3, r3, #7
 800a4f8:	f103 0208 	add.w	r2, r3, #8
 800a4fc:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a500:	f8d4 b000 	ldr.w	fp, [r4]
 800a504:	f8c8 2000 	str.w	r2, [r8]
 800a508:	e9d3 a800 	ldrd	sl, r8, [r3]
 800a50c:	4652      	mov	r2, sl
 800a50e:	4643      	mov	r3, r8
 800a510:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a514:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800a518:	930b      	str	r3, [sp, #44]	; 0x2c
 800a51a:	f04f 32ff 	mov.w	r2, #4294967295
 800a51e:	4650      	mov	r0, sl
 800a520:	4b9c      	ldr	r3, [pc, #624]	; (800a794 <_printf_float+0x2cc>)
 800a522:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a524:	f7f6 faae 	bl	8000a84 <__aeabi_dcmpun>
 800a528:	bb70      	cbnz	r0, 800a588 <_printf_float+0xc0>
 800a52a:	f04f 32ff 	mov.w	r2, #4294967295
 800a52e:	4650      	mov	r0, sl
 800a530:	4b98      	ldr	r3, [pc, #608]	; (800a794 <_printf_float+0x2cc>)
 800a532:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a534:	f7f6 fa88 	bl	8000a48 <__aeabi_dcmple>
 800a538:	bb30      	cbnz	r0, 800a588 <_printf_float+0xc0>
 800a53a:	2200      	movs	r2, #0
 800a53c:	2300      	movs	r3, #0
 800a53e:	4650      	mov	r0, sl
 800a540:	4641      	mov	r1, r8
 800a542:	f7f6 fa77 	bl	8000a34 <__aeabi_dcmplt>
 800a546:	b110      	cbz	r0, 800a54e <_printf_float+0x86>
 800a548:	232d      	movs	r3, #45	; 0x2d
 800a54a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a54e:	4a92      	ldr	r2, [pc, #584]	; (800a798 <_printf_float+0x2d0>)
 800a550:	4b92      	ldr	r3, [pc, #584]	; (800a79c <_printf_float+0x2d4>)
 800a552:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a556:	bf94      	ite	ls
 800a558:	4690      	movls	r8, r2
 800a55a:	4698      	movhi	r8, r3
 800a55c:	2303      	movs	r3, #3
 800a55e:	f04f 0a00 	mov.w	sl, #0
 800a562:	6123      	str	r3, [r4, #16]
 800a564:	f02b 0304 	bic.w	r3, fp, #4
 800a568:	6023      	str	r3, [r4, #0]
 800a56a:	4633      	mov	r3, r6
 800a56c:	4621      	mov	r1, r4
 800a56e:	4628      	mov	r0, r5
 800a570:	9700      	str	r7, [sp, #0]
 800a572:	aa0f      	add	r2, sp, #60	; 0x3c
 800a574:	f000 f9d6 	bl	800a924 <_printf_common>
 800a578:	3001      	adds	r0, #1
 800a57a:	f040 8090 	bne.w	800a69e <_printf_float+0x1d6>
 800a57e:	f04f 30ff 	mov.w	r0, #4294967295
 800a582:	b011      	add	sp, #68	; 0x44
 800a584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a588:	4652      	mov	r2, sl
 800a58a:	4643      	mov	r3, r8
 800a58c:	4650      	mov	r0, sl
 800a58e:	4641      	mov	r1, r8
 800a590:	f7f6 fa78 	bl	8000a84 <__aeabi_dcmpun>
 800a594:	b148      	cbz	r0, 800a5aa <_printf_float+0xe2>
 800a596:	f1b8 0f00 	cmp.w	r8, #0
 800a59a:	bfb8      	it	lt
 800a59c:	232d      	movlt	r3, #45	; 0x2d
 800a59e:	4a80      	ldr	r2, [pc, #512]	; (800a7a0 <_printf_float+0x2d8>)
 800a5a0:	bfb8      	it	lt
 800a5a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a5a6:	4b7f      	ldr	r3, [pc, #508]	; (800a7a4 <_printf_float+0x2dc>)
 800a5a8:	e7d3      	b.n	800a552 <_printf_float+0x8a>
 800a5aa:	6863      	ldr	r3, [r4, #4]
 800a5ac:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a5b0:	1c5a      	adds	r2, r3, #1
 800a5b2:	d142      	bne.n	800a63a <_printf_float+0x172>
 800a5b4:	2306      	movs	r3, #6
 800a5b6:	6063      	str	r3, [r4, #4]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	9206      	str	r2, [sp, #24]
 800a5bc:	aa0e      	add	r2, sp, #56	; 0x38
 800a5be:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800a5c2:	aa0d      	add	r2, sp, #52	; 0x34
 800a5c4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800a5c8:	9203      	str	r2, [sp, #12]
 800a5ca:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a5ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a5d2:	6023      	str	r3, [r4, #0]
 800a5d4:	6863      	ldr	r3, [r4, #4]
 800a5d6:	4652      	mov	r2, sl
 800a5d8:	9300      	str	r3, [sp, #0]
 800a5da:	4628      	mov	r0, r5
 800a5dc:	4643      	mov	r3, r8
 800a5de:	910b      	str	r1, [sp, #44]	; 0x2c
 800a5e0:	f7ff fed6 	bl	800a390 <__cvt>
 800a5e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5e6:	4680      	mov	r8, r0
 800a5e8:	2947      	cmp	r1, #71	; 0x47
 800a5ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a5ec:	d108      	bne.n	800a600 <_printf_float+0x138>
 800a5ee:	1cc8      	adds	r0, r1, #3
 800a5f0:	db02      	blt.n	800a5f8 <_printf_float+0x130>
 800a5f2:	6863      	ldr	r3, [r4, #4]
 800a5f4:	4299      	cmp	r1, r3
 800a5f6:	dd40      	ble.n	800a67a <_printf_float+0x1b2>
 800a5f8:	f1a9 0902 	sub.w	r9, r9, #2
 800a5fc:	fa5f f989 	uxtb.w	r9, r9
 800a600:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a604:	d81f      	bhi.n	800a646 <_printf_float+0x17e>
 800a606:	464a      	mov	r2, r9
 800a608:	3901      	subs	r1, #1
 800a60a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a60e:	910d      	str	r1, [sp, #52]	; 0x34
 800a610:	f7ff ff1d 	bl	800a44e <__exponent>
 800a614:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a616:	4682      	mov	sl, r0
 800a618:	1813      	adds	r3, r2, r0
 800a61a:	2a01      	cmp	r2, #1
 800a61c:	6123      	str	r3, [r4, #16]
 800a61e:	dc02      	bgt.n	800a626 <_printf_float+0x15e>
 800a620:	6822      	ldr	r2, [r4, #0]
 800a622:	07d2      	lsls	r2, r2, #31
 800a624:	d501      	bpl.n	800a62a <_printf_float+0x162>
 800a626:	3301      	adds	r3, #1
 800a628:	6123      	str	r3, [r4, #16]
 800a62a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d09b      	beq.n	800a56a <_printf_float+0xa2>
 800a632:	232d      	movs	r3, #45	; 0x2d
 800a634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a638:	e797      	b.n	800a56a <_printf_float+0xa2>
 800a63a:	2947      	cmp	r1, #71	; 0x47
 800a63c:	d1bc      	bne.n	800a5b8 <_printf_float+0xf0>
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d1ba      	bne.n	800a5b8 <_printf_float+0xf0>
 800a642:	2301      	movs	r3, #1
 800a644:	e7b7      	b.n	800a5b6 <_printf_float+0xee>
 800a646:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a64a:	d118      	bne.n	800a67e <_printf_float+0x1b6>
 800a64c:	2900      	cmp	r1, #0
 800a64e:	6863      	ldr	r3, [r4, #4]
 800a650:	dd0b      	ble.n	800a66a <_printf_float+0x1a2>
 800a652:	6121      	str	r1, [r4, #16]
 800a654:	b913      	cbnz	r3, 800a65c <_printf_float+0x194>
 800a656:	6822      	ldr	r2, [r4, #0]
 800a658:	07d0      	lsls	r0, r2, #31
 800a65a:	d502      	bpl.n	800a662 <_printf_float+0x19a>
 800a65c:	3301      	adds	r3, #1
 800a65e:	440b      	add	r3, r1
 800a660:	6123      	str	r3, [r4, #16]
 800a662:	f04f 0a00 	mov.w	sl, #0
 800a666:	65a1      	str	r1, [r4, #88]	; 0x58
 800a668:	e7df      	b.n	800a62a <_printf_float+0x162>
 800a66a:	b913      	cbnz	r3, 800a672 <_printf_float+0x1aa>
 800a66c:	6822      	ldr	r2, [r4, #0]
 800a66e:	07d2      	lsls	r2, r2, #31
 800a670:	d501      	bpl.n	800a676 <_printf_float+0x1ae>
 800a672:	3302      	adds	r3, #2
 800a674:	e7f4      	b.n	800a660 <_printf_float+0x198>
 800a676:	2301      	movs	r3, #1
 800a678:	e7f2      	b.n	800a660 <_printf_float+0x198>
 800a67a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a67e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a680:	4299      	cmp	r1, r3
 800a682:	db05      	blt.n	800a690 <_printf_float+0x1c8>
 800a684:	6823      	ldr	r3, [r4, #0]
 800a686:	6121      	str	r1, [r4, #16]
 800a688:	07d8      	lsls	r0, r3, #31
 800a68a:	d5ea      	bpl.n	800a662 <_printf_float+0x19a>
 800a68c:	1c4b      	adds	r3, r1, #1
 800a68e:	e7e7      	b.n	800a660 <_printf_float+0x198>
 800a690:	2900      	cmp	r1, #0
 800a692:	bfcc      	ite	gt
 800a694:	2201      	movgt	r2, #1
 800a696:	f1c1 0202 	rsble	r2, r1, #2
 800a69a:	4413      	add	r3, r2
 800a69c:	e7e0      	b.n	800a660 <_printf_float+0x198>
 800a69e:	6823      	ldr	r3, [r4, #0]
 800a6a0:	055a      	lsls	r2, r3, #21
 800a6a2:	d407      	bmi.n	800a6b4 <_printf_float+0x1ec>
 800a6a4:	6923      	ldr	r3, [r4, #16]
 800a6a6:	4642      	mov	r2, r8
 800a6a8:	4631      	mov	r1, r6
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	47b8      	blx	r7
 800a6ae:	3001      	adds	r0, #1
 800a6b0:	d12b      	bne.n	800a70a <_printf_float+0x242>
 800a6b2:	e764      	b.n	800a57e <_printf_float+0xb6>
 800a6b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a6b8:	f240 80dd 	bls.w	800a876 <_printf_float+0x3ae>
 800a6bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	f7f6 f9ac 	bl	8000a20 <__aeabi_dcmpeq>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	d033      	beq.n	800a734 <_printf_float+0x26c>
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	4631      	mov	r1, r6
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	4a35      	ldr	r2, [pc, #212]	; (800a7a8 <_printf_float+0x2e0>)
 800a6d4:	47b8      	blx	r7
 800a6d6:	3001      	adds	r0, #1
 800a6d8:	f43f af51 	beq.w	800a57e <_printf_float+0xb6>
 800a6dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	db02      	blt.n	800a6ea <_printf_float+0x222>
 800a6e4:	6823      	ldr	r3, [r4, #0]
 800a6e6:	07d8      	lsls	r0, r3, #31
 800a6e8:	d50f      	bpl.n	800a70a <_printf_float+0x242>
 800a6ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6ee:	4631      	mov	r1, r6
 800a6f0:	4628      	mov	r0, r5
 800a6f2:	47b8      	blx	r7
 800a6f4:	3001      	adds	r0, #1
 800a6f6:	f43f af42 	beq.w	800a57e <_printf_float+0xb6>
 800a6fa:	f04f 0800 	mov.w	r8, #0
 800a6fe:	f104 091a 	add.w	r9, r4, #26
 800a702:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a704:	3b01      	subs	r3, #1
 800a706:	4543      	cmp	r3, r8
 800a708:	dc09      	bgt.n	800a71e <_printf_float+0x256>
 800a70a:	6823      	ldr	r3, [r4, #0]
 800a70c:	079b      	lsls	r3, r3, #30
 800a70e:	f100 8104 	bmi.w	800a91a <_printf_float+0x452>
 800a712:	68e0      	ldr	r0, [r4, #12]
 800a714:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a716:	4298      	cmp	r0, r3
 800a718:	bfb8      	it	lt
 800a71a:	4618      	movlt	r0, r3
 800a71c:	e731      	b.n	800a582 <_printf_float+0xba>
 800a71e:	2301      	movs	r3, #1
 800a720:	464a      	mov	r2, r9
 800a722:	4631      	mov	r1, r6
 800a724:	4628      	mov	r0, r5
 800a726:	47b8      	blx	r7
 800a728:	3001      	adds	r0, #1
 800a72a:	f43f af28 	beq.w	800a57e <_printf_float+0xb6>
 800a72e:	f108 0801 	add.w	r8, r8, #1
 800a732:	e7e6      	b.n	800a702 <_printf_float+0x23a>
 800a734:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a736:	2b00      	cmp	r3, #0
 800a738:	dc38      	bgt.n	800a7ac <_printf_float+0x2e4>
 800a73a:	2301      	movs	r3, #1
 800a73c:	4631      	mov	r1, r6
 800a73e:	4628      	mov	r0, r5
 800a740:	4a19      	ldr	r2, [pc, #100]	; (800a7a8 <_printf_float+0x2e0>)
 800a742:	47b8      	blx	r7
 800a744:	3001      	adds	r0, #1
 800a746:	f43f af1a 	beq.w	800a57e <_printf_float+0xb6>
 800a74a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800a74e:	4313      	orrs	r3, r2
 800a750:	d102      	bne.n	800a758 <_printf_float+0x290>
 800a752:	6823      	ldr	r3, [r4, #0]
 800a754:	07d9      	lsls	r1, r3, #31
 800a756:	d5d8      	bpl.n	800a70a <_printf_float+0x242>
 800a758:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a75c:	4631      	mov	r1, r6
 800a75e:	4628      	mov	r0, r5
 800a760:	47b8      	blx	r7
 800a762:	3001      	adds	r0, #1
 800a764:	f43f af0b 	beq.w	800a57e <_printf_float+0xb6>
 800a768:	f04f 0900 	mov.w	r9, #0
 800a76c:	f104 0a1a 	add.w	sl, r4, #26
 800a770:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a772:	425b      	negs	r3, r3
 800a774:	454b      	cmp	r3, r9
 800a776:	dc01      	bgt.n	800a77c <_printf_float+0x2b4>
 800a778:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a77a:	e794      	b.n	800a6a6 <_printf_float+0x1de>
 800a77c:	2301      	movs	r3, #1
 800a77e:	4652      	mov	r2, sl
 800a780:	4631      	mov	r1, r6
 800a782:	4628      	mov	r0, r5
 800a784:	47b8      	blx	r7
 800a786:	3001      	adds	r0, #1
 800a788:	f43f aef9 	beq.w	800a57e <_printf_float+0xb6>
 800a78c:	f109 0901 	add.w	r9, r9, #1
 800a790:	e7ee      	b.n	800a770 <_printf_float+0x2a8>
 800a792:	bf00      	nop
 800a794:	7fefffff 	.word	0x7fefffff
 800a798:	0800d3cc 	.word	0x0800d3cc
 800a79c:	0800d3d0 	.word	0x0800d3d0
 800a7a0:	0800d3d4 	.word	0x0800d3d4
 800a7a4:	0800d3d8 	.word	0x0800d3d8
 800a7a8:	0800d3dc 	.word	0x0800d3dc
 800a7ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a7ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	bfa8      	it	ge
 800a7b4:	461a      	movge	r2, r3
 800a7b6:	2a00      	cmp	r2, #0
 800a7b8:	4691      	mov	r9, r2
 800a7ba:	dc37      	bgt.n	800a82c <_printf_float+0x364>
 800a7bc:	f04f 0b00 	mov.w	fp, #0
 800a7c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a7c4:	f104 021a 	add.w	r2, r4, #26
 800a7c8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a7cc:	ebaa 0309 	sub.w	r3, sl, r9
 800a7d0:	455b      	cmp	r3, fp
 800a7d2:	dc33      	bgt.n	800a83c <_printf_float+0x374>
 800a7d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	db3b      	blt.n	800a854 <_printf_float+0x38c>
 800a7dc:	6823      	ldr	r3, [r4, #0]
 800a7de:	07da      	lsls	r2, r3, #31
 800a7e0:	d438      	bmi.n	800a854 <_printf_float+0x38c>
 800a7e2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800a7e6:	eba2 0903 	sub.w	r9, r2, r3
 800a7ea:	eba2 020a 	sub.w	r2, r2, sl
 800a7ee:	4591      	cmp	r9, r2
 800a7f0:	bfa8      	it	ge
 800a7f2:	4691      	movge	r9, r2
 800a7f4:	f1b9 0f00 	cmp.w	r9, #0
 800a7f8:	dc34      	bgt.n	800a864 <_printf_float+0x39c>
 800a7fa:	f04f 0800 	mov.w	r8, #0
 800a7fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a802:	f104 0a1a 	add.w	sl, r4, #26
 800a806:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a80a:	1a9b      	subs	r3, r3, r2
 800a80c:	eba3 0309 	sub.w	r3, r3, r9
 800a810:	4543      	cmp	r3, r8
 800a812:	f77f af7a 	ble.w	800a70a <_printf_float+0x242>
 800a816:	2301      	movs	r3, #1
 800a818:	4652      	mov	r2, sl
 800a81a:	4631      	mov	r1, r6
 800a81c:	4628      	mov	r0, r5
 800a81e:	47b8      	blx	r7
 800a820:	3001      	adds	r0, #1
 800a822:	f43f aeac 	beq.w	800a57e <_printf_float+0xb6>
 800a826:	f108 0801 	add.w	r8, r8, #1
 800a82a:	e7ec      	b.n	800a806 <_printf_float+0x33e>
 800a82c:	4613      	mov	r3, r2
 800a82e:	4631      	mov	r1, r6
 800a830:	4642      	mov	r2, r8
 800a832:	4628      	mov	r0, r5
 800a834:	47b8      	blx	r7
 800a836:	3001      	adds	r0, #1
 800a838:	d1c0      	bne.n	800a7bc <_printf_float+0x2f4>
 800a83a:	e6a0      	b.n	800a57e <_printf_float+0xb6>
 800a83c:	2301      	movs	r3, #1
 800a83e:	4631      	mov	r1, r6
 800a840:	4628      	mov	r0, r5
 800a842:	920b      	str	r2, [sp, #44]	; 0x2c
 800a844:	47b8      	blx	r7
 800a846:	3001      	adds	r0, #1
 800a848:	f43f ae99 	beq.w	800a57e <_printf_float+0xb6>
 800a84c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a84e:	f10b 0b01 	add.w	fp, fp, #1
 800a852:	e7b9      	b.n	800a7c8 <_printf_float+0x300>
 800a854:	4631      	mov	r1, r6
 800a856:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a85a:	4628      	mov	r0, r5
 800a85c:	47b8      	blx	r7
 800a85e:	3001      	adds	r0, #1
 800a860:	d1bf      	bne.n	800a7e2 <_printf_float+0x31a>
 800a862:	e68c      	b.n	800a57e <_printf_float+0xb6>
 800a864:	464b      	mov	r3, r9
 800a866:	4631      	mov	r1, r6
 800a868:	4628      	mov	r0, r5
 800a86a:	eb08 020a 	add.w	r2, r8, sl
 800a86e:	47b8      	blx	r7
 800a870:	3001      	adds	r0, #1
 800a872:	d1c2      	bne.n	800a7fa <_printf_float+0x332>
 800a874:	e683      	b.n	800a57e <_printf_float+0xb6>
 800a876:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a878:	2a01      	cmp	r2, #1
 800a87a:	dc01      	bgt.n	800a880 <_printf_float+0x3b8>
 800a87c:	07db      	lsls	r3, r3, #31
 800a87e:	d539      	bpl.n	800a8f4 <_printf_float+0x42c>
 800a880:	2301      	movs	r3, #1
 800a882:	4642      	mov	r2, r8
 800a884:	4631      	mov	r1, r6
 800a886:	4628      	mov	r0, r5
 800a888:	47b8      	blx	r7
 800a88a:	3001      	adds	r0, #1
 800a88c:	f43f ae77 	beq.w	800a57e <_printf_float+0xb6>
 800a890:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a894:	4631      	mov	r1, r6
 800a896:	4628      	mov	r0, r5
 800a898:	47b8      	blx	r7
 800a89a:	3001      	adds	r0, #1
 800a89c:	f43f ae6f 	beq.w	800a57e <_printf_float+0xb6>
 800a8a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800a8ac:	f7f6 f8b8 	bl	8000a20 <__aeabi_dcmpeq>
 800a8b0:	b9d8      	cbnz	r0, 800a8ea <_printf_float+0x422>
 800a8b2:	f109 33ff 	add.w	r3, r9, #4294967295
 800a8b6:	f108 0201 	add.w	r2, r8, #1
 800a8ba:	4631      	mov	r1, r6
 800a8bc:	4628      	mov	r0, r5
 800a8be:	47b8      	blx	r7
 800a8c0:	3001      	adds	r0, #1
 800a8c2:	d10e      	bne.n	800a8e2 <_printf_float+0x41a>
 800a8c4:	e65b      	b.n	800a57e <_printf_float+0xb6>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	464a      	mov	r2, r9
 800a8ca:	4631      	mov	r1, r6
 800a8cc:	4628      	mov	r0, r5
 800a8ce:	47b8      	blx	r7
 800a8d0:	3001      	adds	r0, #1
 800a8d2:	f43f ae54 	beq.w	800a57e <_printf_float+0xb6>
 800a8d6:	f108 0801 	add.w	r8, r8, #1
 800a8da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	4543      	cmp	r3, r8
 800a8e0:	dcf1      	bgt.n	800a8c6 <_printf_float+0x3fe>
 800a8e2:	4653      	mov	r3, sl
 800a8e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a8e8:	e6de      	b.n	800a6a8 <_printf_float+0x1e0>
 800a8ea:	f04f 0800 	mov.w	r8, #0
 800a8ee:	f104 091a 	add.w	r9, r4, #26
 800a8f2:	e7f2      	b.n	800a8da <_printf_float+0x412>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	4642      	mov	r2, r8
 800a8f8:	e7df      	b.n	800a8ba <_printf_float+0x3f2>
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	464a      	mov	r2, r9
 800a8fe:	4631      	mov	r1, r6
 800a900:	4628      	mov	r0, r5
 800a902:	47b8      	blx	r7
 800a904:	3001      	adds	r0, #1
 800a906:	f43f ae3a 	beq.w	800a57e <_printf_float+0xb6>
 800a90a:	f108 0801 	add.w	r8, r8, #1
 800a90e:	68e3      	ldr	r3, [r4, #12]
 800a910:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a912:	1a5b      	subs	r3, r3, r1
 800a914:	4543      	cmp	r3, r8
 800a916:	dcf0      	bgt.n	800a8fa <_printf_float+0x432>
 800a918:	e6fb      	b.n	800a712 <_printf_float+0x24a>
 800a91a:	f04f 0800 	mov.w	r8, #0
 800a91e:	f104 0919 	add.w	r9, r4, #25
 800a922:	e7f4      	b.n	800a90e <_printf_float+0x446>

0800a924 <_printf_common>:
 800a924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a928:	4616      	mov	r6, r2
 800a92a:	4699      	mov	r9, r3
 800a92c:	688a      	ldr	r2, [r1, #8]
 800a92e:	690b      	ldr	r3, [r1, #16]
 800a930:	4607      	mov	r7, r0
 800a932:	4293      	cmp	r3, r2
 800a934:	bfb8      	it	lt
 800a936:	4613      	movlt	r3, r2
 800a938:	6033      	str	r3, [r6, #0]
 800a93a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a93e:	460c      	mov	r4, r1
 800a940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a944:	b10a      	cbz	r2, 800a94a <_printf_common+0x26>
 800a946:	3301      	adds	r3, #1
 800a948:	6033      	str	r3, [r6, #0]
 800a94a:	6823      	ldr	r3, [r4, #0]
 800a94c:	0699      	lsls	r1, r3, #26
 800a94e:	bf42      	ittt	mi
 800a950:	6833      	ldrmi	r3, [r6, #0]
 800a952:	3302      	addmi	r3, #2
 800a954:	6033      	strmi	r3, [r6, #0]
 800a956:	6825      	ldr	r5, [r4, #0]
 800a958:	f015 0506 	ands.w	r5, r5, #6
 800a95c:	d106      	bne.n	800a96c <_printf_common+0x48>
 800a95e:	f104 0a19 	add.w	sl, r4, #25
 800a962:	68e3      	ldr	r3, [r4, #12]
 800a964:	6832      	ldr	r2, [r6, #0]
 800a966:	1a9b      	subs	r3, r3, r2
 800a968:	42ab      	cmp	r3, r5
 800a96a:	dc2b      	bgt.n	800a9c4 <_printf_common+0xa0>
 800a96c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a970:	1e13      	subs	r3, r2, #0
 800a972:	6822      	ldr	r2, [r4, #0]
 800a974:	bf18      	it	ne
 800a976:	2301      	movne	r3, #1
 800a978:	0692      	lsls	r2, r2, #26
 800a97a:	d430      	bmi.n	800a9de <_printf_common+0xba>
 800a97c:	4649      	mov	r1, r9
 800a97e:	4638      	mov	r0, r7
 800a980:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a984:	47c0      	blx	r8
 800a986:	3001      	adds	r0, #1
 800a988:	d023      	beq.n	800a9d2 <_printf_common+0xae>
 800a98a:	6823      	ldr	r3, [r4, #0]
 800a98c:	6922      	ldr	r2, [r4, #16]
 800a98e:	f003 0306 	and.w	r3, r3, #6
 800a992:	2b04      	cmp	r3, #4
 800a994:	bf14      	ite	ne
 800a996:	2500      	movne	r5, #0
 800a998:	6833      	ldreq	r3, [r6, #0]
 800a99a:	f04f 0600 	mov.w	r6, #0
 800a99e:	bf08      	it	eq
 800a9a0:	68e5      	ldreq	r5, [r4, #12]
 800a9a2:	f104 041a 	add.w	r4, r4, #26
 800a9a6:	bf08      	it	eq
 800a9a8:	1aed      	subeq	r5, r5, r3
 800a9aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a9ae:	bf08      	it	eq
 800a9b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	bfc4      	itt	gt
 800a9b8:	1a9b      	subgt	r3, r3, r2
 800a9ba:	18ed      	addgt	r5, r5, r3
 800a9bc:	42b5      	cmp	r5, r6
 800a9be:	d11a      	bne.n	800a9f6 <_printf_common+0xd2>
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	e008      	b.n	800a9d6 <_printf_common+0xb2>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	4652      	mov	r2, sl
 800a9c8:	4649      	mov	r1, r9
 800a9ca:	4638      	mov	r0, r7
 800a9cc:	47c0      	blx	r8
 800a9ce:	3001      	adds	r0, #1
 800a9d0:	d103      	bne.n	800a9da <_printf_common+0xb6>
 800a9d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9da:	3501      	adds	r5, #1
 800a9dc:	e7c1      	b.n	800a962 <_printf_common+0x3e>
 800a9de:	2030      	movs	r0, #48	; 0x30
 800a9e0:	18e1      	adds	r1, r4, r3
 800a9e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9e6:	1c5a      	adds	r2, r3, #1
 800a9e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9ec:	4422      	add	r2, r4
 800a9ee:	3302      	adds	r3, #2
 800a9f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9f4:	e7c2      	b.n	800a97c <_printf_common+0x58>
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	4622      	mov	r2, r4
 800a9fa:	4649      	mov	r1, r9
 800a9fc:	4638      	mov	r0, r7
 800a9fe:	47c0      	blx	r8
 800aa00:	3001      	adds	r0, #1
 800aa02:	d0e6      	beq.n	800a9d2 <_printf_common+0xae>
 800aa04:	3601      	adds	r6, #1
 800aa06:	e7d9      	b.n	800a9bc <_printf_common+0x98>

0800aa08 <_printf_i>:
 800aa08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa0c:	7e0f      	ldrb	r7, [r1, #24]
 800aa0e:	4691      	mov	r9, r2
 800aa10:	2f78      	cmp	r7, #120	; 0x78
 800aa12:	4680      	mov	r8, r0
 800aa14:	460c      	mov	r4, r1
 800aa16:	469a      	mov	sl, r3
 800aa18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa1e:	d807      	bhi.n	800aa30 <_printf_i+0x28>
 800aa20:	2f62      	cmp	r7, #98	; 0x62
 800aa22:	d80a      	bhi.n	800aa3a <_printf_i+0x32>
 800aa24:	2f00      	cmp	r7, #0
 800aa26:	f000 80d5 	beq.w	800abd4 <_printf_i+0x1cc>
 800aa2a:	2f58      	cmp	r7, #88	; 0x58
 800aa2c:	f000 80c1 	beq.w	800abb2 <_printf_i+0x1aa>
 800aa30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa38:	e03a      	b.n	800aab0 <_printf_i+0xa8>
 800aa3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa3e:	2b15      	cmp	r3, #21
 800aa40:	d8f6      	bhi.n	800aa30 <_printf_i+0x28>
 800aa42:	a101      	add	r1, pc, #4	; (adr r1, 800aa48 <_printf_i+0x40>)
 800aa44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa48:	0800aaa1 	.word	0x0800aaa1
 800aa4c:	0800aab5 	.word	0x0800aab5
 800aa50:	0800aa31 	.word	0x0800aa31
 800aa54:	0800aa31 	.word	0x0800aa31
 800aa58:	0800aa31 	.word	0x0800aa31
 800aa5c:	0800aa31 	.word	0x0800aa31
 800aa60:	0800aab5 	.word	0x0800aab5
 800aa64:	0800aa31 	.word	0x0800aa31
 800aa68:	0800aa31 	.word	0x0800aa31
 800aa6c:	0800aa31 	.word	0x0800aa31
 800aa70:	0800aa31 	.word	0x0800aa31
 800aa74:	0800abbb 	.word	0x0800abbb
 800aa78:	0800aae1 	.word	0x0800aae1
 800aa7c:	0800ab75 	.word	0x0800ab75
 800aa80:	0800aa31 	.word	0x0800aa31
 800aa84:	0800aa31 	.word	0x0800aa31
 800aa88:	0800abdd 	.word	0x0800abdd
 800aa8c:	0800aa31 	.word	0x0800aa31
 800aa90:	0800aae1 	.word	0x0800aae1
 800aa94:	0800aa31 	.word	0x0800aa31
 800aa98:	0800aa31 	.word	0x0800aa31
 800aa9c:	0800ab7d 	.word	0x0800ab7d
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	1d1a      	adds	r2, r3, #4
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	602a      	str	r2, [r5, #0]
 800aaa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aaac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aab0:	2301      	movs	r3, #1
 800aab2:	e0a0      	b.n	800abf6 <_printf_i+0x1ee>
 800aab4:	6820      	ldr	r0, [r4, #0]
 800aab6:	682b      	ldr	r3, [r5, #0]
 800aab8:	0607      	lsls	r7, r0, #24
 800aaba:	f103 0104 	add.w	r1, r3, #4
 800aabe:	6029      	str	r1, [r5, #0]
 800aac0:	d501      	bpl.n	800aac6 <_printf_i+0xbe>
 800aac2:	681e      	ldr	r6, [r3, #0]
 800aac4:	e003      	b.n	800aace <_printf_i+0xc6>
 800aac6:	0646      	lsls	r6, r0, #25
 800aac8:	d5fb      	bpl.n	800aac2 <_printf_i+0xba>
 800aaca:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aace:	2e00      	cmp	r6, #0
 800aad0:	da03      	bge.n	800aada <_printf_i+0xd2>
 800aad2:	232d      	movs	r3, #45	; 0x2d
 800aad4:	4276      	negs	r6, r6
 800aad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aada:	230a      	movs	r3, #10
 800aadc:	4859      	ldr	r0, [pc, #356]	; (800ac44 <_printf_i+0x23c>)
 800aade:	e012      	b.n	800ab06 <_printf_i+0xfe>
 800aae0:	682b      	ldr	r3, [r5, #0]
 800aae2:	6820      	ldr	r0, [r4, #0]
 800aae4:	1d19      	adds	r1, r3, #4
 800aae6:	6029      	str	r1, [r5, #0]
 800aae8:	0605      	lsls	r5, r0, #24
 800aaea:	d501      	bpl.n	800aaf0 <_printf_i+0xe8>
 800aaec:	681e      	ldr	r6, [r3, #0]
 800aaee:	e002      	b.n	800aaf6 <_printf_i+0xee>
 800aaf0:	0641      	lsls	r1, r0, #25
 800aaf2:	d5fb      	bpl.n	800aaec <_printf_i+0xe4>
 800aaf4:	881e      	ldrh	r6, [r3, #0]
 800aaf6:	2f6f      	cmp	r7, #111	; 0x6f
 800aaf8:	bf0c      	ite	eq
 800aafa:	2308      	moveq	r3, #8
 800aafc:	230a      	movne	r3, #10
 800aafe:	4851      	ldr	r0, [pc, #324]	; (800ac44 <_printf_i+0x23c>)
 800ab00:	2100      	movs	r1, #0
 800ab02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab06:	6865      	ldr	r5, [r4, #4]
 800ab08:	2d00      	cmp	r5, #0
 800ab0a:	bfa8      	it	ge
 800ab0c:	6821      	ldrge	r1, [r4, #0]
 800ab0e:	60a5      	str	r5, [r4, #8]
 800ab10:	bfa4      	itt	ge
 800ab12:	f021 0104 	bicge.w	r1, r1, #4
 800ab16:	6021      	strge	r1, [r4, #0]
 800ab18:	b90e      	cbnz	r6, 800ab1e <_printf_i+0x116>
 800ab1a:	2d00      	cmp	r5, #0
 800ab1c:	d04b      	beq.n	800abb6 <_printf_i+0x1ae>
 800ab1e:	4615      	mov	r5, r2
 800ab20:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab24:	fb03 6711 	mls	r7, r3, r1, r6
 800ab28:	5dc7      	ldrb	r7, [r0, r7]
 800ab2a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab2e:	4637      	mov	r7, r6
 800ab30:	42bb      	cmp	r3, r7
 800ab32:	460e      	mov	r6, r1
 800ab34:	d9f4      	bls.n	800ab20 <_printf_i+0x118>
 800ab36:	2b08      	cmp	r3, #8
 800ab38:	d10b      	bne.n	800ab52 <_printf_i+0x14a>
 800ab3a:	6823      	ldr	r3, [r4, #0]
 800ab3c:	07de      	lsls	r6, r3, #31
 800ab3e:	d508      	bpl.n	800ab52 <_printf_i+0x14a>
 800ab40:	6923      	ldr	r3, [r4, #16]
 800ab42:	6861      	ldr	r1, [r4, #4]
 800ab44:	4299      	cmp	r1, r3
 800ab46:	bfde      	ittt	le
 800ab48:	2330      	movle	r3, #48	; 0x30
 800ab4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab52:	1b52      	subs	r2, r2, r5
 800ab54:	6122      	str	r2, [r4, #16]
 800ab56:	464b      	mov	r3, r9
 800ab58:	4621      	mov	r1, r4
 800ab5a:	4640      	mov	r0, r8
 800ab5c:	f8cd a000 	str.w	sl, [sp]
 800ab60:	aa03      	add	r2, sp, #12
 800ab62:	f7ff fedf 	bl	800a924 <_printf_common>
 800ab66:	3001      	adds	r0, #1
 800ab68:	d14a      	bne.n	800ac00 <_printf_i+0x1f8>
 800ab6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab6e:	b004      	add	sp, #16
 800ab70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab74:	6823      	ldr	r3, [r4, #0]
 800ab76:	f043 0320 	orr.w	r3, r3, #32
 800ab7a:	6023      	str	r3, [r4, #0]
 800ab7c:	2778      	movs	r7, #120	; 0x78
 800ab7e:	4832      	ldr	r0, [pc, #200]	; (800ac48 <_printf_i+0x240>)
 800ab80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ab84:	6823      	ldr	r3, [r4, #0]
 800ab86:	6829      	ldr	r1, [r5, #0]
 800ab88:	061f      	lsls	r7, r3, #24
 800ab8a:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab8e:	d402      	bmi.n	800ab96 <_printf_i+0x18e>
 800ab90:	065f      	lsls	r7, r3, #25
 800ab92:	bf48      	it	mi
 800ab94:	b2b6      	uxthmi	r6, r6
 800ab96:	07df      	lsls	r7, r3, #31
 800ab98:	bf48      	it	mi
 800ab9a:	f043 0320 	orrmi.w	r3, r3, #32
 800ab9e:	6029      	str	r1, [r5, #0]
 800aba0:	bf48      	it	mi
 800aba2:	6023      	strmi	r3, [r4, #0]
 800aba4:	b91e      	cbnz	r6, 800abae <_printf_i+0x1a6>
 800aba6:	6823      	ldr	r3, [r4, #0]
 800aba8:	f023 0320 	bic.w	r3, r3, #32
 800abac:	6023      	str	r3, [r4, #0]
 800abae:	2310      	movs	r3, #16
 800abb0:	e7a6      	b.n	800ab00 <_printf_i+0xf8>
 800abb2:	4824      	ldr	r0, [pc, #144]	; (800ac44 <_printf_i+0x23c>)
 800abb4:	e7e4      	b.n	800ab80 <_printf_i+0x178>
 800abb6:	4615      	mov	r5, r2
 800abb8:	e7bd      	b.n	800ab36 <_printf_i+0x12e>
 800abba:	682b      	ldr	r3, [r5, #0]
 800abbc:	6826      	ldr	r6, [r4, #0]
 800abbe:	1d18      	adds	r0, r3, #4
 800abc0:	6961      	ldr	r1, [r4, #20]
 800abc2:	6028      	str	r0, [r5, #0]
 800abc4:	0635      	lsls	r5, r6, #24
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	d501      	bpl.n	800abce <_printf_i+0x1c6>
 800abca:	6019      	str	r1, [r3, #0]
 800abcc:	e002      	b.n	800abd4 <_printf_i+0x1cc>
 800abce:	0670      	lsls	r0, r6, #25
 800abd0:	d5fb      	bpl.n	800abca <_printf_i+0x1c2>
 800abd2:	8019      	strh	r1, [r3, #0]
 800abd4:	2300      	movs	r3, #0
 800abd6:	4615      	mov	r5, r2
 800abd8:	6123      	str	r3, [r4, #16]
 800abda:	e7bc      	b.n	800ab56 <_printf_i+0x14e>
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	2100      	movs	r1, #0
 800abe0:	1d1a      	adds	r2, r3, #4
 800abe2:	602a      	str	r2, [r5, #0]
 800abe4:	681d      	ldr	r5, [r3, #0]
 800abe6:	6862      	ldr	r2, [r4, #4]
 800abe8:	4628      	mov	r0, r5
 800abea:	f000 f9c4 	bl	800af76 <memchr>
 800abee:	b108      	cbz	r0, 800abf4 <_printf_i+0x1ec>
 800abf0:	1b40      	subs	r0, r0, r5
 800abf2:	6060      	str	r0, [r4, #4]
 800abf4:	6863      	ldr	r3, [r4, #4]
 800abf6:	6123      	str	r3, [r4, #16]
 800abf8:	2300      	movs	r3, #0
 800abfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abfe:	e7aa      	b.n	800ab56 <_printf_i+0x14e>
 800ac00:	462a      	mov	r2, r5
 800ac02:	4649      	mov	r1, r9
 800ac04:	4640      	mov	r0, r8
 800ac06:	6923      	ldr	r3, [r4, #16]
 800ac08:	47d0      	blx	sl
 800ac0a:	3001      	adds	r0, #1
 800ac0c:	d0ad      	beq.n	800ab6a <_printf_i+0x162>
 800ac0e:	6823      	ldr	r3, [r4, #0]
 800ac10:	079b      	lsls	r3, r3, #30
 800ac12:	d413      	bmi.n	800ac3c <_printf_i+0x234>
 800ac14:	68e0      	ldr	r0, [r4, #12]
 800ac16:	9b03      	ldr	r3, [sp, #12]
 800ac18:	4298      	cmp	r0, r3
 800ac1a:	bfb8      	it	lt
 800ac1c:	4618      	movlt	r0, r3
 800ac1e:	e7a6      	b.n	800ab6e <_printf_i+0x166>
 800ac20:	2301      	movs	r3, #1
 800ac22:	4632      	mov	r2, r6
 800ac24:	4649      	mov	r1, r9
 800ac26:	4640      	mov	r0, r8
 800ac28:	47d0      	blx	sl
 800ac2a:	3001      	adds	r0, #1
 800ac2c:	d09d      	beq.n	800ab6a <_printf_i+0x162>
 800ac2e:	3501      	adds	r5, #1
 800ac30:	68e3      	ldr	r3, [r4, #12]
 800ac32:	9903      	ldr	r1, [sp, #12]
 800ac34:	1a5b      	subs	r3, r3, r1
 800ac36:	42ab      	cmp	r3, r5
 800ac38:	dcf2      	bgt.n	800ac20 <_printf_i+0x218>
 800ac3a:	e7eb      	b.n	800ac14 <_printf_i+0x20c>
 800ac3c:	2500      	movs	r5, #0
 800ac3e:	f104 0619 	add.w	r6, r4, #25
 800ac42:	e7f5      	b.n	800ac30 <_printf_i+0x228>
 800ac44:	0800d3de 	.word	0x0800d3de
 800ac48:	0800d3ef 	.word	0x0800d3ef

0800ac4c <std>:
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	b510      	push	{r4, lr}
 800ac50:	4604      	mov	r4, r0
 800ac52:	e9c0 3300 	strd	r3, r3, [r0]
 800ac56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac5a:	6083      	str	r3, [r0, #8]
 800ac5c:	8181      	strh	r1, [r0, #12]
 800ac5e:	6643      	str	r3, [r0, #100]	; 0x64
 800ac60:	81c2      	strh	r2, [r0, #14]
 800ac62:	6183      	str	r3, [r0, #24]
 800ac64:	4619      	mov	r1, r3
 800ac66:	2208      	movs	r2, #8
 800ac68:	305c      	adds	r0, #92	; 0x5c
 800ac6a:	f000 f8f4 	bl	800ae56 <memset>
 800ac6e:	4b0d      	ldr	r3, [pc, #52]	; (800aca4 <std+0x58>)
 800ac70:	6224      	str	r4, [r4, #32]
 800ac72:	6263      	str	r3, [r4, #36]	; 0x24
 800ac74:	4b0c      	ldr	r3, [pc, #48]	; (800aca8 <std+0x5c>)
 800ac76:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac78:	4b0c      	ldr	r3, [pc, #48]	; (800acac <std+0x60>)
 800ac7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac7c:	4b0c      	ldr	r3, [pc, #48]	; (800acb0 <std+0x64>)
 800ac7e:	6323      	str	r3, [r4, #48]	; 0x30
 800ac80:	4b0c      	ldr	r3, [pc, #48]	; (800acb4 <std+0x68>)
 800ac82:	429c      	cmp	r4, r3
 800ac84:	d006      	beq.n	800ac94 <std+0x48>
 800ac86:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ac8a:	4294      	cmp	r4, r2
 800ac8c:	d002      	beq.n	800ac94 <std+0x48>
 800ac8e:	33d0      	adds	r3, #208	; 0xd0
 800ac90:	429c      	cmp	r4, r3
 800ac92:	d105      	bne.n	800aca0 <std+0x54>
 800ac94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac9c:	f000 b968 	b.w	800af70 <__retarget_lock_init_recursive>
 800aca0:	bd10      	pop	{r4, pc}
 800aca2:	bf00      	nop
 800aca4:	0800add1 	.word	0x0800add1
 800aca8:	0800adf3 	.word	0x0800adf3
 800acac:	0800ae2b 	.word	0x0800ae2b
 800acb0:	0800ae4f 	.word	0x0800ae4f
 800acb4:	200017cc 	.word	0x200017cc

0800acb8 <stdio_exit_handler>:
 800acb8:	4a02      	ldr	r2, [pc, #8]	; (800acc4 <stdio_exit_handler+0xc>)
 800acba:	4903      	ldr	r1, [pc, #12]	; (800acc8 <stdio_exit_handler+0x10>)
 800acbc:	4803      	ldr	r0, [pc, #12]	; (800accc <stdio_exit_handler+0x14>)
 800acbe:	f000 b869 	b.w	800ad94 <_fwalk_sglue>
 800acc2:	bf00      	nop
 800acc4:	200001e0 	.word	0x200001e0
 800acc8:	0800c4f5 	.word	0x0800c4f5
 800accc:	200001ec 	.word	0x200001ec

0800acd0 <cleanup_stdio>:
 800acd0:	6841      	ldr	r1, [r0, #4]
 800acd2:	4b0c      	ldr	r3, [pc, #48]	; (800ad04 <cleanup_stdio+0x34>)
 800acd4:	b510      	push	{r4, lr}
 800acd6:	4299      	cmp	r1, r3
 800acd8:	4604      	mov	r4, r0
 800acda:	d001      	beq.n	800ace0 <cleanup_stdio+0x10>
 800acdc:	f001 fc0a 	bl	800c4f4 <_fflush_r>
 800ace0:	68a1      	ldr	r1, [r4, #8]
 800ace2:	4b09      	ldr	r3, [pc, #36]	; (800ad08 <cleanup_stdio+0x38>)
 800ace4:	4299      	cmp	r1, r3
 800ace6:	d002      	beq.n	800acee <cleanup_stdio+0x1e>
 800ace8:	4620      	mov	r0, r4
 800acea:	f001 fc03 	bl	800c4f4 <_fflush_r>
 800acee:	68e1      	ldr	r1, [r4, #12]
 800acf0:	4b06      	ldr	r3, [pc, #24]	; (800ad0c <cleanup_stdio+0x3c>)
 800acf2:	4299      	cmp	r1, r3
 800acf4:	d004      	beq.n	800ad00 <cleanup_stdio+0x30>
 800acf6:	4620      	mov	r0, r4
 800acf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acfc:	f001 bbfa 	b.w	800c4f4 <_fflush_r>
 800ad00:	bd10      	pop	{r4, pc}
 800ad02:	bf00      	nop
 800ad04:	200017cc 	.word	0x200017cc
 800ad08:	20001834 	.word	0x20001834
 800ad0c:	2000189c 	.word	0x2000189c

0800ad10 <global_stdio_init.part.0>:
 800ad10:	b510      	push	{r4, lr}
 800ad12:	4b0b      	ldr	r3, [pc, #44]	; (800ad40 <global_stdio_init.part.0+0x30>)
 800ad14:	4c0b      	ldr	r4, [pc, #44]	; (800ad44 <global_stdio_init.part.0+0x34>)
 800ad16:	4a0c      	ldr	r2, [pc, #48]	; (800ad48 <global_stdio_init.part.0+0x38>)
 800ad18:	4620      	mov	r0, r4
 800ad1a:	601a      	str	r2, [r3, #0]
 800ad1c:	2104      	movs	r1, #4
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f7ff ff94 	bl	800ac4c <std>
 800ad24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ad28:	2201      	movs	r2, #1
 800ad2a:	2109      	movs	r1, #9
 800ad2c:	f7ff ff8e 	bl	800ac4c <std>
 800ad30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ad34:	2202      	movs	r2, #2
 800ad36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad3a:	2112      	movs	r1, #18
 800ad3c:	f7ff bf86 	b.w	800ac4c <std>
 800ad40:	20001904 	.word	0x20001904
 800ad44:	200017cc 	.word	0x200017cc
 800ad48:	0800acb9 	.word	0x0800acb9

0800ad4c <__sfp_lock_acquire>:
 800ad4c:	4801      	ldr	r0, [pc, #4]	; (800ad54 <__sfp_lock_acquire+0x8>)
 800ad4e:	f000 b910 	b.w	800af72 <__retarget_lock_acquire_recursive>
 800ad52:	bf00      	nop
 800ad54:	2000190d 	.word	0x2000190d

0800ad58 <__sfp_lock_release>:
 800ad58:	4801      	ldr	r0, [pc, #4]	; (800ad60 <__sfp_lock_release+0x8>)
 800ad5a:	f000 b90b 	b.w	800af74 <__retarget_lock_release_recursive>
 800ad5e:	bf00      	nop
 800ad60:	2000190d 	.word	0x2000190d

0800ad64 <__sinit>:
 800ad64:	b510      	push	{r4, lr}
 800ad66:	4604      	mov	r4, r0
 800ad68:	f7ff fff0 	bl	800ad4c <__sfp_lock_acquire>
 800ad6c:	6a23      	ldr	r3, [r4, #32]
 800ad6e:	b11b      	cbz	r3, 800ad78 <__sinit+0x14>
 800ad70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad74:	f7ff bff0 	b.w	800ad58 <__sfp_lock_release>
 800ad78:	4b04      	ldr	r3, [pc, #16]	; (800ad8c <__sinit+0x28>)
 800ad7a:	6223      	str	r3, [r4, #32]
 800ad7c:	4b04      	ldr	r3, [pc, #16]	; (800ad90 <__sinit+0x2c>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1f5      	bne.n	800ad70 <__sinit+0xc>
 800ad84:	f7ff ffc4 	bl	800ad10 <global_stdio_init.part.0>
 800ad88:	e7f2      	b.n	800ad70 <__sinit+0xc>
 800ad8a:	bf00      	nop
 800ad8c:	0800acd1 	.word	0x0800acd1
 800ad90:	20001904 	.word	0x20001904

0800ad94 <_fwalk_sglue>:
 800ad94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad98:	4607      	mov	r7, r0
 800ad9a:	4688      	mov	r8, r1
 800ad9c:	4614      	mov	r4, r2
 800ad9e:	2600      	movs	r6, #0
 800ada0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ada4:	f1b9 0901 	subs.w	r9, r9, #1
 800ada8:	d505      	bpl.n	800adb6 <_fwalk_sglue+0x22>
 800adaa:	6824      	ldr	r4, [r4, #0]
 800adac:	2c00      	cmp	r4, #0
 800adae:	d1f7      	bne.n	800ada0 <_fwalk_sglue+0xc>
 800adb0:	4630      	mov	r0, r6
 800adb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adb6:	89ab      	ldrh	r3, [r5, #12]
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d907      	bls.n	800adcc <_fwalk_sglue+0x38>
 800adbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adc0:	3301      	adds	r3, #1
 800adc2:	d003      	beq.n	800adcc <_fwalk_sglue+0x38>
 800adc4:	4629      	mov	r1, r5
 800adc6:	4638      	mov	r0, r7
 800adc8:	47c0      	blx	r8
 800adca:	4306      	orrs	r6, r0
 800adcc:	3568      	adds	r5, #104	; 0x68
 800adce:	e7e9      	b.n	800ada4 <_fwalk_sglue+0x10>

0800add0 <__sread>:
 800add0:	b510      	push	{r4, lr}
 800add2:	460c      	mov	r4, r1
 800add4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800add8:	f000 f86c 	bl	800aeb4 <_read_r>
 800addc:	2800      	cmp	r0, #0
 800adde:	bfab      	itete	ge
 800ade0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ade2:	89a3      	ldrhlt	r3, [r4, #12]
 800ade4:	181b      	addge	r3, r3, r0
 800ade6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800adea:	bfac      	ite	ge
 800adec:	6563      	strge	r3, [r4, #84]	; 0x54
 800adee:	81a3      	strhlt	r3, [r4, #12]
 800adf0:	bd10      	pop	{r4, pc}

0800adf2 <__swrite>:
 800adf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adf6:	461f      	mov	r7, r3
 800adf8:	898b      	ldrh	r3, [r1, #12]
 800adfa:	4605      	mov	r5, r0
 800adfc:	05db      	lsls	r3, r3, #23
 800adfe:	460c      	mov	r4, r1
 800ae00:	4616      	mov	r6, r2
 800ae02:	d505      	bpl.n	800ae10 <__swrite+0x1e>
 800ae04:	2302      	movs	r3, #2
 800ae06:	2200      	movs	r2, #0
 800ae08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae0c:	f000 f840 	bl	800ae90 <_lseek_r>
 800ae10:	89a3      	ldrh	r3, [r4, #12]
 800ae12:	4632      	mov	r2, r6
 800ae14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae18:	81a3      	strh	r3, [r4, #12]
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	463b      	mov	r3, r7
 800ae1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae26:	f000 b867 	b.w	800aef8 <_write_r>

0800ae2a <__sseek>:
 800ae2a:	b510      	push	{r4, lr}
 800ae2c:	460c      	mov	r4, r1
 800ae2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae32:	f000 f82d 	bl	800ae90 <_lseek_r>
 800ae36:	1c43      	adds	r3, r0, #1
 800ae38:	89a3      	ldrh	r3, [r4, #12]
 800ae3a:	bf15      	itete	ne
 800ae3c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae46:	81a3      	strheq	r3, [r4, #12]
 800ae48:	bf18      	it	ne
 800ae4a:	81a3      	strhne	r3, [r4, #12]
 800ae4c:	bd10      	pop	{r4, pc}

0800ae4e <__sclose>:
 800ae4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae52:	f000 b80d 	b.w	800ae70 <_close_r>

0800ae56 <memset>:
 800ae56:	4603      	mov	r3, r0
 800ae58:	4402      	add	r2, r0
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d100      	bne.n	800ae60 <memset+0xa>
 800ae5e:	4770      	bx	lr
 800ae60:	f803 1b01 	strb.w	r1, [r3], #1
 800ae64:	e7f9      	b.n	800ae5a <memset+0x4>
	...

0800ae68 <_localeconv_r>:
 800ae68:	4800      	ldr	r0, [pc, #0]	; (800ae6c <_localeconv_r+0x4>)
 800ae6a:	4770      	bx	lr
 800ae6c:	2000032c 	.word	0x2000032c

0800ae70 <_close_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	2300      	movs	r3, #0
 800ae74:	4d05      	ldr	r5, [pc, #20]	; (800ae8c <_close_r+0x1c>)
 800ae76:	4604      	mov	r4, r0
 800ae78:	4608      	mov	r0, r1
 800ae7a:	602b      	str	r3, [r5, #0]
 800ae7c:	f7f7 fbfa 	bl	8002674 <_close>
 800ae80:	1c43      	adds	r3, r0, #1
 800ae82:	d102      	bne.n	800ae8a <_close_r+0x1a>
 800ae84:	682b      	ldr	r3, [r5, #0]
 800ae86:	b103      	cbz	r3, 800ae8a <_close_r+0x1a>
 800ae88:	6023      	str	r3, [r4, #0]
 800ae8a:	bd38      	pop	{r3, r4, r5, pc}
 800ae8c:	20001908 	.word	0x20001908

0800ae90 <_lseek_r>:
 800ae90:	b538      	push	{r3, r4, r5, lr}
 800ae92:	4604      	mov	r4, r0
 800ae94:	4608      	mov	r0, r1
 800ae96:	4611      	mov	r1, r2
 800ae98:	2200      	movs	r2, #0
 800ae9a:	4d05      	ldr	r5, [pc, #20]	; (800aeb0 <_lseek_r+0x20>)
 800ae9c:	602a      	str	r2, [r5, #0]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	f7f7 fc0c 	bl	80026bc <_lseek>
 800aea4:	1c43      	adds	r3, r0, #1
 800aea6:	d102      	bne.n	800aeae <_lseek_r+0x1e>
 800aea8:	682b      	ldr	r3, [r5, #0]
 800aeaa:	b103      	cbz	r3, 800aeae <_lseek_r+0x1e>
 800aeac:	6023      	str	r3, [r4, #0]
 800aeae:	bd38      	pop	{r3, r4, r5, pc}
 800aeb0:	20001908 	.word	0x20001908

0800aeb4 <_read_r>:
 800aeb4:	b538      	push	{r3, r4, r5, lr}
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	4608      	mov	r0, r1
 800aeba:	4611      	mov	r1, r2
 800aebc:	2200      	movs	r2, #0
 800aebe:	4d05      	ldr	r5, [pc, #20]	; (800aed4 <_read_r+0x20>)
 800aec0:	602a      	str	r2, [r5, #0]
 800aec2:	461a      	mov	r2, r3
 800aec4:	f7f7 fb9d 	bl	8002602 <_read>
 800aec8:	1c43      	adds	r3, r0, #1
 800aeca:	d102      	bne.n	800aed2 <_read_r+0x1e>
 800aecc:	682b      	ldr	r3, [r5, #0]
 800aece:	b103      	cbz	r3, 800aed2 <_read_r+0x1e>
 800aed0:	6023      	str	r3, [r4, #0]
 800aed2:	bd38      	pop	{r3, r4, r5, pc}
 800aed4:	20001908 	.word	0x20001908

0800aed8 <_sbrk_r>:
 800aed8:	b538      	push	{r3, r4, r5, lr}
 800aeda:	2300      	movs	r3, #0
 800aedc:	4d05      	ldr	r5, [pc, #20]	; (800aef4 <_sbrk_r+0x1c>)
 800aede:	4604      	mov	r4, r0
 800aee0:	4608      	mov	r0, r1
 800aee2:	602b      	str	r3, [r5, #0]
 800aee4:	f7f7 fbf6 	bl	80026d4 <_sbrk>
 800aee8:	1c43      	adds	r3, r0, #1
 800aeea:	d102      	bne.n	800aef2 <_sbrk_r+0x1a>
 800aeec:	682b      	ldr	r3, [r5, #0]
 800aeee:	b103      	cbz	r3, 800aef2 <_sbrk_r+0x1a>
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	bd38      	pop	{r3, r4, r5, pc}
 800aef4:	20001908 	.word	0x20001908

0800aef8 <_write_r>:
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	4604      	mov	r4, r0
 800aefc:	4608      	mov	r0, r1
 800aefe:	4611      	mov	r1, r2
 800af00:	2200      	movs	r2, #0
 800af02:	4d05      	ldr	r5, [pc, #20]	; (800af18 <_write_r+0x20>)
 800af04:	602a      	str	r2, [r5, #0]
 800af06:	461a      	mov	r2, r3
 800af08:	f7f7 fb98 	bl	800263c <_write>
 800af0c:	1c43      	adds	r3, r0, #1
 800af0e:	d102      	bne.n	800af16 <_write_r+0x1e>
 800af10:	682b      	ldr	r3, [r5, #0]
 800af12:	b103      	cbz	r3, 800af16 <_write_r+0x1e>
 800af14:	6023      	str	r3, [r4, #0]
 800af16:	bd38      	pop	{r3, r4, r5, pc}
 800af18:	20001908 	.word	0x20001908

0800af1c <__errno>:
 800af1c:	4b01      	ldr	r3, [pc, #4]	; (800af24 <__errno+0x8>)
 800af1e:	6818      	ldr	r0, [r3, #0]
 800af20:	4770      	bx	lr
 800af22:	bf00      	nop
 800af24:	20000238 	.word	0x20000238

0800af28 <__libc_init_array>:
 800af28:	b570      	push	{r4, r5, r6, lr}
 800af2a:	2600      	movs	r6, #0
 800af2c:	4d0c      	ldr	r5, [pc, #48]	; (800af60 <__libc_init_array+0x38>)
 800af2e:	4c0d      	ldr	r4, [pc, #52]	; (800af64 <__libc_init_array+0x3c>)
 800af30:	1b64      	subs	r4, r4, r5
 800af32:	10a4      	asrs	r4, r4, #2
 800af34:	42a6      	cmp	r6, r4
 800af36:	d109      	bne.n	800af4c <__libc_init_array+0x24>
 800af38:	f002 f808 	bl	800cf4c <_init>
 800af3c:	2600      	movs	r6, #0
 800af3e:	4d0a      	ldr	r5, [pc, #40]	; (800af68 <__libc_init_array+0x40>)
 800af40:	4c0a      	ldr	r4, [pc, #40]	; (800af6c <__libc_init_array+0x44>)
 800af42:	1b64      	subs	r4, r4, r5
 800af44:	10a4      	asrs	r4, r4, #2
 800af46:	42a6      	cmp	r6, r4
 800af48:	d105      	bne.n	800af56 <__libc_init_array+0x2e>
 800af4a:	bd70      	pop	{r4, r5, r6, pc}
 800af4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800af50:	4798      	blx	r3
 800af52:	3601      	adds	r6, #1
 800af54:	e7ee      	b.n	800af34 <__libc_init_array+0xc>
 800af56:	f855 3b04 	ldr.w	r3, [r5], #4
 800af5a:	4798      	blx	r3
 800af5c:	3601      	adds	r6, #1
 800af5e:	e7f2      	b.n	800af46 <__libc_init_array+0x1e>
 800af60:	0800d744 	.word	0x0800d744
 800af64:	0800d744 	.word	0x0800d744
 800af68:	0800d744 	.word	0x0800d744
 800af6c:	0800d748 	.word	0x0800d748

0800af70 <__retarget_lock_init_recursive>:
 800af70:	4770      	bx	lr

0800af72 <__retarget_lock_acquire_recursive>:
 800af72:	4770      	bx	lr

0800af74 <__retarget_lock_release_recursive>:
 800af74:	4770      	bx	lr

0800af76 <memchr>:
 800af76:	4603      	mov	r3, r0
 800af78:	b510      	push	{r4, lr}
 800af7a:	b2c9      	uxtb	r1, r1
 800af7c:	4402      	add	r2, r0
 800af7e:	4293      	cmp	r3, r2
 800af80:	4618      	mov	r0, r3
 800af82:	d101      	bne.n	800af88 <memchr+0x12>
 800af84:	2000      	movs	r0, #0
 800af86:	e003      	b.n	800af90 <memchr+0x1a>
 800af88:	7804      	ldrb	r4, [r0, #0]
 800af8a:	3301      	adds	r3, #1
 800af8c:	428c      	cmp	r4, r1
 800af8e:	d1f6      	bne.n	800af7e <memchr+0x8>
 800af90:	bd10      	pop	{r4, pc}

0800af92 <quorem>:
 800af92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af96:	6903      	ldr	r3, [r0, #16]
 800af98:	690c      	ldr	r4, [r1, #16]
 800af9a:	4607      	mov	r7, r0
 800af9c:	42a3      	cmp	r3, r4
 800af9e:	db7f      	blt.n	800b0a0 <quorem+0x10e>
 800afa0:	3c01      	subs	r4, #1
 800afa2:	f100 0514 	add.w	r5, r0, #20
 800afa6:	f101 0814 	add.w	r8, r1, #20
 800afaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afae:	9301      	str	r3, [sp, #4]
 800afb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800afb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afb8:	3301      	adds	r3, #1
 800afba:	429a      	cmp	r2, r3
 800afbc:	fbb2 f6f3 	udiv	r6, r2, r3
 800afc0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800afc4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800afc8:	d331      	bcc.n	800b02e <quorem+0x9c>
 800afca:	f04f 0e00 	mov.w	lr, #0
 800afce:	4640      	mov	r0, r8
 800afd0:	46ac      	mov	ip, r5
 800afd2:	46f2      	mov	sl, lr
 800afd4:	f850 2b04 	ldr.w	r2, [r0], #4
 800afd8:	b293      	uxth	r3, r2
 800afda:	fb06 e303 	mla	r3, r6, r3, lr
 800afde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800afe2:	0c1a      	lsrs	r2, r3, #16
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	fb06 220e 	mla	r2, r6, lr, r2
 800afea:	ebaa 0303 	sub.w	r3, sl, r3
 800afee:	f8dc a000 	ldr.w	sl, [ip]
 800aff2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aff6:	fa1f fa8a 	uxth.w	sl, sl
 800affa:	4453      	add	r3, sl
 800affc:	f8dc a000 	ldr.w	sl, [ip]
 800b000:	b292      	uxth	r2, r2
 800b002:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b006:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b010:	4581      	cmp	r9, r0
 800b012:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b016:	f84c 3b04 	str.w	r3, [ip], #4
 800b01a:	d2db      	bcs.n	800afd4 <quorem+0x42>
 800b01c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b020:	b92b      	cbnz	r3, 800b02e <quorem+0x9c>
 800b022:	9b01      	ldr	r3, [sp, #4]
 800b024:	3b04      	subs	r3, #4
 800b026:	429d      	cmp	r5, r3
 800b028:	461a      	mov	r2, r3
 800b02a:	d32d      	bcc.n	800b088 <quorem+0xf6>
 800b02c:	613c      	str	r4, [r7, #16]
 800b02e:	4638      	mov	r0, r7
 800b030:	f001 f8e0 	bl	800c1f4 <__mcmp>
 800b034:	2800      	cmp	r0, #0
 800b036:	db23      	blt.n	800b080 <quorem+0xee>
 800b038:	4629      	mov	r1, r5
 800b03a:	2000      	movs	r0, #0
 800b03c:	3601      	adds	r6, #1
 800b03e:	f858 2b04 	ldr.w	r2, [r8], #4
 800b042:	f8d1 c000 	ldr.w	ip, [r1]
 800b046:	b293      	uxth	r3, r2
 800b048:	1ac3      	subs	r3, r0, r3
 800b04a:	0c12      	lsrs	r2, r2, #16
 800b04c:	fa1f f08c 	uxth.w	r0, ip
 800b050:	4403      	add	r3, r0
 800b052:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b056:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b060:	45c1      	cmp	r9, r8
 800b062:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b066:	f841 3b04 	str.w	r3, [r1], #4
 800b06a:	d2e8      	bcs.n	800b03e <quorem+0xac>
 800b06c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b070:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b074:	b922      	cbnz	r2, 800b080 <quorem+0xee>
 800b076:	3b04      	subs	r3, #4
 800b078:	429d      	cmp	r5, r3
 800b07a:	461a      	mov	r2, r3
 800b07c:	d30a      	bcc.n	800b094 <quorem+0x102>
 800b07e:	613c      	str	r4, [r7, #16]
 800b080:	4630      	mov	r0, r6
 800b082:	b003      	add	sp, #12
 800b084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b088:	6812      	ldr	r2, [r2, #0]
 800b08a:	3b04      	subs	r3, #4
 800b08c:	2a00      	cmp	r2, #0
 800b08e:	d1cd      	bne.n	800b02c <quorem+0x9a>
 800b090:	3c01      	subs	r4, #1
 800b092:	e7c8      	b.n	800b026 <quorem+0x94>
 800b094:	6812      	ldr	r2, [r2, #0]
 800b096:	3b04      	subs	r3, #4
 800b098:	2a00      	cmp	r2, #0
 800b09a:	d1f0      	bne.n	800b07e <quorem+0xec>
 800b09c:	3c01      	subs	r4, #1
 800b09e:	e7eb      	b.n	800b078 <quorem+0xe6>
 800b0a0:	2000      	movs	r0, #0
 800b0a2:	e7ee      	b.n	800b082 <quorem+0xf0>
 800b0a4:	0000      	movs	r0, r0
	...

0800b0a8 <_dtoa_r>:
 800b0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ac:	4616      	mov	r6, r2
 800b0ae:	461f      	mov	r7, r3
 800b0b0:	69c4      	ldr	r4, [r0, #28]
 800b0b2:	b099      	sub	sp, #100	; 0x64
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b0ba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b0be:	b974      	cbnz	r4, 800b0de <_dtoa_r+0x36>
 800b0c0:	2010      	movs	r0, #16
 800b0c2:	f7ff f8a9 	bl	800a218 <malloc>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	61e8      	str	r0, [r5, #28]
 800b0ca:	b920      	cbnz	r0, 800b0d6 <_dtoa_r+0x2e>
 800b0cc:	21ef      	movs	r1, #239	; 0xef
 800b0ce:	4bac      	ldr	r3, [pc, #688]	; (800b380 <_dtoa_r+0x2d8>)
 800b0d0:	48ac      	ldr	r0, [pc, #688]	; (800b384 <_dtoa_r+0x2dc>)
 800b0d2:	f001 fa45 	bl	800c560 <__assert_func>
 800b0d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0da:	6004      	str	r4, [r0, #0]
 800b0dc:	60c4      	str	r4, [r0, #12]
 800b0de:	69eb      	ldr	r3, [r5, #28]
 800b0e0:	6819      	ldr	r1, [r3, #0]
 800b0e2:	b151      	cbz	r1, 800b0fa <_dtoa_r+0x52>
 800b0e4:	685a      	ldr	r2, [r3, #4]
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	4093      	lsls	r3, r2
 800b0ea:	604a      	str	r2, [r1, #4]
 800b0ec:	608b      	str	r3, [r1, #8]
 800b0ee:	4628      	mov	r0, r5
 800b0f0:	f000 fe46 	bl	800bd80 <_Bfree>
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	69eb      	ldr	r3, [r5, #28]
 800b0f8:	601a      	str	r2, [r3, #0]
 800b0fa:	1e3b      	subs	r3, r7, #0
 800b0fc:	bfaf      	iteee	ge
 800b0fe:	2300      	movge	r3, #0
 800b100:	2201      	movlt	r2, #1
 800b102:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b106:	9305      	strlt	r3, [sp, #20]
 800b108:	bfa8      	it	ge
 800b10a:	f8c8 3000 	strge.w	r3, [r8]
 800b10e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b112:	4b9d      	ldr	r3, [pc, #628]	; (800b388 <_dtoa_r+0x2e0>)
 800b114:	bfb8      	it	lt
 800b116:	f8c8 2000 	strlt.w	r2, [r8]
 800b11a:	ea33 0309 	bics.w	r3, r3, r9
 800b11e:	d119      	bne.n	800b154 <_dtoa_r+0xac>
 800b120:	f242 730f 	movw	r3, #9999	; 0x270f
 800b124:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b126:	6013      	str	r3, [r2, #0]
 800b128:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b12c:	4333      	orrs	r3, r6
 800b12e:	f000 8589 	beq.w	800bc44 <_dtoa_r+0xb9c>
 800b132:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b134:	b953      	cbnz	r3, 800b14c <_dtoa_r+0xa4>
 800b136:	4b95      	ldr	r3, [pc, #596]	; (800b38c <_dtoa_r+0x2e4>)
 800b138:	e023      	b.n	800b182 <_dtoa_r+0xda>
 800b13a:	4b95      	ldr	r3, [pc, #596]	; (800b390 <_dtoa_r+0x2e8>)
 800b13c:	9303      	str	r3, [sp, #12]
 800b13e:	3308      	adds	r3, #8
 800b140:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b142:	6013      	str	r3, [r2, #0]
 800b144:	9803      	ldr	r0, [sp, #12]
 800b146:	b019      	add	sp, #100	; 0x64
 800b148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b14c:	4b8f      	ldr	r3, [pc, #572]	; (800b38c <_dtoa_r+0x2e4>)
 800b14e:	9303      	str	r3, [sp, #12]
 800b150:	3303      	adds	r3, #3
 800b152:	e7f5      	b.n	800b140 <_dtoa_r+0x98>
 800b154:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b158:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b15c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b160:	2200      	movs	r2, #0
 800b162:	2300      	movs	r3, #0
 800b164:	f7f5 fc5c 	bl	8000a20 <__aeabi_dcmpeq>
 800b168:	4680      	mov	r8, r0
 800b16a:	b160      	cbz	r0, 800b186 <_dtoa_r+0xde>
 800b16c:	2301      	movs	r3, #1
 800b16e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b170:	6013      	str	r3, [r2, #0]
 800b172:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b174:	2b00      	cmp	r3, #0
 800b176:	f000 8562 	beq.w	800bc3e <_dtoa_r+0xb96>
 800b17a:	4b86      	ldr	r3, [pc, #536]	; (800b394 <_dtoa_r+0x2ec>)
 800b17c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b17e:	6013      	str	r3, [r2, #0]
 800b180:	3b01      	subs	r3, #1
 800b182:	9303      	str	r3, [sp, #12]
 800b184:	e7de      	b.n	800b144 <_dtoa_r+0x9c>
 800b186:	ab16      	add	r3, sp, #88	; 0x58
 800b188:	9301      	str	r3, [sp, #4]
 800b18a:	ab17      	add	r3, sp, #92	; 0x5c
 800b18c:	9300      	str	r3, [sp, #0]
 800b18e:	4628      	mov	r0, r5
 800b190:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b194:	f001 f8d6 	bl	800c344 <__d2b>
 800b198:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b19c:	4682      	mov	sl, r0
 800b19e:	2c00      	cmp	r4, #0
 800b1a0:	d07e      	beq.n	800b2a0 <_dtoa_r+0x1f8>
 800b1a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b1a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1a8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b1ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1b0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b1b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b1b8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b1bc:	4619      	mov	r1, r3
 800b1be:	2200      	movs	r2, #0
 800b1c0:	4b75      	ldr	r3, [pc, #468]	; (800b398 <_dtoa_r+0x2f0>)
 800b1c2:	f7f5 f80d 	bl	80001e0 <__aeabi_dsub>
 800b1c6:	a368      	add	r3, pc, #416	; (adr r3, 800b368 <_dtoa_r+0x2c0>)
 800b1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1cc:	f7f5 f9c0 	bl	8000550 <__aeabi_dmul>
 800b1d0:	a367      	add	r3, pc, #412	; (adr r3, 800b370 <_dtoa_r+0x2c8>)
 800b1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d6:	f7f5 f805 	bl	80001e4 <__adddf3>
 800b1da:	4606      	mov	r6, r0
 800b1dc:	4620      	mov	r0, r4
 800b1de:	460f      	mov	r7, r1
 800b1e0:	f7f5 f94c 	bl	800047c <__aeabi_i2d>
 800b1e4:	a364      	add	r3, pc, #400	; (adr r3, 800b378 <_dtoa_r+0x2d0>)
 800b1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ea:	f7f5 f9b1 	bl	8000550 <__aeabi_dmul>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	4630      	mov	r0, r6
 800b1f4:	4639      	mov	r1, r7
 800b1f6:	f7f4 fff5 	bl	80001e4 <__adddf3>
 800b1fa:	4606      	mov	r6, r0
 800b1fc:	460f      	mov	r7, r1
 800b1fe:	f7f5 fc57 	bl	8000ab0 <__aeabi_d2iz>
 800b202:	2200      	movs	r2, #0
 800b204:	4683      	mov	fp, r0
 800b206:	2300      	movs	r3, #0
 800b208:	4630      	mov	r0, r6
 800b20a:	4639      	mov	r1, r7
 800b20c:	f7f5 fc12 	bl	8000a34 <__aeabi_dcmplt>
 800b210:	b148      	cbz	r0, 800b226 <_dtoa_r+0x17e>
 800b212:	4658      	mov	r0, fp
 800b214:	f7f5 f932 	bl	800047c <__aeabi_i2d>
 800b218:	4632      	mov	r2, r6
 800b21a:	463b      	mov	r3, r7
 800b21c:	f7f5 fc00 	bl	8000a20 <__aeabi_dcmpeq>
 800b220:	b908      	cbnz	r0, 800b226 <_dtoa_r+0x17e>
 800b222:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b226:	f1bb 0f16 	cmp.w	fp, #22
 800b22a:	d857      	bhi.n	800b2dc <_dtoa_r+0x234>
 800b22c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b230:	4b5a      	ldr	r3, [pc, #360]	; (800b39c <_dtoa_r+0x2f4>)
 800b232:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23a:	f7f5 fbfb 	bl	8000a34 <__aeabi_dcmplt>
 800b23e:	2800      	cmp	r0, #0
 800b240:	d04e      	beq.n	800b2e0 <_dtoa_r+0x238>
 800b242:	2300      	movs	r3, #0
 800b244:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b248:	930f      	str	r3, [sp, #60]	; 0x3c
 800b24a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b24c:	1b1b      	subs	r3, r3, r4
 800b24e:	1e5a      	subs	r2, r3, #1
 800b250:	bf46      	itte	mi
 800b252:	f1c3 0901 	rsbmi	r9, r3, #1
 800b256:	2300      	movmi	r3, #0
 800b258:	f04f 0900 	movpl.w	r9, #0
 800b25c:	9209      	str	r2, [sp, #36]	; 0x24
 800b25e:	bf48      	it	mi
 800b260:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b262:	f1bb 0f00 	cmp.w	fp, #0
 800b266:	db3d      	blt.n	800b2e4 <_dtoa_r+0x23c>
 800b268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b26a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800b26e:	445b      	add	r3, fp
 800b270:	9309      	str	r3, [sp, #36]	; 0x24
 800b272:	2300      	movs	r3, #0
 800b274:	930a      	str	r3, [sp, #40]	; 0x28
 800b276:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b278:	2b09      	cmp	r3, #9
 800b27a:	d867      	bhi.n	800b34c <_dtoa_r+0x2a4>
 800b27c:	2b05      	cmp	r3, #5
 800b27e:	bfc4      	itt	gt
 800b280:	3b04      	subgt	r3, #4
 800b282:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b284:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b286:	bfc8      	it	gt
 800b288:	2400      	movgt	r4, #0
 800b28a:	f1a3 0302 	sub.w	r3, r3, #2
 800b28e:	bfd8      	it	le
 800b290:	2401      	movle	r4, #1
 800b292:	2b03      	cmp	r3, #3
 800b294:	f200 8086 	bhi.w	800b3a4 <_dtoa_r+0x2fc>
 800b298:	e8df f003 	tbb	[pc, r3]
 800b29c:	5637392c 	.word	0x5637392c
 800b2a0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b2a4:	441c      	add	r4, r3
 800b2a6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b2aa:	2b20      	cmp	r3, #32
 800b2ac:	bfc1      	itttt	gt
 800b2ae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b2b2:	fa09 f903 	lslgt.w	r9, r9, r3
 800b2b6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800b2ba:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b2be:	bfd6      	itet	le
 800b2c0:	f1c3 0320 	rsble	r3, r3, #32
 800b2c4:	ea49 0003 	orrgt.w	r0, r9, r3
 800b2c8:	fa06 f003 	lslle.w	r0, r6, r3
 800b2cc:	f7f5 f8c6 	bl	800045c <__aeabi_ui2d>
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b2d6:	3c01      	subs	r4, #1
 800b2d8:	9213      	str	r2, [sp, #76]	; 0x4c
 800b2da:	e76f      	b.n	800b1bc <_dtoa_r+0x114>
 800b2dc:	2301      	movs	r3, #1
 800b2de:	e7b3      	b.n	800b248 <_dtoa_r+0x1a0>
 800b2e0:	900f      	str	r0, [sp, #60]	; 0x3c
 800b2e2:	e7b2      	b.n	800b24a <_dtoa_r+0x1a2>
 800b2e4:	f1cb 0300 	rsb	r3, fp, #0
 800b2e8:	930a      	str	r3, [sp, #40]	; 0x28
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	eba9 090b 	sub.w	r9, r9, fp
 800b2f0:	930e      	str	r3, [sp, #56]	; 0x38
 800b2f2:	e7c0      	b.n	800b276 <_dtoa_r+0x1ce>
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	dc55      	bgt.n	800b3aa <_dtoa_r+0x302>
 800b2fe:	2301      	movs	r3, #1
 800b300:	461a      	mov	r2, r3
 800b302:	9306      	str	r3, [sp, #24]
 800b304:	9308      	str	r3, [sp, #32]
 800b306:	9223      	str	r2, [sp, #140]	; 0x8c
 800b308:	e00b      	b.n	800b322 <_dtoa_r+0x27a>
 800b30a:	2301      	movs	r3, #1
 800b30c:	e7f3      	b.n	800b2f6 <_dtoa_r+0x24e>
 800b30e:	2300      	movs	r3, #0
 800b310:	930b      	str	r3, [sp, #44]	; 0x2c
 800b312:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b314:	445b      	add	r3, fp
 800b316:	9306      	str	r3, [sp, #24]
 800b318:	3301      	adds	r3, #1
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	9308      	str	r3, [sp, #32]
 800b31e:	bfb8      	it	lt
 800b320:	2301      	movlt	r3, #1
 800b322:	2100      	movs	r1, #0
 800b324:	2204      	movs	r2, #4
 800b326:	69e8      	ldr	r0, [r5, #28]
 800b328:	f102 0614 	add.w	r6, r2, #20
 800b32c:	429e      	cmp	r6, r3
 800b32e:	d940      	bls.n	800b3b2 <_dtoa_r+0x30a>
 800b330:	6041      	str	r1, [r0, #4]
 800b332:	4628      	mov	r0, r5
 800b334:	f000 fce4 	bl	800bd00 <_Balloc>
 800b338:	9003      	str	r0, [sp, #12]
 800b33a:	2800      	cmp	r0, #0
 800b33c:	d13c      	bne.n	800b3b8 <_dtoa_r+0x310>
 800b33e:	4602      	mov	r2, r0
 800b340:	f240 11af 	movw	r1, #431	; 0x1af
 800b344:	4b16      	ldr	r3, [pc, #88]	; (800b3a0 <_dtoa_r+0x2f8>)
 800b346:	e6c3      	b.n	800b0d0 <_dtoa_r+0x28>
 800b348:	2301      	movs	r3, #1
 800b34a:	e7e1      	b.n	800b310 <_dtoa_r+0x268>
 800b34c:	2401      	movs	r4, #1
 800b34e:	2300      	movs	r3, #0
 800b350:	940b      	str	r4, [sp, #44]	; 0x2c
 800b352:	9322      	str	r3, [sp, #136]	; 0x88
 800b354:	f04f 33ff 	mov.w	r3, #4294967295
 800b358:	2200      	movs	r2, #0
 800b35a:	9306      	str	r3, [sp, #24]
 800b35c:	9308      	str	r3, [sp, #32]
 800b35e:	2312      	movs	r3, #18
 800b360:	e7d1      	b.n	800b306 <_dtoa_r+0x25e>
 800b362:	bf00      	nop
 800b364:	f3af 8000 	nop.w
 800b368:	636f4361 	.word	0x636f4361
 800b36c:	3fd287a7 	.word	0x3fd287a7
 800b370:	8b60c8b3 	.word	0x8b60c8b3
 800b374:	3fc68a28 	.word	0x3fc68a28
 800b378:	509f79fb 	.word	0x509f79fb
 800b37c:	3fd34413 	.word	0x3fd34413
 800b380:	0800d40d 	.word	0x0800d40d
 800b384:	0800d424 	.word	0x0800d424
 800b388:	7ff00000 	.word	0x7ff00000
 800b38c:	0800d409 	.word	0x0800d409
 800b390:	0800d400 	.word	0x0800d400
 800b394:	0800d3dd 	.word	0x0800d3dd
 800b398:	3ff80000 	.word	0x3ff80000
 800b39c:	0800d510 	.word	0x0800d510
 800b3a0:	0800d47c 	.word	0x0800d47c
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3a8:	e7d4      	b.n	800b354 <_dtoa_r+0x2ac>
 800b3aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b3ac:	9306      	str	r3, [sp, #24]
 800b3ae:	9308      	str	r3, [sp, #32]
 800b3b0:	e7b7      	b.n	800b322 <_dtoa_r+0x27a>
 800b3b2:	3101      	adds	r1, #1
 800b3b4:	0052      	lsls	r2, r2, #1
 800b3b6:	e7b7      	b.n	800b328 <_dtoa_r+0x280>
 800b3b8:	69eb      	ldr	r3, [r5, #28]
 800b3ba:	9a03      	ldr	r2, [sp, #12]
 800b3bc:	601a      	str	r2, [r3, #0]
 800b3be:	9b08      	ldr	r3, [sp, #32]
 800b3c0:	2b0e      	cmp	r3, #14
 800b3c2:	f200 80a8 	bhi.w	800b516 <_dtoa_r+0x46e>
 800b3c6:	2c00      	cmp	r4, #0
 800b3c8:	f000 80a5 	beq.w	800b516 <_dtoa_r+0x46e>
 800b3cc:	f1bb 0f00 	cmp.w	fp, #0
 800b3d0:	dd34      	ble.n	800b43c <_dtoa_r+0x394>
 800b3d2:	4b9a      	ldr	r3, [pc, #616]	; (800b63c <_dtoa_r+0x594>)
 800b3d4:	f00b 020f 	and.w	r2, fp, #15
 800b3d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b3e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b3e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b3e8:	ea4f 142b 	mov.w	r4, fp, asr #4
 800b3ec:	d016      	beq.n	800b41c <_dtoa_r+0x374>
 800b3ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b3f2:	4b93      	ldr	r3, [pc, #588]	; (800b640 <_dtoa_r+0x598>)
 800b3f4:	2703      	movs	r7, #3
 800b3f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b3fa:	f7f5 f9d3 	bl	80007a4 <__aeabi_ddiv>
 800b3fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b402:	f004 040f 	and.w	r4, r4, #15
 800b406:	4e8e      	ldr	r6, [pc, #568]	; (800b640 <_dtoa_r+0x598>)
 800b408:	b954      	cbnz	r4, 800b420 <_dtoa_r+0x378>
 800b40a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b40e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b412:	f7f5 f9c7 	bl	80007a4 <__aeabi_ddiv>
 800b416:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b41a:	e029      	b.n	800b470 <_dtoa_r+0x3c8>
 800b41c:	2702      	movs	r7, #2
 800b41e:	e7f2      	b.n	800b406 <_dtoa_r+0x35e>
 800b420:	07e1      	lsls	r1, r4, #31
 800b422:	d508      	bpl.n	800b436 <_dtoa_r+0x38e>
 800b424:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b428:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b42c:	f7f5 f890 	bl	8000550 <__aeabi_dmul>
 800b430:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b434:	3701      	adds	r7, #1
 800b436:	1064      	asrs	r4, r4, #1
 800b438:	3608      	adds	r6, #8
 800b43a:	e7e5      	b.n	800b408 <_dtoa_r+0x360>
 800b43c:	f000 80a5 	beq.w	800b58a <_dtoa_r+0x4e2>
 800b440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b444:	f1cb 0400 	rsb	r4, fp, #0
 800b448:	4b7c      	ldr	r3, [pc, #496]	; (800b63c <_dtoa_r+0x594>)
 800b44a:	f004 020f 	and.w	r2, r4, #15
 800b44e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b456:	f7f5 f87b 	bl	8000550 <__aeabi_dmul>
 800b45a:	2702      	movs	r7, #2
 800b45c:	2300      	movs	r3, #0
 800b45e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b462:	4e77      	ldr	r6, [pc, #476]	; (800b640 <_dtoa_r+0x598>)
 800b464:	1124      	asrs	r4, r4, #4
 800b466:	2c00      	cmp	r4, #0
 800b468:	f040 8084 	bne.w	800b574 <_dtoa_r+0x4cc>
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d1d2      	bne.n	800b416 <_dtoa_r+0x36e>
 800b470:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b474:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b478:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	f000 8087 	beq.w	800b58e <_dtoa_r+0x4e6>
 800b480:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b484:	2200      	movs	r2, #0
 800b486:	4b6f      	ldr	r3, [pc, #444]	; (800b644 <_dtoa_r+0x59c>)
 800b488:	f7f5 fad4 	bl	8000a34 <__aeabi_dcmplt>
 800b48c:	2800      	cmp	r0, #0
 800b48e:	d07e      	beq.n	800b58e <_dtoa_r+0x4e6>
 800b490:	9b08      	ldr	r3, [sp, #32]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d07b      	beq.n	800b58e <_dtoa_r+0x4e6>
 800b496:	9b06      	ldr	r3, [sp, #24]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	dd38      	ble.n	800b50e <_dtoa_r+0x466>
 800b49c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	4b69      	ldr	r3, [pc, #420]	; (800b648 <_dtoa_r+0x5a0>)
 800b4a4:	f7f5 f854 	bl	8000550 <__aeabi_dmul>
 800b4a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4ac:	9c06      	ldr	r4, [sp, #24]
 800b4ae:	f10b 38ff 	add.w	r8, fp, #4294967295
 800b4b2:	3701      	adds	r7, #1
 800b4b4:	4638      	mov	r0, r7
 800b4b6:	f7f4 ffe1 	bl	800047c <__aeabi_i2d>
 800b4ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4be:	f7f5 f847 	bl	8000550 <__aeabi_dmul>
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	4b61      	ldr	r3, [pc, #388]	; (800b64c <_dtoa_r+0x5a4>)
 800b4c6:	f7f4 fe8d 	bl	80001e4 <__adddf3>
 800b4ca:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b4ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b4d2:	9611      	str	r6, [sp, #68]	; 0x44
 800b4d4:	2c00      	cmp	r4, #0
 800b4d6:	d15d      	bne.n	800b594 <_dtoa_r+0x4ec>
 800b4d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	4b5c      	ldr	r3, [pc, #368]	; (800b650 <_dtoa_r+0x5a8>)
 800b4e0:	f7f4 fe7e 	bl	80001e0 <__aeabi_dsub>
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b4ec:	4633      	mov	r3, r6
 800b4ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b4f0:	f7f5 fabe 	bl	8000a70 <__aeabi_dcmpgt>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	f040 8295 	bne.w	800ba24 <_dtoa_r+0x97c>
 800b4fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b500:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b504:	f7f5 fa96 	bl	8000a34 <__aeabi_dcmplt>
 800b508:	2800      	cmp	r0, #0
 800b50a:	f040 8289 	bne.w	800ba20 <_dtoa_r+0x978>
 800b50e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b512:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b516:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b518:	2b00      	cmp	r3, #0
 800b51a:	f2c0 8151 	blt.w	800b7c0 <_dtoa_r+0x718>
 800b51e:	f1bb 0f0e 	cmp.w	fp, #14
 800b522:	f300 814d 	bgt.w	800b7c0 <_dtoa_r+0x718>
 800b526:	4b45      	ldr	r3, [pc, #276]	; (800b63c <_dtoa_r+0x594>)
 800b528:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b52c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b530:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b534:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b536:	2b00      	cmp	r3, #0
 800b538:	f280 80da 	bge.w	800b6f0 <_dtoa_r+0x648>
 800b53c:	9b08      	ldr	r3, [sp, #32]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	f300 80d6 	bgt.w	800b6f0 <_dtoa_r+0x648>
 800b544:	f040 826b 	bne.w	800ba1e <_dtoa_r+0x976>
 800b548:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b54c:	2200      	movs	r2, #0
 800b54e:	4b40      	ldr	r3, [pc, #256]	; (800b650 <_dtoa_r+0x5a8>)
 800b550:	f7f4 fffe 	bl	8000550 <__aeabi_dmul>
 800b554:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b558:	f7f5 fa80 	bl	8000a5c <__aeabi_dcmpge>
 800b55c:	9c08      	ldr	r4, [sp, #32]
 800b55e:	4626      	mov	r6, r4
 800b560:	2800      	cmp	r0, #0
 800b562:	f040 8241 	bne.w	800b9e8 <_dtoa_r+0x940>
 800b566:	2331      	movs	r3, #49	; 0x31
 800b568:	9f03      	ldr	r7, [sp, #12]
 800b56a:	f10b 0b01 	add.w	fp, fp, #1
 800b56e:	f807 3b01 	strb.w	r3, [r7], #1
 800b572:	e23d      	b.n	800b9f0 <_dtoa_r+0x948>
 800b574:	07e2      	lsls	r2, r4, #31
 800b576:	d505      	bpl.n	800b584 <_dtoa_r+0x4dc>
 800b578:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b57c:	f7f4 ffe8 	bl	8000550 <__aeabi_dmul>
 800b580:	2301      	movs	r3, #1
 800b582:	3701      	adds	r7, #1
 800b584:	1064      	asrs	r4, r4, #1
 800b586:	3608      	adds	r6, #8
 800b588:	e76d      	b.n	800b466 <_dtoa_r+0x3be>
 800b58a:	2702      	movs	r7, #2
 800b58c:	e770      	b.n	800b470 <_dtoa_r+0x3c8>
 800b58e:	46d8      	mov	r8, fp
 800b590:	9c08      	ldr	r4, [sp, #32]
 800b592:	e78f      	b.n	800b4b4 <_dtoa_r+0x40c>
 800b594:	9903      	ldr	r1, [sp, #12]
 800b596:	4b29      	ldr	r3, [pc, #164]	; (800b63c <_dtoa_r+0x594>)
 800b598:	4421      	add	r1, r4
 800b59a:	9112      	str	r1, [sp, #72]	; 0x48
 800b59c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b59e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b5a2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b5a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b5aa:	2900      	cmp	r1, #0
 800b5ac:	d054      	beq.n	800b658 <_dtoa_r+0x5b0>
 800b5ae:	2000      	movs	r0, #0
 800b5b0:	4928      	ldr	r1, [pc, #160]	; (800b654 <_dtoa_r+0x5ac>)
 800b5b2:	f7f5 f8f7 	bl	80007a4 <__aeabi_ddiv>
 800b5b6:	463b      	mov	r3, r7
 800b5b8:	4632      	mov	r2, r6
 800b5ba:	f7f4 fe11 	bl	80001e0 <__aeabi_dsub>
 800b5be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b5c2:	9f03      	ldr	r7, [sp, #12]
 800b5c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5c8:	f7f5 fa72 	bl	8000ab0 <__aeabi_d2iz>
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	f7f4 ff55 	bl	800047c <__aeabi_i2d>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5da:	f7f4 fe01 	bl	80001e0 <__aeabi_dsub>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	3430      	adds	r4, #48	; 0x30
 800b5e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b5e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b5ec:	f807 4b01 	strb.w	r4, [r7], #1
 800b5f0:	f7f5 fa20 	bl	8000a34 <__aeabi_dcmplt>
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	d173      	bne.n	800b6e0 <_dtoa_r+0x638>
 800b5f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5fc:	2000      	movs	r0, #0
 800b5fe:	4911      	ldr	r1, [pc, #68]	; (800b644 <_dtoa_r+0x59c>)
 800b600:	f7f4 fdee 	bl	80001e0 <__aeabi_dsub>
 800b604:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b608:	f7f5 fa14 	bl	8000a34 <__aeabi_dcmplt>
 800b60c:	2800      	cmp	r0, #0
 800b60e:	f040 80b6 	bne.w	800b77e <_dtoa_r+0x6d6>
 800b612:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b614:	429f      	cmp	r7, r3
 800b616:	f43f af7a 	beq.w	800b50e <_dtoa_r+0x466>
 800b61a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b61e:	2200      	movs	r2, #0
 800b620:	4b09      	ldr	r3, [pc, #36]	; (800b648 <_dtoa_r+0x5a0>)
 800b622:	f7f4 ff95 	bl	8000550 <__aeabi_dmul>
 800b626:	2200      	movs	r2, #0
 800b628:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b62c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b630:	4b05      	ldr	r3, [pc, #20]	; (800b648 <_dtoa_r+0x5a0>)
 800b632:	f7f4 ff8d 	bl	8000550 <__aeabi_dmul>
 800b636:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b63a:	e7c3      	b.n	800b5c4 <_dtoa_r+0x51c>
 800b63c:	0800d510 	.word	0x0800d510
 800b640:	0800d4e8 	.word	0x0800d4e8
 800b644:	3ff00000 	.word	0x3ff00000
 800b648:	40240000 	.word	0x40240000
 800b64c:	401c0000 	.word	0x401c0000
 800b650:	40140000 	.word	0x40140000
 800b654:	3fe00000 	.word	0x3fe00000
 800b658:	4630      	mov	r0, r6
 800b65a:	4639      	mov	r1, r7
 800b65c:	f7f4 ff78 	bl	8000550 <__aeabi_dmul>
 800b660:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b662:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b666:	9c03      	ldr	r4, [sp, #12]
 800b668:	9314      	str	r3, [sp, #80]	; 0x50
 800b66a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b66e:	f7f5 fa1f 	bl	8000ab0 <__aeabi_d2iz>
 800b672:	9015      	str	r0, [sp, #84]	; 0x54
 800b674:	f7f4 ff02 	bl	800047c <__aeabi_i2d>
 800b678:	4602      	mov	r2, r0
 800b67a:	460b      	mov	r3, r1
 800b67c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b680:	f7f4 fdae 	bl	80001e0 <__aeabi_dsub>
 800b684:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b686:	4606      	mov	r6, r0
 800b688:	3330      	adds	r3, #48	; 0x30
 800b68a:	f804 3b01 	strb.w	r3, [r4], #1
 800b68e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b690:	460f      	mov	r7, r1
 800b692:	429c      	cmp	r4, r3
 800b694:	f04f 0200 	mov.w	r2, #0
 800b698:	d124      	bne.n	800b6e4 <_dtoa_r+0x63c>
 800b69a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b69e:	4baf      	ldr	r3, [pc, #700]	; (800b95c <_dtoa_r+0x8b4>)
 800b6a0:	f7f4 fda0 	bl	80001e4 <__adddf3>
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	4639      	mov	r1, r7
 800b6ac:	f7f5 f9e0 	bl	8000a70 <__aeabi_dcmpgt>
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	d163      	bne.n	800b77c <_dtoa_r+0x6d4>
 800b6b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	49a8      	ldr	r1, [pc, #672]	; (800b95c <_dtoa_r+0x8b4>)
 800b6bc:	f7f4 fd90 	bl	80001e0 <__aeabi_dsub>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	460b      	mov	r3, r1
 800b6c4:	4630      	mov	r0, r6
 800b6c6:	4639      	mov	r1, r7
 800b6c8:	f7f5 f9b4 	bl	8000a34 <__aeabi_dcmplt>
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	f43f af1e 	beq.w	800b50e <_dtoa_r+0x466>
 800b6d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b6d4:	1e7b      	subs	r3, r7, #1
 800b6d6:	9314      	str	r3, [sp, #80]	; 0x50
 800b6d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b6dc:	2b30      	cmp	r3, #48	; 0x30
 800b6de:	d0f8      	beq.n	800b6d2 <_dtoa_r+0x62a>
 800b6e0:	46c3      	mov	fp, r8
 800b6e2:	e03b      	b.n	800b75c <_dtoa_r+0x6b4>
 800b6e4:	4b9e      	ldr	r3, [pc, #632]	; (800b960 <_dtoa_r+0x8b8>)
 800b6e6:	f7f4 ff33 	bl	8000550 <__aeabi_dmul>
 800b6ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6ee:	e7bc      	b.n	800b66a <_dtoa_r+0x5c2>
 800b6f0:	9f03      	ldr	r7, [sp, #12]
 800b6f2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b6f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6fa:	4640      	mov	r0, r8
 800b6fc:	4649      	mov	r1, r9
 800b6fe:	f7f5 f851 	bl	80007a4 <__aeabi_ddiv>
 800b702:	f7f5 f9d5 	bl	8000ab0 <__aeabi_d2iz>
 800b706:	4604      	mov	r4, r0
 800b708:	f7f4 feb8 	bl	800047c <__aeabi_i2d>
 800b70c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b710:	f7f4 ff1e 	bl	8000550 <__aeabi_dmul>
 800b714:	4602      	mov	r2, r0
 800b716:	460b      	mov	r3, r1
 800b718:	4640      	mov	r0, r8
 800b71a:	4649      	mov	r1, r9
 800b71c:	f7f4 fd60 	bl	80001e0 <__aeabi_dsub>
 800b720:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b724:	f807 6b01 	strb.w	r6, [r7], #1
 800b728:	9e03      	ldr	r6, [sp, #12]
 800b72a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b72e:	1bbe      	subs	r6, r7, r6
 800b730:	45b4      	cmp	ip, r6
 800b732:	4602      	mov	r2, r0
 800b734:	460b      	mov	r3, r1
 800b736:	d136      	bne.n	800b7a6 <_dtoa_r+0x6fe>
 800b738:	f7f4 fd54 	bl	80001e4 <__adddf3>
 800b73c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b740:	4680      	mov	r8, r0
 800b742:	4689      	mov	r9, r1
 800b744:	f7f5 f994 	bl	8000a70 <__aeabi_dcmpgt>
 800b748:	bb58      	cbnz	r0, 800b7a2 <_dtoa_r+0x6fa>
 800b74a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b74e:	4640      	mov	r0, r8
 800b750:	4649      	mov	r1, r9
 800b752:	f7f5 f965 	bl	8000a20 <__aeabi_dcmpeq>
 800b756:	b108      	cbz	r0, 800b75c <_dtoa_r+0x6b4>
 800b758:	07e3      	lsls	r3, r4, #31
 800b75a:	d422      	bmi.n	800b7a2 <_dtoa_r+0x6fa>
 800b75c:	4651      	mov	r1, sl
 800b75e:	4628      	mov	r0, r5
 800b760:	f000 fb0e 	bl	800bd80 <_Bfree>
 800b764:	2300      	movs	r3, #0
 800b766:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b768:	703b      	strb	r3, [r7, #0]
 800b76a:	f10b 0301 	add.w	r3, fp, #1
 800b76e:	6013      	str	r3, [r2, #0]
 800b770:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b772:	2b00      	cmp	r3, #0
 800b774:	f43f ace6 	beq.w	800b144 <_dtoa_r+0x9c>
 800b778:	601f      	str	r7, [r3, #0]
 800b77a:	e4e3      	b.n	800b144 <_dtoa_r+0x9c>
 800b77c:	4627      	mov	r7, r4
 800b77e:	463b      	mov	r3, r7
 800b780:	461f      	mov	r7, r3
 800b782:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b786:	2a39      	cmp	r2, #57	; 0x39
 800b788:	d107      	bne.n	800b79a <_dtoa_r+0x6f2>
 800b78a:	9a03      	ldr	r2, [sp, #12]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d1f7      	bne.n	800b780 <_dtoa_r+0x6d8>
 800b790:	2230      	movs	r2, #48	; 0x30
 800b792:	9903      	ldr	r1, [sp, #12]
 800b794:	f108 0801 	add.w	r8, r8, #1
 800b798:	700a      	strb	r2, [r1, #0]
 800b79a:	781a      	ldrb	r2, [r3, #0]
 800b79c:	3201      	adds	r2, #1
 800b79e:	701a      	strb	r2, [r3, #0]
 800b7a0:	e79e      	b.n	800b6e0 <_dtoa_r+0x638>
 800b7a2:	46d8      	mov	r8, fp
 800b7a4:	e7eb      	b.n	800b77e <_dtoa_r+0x6d6>
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	4b6d      	ldr	r3, [pc, #436]	; (800b960 <_dtoa_r+0x8b8>)
 800b7aa:	f7f4 fed1 	bl	8000550 <__aeabi_dmul>
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	4680      	mov	r8, r0
 800b7b4:	4689      	mov	r9, r1
 800b7b6:	f7f5 f933 	bl	8000a20 <__aeabi_dcmpeq>
 800b7ba:	2800      	cmp	r0, #0
 800b7bc:	d09b      	beq.n	800b6f6 <_dtoa_r+0x64e>
 800b7be:	e7cd      	b.n	800b75c <_dtoa_r+0x6b4>
 800b7c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b7c2:	2a00      	cmp	r2, #0
 800b7c4:	f000 80c4 	beq.w	800b950 <_dtoa_r+0x8a8>
 800b7c8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b7ca:	2a01      	cmp	r2, #1
 800b7cc:	f300 80a8 	bgt.w	800b920 <_dtoa_r+0x878>
 800b7d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b7d2:	2a00      	cmp	r2, #0
 800b7d4:	f000 80a0 	beq.w	800b918 <_dtoa_r+0x870>
 800b7d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b7dc:	464f      	mov	r7, r9
 800b7de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b7e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7e2:	2101      	movs	r1, #1
 800b7e4:	441a      	add	r2, r3
 800b7e6:	4628      	mov	r0, r5
 800b7e8:	4499      	add	r9, r3
 800b7ea:	9209      	str	r2, [sp, #36]	; 0x24
 800b7ec:	f000 fb7e 	bl	800beec <__i2b>
 800b7f0:	4606      	mov	r6, r0
 800b7f2:	b15f      	cbz	r7, 800b80c <_dtoa_r+0x764>
 800b7f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	dd08      	ble.n	800b80c <_dtoa_r+0x764>
 800b7fa:	42bb      	cmp	r3, r7
 800b7fc:	bfa8      	it	ge
 800b7fe:	463b      	movge	r3, r7
 800b800:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b802:	eba9 0903 	sub.w	r9, r9, r3
 800b806:	1aff      	subs	r7, r7, r3
 800b808:	1ad3      	subs	r3, r2, r3
 800b80a:	9309      	str	r3, [sp, #36]	; 0x24
 800b80c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b80e:	b1f3      	cbz	r3, 800b84e <_dtoa_r+0x7a6>
 800b810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b812:	2b00      	cmp	r3, #0
 800b814:	f000 80a0 	beq.w	800b958 <_dtoa_r+0x8b0>
 800b818:	2c00      	cmp	r4, #0
 800b81a:	dd10      	ble.n	800b83e <_dtoa_r+0x796>
 800b81c:	4631      	mov	r1, r6
 800b81e:	4622      	mov	r2, r4
 800b820:	4628      	mov	r0, r5
 800b822:	f000 fc21 	bl	800c068 <__pow5mult>
 800b826:	4652      	mov	r2, sl
 800b828:	4601      	mov	r1, r0
 800b82a:	4606      	mov	r6, r0
 800b82c:	4628      	mov	r0, r5
 800b82e:	f000 fb73 	bl	800bf18 <__multiply>
 800b832:	4680      	mov	r8, r0
 800b834:	4651      	mov	r1, sl
 800b836:	4628      	mov	r0, r5
 800b838:	f000 faa2 	bl	800bd80 <_Bfree>
 800b83c:	46c2      	mov	sl, r8
 800b83e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b840:	1b1a      	subs	r2, r3, r4
 800b842:	d004      	beq.n	800b84e <_dtoa_r+0x7a6>
 800b844:	4651      	mov	r1, sl
 800b846:	4628      	mov	r0, r5
 800b848:	f000 fc0e 	bl	800c068 <__pow5mult>
 800b84c:	4682      	mov	sl, r0
 800b84e:	2101      	movs	r1, #1
 800b850:	4628      	mov	r0, r5
 800b852:	f000 fb4b 	bl	800beec <__i2b>
 800b856:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b858:	4604      	mov	r4, r0
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	f340 8082 	ble.w	800b964 <_dtoa_r+0x8bc>
 800b860:	461a      	mov	r2, r3
 800b862:	4601      	mov	r1, r0
 800b864:	4628      	mov	r0, r5
 800b866:	f000 fbff 	bl	800c068 <__pow5mult>
 800b86a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b86c:	4604      	mov	r4, r0
 800b86e:	2b01      	cmp	r3, #1
 800b870:	dd7b      	ble.n	800b96a <_dtoa_r+0x8c2>
 800b872:	f04f 0800 	mov.w	r8, #0
 800b876:	6923      	ldr	r3, [r4, #16]
 800b878:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b87c:	6918      	ldr	r0, [r3, #16]
 800b87e:	f000 fae7 	bl	800be50 <__hi0bits>
 800b882:	f1c0 0020 	rsb	r0, r0, #32
 800b886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b888:	4418      	add	r0, r3
 800b88a:	f010 001f 	ands.w	r0, r0, #31
 800b88e:	f000 8092 	beq.w	800b9b6 <_dtoa_r+0x90e>
 800b892:	f1c0 0320 	rsb	r3, r0, #32
 800b896:	2b04      	cmp	r3, #4
 800b898:	f340 8085 	ble.w	800b9a6 <_dtoa_r+0x8fe>
 800b89c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b89e:	f1c0 001c 	rsb	r0, r0, #28
 800b8a2:	4403      	add	r3, r0
 800b8a4:	4481      	add	r9, r0
 800b8a6:	4407      	add	r7, r0
 800b8a8:	9309      	str	r3, [sp, #36]	; 0x24
 800b8aa:	f1b9 0f00 	cmp.w	r9, #0
 800b8ae:	dd05      	ble.n	800b8bc <_dtoa_r+0x814>
 800b8b0:	4651      	mov	r1, sl
 800b8b2:	464a      	mov	r2, r9
 800b8b4:	4628      	mov	r0, r5
 800b8b6:	f000 fc31 	bl	800c11c <__lshift>
 800b8ba:	4682      	mov	sl, r0
 800b8bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	dd05      	ble.n	800b8ce <_dtoa_r+0x826>
 800b8c2:	4621      	mov	r1, r4
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	4628      	mov	r0, r5
 800b8c8:	f000 fc28 	bl	800c11c <__lshift>
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d072      	beq.n	800b9ba <_dtoa_r+0x912>
 800b8d4:	4621      	mov	r1, r4
 800b8d6:	4650      	mov	r0, sl
 800b8d8:	f000 fc8c 	bl	800c1f4 <__mcmp>
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	da6c      	bge.n	800b9ba <_dtoa_r+0x912>
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	4651      	mov	r1, sl
 800b8e4:	220a      	movs	r2, #10
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	f000 fa6c 	bl	800bdc4 <__multadd>
 800b8ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8ee:	4682      	mov	sl, r0
 800b8f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	f000 81ac 	beq.w	800bc52 <_dtoa_r+0xbaa>
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	4631      	mov	r1, r6
 800b8fe:	220a      	movs	r2, #10
 800b900:	4628      	mov	r0, r5
 800b902:	f000 fa5f 	bl	800bdc4 <__multadd>
 800b906:	9b06      	ldr	r3, [sp, #24]
 800b908:	4606      	mov	r6, r0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	f300 8093 	bgt.w	800ba36 <_dtoa_r+0x98e>
 800b910:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b912:	2b02      	cmp	r3, #2
 800b914:	dc59      	bgt.n	800b9ca <_dtoa_r+0x922>
 800b916:	e08e      	b.n	800ba36 <_dtoa_r+0x98e>
 800b918:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b91a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b91e:	e75d      	b.n	800b7dc <_dtoa_r+0x734>
 800b920:	9b08      	ldr	r3, [sp, #32]
 800b922:	1e5c      	subs	r4, r3, #1
 800b924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b926:	42a3      	cmp	r3, r4
 800b928:	bfbf      	itttt	lt
 800b92a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b92c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800b92e:	1ae3      	sublt	r3, r4, r3
 800b930:	18d2      	addlt	r2, r2, r3
 800b932:	bfa8      	it	ge
 800b934:	1b1c      	subge	r4, r3, r4
 800b936:	9b08      	ldr	r3, [sp, #32]
 800b938:	bfbe      	ittt	lt
 800b93a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b93c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800b93e:	2400      	movlt	r4, #0
 800b940:	2b00      	cmp	r3, #0
 800b942:	bfb5      	itete	lt
 800b944:	eba9 0703 	sublt.w	r7, r9, r3
 800b948:	464f      	movge	r7, r9
 800b94a:	2300      	movlt	r3, #0
 800b94c:	9b08      	ldrge	r3, [sp, #32]
 800b94e:	e747      	b.n	800b7e0 <_dtoa_r+0x738>
 800b950:	464f      	mov	r7, r9
 800b952:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b954:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b956:	e74c      	b.n	800b7f2 <_dtoa_r+0x74a>
 800b958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b95a:	e773      	b.n	800b844 <_dtoa_r+0x79c>
 800b95c:	3fe00000 	.word	0x3fe00000
 800b960:	40240000 	.word	0x40240000
 800b964:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b966:	2b01      	cmp	r3, #1
 800b968:	dc18      	bgt.n	800b99c <_dtoa_r+0x8f4>
 800b96a:	9b04      	ldr	r3, [sp, #16]
 800b96c:	b9b3      	cbnz	r3, 800b99c <_dtoa_r+0x8f4>
 800b96e:	9b05      	ldr	r3, [sp, #20]
 800b970:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b974:	b993      	cbnz	r3, 800b99c <_dtoa_r+0x8f4>
 800b976:	9b05      	ldr	r3, [sp, #20]
 800b978:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b97c:	0d1b      	lsrs	r3, r3, #20
 800b97e:	051b      	lsls	r3, r3, #20
 800b980:	b17b      	cbz	r3, 800b9a2 <_dtoa_r+0x8fa>
 800b982:	f04f 0801 	mov.w	r8, #1
 800b986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b988:	f109 0901 	add.w	r9, r9, #1
 800b98c:	3301      	adds	r3, #1
 800b98e:	9309      	str	r3, [sp, #36]	; 0x24
 800b990:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b992:	2b00      	cmp	r3, #0
 800b994:	f47f af6f 	bne.w	800b876 <_dtoa_r+0x7ce>
 800b998:	2001      	movs	r0, #1
 800b99a:	e774      	b.n	800b886 <_dtoa_r+0x7de>
 800b99c:	f04f 0800 	mov.w	r8, #0
 800b9a0:	e7f6      	b.n	800b990 <_dtoa_r+0x8e8>
 800b9a2:	4698      	mov	r8, r3
 800b9a4:	e7f4      	b.n	800b990 <_dtoa_r+0x8e8>
 800b9a6:	d080      	beq.n	800b8aa <_dtoa_r+0x802>
 800b9a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9aa:	331c      	adds	r3, #28
 800b9ac:	441a      	add	r2, r3
 800b9ae:	4499      	add	r9, r3
 800b9b0:	441f      	add	r7, r3
 800b9b2:	9209      	str	r2, [sp, #36]	; 0x24
 800b9b4:	e779      	b.n	800b8aa <_dtoa_r+0x802>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	e7f6      	b.n	800b9a8 <_dtoa_r+0x900>
 800b9ba:	9b08      	ldr	r3, [sp, #32]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	dc34      	bgt.n	800ba2a <_dtoa_r+0x982>
 800b9c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b9c2:	2b02      	cmp	r3, #2
 800b9c4:	dd31      	ble.n	800ba2a <_dtoa_r+0x982>
 800b9c6:	9b08      	ldr	r3, [sp, #32]
 800b9c8:	9306      	str	r3, [sp, #24]
 800b9ca:	9b06      	ldr	r3, [sp, #24]
 800b9cc:	b963      	cbnz	r3, 800b9e8 <_dtoa_r+0x940>
 800b9ce:	4621      	mov	r1, r4
 800b9d0:	2205      	movs	r2, #5
 800b9d2:	4628      	mov	r0, r5
 800b9d4:	f000 f9f6 	bl	800bdc4 <__multadd>
 800b9d8:	4601      	mov	r1, r0
 800b9da:	4604      	mov	r4, r0
 800b9dc:	4650      	mov	r0, sl
 800b9de:	f000 fc09 	bl	800c1f4 <__mcmp>
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	f73f adbf 	bgt.w	800b566 <_dtoa_r+0x4be>
 800b9e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b9ea:	9f03      	ldr	r7, [sp, #12]
 800b9ec:	ea6f 0b03 	mvn.w	fp, r3
 800b9f0:	f04f 0800 	mov.w	r8, #0
 800b9f4:	4621      	mov	r1, r4
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	f000 f9c2 	bl	800bd80 <_Bfree>
 800b9fc:	2e00      	cmp	r6, #0
 800b9fe:	f43f aead 	beq.w	800b75c <_dtoa_r+0x6b4>
 800ba02:	f1b8 0f00 	cmp.w	r8, #0
 800ba06:	d005      	beq.n	800ba14 <_dtoa_r+0x96c>
 800ba08:	45b0      	cmp	r8, r6
 800ba0a:	d003      	beq.n	800ba14 <_dtoa_r+0x96c>
 800ba0c:	4641      	mov	r1, r8
 800ba0e:	4628      	mov	r0, r5
 800ba10:	f000 f9b6 	bl	800bd80 <_Bfree>
 800ba14:	4631      	mov	r1, r6
 800ba16:	4628      	mov	r0, r5
 800ba18:	f000 f9b2 	bl	800bd80 <_Bfree>
 800ba1c:	e69e      	b.n	800b75c <_dtoa_r+0x6b4>
 800ba1e:	2400      	movs	r4, #0
 800ba20:	4626      	mov	r6, r4
 800ba22:	e7e1      	b.n	800b9e8 <_dtoa_r+0x940>
 800ba24:	46c3      	mov	fp, r8
 800ba26:	4626      	mov	r6, r4
 800ba28:	e59d      	b.n	800b566 <_dtoa_r+0x4be>
 800ba2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	f000 80c8 	beq.w	800bbc2 <_dtoa_r+0xb1a>
 800ba32:	9b08      	ldr	r3, [sp, #32]
 800ba34:	9306      	str	r3, [sp, #24]
 800ba36:	2f00      	cmp	r7, #0
 800ba38:	dd05      	ble.n	800ba46 <_dtoa_r+0x99e>
 800ba3a:	4631      	mov	r1, r6
 800ba3c:	463a      	mov	r2, r7
 800ba3e:	4628      	mov	r0, r5
 800ba40:	f000 fb6c 	bl	800c11c <__lshift>
 800ba44:	4606      	mov	r6, r0
 800ba46:	f1b8 0f00 	cmp.w	r8, #0
 800ba4a:	d05b      	beq.n	800bb04 <_dtoa_r+0xa5c>
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	6871      	ldr	r1, [r6, #4]
 800ba50:	f000 f956 	bl	800bd00 <_Balloc>
 800ba54:	4607      	mov	r7, r0
 800ba56:	b928      	cbnz	r0, 800ba64 <_dtoa_r+0x9bc>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ba5e:	4b81      	ldr	r3, [pc, #516]	; (800bc64 <_dtoa_r+0xbbc>)
 800ba60:	f7ff bb36 	b.w	800b0d0 <_dtoa_r+0x28>
 800ba64:	6932      	ldr	r2, [r6, #16]
 800ba66:	f106 010c 	add.w	r1, r6, #12
 800ba6a:	3202      	adds	r2, #2
 800ba6c:	0092      	lsls	r2, r2, #2
 800ba6e:	300c      	adds	r0, #12
 800ba70:	f000 fd68 	bl	800c544 <memcpy>
 800ba74:	2201      	movs	r2, #1
 800ba76:	4639      	mov	r1, r7
 800ba78:	4628      	mov	r0, r5
 800ba7a:	f000 fb4f 	bl	800c11c <__lshift>
 800ba7e:	46b0      	mov	r8, r6
 800ba80:	4606      	mov	r6, r0
 800ba82:	9b03      	ldr	r3, [sp, #12]
 800ba84:	9a03      	ldr	r2, [sp, #12]
 800ba86:	3301      	adds	r3, #1
 800ba88:	9308      	str	r3, [sp, #32]
 800ba8a:	9b06      	ldr	r3, [sp, #24]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba90:	9b04      	ldr	r3, [sp, #16]
 800ba92:	f003 0301 	and.w	r3, r3, #1
 800ba96:	930a      	str	r3, [sp, #40]	; 0x28
 800ba98:	9b08      	ldr	r3, [sp, #32]
 800ba9a:	4621      	mov	r1, r4
 800ba9c:	3b01      	subs	r3, #1
 800ba9e:	4650      	mov	r0, sl
 800baa0:	9304      	str	r3, [sp, #16]
 800baa2:	f7ff fa76 	bl	800af92 <quorem>
 800baa6:	4641      	mov	r1, r8
 800baa8:	9006      	str	r0, [sp, #24]
 800baaa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800baae:	4650      	mov	r0, sl
 800bab0:	f000 fba0 	bl	800c1f4 <__mcmp>
 800bab4:	4632      	mov	r2, r6
 800bab6:	9009      	str	r0, [sp, #36]	; 0x24
 800bab8:	4621      	mov	r1, r4
 800baba:	4628      	mov	r0, r5
 800babc:	f000 fbb6 	bl	800c22c <__mdiff>
 800bac0:	68c2      	ldr	r2, [r0, #12]
 800bac2:	4607      	mov	r7, r0
 800bac4:	bb02      	cbnz	r2, 800bb08 <_dtoa_r+0xa60>
 800bac6:	4601      	mov	r1, r0
 800bac8:	4650      	mov	r0, sl
 800baca:	f000 fb93 	bl	800c1f4 <__mcmp>
 800bace:	4602      	mov	r2, r0
 800bad0:	4639      	mov	r1, r7
 800bad2:	4628      	mov	r0, r5
 800bad4:	920c      	str	r2, [sp, #48]	; 0x30
 800bad6:	f000 f953 	bl	800bd80 <_Bfree>
 800bada:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800badc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bade:	9f08      	ldr	r7, [sp, #32]
 800bae0:	ea43 0102 	orr.w	r1, r3, r2
 800bae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bae6:	4319      	orrs	r1, r3
 800bae8:	d110      	bne.n	800bb0c <_dtoa_r+0xa64>
 800baea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800baee:	d029      	beq.n	800bb44 <_dtoa_r+0xa9c>
 800baf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	dd02      	ble.n	800bafc <_dtoa_r+0xa54>
 800baf6:	9b06      	ldr	r3, [sp, #24]
 800baf8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800bafc:	9b04      	ldr	r3, [sp, #16]
 800bafe:	f883 9000 	strb.w	r9, [r3]
 800bb02:	e777      	b.n	800b9f4 <_dtoa_r+0x94c>
 800bb04:	4630      	mov	r0, r6
 800bb06:	e7ba      	b.n	800ba7e <_dtoa_r+0x9d6>
 800bb08:	2201      	movs	r2, #1
 800bb0a:	e7e1      	b.n	800bad0 <_dtoa_r+0xa28>
 800bb0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	db04      	blt.n	800bb1c <_dtoa_r+0xa74>
 800bb12:	9922      	ldr	r1, [sp, #136]	; 0x88
 800bb14:	430b      	orrs	r3, r1
 800bb16:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bb18:	430b      	orrs	r3, r1
 800bb1a:	d120      	bne.n	800bb5e <_dtoa_r+0xab6>
 800bb1c:	2a00      	cmp	r2, #0
 800bb1e:	dded      	ble.n	800bafc <_dtoa_r+0xa54>
 800bb20:	4651      	mov	r1, sl
 800bb22:	2201      	movs	r2, #1
 800bb24:	4628      	mov	r0, r5
 800bb26:	f000 faf9 	bl	800c11c <__lshift>
 800bb2a:	4621      	mov	r1, r4
 800bb2c:	4682      	mov	sl, r0
 800bb2e:	f000 fb61 	bl	800c1f4 <__mcmp>
 800bb32:	2800      	cmp	r0, #0
 800bb34:	dc03      	bgt.n	800bb3e <_dtoa_r+0xa96>
 800bb36:	d1e1      	bne.n	800bafc <_dtoa_r+0xa54>
 800bb38:	f019 0f01 	tst.w	r9, #1
 800bb3c:	d0de      	beq.n	800bafc <_dtoa_r+0xa54>
 800bb3e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bb42:	d1d8      	bne.n	800baf6 <_dtoa_r+0xa4e>
 800bb44:	2339      	movs	r3, #57	; 0x39
 800bb46:	9a04      	ldr	r2, [sp, #16]
 800bb48:	7013      	strb	r3, [r2, #0]
 800bb4a:	463b      	mov	r3, r7
 800bb4c:	461f      	mov	r7, r3
 800bb4e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800bb52:	3b01      	subs	r3, #1
 800bb54:	2a39      	cmp	r2, #57	; 0x39
 800bb56:	d06b      	beq.n	800bc30 <_dtoa_r+0xb88>
 800bb58:	3201      	adds	r2, #1
 800bb5a:	701a      	strb	r2, [r3, #0]
 800bb5c:	e74a      	b.n	800b9f4 <_dtoa_r+0x94c>
 800bb5e:	2a00      	cmp	r2, #0
 800bb60:	dd07      	ble.n	800bb72 <_dtoa_r+0xaca>
 800bb62:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bb66:	d0ed      	beq.n	800bb44 <_dtoa_r+0xa9c>
 800bb68:	9a04      	ldr	r2, [sp, #16]
 800bb6a:	f109 0301 	add.w	r3, r9, #1
 800bb6e:	7013      	strb	r3, [r2, #0]
 800bb70:	e740      	b.n	800b9f4 <_dtoa_r+0x94c>
 800bb72:	9b08      	ldr	r3, [sp, #32]
 800bb74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bb76:	f803 9c01 	strb.w	r9, [r3, #-1]
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d042      	beq.n	800bc04 <_dtoa_r+0xb5c>
 800bb7e:	4651      	mov	r1, sl
 800bb80:	2300      	movs	r3, #0
 800bb82:	220a      	movs	r2, #10
 800bb84:	4628      	mov	r0, r5
 800bb86:	f000 f91d 	bl	800bdc4 <__multadd>
 800bb8a:	45b0      	cmp	r8, r6
 800bb8c:	4682      	mov	sl, r0
 800bb8e:	f04f 0300 	mov.w	r3, #0
 800bb92:	f04f 020a 	mov.w	r2, #10
 800bb96:	4641      	mov	r1, r8
 800bb98:	4628      	mov	r0, r5
 800bb9a:	d107      	bne.n	800bbac <_dtoa_r+0xb04>
 800bb9c:	f000 f912 	bl	800bdc4 <__multadd>
 800bba0:	4680      	mov	r8, r0
 800bba2:	4606      	mov	r6, r0
 800bba4:	9b08      	ldr	r3, [sp, #32]
 800bba6:	3301      	adds	r3, #1
 800bba8:	9308      	str	r3, [sp, #32]
 800bbaa:	e775      	b.n	800ba98 <_dtoa_r+0x9f0>
 800bbac:	f000 f90a 	bl	800bdc4 <__multadd>
 800bbb0:	4631      	mov	r1, r6
 800bbb2:	4680      	mov	r8, r0
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	220a      	movs	r2, #10
 800bbb8:	4628      	mov	r0, r5
 800bbba:	f000 f903 	bl	800bdc4 <__multadd>
 800bbbe:	4606      	mov	r6, r0
 800bbc0:	e7f0      	b.n	800bba4 <_dtoa_r+0xafc>
 800bbc2:	9b08      	ldr	r3, [sp, #32]
 800bbc4:	9306      	str	r3, [sp, #24]
 800bbc6:	9f03      	ldr	r7, [sp, #12]
 800bbc8:	4621      	mov	r1, r4
 800bbca:	4650      	mov	r0, sl
 800bbcc:	f7ff f9e1 	bl	800af92 <quorem>
 800bbd0:	9b03      	ldr	r3, [sp, #12]
 800bbd2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bbd6:	f807 9b01 	strb.w	r9, [r7], #1
 800bbda:	1afa      	subs	r2, r7, r3
 800bbdc:	9b06      	ldr	r3, [sp, #24]
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	dd07      	ble.n	800bbf2 <_dtoa_r+0xb4a>
 800bbe2:	4651      	mov	r1, sl
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	220a      	movs	r2, #10
 800bbe8:	4628      	mov	r0, r5
 800bbea:	f000 f8eb 	bl	800bdc4 <__multadd>
 800bbee:	4682      	mov	sl, r0
 800bbf0:	e7ea      	b.n	800bbc8 <_dtoa_r+0xb20>
 800bbf2:	9b06      	ldr	r3, [sp, #24]
 800bbf4:	f04f 0800 	mov.w	r8, #0
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	bfcc      	ite	gt
 800bbfc:	461f      	movgt	r7, r3
 800bbfe:	2701      	movle	r7, #1
 800bc00:	9b03      	ldr	r3, [sp, #12]
 800bc02:	441f      	add	r7, r3
 800bc04:	4651      	mov	r1, sl
 800bc06:	2201      	movs	r2, #1
 800bc08:	4628      	mov	r0, r5
 800bc0a:	f000 fa87 	bl	800c11c <__lshift>
 800bc0e:	4621      	mov	r1, r4
 800bc10:	4682      	mov	sl, r0
 800bc12:	f000 faef 	bl	800c1f4 <__mcmp>
 800bc16:	2800      	cmp	r0, #0
 800bc18:	dc97      	bgt.n	800bb4a <_dtoa_r+0xaa2>
 800bc1a:	d102      	bne.n	800bc22 <_dtoa_r+0xb7a>
 800bc1c:	f019 0f01 	tst.w	r9, #1
 800bc20:	d193      	bne.n	800bb4a <_dtoa_r+0xaa2>
 800bc22:	463b      	mov	r3, r7
 800bc24:	461f      	mov	r7, r3
 800bc26:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc2a:	2a30      	cmp	r2, #48	; 0x30
 800bc2c:	d0fa      	beq.n	800bc24 <_dtoa_r+0xb7c>
 800bc2e:	e6e1      	b.n	800b9f4 <_dtoa_r+0x94c>
 800bc30:	9a03      	ldr	r2, [sp, #12]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d18a      	bne.n	800bb4c <_dtoa_r+0xaa4>
 800bc36:	2331      	movs	r3, #49	; 0x31
 800bc38:	f10b 0b01 	add.w	fp, fp, #1
 800bc3c:	e797      	b.n	800bb6e <_dtoa_r+0xac6>
 800bc3e:	4b0a      	ldr	r3, [pc, #40]	; (800bc68 <_dtoa_r+0xbc0>)
 800bc40:	f7ff ba9f 	b.w	800b182 <_dtoa_r+0xda>
 800bc44:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	f47f aa77 	bne.w	800b13a <_dtoa_r+0x92>
 800bc4c:	4b07      	ldr	r3, [pc, #28]	; (800bc6c <_dtoa_r+0xbc4>)
 800bc4e:	f7ff ba98 	b.w	800b182 <_dtoa_r+0xda>
 800bc52:	9b06      	ldr	r3, [sp, #24]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	dcb6      	bgt.n	800bbc6 <_dtoa_r+0xb1e>
 800bc58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc5a:	2b02      	cmp	r3, #2
 800bc5c:	f73f aeb5 	bgt.w	800b9ca <_dtoa_r+0x922>
 800bc60:	e7b1      	b.n	800bbc6 <_dtoa_r+0xb1e>
 800bc62:	bf00      	nop
 800bc64:	0800d47c 	.word	0x0800d47c
 800bc68:	0800d3dc 	.word	0x0800d3dc
 800bc6c:	0800d400 	.word	0x0800d400

0800bc70 <_free_r>:
 800bc70:	b538      	push	{r3, r4, r5, lr}
 800bc72:	4605      	mov	r5, r0
 800bc74:	2900      	cmp	r1, #0
 800bc76:	d040      	beq.n	800bcfa <_free_r+0x8a>
 800bc78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc7c:	1f0c      	subs	r4, r1, #4
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	bfb8      	it	lt
 800bc82:	18e4      	addlt	r4, r4, r3
 800bc84:	f7fe fb78 	bl	800a378 <__malloc_lock>
 800bc88:	4a1c      	ldr	r2, [pc, #112]	; (800bcfc <_free_r+0x8c>)
 800bc8a:	6813      	ldr	r3, [r2, #0]
 800bc8c:	b933      	cbnz	r3, 800bc9c <_free_r+0x2c>
 800bc8e:	6063      	str	r3, [r4, #4]
 800bc90:	6014      	str	r4, [r2, #0]
 800bc92:	4628      	mov	r0, r5
 800bc94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc98:	f7fe bb74 	b.w	800a384 <__malloc_unlock>
 800bc9c:	42a3      	cmp	r3, r4
 800bc9e:	d908      	bls.n	800bcb2 <_free_r+0x42>
 800bca0:	6820      	ldr	r0, [r4, #0]
 800bca2:	1821      	adds	r1, r4, r0
 800bca4:	428b      	cmp	r3, r1
 800bca6:	bf01      	itttt	eq
 800bca8:	6819      	ldreq	r1, [r3, #0]
 800bcaa:	685b      	ldreq	r3, [r3, #4]
 800bcac:	1809      	addeq	r1, r1, r0
 800bcae:	6021      	streq	r1, [r4, #0]
 800bcb0:	e7ed      	b.n	800bc8e <_free_r+0x1e>
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	b10b      	cbz	r3, 800bcbc <_free_r+0x4c>
 800bcb8:	42a3      	cmp	r3, r4
 800bcba:	d9fa      	bls.n	800bcb2 <_free_r+0x42>
 800bcbc:	6811      	ldr	r1, [r2, #0]
 800bcbe:	1850      	adds	r0, r2, r1
 800bcc0:	42a0      	cmp	r0, r4
 800bcc2:	d10b      	bne.n	800bcdc <_free_r+0x6c>
 800bcc4:	6820      	ldr	r0, [r4, #0]
 800bcc6:	4401      	add	r1, r0
 800bcc8:	1850      	adds	r0, r2, r1
 800bcca:	4283      	cmp	r3, r0
 800bccc:	6011      	str	r1, [r2, #0]
 800bcce:	d1e0      	bne.n	800bc92 <_free_r+0x22>
 800bcd0:	6818      	ldr	r0, [r3, #0]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	4408      	add	r0, r1
 800bcd6:	6010      	str	r0, [r2, #0]
 800bcd8:	6053      	str	r3, [r2, #4]
 800bcda:	e7da      	b.n	800bc92 <_free_r+0x22>
 800bcdc:	d902      	bls.n	800bce4 <_free_r+0x74>
 800bcde:	230c      	movs	r3, #12
 800bce0:	602b      	str	r3, [r5, #0]
 800bce2:	e7d6      	b.n	800bc92 <_free_r+0x22>
 800bce4:	6820      	ldr	r0, [r4, #0]
 800bce6:	1821      	adds	r1, r4, r0
 800bce8:	428b      	cmp	r3, r1
 800bcea:	bf01      	itttt	eq
 800bcec:	6819      	ldreq	r1, [r3, #0]
 800bcee:	685b      	ldreq	r3, [r3, #4]
 800bcf0:	1809      	addeq	r1, r1, r0
 800bcf2:	6021      	streq	r1, [r4, #0]
 800bcf4:	6063      	str	r3, [r4, #4]
 800bcf6:	6054      	str	r4, [r2, #4]
 800bcf8:	e7cb      	b.n	800bc92 <_free_r+0x22>
 800bcfa:	bd38      	pop	{r3, r4, r5, pc}
 800bcfc:	200017c4 	.word	0x200017c4

0800bd00 <_Balloc>:
 800bd00:	b570      	push	{r4, r5, r6, lr}
 800bd02:	69c6      	ldr	r6, [r0, #28]
 800bd04:	4604      	mov	r4, r0
 800bd06:	460d      	mov	r5, r1
 800bd08:	b976      	cbnz	r6, 800bd28 <_Balloc+0x28>
 800bd0a:	2010      	movs	r0, #16
 800bd0c:	f7fe fa84 	bl	800a218 <malloc>
 800bd10:	4602      	mov	r2, r0
 800bd12:	61e0      	str	r0, [r4, #28]
 800bd14:	b920      	cbnz	r0, 800bd20 <_Balloc+0x20>
 800bd16:	216b      	movs	r1, #107	; 0x6b
 800bd18:	4b17      	ldr	r3, [pc, #92]	; (800bd78 <_Balloc+0x78>)
 800bd1a:	4818      	ldr	r0, [pc, #96]	; (800bd7c <_Balloc+0x7c>)
 800bd1c:	f000 fc20 	bl	800c560 <__assert_func>
 800bd20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd24:	6006      	str	r6, [r0, #0]
 800bd26:	60c6      	str	r6, [r0, #12]
 800bd28:	69e6      	ldr	r6, [r4, #28]
 800bd2a:	68f3      	ldr	r3, [r6, #12]
 800bd2c:	b183      	cbz	r3, 800bd50 <_Balloc+0x50>
 800bd2e:	69e3      	ldr	r3, [r4, #28]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd36:	b9b8      	cbnz	r0, 800bd68 <_Balloc+0x68>
 800bd38:	2101      	movs	r1, #1
 800bd3a:	fa01 f605 	lsl.w	r6, r1, r5
 800bd3e:	1d72      	adds	r2, r6, #5
 800bd40:	4620      	mov	r0, r4
 800bd42:	0092      	lsls	r2, r2, #2
 800bd44:	f000 fc2a 	bl	800c59c <_calloc_r>
 800bd48:	b160      	cbz	r0, 800bd64 <_Balloc+0x64>
 800bd4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd4e:	e00e      	b.n	800bd6e <_Balloc+0x6e>
 800bd50:	2221      	movs	r2, #33	; 0x21
 800bd52:	2104      	movs	r1, #4
 800bd54:	4620      	mov	r0, r4
 800bd56:	f000 fc21 	bl	800c59c <_calloc_r>
 800bd5a:	69e3      	ldr	r3, [r4, #28]
 800bd5c:	60f0      	str	r0, [r6, #12]
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1e4      	bne.n	800bd2e <_Balloc+0x2e>
 800bd64:	2000      	movs	r0, #0
 800bd66:	bd70      	pop	{r4, r5, r6, pc}
 800bd68:	6802      	ldr	r2, [r0, #0]
 800bd6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd6e:	2300      	movs	r3, #0
 800bd70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd74:	e7f7      	b.n	800bd66 <_Balloc+0x66>
 800bd76:	bf00      	nop
 800bd78:	0800d40d 	.word	0x0800d40d
 800bd7c:	0800d48d 	.word	0x0800d48d

0800bd80 <_Bfree>:
 800bd80:	b570      	push	{r4, r5, r6, lr}
 800bd82:	69c6      	ldr	r6, [r0, #28]
 800bd84:	4605      	mov	r5, r0
 800bd86:	460c      	mov	r4, r1
 800bd88:	b976      	cbnz	r6, 800bda8 <_Bfree+0x28>
 800bd8a:	2010      	movs	r0, #16
 800bd8c:	f7fe fa44 	bl	800a218 <malloc>
 800bd90:	4602      	mov	r2, r0
 800bd92:	61e8      	str	r0, [r5, #28]
 800bd94:	b920      	cbnz	r0, 800bda0 <_Bfree+0x20>
 800bd96:	218f      	movs	r1, #143	; 0x8f
 800bd98:	4b08      	ldr	r3, [pc, #32]	; (800bdbc <_Bfree+0x3c>)
 800bd9a:	4809      	ldr	r0, [pc, #36]	; (800bdc0 <_Bfree+0x40>)
 800bd9c:	f000 fbe0 	bl	800c560 <__assert_func>
 800bda0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bda4:	6006      	str	r6, [r0, #0]
 800bda6:	60c6      	str	r6, [r0, #12]
 800bda8:	b13c      	cbz	r4, 800bdba <_Bfree+0x3a>
 800bdaa:	69eb      	ldr	r3, [r5, #28]
 800bdac:	6862      	ldr	r2, [r4, #4]
 800bdae:	68db      	ldr	r3, [r3, #12]
 800bdb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bdb4:	6021      	str	r1, [r4, #0]
 800bdb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bdba:	bd70      	pop	{r4, r5, r6, pc}
 800bdbc:	0800d40d 	.word	0x0800d40d
 800bdc0:	0800d48d 	.word	0x0800d48d

0800bdc4 <__multadd>:
 800bdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc8:	4607      	mov	r7, r0
 800bdca:	460c      	mov	r4, r1
 800bdcc:	461e      	mov	r6, r3
 800bdce:	2000      	movs	r0, #0
 800bdd0:	690d      	ldr	r5, [r1, #16]
 800bdd2:	f101 0c14 	add.w	ip, r1, #20
 800bdd6:	f8dc 3000 	ldr.w	r3, [ip]
 800bdda:	3001      	adds	r0, #1
 800bddc:	b299      	uxth	r1, r3
 800bdde:	fb02 6101 	mla	r1, r2, r1, r6
 800bde2:	0c1e      	lsrs	r6, r3, #16
 800bde4:	0c0b      	lsrs	r3, r1, #16
 800bde6:	fb02 3306 	mla	r3, r2, r6, r3
 800bdea:	b289      	uxth	r1, r1
 800bdec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bdf0:	4285      	cmp	r5, r0
 800bdf2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bdf6:	f84c 1b04 	str.w	r1, [ip], #4
 800bdfa:	dcec      	bgt.n	800bdd6 <__multadd+0x12>
 800bdfc:	b30e      	cbz	r6, 800be42 <__multadd+0x7e>
 800bdfe:	68a3      	ldr	r3, [r4, #8]
 800be00:	42ab      	cmp	r3, r5
 800be02:	dc19      	bgt.n	800be38 <__multadd+0x74>
 800be04:	6861      	ldr	r1, [r4, #4]
 800be06:	4638      	mov	r0, r7
 800be08:	3101      	adds	r1, #1
 800be0a:	f7ff ff79 	bl	800bd00 <_Balloc>
 800be0e:	4680      	mov	r8, r0
 800be10:	b928      	cbnz	r0, 800be1e <__multadd+0x5a>
 800be12:	4602      	mov	r2, r0
 800be14:	21ba      	movs	r1, #186	; 0xba
 800be16:	4b0c      	ldr	r3, [pc, #48]	; (800be48 <__multadd+0x84>)
 800be18:	480c      	ldr	r0, [pc, #48]	; (800be4c <__multadd+0x88>)
 800be1a:	f000 fba1 	bl	800c560 <__assert_func>
 800be1e:	6922      	ldr	r2, [r4, #16]
 800be20:	f104 010c 	add.w	r1, r4, #12
 800be24:	3202      	adds	r2, #2
 800be26:	0092      	lsls	r2, r2, #2
 800be28:	300c      	adds	r0, #12
 800be2a:	f000 fb8b 	bl	800c544 <memcpy>
 800be2e:	4621      	mov	r1, r4
 800be30:	4638      	mov	r0, r7
 800be32:	f7ff ffa5 	bl	800bd80 <_Bfree>
 800be36:	4644      	mov	r4, r8
 800be38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be3c:	3501      	adds	r5, #1
 800be3e:	615e      	str	r6, [r3, #20]
 800be40:	6125      	str	r5, [r4, #16]
 800be42:	4620      	mov	r0, r4
 800be44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be48:	0800d47c 	.word	0x0800d47c
 800be4c:	0800d48d 	.word	0x0800d48d

0800be50 <__hi0bits>:
 800be50:	0c02      	lsrs	r2, r0, #16
 800be52:	0412      	lsls	r2, r2, #16
 800be54:	4603      	mov	r3, r0
 800be56:	b9ca      	cbnz	r2, 800be8c <__hi0bits+0x3c>
 800be58:	0403      	lsls	r3, r0, #16
 800be5a:	2010      	movs	r0, #16
 800be5c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800be60:	bf04      	itt	eq
 800be62:	021b      	lsleq	r3, r3, #8
 800be64:	3008      	addeq	r0, #8
 800be66:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800be6a:	bf04      	itt	eq
 800be6c:	011b      	lsleq	r3, r3, #4
 800be6e:	3004      	addeq	r0, #4
 800be70:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800be74:	bf04      	itt	eq
 800be76:	009b      	lsleq	r3, r3, #2
 800be78:	3002      	addeq	r0, #2
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	db05      	blt.n	800be8a <__hi0bits+0x3a>
 800be7e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800be82:	f100 0001 	add.w	r0, r0, #1
 800be86:	bf08      	it	eq
 800be88:	2020      	moveq	r0, #32
 800be8a:	4770      	bx	lr
 800be8c:	2000      	movs	r0, #0
 800be8e:	e7e5      	b.n	800be5c <__hi0bits+0xc>

0800be90 <__lo0bits>:
 800be90:	6803      	ldr	r3, [r0, #0]
 800be92:	4602      	mov	r2, r0
 800be94:	f013 0007 	ands.w	r0, r3, #7
 800be98:	d00b      	beq.n	800beb2 <__lo0bits+0x22>
 800be9a:	07d9      	lsls	r1, r3, #31
 800be9c:	d421      	bmi.n	800bee2 <__lo0bits+0x52>
 800be9e:	0798      	lsls	r0, r3, #30
 800bea0:	bf49      	itett	mi
 800bea2:	085b      	lsrmi	r3, r3, #1
 800bea4:	089b      	lsrpl	r3, r3, #2
 800bea6:	2001      	movmi	r0, #1
 800bea8:	6013      	strmi	r3, [r2, #0]
 800beaa:	bf5c      	itt	pl
 800beac:	2002      	movpl	r0, #2
 800beae:	6013      	strpl	r3, [r2, #0]
 800beb0:	4770      	bx	lr
 800beb2:	b299      	uxth	r1, r3
 800beb4:	b909      	cbnz	r1, 800beba <__lo0bits+0x2a>
 800beb6:	2010      	movs	r0, #16
 800beb8:	0c1b      	lsrs	r3, r3, #16
 800beba:	b2d9      	uxtb	r1, r3
 800bebc:	b909      	cbnz	r1, 800bec2 <__lo0bits+0x32>
 800bebe:	3008      	adds	r0, #8
 800bec0:	0a1b      	lsrs	r3, r3, #8
 800bec2:	0719      	lsls	r1, r3, #28
 800bec4:	bf04      	itt	eq
 800bec6:	091b      	lsreq	r3, r3, #4
 800bec8:	3004      	addeq	r0, #4
 800beca:	0799      	lsls	r1, r3, #30
 800becc:	bf04      	itt	eq
 800bece:	089b      	lsreq	r3, r3, #2
 800bed0:	3002      	addeq	r0, #2
 800bed2:	07d9      	lsls	r1, r3, #31
 800bed4:	d403      	bmi.n	800bede <__lo0bits+0x4e>
 800bed6:	085b      	lsrs	r3, r3, #1
 800bed8:	f100 0001 	add.w	r0, r0, #1
 800bedc:	d003      	beq.n	800bee6 <__lo0bits+0x56>
 800bede:	6013      	str	r3, [r2, #0]
 800bee0:	4770      	bx	lr
 800bee2:	2000      	movs	r0, #0
 800bee4:	4770      	bx	lr
 800bee6:	2020      	movs	r0, #32
 800bee8:	4770      	bx	lr
	...

0800beec <__i2b>:
 800beec:	b510      	push	{r4, lr}
 800beee:	460c      	mov	r4, r1
 800bef0:	2101      	movs	r1, #1
 800bef2:	f7ff ff05 	bl	800bd00 <_Balloc>
 800bef6:	4602      	mov	r2, r0
 800bef8:	b928      	cbnz	r0, 800bf06 <__i2b+0x1a>
 800befa:	f240 1145 	movw	r1, #325	; 0x145
 800befe:	4b04      	ldr	r3, [pc, #16]	; (800bf10 <__i2b+0x24>)
 800bf00:	4804      	ldr	r0, [pc, #16]	; (800bf14 <__i2b+0x28>)
 800bf02:	f000 fb2d 	bl	800c560 <__assert_func>
 800bf06:	2301      	movs	r3, #1
 800bf08:	6144      	str	r4, [r0, #20]
 800bf0a:	6103      	str	r3, [r0, #16]
 800bf0c:	bd10      	pop	{r4, pc}
 800bf0e:	bf00      	nop
 800bf10:	0800d47c 	.word	0x0800d47c
 800bf14:	0800d48d 	.word	0x0800d48d

0800bf18 <__multiply>:
 800bf18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf1c:	4691      	mov	r9, r2
 800bf1e:	690a      	ldr	r2, [r1, #16]
 800bf20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bf24:	460c      	mov	r4, r1
 800bf26:	429a      	cmp	r2, r3
 800bf28:	bfbe      	ittt	lt
 800bf2a:	460b      	movlt	r3, r1
 800bf2c:	464c      	movlt	r4, r9
 800bf2e:	4699      	movlt	r9, r3
 800bf30:	6927      	ldr	r7, [r4, #16]
 800bf32:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bf36:	68a3      	ldr	r3, [r4, #8]
 800bf38:	6861      	ldr	r1, [r4, #4]
 800bf3a:	eb07 060a 	add.w	r6, r7, sl
 800bf3e:	42b3      	cmp	r3, r6
 800bf40:	b085      	sub	sp, #20
 800bf42:	bfb8      	it	lt
 800bf44:	3101      	addlt	r1, #1
 800bf46:	f7ff fedb 	bl	800bd00 <_Balloc>
 800bf4a:	b930      	cbnz	r0, 800bf5a <__multiply+0x42>
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bf52:	4b43      	ldr	r3, [pc, #268]	; (800c060 <__multiply+0x148>)
 800bf54:	4843      	ldr	r0, [pc, #268]	; (800c064 <__multiply+0x14c>)
 800bf56:	f000 fb03 	bl	800c560 <__assert_func>
 800bf5a:	f100 0514 	add.w	r5, r0, #20
 800bf5e:	462b      	mov	r3, r5
 800bf60:	2200      	movs	r2, #0
 800bf62:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bf66:	4543      	cmp	r3, r8
 800bf68:	d321      	bcc.n	800bfae <__multiply+0x96>
 800bf6a:	f104 0314 	add.w	r3, r4, #20
 800bf6e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bf72:	f109 0314 	add.w	r3, r9, #20
 800bf76:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bf7a:	9202      	str	r2, [sp, #8]
 800bf7c:	1b3a      	subs	r2, r7, r4
 800bf7e:	3a15      	subs	r2, #21
 800bf80:	f022 0203 	bic.w	r2, r2, #3
 800bf84:	3204      	adds	r2, #4
 800bf86:	f104 0115 	add.w	r1, r4, #21
 800bf8a:	428f      	cmp	r7, r1
 800bf8c:	bf38      	it	cc
 800bf8e:	2204      	movcc	r2, #4
 800bf90:	9201      	str	r2, [sp, #4]
 800bf92:	9a02      	ldr	r2, [sp, #8]
 800bf94:	9303      	str	r3, [sp, #12]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d80c      	bhi.n	800bfb4 <__multiply+0x9c>
 800bf9a:	2e00      	cmp	r6, #0
 800bf9c:	dd03      	ble.n	800bfa6 <__multiply+0x8e>
 800bf9e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d05a      	beq.n	800c05c <__multiply+0x144>
 800bfa6:	6106      	str	r6, [r0, #16]
 800bfa8:	b005      	add	sp, #20
 800bfaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfae:	f843 2b04 	str.w	r2, [r3], #4
 800bfb2:	e7d8      	b.n	800bf66 <__multiply+0x4e>
 800bfb4:	f8b3 a000 	ldrh.w	sl, [r3]
 800bfb8:	f1ba 0f00 	cmp.w	sl, #0
 800bfbc:	d023      	beq.n	800c006 <__multiply+0xee>
 800bfbe:	46a9      	mov	r9, r5
 800bfc0:	f04f 0c00 	mov.w	ip, #0
 800bfc4:	f104 0e14 	add.w	lr, r4, #20
 800bfc8:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bfcc:	f8d9 1000 	ldr.w	r1, [r9]
 800bfd0:	fa1f fb82 	uxth.w	fp, r2
 800bfd4:	b289      	uxth	r1, r1
 800bfd6:	fb0a 110b 	mla	r1, sl, fp, r1
 800bfda:	4461      	add	r1, ip
 800bfdc:	f8d9 c000 	ldr.w	ip, [r9]
 800bfe0:	0c12      	lsrs	r2, r2, #16
 800bfe2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bfe6:	fb0a c202 	mla	r2, sl, r2, ip
 800bfea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bfee:	b289      	uxth	r1, r1
 800bff0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bff4:	4577      	cmp	r7, lr
 800bff6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bffa:	f849 1b04 	str.w	r1, [r9], #4
 800bffe:	d8e3      	bhi.n	800bfc8 <__multiply+0xb0>
 800c000:	9a01      	ldr	r2, [sp, #4]
 800c002:	f845 c002 	str.w	ip, [r5, r2]
 800c006:	9a03      	ldr	r2, [sp, #12]
 800c008:	3304      	adds	r3, #4
 800c00a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c00e:	f1b9 0f00 	cmp.w	r9, #0
 800c012:	d021      	beq.n	800c058 <__multiply+0x140>
 800c014:	46ae      	mov	lr, r5
 800c016:	f04f 0a00 	mov.w	sl, #0
 800c01a:	6829      	ldr	r1, [r5, #0]
 800c01c:	f104 0c14 	add.w	ip, r4, #20
 800c020:	f8bc b000 	ldrh.w	fp, [ip]
 800c024:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c028:	b289      	uxth	r1, r1
 800c02a:	fb09 220b 	mla	r2, r9, fp, r2
 800c02e:	4452      	add	r2, sl
 800c030:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c034:	f84e 1b04 	str.w	r1, [lr], #4
 800c038:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c03c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c040:	f8be 1000 	ldrh.w	r1, [lr]
 800c044:	4567      	cmp	r7, ip
 800c046:	fb09 110a 	mla	r1, r9, sl, r1
 800c04a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c04e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c052:	d8e5      	bhi.n	800c020 <__multiply+0x108>
 800c054:	9a01      	ldr	r2, [sp, #4]
 800c056:	50a9      	str	r1, [r5, r2]
 800c058:	3504      	adds	r5, #4
 800c05a:	e79a      	b.n	800bf92 <__multiply+0x7a>
 800c05c:	3e01      	subs	r6, #1
 800c05e:	e79c      	b.n	800bf9a <__multiply+0x82>
 800c060:	0800d47c 	.word	0x0800d47c
 800c064:	0800d48d 	.word	0x0800d48d

0800c068 <__pow5mult>:
 800c068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c06c:	4615      	mov	r5, r2
 800c06e:	f012 0203 	ands.w	r2, r2, #3
 800c072:	4606      	mov	r6, r0
 800c074:	460f      	mov	r7, r1
 800c076:	d007      	beq.n	800c088 <__pow5mult+0x20>
 800c078:	4c25      	ldr	r4, [pc, #148]	; (800c110 <__pow5mult+0xa8>)
 800c07a:	3a01      	subs	r2, #1
 800c07c:	2300      	movs	r3, #0
 800c07e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c082:	f7ff fe9f 	bl	800bdc4 <__multadd>
 800c086:	4607      	mov	r7, r0
 800c088:	10ad      	asrs	r5, r5, #2
 800c08a:	d03d      	beq.n	800c108 <__pow5mult+0xa0>
 800c08c:	69f4      	ldr	r4, [r6, #28]
 800c08e:	b97c      	cbnz	r4, 800c0b0 <__pow5mult+0x48>
 800c090:	2010      	movs	r0, #16
 800c092:	f7fe f8c1 	bl	800a218 <malloc>
 800c096:	4602      	mov	r2, r0
 800c098:	61f0      	str	r0, [r6, #28]
 800c09a:	b928      	cbnz	r0, 800c0a8 <__pow5mult+0x40>
 800c09c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c0a0:	4b1c      	ldr	r3, [pc, #112]	; (800c114 <__pow5mult+0xac>)
 800c0a2:	481d      	ldr	r0, [pc, #116]	; (800c118 <__pow5mult+0xb0>)
 800c0a4:	f000 fa5c 	bl	800c560 <__assert_func>
 800c0a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c0ac:	6004      	str	r4, [r0, #0]
 800c0ae:	60c4      	str	r4, [r0, #12]
 800c0b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c0b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c0b8:	b94c      	cbnz	r4, 800c0ce <__pow5mult+0x66>
 800c0ba:	f240 2171 	movw	r1, #625	; 0x271
 800c0be:	4630      	mov	r0, r6
 800c0c0:	f7ff ff14 	bl	800beec <__i2b>
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	f8c8 0008 	str.w	r0, [r8, #8]
 800c0cc:	6003      	str	r3, [r0, #0]
 800c0ce:	f04f 0900 	mov.w	r9, #0
 800c0d2:	07eb      	lsls	r3, r5, #31
 800c0d4:	d50a      	bpl.n	800c0ec <__pow5mult+0x84>
 800c0d6:	4639      	mov	r1, r7
 800c0d8:	4622      	mov	r2, r4
 800c0da:	4630      	mov	r0, r6
 800c0dc:	f7ff ff1c 	bl	800bf18 <__multiply>
 800c0e0:	4680      	mov	r8, r0
 800c0e2:	4639      	mov	r1, r7
 800c0e4:	4630      	mov	r0, r6
 800c0e6:	f7ff fe4b 	bl	800bd80 <_Bfree>
 800c0ea:	4647      	mov	r7, r8
 800c0ec:	106d      	asrs	r5, r5, #1
 800c0ee:	d00b      	beq.n	800c108 <__pow5mult+0xa0>
 800c0f0:	6820      	ldr	r0, [r4, #0]
 800c0f2:	b938      	cbnz	r0, 800c104 <__pow5mult+0x9c>
 800c0f4:	4622      	mov	r2, r4
 800c0f6:	4621      	mov	r1, r4
 800c0f8:	4630      	mov	r0, r6
 800c0fa:	f7ff ff0d 	bl	800bf18 <__multiply>
 800c0fe:	6020      	str	r0, [r4, #0]
 800c100:	f8c0 9000 	str.w	r9, [r0]
 800c104:	4604      	mov	r4, r0
 800c106:	e7e4      	b.n	800c0d2 <__pow5mult+0x6a>
 800c108:	4638      	mov	r0, r7
 800c10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c10e:	bf00      	nop
 800c110:	0800d5d8 	.word	0x0800d5d8
 800c114:	0800d40d 	.word	0x0800d40d
 800c118:	0800d48d 	.word	0x0800d48d

0800c11c <__lshift>:
 800c11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c120:	460c      	mov	r4, r1
 800c122:	4607      	mov	r7, r0
 800c124:	4691      	mov	r9, r2
 800c126:	6923      	ldr	r3, [r4, #16]
 800c128:	6849      	ldr	r1, [r1, #4]
 800c12a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c12e:	68a3      	ldr	r3, [r4, #8]
 800c130:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c134:	f108 0601 	add.w	r6, r8, #1
 800c138:	42b3      	cmp	r3, r6
 800c13a:	db0b      	blt.n	800c154 <__lshift+0x38>
 800c13c:	4638      	mov	r0, r7
 800c13e:	f7ff fddf 	bl	800bd00 <_Balloc>
 800c142:	4605      	mov	r5, r0
 800c144:	b948      	cbnz	r0, 800c15a <__lshift+0x3e>
 800c146:	4602      	mov	r2, r0
 800c148:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c14c:	4b27      	ldr	r3, [pc, #156]	; (800c1ec <__lshift+0xd0>)
 800c14e:	4828      	ldr	r0, [pc, #160]	; (800c1f0 <__lshift+0xd4>)
 800c150:	f000 fa06 	bl	800c560 <__assert_func>
 800c154:	3101      	adds	r1, #1
 800c156:	005b      	lsls	r3, r3, #1
 800c158:	e7ee      	b.n	800c138 <__lshift+0x1c>
 800c15a:	2300      	movs	r3, #0
 800c15c:	f100 0114 	add.w	r1, r0, #20
 800c160:	f100 0210 	add.w	r2, r0, #16
 800c164:	4618      	mov	r0, r3
 800c166:	4553      	cmp	r3, sl
 800c168:	db33      	blt.n	800c1d2 <__lshift+0xb6>
 800c16a:	6920      	ldr	r0, [r4, #16]
 800c16c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c170:	f104 0314 	add.w	r3, r4, #20
 800c174:	f019 091f 	ands.w	r9, r9, #31
 800c178:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c17c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c180:	d02b      	beq.n	800c1da <__lshift+0xbe>
 800c182:	468a      	mov	sl, r1
 800c184:	2200      	movs	r2, #0
 800c186:	f1c9 0e20 	rsb	lr, r9, #32
 800c18a:	6818      	ldr	r0, [r3, #0]
 800c18c:	fa00 f009 	lsl.w	r0, r0, r9
 800c190:	4310      	orrs	r0, r2
 800c192:	f84a 0b04 	str.w	r0, [sl], #4
 800c196:	f853 2b04 	ldr.w	r2, [r3], #4
 800c19a:	459c      	cmp	ip, r3
 800c19c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c1a0:	d8f3      	bhi.n	800c18a <__lshift+0x6e>
 800c1a2:	ebac 0304 	sub.w	r3, ip, r4
 800c1a6:	3b15      	subs	r3, #21
 800c1a8:	f023 0303 	bic.w	r3, r3, #3
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	f104 0015 	add.w	r0, r4, #21
 800c1b2:	4584      	cmp	ip, r0
 800c1b4:	bf38      	it	cc
 800c1b6:	2304      	movcc	r3, #4
 800c1b8:	50ca      	str	r2, [r1, r3]
 800c1ba:	b10a      	cbz	r2, 800c1c0 <__lshift+0xa4>
 800c1bc:	f108 0602 	add.w	r6, r8, #2
 800c1c0:	3e01      	subs	r6, #1
 800c1c2:	4638      	mov	r0, r7
 800c1c4:	4621      	mov	r1, r4
 800c1c6:	612e      	str	r6, [r5, #16]
 800c1c8:	f7ff fdda 	bl	800bd80 <_Bfree>
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1d2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	e7c5      	b.n	800c166 <__lshift+0x4a>
 800c1da:	3904      	subs	r1, #4
 800c1dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1e0:	459c      	cmp	ip, r3
 800c1e2:	f841 2f04 	str.w	r2, [r1, #4]!
 800c1e6:	d8f9      	bhi.n	800c1dc <__lshift+0xc0>
 800c1e8:	e7ea      	b.n	800c1c0 <__lshift+0xa4>
 800c1ea:	bf00      	nop
 800c1ec:	0800d47c 	.word	0x0800d47c
 800c1f0:	0800d48d 	.word	0x0800d48d

0800c1f4 <__mcmp>:
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	690a      	ldr	r2, [r1, #16]
 800c1f8:	6900      	ldr	r0, [r0, #16]
 800c1fa:	b530      	push	{r4, r5, lr}
 800c1fc:	1a80      	subs	r0, r0, r2
 800c1fe:	d10d      	bne.n	800c21c <__mcmp+0x28>
 800c200:	3314      	adds	r3, #20
 800c202:	3114      	adds	r1, #20
 800c204:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c208:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c20c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c210:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c214:	4295      	cmp	r5, r2
 800c216:	d002      	beq.n	800c21e <__mcmp+0x2a>
 800c218:	d304      	bcc.n	800c224 <__mcmp+0x30>
 800c21a:	2001      	movs	r0, #1
 800c21c:	bd30      	pop	{r4, r5, pc}
 800c21e:	42a3      	cmp	r3, r4
 800c220:	d3f4      	bcc.n	800c20c <__mcmp+0x18>
 800c222:	e7fb      	b.n	800c21c <__mcmp+0x28>
 800c224:	f04f 30ff 	mov.w	r0, #4294967295
 800c228:	e7f8      	b.n	800c21c <__mcmp+0x28>
	...

0800c22c <__mdiff>:
 800c22c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c230:	460d      	mov	r5, r1
 800c232:	4607      	mov	r7, r0
 800c234:	4611      	mov	r1, r2
 800c236:	4628      	mov	r0, r5
 800c238:	4614      	mov	r4, r2
 800c23a:	f7ff ffdb 	bl	800c1f4 <__mcmp>
 800c23e:	1e06      	subs	r6, r0, #0
 800c240:	d111      	bne.n	800c266 <__mdiff+0x3a>
 800c242:	4631      	mov	r1, r6
 800c244:	4638      	mov	r0, r7
 800c246:	f7ff fd5b 	bl	800bd00 <_Balloc>
 800c24a:	4602      	mov	r2, r0
 800c24c:	b928      	cbnz	r0, 800c25a <__mdiff+0x2e>
 800c24e:	f240 2137 	movw	r1, #567	; 0x237
 800c252:	4b3a      	ldr	r3, [pc, #232]	; (800c33c <__mdiff+0x110>)
 800c254:	483a      	ldr	r0, [pc, #232]	; (800c340 <__mdiff+0x114>)
 800c256:	f000 f983 	bl	800c560 <__assert_func>
 800c25a:	2301      	movs	r3, #1
 800c25c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c260:	4610      	mov	r0, r2
 800c262:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c266:	bfa4      	itt	ge
 800c268:	4623      	movge	r3, r4
 800c26a:	462c      	movge	r4, r5
 800c26c:	4638      	mov	r0, r7
 800c26e:	6861      	ldr	r1, [r4, #4]
 800c270:	bfa6      	itte	ge
 800c272:	461d      	movge	r5, r3
 800c274:	2600      	movge	r6, #0
 800c276:	2601      	movlt	r6, #1
 800c278:	f7ff fd42 	bl	800bd00 <_Balloc>
 800c27c:	4602      	mov	r2, r0
 800c27e:	b918      	cbnz	r0, 800c288 <__mdiff+0x5c>
 800c280:	f240 2145 	movw	r1, #581	; 0x245
 800c284:	4b2d      	ldr	r3, [pc, #180]	; (800c33c <__mdiff+0x110>)
 800c286:	e7e5      	b.n	800c254 <__mdiff+0x28>
 800c288:	f102 0814 	add.w	r8, r2, #20
 800c28c:	46c2      	mov	sl, r8
 800c28e:	f04f 0c00 	mov.w	ip, #0
 800c292:	6927      	ldr	r7, [r4, #16]
 800c294:	60c6      	str	r6, [r0, #12]
 800c296:	692e      	ldr	r6, [r5, #16]
 800c298:	f104 0014 	add.w	r0, r4, #20
 800c29c:	f105 0914 	add.w	r9, r5, #20
 800c2a0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c2a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c2a8:	3410      	adds	r4, #16
 800c2aa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c2ae:	f859 3b04 	ldr.w	r3, [r9], #4
 800c2b2:	fa1f f18b 	uxth.w	r1, fp
 800c2b6:	4461      	add	r1, ip
 800c2b8:	fa1f fc83 	uxth.w	ip, r3
 800c2bc:	0c1b      	lsrs	r3, r3, #16
 800c2be:	eba1 010c 	sub.w	r1, r1, ip
 800c2c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c2c6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c2ca:	b289      	uxth	r1, r1
 800c2cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c2d0:	454e      	cmp	r6, r9
 800c2d2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c2d6:	f84a 1b04 	str.w	r1, [sl], #4
 800c2da:	d8e6      	bhi.n	800c2aa <__mdiff+0x7e>
 800c2dc:	1b73      	subs	r3, r6, r5
 800c2de:	3b15      	subs	r3, #21
 800c2e0:	f023 0303 	bic.w	r3, r3, #3
 800c2e4:	3515      	adds	r5, #21
 800c2e6:	3304      	adds	r3, #4
 800c2e8:	42ae      	cmp	r6, r5
 800c2ea:	bf38      	it	cc
 800c2ec:	2304      	movcc	r3, #4
 800c2ee:	4418      	add	r0, r3
 800c2f0:	4443      	add	r3, r8
 800c2f2:	461e      	mov	r6, r3
 800c2f4:	4605      	mov	r5, r0
 800c2f6:	4575      	cmp	r5, lr
 800c2f8:	d30e      	bcc.n	800c318 <__mdiff+0xec>
 800c2fa:	f10e 0103 	add.w	r1, lr, #3
 800c2fe:	1a09      	subs	r1, r1, r0
 800c300:	f021 0103 	bic.w	r1, r1, #3
 800c304:	3803      	subs	r0, #3
 800c306:	4586      	cmp	lr, r0
 800c308:	bf38      	it	cc
 800c30a:	2100      	movcc	r1, #0
 800c30c:	440b      	add	r3, r1
 800c30e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c312:	b189      	cbz	r1, 800c338 <__mdiff+0x10c>
 800c314:	6117      	str	r7, [r2, #16]
 800c316:	e7a3      	b.n	800c260 <__mdiff+0x34>
 800c318:	f855 8b04 	ldr.w	r8, [r5], #4
 800c31c:	fa1f f188 	uxth.w	r1, r8
 800c320:	4461      	add	r1, ip
 800c322:	140c      	asrs	r4, r1, #16
 800c324:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c328:	b289      	uxth	r1, r1
 800c32a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c32e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c332:	f846 1b04 	str.w	r1, [r6], #4
 800c336:	e7de      	b.n	800c2f6 <__mdiff+0xca>
 800c338:	3f01      	subs	r7, #1
 800c33a:	e7e8      	b.n	800c30e <__mdiff+0xe2>
 800c33c:	0800d47c 	.word	0x0800d47c
 800c340:	0800d48d 	.word	0x0800d48d

0800c344 <__d2b>:
 800c344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c346:	2101      	movs	r1, #1
 800c348:	4617      	mov	r7, r2
 800c34a:	461c      	mov	r4, r3
 800c34c:	9e08      	ldr	r6, [sp, #32]
 800c34e:	f7ff fcd7 	bl	800bd00 <_Balloc>
 800c352:	4605      	mov	r5, r0
 800c354:	b930      	cbnz	r0, 800c364 <__d2b+0x20>
 800c356:	4602      	mov	r2, r0
 800c358:	f240 310f 	movw	r1, #783	; 0x30f
 800c35c:	4b22      	ldr	r3, [pc, #136]	; (800c3e8 <__d2b+0xa4>)
 800c35e:	4823      	ldr	r0, [pc, #140]	; (800c3ec <__d2b+0xa8>)
 800c360:	f000 f8fe 	bl	800c560 <__assert_func>
 800c364:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c368:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800c36c:	bb24      	cbnz	r4, 800c3b8 <__d2b+0x74>
 800c36e:	2f00      	cmp	r7, #0
 800c370:	9301      	str	r3, [sp, #4]
 800c372:	d026      	beq.n	800c3c2 <__d2b+0x7e>
 800c374:	4668      	mov	r0, sp
 800c376:	9700      	str	r7, [sp, #0]
 800c378:	f7ff fd8a 	bl	800be90 <__lo0bits>
 800c37c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c380:	b1e8      	cbz	r0, 800c3be <__d2b+0x7a>
 800c382:	f1c0 0320 	rsb	r3, r0, #32
 800c386:	fa02 f303 	lsl.w	r3, r2, r3
 800c38a:	430b      	orrs	r3, r1
 800c38c:	40c2      	lsrs	r2, r0
 800c38e:	616b      	str	r3, [r5, #20]
 800c390:	9201      	str	r2, [sp, #4]
 800c392:	9b01      	ldr	r3, [sp, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	bf14      	ite	ne
 800c398:	2102      	movne	r1, #2
 800c39a:	2101      	moveq	r1, #1
 800c39c:	61ab      	str	r3, [r5, #24]
 800c39e:	6129      	str	r1, [r5, #16]
 800c3a0:	b1bc      	cbz	r4, 800c3d2 <__d2b+0x8e>
 800c3a2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c3a6:	4404      	add	r4, r0
 800c3a8:	6034      	str	r4, [r6, #0]
 800c3aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c3ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3b0:	6018      	str	r0, [r3, #0]
 800c3b2:	4628      	mov	r0, r5
 800c3b4:	b003      	add	sp, #12
 800c3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c3bc:	e7d7      	b.n	800c36e <__d2b+0x2a>
 800c3be:	6169      	str	r1, [r5, #20]
 800c3c0:	e7e7      	b.n	800c392 <__d2b+0x4e>
 800c3c2:	a801      	add	r0, sp, #4
 800c3c4:	f7ff fd64 	bl	800be90 <__lo0bits>
 800c3c8:	9b01      	ldr	r3, [sp, #4]
 800c3ca:	2101      	movs	r1, #1
 800c3cc:	616b      	str	r3, [r5, #20]
 800c3ce:	3020      	adds	r0, #32
 800c3d0:	e7e5      	b.n	800c39e <__d2b+0x5a>
 800c3d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c3d6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800c3da:	6030      	str	r0, [r6, #0]
 800c3dc:	6918      	ldr	r0, [r3, #16]
 800c3de:	f7ff fd37 	bl	800be50 <__hi0bits>
 800c3e2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c3e6:	e7e2      	b.n	800c3ae <__d2b+0x6a>
 800c3e8:	0800d47c 	.word	0x0800d47c
 800c3ec:	0800d48d 	.word	0x0800d48d

0800c3f0 <__sflush_r>:
 800c3f0:	898a      	ldrh	r2, [r1, #12]
 800c3f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3f4:	4605      	mov	r5, r0
 800c3f6:	0710      	lsls	r0, r2, #28
 800c3f8:	460c      	mov	r4, r1
 800c3fa:	d457      	bmi.n	800c4ac <__sflush_r+0xbc>
 800c3fc:	684b      	ldr	r3, [r1, #4]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	dc04      	bgt.n	800c40c <__sflush_r+0x1c>
 800c402:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c404:	2b00      	cmp	r3, #0
 800c406:	dc01      	bgt.n	800c40c <__sflush_r+0x1c>
 800c408:	2000      	movs	r0, #0
 800c40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c40c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c40e:	2e00      	cmp	r6, #0
 800c410:	d0fa      	beq.n	800c408 <__sflush_r+0x18>
 800c412:	2300      	movs	r3, #0
 800c414:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c418:	682f      	ldr	r7, [r5, #0]
 800c41a:	6a21      	ldr	r1, [r4, #32]
 800c41c:	602b      	str	r3, [r5, #0]
 800c41e:	d032      	beq.n	800c486 <__sflush_r+0x96>
 800c420:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c422:	89a3      	ldrh	r3, [r4, #12]
 800c424:	075a      	lsls	r2, r3, #29
 800c426:	d505      	bpl.n	800c434 <__sflush_r+0x44>
 800c428:	6863      	ldr	r3, [r4, #4]
 800c42a:	1ac0      	subs	r0, r0, r3
 800c42c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c42e:	b10b      	cbz	r3, 800c434 <__sflush_r+0x44>
 800c430:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c432:	1ac0      	subs	r0, r0, r3
 800c434:	2300      	movs	r3, #0
 800c436:	4602      	mov	r2, r0
 800c438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c43a:	4628      	mov	r0, r5
 800c43c:	6a21      	ldr	r1, [r4, #32]
 800c43e:	47b0      	blx	r6
 800c440:	1c43      	adds	r3, r0, #1
 800c442:	89a3      	ldrh	r3, [r4, #12]
 800c444:	d106      	bne.n	800c454 <__sflush_r+0x64>
 800c446:	6829      	ldr	r1, [r5, #0]
 800c448:	291d      	cmp	r1, #29
 800c44a:	d82b      	bhi.n	800c4a4 <__sflush_r+0xb4>
 800c44c:	4a28      	ldr	r2, [pc, #160]	; (800c4f0 <__sflush_r+0x100>)
 800c44e:	410a      	asrs	r2, r1
 800c450:	07d6      	lsls	r6, r2, #31
 800c452:	d427      	bmi.n	800c4a4 <__sflush_r+0xb4>
 800c454:	2200      	movs	r2, #0
 800c456:	6062      	str	r2, [r4, #4]
 800c458:	6922      	ldr	r2, [r4, #16]
 800c45a:	04d9      	lsls	r1, r3, #19
 800c45c:	6022      	str	r2, [r4, #0]
 800c45e:	d504      	bpl.n	800c46a <__sflush_r+0x7a>
 800c460:	1c42      	adds	r2, r0, #1
 800c462:	d101      	bne.n	800c468 <__sflush_r+0x78>
 800c464:	682b      	ldr	r3, [r5, #0]
 800c466:	b903      	cbnz	r3, 800c46a <__sflush_r+0x7a>
 800c468:	6560      	str	r0, [r4, #84]	; 0x54
 800c46a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c46c:	602f      	str	r7, [r5, #0]
 800c46e:	2900      	cmp	r1, #0
 800c470:	d0ca      	beq.n	800c408 <__sflush_r+0x18>
 800c472:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c476:	4299      	cmp	r1, r3
 800c478:	d002      	beq.n	800c480 <__sflush_r+0x90>
 800c47a:	4628      	mov	r0, r5
 800c47c:	f7ff fbf8 	bl	800bc70 <_free_r>
 800c480:	2000      	movs	r0, #0
 800c482:	6360      	str	r0, [r4, #52]	; 0x34
 800c484:	e7c1      	b.n	800c40a <__sflush_r+0x1a>
 800c486:	2301      	movs	r3, #1
 800c488:	4628      	mov	r0, r5
 800c48a:	47b0      	blx	r6
 800c48c:	1c41      	adds	r1, r0, #1
 800c48e:	d1c8      	bne.n	800c422 <__sflush_r+0x32>
 800c490:	682b      	ldr	r3, [r5, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d0c5      	beq.n	800c422 <__sflush_r+0x32>
 800c496:	2b1d      	cmp	r3, #29
 800c498:	d001      	beq.n	800c49e <__sflush_r+0xae>
 800c49a:	2b16      	cmp	r3, #22
 800c49c:	d101      	bne.n	800c4a2 <__sflush_r+0xb2>
 800c49e:	602f      	str	r7, [r5, #0]
 800c4a0:	e7b2      	b.n	800c408 <__sflush_r+0x18>
 800c4a2:	89a3      	ldrh	r3, [r4, #12]
 800c4a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4a8:	81a3      	strh	r3, [r4, #12]
 800c4aa:	e7ae      	b.n	800c40a <__sflush_r+0x1a>
 800c4ac:	690f      	ldr	r7, [r1, #16]
 800c4ae:	2f00      	cmp	r7, #0
 800c4b0:	d0aa      	beq.n	800c408 <__sflush_r+0x18>
 800c4b2:	0793      	lsls	r3, r2, #30
 800c4b4:	bf18      	it	ne
 800c4b6:	2300      	movne	r3, #0
 800c4b8:	680e      	ldr	r6, [r1, #0]
 800c4ba:	bf08      	it	eq
 800c4bc:	694b      	ldreq	r3, [r1, #20]
 800c4be:	1bf6      	subs	r6, r6, r7
 800c4c0:	600f      	str	r7, [r1, #0]
 800c4c2:	608b      	str	r3, [r1, #8]
 800c4c4:	2e00      	cmp	r6, #0
 800c4c6:	dd9f      	ble.n	800c408 <__sflush_r+0x18>
 800c4c8:	4633      	mov	r3, r6
 800c4ca:	463a      	mov	r2, r7
 800c4cc:	4628      	mov	r0, r5
 800c4ce:	6a21      	ldr	r1, [r4, #32]
 800c4d0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c4d4:	47e0      	blx	ip
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	dc06      	bgt.n	800c4e8 <__sflush_r+0xf8>
 800c4da:	89a3      	ldrh	r3, [r4, #12]
 800c4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4e4:	81a3      	strh	r3, [r4, #12]
 800c4e6:	e790      	b.n	800c40a <__sflush_r+0x1a>
 800c4e8:	4407      	add	r7, r0
 800c4ea:	1a36      	subs	r6, r6, r0
 800c4ec:	e7ea      	b.n	800c4c4 <__sflush_r+0xd4>
 800c4ee:	bf00      	nop
 800c4f0:	dfbffffe 	.word	0xdfbffffe

0800c4f4 <_fflush_r>:
 800c4f4:	b538      	push	{r3, r4, r5, lr}
 800c4f6:	690b      	ldr	r3, [r1, #16]
 800c4f8:	4605      	mov	r5, r0
 800c4fa:	460c      	mov	r4, r1
 800c4fc:	b913      	cbnz	r3, 800c504 <_fflush_r+0x10>
 800c4fe:	2500      	movs	r5, #0
 800c500:	4628      	mov	r0, r5
 800c502:	bd38      	pop	{r3, r4, r5, pc}
 800c504:	b118      	cbz	r0, 800c50e <_fflush_r+0x1a>
 800c506:	6a03      	ldr	r3, [r0, #32]
 800c508:	b90b      	cbnz	r3, 800c50e <_fflush_r+0x1a>
 800c50a:	f7fe fc2b 	bl	800ad64 <__sinit>
 800c50e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d0f3      	beq.n	800c4fe <_fflush_r+0xa>
 800c516:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c518:	07d0      	lsls	r0, r2, #31
 800c51a:	d404      	bmi.n	800c526 <_fflush_r+0x32>
 800c51c:	0599      	lsls	r1, r3, #22
 800c51e:	d402      	bmi.n	800c526 <_fflush_r+0x32>
 800c520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c522:	f7fe fd26 	bl	800af72 <__retarget_lock_acquire_recursive>
 800c526:	4628      	mov	r0, r5
 800c528:	4621      	mov	r1, r4
 800c52a:	f7ff ff61 	bl	800c3f0 <__sflush_r>
 800c52e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c530:	4605      	mov	r5, r0
 800c532:	07da      	lsls	r2, r3, #31
 800c534:	d4e4      	bmi.n	800c500 <_fflush_r+0xc>
 800c536:	89a3      	ldrh	r3, [r4, #12]
 800c538:	059b      	lsls	r3, r3, #22
 800c53a:	d4e1      	bmi.n	800c500 <_fflush_r+0xc>
 800c53c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c53e:	f7fe fd19 	bl	800af74 <__retarget_lock_release_recursive>
 800c542:	e7dd      	b.n	800c500 <_fflush_r+0xc>

0800c544 <memcpy>:
 800c544:	440a      	add	r2, r1
 800c546:	4291      	cmp	r1, r2
 800c548:	f100 33ff 	add.w	r3, r0, #4294967295
 800c54c:	d100      	bne.n	800c550 <memcpy+0xc>
 800c54e:	4770      	bx	lr
 800c550:	b510      	push	{r4, lr}
 800c552:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c556:	4291      	cmp	r1, r2
 800c558:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c55c:	d1f9      	bne.n	800c552 <memcpy+0xe>
 800c55e:	bd10      	pop	{r4, pc}

0800c560 <__assert_func>:
 800c560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c562:	4614      	mov	r4, r2
 800c564:	461a      	mov	r2, r3
 800c566:	4b09      	ldr	r3, [pc, #36]	; (800c58c <__assert_func+0x2c>)
 800c568:	4605      	mov	r5, r0
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	68d8      	ldr	r0, [r3, #12]
 800c56e:	b14c      	cbz	r4, 800c584 <__assert_func+0x24>
 800c570:	4b07      	ldr	r3, [pc, #28]	; (800c590 <__assert_func+0x30>)
 800c572:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c576:	9100      	str	r1, [sp, #0]
 800c578:	462b      	mov	r3, r5
 800c57a:	4906      	ldr	r1, [pc, #24]	; (800c594 <__assert_func+0x34>)
 800c57c:	f000 f842 	bl	800c604 <fiprintf>
 800c580:	f000 f852 	bl	800c628 <abort>
 800c584:	4b04      	ldr	r3, [pc, #16]	; (800c598 <__assert_func+0x38>)
 800c586:	461c      	mov	r4, r3
 800c588:	e7f3      	b.n	800c572 <__assert_func+0x12>
 800c58a:	bf00      	nop
 800c58c:	20000238 	.word	0x20000238
 800c590:	0800d5ee 	.word	0x0800d5ee
 800c594:	0800d5fb 	.word	0x0800d5fb
 800c598:	0800d629 	.word	0x0800d629

0800c59c <_calloc_r>:
 800c59c:	b570      	push	{r4, r5, r6, lr}
 800c59e:	fba1 5402 	umull	r5, r4, r1, r2
 800c5a2:	b934      	cbnz	r4, 800c5b2 <_calloc_r+0x16>
 800c5a4:	4629      	mov	r1, r5
 800c5a6:	f7fd fe67 	bl	800a278 <_malloc_r>
 800c5aa:	4606      	mov	r6, r0
 800c5ac:	b928      	cbnz	r0, 800c5ba <_calloc_r+0x1e>
 800c5ae:	4630      	mov	r0, r6
 800c5b0:	bd70      	pop	{r4, r5, r6, pc}
 800c5b2:	220c      	movs	r2, #12
 800c5b4:	2600      	movs	r6, #0
 800c5b6:	6002      	str	r2, [r0, #0]
 800c5b8:	e7f9      	b.n	800c5ae <_calloc_r+0x12>
 800c5ba:	462a      	mov	r2, r5
 800c5bc:	4621      	mov	r1, r4
 800c5be:	f7fe fc4a 	bl	800ae56 <memset>
 800c5c2:	e7f4      	b.n	800c5ae <_calloc_r+0x12>

0800c5c4 <__ascii_mbtowc>:
 800c5c4:	b082      	sub	sp, #8
 800c5c6:	b901      	cbnz	r1, 800c5ca <__ascii_mbtowc+0x6>
 800c5c8:	a901      	add	r1, sp, #4
 800c5ca:	b142      	cbz	r2, 800c5de <__ascii_mbtowc+0x1a>
 800c5cc:	b14b      	cbz	r3, 800c5e2 <__ascii_mbtowc+0x1e>
 800c5ce:	7813      	ldrb	r3, [r2, #0]
 800c5d0:	600b      	str	r3, [r1, #0]
 800c5d2:	7812      	ldrb	r2, [r2, #0]
 800c5d4:	1e10      	subs	r0, r2, #0
 800c5d6:	bf18      	it	ne
 800c5d8:	2001      	movne	r0, #1
 800c5da:	b002      	add	sp, #8
 800c5dc:	4770      	bx	lr
 800c5de:	4610      	mov	r0, r2
 800c5e0:	e7fb      	b.n	800c5da <__ascii_mbtowc+0x16>
 800c5e2:	f06f 0001 	mvn.w	r0, #1
 800c5e6:	e7f8      	b.n	800c5da <__ascii_mbtowc+0x16>

0800c5e8 <__ascii_wctomb>:
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	4608      	mov	r0, r1
 800c5ec:	b141      	cbz	r1, 800c600 <__ascii_wctomb+0x18>
 800c5ee:	2aff      	cmp	r2, #255	; 0xff
 800c5f0:	d904      	bls.n	800c5fc <__ascii_wctomb+0x14>
 800c5f2:	228a      	movs	r2, #138	; 0x8a
 800c5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f8:	601a      	str	r2, [r3, #0]
 800c5fa:	4770      	bx	lr
 800c5fc:	2001      	movs	r0, #1
 800c5fe:	700a      	strb	r2, [r1, #0]
 800c600:	4770      	bx	lr
	...

0800c604 <fiprintf>:
 800c604:	b40e      	push	{r1, r2, r3}
 800c606:	b503      	push	{r0, r1, lr}
 800c608:	4601      	mov	r1, r0
 800c60a:	ab03      	add	r3, sp, #12
 800c60c:	4805      	ldr	r0, [pc, #20]	; (800c624 <fiprintf+0x20>)
 800c60e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c612:	6800      	ldr	r0, [r0, #0]
 800c614:	9301      	str	r3, [sp, #4]
 800c616:	f000 f835 	bl	800c684 <_vfiprintf_r>
 800c61a:	b002      	add	sp, #8
 800c61c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c620:	b003      	add	sp, #12
 800c622:	4770      	bx	lr
 800c624:	20000238 	.word	0x20000238

0800c628 <abort>:
 800c628:	2006      	movs	r0, #6
 800c62a:	b508      	push	{r3, lr}
 800c62c:	f000 fa02 	bl	800ca34 <raise>
 800c630:	2001      	movs	r0, #1
 800c632:	f7f5 ffdc 	bl	80025ee <_exit>

0800c636 <__sfputc_r>:
 800c636:	6893      	ldr	r3, [r2, #8]
 800c638:	b410      	push	{r4}
 800c63a:	3b01      	subs	r3, #1
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	6093      	str	r3, [r2, #8]
 800c640:	da07      	bge.n	800c652 <__sfputc_r+0x1c>
 800c642:	6994      	ldr	r4, [r2, #24]
 800c644:	42a3      	cmp	r3, r4
 800c646:	db01      	blt.n	800c64c <__sfputc_r+0x16>
 800c648:	290a      	cmp	r1, #10
 800c64a:	d102      	bne.n	800c652 <__sfputc_r+0x1c>
 800c64c:	bc10      	pop	{r4}
 800c64e:	f000 b933 	b.w	800c8b8 <__swbuf_r>
 800c652:	6813      	ldr	r3, [r2, #0]
 800c654:	1c58      	adds	r0, r3, #1
 800c656:	6010      	str	r0, [r2, #0]
 800c658:	7019      	strb	r1, [r3, #0]
 800c65a:	4608      	mov	r0, r1
 800c65c:	bc10      	pop	{r4}
 800c65e:	4770      	bx	lr

0800c660 <__sfputs_r>:
 800c660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c662:	4606      	mov	r6, r0
 800c664:	460f      	mov	r7, r1
 800c666:	4614      	mov	r4, r2
 800c668:	18d5      	adds	r5, r2, r3
 800c66a:	42ac      	cmp	r4, r5
 800c66c:	d101      	bne.n	800c672 <__sfputs_r+0x12>
 800c66e:	2000      	movs	r0, #0
 800c670:	e007      	b.n	800c682 <__sfputs_r+0x22>
 800c672:	463a      	mov	r2, r7
 800c674:	4630      	mov	r0, r6
 800c676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c67a:	f7ff ffdc 	bl	800c636 <__sfputc_r>
 800c67e:	1c43      	adds	r3, r0, #1
 800c680:	d1f3      	bne.n	800c66a <__sfputs_r+0xa>
 800c682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c684 <_vfiprintf_r>:
 800c684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c688:	460d      	mov	r5, r1
 800c68a:	4614      	mov	r4, r2
 800c68c:	4698      	mov	r8, r3
 800c68e:	4606      	mov	r6, r0
 800c690:	b09d      	sub	sp, #116	; 0x74
 800c692:	b118      	cbz	r0, 800c69c <_vfiprintf_r+0x18>
 800c694:	6a03      	ldr	r3, [r0, #32]
 800c696:	b90b      	cbnz	r3, 800c69c <_vfiprintf_r+0x18>
 800c698:	f7fe fb64 	bl	800ad64 <__sinit>
 800c69c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c69e:	07d9      	lsls	r1, r3, #31
 800c6a0:	d405      	bmi.n	800c6ae <_vfiprintf_r+0x2a>
 800c6a2:	89ab      	ldrh	r3, [r5, #12]
 800c6a4:	059a      	lsls	r2, r3, #22
 800c6a6:	d402      	bmi.n	800c6ae <_vfiprintf_r+0x2a>
 800c6a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6aa:	f7fe fc62 	bl	800af72 <__retarget_lock_acquire_recursive>
 800c6ae:	89ab      	ldrh	r3, [r5, #12]
 800c6b0:	071b      	lsls	r3, r3, #28
 800c6b2:	d501      	bpl.n	800c6b8 <_vfiprintf_r+0x34>
 800c6b4:	692b      	ldr	r3, [r5, #16]
 800c6b6:	b99b      	cbnz	r3, 800c6e0 <_vfiprintf_r+0x5c>
 800c6b8:	4629      	mov	r1, r5
 800c6ba:	4630      	mov	r0, r6
 800c6bc:	f000 f93a 	bl	800c934 <__swsetup_r>
 800c6c0:	b170      	cbz	r0, 800c6e0 <_vfiprintf_r+0x5c>
 800c6c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6c4:	07dc      	lsls	r4, r3, #31
 800c6c6:	d504      	bpl.n	800c6d2 <_vfiprintf_r+0x4e>
 800c6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6cc:	b01d      	add	sp, #116	; 0x74
 800c6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6d2:	89ab      	ldrh	r3, [r5, #12]
 800c6d4:	0598      	lsls	r0, r3, #22
 800c6d6:	d4f7      	bmi.n	800c6c8 <_vfiprintf_r+0x44>
 800c6d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6da:	f7fe fc4b 	bl	800af74 <__retarget_lock_release_recursive>
 800c6de:	e7f3      	b.n	800c6c8 <_vfiprintf_r+0x44>
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c6e4:	2320      	movs	r3, #32
 800c6e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6ea:	2330      	movs	r3, #48	; 0x30
 800c6ec:	f04f 0901 	mov.w	r9, #1
 800c6f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800c8a4 <_vfiprintf_r+0x220>
 800c6f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6fc:	4623      	mov	r3, r4
 800c6fe:	469a      	mov	sl, r3
 800c700:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c704:	b10a      	cbz	r2, 800c70a <_vfiprintf_r+0x86>
 800c706:	2a25      	cmp	r2, #37	; 0x25
 800c708:	d1f9      	bne.n	800c6fe <_vfiprintf_r+0x7a>
 800c70a:	ebba 0b04 	subs.w	fp, sl, r4
 800c70e:	d00b      	beq.n	800c728 <_vfiprintf_r+0xa4>
 800c710:	465b      	mov	r3, fp
 800c712:	4622      	mov	r2, r4
 800c714:	4629      	mov	r1, r5
 800c716:	4630      	mov	r0, r6
 800c718:	f7ff ffa2 	bl	800c660 <__sfputs_r>
 800c71c:	3001      	adds	r0, #1
 800c71e:	f000 80a9 	beq.w	800c874 <_vfiprintf_r+0x1f0>
 800c722:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c724:	445a      	add	r2, fp
 800c726:	9209      	str	r2, [sp, #36]	; 0x24
 800c728:	f89a 3000 	ldrb.w	r3, [sl]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	f000 80a1 	beq.w	800c874 <_vfiprintf_r+0x1f0>
 800c732:	2300      	movs	r3, #0
 800c734:	f04f 32ff 	mov.w	r2, #4294967295
 800c738:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c73c:	f10a 0a01 	add.w	sl, sl, #1
 800c740:	9304      	str	r3, [sp, #16]
 800c742:	9307      	str	r3, [sp, #28]
 800c744:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c748:	931a      	str	r3, [sp, #104]	; 0x68
 800c74a:	4654      	mov	r4, sl
 800c74c:	2205      	movs	r2, #5
 800c74e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c752:	4854      	ldr	r0, [pc, #336]	; (800c8a4 <_vfiprintf_r+0x220>)
 800c754:	f7fe fc0f 	bl	800af76 <memchr>
 800c758:	9a04      	ldr	r2, [sp, #16]
 800c75a:	b9d8      	cbnz	r0, 800c794 <_vfiprintf_r+0x110>
 800c75c:	06d1      	lsls	r1, r2, #27
 800c75e:	bf44      	itt	mi
 800c760:	2320      	movmi	r3, #32
 800c762:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c766:	0713      	lsls	r3, r2, #28
 800c768:	bf44      	itt	mi
 800c76a:	232b      	movmi	r3, #43	; 0x2b
 800c76c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c770:	f89a 3000 	ldrb.w	r3, [sl]
 800c774:	2b2a      	cmp	r3, #42	; 0x2a
 800c776:	d015      	beq.n	800c7a4 <_vfiprintf_r+0x120>
 800c778:	4654      	mov	r4, sl
 800c77a:	2000      	movs	r0, #0
 800c77c:	f04f 0c0a 	mov.w	ip, #10
 800c780:	9a07      	ldr	r2, [sp, #28]
 800c782:	4621      	mov	r1, r4
 800c784:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c788:	3b30      	subs	r3, #48	; 0x30
 800c78a:	2b09      	cmp	r3, #9
 800c78c:	d94d      	bls.n	800c82a <_vfiprintf_r+0x1a6>
 800c78e:	b1b0      	cbz	r0, 800c7be <_vfiprintf_r+0x13a>
 800c790:	9207      	str	r2, [sp, #28]
 800c792:	e014      	b.n	800c7be <_vfiprintf_r+0x13a>
 800c794:	eba0 0308 	sub.w	r3, r0, r8
 800c798:	fa09 f303 	lsl.w	r3, r9, r3
 800c79c:	4313      	orrs	r3, r2
 800c79e:	46a2      	mov	sl, r4
 800c7a0:	9304      	str	r3, [sp, #16]
 800c7a2:	e7d2      	b.n	800c74a <_vfiprintf_r+0xc6>
 800c7a4:	9b03      	ldr	r3, [sp, #12]
 800c7a6:	1d19      	adds	r1, r3, #4
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	9103      	str	r1, [sp, #12]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	bfbb      	ittet	lt
 800c7b0:	425b      	neglt	r3, r3
 800c7b2:	f042 0202 	orrlt.w	r2, r2, #2
 800c7b6:	9307      	strge	r3, [sp, #28]
 800c7b8:	9307      	strlt	r3, [sp, #28]
 800c7ba:	bfb8      	it	lt
 800c7bc:	9204      	strlt	r2, [sp, #16]
 800c7be:	7823      	ldrb	r3, [r4, #0]
 800c7c0:	2b2e      	cmp	r3, #46	; 0x2e
 800c7c2:	d10c      	bne.n	800c7de <_vfiprintf_r+0x15a>
 800c7c4:	7863      	ldrb	r3, [r4, #1]
 800c7c6:	2b2a      	cmp	r3, #42	; 0x2a
 800c7c8:	d134      	bne.n	800c834 <_vfiprintf_r+0x1b0>
 800c7ca:	9b03      	ldr	r3, [sp, #12]
 800c7cc:	3402      	adds	r4, #2
 800c7ce:	1d1a      	adds	r2, r3, #4
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	9203      	str	r2, [sp, #12]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	bfb8      	it	lt
 800c7d8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7dc:	9305      	str	r3, [sp, #20]
 800c7de:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c8a8 <_vfiprintf_r+0x224>
 800c7e2:	2203      	movs	r2, #3
 800c7e4:	4650      	mov	r0, sl
 800c7e6:	7821      	ldrb	r1, [r4, #0]
 800c7e8:	f7fe fbc5 	bl	800af76 <memchr>
 800c7ec:	b138      	cbz	r0, 800c7fe <_vfiprintf_r+0x17a>
 800c7ee:	2240      	movs	r2, #64	; 0x40
 800c7f0:	9b04      	ldr	r3, [sp, #16]
 800c7f2:	eba0 000a 	sub.w	r0, r0, sl
 800c7f6:	4082      	lsls	r2, r0
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	3401      	adds	r4, #1
 800c7fc:	9304      	str	r3, [sp, #16]
 800c7fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c802:	2206      	movs	r2, #6
 800c804:	4829      	ldr	r0, [pc, #164]	; (800c8ac <_vfiprintf_r+0x228>)
 800c806:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c80a:	f7fe fbb4 	bl	800af76 <memchr>
 800c80e:	2800      	cmp	r0, #0
 800c810:	d03f      	beq.n	800c892 <_vfiprintf_r+0x20e>
 800c812:	4b27      	ldr	r3, [pc, #156]	; (800c8b0 <_vfiprintf_r+0x22c>)
 800c814:	bb1b      	cbnz	r3, 800c85e <_vfiprintf_r+0x1da>
 800c816:	9b03      	ldr	r3, [sp, #12]
 800c818:	3307      	adds	r3, #7
 800c81a:	f023 0307 	bic.w	r3, r3, #7
 800c81e:	3308      	adds	r3, #8
 800c820:	9303      	str	r3, [sp, #12]
 800c822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c824:	443b      	add	r3, r7
 800c826:	9309      	str	r3, [sp, #36]	; 0x24
 800c828:	e768      	b.n	800c6fc <_vfiprintf_r+0x78>
 800c82a:	460c      	mov	r4, r1
 800c82c:	2001      	movs	r0, #1
 800c82e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c832:	e7a6      	b.n	800c782 <_vfiprintf_r+0xfe>
 800c834:	2300      	movs	r3, #0
 800c836:	f04f 0c0a 	mov.w	ip, #10
 800c83a:	4619      	mov	r1, r3
 800c83c:	3401      	adds	r4, #1
 800c83e:	9305      	str	r3, [sp, #20]
 800c840:	4620      	mov	r0, r4
 800c842:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c846:	3a30      	subs	r2, #48	; 0x30
 800c848:	2a09      	cmp	r2, #9
 800c84a:	d903      	bls.n	800c854 <_vfiprintf_r+0x1d0>
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d0c6      	beq.n	800c7de <_vfiprintf_r+0x15a>
 800c850:	9105      	str	r1, [sp, #20]
 800c852:	e7c4      	b.n	800c7de <_vfiprintf_r+0x15a>
 800c854:	4604      	mov	r4, r0
 800c856:	2301      	movs	r3, #1
 800c858:	fb0c 2101 	mla	r1, ip, r1, r2
 800c85c:	e7f0      	b.n	800c840 <_vfiprintf_r+0x1bc>
 800c85e:	ab03      	add	r3, sp, #12
 800c860:	9300      	str	r3, [sp, #0]
 800c862:	462a      	mov	r2, r5
 800c864:	4630      	mov	r0, r6
 800c866:	4b13      	ldr	r3, [pc, #76]	; (800c8b4 <_vfiprintf_r+0x230>)
 800c868:	a904      	add	r1, sp, #16
 800c86a:	f7fd fe2d 	bl	800a4c8 <_printf_float>
 800c86e:	4607      	mov	r7, r0
 800c870:	1c78      	adds	r0, r7, #1
 800c872:	d1d6      	bne.n	800c822 <_vfiprintf_r+0x19e>
 800c874:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c876:	07d9      	lsls	r1, r3, #31
 800c878:	d405      	bmi.n	800c886 <_vfiprintf_r+0x202>
 800c87a:	89ab      	ldrh	r3, [r5, #12]
 800c87c:	059a      	lsls	r2, r3, #22
 800c87e:	d402      	bmi.n	800c886 <_vfiprintf_r+0x202>
 800c880:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c882:	f7fe fb77 	bl	800af74 <__retarget_lock_release_recursive>
 800c886:	89ab      	ldrh	r3, [r5, #12]
 800c888:	065b      	lsls	r3, r3, #25
 800c88a:	f53f af1d 	bmi.w	800c6c8 <_vfiprintf_r+0x44>
 800c88e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c890:	e71c      	b.n	800c6cc <_vfiprintf_r+0x48>
 800c892:	ab03      	add	r3, sp, #12
 800c894:	9300      	str	r3, [sp, #0]
 800c896:	462a      	mov	r2, r5
 800c898:	4630      	mov	r0, r6
 800c89a:	4b06      	ldr	r3, [pc, #24]	; (800c8b4 <_vfiprintf_r+0x230>)
 800c89c:	a904      	add	r1, sp, #16
 800c89e:	f7fe f8b3 	bl	800aa08 <_printf_i>
 800c8a2:	e7e4      	b.n	800c86e <_vfiprintf_r+0x1ea>
 800c8a4:	0800d72b 	.word	0x0800d72b
 800c8a8:	0800d731 	.word	0x0800d731
 800c8ac:	0800d735 	.word	0x0800d735
 800c8b0:	0800a4c9 	.word	0x0800a4c9
 800c8b4:	0800c661 	.word	0x0800c661

0800c8b8 <__swbuf_r>:
 800c8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ba:	460e      	mov	r6, r1
 800c8bc:	4614      	mov	r4, r2
 800c8be:	4605      	mov	r5, r0
 800c8c0:	b118      	cbz	r0, 800c8ca <__swbuf_r+0x12>
 800c8c2:	6a03      	ldr	r3, [r0, #32]
 800c8c4:	b90b      	cbnz	r3, 800c8ca <__swbuf_r+0x12>
 800c8c6:	f7fe fa4d 	bl	800ad64 <__sinit>
 800c8ca:	69a3      	ldr	r3, [r4, #24]
 800c8cc:	60a3      	str	r3, [r4, #8]
 800c8ce:	89a3      	ldrh	r3, [r4, #12]
 800c8d0:	071a      	lsls	r2, r3, #28
 800c8d2:	d525      	bpl.n	800c920 <__swbuf_r+0x68>
 800c8d4:	6923      	ldr	r3, [r4, #16]
 800c8d6:	b31b      	cbz	r3, 800c920 <__swbuf_r+0x68>
 800c8d8:	6823      	ldr	r3, [r4, #0]
 800c8da:	6922      	ldr	r2, [r4, #16]
 800c8dc:	b2f6      	uxtb	r6, r6
 800c8de:	1a98      	subs	r0, r3, r2
 800c8e0:	6963      	ldr	r3, [r4, #20]
 800c8e2:	4637      	mov	r7, r6
 800c8e4:	4283      	cmp	r3, r0
 800c8e6:	dc04      	bgt.n	800c8f2 <__swbuf_r+0x3a>
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	f7ff fe02 	bl	800c4f4 <_fflush_r>
 800c8f0:	b9e0      	cbnz	r0, 800c92c <__swbuf_r+0x74>
 800c8f2:	68a3      	ldr	r3, [r4, #8]
 800c8f4:	3b01      	subs	r3, #1
 800c8f6:	60a3      	str	r3, [r4, #8]
 800c8f8:	6823      	ldr	r3, [r4, #0]
 800c8fa:	1c5a      	adds	r2, r3, #1
 800c8fc:	6022      	str	r2, [r4, #0]
 800c8fe:	701e      	strb	r6, [r3, #0]
 800c900:	6962      	ldr	r2, [r4, #20]
 800c902:	1c43      	adds	r3, r0, #1
 800c904:	429a      	cmp	r2, r3
 800c906:	d004      	beq.n	800c912 <__swbuf_r+0x5a>
 800c908:	89a3      	ldrh	r3, [r4, #12]
 800c90a:	07db      	lsls	r3, r3, #31
 800c90c:	d506      	bpl.n	800c91c <__swbuf_r+0x64>
 800c90e:	2e0a      	cmp	r6, #10
 800c910:	d104      	bne.n	800c91c <__swbuf_r+0x64>
 800c912:	4621      	mov	r1, r4
 800c914:	4628      	mov	r0, r5
 800c916:	f7ff fded 	bl	800c4f4 <_fflush_r>
 800c91a:	b938      	cbnz	r0, 800c92c <__swbuf_r+0x74>
 800c91c:	4638      	mov	r0, r7
 800c91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c920:	4621      	mov	r1, r4
 800c922:	4628      	mov	r0, r5
 800c924:	f000 f806 	bl	800c934 <__swsetup_r>
 800c928:	2800      	cmp	r0, #0
 800c92a:	d0d5      	beq.n	800c8d8 <__swbuf_r+0x20>
 800c92c:	f04f 37ff 	mov.w	r7, #4294967295
 800c930:	e7f4      	b.n	800c91c <__swbuf_r+0x64>
	...

0800c934 <__swsetup_r>:
 800c934:	b538      	push	{r3, r4, r5, lr}
 800c936:	4b2a      	ldr	r3, [pc, #168]	; (800c9e0 <__swsetup_r+0xac>)
 800c938:	4605      	mov	r5, r0
 800c93a:	6818      	ldr	r0, [r3, #0]
 800c93c:	460c      	mov	r4, r1
 800c93e:	b118      	cbz	r0, 800c948 <__swsetup_r+0x14>
 800c940:	6a03      	ldr	r3, [r0, #32]
 800c942:	b90b      	cbnz	r3, 800c948 <__swsetup_r+0x14>
 800c944:	f7fe fa0e 	bl	800ad64 <__sinit>
 800c948:	89a3      	ldrh	r3, [r4, #12]
 800c94a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c94e:	0718      	lsls	r0, r3, #28
 800c950:	d422      	bmi.n	800c998 <__swsetup_r+0x64>
 800c952:	06d9      	lsls	r1, r3, #27
 800c954:	d407      	bmi.n	800c966 <__swsetup_r+0x32>
 800c956:	2309      	movs	r3, #9
 800c958:	602b      	str	r3, [r5, #0]
 800c95a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c95e:	f04f 30ff 	mov.w	r0, #4294967295
 800c962:	81a3      	strh	r3, [r4, #12]
 800c964:	e034      	b.n	800c9d0 <__swsetup_r+0x9c>
 800c966:	0758      	lsls	r0, r3, #29
 800c968:	d512      	bpl.n	800c990 <__swsetup_r+0x5c>
 800c96a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c96c:	b141      	cbz	r1, 800c980 <__swsetup_r+0x4c>
 800c96e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c972:	4299      	cmp	r1, r3
 800c974:	d002      	beq.n	800c97c <__swsetup_r+0x48>
 800c976:	4628      	mov	r0, r5
 800c978:	f7ff f97a 	bl	800bc70 <_free_r>
 800c97c:	2300      	movs	r3, #0
 800c97e:	6363      	str	r3, [r4, #52]	; 0x34
 800c980:	89a3      	ldrh	r3, [r4, #12]
 800c982:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c986:	81a3      	strh	r3, [r4, #12]
 800c988:	2300      	movs	r3, #0
 800c98a:	6063      	str	r3, [r4, #4]
 800c98c:	6923      	ldr	r3, [r4, #16]
 800c98e:	6023      	str	r3, [r4, #0]
 800c990:	89a3      	ldrh	r3, [r4, #12]
 800c992:	f043 0308 	orr.w	r3, r3, #8
 800c996:	81a3      	strh	r3, [r4, #12]
 800c998:	6923      	ldr	r3, [r4, #16]
 800c99a:	b94b      	cbnz	r3, 800c9b0 <__swsetup_r+0x7c>
 800c99c:	89a3      	ldrh	r3, [r4, #12]
 800c99e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c9a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9a6:	d003      	beq.n	800c9b0 <__swsetup_r+0x7c>
 800c9a8:	4621      	mov	r1, r4
 800c9aa:	4628      	mov	r0, r5
 800c9ac:	f000 f883 	bl	800cab6 <__smakebuf_r>
 800c9b0:	89a0      	ldrh	r0, [r4, #12]
 800c9b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9b6:	f010 0301 	ands.w	r3, r0, #1
 800c9ba:	d00a      	beq.n	800c9d2 <__swsetup_r+0x9e>
 800c9bc:	2300      	movs	r3, #0
 800c9be:	60a3      	str	r3, [r4, #8]
 800c9c0:	6963      	ldr	r3, [r4, #20]
 800c9c2:	425b      	negs	r3, r3
 800c9c4:	61a3      	str	r3, [r4, #24]
 800c9c6:	6923      	ldr	r3, [r4, #16]
 800c9c8:	b943      	cbnz	r3, 800c9dc <__swsetup_r+0xa8>
 800c9ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c9ce:	d1c4      	bne.n	800c95a <__swsetup_r+0x26>
 800c9d0:	bd38      	pop	{r3, r4, r5, pc}
 800c9d2:	0781      	lsls	r1, r0, #30
 800c9d4:	bf58      	it	pl
 800c9d6:	6963      	ldrpl	r3, [r4, #20]
 800c9d8:	60a3      	str	r3, [r4, #8]
 800c9da:	e7f4      	b.n	800c9c6 <__swsetup_r+0x92>
 800c9dc:	2000      	movs	r0, #0
 800c9de:	e7f7      	b.n	800c9d0 <__swsetup_r+0x9c>
 800c9e0:	20000238 	.word	0x20000238

0800c9e4 <_raise_r>:
 800c9e4:	291f      	cmp	r1, #31
 800c9e6:	b538      	push	{r3, r4, r5, lr}
 800c9e8:	4604      	mov	r4, r0
 800c9ea:	460d      	mov	r5, r1
 800c9ec:	d904      	bls.n	800c9f8 <_raise_r+0x14>
 800c9ee:	2316      	movs	r3, #22
 800c9f0:	6003      	str	r3, [r0, #0]
 800c9f2:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f6:	bd38      	pop	{r3, r4, r5, pc}
 800c9f8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c9fa:	b112      	cbz	r2, 800ca02 <_raise_r+0x1e>
 800c9fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ca00:	b94b      	cbnz	r3, 800ca16 <_raise_r+0x32>
 800ca02:	4620      	mov	r0, r4
 800ca04:	f000 f830 	bl	800ca68 <_getpid_r>
 800ca08:	462a      	mov	r2, r5
 800ca0a:	4601      	mov	r1, r0
 800ca0c:	4620      	mov	r0, r4
 800ca0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca12:	f000 b817 	b.w	800ca44 <_kill_r>
 800ca16:	2b01      	cmp	r3, #1
 800ca18:	d00a      	beq.n	800ca30 <_raise_r+0x4c>
 800ca1a:	1c59      	adds	r1, r3, #1
 800ca1c:	d103      	bne.n	800ca26 <_raise_r+0x42>
 800ca1e:	2316      	movs	r3, #22
 800ca20:	6003      	str	r3, [r0, #0]
 800ca22:	2001      	movs	r0, #1
 800ca24:	e7e7      	b.n	800c9f6 <_raise_r+0x12>
 800ca26:	2400      	movs	r4, #0
 800ca28:	4628      	mov	r0, r5
 800ca2a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ca2e:	4798      	blx	r3
 800ca30:	2000      	movs	r0, #0
 800ca32:	e7e0      	b.n	800c9f6 <_raise_r+0x12>

0800ca34 <raise>:
 800ca34:	4b02      	ldr	r3, [pc, #8]	; (800ca40 <raise+0xc>)
 800ca36:	4601      	mov	r1, r0
 800ca38:	6818      	ldr	r0, [r3, #0]
 800ca3a:	f7ff bfd3 	b.w	800c9e4 <_raise_r>
 800ca3e:	bf00      	nop
 800ca40:	20000238 	.word	0x20000238

0800ca44 <_kill_r>:
 800ca44:	b538      	push	{r3, r4, r5, lr}
 800ca46:	2300      	movs	r3, #0
 800ca48:	4d06      	ldr	r5, [pc, #24]	; (800ca64 <_kill_r+0x20>)
 800ca4a:	4604      	mov	r4, r0
 800ca4c:	4608      	mov	r0, r1
 800ca4e:	4611      	mov	r1, r2
 800ca50:	602b      	str	r3, [r5, #0]
 800ca52:	f7f5 fdbc 	bl	80025ce <_kill>
 800ca56:	1c43      	adds	r3, r0, #1
 800ca58:	d102      	bne.n	800ca60 <_kill_r+0x1c>
 800ca5a:	682b      	ldr	r3, [r5, #0]
 800ca5c:	b103      	cbz	r3, 800ca60 <_kill_r+0x1c>
 800ca5e:	6023      	str	r3, [r4, #0]
 800ca60:	bd38      	pop	{r3, r4, r5, pc}
 800ca62:	bf00      	nop
 800ca64:	20001908 	.word	0x20001908

0800ca68 <_getpid_r>:
 800ca68:	f7f5 bdaa 	b.w	80025c0 <_getpid>

0800ca6c <__swhatbuf_r>:
 800ca6c:	b570      	push	{r4, r5, r6, lr}
 800ca6e:	460c      	mov	r4, r1
 800ca70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca74:	4615      	mov	r5, r2
 800ca76:	2900      	cmp	r1, #0
 800ca78:	461e      	mov	r6, r3
 800ca7a:	b096      	sub	sp, #88	; 0x58
 800ca7c:	da0c      	bge.n	800ca98 <__swhatbuf_r+0x2c>
 800ca7e:	89a3      	ldrh	r3, [r4, #12]
 800ca80:	2100      	movs	r1, #0
 800ca82:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ca86:	bf0c      	ite	eq
 800ca88:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ca8c:	2340      	movne	r3, #64	; 0x40
 800ca8e:	2000      	movs	r0, #0
 800ca90:	6031      	str	r1, [r6, #0]
 800ca92:	602b      	str	r3, [r5, #0]
 800ca94:	b016      	add	sp, #88	; 0x58
 800ca96:	bd70      	pop	{r4, r5, r6, pc}
 800ca98:	466a      	mov	r2, sp
 800ca9a:	f000 f849 	bl	800cb30 <_fstat_r>
 800ca9e:	2800      	cmp	r0, #0
 800caa0:	dbed      	blt.n	800ca7e <__swhatbuf_r+0x12>
 800caa2:	9901      	ldr	r1, [sp, #4]
 800caa4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800caa8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800caac:	4259      	negs	r1, r3
 800caae:	4159      	adcs	r1, r3
 800cab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cab4:	e7eb      	b.n	800ca8e <__swhatbuf_r+0x22>

0800cab6 <__smakebuf_r>:
 800cab6:	898b      	ldrh	r3, [r1, #12]
 800cab8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800caba:	079d      	lsls	r5, r3, #30
 800cabc:	4606      	mov	r6, r0
 800cabe:	460c      	mov	r4, r1
 800cac0:	d507      	bpl.n	800cad2 <__smakebuf_r+0x1c>
 800cac2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cac6:	6023      	str	r3, [r4, #0]
 800cac8:	6123      	str	r3, [r4, #16]
 800caca:	2301      	movs	r3, #1
 800cacc:	6163      	str	r3, [r4, #20]
 800cace:	b002      	add	sp, #8
 800cad0:	bd70      	pop	{r4, r5, r6, pc}
 800cad2:	466a      	mov	r2, sp
 800cad4:	ab01      	add	r3, sp, #4
 800cad6:	f7ff ffc9 	bl	800ca6c <__swhatbuf_r>
 800cada:	9900      	ldr	r1, [sp, #0]
 800cadc:	4605      	mov	r5, r0
 800cade:	4630      	mov	r0, r6
 800cae0:	f7fd fbca 	bl	800a278 <_malloc_r>
 800cae4:	b948      	cbnz	r0, 800cafa <__smakebuf_r+0x44>
 800cae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800caea:	059a      	lsls	r2, r3, #22
 800caec:	d4ef      	bmi.n	800cace <__smakebuf_r+0x18>
 800caee:	f023 0303 	bic.w	r3, r3, #3
 800caf2:	f043 0302 	orr.w	r3, r3, #2
 800caf6:	81a3      	strh	r3, [r4, #12]
 800caf8:	e7e3      	b.n	800cac2 <__smakebuf_r+0xc>
 800cafa:	89a3      	ldrh	r3, [r4, #12]
 800cafc:	6020      	str	r0, [r4, #0]
 800cafe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb02:	81a3      	strh	r3, [r4, #12]
 800cb04:	9b00      	ldr	r3, [sp, #0]
 800cb06:	6120      	str	r0, [r4, #16]
 800cb08:	6163      	str	r3, [r4, #20]
 800cb0a:	9b01      	ldr	r3, [sp, #4]
 800cb0c:	b15b      	cbz	r3, 800cb26 <__smakebuf_r+0x70>
 800cb0e:	4630      	mov	r0, r6
 800cb10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb14:	f000 f81e 	bl	800cb54 <_isatty_r>
 800cb18:	b128      	cbz	r0, 800cb26 <__smakebuf_r+0x70>
 800cb1a:	89a3      	ldrh	r3, [r4, #12]
 800cb1c:	f023 0303 	bic.w	r3, r3, #3
 800cb20:	f043 0301 	orr.w	r3, r3, #1
 800cb24:	81a3      	strh	r3, [r4, #12]
 800cb26:	89a3      	ldrh	r3, [r4, #12]
 800cb28:	431d      	orrs	r5, r3
 800cb2a:	81a5      	strh	r5, [r4, #12]
 800cb2c:	e7cf      	b.n	800cace <__smakebuf_r+0x18>
	...

0800cb30 <_fstat_r>:
 800cb30:	b538      	push	{r3, r4, r5, lr}
 800cb32:	2300      	movs	r3, #0
 800cb34:	4d06      	ldr	r5, [pc, #24]	; (800cb50 <_fstat_r+0x20>)
 800cb36:	4604      	mov	r4, r0
 800cb38:	4608      	mov	r0, r1
 800cb3a:	4611      	mov	r1, r2
 800cb3c:	602b      	str	r3, [r5, #0]
 800cb3e:	f7f5 fda4 	bl	800268a <_fstat>
 800cb42:	1c43      	adds	r3, r0, #1
 800cb44:	d102      	bne.n	800cb4c <_fstat_r+0x1c>
 800cb46:	682b      	ldr	r3, [r5, #0]
 800cb48:	b103      	cbz	r3, 800cb4c <_fstat_r+0x1c>
 800cb4a:	6023      	str	r3, [r4, #0]
 800cb4c:	bd38      	pop	{r3, r4, r5, pc}
 800cb4e:	bf00      	nop
 800cb50:	20001908 	.word	0x20001908

0800cb54 <_isatty_r>:
 800cb54:	b538      	push	{r3, r4, r5, lr}
 800cb56:	2300      	movs	r3, #0
 800cb58:	4d05      	ldr	r5, [pc, #20]	; (800cb70 <_isatty_r+0x1c>)
 800cb5a:	4604      	mov	r4, r0
 800cb5c:	4608      	mov	r0, r1
 800cb5e:	602b      	str	r3, [r5, #0]
 800cb60:	f7f5 fda2 	bl	80026a8 <_isatty>
 800cb64:	1c43      	adds	r3, r0, #1
 800cb66:	d102      	bne.n	800cb6e <_isatty_r+0x1a>
 800cb68:	682b      	ldr	r3, [r5, #0]
 800cb6a:	b103      	cbz	r3, 800cb6e <_isatty_r+0x1a>
 800cb6c:	6023      	str	r3, [r4, #0]
 800cb6e:	bd38      	pop	{r3, r4, r5, pc}
 800cb70:	20001908 	.word	0x20001908

0800cb74 <log>:
 800cb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb76:	4604      	mov	r4, r0
 800cb78:	460d      	mov	r5, r1
 800cb7a:	f000 f835 	bl	800cbe8 <__ieee754_log>
 800cb7e:	4622      	mov	r2, r4
 800cb80:	4606      	mov	r6, r0
 800cb82:	460f      	mov	r7, r1
 800cb84:	462b      	mov	r3, r5
 800cb86:	4620      	mov	r0, r4
 800cb88:	4629      	mov	r1, r5
 800cb8a:	f7f3 ff7b 	bl	8000a84 <__aeabi_dcmpun>
 800cb8e:	b998      	cbnz	r0, 800cbb8 <log+0x44>
 800cb90:	2200      	movs	r2, #0
 800cb92:	2300      	movs	r3, #0
 800cb94:	4620      	mov	r0, r4
 800cb96:	4629      	mov	r1, r5
 800cb98:	f7f3 ff6a 	bl	8000a70 <__aeabi_dcmpgt>
 800cb9c:	b960      	cbnz	r0, 800cbb8 <log+0x44>
 800cb9e:	2200      	movs	r2, #0
 800cba0:	2300      	movs	r3, #0
 800cba2:	4620      	mov	r0, r4
 800cba4:	4629      	mov	r1, r5
 800cba6:	f7f3 ff3b 	bl	8000a20 <__aeabi_dcmpeq>
 800cbaa:	b140      	cbz	r0, 800cbbe <log+0x4a>
 800cbac:	f7fe f9b6 	bl	800af1c <__errno>
 800cbb0:	2322      	movs	r3, #34	; 0x22
 800cbb2:	2600      	movs	r6, #0
 800cbb4:	4f06      	ldr	r7, [pc, #24]	; (800cbd0 <log+0x5c>)
 800cbb6:	6003      	str	r3, [r0, #0]
 800cbb8:	4630      	mov	r0, r6
 800cbba:	4639      	mov	r1, r7
 800cbbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbbe:	f7fe f9ad 	bl	800af1c <__errno>
 800cbc2:	2321      	movs	r3, #33	; 0x21
 800cbc4:	6003      	str	r3, [r0, #0]
 800cbc6:	4803      	ldr	r0, [pc, #12]	; (800cbd4 <log+0x60>)
 800cbc8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cbcc:	f000 b804 	b.w	800cbd8 <nan>
 800cbd0:	fff00000 	.word	0xfff00000
 800cbd4:	0800d629 	.word	0x0800d629

0800cbd8 <nan>:
 800cbd8:	2000      	movs	r0, #0
 800cbda:	4901      	ldr	r1, [pc, #4]	; (800cbe0 <nan+0x8>)
 800cbdc:	4770      	bx	lr
 800cbde:	bf00      	nop
 800cbe0:	7ff80000 	.word	0x7ff80000
 800cbe4:	00000000 	.word	0x00000000

0800cbe8 <__ieee754_log>:
 800cbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbec:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	460d      	mov	r5, r1
 800cbf6:	b087      	sub	sp, #28
 800cbf8:	da24      	bge.n	800cc44 <__ieee754_log+0x5c>
 800cbfa:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800cbfe:	4304      	orrs	r4, r0
 800cc00:	d108      	bne.n	800cc14 <__ieee754_log+0x2c>
 800cc02:	2200      	movs	r2, #0
 800cc04:	2300      	movs	r3, #0
 800cc06:	2000      	movs	r0, #0
 800cc08:	49cb      	ldr	r1, [pc, #812]	; (800cf38 <__ieee754_log+0x350>)
 800cc0a:	f7f3 fdcb 	bl	80007a4 <__aeabi_ddiv>
 800cc0e:	b007      	add	sp, #28
 800cc10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc14:	2900      	cmp	r1, #0
 800cc16:	da04      	bge.n	800cc22 <__ieee754_log+0x3a>
 800cc18:	f7f3 fae2 	bl	80001e0 <__aeabi_dsub>
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	2300      	movs	r3, #0
 800cc20:	e7f3      	b.n	800cc0a <__ieee754_log+0x22>
 800cc22:	2200      	movs	r2, #0
 800cc24:	4bc5      	ldr	r3, [pc, #788]	; (800cf3c <__ieee754_log+0x354>)
 800cc26:	f7f3 fc93 	bl	8000550 <__aeabi_dmul>
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	460d      	mov	r5, r1
 800cc2e:	4602      	mov	r2, r0
 800cc30:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800cc34:	48c2      	ldr	r0, [pc, #776]	; (800cf40 <__ieee754_log+0x358>)
 800cc36:	4285      	cmp	r5, r0
 800cc38:	dd06      	ble.n	800cc48 <__ieee754_log+0x60>
 800cc3a:	4610      	mov	r0, r2
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	f7f3 fad1 	bl	80001e4 <__adddf3>
 800cc42:	e7e4      	b.n	800cc0e <__ieee754_log+0x26>
 800cc44:	2100      	movs	r1, #0
 800cc46:	e7f5      	b.n	800cc34 <__ieee754_log+0x4c>
 800cc48:	152c      	asrs	r4, r5, #20
 800cc4a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800cc4e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800cc52:	440c      	add	r4, r1
 800cc54:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800cc58:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800cc5c:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
 800cc60:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
 800cc64:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800cc68:	ea41 0305 	orr.w	r3, r1, r5
 800cc6c:	4610      	mov	r0, r2
 800cc6e:	4619      	mov	r1, r3
 800cc70:	2200      	movs	r2, #0
 800cc72:	4bb4      	ldr	r3, [pc, #720]	; (800cf44 <__ieee754_log+0x35c>)
 800cc74:	f7f3 fab4 	bl	80001e0 <__aeabi_dsub>
 800cc78:	1cab      	adds	r3, r5, #2
 800cc7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc7e:	2b02      	cmp	r3, #2
 800cc80:	4682      	mov	sl, r0
 800cc82:	468b      	mov	fp, r1
 800cc84:	f04f 0200 	mov.w	r2, #0
 800cc88:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800cc8c:	dc53      	bgt.n	800cd36 <__ieee754_log+0x14e>
 800cc8e:	2300      	movs	r3, #0
 800cc90:	f7f3 fec6 	bl	8000a20 <__aeabi_dcmpeq>
 800cc94:	b1d0      	cbz	r0, 800cccc <__ieee754_log+0xe4>
 800cc96:	2c00      	cmp	r4, #0
 800cc98:	f000 8122 	beq.w	800cee0 <__ieee754_log+0x2f8>
 800cc9c:	4620      	mov	r0, r4
 800cc9e:	f7f3 fbed 	bl	800047c <__aeabi_i2d>
 800cca2:	a391      	add	r3, pc, #580	; (adr r3, 800cee8 <__ieee754_log+0x300>)
 800cca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca8:	4606      	mov	r6, r0
 800ccaa:	460f      	mov	r7, r1
 800ccac:	f7f3 fc50 	bl	8000550 <__aeabi_dmul>
 800ccb0:	a38f      	add	r3, pc, #572	; (adr r3, 800cef0 <__ieee754_log+0x308>)
 800ccb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb6:	4604      	mov	r4, r0
 800ccb8:	460d      	mov	r5, r1
 800ccba:	4630      	mov	r0, r6
 800ccbc:	4639      	mov	r1, r7
 800ccbe:	f7f3 fc47 	bl	8000550 <__aeabi_dmul>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	4620      	mov	r0, r4
 800ccc8:	4629      	mov	r1, r5
 800ccca:	e7b8      	b.n	800cc3e <__ieee754_log+0x56>
 800cccc:	a38a      	add	r3, pc, #552	; (adr r3, 800cef8 <__ieee754_log+0x310>)
 800ccce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd2:	4650      	mov	r0, sl
 800ccd4:	4659      	mov	r1, fp
 800ccd6:	f7f3 fc3b 	bl	8000550 <__aeabi_dmul>
 800ccda:	4602      	mov	r2, r0
 800ccdc:	460b      	mov	r3, r1
 800ccde:	2000      	movs	r0, #0
 800cce0:	4999      	ldr	r1, [pc, #612]	; (800cf48 <__ieee754_log+0x360>)
 800cce2:	f7f3 fa7d 	bl	80001e0 <__aeabi_dsub>
 800cce6:	4652      	mov	r2, sl
 800cce8:	4606      	mov	r6, r0
 800ccea:	460f      	mov	r7, r1
 800ccec:	465b      	mov	r3, fp
 800ccee:	4650      	mov	r0, sl
 800ccf0:	4659      	mov	r1, fp
 800ccf2:	f7f3 fc2d 	bl	8000550 <__aeabi_dmul>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	4630      	mov	r0, r6
 800ccfc:	4639      	mov	r1, r7
 800ccfe:	f7f3 fc27 	bl	8000550 <__aeabi_dmul>
 800cd02:	4606      	mov	r6, r0
 800cd04:	460f      	mov	r7, r1
 800cd06:	b914      	cbnz	r4, 800cd0e <__ieee754_log+0x126>
 800cd08:	4632      	mov	r2, r6
 800cd0a:	463b      	mov	r3, r7
 800cd0c:	e0a2      	b.n	800ce54 <__ieee754_log+0x26c>
 800cd0e:	4620      	mov	r0, r4
 800cd10:	f7f3 fbb4 	bl	800047c <__aeabi_i2d>
 800cd14:	a374      	add	r3, pc, #464	; (adr r3, 800cee8 <__ieee754_log+0x300>)
 800cd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1a:	4680      	mov	r8, r0
 800cd1c:	4689      	mov	r9, r1
 800cd1e:	f7f3 fc17 	bl	8000550 <__aeabi_dmul>
 800cd22:	a373      	add	r3, pc, #460	; (adr r3, 800cef0 <__ieee754_log+0x308>)
 800cd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd28:	4604      	mov	r4, r0
 800cd2a:	460d      	mov	r5, r1
 800cd2c:	4640      	mov	r0, r8
 800cd2e:	4649      	mov	r1, r9
 800cd30:	f7f3 fc0e 	bl	8000550 <__aeabi_dmul>
 800cd34:	e0a7      	b.n	800ce86 <__ieee754_log+0x29e>
 800cd36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cd3a:	f7f3 fa53 	bl	80001e4 <__adddf3>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	460b      	mov	r3, r1
 800cd42:	4650      	mov	r0, sl
 800cd44:	4659      	mov	r1, fp
 800cd46:	f7f3 fd2d 	bl	80007a4 <__aeabi_ddiv>
 800cd4a:	e9cd 0100 	strd	r0, r1, [sp]
 800cd4e:	4620      	mov	r0, r4
 800cd50:	f7f3 fb94 	bl	800047c <__aeabi_i2d>
 800cd54:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd5c:	4610      	mov	r0, r2
 800cd5e:	4619      	mov	r1, r3
 800cd60:	f7f3 fbf6 	bl	8000550 <__aeabi_dmul>
 800cd64:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800cd68:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	9305      	str	r3, [sp, #20]
 800cd70:	460b      	mov	r3, r1
 800cd72:	4606      	mov	r6, r0
 800cd74:	460f      	mov	r7, r1
 800cd76:	f7f3 fbeb 	bl	8000550 <__aeabi_dmul>
 800cd7a:	a361      	add	r3, pc, #388	; (adr r3, 800cf00 <__ieee754_log+0x318>)
 800cd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd80:	4680      	mov	r8, r0
 800cd82:	4689      	mov	r9, r1
 800cd84:	f7f3 fbe4 	bl	8000550 <__aeabi_dmul>
 800cd88:	a35f      	add	r3, pc, #380	; (adr r3, 800cf08 <__ieee754_log+0x320>)
 800cd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8e:	f7f3 fa29 	bl	80001e4 <__adddf3>
 800cd92:	4642      	mov	r2, r8
 800cd94:	464b      	mov	r3, r9
 800cd96:	f7f3 fbdb 	bl	8000550 <__aeabi_dmul>
 800cd9a:	a35d      	add	r3, pc, #372	; (adr r3, 800cf10 <__ieee754_log+0x328>)
 800cd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda0:	f7f3 fa20 	bl	80001e4 <__adddf3>
 800cda4:	4642      	mov	r2, r8
 800cda6:	464b      	mov	r3, r9
 800cda8:	f7f3 fbd2 	bl	8000550 <__aeabi_dmul>
 800cdac:	a35a      	add	r3, pc, #360	; (adr r3, 800cf18 <__ieee754_log+0x330>)
 800cdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb2:	f7f3 fa17 	bl	80001e4 <__adddf3>
 800cdb6:	4632      	mov	r2, r6
 800cdb8:	463b      	mov	r3, r7
 800cdba:	f7f3 fbc9 	bl	8000550 <__aeabi_dmul>
 800cdbe:	a358      	add	r3, pc, #352	; (adr r3, 800cf20 <__ieee754_log+0x338>)
 800cdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc4:	4606      	mov	r6, r0
 800cdc6:	460f      	mov	r7, r1
 800cdc8:	4640      	mov	r0, r8
 800cdca:	4649      	mov	r1, r9
 800cdcc:	f7f3 fbc0 	bl	8000550 <__aeabi_dmul>
 800cdd0:	a355      	add	r3, pc, #340	; (adr r3, 800cf28 <__ieee754_log+0x340>)
 800cdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd6:	f7f3 fa05 	bl	80001e4 <__adddf3>
 800cdda:	4642      	mov	r2, r8
 800cddc:	464b      	mov	r3, r9
 800cdde:	f7f3 fbb7 	bl	8000550 <__aeabi_dmul>
 800cde2:	a353      	add	r3, pc, #332	; (adr r3, 800cf30 <__ieee754_log+0x348>)
 800cde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde8:	f7f3 f9fc 	bl	80001e4 <__adddf3>
 800cdec:	4642      	mov	r2, r8
 800cdee:	464b      	mov	r3, r9
 800cdf0:	f7f3 fbae 	bl	8000550 <__aeabi_dmul>
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	4639      	mov	r1, r7
 800cdfa:	4630      	mov	r0, r6
 800cdfc:	f7f3 f9f2 	bl	80001e4 <__adddf3>
 800ce00:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800ce04:	9b05      	ldr	r3, [sp, #20]
 800ce06:	3551      	adds	r5, #81	; 0x51
 800ce08:	431d      	orrs	r5, r3
 800ce0a:	2d00      	cmp	r5, #0
 800ce0c:	4680      	mov	r8, r0
 800ce0e:	4689      	mov	r9, r1
 800ce10:	dd48      	ble.n	800cea4 <__ieee754_log+0x2bc>
 800ce12:	2200      	movs	r2, #0
 800ce14:	4b4c      	ldr	r3, [pc, #304]	; (800cf48 <__ieee754_log+0x360>)
 800ce16:	4650      	mov	r0, sl
 800ce18:	4659      	mov	r1, fp
 800ce1a:	f7f3 fb99 	bl	8000550 <__aeabi_dmul>
 800ce1e:	4652      	mov	r2, sl
 800ce20:	465b      	mov	r3, fp
 800ce22:	f7f3 fb95 	bl	8000550 <__aeabi_dmul>
 800ce26:	4602      	mov	r2, r0
 800ce28:	460b      	mov	r3, r1
 800ce2a:	4606      	mov	r6, r0
 800ce2c:	460f      	mov	r7, r1
 800ce2e:	4640      	mov	r0, r8
 800ce30:	4649      	mov	r1, r9
 800ce32:	f7f3 f9d7 	bl	80001e4 <__adddf3>
 800ce36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce3a:	f7f3 fb89 	bl	8000550 <__aeabi_dmul>
 800ce3e:	4680      	mov	r8, r0
 800ce40:	4689      	mov	r9, r1
 800ce42:	b964      	cbnz	r4, 800ce5e <__ieee754_log+0x276>
 800ce44:	4602      	mov	r2, r0
 800ce46:	460b      	mov	r3, r1
 800ce48:	4630      	mov	r0, r6
 800ce4a:	4639      	mov	r1, r7
 800ce4c:	f7f3 f9c8 	bl	80001e0 <__aeabi_dsub>
 800ce50:	4602      	mov	r2, r0
 800ce52:	460b      	mov	r3, r1
 800ce54:	4650      	mov	r0, sl
 800ce56:	4659      	mov	r1, fp
 800ce58:	f7f3 f9c2 	bl	80001e0 <__aeabi_dsub>
 800ce5c:	e6d7      	b.n	800cc0e <__ieee754_log+0x26>
 800ce5e:	a322      	add	r3, pc, #136	; (adr r3, 800cee8 <__ieee754_log+0x300>)
 800ce60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce68:	f7f3 fb72 	bl	8000550 <__aeabi_dmul>
 800ce6c:	a320      	add	r3, pc, #128	; (adr r3, 800cef0 <__ieee754_log+0x308>)
 800ce6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce72:	4604      	mov	r4, r0
 800ce74:	460d      	mov	r5, r1
 800ce76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce7a:	f7f3 fb69 	bl	8000550 <__aeabi_dmul>
 800ce7e:	4642      	mov	r2, r8
 800ce80:	464b      	mov	r3, r9
 800ce82:	f7f3 f9af 	bl	80001e4 <__adddf3>
 800ce86:	4602      	mov	r2, r0
 800ce88:	460b      	mov	r3, r1
 800ce8a:	4630      	mov	r0, r6
 800ce8c:	4639      	mov	r1, r7
 800ce8e:	f7f3 f9a7 	bl	80001e0 <__aeabi_dsub>
 800ce92:	4652      	mov	r2, sl
 800ce94:	465b      	mov	r3, fp
 800ce96:	f7f3 f9a3 	bl	80001e0 <__aeabi_dsub>
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	4620      	mov	r0, r4
 800cea0:	4629      	mov	r1, r5
 800cea2:	e7d9      	b.n	800ce58 <__ieee754_log+0x270>
 800cea4:	4602      	mov	r2, r0
 800cea6:	460b      	mov	r3, r1
 800cea8:	4650      	mov	r0, sl
 800ceaa:	4659      	mov	r1, fp
 800ceac:	f7f3 f998 	bl	80001e0 <__aeabi_dsub>
 800ceb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ceb4:	f7f3 fb4c 	bl	8000550 <__aeabi_dmul>
 800ceb8:	4606      	mov	r6, r0
 800ceba:	460f      	mov	r7, r1
 800cebc:	2c00      	cmp	r4, #0
 800cebe:	f43f af23 	beq.w	800cd08 <__ieee754_log+0x120>
 800cec2:	a309      	add	r3, pc, #36	; (adr r3, 800cee8 <__ieee754_log+0x300>)
 800cec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cecc:	f7f3 fb40 	bl	8000550 <__aeabi_dmul>
 800ced0:	a307      	add	r3, pc, #28	; (adr r3, 800cef0 <__ieee754_log+0x308>)
 800ced2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced6:	4604      	mov	r4, r0
 800ced8:	460d      	mov	r5, r1
 800ceda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cede:	e727      	b.n	800cd30 <__ieee754_log+0x148>
 800cee0:	2000      	movs	r0, #0
 800cee2:	2100      	movs	r1, #0
 800cee4:	e693      	b.n	800cc0e <__ieee754_log+0x26>
 800cee6:	bf00      	nop
 800cee8:	fee00000 	.word	0xfee00000
 800ceec:	3fe62e42 	.word	0x3fe62e42
 800cef0:	35793c76 	.word	0x35793c76
 800cef4:	3dea39ef 	.word	0x3dea39ef
 800cef8:	55555555 	.word	0x55555555
 800cefc:	3fd55555 	.word	0x3fd55555
 800cf00:	df3e5244 	.word	0xdf3e5244
 800cf04:	3fc2f112 	.word	0x3fc2f112
 800cf08:	96cb03de 	.word	0x96cb03de
 800cf0c:	3fc74664 	.word	0x3fc74664
 800cf10:	94229359 	.word	0x94229359
 800cf14:	3fd24924 	.word	0x3fd24924
 800cf18:	55555593 	.word	0x55555593
 800cf1c:	3fe55555 	.word	0x3fe55555
 800cf20:	d078c69f 	.word	0xd078c69f
 800cf24:	3fc39a09 	.word	0x3fc39a09
 800cf28:	1d8e78af 	.word	0x1d8e78af
 800cf2c:	3fcc71c5 	.word	0x3fcc71c5
 800cf30:	9997fa04 	.word	0x9997fa04
 800cf34:	3fd99999 	.word	0x3fd99999
 800cf38:	c3500000 	.word	0xc3500000
 800cf3c:	43500000 	.word	0x43500000
 800cf40:	7fefffff 	.word	0x7fefffff
 800cf44:	3ff00000 	.word	0x3ff00000
 800cf48:	3fe00000 	.word	0x3fe00000

0800cf4c <_init>:
 800cf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf4e:	bf00      	nop
 800cf50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf52:	bc08      	pop	{r3}
 800cf54:	469e      	mov	lr, r3
 800cf56:	4770      	bx	lr

0800cf58 <_fini>:
 800cf58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf5a:	bf00      	nop
 800cf5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf5e:	bc08      	pop	{r3}
 800cf60:	469e      	mov	lr, r3
 800cf62:	4770      	bx	lr
