
AMS_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000897c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  08008b08  08008b08  00009b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092b8  080092b8  0000b234  2**0
                  CONTENTS
  4 .ARM          00000008  080092b8  080092b8  0000a2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092c0  080092c0  0000b234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092c0  080092c0  0000a2c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080092c4  080092c4  0000a2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  080092c8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000800  20000234  080094fc  0000b234  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a34  080094fc  0000ba34  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b234  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cfe  00000000  00000000  0000b25d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032d4  00000000  00000000  0001df5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  00021230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dbc  00000000  00000000  00022428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020dc6  00000000  00000000  000231e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d08  00000000  00000000  00043faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bee9f  00000000  00000000  00059cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118b51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c50  00000000  00000000  00118b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0011e7e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000234 	.word	0x20000234
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008aec 	.word	0x08008aec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000238 	.word	0x20000238
 80001c4:	08008aec 	.word	0x08008aec

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b968 	b.w	8000e28 <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9d08      	ldr	r5, [sp, #32]
 8000b76:	460c      	mov	r4, r1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d14e      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b7c:	4694      	mov	ip, r2
 8000b7e:	458c      	cmp	ip, r1
 8000b80:	4686      	mov	lr, r0
 8000b82:	fab2 f282 	clz	r2, r2
 8000b86:	d962      	bls.n	8000c4e <__udivmoddi4+0xde>
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0320 	rsb	r3, r2, #32
 8000b8e:	4091      	lsls	r1, r2
 8000b90:	fa20 f303 	lsr.w	r3, r0, r3
 8000b94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b98:	4319      	orrs	r1, r3
 8000b9a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ba6:	fb07 1114 	mls	r1, r7, r4, r1
 8000baa:	fa1f f68c 	uxth.w	r6, ip
 8000bae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb6:	fb04 f106 	mul.w	r1, r4, r6
 8000bba:	4299      	cmp	r1, r3
 8000bbc:	d90a      	bls.n	8000bd4 <__udivmoddi4+0x64>
 8000bbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bc6:	f080 8110 	bcs.w	8000dea <__udivmoddi4+0x27a>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 810d 	bls.w	8000dea <__udivmoddi4+0x27a>
 8000bd0:	3c02      	subs	r4, #2
 8000bd2:	4463      	add	r3, ip
 8000bd4:	1a59      	subs	r1, r3, r1
 8000bd6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bda:	fb07 1110 	mls	r1, r7, r0, r1
 8000bde:	fb00 f606 	mul.w	r6, r0, r6
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bea:	429e      	cmp	r6, r3
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x94>
 8000bee:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf6:	f080 80fa 	bcs.w	8000dee <__udivmoddi4+0x27e>
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	f240 80f7 	bls.w	8000dee <__udivmoddi4+0x27e>
 8000c00:	4463      	add	r3, ip
 8000c02:	3802      	subs	r0, #2
 8000c04:	2100      	movs	r1, #0
 8000c06:	1b9b      	subs	r3, r3, r6
 8000c08:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c0c:	b11d      	cbz	r5, 8000c16 <__udivmoddi4+0xa6>
 8000c0e:	40d3      	lsrs	r3, r2
 8000c10:	2200      	movs	r2, #0
 8000c12:	e9c5 3200 	strd	r3, r2, [r5]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d905      	bls.n	8000c2a <__udivmoddi4+0xba>
 8000c1e:	b10d      	cbz	r5, 8000c24 <__udivmoddi4+0xb4>
 8000c20:	e9c5 0100 	strd	r0, r1, [r5]
 8000c24:	2100      	movs	r1, #0
 8000c26:	4608      	mov	r0, r1
 8000c28:	e7f5      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c2a:	fab3 f183 	clz	r1, r3
 8000c2e:	2900      	cmp	r1, #0
 8000c30:	d146      	bne.n	8000cc0 <__udivmoddi4+0x150>
 8000c32:	42a3      	cmp	r3, r4
 8000c34:	d302      	bcc.n	8000c3c <__udivmoddi4+0xcc>
 8000c36:	4290      	cmp	r0, r2
 8000c38:	f0c0 80ee 	bcc.w	8000e18 <__udivmoddi4+0x2a8>
 8000c3c:	1a86      	subs	r6, r0, r2
 8000c3e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c42:	2001      	movs	r0, #1
 8000c44:	2d00      	cmp	r5, #0
 8000c46:	d0e6      	beq.n	8000c16 <__udivmoddi4+0xa6>
 8000c48:	e9c5 6300 	strd	r6, r3, [r5]
 8000c4c:	e7e3      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c4e:	2a00      	cmp	r2, #0
 8000c50:	f040 808f 	bne.w	8000d72 <__udivmoddi4+0x202>
 8000c54:	eba1 040c 	sub.w	r4, r1, ip
 8000c58:	2101      	movs	r1, #1
 8000c5a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5e:	fa1f f78c 	uxth.w	r7, ip
 8000c62:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c66:	fb08 4416 	mls	r4, r8, r6, r4
 8000c6a:	fb07 f006 	mul.w	r0, r7, r6
 8000c6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c76:	4298      	cmp	r0, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x11c>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x11a>
 8000c84:	4298      	cmp	r0, r3
 8000c86:	f200 80cb 	bhi.w	8000e20 <__udivmoddi4+0x2b0>
 8000c8a:	4626      	mov	r6, r4
 8000c8c:	1a1c      	subs	r4, r3, r0
 8000c8e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c92:	fb08 4410 	mls	r4, r8, r0, r4
 8000c96:	fb00 f707 	mul.w	r7, r0, r7
 8000c9a:	fa1f f38e 	uxth.w	r3, lr
 8000c9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ca2:	429f      	cmp	r7, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x148>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x146>
 8000cb0:	429f      	cmp	r7, r3
 8000cb2:	f200 80ae 	bhi.w	8000e12 <__udivmoddi4+0x2a2>
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	1bdb      	subs	r3, r3, r7
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	e7a5      	b.n	8000c0c <__udivmoddi4+0x9c>
 8000cc0:	f1c1 0720 	rsb	r7, r1, #32
 8000cc4:	408b      	lsls	r3, r1
 8000cc6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cca:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cce:	fa24 f607 	lsr.w	r6, r4, r7
 8000cd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cd6:	fbb6 f8f9 	udiv	r8, r6, r9
 8000cda:	fa1f fe8c 	uxth.w	lr, ip
 8000cde:	fb09 6618 	mls	r6, r9, r8, r6
 8000ce2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ce6:	408c      	lsls	r4, r1
 8000ce8:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cec:	fb08 f00e 	mul.w	r0, r8, lr
 8000cf0:	431c      	orrs	r4, r3
 8000cf2:	0c23      	lsrs	r3, r4, #16
 8000cf4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfe:	d90a      	bls.n	8000d16 <__udivmoddi4+0x1a6>
 8000d00:	eb1c 0303 	adds.w	r3, ip, r3
 8000d04:	f108 36ff 	add.w	r6, r8, #4294967295
 8000d08:	f080 8081 	bcs.w	8000e0e <__udivmoddi4+0x29e>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	d97e      	bls.n	8000e0e <__udivmoddi4+0x29e>
 8000d10:	f1a8 0802 	sub.w	r8, r8, #2
 8000d14:	4463      	add	r3, ip
 8000d16:	1a1e      	subs	r6, r3, r0
 8000d18:	fbb6 f3f9 	udiv	r3, r6, r9
 8000d1c:	fb09 6613 	mls	r6, r9, r3, r6
 8000d20:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d24:	b2a4      	uxth	r4, r4
 8000d26:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x1d0>
 8000d2e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d32:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d36:	d266      	bcs.n	8000e06 <__udivmoddi4+0x296>
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d964      	bls.n	8000e06 <__udivmoddi4+0x296>
 8000d3c:	3b02      	subs	r3, #2
 8000d3e:	4464      	add	r4, ip
 8000d40:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d44:	fba0 8302 	umull	r8, r3, r0, r2
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	429c      	cmp	r4, r3
 8000d4e:	46c6      	mov	lr, r8
 8000d50:	461e      	mov	r6, r3
 8000d52:	d350      	bcc.n	8000df6 <__udivmoddi4+0x286>
 8000d54:	d04d      	beq.n	8000df2 <__udivmoddi4+0x282>
 8000d56:	b155      	cbz	r5, 8000d6e <__udivmoddi4+0x1fe>
 8000d58:	ebba 030e 	subs.w	r3, sl, lr
 8000d5c:	eb64 0406 	sbc.w	r4, r4, r6
 8000d60:	fa04 f707 	lsl.w	r7, r4, r7
 8000d64:	40cb      	lsrs	r3, r1
 8000d66:	431f      	orrs	r7, r3
 8000d68:	40cc      	lsrs	r4, r1
 8000d6a:	e9c5 7400 	strd	r7, r4, [r5]
 8000d6e:	2100      	movs	r1, #0
 8000d70:	e751      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000d72:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d76:	f1c2 0320 	rsb	r3, r2, #32
 8000d7a:	40d9      	lsrs	r1, r3
 8000d7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d80:	fa20 f303 	lsr.w	r3, r0, r3
 8000d84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d88:	fbb1 f0f8 	udiv	r0, r1, r8
 8000d8c:	fb08 1110 	mls	r1, r8, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	431c      	orrs	r4, r3
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	0c23      	lsrs	r3, r4, #16
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb00 f107 	mul.w	r1, r0, r7
 8000da2:	4299      	cmp	r1, r3
 8000da4:	d908      	bls.n	8000db8 <__udivmoddi4+0x248>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dae:	d22c      	bcs.n	8000e0a <__udivmoddi4+0x29a>
 8000db0:	4299      	cmp	r1, r3
 8000db2:	d92a      	bls.n	8000e0a <__udivmoddi4+0x29a>
 8000db4:	3802      	subs	r0, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dbe:	fb08 3311 	mls	r3, r8, r1, r3
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb01 f307 	mul.w	r3, r1, r7
 8000dcc:	42a3      	cmp	r3, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x272>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dd8:	d213      	bcs.n	8000e02 <__udivmoddi4+0x292>
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	d911      	bls.n	8000e02 <__udivmoddi4+0x292>
 8000dde:	3902      	subs	r1, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	1ae4      	subs	r4, r4, r3
 8000de4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000de8:	e73b      	b.n	8000c62 <__udivmoddi4+0xf2>
 8000dea:	4604      	mov	r4, r0
 8000dec:	e6f2      	b.n	8000bd4 <__udivmoddi4+0x64>
 8000dee:	4608      	mov	r0, r1
 8000df0:	e708      	b.n	8000c04 <__udivmoddi4+0x94>
 8000df2:	45c2      	cmp	sl, r8
 8000df4:	d2af      	bcs.n	8000d56 <__udivmoddi4+0x1e6>
 8000df6:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dfa:	eb63 060c 	sbc.w	r6, r3, ip
 8000dfe:	3801      	subs	r0, #1
 8000e00:	e7a9      	b.n	8000d56 <__udivmoddi4+0x1e6>
 8000e02:	4631      	mov	r1, r6
 8000e04:	e7ed      	b.n	8000de2 <__udivmoddi4+0x272>
 8000e06:	4603      	mov	r3, r0
 8000e08:	e79a      	b.n	8000d40 <__udivmoddi4+0x1d0>
 8000e0a:	4630      	mov	r0, r6
 8000e0c:	e7d4      	b.n	8000db8 <__udivmoddi4+0x248>
 8000e0e:	46b0      	mov	r8, r6
 8000e10:	e781      	b.n	8000d16 <__udivmoddi4+0x1a6>
 8000e12:	4463      	add	r3, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	e74f      	b.n	8000cb8 <__udivmoddi4+0x148>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	e711      	b.n	8000c44 <__udivmoddi4+0xd4>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	e732      	b.n	8000c8c <__udivmoddi4+0x11c>
 8000e26:	bf00      	nop

08000e28 <__aeabi_idiv0>:
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <spi_write_array>:
 * @param len length of the data array
 * @param data pointer to the data array
 */

static inline void spi_write_array(uint8_t len, uint8_t data[])
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi3, data, len, HAL_MAX_DELAY);
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e40:	6839      	ldr	r1, [r7, #0]
 8000e42:	4803      	ldr	r0, [pc, #12]	@ (8000e50 <spi_write_array+0x24>)
 8000e44:	f003 fb7f 	bl	8004546 <HAL_SPI_Transmit>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	2000033c 	.word	0x2000033c

08000e54 <spi_write_read>:
 * @param tx_len length of the data array to be transmitted
 * @param rx_data pointer to the data array to be received
 * @param rx_len length of the data array to be received
 */
static inline void spi_write_read(uint8_t tx_Data[], uint8_t tx_len, uint8_t *rx_data, uint8_t rx_len)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	460b      	mov	r3, r1
 8000e62:	72fb      	strb	r3, [r7, #11]
 8000e64:	4613      	mov	r3, r2
 8000e66:	72bb      	strb	r3, [r7, #10]
  HAL_SPI_Transmit(&hspi3, tx_Data, tx_len, HAL_MAX_DELAY);
 8000e68:	7afb      	ldrb	r3, [r7, #11]
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e70:	68f9      	ldr	r1, [r7, #12]
 8000e72:	4807      	ldr	r0, [pc, #28]	@ (8000e90 <spi_write_read+0x3c>)
 8000e74:	f003 fb67 	bl	8004546 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3, rx_data, rx_len, HAL_MAX_DELAY);
 8000e78:	7abb      	ldrb	r3, [r7, #10]
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	4803      	ldr	r0, [pc, #12]	@ (8000e90 <spi_write_read+0x3c>)
 8000e84:	f003 fca2 	bl	80047cc <HAL_SPI_Receive>

}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2000033c 	.word	0x2000033c

08000e94 <LTC6811_initialize>:
uint8_t wakeup = 0x00;

/*@brief Initializes all command variables
 */
void LTC6811_initialize()
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af02      	add	r7, sp, #8
  set_adc(MD_NORMAL, DCP_DISABLED, CELL_CH_ALL, AUX_CH_ALL, CHST_SC);
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	2002      	movs	r0, #2
 8000ea6:	f000 f81f 	bl	8000ee8 <set_adc>
  //set_selftest(MD_NORMAL, ST_1);
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <wakeup_idle>:

void wakeup_idle()
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eba:	4808      	ldr	r0, [pc, #32]	@ (8000edc <wakeup_idle+0x2c>)
 8000ebc:	f002 fd66 	bl	800398c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4906      	ldr	r1, [pc, #24]	@ (8000ee0 <wakeup_idle+0x30>)
 8000ec6:	4807      	ldr	r0, [pc, #28]	@ (8000ee4 <wakeup_idle+0x34>)
 8000ec8:	f003 fb3d 	bl	8004546 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ed2:	4802      	ldr	r0, [pc, #8]	@ (8000edc <wakeup_idle+0x2c>)
 8000ed4:	f002 fd5a 	bl	800398c <HAL_GPIO_WritePin>
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	20000256 	.word	0x20000256
 8000ee4:	2000033c 	.word	0x2000033c

08000ee8 <set_adc>:
			|-----------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|
			|ADCV:	    |   0   |   1   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CH[2] | CH[1] | CH[0] |
			|ADAX:	    |   1   |   0   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CHG[2]| CHG[1]| CHG[0]|
 ******************************************************************************************************************/
void set_adc(uint8_t MD, uint8_t DCP, uint8_t CH, uint8_t CHG, uint8_t CHST)
{
 8000ee8:	b490      	push	{r4, r7}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4604      	mov	r4, r0
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4623      	mov	r3, r4
 8000ef8:	71fb      	strb	r3, [r7, #7]
 8000efa:	4603      	mov	r3, r0
 8000efc:	71bb      	strb	r3, [r7, #6]
 8000efe:	460b      	mov	r3, r1
 8000f00:	717b      	strb	r3, [r7, #5]
 8000f02:	4613      	mov	r3, r2
 8000f04:	713b      	strb	r3, [r7, #4]
  uint8_t md_bits;

  md_bits = (MD & 0x02) >> 1;
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	105b      	asrs	r3, r3, #1
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]
  ADCV[0] = md_bits | 0x02;
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <set_adc+0x94>)
 8000f1c:	701a      	strb	r2, [r3, #0]
  md_bits = (MD & 0x01) << 7;
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	01db      	lsls	r3, r3, #7
 8000f22:	73fb      	strb	r3, [r7, #15]
  ADCV[1] = md_bits | 0x60 | (DCP << 4) | CH;
 8000f24:	79bb      	ldrb	r3, [r7, #6]
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	797b      	ldrb	r3, [r7, #5]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000f3a:	b2da      	uxtb	r2, r3
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <set_adc+0x94>)
 8000f3e:	705a      	strb	r2, [r3, #1]

  md_bits = (MD & 0x02) >> 1;
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	105b      	asrs	r3, r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	73fb      	strb	r3, [r7, #15]
  ADAX[0] = md_bits | 0x04;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <set_adc+0x98>)
 8000f56:	701a      	strb	r2, [r3, #0]
  md_bits = (MD & 0x01) << 7;
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	01db      	lsls	r3, r3, #7
 8000f5c:	73fb      	strb	r3, [r7, #15]
  ADAX[1] = md_bits | 0x60 | CHG;
 8000f5e:	7bfa      	ldrb	r2, [r7, #15]
 8000f60:	793b      	ldrb	r3, [r7, #4]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	4b04      	ldr	r3, [pc, #16]	@ (8000f80 <set_adc+0x98>)
 8000f6e:	705a      	strb	r2, [r3, #1]
  md_bits = (MD & 0x02) >> 1;
  ADSTAT[0] = md_bits | 0x04;
  md_bits = (MD & 0x01) << 7;
  ADSTAT[1] = md_bits | 0x68 | CHST;
  */
}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc90      	pop	{r4, r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000250 	.word	0x20000250
 8000f80:	20000254 	.word	0x20000254

08000f84 <LTC6811_adcv>:
 | CH     | Determines which cell channels are converted |
 | DCP    | Determines if Discharge is Permitted	     |

***********************************************************************************************/
void LTC6811_adcv()
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;
	//1
	cmd[0] = ADCV[0];
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <LTC6811_adcv+0x74>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADCV[1];
 8000f90:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <LTC6811_adcv+0x74>)
 8000f92:	785b      	ldrb	r3, [r3, #1]
 8000f94:	707b      	strb	r3, [r7, #1]
	//2
	temp_pec = pec15_calc(2, ADCV);
 8000f96:	4918      	ldr	r1, [pc, #96]	@ (8000ff8 <LTC6811_adcv+0x74>)
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f000 fb07 	bl	80015ac <pec15_calc>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	70fb      	strb	r3, [r7, #3]
	//3
	wakeup_idle();
 8000fb2:	f7ff ff7d 	bl	8000eb0 <wakeup_idle>
	//4
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fbc:	480f      	ldr	r0, [pc, #60]	@ (8000ffc <LTC6811_adcv+0x78>)
 8000fbe:	f002 fce5 	bl	800398c <HAL_GPIO_WritePin>
	spi_write_array(4, cmd);
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	2004      	movs	r0, #4
 8000fc8:	f7ff ff30 	bl	8000e2c <spi_write_array>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fd2:	480a      	ldr	r0, [pc, #40]	@ (8000ffc <LTC6811_adcv+0x78>)
 8000fd4:	f002 fcda 	bl	800398c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000fd8:	2301      	movs	r3, #1
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4908      	ldr	r1, [pc, #32]	@ (8001000 <LTC6811_adcv+0x7c>)
 8000fde:	4809      	ldr	r0, [pc, #36]	@ (8001004 <LTC6811_adcv+0x80>)
 8000fe0:	f003 fab1 	bl	8004546 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4905      	ldr	r1, [pc, #20]	@ (8001000 <LTC6811_adcv+0x7c>)
 8000fea:	4806      	ldr	r0, [pc, #24]	@ (8001004 <LTC6811_adcv+0x80>)
 8000fec:	f003 faab 	bl	8004546 <HAL_SPI_Transmit>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000250 	.word	0x20000250
 8000ffc:	40020000 	.word	0x40020000
 8001000:	20000256 	.word	0x20000256
 8001004:	2000033c 	.word	0x2000033c

08001008 <LTC6811_adax>:
 | MD     | Determines the filter corner of the ADC      |
 | CHG    | Determines which GPIO channels are converted |

*********************************************************************************************************/
void LTC6811_adax()
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;

	//1
	cmd[0] = ADAX[0];
 800100e:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <LTC6811_adax+0x74>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADAX[1];
 8001014:	4b19      	ldr	r3, [pc, #100]	@ (800107c <LTC6811_adax+0x74>)
 8001016:	785b      	ldrb	r3, [r3, #1]
 8001018:	707b      	strb	r3, [r7, #1]
	//2
	temp_pec = pec15_calc(2, ADAX);
 800101a:	4918      	ldr	r1, [pc, #96]	@ (800107c <LTC6811_adax+0x74>)
 800101c:	2002      	movs	r0, #2
 800101e:	f000 fac5 	bl	80015ac <pec15_calc>
 8001022:	4603      	mov	r3, r0
 8001024:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 8001026:	88fb      	ldrh	r3, [r7, #6]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	b29b      	uxth	r3, r3
 800102c:	b2db      	uxtb	r3, r3
 800102e:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	70fb      	strb	r3, [r7, #3]
	//3
	wakeup_idle();
 8001036:	f7ff ff3b 	bl	8000eb0 <wakeup_idle>
	//4
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001040:	480f      	ldr	r0, [pc, #60]	@ (8001080 <LTC6811_adax+0x78>)
 8001042:	f002 fca3 	bl	800398c <HAL_GPIO_WritePin>
	spi_write_array(4, cmd);
 8001046:	463b      	mov	r3, r7
 8001048:	4619      	mov	r1, r3
 800104a:	2004      	movs	r0, #4
 800104c:	f7ff feee 	bl	8000e2c <spi_write_array>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001056:	480a      	ldr	r0, [pc, #40]	@ (8001080 <LTC6811_adax+0x78>)
 8001058:	f002 fc98 	bl	800398c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 800105c:	2301      	movs	r3, #1
 800105e:	2201      	movs	r2, #1
 8001060:	4908      	ldr	r1, [pc, #32]	@ (8001084 <LTC6811_adax+0x7c>)
 8001062:	4809      	ldr	r0, [pc, #36]	@ (8001088 <LTC6811_adax+0x80>)
 8001064:	f003 fa6f 	bl	8004546 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8001068:	2301      	movs	r3, #1
 800106a:	2201      	movs	r2, #1
 800106c:	4905      	ldr	r1, [pc, #20]	@ (8001084 <LTC6811_adax+0x7c>)
 800106e:	4806      	ldr	r0, [pc, #24]	@ (8001088 <LTC6811_adax+0x80>)
 8001070:	f003 fa69 	bl	8004546 <HAL_SPI_Transmit>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000254 	.word	0x20000254
 8001080:	40020000 	.word	0x40020000
 8001084:	20000256 	.word	0x20000256
 8001088:	2000033c 	.word	0x2000033c

0800108c <LTC6811_wrcfg>:


void LTC6811_wrcfg(uint8_t nIC, uint8_t config [][6])

{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 8001098:	2306      	movs	r3, #6
 800109a:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * nIC);
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	3304      	adds	r3, #4
 80010a4:	74fb      	strb	r3, [r7, #19]

	uint16_t temp_pec;
	uint8_t current_ic;
	uint8_t WRCFG_index = 4;
 80010a6:	2304      	movs	r3, #4
 80010a8:	75bb      	strb	r3, [r7, #22]
	uint8_t *WRCFG;


	WRCFG = (uint8_t *)malloc(CMD_LEN * sizeof(uint8_t));
 80010aa:	7cfb      	ldrb	r3, [r7, #19]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f004 fe8b 	bl	8005dc8 <malloc>
 80010b2:	4603      	mov	r3, r0
 80010b4:	60fb      	str	r3, [r7, #12]

	for(current_ic = 0; current_ic < nIC; current_ic++)
 80010b6:	2300      	movs	r3, #0
 80010b8:	75fb      	strb	r3, [r7, #23]
 80010ba:	e03f      	b.n	800113c <LTC6811_wrcfg+0xb0>
	{
		for(uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80010bc:	2300      	movs	r3, #0
 80010be:	757b      	strb	r3, [r7, #21]
 80010c0:	e013      	b.n	80010ea <LTC6811_wrcfg+0x5e>
		{
			WRCFG[WRCFG_index] = config[current_ic][current_byte];
 80010c2:	7dfa      	ldrb	r2, [r7, #23]
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	461a      	mov	r2, r3
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	1899      	adds	r1, r3, r2
 80010d2:	7d7a      	ldrb	r2, [r7, #21]
 80010d4:	7dbb      	ldrb	r3, [r7, #22]
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	4403      	add	r3, r0
 80010da:	5c8a      	ldrb	r2, [r1, r2]
 80010dc:	701a      	strb	r2, [r3, #0]
			WRCFG_index++;
 80010de:	7dbb      	ldrb	r3, [r7, #22]
 80010e0:	3301      	adds	r3, #1
 80010e2:	75bb      	strb	r3, [r7, #22]
		for(uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80010e4:	7d7b      	ldrb	r3, [r7, #21]
 80010e6:	3301      	adds	r3, #1
 80010e8:	757b      	strb	r3, [r7, #21]
 80010ea:	7d7a      	ldrb	r2, [r7, #21]
 80010ec:	7d3b      	ldrb	r3, [r7, #20]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d3e7      	bcc.n	80010c2 <LTC6811_wrcfg+0x36>
		}

		temp_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic][0]);
 80010f2:	7dfa      	ldrb	r2, [r7, #23]
 80010f4:	4613      	mov	r3, r2
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	4413      	add	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	461a      	mov	r2, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	4413      	add	r3, r2
 8001102:	461a      	mov	r2, r3
 8001104:	7d3b      	ldrb	r3, [r7, #20]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f000 fa4f 	bl	80015ac <pec15_calc>
 800110e:	4603      	mov	r3, r0
 8001110:	817b      	strh	r3, [r7, #10]
		WRCFG[WRCFG_index] = (uint8_t)(temp_pec >> 8);
 8001112:	897b      	ldrh	r3, [r7, #10]
 8001114:	0a1b      	lsrs	r3, r3, #8
 8001116:	b299      	uxth	r1, r3
 8001118:	7dbb      	ldrb	r3, [r7, #22]
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	4413      	add	r3, r2
 800111e:	b2ca      	uxtb	r2, r1
 8001120:	701a      	strb	r2, [r3, #0]
		WRCFG[WRCFG_index + 1] = (uint8_t)temp_pec;
 8001122:	7dbb      	ldrb	r3, [r7, #22]
 8001124:	3301      	adds	r3, #1
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	4413      	add	r3, r2
 800112a:	897a      	ldrh	r2, [r7, #10]
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
		WRCFG_index += 2;
 8001130:	7dbb      	ldrb	r3, [r7, #22]
 8001132:	3302      	adds	r3, #2
 8001134:	75bb      	strb	r3, [r7, #22]
	for(current_ic = 0; current_ic < nIC; current_ic++)
 8001136:	7dfb      	ldrb	r3, [r7, #23]
 8001138:	3301      	adds	r3, #1
 800113a:	75fb      	strb	r3, [r7, #23]
 800113c:	7dfa      	ldrb	r2, [r7, #23]
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	429a      	cmp	r2, r3
 8001142:	d3bb      	bcc.n	80010bc <LTC6811_wrcfg+0x30>
	}

	wakeup_idle();
 8001144:	f7ff feb4 	bl	8000eb0 <wakeup_idle>

	for(current_ic = 0; current_ic < nIC; current_ic++)
 8001148:	2300      	movs	r3, #0
 800114a:	75fb      	strb	r3, [r7, #23]
 800114c:	e045      	b.n	80011da <LTC6811_wrcfg+0x14e>
	{
	    WRCFG[0] = 0x80 + (current_ic << 3); //Setting address
 800114e:	7dfb      	ldrb	r3, [r7, #23]
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	3b80      	subs	r3, #128	@ 0x80
 8001156:	b2da      	uxtb	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	701a      	strb	r2, [r3, #0]
	    WRCFG[1] = 0x01;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3301      	adds	r3, #1
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
	    temp_pec = pec15_calc(2, WRCFG);
 8001164:	68f9      	ldr	r1, [r7, #12]
 8001166:	2002      	movs	r0, #2
 8001168:	f000 fa20 	bl	80015ac <pec15_calc>
 800116c:	4603      	mov	r3, r0
 800116e:	817b      	strh	r3, [r7, #10]
	    WRCFG[2] = (uint8_t)(temp_pec >> 8);
 8001170:	897b      	ldrh	r3, [r7, #10]
 8001172:	0a1b      	lsrs	r3, r3, #8
 8001174:	b29a      	uxth	r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	3302      	adds	r3, #2
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	701a      	strb	r2, [r3, #0]
	    WRCFG[3] = (uint8_t)(temp_pec);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	3303      	adds	r3, #3
 8001182:	897a      	ldrh	r2, [r7, #10]
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800118e:	4817      	ldr	r0, [pc, #92]	@ (80011ec <LTC6811_wrcfg+0x160>)
 8001190:	f002 fbfc 	bl	800398c <HAL_GPIO_WritePin>
		spi_write_array(4, WRCFG);
 8001194:	68f9      	ldr	r1, [r7, #12]
 8001196:	2004      	movs	r0, #4
 8001198:	f7ff fe48 	bl	8000e2c <spi_write_array>
		spi_write_array(8, &WRCFG[4 + (8 * current_ic)]);
 800119c:	7dfb      	ldrb	r3, [r7, #23]
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	3304      	adds	r3, #4
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	2008      	movs	r0, #8
 80011ac:	f7ff fe3e 	bl	8000e2c <spi_write_array>
		HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011b6:	480d      	ldr	r0, [pc, #52]	@ (80011ec <LTC6811_wrcfg+0x160>)
 80011b8:	f002 fbe8 	bl	800398c <HAL_GPIO_WritePin>


		HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 80011bc:	2301      	movs	r3, #1
 80011be:	2201      	movs	r2, #1
 80011c0:	490b      	ldr	r1, [pc, #44]	@ (80011f0 <LTC6811_wrcfg+0x164>)
 80011c2:	480c      	ldr	r0, [pc, #48]	@ (80011f4 <LTC6811_wrcfg+0x168>)
 80011c4:	f003 f9bf 	bl	8004546 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 80011c8:	2301      	movs	r3, #1
 80011ca:	2201      	movs	r2, #1
 80011cc:	4908      	ldr	r1, [pc, #32]	@ (80011f0 <LTC6811_wrcfg+0x164>)
 80011ce:	4809      	ldr	r0, [pc, #36]	@ (80011f4 <LTC6811_wrcfg+0x168>)
 80011d0:	f003 f9b9 	bl	8004546 <HAL_SPI_Transmit>
	for(current_ic = 0; current_ic < nIC; current_ic++)
 80011d4:	7dfb      	ldrb	r3, [r7, #23]
 80011d6:	3301      	adds	r3, #1
 80011d8:	75fb      	strb	r3, [r7, #23]
 80011da:	7dfa      	ldrb	r2, [r7, #23]
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d3b5      	bcc.n	800114e <LTC6811_wrcfg+0xc2>

	}
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40020000 	.word	0x40020000
 80011f0:	20000256 	.word	0x20000256
 80011f4:	2000033c 	.word	0x2000033c

080011f8 <LTC6811_rdcv>:
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
}
*/

uint8_t LTC6811_rdcv(uint8_t reg, uint8_t nIC, uint16_t cell_codes[][12])
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	603a      	str	r2, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
 8001204:	460b      	mov	r3, r1
 8001206:	71bb      	strb	r3, [r7, #6]
	const uint8_t NUM_RX_BYT = 8;
 8001208:	2308      	movs	r3, #8
 800120a:	76bb      	strb	r3, [r7, #26]
	const uint8_t BYT_IN_REG = 6;
 800120c:	2306      	movs	r3, #6
 800120e:	767b      	strb	r3, [r7, #25]
	const uint8_t CELL_IN_REG = 3;
 8001210:	2303      	movs	r3, #3
 8001212:	763b      	strb	r3, [r7, #24]

	uint8_t pec_error = 0; //pec Error wenn -1
 8001214:	2300      	movs	r3, #0
 8001216:	77fb      	strb	r3, [r7, #31]
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	77bb      	strb	r3, [r7, #30]
	uint8_t *cell_data;
	cell_data = (uint8_t *)malloc((NUM_RX_BYT * nIC) * sizeof(uint8_t));
 800121c:	7ebb      	ldrb	r3, [r7, #26]
 800121e:	79ba      	ldrb	r2, [r7, #6]
 8001220:	fb02 f303 	mul.w	r3, r2, r3
 8001224:	4618      	mov	r0, r3
 8001226:	f004 fdcf 	bl	8005dc8 <malloc>
 800122a:	4603      	mov	r3, r0
 800122c:	617b      	str	r3, [r7, #20]

	for(uint8_t cell_reg = 1; cell_reg < 5; cell_reg++)	//executes once for each of the LTC6804 cell voltage registers
 800122e:	2301      	movs	r3, #1
 8001230:	777b      	strb	r3, [r7, #29]
 8001232:	e066      	b.n	8001302 <LTC6811_rdcv+0x10a>
	{
		data_counter = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	77bb      	strb	r3, [r7, #30]
		LTC6811_rdcv_reg(cell_reg, nIC, cell_data);
 8001238:	79b9      	ldrb	r1, [r7, #6]
 800123a:	7f7b      	ldrb	r3, [r7, #29]
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f86a 	bl	8001318 <LTC6811_rdcv_reg>

		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 8001244:	2300      	movs	r3, #0
 8001246:	773b      	strb	r3, [r7, #28]
 8001248:	e054      	b.n	80012f4 <LTC6811_rdcv+0xfc>
		{
			 // current_ic is used as an IC counter
			for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 800124a:	2300      	movs	r3, #0
 800124c:	76fb      	strb	r3, [r7, #27]
 800124e:	e026      	b.n	800129e <LTC6811_rdcv+0xa6>
			{
				uint16_t parsed_cell = cell_data[data_counter] | (cell_data[data_counter + 1] << 8);
 8001250:	7fbb      	ldrb	r3, [r7, #30]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	4413      	add	r3, r2
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b21a      	sxth	r2, r3
 800125a:	7fbb      	ldrb	r3, [r7, #30]
 800125c:	3301      	adds	r3, #1
 800125e:	6979      	ldr	r1, [r7, #20]
 8001260:	440b      	add	r3, r1
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	b21b      	sxth	r3, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	b21b      	sxth	r3, r3
 800126c:	81fb      	strh	r3, [r7, #14]
				cell_codes[current_ic][current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 800126e:	7f3a      	ldrb	r2, [r7, #28]
 8001270:	4613      	mov	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4413      	add	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	461a      	mov	r2, r3
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	4413      	add	r3, r2
 800127e:	7ef9      	ldrb	r1, [r7, #27]
 8001280:	7f7a      	ldrb	r2, [r7, #29]
 8001282:	3a01      	subs	r2, #1
 8001284:	7e38      	ldrb	r0, [r7, #24]
 8001286:	fb00 f202 	mul.w	r2, r0, r2
 800128a:	440a      	add	r2, r1
 800128c:	89f9      	ldrh	r1, [r7, #14]
 800128e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter = data_counter + 2;
 8001292:	7fbb      	ldrb	r3, [r7, #30]
 8001294:	3302      	adds	r3, #2
 8001296:	77bb      	strb	r3, [r7, #30]
			for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 8001298:	7efb      	ldrb	r3, [r7, #27]
 800129a:	3301      	adds	r3, #1
 800129c:	76fb      	strb	r3, [r7, #27]
 800129e:	7efa      	ldrb	r2, [r7, #27]
 80012a0:	7e3b      	ldrb	r3, [r7, #24]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d3d4      	bcc.n	8001250 <LTC6811_rdcv+0x58>
			}
			received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter + 1];
 80012a6:	7fbb      	ldrb	r3, [r7, #30]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	4413      	add	r3, r2
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	7fba      	ldrb	r2, [r7, #30]
 80012b4:	3201      	adds	r2, #1
 80012b6:	6979      	ldr	r1, [r7, #20]
 80012b8:	440a      	add	r2, r1
 80012ba:	7812      	ldrb	r2, [r2, #0]
 80012bc:	4413      	add	r3, r2
 80012be:	827b      	strh	r3, [r7, #18]
			data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 80012c0:	7f3b      	ldrb	r3, [r7, #28]
 80012c2:	7eba      	ldrb	r2, [r7, #26]
 80012c4:	fb02 f303 	mul.w	r3, r2, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	441a      	add	r2, r3
 80012ce:	7e7b      	ldrb	r3, [r7, #25]
 80012d0:	4611      	mov	r1, r2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f96a 	bl	80015ac <pec15_calc>
 80012d8:	4603      	mov	r3, r0
 80012da:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 80012dc:	8a7a      	ldrh	r2, [r7, #18]
 80012de:	8a3b      	ldrh	r3, [r7, #16]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d001      	beq.n	80012e8 <LTC6811_rdcv+0xf0>
			{
			  pec_error = -1;
 80012e4:	23ff      	movs	r3, #255	@ 0xff
 80012e6:	77fb      	strb	r3, [r7, #31]
			}
			data_counter = data_counter + 2;
 80012e8:	7fbb      	ldrb	r3, [r7, #30]
 80012ea:	3302      	adds	r3, #2
 80012ec:	77bb      	strb	r3, [r7, #30]
		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 80012ee:	7f3b      	ldrb	r3, [r7, #28]
 80012f0:	3301      	adds	r3, #1
 80012f2:	773b      	strb	r3, [r7, #28]
 80012f4:	7f3a      	ldrb	r2, [r7, #28]
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d3a6      	bcc.n	800124a <LTC6811_rdcv+0x52>
	for(uint8_t cell_reg = 1; cell_reg < 5; cell_reg++)	//executes once for each of the LTC6804 cell voltage registers
 80012fc:	7f7b      	ldrb	r3, [r7, #29]
 80012fe:	3301      	adds	r3, #1
 8001300:	777b      	strb	r3, [r7, #29]
 8001302:	7f7b      	ldrb	r3, [r7, #29]
 8001304:	2b04      	cmp	r3, #4
 8001306:	d995      	bls.n	8001234 <LTC6811_rdcv+0x3c>
		}
	}

	free(cell_data);
 8001308:	6978      	ldr	r0, [r7, #20]
 800130a:	f004 fd65 	bl	8005dd8 <free>
	return(pec_error);
 800130e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3720      	adds	r7, #32
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <LTC6811_rdcv_reg>:

void LTC6811_rdcv_reg(uint8_t reg, uint8_t nIC, uint8_t *data)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	603a      	str	r2, [r7, #0]
 8001322:	71fb      	strb	r3, [r7, #7]
 8001324:	460b      	mov	r3, r1
 8001326:	71bb      	strb	r3, [r7, #6]
	uint8_t RDCV[4];
	uint16_t temp_pec;

	switch(reg){
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	3b01      	subs	r3, #1
 800132c:	2b03      	cmp	r3, #3
 800132e:	d817      	bhi.n	8001360 <LTC6811_rdcv_reg+0x48>
 8001330:	a201      	add	r2, pc, #4	@ (adr r2, 8001338 <LTC6811_rdcv_reg+0x20>)
 8001332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001336:	bf00      	nop
 8001338:	08001349 	.word	0x08001349
 800133c:	0800134f 	.word	0x0800134f
 8001340:	08001355 	.word	0x08001355
 8001344:	0800135b 	.word	0x0800135b
		case 1: RDCV[1] = 0x04; break;
 8001348:	2304      	movs	r3, #4
 800134a:	727b      	strb	r3, [r7, #9]
 800134c:	e008      	b.n	8001360 <LTC6811_rdcv_reg+0x48>
		case 2: RDCV[1] = 0x06; break;
 800134e:	2306      	movs	r3, #6
 8001350:	727b      	strb	r3, [r7, #9]
 8001352:	e005      	b.n	8001360 <LTC6811_rdcv_reg+0x48>
		case 3: RDCV[1] = 0x08; break;
 8001354:	2308      	movs	r3, #8
 8001356:	727b      	strb	r3, [r7, #9]
 8001358:	e002      	b.n	8001360 <LTC6811_rdcv_reg+0x48>
		case 4: RDCV[1] = 0x0a; break;
 800135a:	230a      	movs	r3, #10
 800135c:	727b      	strb	r3, [r7, #9]
 800135e:	bf00      	nop
	}

	wakeup_idle();
 8001360:	f7ff fda6 	bl	8000eb0 <wakeup_idle>

    //Register A-D = reg 1-4
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 8001364:	2300      	movs	r3, #0
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	e02f      	b.n	80013ca <LTC6811_rdcv_reg+0xb2>
    {
    	RDCV[0] = 0x80 + (current_ic << 3);
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	00db      	lsls	r3, r3, #3
 800136e:	b2db      	uxtb	r3, r3
 8001370:	3b80      	subs	r3, #128	@ 0x80
 8001372:	b2db      	uxtb	r3, r3
 8001374:	723b      	strb	r3, [r7, #8]
        temp_pec = pec15_calc(2, RDCV);
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	4619      	mov	r1, r3
 800137c:	2002      	movs	r0, #2
 800137e:	f000 f915 	bl	80015ac <pec15_calc>
 8001382:	4603      	mov	r3, r0
 8001384:	81bb      	strh	r3, [r7, #12]
        RDCV[2] = (uint8_t)(temp_pec >> 8);
 8001386:	89bb      	ldrh	r3, [r7, #12]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	b29b      	uxth	r3, r3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	72bb      	strb	r3, [r7, #10]
        RDCV[3] = (uint8_t)(temp_pec);
 8001390:	89bb      	ldrh	r3, [r7, #12]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800139c:	480f      	ldr	r0, [pc, #60]	@ (80013dc <LTC6811_rdcv_reg+0xc4>)
 800139e:	f002 faf5 	bl	800398c <HAL_GPIO_WritePin>
        spi_write_read(RDCV, 4, &data[current_ic * 8], 8);
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	461a      	mov	r2, r3
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	441a      	add	r2, r3
 80013ac:	f107 0008 	add.w	r0, r7, #8
 80013b0:	2308      	movs	r3, #8
 80013b2:	2104      	movs	r1, #4
 80013b4:	f7ff fd4e 	bl	8000e54 <spi_write_read>
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80013b8:	2201      	movs	r2, #1
 80013ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013be:	4807      	ldr	r0, [pc, #28]	@ (80013dc <LTC6811_rdcv_reg+0xc4>)
 80013c0:	f002 fae4 	bl	800398c <HAL_GPIO_WritePin>
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	3301      	adds	r3, #1
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	79bb      	ldrb	r3, [r7, #6]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d3cb      	bcc.n	800136a <LTC6811_rdcv_reg+0x52>
    }
}
 80013d2:	bf00      	nop
 80013d4:	bf00      	nop
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40020000 	.word	0x40020000

080013e0 <LTC6811_rdaux>:

int8_t LTC6811_rdaux(uint8_t reg, uint8_t nIC, uint16_t aux_codes[][6])
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b088      	sub	sp, #32
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	603a      	str	r2, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
 80013ec:	460b      	mov	r3, r1
 80013ee:	71bb      	strb	r3, [r7, #6]
	const uint8_t NUM_RX_BYT = 8;
 80013f0:	2308      	movs	r3, #8
 80013f2:	76bb      	strb	r3, [r7, #26]
	const uint8_t BYT_IN_REG = 6;
 80013f4:	2306      	movs	r3, #6
 80013f6:	767b      	strb	r3, [r7, #25]
	const uint8_t AUX_IN_REG = 3;
 80013f8:	2303      	movs	r3, #3
 80013fa:	763b      	strb	r3, [r7, #24]

	uint8_t pec_error = 0; //pec Error wenn -1
 80013fc:	2300      	movs	r3, #0
 80013fe:	77fb      	strb	r3, [r7, #31]
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	77bb      	strb	r3, [r7, #30]
	uint8_t *aux_data;

	aux_data = (uint8_t *)malloc((NUM_RX_BYT * nIC) * sizeof(uint8_t));
 8001404:	7ebb      	ldrb	r3, [r7, #26]
 8001406:	79ba      	ldrb	r2, [r7, #6]
 8001408:	fb02 f303 	mul.w	r3, r2, r3
 800140c:	4618      	mov	r0, r3
 800140e:	f004 fcdb 	bl	8005dc8 <malloc>
 8001412:	4603      	mov	r3, r0
 8001414:	617b      	str	r3, [r7, #20]

	for(uint8_t aux_reg = 1; aux_reg < AUX_IN_REG; aux_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001416:	2301      	movs	r3, #1
 8001418:	777b      	strb	r3, [r7, #29]
 800141a:	e066      	b.n	80014ea <LTC6811_rdaux+0x10a>
	{
		data_counter = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	77bb      	strb	r3, [r7, #30]
		LTC6811_rdaux_reg(aux_reg, nIC, aux_data);
 8001420:	79b9      	ldrb	r1, [r7, #6]
 8001422:	7f7b      	ldrb	r3, [r7, #29]
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	4618      	mov	r0, r3
 8001428:	f000 f86c 	bl	8001504 <LTC6811_rdaux_reg>

		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 800142c:	2300      	movs	r3, #0
 800142e:	773b      	strb	r3, [r7, #28]
 8001430:	e054      	b.n	80014dc <LTC6811_rdaux+0xfc>
		{
			 // current_ic is used as an IC counter
			for(uint8_t current_cell = 0; current_cell < AUX_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 8001432:	2300      	movs	r3, #0
 8001434:	76fb      	strb	r3, [r7, #27]
 8001436:	e026      	b.n	8001486 <LTC6811_rdaux+0xa6>
			{
				uint16_t parsed_cell = aux_data[data_counter] | (aux_data[data_counter + 1] << 8);
 8001438:	7fbb      	ldrb	r3, [r7, #30]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	4413      	add	r3, r2
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	b21a      	sxth	r2, r3
 8001442:	7fbb      	ldrb	r3, [r7, #30]
 8001444:	3301      	adds	r3, #1
 8001446:	6979      	ldr	r1, [r7, #20]
 8001448:	440b      	add	r3, r1
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	021b      	lsls	r3, r3, #8
 800144e:	b21b      	sxth	r3, r3
 8001450:	4313      	orrs	r3, r2
 8001452:	b21b      	sxth	r3, r3
 8001454:	81fb      	strh	r3, [r7, #14]
				aux_codes[current_ic][current_cell + ((aux_reg - 1) * AUX_IN_REG)] = parsed_cell;
 8001456:	7f3a      	ldrb	r2, [r7, #28]
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	461a      	mov	r2, r3
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	4413      	add	r3, r2
 8001466:	7ef9      	ldrb	r1, [r7, #27]
 8001468:	7f7a      	ldrb	r2, [r7, #29]
 800146a:	3a01      	subs	r2, #1
 800146c:	7e38      	ldrb	r0, [r7, #24]
 800146e:	fb00 f202 	mul.w	r2, r0, r2
 8001472:	440a      	add	r2, r1
 8001474:	89f9      	ldrh	r1, [r7, #14]
 8001476:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter += 2;
 800147a:	7fbb      	ldrb	r3, [r7, #30]
 800147c:	3302      	adds	r3, #2
 800147e:	77bb      	strb	r3, [r7, #30]
			for(uint8_t current_cell = 0; current_cell < AUX_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 8001480:	7efb      	ldrb	r3, [r7, #27]
 8001482:	3301      	adds	r3, #1
 8001484:	76fb      	strb	r3, [r7, #27]
 8001486:	7efa      	ldrb	r2, [r7, #27]
 8001488:	7e3b      	ldrb	r3, [r7, #24]
 800148a:	429a      	cmp	r2, r3
 800148c:	d3d4      	bcc.n	8001438 <LTC6811_rdaux+0x58>
			}
			received_pec = (aux_data[data_counter] << 8) + aux_data[data_counter + 1];
 800148e:	7fbb      	ldrb	r3, [r7, #30]
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	4413      	add	r3, r2
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b29b      	uxth	r3, r3
 800149a:	7fba      	ldrb	r2, [r7, #30]
 800149c:	3201      	adds	r2, #1
 800149e:	6979      	ldr	r1, [r7, #20]
 80014a0:	440a      	add	r2, r1
 80014a2:	7812      	ldrb	r2, [r2, #0]
 80014a4:	4413      	add	r3, r2
 80014a6:	827b      	strh	r3, [r7, #18]
			data_pec = pec15_calc(BYT_IN_REG, &aux_data[current_ic * NUM_RX_BYT]);
 80014a8:	7f3b      	ldrb	r3, [r7, #28]
 80014aa:	7eba      	ldrb	r2, [r7, #26]
 80014ac:	fb02 f303 	mul.w	r3, r2, r3
 80014b0:	461a      	mov	r2, r3
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	441a      	add	r2, r3
 80014b6:	7e7b      	ldrb	r3, [r7, #25]
 80014b8:	4611      	mov	r1, r2
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f876 	bl	80015ac <pec15_calc>
 80014c0:	4603      	mov	r3, r0
 80014c2:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 80014c4:	8a7a      	ldrh	r2, [r7, #18]
 80014c6:	8a3b      	ldrh	r3, [r7, #16]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d001      	beq.n	80014d0 <LTC6811_rdaux+0xf0>
			{
			  pec_error = -1;
 80014cc:	23ff      	movs	r3, #255	@ 0xff
 80014ce:	77fb      	strb	r3, [r7, #31]
			}
			data_counter += 2;
 80014d0:	7fbb      	ldrb	r3, [r7, #30]
 80014d2:	3302      	adds	r3, #2
 80014d4:	77bb      	strb	r3, [r7, #30]
		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 80014d6:	7f3b      	ldrb	r3, [r7, #28]
 80014d8:	3301      	adds	r3, #1
 80014da:	773b      	strb	r3, [r7, #28]
 80014dc:	7f3a      	ldrb	r2, [r7, #28]
 80014de:	79bb      	ldrb	r3, [r7, #6]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d3a6      	bcc.n	8001432 <LTC6811_rdaux+0x52>
	for(uint8_t aux_reg = 1; aux_reg < AUX_IN_REG; aux_reg++)	//executes once for each of the LTC6804 cell voltage registers
 80014e4:	7f7b      	ldrb	r3, [r7, #29]
 80014e6:	3301      	adds	r3, #1
 80014e8:	777b      	strb	r3, [r7, #29]
 80014ea:	7f7a      	ldrb	r2, [r7, #29]
 80014ec:	7e3b      	ldrb	r3, [r7, #24]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d394      	bcc.n	800141c <LTC6811_rdaux+0x3c>
		}
	}

	free(aux_data);
 80014f2:	6978      	ldr	r0, [r7, #20]
 80014f4:	f004 fc70 	bl	8005dd8 <free>
	return(pec_error);
 80014f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3720      	adds	r7, #32
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <LTC6811_rdaux_reg>:

void LTC6811_rdaux_reg(uint8_t reg, uint8_t nIC, uint8_t *data)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	603a      	str	r2, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
 8001510:	460b      	mov	r3, r1
 8001512:	71bb      	strb	r3, [r7, #6]
	uint8_t RDAUX[4];
	uint16_t temp_pec;

	switch(reg){
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d002      	beq.n	8001520 <LTC6811_rdaux_reg+0x1c>
 800151a:	2b02      	cmp	r3, #2
 800151c:	d003      	beq.n	8001526 <LTC6811_rdaux_reg+0x22>
 800151e:	e005      	b.n	800152c <LTC6811_rdaux_reg+0x28>
		case 1: RDAUX[1] = 0xC; break;
 8001520:	230c      	movs	r3, #12
 8001522:	727b      	strb	r3, [r7, #9]
 8001524:	e002      	b.n	800152c <LTC6811_rdaux_reg+0x28>
		case 2: RDAUX[1] = 0xE; break;
 8001526:	230e      	movs	r3, #14
 8001528:	727b      	strb	r3, [r7, #9]
 800152a:	bf00      	nop
	}

	wakeup_idle();
 800152c:	f7ff fcc0 	bl	8000eb0 <wakeup_idle>

    //Register A-D = reg 1-4
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	e02f      	b.n	8001596 <LTC6811_rdaux_reg+0x92>
    {
    	RDAUX[0] = 0x80 + (current_ic << 3);
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	3b80      	subs	r3, #128	@ 0x80
 800153e:	b2db      	uxtb	r3, r3
 8001540:	723b      	strb	r3, [r7, #8]
        temp_pec = pec15_calc(2, RDAUX);
 8001542:	f107 0308 	add.w	r3, r7, #8
 8001546:	4619      	mov	r1, r3
 8001548:	2002      	movs	r0, #2
 800154a:	f000 f82f 	bl	80015ac <pec15_calc>
 800154e:	4603      	mov	r3, r0
 8001550:	81bb      	strh	r3, [r7, #12]
        RDAUX[2] = (uint8_t)(temp_pec >> 8);
 8001552:	89bb      	ldrh	r3, [r7, #12]
 8001554:	0a1b      	lsrs	r3, r3, #8
 8001556:	b29b      	uxth	r3, r3
 8001558:	b2db      	uxtb	r3, r3
 800155a:	72bb      	strb	r3, [r7, #10]
        RDAUX[3] = (uint8_t)(temp_pec);
 800155c:	89bb      	ldrh	r3, [r7, #12]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001568:	480f      	ldr	r0, [pc, #60]	@ (80015a8 <LTC6811_rdaux_reg+0xa4>)
 800156a:	f002 fa0f 	bl	800398c <HAL_GPIO_WritePin>
        spi_write_read(RDAUX, 4, &data[current_ic * 8], 8);
 800156e:	7bfb      	ldrb	r3, [r7, #15]
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	461a      	mov	r2, r3
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	441a      	add	r2, r3
 8001578:	f107 0008 	add.w	r0, r7, #8
 800157c:	2308      	movs	r3, #8
 800157e:	2104      	movs	r1, #4
 8001580:	f7ff fc68 	bl	8000e54 <spi_write_read>
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001584:	2201      	movs	r2, #1
 8001586:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800158a:	4807      	ldr	r0, [pc, #28]	@ (80015a8 <LTC6811_rdaux_reg+0xa4>)
 800158c:	f002 f9fe 	bl	800398c <HAL_GPIO_WritePin>
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	3301      	adds	r3, #1
 8001594:	73fb      	strb	r3, [r7, #15]
 8001596:	7bfa      	ldrb	r2, [r7, #15]
 8001598:	79bb      	ldrb	r3, [r7, #6]
 800159a:	429a      	cmp	r2, r3
 800159c:	d3cb      	bcc.n	8001536 <LTC6811_rdaux_reg+0x32>
    }
}
 800159e:	bf00      	nop
 80015a0:	bf00      	nop
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40020000 	.word	0x40020000

080015ac <pec15_calc>:
}
*/

//char *data uint8_t *data , uint8_t len
uint16_t pec15_calc(uint8_t len, uint8_t *data)
 {
 80015ac:	b480      	push	{r7}
 80015ae:	b087      	sub	sp, #28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	6039      	str	r1, [r7, #0]
 80015b6:	71fb      	strb	r3, [r7, #7]
 uint16_t remainder, address;

 remainder = 16;//PEC seed
 80015b8:	2310      	movs	r3, #16
 80015ba:	82fb      	strh	r3, [r7, #22]
 for (int i = 0; i < len; i++)
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	e017      	b.n	80015f2 <pec15_calc+0x46>
 {
 address = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 80015c2:	8afb      	ldrh	r3, [r7, #22]
 80015c4:	09db      	lsrs	r3, r3, #7
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	6839      	ldr	r1, [r7, #0]
 80015cc:	440a      	add	r2, r1
 80015ce:	7812      	ldrb	r2, [r2, #0]
 80015d0:	4053      	eors	r3, r2
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	81fb      	strh	r3, [r7, #14]
 remainder = (remainder << 8 ) ^ pec15Table[address];
 80015d8:	8afb      	ldrh	r3, [r7, #22]
 80015da:	021b      	lsls	r3, r3, #8
 80015dc:	b29a      	uxth	r2, r3
 80015de:	89fb      	ldrh	r3, [r7, #14]
 80015e0:	490a      	ldr	r1, [pc, #40]	@ (800160c <pec15_calc+0x60>)
 80015e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	4053      	eors	r3, r2
 80015ea:	82fb      	strh	r3, [r7, #22]
 for (int i = 0; i < len; i++)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	3301      	adds	r3, #1
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	dbe3      	blt.n	80015c2 <pec15_calc+0x16>
 }
 return (remainder*2);//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 80015fa:	8afb      	ldrh	r3, [r7, #22]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	b29b      	uxth	r3, r3
 }
 8001600:	4618      	mov	r0, r3
 8001602:	371c      	adds	r7, #28
 8001604:	46bd      	mov	sp, r7
 8001606:	bc80      	pop	{r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	08008b34 	.word	0x08008b34

08001610 <HAL_TIM_PeriodElapsedCallback>:
/* 1 ms interrupt
 * HLCK 96 MHz
 * APB1 48 MHz
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]


	can_cnt++;
 8001618:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	3301      	adds	r3, #1
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001622:	701a      	strb	r2, [r3, #0]

	if (can_cnt == (last10 + 10))
 8001624:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	330a      	adds	r3, #10
 8001630:	429a      	cmp	r2, r3
 8001632:	d105      	bne.n	8001640 <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			CAN_100();				//CAN Messages transmitted with 100 Hz
 8001634:	f000 faa2 	bl	8001b7c <CAN_100>
			last10 = can_cnt;
 8001638:	4b0d      	ldr	r3, [pc, #52]	@ (8001670 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800163a:	781a      	ldrb	r2, [r3, #0]
 800163c:	4b0d      	ldr	r3, [pc, #52]	@ (8001674 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800163e:	701a      	strb	r2, [r3, #0]
		}

	if (can_cnt == 100)
 8001640:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b64      	cmp	r3, #100	@ 0x64
 8001646:	d10e      	bne.n	8001666 <HAL_TIM_PeriodElapsedCallback+0x56>
		{
			CAN_10(AMS2_databytes[8]);				//CAN Messages transmitted with 10 Hz
 8001648:	4b0b      	ldr	r3, [pc, #44]	@ (8001678 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	4618      	mov	r0, r3
 800164e:	f000 fabb 	bl	8001bc8 <CAN_10>
			can_cnt = 0;
 8001652:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
			last10 = 0;
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, WDI_Pin);		// toggle watchdog
 800165e:	2110      	movs	r1, #16
 8001660:	4806      	ldr	r0, [pc, #24]	@ (800167c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001662:	f002 f9ab 	bl	80039bc <HAL_GPIO_TogglePin>
			//HAL_GPIO_TogglePin(GPIOC, LED_GN_Pin);	// toggle LED
		}
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200002bc 	.word	0x200002bc
 8001674:	200002bd 	.word	0x200002bd
 8001678:	2000029c 	.word	0x2000029c
 800167c:	40020000 	.word	0x40020000

08001680 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
   {
 8001680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001682:	b089      	sub	sp, #36	@ 0x24
 8001684:	af06      	add	r7, sp, #24
 8001686:	6078      	str	r0, [r7, #4]
    CAN_RX(hcan1);
 8001688:	4e08      	ldr	r6, [pc, #32]	@ (80016ac <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800168a:	466d      	mov	r5, sp
 800168c:	f106 0410 	add.w	r4, r6, #16
 8001690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001694:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001698:	e885 0003 	stmia.w	r5, {r0, r1}
 800169c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016a0:	f000 fa3e 	bl	8001b20 <CAN_RX>
   }
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ac:	200002e4 	.word	0x200002e4

080016b0 <BMS_init>:


void BMS_init()
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	LTC6811_initialize();
 80016b4:	f7ff fbee 	bl	8000e94 <LTC6811_initialize>
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <BMS>:

void BMS()		// Battery Management System function for main loop.
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
	uint8_t pec = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	71bb      	strb	r3, [r7, #6]
	static uint8_t selTemp = 0;

	for (uint8_t i = 0; i < NUM_STACK; i++)
 80016c6:	2300      	movs	r3, #0
 80016c8:	71fb      	strb	r3, [r7, #7]
 80016ca:	e045      	b.n	8001758 <BMS+0x9c>
	{
		cfg[i][0] = 0x3C | ((selTemp << 6) & 0xC0);		//cfg : Databytes in config register of the LTC6811
 80016cc:	4b47      	ldr	r3, [pc, #284]	@ (80017ec <BMS+0x130>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	019b      	lsls	r3, r3, #6
 80016d2:	b25b      	sxtb	r3, r3
 80016d4:	f043 033c 	orr.w	r3, r3, #60	@ 0x3c
 80016d8:	b25b      	sxtb	r3, r3
 80016da:	79fa      	ldrb	r2, [r7, #7]
 80016dc:	b2d8      	uxtb	r0, r3
 80016de:	4944      	ldr	r1, [pc, #272]	@ (80017f0 <BMS+0x134>)
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	440b      	add	r3, r1
 80016ea:	4602      	mov	r2, r0
 80016ec:	701a      	strb	r2, [r3, #0]
		cfg[i][1] = 0x00;
 80016ee:	79fa      	ldrb	r2, [r7, #7]
 80016f0:	493f      	ldr	r1, [pc, #252]	@ (80017f0 <BMS+0x134>)
 80016f2:	4613      	mov	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4413      	add	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	440b      	add	r3, r1
 80016fc:	3301      	adds	r3, #1
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
		cfg[i][2] = 0x00;
 8001702:	79fa      	ldrb	r2, [r7, #7]
 8001704:	493a      	ldr	r1, [pc, #232]	@ (80017f0 <BMS+0x134>)
 8001706:	4613      	mov	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	440b      	add	r3, r1
 8001710:	3302      	adds	r3, #2
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
		cfg[i][3] = 0x00;
 8001716:	79fa      	ldrb	r2, [r7, #7]
 8001718:	4935      	ldr	r1, [pc, #212]	@ (80017f0 <BMS+0x134>)
 800171a:	4613      	mov	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	440b      	add	r3, r1
 8001724:	3303      	adds	r3, #3
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
		cfg[i][4] = 0x00;
 800172a:	79fa      	ldrb	r2, [r7, #7]
 800172c:	4930      	ldr	r1, [pc, #192]	@ (80017f0 <BMS+0x134>)
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	440b      	add	r3, r1
 8001738:	3304      	adds	r3, #4
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
		cfg[i][5] = 0x00;
 800173e:	79fa      	ldrb	r2, [r7, #7]
 8001740:	492b      	ldr	r1, [pc, #172]	@ (80017f0 <BMS+0x134>)
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	440b      	add	r3, r1
 800174c:	3305      	adds	r3, #5
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUM_STACK; i++)
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	3301      	adds	r3, #1
 8001756:	71fb      	strb	r3, [r7, #7]
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0b6      	beq.n	80016cc <BMS+0x10>
	}

	LTC6811_wrcfg(NUM_STACK, (uint8_t(*)[6])cfg);		// Write config
 800175e:	4924      	ldr	r1, [pc, #144]	@ (80017f0 <BMS+0x134>)
 8001760:	2001      	movs	r0, #1
 8001762:	f7ff fc93 	bl	800108c <LTC6811_wrcfg>
	HAL_Delay(3);
 8001766:	2003      	movs	r0, #3
 8001768:	f001 f8c8 	bl	80028fc <HAL_Delay>

	//wakeup_idle();									// read config
	//LTC6811_rdcfg();
	//HAL_Delay(3);

	LTC6811_adcv();										// measure voltages
 800176c:	f7ff fc0a 	bl	8000f84 <LTC6811_adcv>
	HAL_Delay(3);
 8001770:	2003      	movs	r0, #3
 8001772:	f001 f8c3 	bl	80028fc <HAL_Delay>

	pec += LTC6811_rdcv(0, NUM_STACK, (uint16_t(*)[12])cellVoltages);	//read voltages
 8001776:	4a1f      	ldr	r2, [pc, #124]	@ (80017f4 <BMS+0x138>)
 8001778:	2101      	movs	r1, #1
 800177a:	2000      	movs	r0, #0
 800177c:	f7ff fd3c 	bl	80011f8 <LTC6811_rdcv>
 8001780:	4603      	mov	r3, r0
 8001782:	461a      	mov	r2, r3
 8001784:	79bb      	ldrb	r3, [r7, #6]
 8001786:	4413      	add	r3, r2
 8001788:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(3);
 800178a:	2003      	movs	r0, #3
 800178c:	f001 f8b6 	bl	80028fc <HAL_Delay>

	LTC6811_adax();										// measure 3 celltemp
 8001790:	f7ff fc3a 	bl	8001008 <LTC6811_adax>
	HAL_Delay(3);
 8001794:	2003      	movs	r0, #3
 8001796:	f001 f8b1 	bl	80028fc <HAL_Delay>

	pec += LTC6811_rdaux(0, NUM_STACK, (uint16_t(*)[6])slaveGPIOs);	// read celltemp
 800179a:	4a17      	ldr	r2, [pc, #92]	@ (80017f8 <BMS+0x13c>)
 800179c:	2101      	movs	r1, #1
 800179e:	2000      	movs	r0, #0
 80017a0:	f7ff fe1e 	bl	80013e0 <LTC6811_rdaux>
 80017a4:	4603      	mov	r3, r0
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	79bb      	ldrb	r3, [r7, #6]
 80017aa:	4413      	add	r3, r2
 80017ac:	71bb      	strb	r3, [r7, #6]
	HAL_Delay(3);
 80017ae:	2003      	movs	r0, #3
 80017b0:	f001 f8a4 	bl	80028fc <HAL_Delay>

	convertVoltage();
 80017b4:	f000 f824 	bl	8001800 <convertVoltage>

	convertTemperature(selTemp);
 80017b8:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <BMS+0x130>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 f927 	bl	8001a10 <convertTemperature>

	wakeup_idle();
	LTC6811_rdstat();
*/

	if (selTemp < 3)		// Variable for cycling the multiplexers for temp measurement.
 80017c2:	4b0a      	ldr	r3, [pc, #40]	@ (80017ec <BMS+0x130>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d806      	bhi.n	80017d8 <BMS+0x11c>
		selTemp++;
 80017ca:	4b08      	ldr	r3, [pc, #32]	@ (80017ec <BMS+0x130>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	3301      	adds	r3, #1
 80017d0:	b2da      	uxtb	r2, r3
 80017d2:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <BMS+0x130>)
 80017d4:	701a      	strb	r2, [r3, #0]
 80017d6:	e002      	b.n	80017de <BMS+0x122>
	else
		selTemp = 0;
 80017d8:	4b04      	ldr	r3, [pc, #16]	@ (80017ec <BMS+0x130>)
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]

	HAL_Delay(10);
 80017de:	200a      	movs	r0, #10
 80017e0:	f001 f88c 	bl	80028fc <HAL_Delay>

}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	200002be 	.word	0x200002be
 80017f0:	20000270 	.word	0x20000270
 80017f4:	20000258 	.word	0x20000258
 80017f8:	20000278 	.word	0x20000278
 80017fc:	00000000 	.word	0x00000000

08001800 <convertVoltage>:

void convertVoltage()		//convert and sort Voltages
{
 8001800:	b590      	push	{r4, r7, lr}
 8001802:	b09d      	sub	sp, #116	@ 0x74
 8001804:	af02      	add	r7, sp, #8
	double voltage[NUM_CELLS];
	uint16_t cell_max = cellVoltages[0];
 8001806:	4b54      	ldr	r3, [pc, #336]	@ (8001958 <convertVoltage+0x158>)
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
	uint16_t cell_min = cellVoltages[0];
 800180e:	4b52      	ldr	r3, [pc, #328]	@ (8001958 <convertVoltage+0x158>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001816:	2300      	movs	r3, #0
 8001818:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
 800181c:	e08e      	b.n	800193c <convertVoltage+0x13c>
	{

		for(uint8_t i = 0; i < 12; i++)
 800181e:	2300      	movs	r3, #0
 8001820:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
 8001824:	e080      	b.n	8001928 <convertVoltage+0x128>
		{
			if(cellVoltages[i + k * 12] > cell_max) cell_max = cellVoltages[i + k * 12];
 8001826:	f897 1062 	ldrb.w	r1, [r7, #98]	@ 0x62
 800182a:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	4a47      	ldr	r2, [pc, #284]	@ (8001958 <convertVoltage+0x158>)
 800183a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800183e:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8001842:	429a      	cmp	r2, r3
 8001844:	d20e      	bcs.n	8001864 <convertVoltage+0x64>
 8001846:	f897 1062 	ldrb.w	r1, [r7, #98]	@ 0x62
 800184a:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 800184e:	4613      	mov	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	4a3f      	ldr	r2, [pc, #252]	@ (8001958 <convertVoltage+0x158>)
 800185a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800185e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8001862:	e01d      	b.n	80018a0 <convertVoltage+0xa0>
			else if(cellVoltages[i + k * 12] < cell_min) cell_min = cellVoltages[i + k * 12];
 8001864:	f897 1062 	ldrb.w	r1, [r7, #98]	@ 0x62
 8001868:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	4a38      	ldr	r2, [pc, #224]	@ (8001958 <convertVoltage+0x158>)
 8001878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800187c:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8001880:	429a      	cmp	r2, r3
 8001882:	d90d      	bls.n	80018a0 <convertVoltage+0xa0>
 8001884:	f897 1062 	ldrb.w	r1, [r7, #98]	@ 0x62
 8001888:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 800188c:	4613      	mov	r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	440b      	add	r3, r1
 8001896:	4a30      	ldr	r2, [pc, #192]	@ (8001958 <convertVoltage+0x158>)
 8001898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800189c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64

			voltage[i + k * 12] = (double)cellVoltages[i + k * 12]/10000;
 80018a0:	f897 1062 	ldrb.w	r1, [r7, #98]	@ 0x62
 80018a4:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	4a29      	ldr	r2, [pc, #164]	@ (8001958 <convertVoltage+0x158>)
 80018b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fdcf 	bl	800045c <__aeabi_ui2d>
 80018be:	f897 4062 	ldrb.w	r4, [r7, #98]	@ 0x62
 80018c2:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 80018c6:	4613      	mov	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4413      	add	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	441c      	add	r4, r3
 80018d0:	a31f      	add	r3, pc, #124	@ (adr r3, 8001950 <convertVoltage+0x150>)
 80018d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d6:	f7fe ff65 	bl	80007a4 <__aeabi_ddiv>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	00e1      	lsls	r1, r4, #3
 80018e0:	3168      	adds	r1, #104	@ 0x68
 80018e2:	4439      	add	r1, r7
 80018e4:	3968      	subs	r1, #104	@ 0x68
 80018e6:	e9c1 2300 	strd	r2, r3, [r1]
			printf(" Stack %d Cell %d = %.4f V \r\n", k, i, voltage[i + k * 12]);
 80018ea:	f897 0063 	ldrb.w	r0, [r7, #99]	@ 0x63
 80018ee:	f897 4062 	ldrb.w	r4, [r7, #98]	@ 0x62
 80018f2:	f897 1062 	ldrb.w	r1, [r7, #98]	@ 0x62
 80018f6:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 80018fa:	4613      	mov	r3, r2
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4413      	add	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	3368      	adds	r3, #104	@ 0x68
 8001908:	443b      	add	r3, r7
 800190a:	3b68      	subs	r3, #104	@ 0x68
 800190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001910:	e9cd 2300 	strd	r2, r3, [sp]
 8001914:	4622      	mov	r2, r4
 8001916:	4601      	mov	r1, r0
 8001918:	4810      	ldr	r0, [pc, #64]	@ (800195c <convertVoltage+0x15c>)
 800191a:	f005 f831 	bl	8006980 <iprintf>
		for(uint8_t i = 0; i < 12; i++)
 800191e:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8001922:	3301      	adds	r3, #1
 8001924:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
 8001928:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 800192c:	2b0b      	cmp	r3, #11
 800192e:	f67f af7a 	bls.w	8001826 <convertVoltage+0x26>
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001932:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8001936:	3301      	adds	r3, #1
 8001938:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
 800193c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8001940:	2b00      	cmp	r3, #0
 8001942:	f43f af6c 	beq.w	800181e <convertVoltage+0x1e>
		}
	}

}
 8001946:	bf00      	nop
 8001948:	bf00      	nop
 800194a:	376c      	adds	r7, #108	@ 0x6c
 800194c:	46bd      	mov	sp, r7
 800194e:	bd90      	pop	{r4, r7, pc}
 8001950:	00000000 	.word	0x00000000
 8001954:	40c38800 	.word	0x40c38800
 8001958:	20000258 	.word	0x20000258
 800195c:	08008b08 	.word	0x08008b08

08001960 <calculateTemperature>:

uint16_t calculateTemperature(uint16_t voltageCode, uint16_t referenceCode)		//convert temp
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	460a      	mov	r2, r1
 800196a:	80fb      	strh	r3, [r7, #6]
 800196c:	4613      	mov	r3, r2
 800196e:	80bb      	strh	r3, [r7, #4]
	uint32_t convert_R = (voltageCode * 100000)/(referenceCode - voltageCode);
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	4a25      	ldr	r2, [pc, #148]	@ (8001a08 <calculateTemperature+0xa8>)
 8001974:	fb03 f202 	mul.w	r2, r3, r2
 8001978:	88b9      	ldrh	r1, [r7, #4]
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	1acb      	subs	r3, r1, r3
 800197e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001982:	60fb      	str	r3, [r7, #12]
	return 1/((1/298.15)-(log(10000/convert_R)/3435)) - 273.15;
 8001984:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fd64 	bl	800045c <__aeabi_ui2d>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f006 feba 	bl	8008714 <log>
 80019a0:	a313      	add	r3, pc, #76	@ (adr r3, 80019f0 <calculateTemperature+0x90>)
 80019a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a6:	f7fe fefd 	bl	80007a4 <__aeabi_ddiv>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	a112      	add	r1, pc, #72	@ (adr r1, 80019f8 <calculateTemperature+0x98>)
 80019b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019b4:	f7fe fc14 	bl	80001e0 <__aeabi_dsub>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	f04f 0000 	mov.w	r0, #0
 80019c0:	4912      	ldr	r1, [pc, #72]	@ (8001a0c <calculateTemperature+0xac>)
 80019c2:	f7fe feef 	bl	80007a4 <__aeabi_ddiv>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8001a00 <calculateTemperature+0xa0>)
 80019d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d4:	f7fe fc04 	bl	80001e0 <__aeabi_dsub>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	f7ff f88e 	bl	8000b00 <__aeabi_d2uiz>
 80019e4:	4603      	mov	r3, r0
 80019e6:	b29b      	uxth	r3, r3

}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	00000000 	.word	0x00000000
 80019f4:	40aad600 	.word	0x40aad600
 80019f8:	dcb5db83 	.word	0xdcb5db83
 80019fc:	3f6b79e1 	.word	0x3f6b79e1
 8001a00:	66666666 	.word	0x66666666
 8001a04:	40711266 	.word	0x40711266
 8001a08:	000186a0 	.word	0x000186a0
 8001a0c:	3ff00000 	.word	0x3ff00000

08001a10 <convertTemperature>:

void convertTemperature(uint8_t selTemp)		// sort temp
{
 8001a10:	b5b0      	push	{r4, r5, r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
*/

	//min und max Werte noch finden


	uint8_t indexOffset[12] = {9, 4, 11, 7, 6, 1, 0, 3, 10, 2, 5, 8};
 8001a1a:	4a24      	ldr	r2, [pc, #144]	@ (8001aac <convertTemperature+0x9c>)
 8001a1c:	f107 0308 	add.w	r3, r7, #8
 8001a20:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	75fb      	strb	r3, [r7, #23]
 8001a2a:	e037      	b.n	8001a9c <convertTemperature+0x8c>
	{
			for(uint8_t j = 0; j < 3; j++)
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	75bb      	strb	r3, [r7, #22]
 8001a30:	e02e      	b.n	8001a90 <convertTemperature+0x80>
			{
				temperature[k * NUM_CELLS_STACK + indexOffset[j + selTemp * 3]] = calculateTemperature(slaveGPIOs[j + k * 6], slaveGPIOs[5 + k * 6]);
 8001a32:	7db9      	ldrb	r1, [r7, #22]
 8001a34:	7dfa      	ldrb	r2, [r7, #23]
 8001a36:	4613      	mov	r3, r2
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	4413      	add	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	440b      	add	r3, r1
 8001a40:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab0 <convertTemperature+0xa0>)
 8001a42:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8001a46:	7dfa      	ldrb	r2, [r7, #23]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	3305      	adds	r3, #5
 8001a52:	4a17      	ldr	r2, [pc, #92]	@ (8001ab0 <convertTemperature+0xa0>)
 8001a54:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8001a58:	7dfa      	ldrb	r2, [r7, #23]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	461c      	mov	r4, r3
 8001a64:	7db9      	ldrb	r1, [r7, #22]
 8001a66:	79fa      	ldrb	r2, [r7, #7]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	440b      	add	r3, r1
 8001a70:	3318      	adds	r3, #24
 8001a72:	443b      	add	r3, r7
 8001a74:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001a78:	441c      	add	r4, r3
 8001a7a:	4629      	mov	r1, r5
 8001a7c:	f7ff ff70 	bl	8001960 <calculateTemperature>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <convertTemperature+0xa4>)
 8001a86:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			for(uint8_t j = 0; j < 3; j++)
 8001a8a:	7dbb      	ldrb	r3, [r7, #22]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	75bb      	strb	r3, [r7, #22]
 8001a90:	7dbb      	ldrb	r3, [r7, #22]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d9cd      	bls.n	8001a32 <convertTemperature+0x22>
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001a96:	7dfb      	ldrb	r3, [r7, #23]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	75fb      	strb	r3, [r7, #23]
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0c4      	beq.n	8001a2c <convertTemperature+0x1c>
				printf(" Stack %d Temperature %d = %.4f degC \r\n", k, 8, calc_temp[k][11]);
		}
	}
	*/

}
 8001aa2:	bf00      	nop
 8001aa4:	bf00      	nop
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8001aac:	08008b28 	.word	0x08008b28
 8001ab0:	20000278 	.word	0x20000278
 8001ab4:	20000284 	.word	0x20000284

08001ab8 <CAN_TX>:

uint32_t RxFifo;

	// transmit CAN Message
void CAN_TX(CAN_HandleTypeDef hcan, CAN_TxHeaderTypeDef TxHeader, uint8_t* TxData)
{
 8001ab8:	b084      	sub	sp, #16
 8001aba:	b5b0      	push	{r4, r5, r7, lr}
 8001abc:	b090      	sub	sp, #64	@ 0x40
 8001abe:	af0e      	add	r7, sp, #56	@ 0x38
 8001ac0:	f107 0418 	add.w	r4, r7, #24
 8001ac4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t TxMailbox;
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001ace:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001ad0:	f107 0018 	add.w	r0, r7, #24
 8001ad4:	f001 f875 	bl	8002bc2 <HAL_CAN_AddTxMessage>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d018      	beq.n	8001b10 <CAN_TX+0x58>
	{
		CAN_TX(hcan, TxHeader, TxData);		//retry when failed
 8001ade:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ae0:	930c      	str	r3, [sp, #48]	@ 0x30
 8001ae2:	ad06      	add	r5, sp, #24
 8001ae4:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8001ae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001af0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001af4:	466d      	mov	r5, sp
 8001af6:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001afc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001afe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b02:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b06:	f107 0318 	add.w	r3, r7, #24
 8001b0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b0c:	f7ff ffd4 	bl	8001ab8 <CAN_TX>
	}
}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001b1a:	b004      	add	sp, #16
 8001b1c:	4770      	bx	lr
	...

08001b20 <CAN_RX>:

	// receive CAN Message
void CAN_RX(CAN_HandleTypeDef hcan)
{
 8001b20:	b084      	sub	sp, #16
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b08a      	sub	sp, #40	@ 0x28
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	f107 0c30 	add.w	ip, r7, #48	@ 0x30
 8001b2c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];


	if (HAL_CAN_GetRxMessage(&hcan, RxFifo, &RxHeader, RxData) != HAL_OK)
 8001b30:	4b0f      	ldr	r3, [pc, #60]	@ (8001b70 <CAN_RX+0x50>)
 8001b32:	6819      	ldr	r1, [r3, #0]
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	f107 020c 	add.w	r2, r7, #12
 8001b3a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001b3e:	f001 f90f 	bl	8002d60 <HAL_CAN_GetRxMessage>
	{

	}

	if( RxHeader.StdId == 0x500)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8001b48:	d10b      	bne.n	8001b62 <CAN_RX+0x42>
	{

		DIC0_databytes[8] = RxData[8];
 8001b4a:	7b3a      	ldrb	r2, [r7, #12]
 8001b4c:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <CAN_RX+0x54>)
 8001b4e:	721a      	strb	r2, [r3, #8]

		AIR_Logic(DIC0_databytes[0], AMS3_databytes[0], DIC0_databytes[1]);
 8001b50:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <CAN_RX+0x54>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	4a08      	ldr	r2, [pc, #32]	@ (8001b78 <CAN_RX+0x58>)
 8001b56:	7811      	ldrb	r1, [r2, #0]
 8001b58:	4a06      	ldr	r2, [pc, #24]	@ (8001b74 <CAN_RX+0x54>)
 8001b5a:	7852      	ldrb	r2, [r2, #1]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 f9db 	bl	8001f18 <AIR_Logic>

	}

	// hier kann man weitere Nachrichten zum Empfangen hinzufügen

}
 8001b62:	bf00      	nop
 8001b64:	3728      	adds	r7, #40	@ 0x28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b6c:	b004      	add	sp, #16
 8001b6e:	4770      	bx	lr
 8001b70:	200002e0 	.word	0x200002e0
 8001b74:	200002d8 	.word	0x200002d8
 8001b78:	200002c8 	.word	0x200002c8

08001b7c <CAN_100>:




void CAN_100()		// CAN Messages transmitted with 100 Hz
{
 8001b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7e:	b08f      	sub	sp, #60	@ 0x3c
 8001b80:	af0e      	add	r7, sp, #56	@ 0x38

	CAN_TX(hcan1, AMS0_header, AMS0_databytes);
 8001b82:	4e0e      	ldr	r6, [pc, #56]	@ (8001bbc <CAN_100+0x40>)
 8001b84:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc0 <CAN_100+0x44>)
 8001b86:	930c      	str	r3, [sp, #48]	@ 0x30
 8001b88:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc4 <CAN_100+0x48>)
 8001b8a:	ac06      	add	r4, sp, #24
 8001b8c:	461d      	mov	r5, r3
 8001b8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b92:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b96:	e884 0003 	stmia.w	r4, {r0, r1}
 8001b9a:	466d      	mov	r5, sp
 8001b9c:	f106 0410 	add.w	r4, r6, #16
 8001ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ba4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ba8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bac:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001bb0:	f7ff ff82 	bl	8001ab8 <CAN_TX>
}
 8001bb4:	bf00      	nop
 8001bb6:	3704      	adds	r7, #4
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bbc:	200002e4 	.word	0x200002e4
 8001bc0:	200002c0 	.word	0x200002c0
 8001bc4:	20000000 	.word	0x20000000

08001bc8 <CAN_10>:

void CAN_10(uint8_t bms_data[])		// CAN Messages transmitted with 10 Hz
{
 8001bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bca:	b091      	sub	sp, #68	@ 0x44
 8001bcc:	af0e      	add	r7, sp, #56	@ 0x38
 8001bce:	6078      	str	r0, [r7, #4]
	CAN_TX(hcan1, AMS1_header, AMS1_databytes);
 8001bd0:	4e27      	ldr	r6, [pc, #156]	@ (8001c70 <CAN_10+0xa8>)
 8001bd2:	4b28      	ldr	r3, [pc, #160]	@ (8001c74 <CAN_10+0xac>)
 8001bd4:	930c      	str	r3, [sp, #48]	@ 0x30
 8001bd6:	4b28      	ldr	r3, [pc, #160]	@ (8001c78 <CAN_10+0xb0>)
 8001bd8:	ac06      	add	r4, sp, #24
 8001bda:	461d      	mov	r5, r3
 8001bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001be0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001be4:	e884 0003 	stmia.w	r4, {r0, r1}
 8001be8:	466d      	mov	r5, sp
 8001bea:	f106 0410 	add.w	r4, r6, #16
 8001bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bf2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bf6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bfa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001bfe:	f7ff ff5b 	bl	8001ab8 <CAN_TX>
	CAN_TX(hcan1, AMS2_header, bms_data);
 8001c02:	4e1b      	ldr	r6, [pc, #108]	@ (8001c70 <CAN_10+0xa8>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	930c      	str	r3, [sp, #48]	@ 0x30
 8001c08:	4b1c      	ldr	r3, [pc, #112]	@ (8001c7c <CAN_10+0xb4>)
 8001c0a:	ac06      	add	r4, sp, #24
 8001c0c:	461d      	mov	r5, r3
 8001c0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c16:	e884 0003 	stmia.w	r4, {r0, r1}
 8001c1a:	466d      	mov	r5, sp
 8001c1c:	f106 0410 	add.w	r4, r6, #16
 8001c20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c28:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c2c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001c30:	f7ff ff42 	bl	8001ab8 <CAN_TX>
	CAN_TX(hcan1, AMS3_header, AMS3_databytes);
 8001c34:	4e0e      	ldr	r6, [pc, #56]	@ (8001c70 <CAN_10+0xa8>)
 8001c36:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <CAN_10+0xb8>)
 8001c38:	930c      	str	r3, [sp, #48]	@ 0x30
 8001c3a:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <CAN_10+0xbc>)
 8001c3c:	ac06      	add	r4, sp, #24
 8001c3e:	461d      	mov	r5, r3
 8001c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c44:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c48:	e884 0003 	stmia.w	r4, {r0, r1}
 8001c4c:	466d      	mov	r5, sp
 8001c4e:	f106 0410 	add.w	r4, r6, #16
 8001c52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c5e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001c62:	f7ff ff29 	bl	8001ab8 <CAN_TX>
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200002e4 	.word	0x200002e4
 8001c74:	200002d0 	.word	0x200002d0
 8001c78:	20000018 	.word	0x20000018
 8001c7c:	20000030 	.word	0x20000030
 8001c80:	200002c8 	.word	0x200002c8
 8001c84:	20000048 	.word	0x20000048

08001c88 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */
AMS3_databytes[0]=0;
 8001c8c:	4b28      	ldr	r3, [pc, #160]	@ (8001d30 <MX_CAN1_Init+0xa8>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
AMS3_databytes[1]=0;
 8001c92:	4b27      	ldr	r3, [pc, #156]	@ (8001d30 <MX_CAN1_Init+0xa8>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	705a      	strb	r2, [r3, #1]
AMS3_databytes[2]=0;
 8001c98:	4b25      	ldr	r3, [pc, #148]	@ (8001d30 <MX_CAN1_Init+0xa8>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	709a      	strb	r2, [r3, #2]
AMS3_databytes[3]=0;
 8001c9e:	4b24      	ldr	r3, [pc, #144]	@ (8001d30 <MX_CAN1_Init+0xa8>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	70da      	strb	r2, [r3, #3]
AMS3_databytes[4]=0;
 8001ca4:	4b22      	ldr	r3, [pc, #136]	@ (8001d30 <MX_CAN1_Init+0xa8>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	711a      	strb	r2, [r3, #4]
AMS3_databytes[5]=0;
 8001caa:	4b21      	ldr	r3, [pc, #132]	@ (8001d30 <MX_CAN1_Init+0xa8>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	715a      	strb	r2, [r3, #5]
AMS3_databytes[6]=0;
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d30 <MX_CAN1_Init+0xa8>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	719a      	strb	r2, [r3, #6]
AMS3_databytes[7]=0;
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d30 <MX_CAN1_Init+0xa8>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	71da      	strb	r2, [r3, #7]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001d34 <MX_CAN1_Init+0xac>)
 8001cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8001d38 <MX_CAN1_Init+0xb0>)
 8001cc0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d34 <MX_CAN1_Init+0xac>)
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d34 <MX_CAN1_Init+0xac>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001cce:	4b19      	ldr	r3, [pc, #100]	@ (8001d34 <MX_CAN1_Init+0xac>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001cd4:	4b17      	ldr	r3, [pc, #92]	@ (8001d34 <MX_CAN1_Init+0xac>)
 8001cd6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cda:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001cdc:	4b15      	ldr	r3, [pc, #84]	@ (8001d34 <MX_CAN1_Init+0xac>)
 8001cde:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001ce2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001ce4:	4b13      	ldr	r3, [pc, #76]	@ (8001d34 <MX_CAN1_Init+0xac>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001cea:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <MX_CAN1_Init+0xac>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001cf0:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <MX_CAN1_Init+0xac>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d34 <MX_CAN1_Init+0xac>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8001d34 <MX_CAN1_Init+0xac>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001d02:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <MX_CAN1_Init+0xac>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001d08:	480a      	ldr	r0, [pc, #40]	@ (8001d34 <MX_CAN1_Init+0xac>)
 8001d0a:	f000 fe1b 	bl	8002944 <HAL_CAN_Init>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <MX_CAN1_Init+0x90>
  {
    Error_Handler();
 8001d14:	f000 fa77 	bl	8002206 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001d18:	2102      	movs	r1, #2
 8001d1a:	4806      	ldr	r0, [pc, #24]	@ (8001d34 <MX_CAN1_Init+0xac>)
 8001d1c:	f001 f941 	bl	8002fa2 <HAL_CAN_ActivateNotification>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_CAN1_Init+0xa2>
    {
  	  Error_Handler();
 8001d26:	f000 fa6e 	bl	8002206 <Error_Handler>
    }
  /* USER CODE END CAN1_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	200002c8 	.word	0x200002c8
 8001d34:	200002e4 	.word	0x200002e4
 8001d38:	40006400 	.word	0x40006400

08001d3c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001d40:	4b17      	ldr	r3, [pc, #92]	@ (8001da0 <MX_CAN2_Init+0x64>)
 8001d42:	4a18      	ldr	r2, [pc, #96]	@ (8001da4 <MX_CAN2_Init+0x68>)
 8001d44:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 8001d46:	4b16      	ldr	r3, [pc, #88]	@ (8001da0 <MX_CAN2_Init+0x64>)
 8001d48:	2204      	movs	r2, #4
 8001d4a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001d4c:	4b14      	ldr	r3, [pc, #80]	@ (8001da0 <MX_CAN2_Init+0x64>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001d52:	4b13      	ldr	r3, [pc, #76]	@ (8001da0 <MX_CAN2_Init+0x64>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001d58:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <MX_CAN2_Init+0x64>)
 8001d5a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d5e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	@ (8001da0 <MX_CAN2_Init+0x64>)
 8001d62:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001d66:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001d68:	4b0d      	ldr	r3, [pc, #52]	@ (8001da0 <MX_CAN2_Init+0x64>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <MX_CAN2_Init+0x64>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001d74:	4b0a      	ldr	r3, [pc, #40]	@ (8001da0 <MX_CAN2_Init+0x64>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001d7a:	4b09      	ldr	r3, [pc, #36]	@ (8001da0 <MX_CAN2_Init+0x64>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001d80:	4b07      	ldr	r3, [pc, #28]	@ (8001da0 <MX_CAN2_Init+0x64>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001d86:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <MX_CAN2_Init+0x64>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001d8c:	4804      	ldr	r0, [pc, #16]	@ (8001da0 <MX_CAN2_Init+0x64>)
 8001d8e:	f000 fdd9 	bl	8002944 <HAL_CAN_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001d98:	f000 fa35 	bl	8002206 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	2000030c 	.word	0x2000030c
 8001da4:	40006800 	.word	0x40006800

08001da8 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08c      	sub	sp, #48	@ 0x30
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db0:	f107 031c 	add.w	r3, r7, #28
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a4f      	ldr	r2, [pc, #316]	@ (8001f04 <HAL_CAN_MspInit+0x15c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d146      	bne.n	8001e58 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001dca:	4b4f      	ldr	r3, [pc, #316]	@ (8001f08 <HAL_CAN_MspInit+0x160>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	4a4d      	ldr	r2, [pc, #308]	@ (8001f08 <HAL_CAN_MspInit+0x160>)
 8001dd2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001dd4:	4b4c      	ldr	r3, [pc, #304]	@ (8001f08 <HAL_CAN_MspInit+0x160>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d10d      	bne.n	8001df8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61bb      	str	r3, [r7, #24]
 8001de0:	4b4a      	ldr	r3, [pc, #296]	@ (8001f0c <HAL_CAN_MspInit+0x164>)
 8001de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de4:	4a49      	ldr	r2, [pc, #292]	@ (8001f0c <HAL_CAN_MspInit+0x164>)
 8001de6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dea:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dec:	4b47      	ldr	r3, [pc, #284]	@ (8001f0c <HAL_CAN_MspInit+0x164>)
 8001dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	4b43      	ldr	r3, [pc, #268]	@ (8001f0c <HAL_CAN_MspInit+0x164>)
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e00:	4a42      	ldr	r2, [pc, #264]	@ (8001f0c <HAL_CAN_MspInit+0x164>)
 8001e02:	f043 0302 	orr.w	r3, r3, #2
 8001e06:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e08:	4b40      	ldr	r3, [pc, #256]	@ (8001f0c <HAL_CAN_MspInit+0x164>)
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	617b      	str	r3, [r7, #20]
 8001e12:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e14:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e22:	2303      	movs	r3, #3
 8001e24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001e26:	2309      	movs	r3, #9
 8001e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e2a:	f107 031c 	add.w	r3, r7, #28
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4837      	ldr	r0, [pc, #220]	@ (8001f10 <HAL_CAN_MspInit+0x168>)
 8001e32:	f001 fc0d 	bl	8003650 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2013      	movs	r0, #19
 8001e3c:	f001 fbd1 	bl	80035e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001e40:	2013      	movs	r0, #19
 8001e42:	f001 fbea 	bl	800361a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2100      	movs	r1, #0
 8001e4a:	2014      	movs	r0, #20
 8001e4c:	f001 fbc9 	bl	80035e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001e50:	2014      	movs	r0, #20
 8001e52:	f001 fbe2 	bl	800361a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001e56:	e050      	b.n	8001efa <HAL_CAN_MspInit+0x152>
  else if(canHandle->Instance==CAN2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a2d      	ldr	r2, [pc, #180]	@ (8001f14 <HAL_CAN_MspInit+0x16c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d14b      	bne.n	8001efa <HAL_CAN_MspInit+0x152>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	4b29      	ldr	r3, [pc, #164]	@ (8001f0c <HAL_CAN_MspInit+0x164>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	4a28      	ldr	r2, [pc, #160]	@ (8001f0c <HAL_CAN_MspInit+0x164>)
 8001e6c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e72:	4b26      	ldr	r3, [pc, #152]	@ (8001f0c <HAL_CAN_MspInit+0x164>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001e7e:	4b22      	ldr	r3, [pc, #136]	@ (8001f08 <HAL_CAN_MspInit+0x160>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	3301      	adds	r3, #1
 8001e84:	4a20      	ldr	r2, [pc, #128]	@ (8001f08 <HAL_CAN_MspInit+0x160>)
 8001e86:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001e88:	4b1f      	ldr	r3, [pc, #124]	@ (8001f08 <HAL_CAN_MspInit+0x160>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d10d      	bne.n	8001eac <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	4b1d      	ldr	r3, [pc, #116]	@ (8001f0c <HAL_CAN_MspInit+0x164>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e98:	4a1c      	ldr	r2, [pc, #112]	@ (8001f0c <HAL_CAN_MspInit+0x164>)
 8001e9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ea0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f0c <HAL_CAN_MspInit+0x164>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eac:	2300      	movs	r3, #0
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	4b16      	ldr	r3, [pc, #88]	@ (8001f0c <HAL_CAN_MspInit+0x164>)
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb4:	4a15      	ldr	r2, [pc, #84]	@ (8001f0c <HAL_CAN_MspInit+0x164>)
 8001eb6:	f043 0302 	orr.w	r3, r3, #2
 8001eba:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ebc:	4b13      	ldr	r3, [pc, #76]	@ (8001f0c <HAL_CAN_MspInit+0x164>)
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001ec8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001eda:	2309      	movs	r3, #9
 8001edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ede:	f107 031c 	add.w	r3, r7, #28
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	480a      	ldr	r0, [pc, #40]	@ (8001f10 <HAL_CAN_MspInit+0x168>)
 8001ee6:	f001 fbb3 	bl	8003650 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2100      	movs	r1, #0
 8001eee:	2040      	movs	r0, #64	@ 0x40
 8001ef0:	f001 fb77 	bl	80035e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001ef4:	2040      	movs	r0, #64	@ 0x40
 8001ef6:	f001 fb90 	bl	800361a <HAL_NVIC_EnableIRQ>
}
 8001efa:	bf00      	nop
 8001efc:	3730      	adds	r7, #48	@ 0x30
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40006400 	.word	0x40006400
 8001f08:	20000334 	.word	0x20000334
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40020400 	.word	0x40020400
 8001f14:	40006800 	.word	0x40006800

08001f18 <AIR_Logic>:
	// returns 0 if open
	return HAL_GPIO_ReadPin(GPIOC,AIR_N_INT_Pin);
}

void AIR_Logic(uint8_t ts_on, uint8_t ts_ready, uint8_t ts_start)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
 8001f22:	460b      	mov	r3, r1
 8001f24:	71bb      	strb	r3, [r7, #6]
 8001f26:	4613      	mov	r3, r2
 8001f28:	717b      	strb	r3, [r7, #5]

	 if (error == 0)
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f64 <AIR_Logic+0x4c>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d113      	bne.n	8001f5a <AIR_Logic+0x42>
	 {
		 if (ts_on>= 1)
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <AIR_Logic+0x30>
		 {

			 HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_SET);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f3e:	480a      	ldr	r0, [pc, #40]	@ (8001f68 <AIR_Logic+0x50>)
 8001f40:	f001 fd24 	bl	800398c <HAL_GPIO_WritePin>
			 ts_ready = 1;
 8001f44:	2301      	movs	r3, #1
 8001f46:	71bb      	strb	r3, [r7, #6]

		 }

		 if (ts_start>= 1)
 8001f48:	797b      	ldrb	r3, [r7, #5]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d005      	beq.n	8001f5a <AIR_Logic+0x42>
		 {
			 HAL_GPIO_WritePin(GPIOC,AIR_P_SW_Pin, GPIO_PIN_SET);
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f54:	4805      	ldr	r0, [pc, #20]	@ (8001f6c <AIR_Logic+0x54>)
 8001f56:	f001 fd19 	bl	800398c <HAL_GPIO_WritePin>
		 }
	}
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000338 	.word	0x20000338
 8001f68:	40020400 	.word	0x40020400
 8001f6c:	40020800 	.word	0x40020800

08001f70 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08a      	sub	sp, #40	@ 0x28
 8001f74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	4b61      	ldr	r3, [pc, #388]	@ (8002110 <MX_GPIO_Init+0x1a0>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	4a60      	ldr	r2, [pc, #384]	@ (8002110 <MX_GPIO_Init+0x1a0>)
 8001f90:	f043 0304 	orr.w	r3, r3, #4
 8001f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f96:	4b5e      	ldr	r3, [pc, #376]	@ (8002110 <MX_GPIO_Init+0x1a0>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	613b      	str	r3, [r7, #16]
 8001fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	4b5a      	ldr	r3, [pc, #360]	@ (8002110 <MX_GPIO_Init+0x1a0>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001faa:	4a59      	ldr	r2, [pc, #356]	@ (8002110 <MX_GPIO_Init+0x1a0>)
 8001fac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fb2:	4b57      	ldr	r3, [pc, #348]	@ (8002110 <MX_GPIO_Init+0x1a0>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	4b53      	ldr	r3, [pc, #332]	@ (8002110 <MX_GPIO_Init+0x1a0>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	4a52      	ldr	r2, [pc, #328]	@ (8002110 <MX_GPIO_Init+0x1a0>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fce:	4b50      	ldr	r3, [pc, #320]	@ (8002110 <MX_GPIO_Init+0x1a0>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	4b4c      	ldr	r3, [pc, #304]	@ (8002110 <MX_GPIO_Init+0x1a0>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	4a4b      	ldr	r2, [pc, #300]	@ (8002110 <MX_GPIO_Init+0x1a0>)
 8001fe4:	f043 0302 	orr.w	r3, r3, #2
 8001fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fea:	4b49      	ldr	r3, [pc, #292]	@ (8002110 <MX_GPIO_Init+0x1a0>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	603b      	str	r3, [r7, #0]
 8001ffa:	4b45      	ldr	r3, [pc, #276]	@ (8002110 <MX_GPIO_Init+0x1a0>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	4a44      	ldr	r2, [pc, #272]	@ (8002110 <MX_GPIO_Init+0x1a0>)
 8002000:	f043 0308 	orr.w	r3, r3, #8
 8002004:	6313      	str	r3, [r2, #48]	@ 0x30
 8002006:	4b42      	ldr	r3, [pc, #264]	@ (8002110 <MX_GPIO_Init+0x1a0>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GN_Pin|LED_RD_Pin|AIR_P_SW_Pin, GPIO_PIN_SET);
 8002012:	2201      	movs	r2, #1
 8002014:	f44f 4121 	mov.w	r1, #41216	@ 0xa100
 8002018:	483e      	ldr	r0, [pc, #248]	@ (8002114 <MX_GPIO_Init+0x1a4>)
 800201a:	f001 fcb7 	bl	800398c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, LED_YW_Pin|AIR_P_SW_Pin, GPIO_PIN_RESET);
 800201e:	2200      	movs	r2, #0
 8002020:	f44f 4182 	mov.w	r1, #16640	@ 0x4100
 8002024:	483b      	ldr	r0, [pc, #236]	@ (8002114 <MX_GPIO_Init+0x1a4>)
 8002026:	f001 fcb1 	bl	800398c <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(GPIOC, LED_GN_Pin|LED_YW_Pin|LED_RD_Pin|AIR_P_SW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WDI_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 800202a:	2200      	movs	r2, #0
 800202c:	f248 0110 	movw	r1, #32784	@ 0x8010
 8002030:	4839      	ldr	r0, [pc, #228]	@ (8002118 <MX_GPIO_Init+0x1a8>)
 8002032:	f001 fcab 	bl	800398c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SC_OPEN_GPIO_Port, SC_OPEN_Pin, GPIO_PIN_SET);
 8002036:	2201      	movs	r2, #1
 8002038:	2180      	movs	r1, #128	@ 0x80
 800203a:	4837      	ldr	r0, [pc, #220]	@ (8002118 <MX_GPIO_Init+0x1a8>)
 800203c:	f001 fca6 	bl	800398c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_RESET);
 8002040:	2200      	movs	r2, #0
 8002042:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002046:	4835      	ldr	r0, [pc, #212]	@ (800211c <MX_GPIO_Init+0x1ac>)
 8002048:	f001 fca0 	bl	800398c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_GN_Pin|LED_YW_Pin|LED_RD_Pin|AIR_P_SW_Pin;
 800204c:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8002050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002052:	2301      	movs	r3, #1
 8002054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205a:	2300      	movs	r3, #0
 800205c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800205e:	f107 0314 	add.w	r3, r7, #20
 8002062:	4619      	mov	r1, r3
 8002064:	482b      	ldr	r0, [pc, #172]	@ (8002114 <MX_GPIO_Init+0x1a4>)
 8002066:	f001 faf3 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = V_VEHI_Pin|V_ACCU_Pin|SC_CLOSING_Pin|SC_STATE_Pin
 800206a:	23f3      	movs	r3, #243	@ 0xf3
 800206c:	617b      	str	r3, [r7, #20]
                          |AIR_N_ACT_Pin|AIR_N_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002076:	f107 0314 	add.w	r3, r7, #20
 800207a:	4619      	mov	r1, r3
 800207c:	4825      	ldr	r0, [pc, #148]	@ (8002114 <MX_GPIO_Init+0x1a4>)
 800207e:	f001 fae7 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_STATE_Pin|IMD_SAFE_Pin|SC_OPENING_Pin;
 8002082:	2368      	movs	r3, #104	@ 0x68
 8002084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	4619      	mov	r1, r3
 8002094:	4820      	ldr	r0, [pc, #128]	@ (8002118 <MX_GPIO_Init+0x1a8>)
 8002096:	f001 fadb 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WDI_Pin|SC_OPEN_Pin|SPI3_CS_Pin;
 800209a:	f248 0390 	movw	r3, #32912	@ 0x8090
 800209e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a0:	2301      	movs	r3, #1
 80020a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a8:	2300      	movs	r3, #0
 80020aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ac:	f107 0314 	add.w	r3, r7, #20
 80020b0:	4619      	mov	r1, r3
 80020b2:	4819      	ldr	r0, [pc, #100]	@ (8002118 <MX_GPIO_Init+0x1a8>)
 80020b4:	f001 facc 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_ACTIVATE_Pin;
 80020b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020be:	2301      	movs	r3, #1
 80020c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TS_ACTIVATE_GPIO_Port, &GPIO_InitStruct);
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4619      	mov	r1, r3
 80020d0:	4812      	ldr	r0, [pc, #72]	@ (800211c <MX_GPIO_Init+0x1ac>)
 80020d2:	f001 fabd 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DANGER_V_Pin|AIR_P_ACT_Pin|AIR_P_INT_Pin;
 80020d6:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 80020da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020dc:	2300      	movs	r3, #0
 80020de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4619      	mov	r1, r3
 80020ea:	480c      	ldr	r0, [pc, #48]	@ (800211c <MX_GPIO_Init+0x1ac>)
 80020ec:	f001 fab0 	bl	8003650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PCHRG_ACT_Pin;
 80020f0:	2304      	movs	r3, #4
 80020f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PCHRG_ACT_GPIO_Port, &GPIO_InitStruct);
 80020fc:	f107 0314 	add.w	r3, r7, #20
 8002100:	4619      	mov	r1, r3
 8002102:	4807      	ldr	r0, [pc, #28]	@ (8002120 <MX_GPIO_Init+0x1b0>)
 8002104:	f001 faa4 	bl	8003650 <HAL_GPIO_Init>

}
 8002108:	bf00      	nop
 800210a:	3728      	adds	r7, #40	@ 0x28
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	40020800 	.word	0x40020800
 8002118:	40020000 	.word	0x40020000
 800211c:	40020400 	.word	0x40020400
 8002120:	40020c00 	.word	0x40020c00

08002124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002128:	f000 fb7a 	bl	8002820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800212c:	f000 f824 	bl	8002178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002130:	f7ff ff1e 	bl	8001f70 <MX_GPIO_Init>
  MX_SPI3_Init();
 8002134:	f000 f86e 	bl	8002214 <MX_SPI3_Init>
  MX_TIM2_Init();
 8002138:	f000 fa52 	bl	80025e0 <MX_TIM2_Init>
  MX_CAN1_Init();
 800213c:	f7ff fda4 	bl	8001c88 <MX_CAN1_Init>
  MX_CAN2_Init();
 8002140:	f7ff fdfc 	bl	8001d3c <MX_CAN2_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002144:	f000 fabe 	bl	80026c4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  // Start timer
  HAL_TIM_Base_Start_IT(&htim2);
 8002148:	4809      	ldr	r0, [pc, #36]	@ (8002170 <main+0x4c>)
 800214a:	f002 ff31 	bl	8004fb0 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan1);
 800214e:	4809      	ldr	r0, [pc, #36]	@ (8002174 <main+0x50>)
 8002150:	f000 fcf3 	bl	8002b3a <HAL_CAN_Start>
  BMS_init();
 8002154:	f7ff faac 	bl	80016b0 <BMS_init>





    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8002158:	2102      	movs	r1, #2
 800215a:	4806      	ldr	r0, [pc, #24]	@ (8002174 <main+0x50>)
 800215c:	f000 ff21 	bl	8002fa2 <HAL_CAN_ActivateNotification>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <main+0x46>
    {
  	  Error_Handler();
 8002166:	f000 f84e 	bl	8002206 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 BMS();
 800216a:	f7ff faa7 	bl	80016bc <BMS>
 800216e:	e7fc      	b.n	800216a <main+0x46>
 8002170:	20000398 	.word	0x20000398
 8002174:	200002e4 	.word	0x200002e4

08002178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b092      	sub	sp, #72	@ 0x48
 800217c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800217e:	f107 0318 	add.w	r3, r7, #24
 8002182:	2230      	movs	r2, #48	@ 0x30
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f004 fc4f 	bl	8006a2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800218c:	1d3b      	adds	r3, r7, #4
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	60da      	str	r2, [r3, #12]
 8002198:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800219a:	2302      	movs	r3, #2
 800219c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800219e:	2301      	movs	r3, #1
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021a2:	2310      	movs	r3, #16
 80021a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021a6:	2302      	movs	r3, #2
 80021a8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021aa:	2300      	movs	r3, #0
 80021ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 80021ae:	2308      	movs	r3, #8
 80021b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 80021b2:	23c0      	movs	r3, #192	@ 0xc0
 80021b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80021b6:	2304      	movs	r3, #4
 80021b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80021ba:	2308      	movs	r3, #8
 80021bc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021be:	f107 0318 	add.w	r3, r7, #24
 80021c2:	4618      	mov	r0, r3
 80021c4:	f001 fd30 	bl	8003c28 <HAL_RCC_OscConfig>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80021ce:	f000 f81a 	bl	8002206 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021d2:	230f      	movs	r3, #15
 80021d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021d6:	2302      	movs	r3, #2
 80021d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021de:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80021e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	2103      	movs	r1, #3
 80021ee:	4618      	mov	r0, r3
 80021f0:	f001 ff6e 	bl	80040d0 <HAL_RCC_ClockConfig>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <SystemClock_Config+0x86>
  {
    Error_Handler();
 80021fa:	f000 f804 	bl	8002206 <Error_Handler>
  }
}
 80021fe:	bf00      	nop
 8002200:	3748      	adds	r7, #72	@ 0x48
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800220a:	b672      	cpsid	i
}
 800220c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800220e:	bf00      	nop
 8002210:	e7fd      	b.n	800220e <Error_Handler+0x8>
	...

08002214 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002218:	4b17      	ldr	r3, [pc, #92]	@ (8002278 <MX_SPI3_Init+0x64>)
 800221a:	4a18      	ldr	r2, [pc, #96]	@ (800227c <MX_SPI3_Init+0x68>)
 800221c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800221e:	4b16      	ldr	r3, [pc, #88]	@ (8002278 <MX_SPI3_Init+0x64>)
 8002220:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002224:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002226:	4b14      	ldr	r3, [pc, #80]	@ (8002278 <MX_SPI3_Init+0x64>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800222c:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <MX_SPI3_Init+0x64>)
 800222e:	2200      	movs	r2, #0
 8002230:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002232:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <MX_SPI3_Init+0x64>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002238:	4b0f      	ldr	r3, [pc, #60]	@ (8002278 <MX_SPI3_Init+0x64>)
 800223a:	2200      	movs	r2, #0
 800223c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800223e:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <MX_SPI3_Init+0x64>)
 8002240:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002244:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002246:	4b0c      	ldr	r3, [pc, #48]	@ (8002278 <MX_SPI3_Init+0x64>)
 8002248:	2220      	movs	r2, #32
 800224a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800224c:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <MX_SPI3_Init+0x64>)
 800224e:	2200      	movs	r2, #0
 8002250:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002252:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <MX_SPI3_Init+0x64>)
 8002254:	2200      	movs	r2, #0
 8002256:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002258:	4b07      	ldr	r3, [pc, #28]	@ (8002278 <MX_SPI3_Init+0x64>)
 800225a:	2200      	movs	r2, #0
 800225c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800225e:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <MX_SPI3_Init+0x64>)
 8002260:	220a      	movs	r2, #10
 8002262:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002264:	4804      	ldr	r0, [pc, #16]	@ (8002278 <MX_SPI3_Init+0x64>)
 8002266:	f002 f8e5 	bl	8004434 <HAL_SPI_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002270:	f7ff ffc9 	bl	8002206 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	2000033c 	.word	0x2000033c
 800227c:	40003c00 	.word	0x40003c00

08002280 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08a      	sub	sp, #40	@ 0x28
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	60da      	str	r2, [r3, #12]
 8002296:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a19      	ldr	r2, [pc, #100]	@ (8002304 <HAL_SPI_MspInit+0x84>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d12c      	bne.n	80022fc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	4b18      	ldr	r3, [pc, #96]	@ (8002308 <HAL_SPI_MspInit+0x88>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	4a17      	ldr	r2, [pc, #92]	@ (8002308 <HAL_SPI_MspInit+0x88>)
 80022ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022b2:	4b15      	ldr	r3, [pc, #84]	@ (8002308 <HAL_SPI_MspInit+0x88>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022ba:	613b      	str	r3, [r7, #16]
 80022bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	4b11      	ldr	r3, [pc, #68]	@ (8002308 <HAL_SPI_MspInit+0x88>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	4a10      	ldr	r2, [pc, #64]	@ (8002308 <HAL_SPI_MspInit+0x88>)
 80022c8:	f043 0304 	orr.w	r3, r3, #4
 80022cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002308 <HAL_SPI_MspInit+0x88>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	f003 0304 	and.w	r3, r3, #4
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80022da:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80022de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e0:	2302      	movs	r3, #2
 80022e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e8:	2303      	movs	r3, #3
 80022ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80022ec:	2306      	movs	r3, #6
 80022ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	4619      	mov	r1, r3
 80022f6:	4805      	ldr	r0, [pc, #20]	@ (800230c <HAL_SPI_MspInit+0x8c>)
 80022f8:	f001 f9aa 	bl	8003650 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80022fc:	bf00      	nop
 80022fe:	3728      	adds	r7, #40	@ 0x28
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40003c00 	.word	0x40003c00
 8002308:	40023800 	.word	0x40023800
 800230c:	40020800 	.word	0x40020800

08002310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	607b      	str	r3, [r7, #4]
 800231a:	4b0f      	ldr	r3, [pc, #60]	@ (8002358 <HAL_MspInit+0x48>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231e:	4a0e      	ldr	r2, [pc, #56]	@ (8002358 <HAL_MspInit+0x48>)
 8002320:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002324:	6453      	str	r3, [r2, #68]	@ 0x44
 8002326:	4b0c      	ldr	r3, [pc, #48]	@ (8002358 <HAL_MspInit+0x48>)
 8002328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800232e:	607b      	str	r3, [r7, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	603b      	str	r3, [r7, #0]
 8002336:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <HAL_MspInit+0x48>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	4a07      	ldr	r2, [pc, #28]	@ (8002358 <HAL_MspInit+0x48>)
 800233c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002340:	6413      	str	r3, [r2, #64]	@ 0x40
 8002342:	4b05      	ldr	r3, [pc, #20]	@ (8002358 <HAL_MspInit+0x48>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	40023800 	.word	0x40023800

0800235c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002360:	bf00      	nop
 8002362:	e7fd      	b.n	8002360 <NMI_Handler+0x4>

08002364 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002368:	bf00      	nop
 800236a:	e7fd      	b.n	8002368 <HardFault_Handler+0x4>

0800236c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002370:	bf00      	nop
 8002372:	e7fd      	b.n	8002370 <MemManage_Handler+0x4>

08002374 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002378:	bf00      	nop
 800237a:	e7fd      	b.n	8002378 <BusFault_Handler+0x4>

0800237c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002380:	bf00      	nop
 8002382:	e7fd      	b.n	8002380 <UsageFault_Handler+0x4>

08002384 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002388:	bf00      	nop
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr

0800239c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ac:	f000 fa8a 	bl	80028c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80023b8:	4802      	ldr	r0, [pc, #8]	@ (80023c4 <CAN1_TX_IRQHandler+0x10>)
 80023ba:	f000 fe17 	bl	8002fec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200002e4 	.word	0x200002e4

080023c8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80023cc:	4802      	ldr	r0, [pc, #8]	@ (80023d8 <CAN1_RX0_IRQHandler+0x10>)
 80023ce:	f000 fe0d 	bl	8002fec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200002e4 	.word	0x200002e4

080023dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023e0:	4802      	ldr	r0, [pc, #8]	@ (80023ec <TIM2_IRQHandler+0x10>)
 80023e2:	f002 fe53 	bl	800508c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000398 	.word	0x20000398

080023f0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80023f4:	4802      	ldr	r0, [pc, #8]	@ (8002400 <CAN2_RX0_IRQHandler+0x10>)
 80023f6:	f000 fdf9 	bl	8002fec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	2000030c 	.word	0x2000030c

08002404 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800240e:	4b0e      	ldr	r3, [pc, #56]	@ (8002448 <ITM_SendChar+0x44>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a0d      	ldr	r2, [pc, #52]	@ (8002448 <ITM_SendChar+0x44>)
 8002414:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002418:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800241a:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <ITM_SendChar+0x48>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a0b      	ldr	r2, [pc, #44]	@ (800244c <ITM_SendChar+0x48>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8002426:	bf00      	nop
 8002428:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f8      	beq.n	8002428 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8002436:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	6013      	str	r3, [r2, #0]
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr
 8002448:	e000edfc 	.word	0xe000edfc
 800244c:	e0000e00 	.word	0xe0000e00

08002450 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return 1;
 8002454:	2301      	movs	r3, #1
}
 8002456:	4618      	mov	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <_kill>:

int _kill(int pid, int sig)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b082      	sub	sp, #8
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002468:	f004 fb42 	bl	8006af0 <__errno>
 800246c:	4603      	mov	r3, r0
 800246e:	2216      	movs	r2, #22
 8002470:	601a      	str	r2, [r3, #0]
  return -1;
 8002472:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <_exit>:

void _exit (int status)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002486:	f04f 31ff 	mov.w	r1, #4294967295
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ffe7 	bl	800245e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002490:	bf00      	nop
 8002492:	e7fd      	b.n	8002490 <_exit+0x12>

08002494 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	e00a      	b.n	80024bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024a6:	f3af 8000 	nop.w
 80024aa:	4601      	mov	r1, r0
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	1c5a      	adds	r2, r3, #1
 80024b0:	60ba      	str	r2, [r7, #8]
 80024b2:	b2ca      	uxtb	r2, r1
 80024b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	3301      	adds	r3, #1
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	dbf0      	blt.n	80024a6 <_read+0x12>
  }

  return len;
 80024c4:	687b      	ldr	r3, [r7, #4]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	e009      	b.n	80024f4 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++); //Diese Zeile kann gelöscht werden wenn kein printf über SWV mehr gewollt ist
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	60ba      	str	r2, [r7, #8]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff8b 	bl	8002404 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	3301      	adds	r3, #1
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	697a      	ldr	r2, [r7, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	dbf1      	blt.n	80024e0 <_write+0x12>
  }
  return len;
 80024fc:	687b      	ldr	r3, [r7, #4]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <_close>:

int _close(int file)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800250e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800252c:	605a      	str	r2, [r3, #4]
  return 0;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr

0800253a <_isatty>:

int _isatty(int file)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002542:	2301      	movs	r3, #1
}
 8002544:	4618      	mov	r0, r3
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr

0800254e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
	...

08002568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002570:	4a14      	ldr	r2, [pc, #80]	@ (80025c4 <_sbrk+0x5c>)
 8002572:	4b15      	ldr	r3, [pc, #84]	@ (80025c8 <_sbrk+0x60>)
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800257c:	4b13      	ldr	r3, [pc, #76]	@ (80025cc <_sbrk+0x64>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d102      	bne.n	800258a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002584:	4b11      	ldr	r3, [pc, #68]	@ (80025cc <_sbrk+0x64>)
 8002586:	4a12      	ldr	r2, [pc, #72]	@ (80025d0 <_sbrk+0x68>)
 8002588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800258a:	4b10      	ldr	r3, [pc, #64]	@ (80025cc <_sbrk+0x64>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	429a      	cmp	r2, r3
 8002596:	d207      	bcs.n	80025a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002598:	f004 faaa 	bl	8006af0 <__errno>
 800259c:	4603      	mov	r3, r0
 800259e:	220c      	movs	r2, #12
 80025a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025a2:	f04f 33ff 	mov.w	r3, #4294967295
 80025a6:	e009      	b.n	80025bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025a8:	4b08      	ldr	r3, [pc, #32]	@ (80025cc <_sbrk+0x64>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ae:	4b07      	ldr	r3, [pc, #28]	@ (80025cc <_sbrk+0x64>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4413      	add	r3, r2
 80025b6:	4a05      	ldr	r2, [pc, #20]	@ (80025cc <_sbrk+0x64>)
 80025b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ba:	68fb      	ldr	r3, [r7, #12]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	2000c000 	.word	0x2000c000
 80025c8:	00000400 	.word	0x00000400
 80025cc:	20000394 	.word	0x20000394
 80025d0:	20000a38 	.word	0x20000a38

080025d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025e6:	f107 0308 	add.w	r3, r7, #8
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
 80025f0:	609a      	str	r2, [r3, #8]
 80025f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f4:	463b      	mov	r3, r7
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002674 <MX_TIM2_Init+0x94>)
 80025fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002602:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8002604:	4b1b      	ldr	r3, [pc, #108]	@ (8002674 <MX_TIM2_Init+0x94>)
 8002606:	222f      	movs	r2, #47	@ 0x2f
 8002608:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800260a:	4b1a      	ldr	r3, [pc, #104]	@ (8002674 <MX_TIM2_Init+0x94>)
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002610:	4b18      	ldr	r3, [pc, #96]	@ (8002674 <MX_TIM2_Init+0x94>)
 8002612:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002616:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002618:	4b16      	ldr	r3, [pc, #88]	@ (8002674 <MX_TIM2_Init+0x94>)
 800261a:	2200      	movs	r2, #0
 800261c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800261e:	4b15      	ldr	r3, [pc, #84]	@ (8002674 <MX_TIM2_Init+0x94>)
 8002620:	2200      	movs	r2, #0
 8002622:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002624:	4813      	ldr	r0, [pc, #76]	@ (8002674 <MX_TIM2_Init+0x94>)
 8002626:	f002 fc74 	bl	8004f12 <HAL_TIM_Base_Init>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002630:	f7ff fde9 	bl	8002206 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002638:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800263a:	f107 0308 	add.w	r3, r7, #8
 800263e:	4619      	mov	r1, r3
 8002640:	480c      	ldr	r0, [pc, #48]	@ (8002674 <MX_TIM2_Init+0x94>)
 8002642:	f002 fe2b 	bl	800529c <HAL_TIM_ConfigClockSource>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800264c:	f7ff fddb 	bl	8002206 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002650:	2300      	movs	r3, #0
 8002652:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002654:	2300      	movs	r3, #0
 8002656:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002658:	463b      	mov	r3, r7
 800265a:	4619      	mov	r1, r3
 800265c:	4805      	ldr	r0, [pc, #20]	@ (8002674 <MX_TIM2_Init+0x94>)
 800265e:	f003 f83d 	bl	80056dc <HAL_TIMEx_MasterConfigSynchronization>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002668:	f7ff fdcd 	bl	8002206 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800266c:	bf00      	nop
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000398 	.word	0x20000398

08002678 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002688:	d115      	bne.n	80026b6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	4b0c      	ldr	r3, [pc, #48]	@ (80026c0 <HAL_TIM_Base_MspInit+0x48>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	4a0b      	ldr	r2, [pc, #44]	@ (80026c0 <HAL_TIM_Base_MspInit+0x48>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6413      	str	r3, [r2, #64]	@ 0x40
 800269a:	4b09      	ldr	r3, [pc, #36]	@ (80026c0 <HAL_TIM_Base_MspInit+0x48>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026a6:	2200      	movs	r2, #0
 80026a8:	2100      	movs	r1, #0
 80026aa:	201c      	movs	r0, #28
 80026ac:	f000 ff99 	bl	80035e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026b0:	201c      	movs	r0, #28
 80026b2:	f000 ffb2 	bl	800361a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80026b6:	bf00      	nop
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800

080026c4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80026c8:	4b12      	ldr	r3, [pc, #72]	@ (8002714 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80026ca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80026ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80026d0:	4b10      	ldr	r3, [pc, #64]	@ (8002714 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80026d2:	2204      	movs	r2, #4
 80026d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80026d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002714 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80026d8:	2202      	movs	r2, #2
 80026da:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80026dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002714 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80026de:	2200      	movs	r2, #0
 80026e0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80026e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002714 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80026e4:	2202      	movs	r2, #2
 80026e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80026e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002714 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80026ee:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80026f4:	4b07      	ldr	r3, [pc, #28]	@ (8002714 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80026fa:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <MX_USB_OTG_FS_PCD_Init+0x50>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002700:	4804      	ldr	r0, [pc, #16]	@ (8002714 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002702:	f001 f974 	bl	80039ee <HAL_PCD_Init>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 800270c:	f7ff fd7b 	bl	8002206 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}
 8002714:	200003e0 	.word	0x200003e0

08002718 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08a      	sub	sp, #40	@ 0x28
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002720:	f107 0314 	add.w	r3, r7, #20
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002738:	d13f      	bne.n	80027ba <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273a:	2300      	movs	r3, #0
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	4b21      	ldr	r3, [pc, #132]	@ (80027c4 <HAL_PCD_MspInit+0xac>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002742:	4a20      	ldr	r2, [pc, #128]	@ (80027c4 <HAL_PCD_MspInit+0xac>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6313      	str	r3, [r2, #48]	@ 0x30
 800274a:	4b1e      	ldr	r3, [pc, #120]	@ (80027c4 <HAL_PCD_MspInit+0xac>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002756:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800275a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800275c:	2300      	movs	r3, #0
 800275e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	4619      	mov	r1, r3
 800276a:	4817      	ldr	r0, [pc, #92]	@ (80027c8 <HAL_PCD_MspInit+0xb0>)
 800276c:	f000 ff70 	bl	8003650 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002770:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277e:	2303      	movs	r3, #3
 8002780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002782:	230a      	movs	r3, #10
 8002784:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002786:	f107 0314 	add.w	r3, r7, #20
 800278a:	4619      	mov	r1, r3
 800278c:	480e      	ldr	r0, [pc, #56]	@ (80027c8 <HAL_PCD_MspInit+0xb0>)
 800278e:	f000 ff5f 	bl	8003650 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002792:	4b0c      	ldr	r3, [pc, #48]	@ (80027c4 <HAL_PCD_MspInit+0xac>)
 8002794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002796:	4a0b      	ldr	r2, [pc, #44]	@ (80027c4 <HAL_PCD_MspInit+0xac>)
 8002798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800279c:	6353      	str	r3, [r2, #52]	@ 0x34
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	4b08      	ldr	r3, [pc, #32]	@ (80027c4 <HAL_PCD_MspInit+0xac>)
 80027a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a6:	4a07      	ldr	r2, [pc, #28]	@ (80027c4 <HAL_PCD_MspInit+0xac>)
 80027a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ae:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <HAL_PCD_MspInit+0xac>)
 80027b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80027ba:	bf00      	nop
 80027bc:	3728      	adds	r7, #40	@ 0x28
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40020000 	.word	0x40020000

080027cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002804 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 80027d0:	f7ff ff00 	bl	80025d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027d4:	480c      	ldr	r0, [pc, #48]	@ (8002808 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027d6:	490d      	ldr	r1, [pc, #52]	@ (800280c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002810 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027dc:	e002      	b.n	80027e4 <LoopCopyDataInit>

080027de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027e2:	3304      	adds	r3, #4

080027e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e8:	d3f9      	bcc.n	80027de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002814 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002818 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f0:	e001      	b.n	80027f6 <LoopFillZerobss>

080027f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027f4:	3204      	adds	r2, #4

080027f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f8:	d3fb      	bcc.n	80027f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80027fa:	f004 f97f 	bl	8006afc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027fe:	f7ff fc91 	bl	8002124 <main>
  bx  lr    
 8002802:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002804:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800280c:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8002810:	080092c8 	.word	0x080092c8
  ldr r2, =_sbss
 8002814:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8002818:	20000a34 	.word	0x20000a34

0800281c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800281c:	e7fe      	b.n	800281c <ADC_IRQHandler>
	...

08002820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002824:	4b0e      	ldr	r3, [pc, #56]	@ (8002860 <HAL_Init+0x40>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a0d      	ldr	r2, [pc, #52]	@ (8002860 <HAL_Init+0x40>)
 800282a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800282e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002830:	4b0b      	ldr	r3, [pc, #44]	@ (8002860 <HAL_Init+0x40>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a0a      	ldr	r2, [pc, #40]	@ (8002860 <HAL_Init+0x40>)
 8002836:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800283a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800283c:	4b08      	ldr	r3, [pc, #32]	@ (8002860 <HAL_Init+0x40>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a07      	ldr	r2, [pc, #28]	@ (8002860 <HAL_Init+0x40>)
 8002842:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002846:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002848:	2003      	movs	r0, #3
 800284a:	f000 febf 	bl	80035cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800284e:	200f      	movs	r0, #15
 8002850:	f000 f808 	bl	8002864 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002854:	f7ff fd5c 	bl	8002310 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40023c00 	.word	0x40023c00

08002864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800286c:	4b12      	ldr	r3, [pc, #72]	@ (80028b8 <HAL_InitTick+0x54>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b12      	ldr	r3, [pc, #72]	@ (80028bc <HAL_InitTick+0x58>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	4619      	mov	r1, r3
 8002876:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800287a:	fbb3 f3f1 	udiv	r3, r3, r1
 800287e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002882:	4618      	mov	r0, r3
 8002884:	f000 fed7 	bl	8003636 <HAL_SYSTICK_Config>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e00e      	b.n	80028b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b0f      	cmp	r3, #15
 8002896:	d80a      	bhi.n	80028ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002898:	2200      	movs	r2, #0
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	f04f 30ff 	mov.w	r0, #4294967295
 80028a0:	f000 fe9f 	bl	80035e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028a4:	4a06      	ldr	r2, [pc, #24]	@ (80028c0 <HAL_InitTick+0x5c>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e000      	b.n	80028b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000060 	.word	0x20000060
 80028bc:	20000068 	.word	0x20000068
 80028c0:	20000064 	.word	0x20000064

080028c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028c8:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <HAL_IncTick+0x1c>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <HAL_IncTick+0x20>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	4a03      	ldr	r2, [pc, #12]	@ (80028e4 <HAL_IncTick+0x20>)
 80028d6:	6013      	str	r3, [r2, #0]
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	20000068 	.word	0x20000068
 80028e4:	200008e4 	.word	0x200008e4

080028e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return uwTick;
 80028ec:	4b02      	ldr	r3, [pc, #8]	@ (80028f8 <HAL_GetTick+0x10>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	200008e4 	.word	0x200008e4

080028fc <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002904:	f7ff fff0 	bl	80028e8 <HAL_GetTick>
 8002908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002914:	d005      	beq.n	8002922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002916:	4b0a      	ldr	r3, [pc, #40]	@ (8002940 <HAL_Delay+0x44>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4413      	add	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002922:	bf00      	nop
 8002924:	f7ff ffe0 	bl	80028e8 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	429a      	cmp	r2, r3
 8002932:	d8f7      	bhi.n	8002924 <HAL_Delay+0x28>
  {
  }
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000068 	.word	0x20000068

08002944 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e0ed      	b.n	8002b32 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d102      	bne.n	8002968 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff fa20 	bl	8001da8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002978:	f7ff ffb6 	bl	80028e8 <HAL_GetTick>
 800297c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800297e:	e012      	b.n	80029a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002980:	f7ff ffb2 	bl	80028e8 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b0a      	cmp	r3, #10
 800298c:	d90b      	bls.n	80029a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002992:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2205      	movs	r2, #5
 800299e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e0c5      	b.n	8002b32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d0e5      	beq.n	8002980 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0202 	bic.w	r2, r2, #2
 80029c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029c4:	f7ff ff90 	bl	80028e8 <HAL_GetTick>
 80029c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80029ca:	e012      	b.n	80029f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029cc:	f7ff ff8c 	bl	80028e8 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b0a      	cmp	r3, #10
 80029d8:	d90b      	bls.n	80029f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2205      	movs	r2, #5
 80029ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e09f      	b.n	8002b32 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1e5      	bne.n	80029cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	7e1b      	ldrb	r3, [r3, #24]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d108      	bne.n	8002a1a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	e007      	b.n	8002a2a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	7e5b      	ldrb	r3, [r3, #25]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d108      	bne.n	8002a44 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	e007      	b.n	8002a54 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a52:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	7e9b      	ldrb	r3, [r3, #26]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d108      	bne.n	8002a6e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0220 	orr.w	r2, r2, #32
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e007      	b.n	8002a7e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0220 	bic.w	r2, r2, #32
 8002a7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	7edb      	ldrb	r3, [r3, #27]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d108      	bne.n	8002a98 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0210 	bic.w	r2, r2, #16
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	e007      	b.n	8002aa8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0210 	orr.w	r2, r2, #16
 8002aa6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	7f1b      	ldrb	r3, [r3, #28]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d108      	bne.n	8002ac2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0208 	orr.w	r2, r2, #8
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	e007      	b.n	8002ad2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0208 	bic.w	r2, r2, #8
 8002ad0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	7f5b      	ldrb	r3, [r3, #29]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d108      	bne.n	8002aec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f042 0204 	orr.w	r2, r2, #4
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	e007      	b.n	8002afc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0204 	bic.w	r2, r2, #4
 8002afa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	431a      	orrs	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	ea42 0103 	orr.w	r1, r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	1e5a      	subs	r2, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b084      	sub	sp, #16
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d12e      	bne.n	8002bac <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2202      	movs	r2, #2
 8002b52:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0201 	bic.w	r2, r2, #1
 8002b64:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b66:	f7ff febf 	bl	80028e8 <HAL_GetTick>
 8002b6a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b6c:	e012      	b.n	8002b94 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b6e:	f7ff febb 	bl	80028e8 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b0a      	cmp	r3, #10
 8002b7a:	d90b      	bls.n	8002b94 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2205      	movs	r2, #5
 8002b8c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e012      	b.n	8002bba <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1e5      	bne.n	8002b6e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	e006      	b.n	8002bba <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
  }
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b089      	sub	sp, #36	@ 0x24
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	607a      	str	r2, [r7, #4]
 8002bce:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bd6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002be0:	7ffb      	ldrb	r3, [r7, #31]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d003      	beq.n	8002bee <HAL_CAN_AddTxMessage+0x2c>
 8002be6:	7ffb      	ldrb	r3, [r7, #31]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	f040 80ad 	bne.w	8002d48 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d105      	bne.n	8002c0e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 8095 	beq.w	8002d38 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	0e1b      	lsrs	r3, r3, #24
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002c18:	2201      	movs	r2, #1
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10d      	bne.n	8002c46 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002c34:	68f9      	ldr	r1, [r7, #12]
 8002c36:	6809      	ldr	r1, [r1, #0]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	3318      	adds	r3, #24
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	440b      	add	r3, r1
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	e00f      	b.n	8002c66 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c50:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c56:	68f9      	ldr	r1, [r7, #12]
 8002c58:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002c5a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	3318      	adds	r3, #24
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	440b      	add	r3, r1
 8002c64:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6819      	ldr	r1, [r3, #0]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	3318      	adds	r3, #24
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	440b      	add	r3, r1
 8002c76:	3304      	adds	r3, #4
 8002c78:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	7d1b      	ldrb	r3, [r3, #20]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d111      	bne.n	8002ca6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	3318      	adds	r3, #24
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3304      	adds	r3, #4
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	6811      	ldr	r1, [r2, #0]
 8002c96:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	3318      	adds	r3, #24
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	440b      	add	r3, r1
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	3307      	adds	r3, #7
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	061a      	lsls	r2, r3, #24
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3306      	adds	r3, #6
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	041b      	lsls	r3, r3, #16
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3305      	adds	r3, #5
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	3204      	adds	r2, #4
 8002cc6:	7812      	ldrb	r2, [r2, #0]
 8002cc8:	4610      	mov	r0, r2
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	6811      	ldr	r1, [r2, #0]
 8002cce:	ea43 0200 	orr.w	r2, r3, r0
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	440b      	add	r3, r1
 8002cd8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002cdc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3303      	adds	r3, #3
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	061a      	lsls	r2, r3, #24
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3302      	adds	r3, #2
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	041b      	lsls	r3, r3, #16
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	7812      	ldrb	r2, [r2, #0]
 8002cfe:	4610      	mov	r0, r2
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	6811      	ldr	r1, [r2, #0]
 8002d04:	ea43 0200 	orr.w	r2, r3, r0
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	440b      	add	r3, r1
 8002d0e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002d12:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	3318      	adds	r3, #24
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	4413      	add	r3, r2
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	6811      	ldr	r1, [r2, #0]
 8002d26:	f043 0201 	orr.w	r2, r3, #1
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	3318      	adds	r3, #24
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	440b      	add	r3, r1
 8002d32:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	e00e      	b.n	8002d56 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e006      	b.n	8002d56 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
  }
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3724      	adds	r7, #36	@ 0x24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d74:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d76:	7dfb      	ldrb	r3, [r7, #23]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d003      	beq.n	8002d84 <HAL_CAN_GetRxMessage+0x24>
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	f040 8103 	bne.w	8002f8a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10e      	bne.n	8002da8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d116      	bne.n	8002dc6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0f7      	b.n	8002f98 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d107      	bne.n	8002dc6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e0e8      	b.n	8002f98 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	331b      	adds	r3, #27
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	4413      	add	r3, r2
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0204 	and.w	r2, r3, #4
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10c      	bne.n	8002dfe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	331b      	adds	r3, #27
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	4413      	add	r3, r2
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	0d5b      	lsrs	r3, r3, #21
 8002df4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	e00b      	b.n	8002e16 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	331b      	adds	r3, #27
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	4413      	add	r3, r2
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	08db      	lsrs	r3, r3, #3
 8002e0e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	331b      	adds	r3, #27
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	4413      	add	r3, r2
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0202 	and.w	r2, r3, #2
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	331b      	adds	r3, #27
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	4413      	add	r3, r2
 8002e38:	3304      	adds	r3, #4
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0308 	and.w	r3, r3, #8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2208      	movs	r2, #8
 8002e48:	611a      	str	r2, [r3, #16]
 8002e4a:	e00b      	b.n	8002e64 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	331b      	adds	r3, #27
 8002e54:	011b      	lsls	r3, r3, #4
 8002e56:	4413      	add	r3, r2
 8002e58:	3304      	adds	r3, #4
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 020f 	and.w	r2, r3, #15
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	331b      	adds	r3, #27
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	4413      	add	r3, r2
 8002e70:	3304      	adds	r3, #4
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	0a1b      	lsrs	r3, r3, #8
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	331b      	adds	r3, #27
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	4413      	add	r3, r2
 8002e88:	3304      	adds	r3, #4
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	0c1b      	lsrs	r3, r3, #16
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	b2da      	uxtb	r2, r3
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	011b      	lsls	r3, r3, #4
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	0a1a      	lsrs	r2, r3, #8
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	b2d2      	uxtb	r2, r2
 8002ec2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	0c1a      	lsrs	r2, r3, #16
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	3302      	adds	r3, #2
 8002eda:	b2d2      	uxtb	r2, r2
 8002edc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	0e1a      	lsrs	r2, r3, #24
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	3303      	adds	r3, #3
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	0a1a      	lsrs	r2, r3, #8
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	3305      	adds	r3, #5
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	0c1a      	lsrs	r2, r3, #16
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	3306      	adds	r3, #6
 8002f40:	b2d2      	uxtb	r2, r2
 8002f42:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	0e1a      	lsrs	r2, r3, #24
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	3307      	adds	r3, #7
 8002f5a:	b2d2      	uxtb	r2, r2
 8002f5c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d108      	bne.n	8002f76 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0220 	orr.w	r2, r2, #32
 8002f72:	60da      	str	r2, [r3, #12]
 8002f74:	e007      	b.n	8002f86 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0220 	orr.w	r2, r2, #32
 8002f84:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002f86:	2300      	movs	r3, #0
 8002f88:	e006      	b.n	8002f98 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
  }
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	371c      	adds	r7, #28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr

08002fa2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b085      	sub	sp, #20
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fb2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d002      	beq.n	8002fc0 <HAL_CAN_ActivateNotification+0x1e>
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d109      	bne.n	8002fd4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6959      	ldr	r1, [r3, #20]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e006      	b.n	8002fe2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
  }
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	@ 0x28
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d07c      	beq.n	800312c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d023      	beq.n	8003084 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2201      	movs	r2, #1
 8003042:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f983 	bl	800335a <HAL_CAN_TxMailbox0CompleteCallback>
 8003054:	e016      	b.n	8003084 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d004      	beq.n	800306a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003062:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003066:	627b      	str	r3, [r7, #36]	@ 0x24
 8003068:	e00c      	b.n	8003084 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b00      	cmp	r3, #0
 8003072:	d004      	beq.n	800307e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003076:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800307a:	627b      	str	r3, [r7, #36]	@ 0x24
 800307c:	e002      	b.n	8003084 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f986 	bl	8003390 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308a:	2b00      	cmp	r3, #0
 800308c:	d024      	beq.n	80030d8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003096:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f962 	bl	800336c <HAL_CAN_TxMailbox1CompleteCallback>
 80030a8:	e016      	b.n	80030d8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d004      	beq.n	80030be <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80030b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80030ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80030bc:	e00c      	b.n	80030d8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d004      	beq.n	80030d2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80030c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80030d0:	e002      	b.n	80030d8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f965 	bl	80033a2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d024      	beq.n	800312c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80030ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f941 	bl	800337e <HAL_CAN_TxMailbox2CompleteCallback>
 80030fc:	e016      	b.n	800312c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d004      	beq.n	8003112 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800310e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003110:	e00c      	b.n	800312c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d004      	beq.n	8003126 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800311c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003122:	627b      	str	r3, [r7, #36]	@ 0x24
 8003124:	e002      	b.n	800312c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f944 	bl	80033b4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00c      	beq.n	8003150 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b00      	cmp	r3, #0
 800313e:	d007      	beq.n	8003150 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003142:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003146:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2210      	movs	r2, #16
 800314e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d006      	beq.n	8003172 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2208      	movs	r2, #8
 800316a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f92a 	bl	80033c6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d009      	beq.n	8003190 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fe fa78 	bl	8001680 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00c      	beq.n	80031b4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f003 0310 	and.w	r3, r3, #16
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d007      	beq.n	80031b4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80031a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031aa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2210      	movs	r2, #16
 80031b2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d006      	beq.n	80031d6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2208      	movs	r2, #8
 80031ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f90a 	bl	80033ea <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d009      	beq.n	80031f4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 f8f2 	bl	80033d8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80031f4:	6a3b      	ldr	r3, [r7, #32]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00b      	beq.n	8003216 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	f003 0310 	and.w	r3, r3, #16
 8003204:	2b00      	cmp	r3, #0
 8003206:	d006      	beq.n	8003216 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2210      	movs	r2, #16
 800320e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f8f3 	bl	80033fc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00b      	beq.n	8003238 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d006      	beq.n	8003238 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2208      	movs	r2, #8
 8003230:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f8eb 	bl	800340e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d07b      	beq.n	800333a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d072      	beq.n	8003332 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800324c:	6a3b      	ldr	r3, [r7, #32]
 800324e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d008      	beq.n	8003268 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800326e:	2b00      	cmp	r3, #0
 8003270:	d008      	beq.n	8003284 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800327c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327e:	f043 0302 	orr.w	r3, r3, #2
 8003282:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328a:	2b00      	cmp	r3, #0
 800328c:	d008      	beq.n	80032a0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329a:	f043 0304 	orr.w	r3, r3, #4
 800329e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d043      	beq.n	8003332 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d03e      	beq.n	8003332 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032ba:	2b60      	cmp	r3, #96	@ 0x60
 80032bc:	d02b      	beq.n	8003316 <HAL_CAN_IRQHandler+0x32a>
 80032be:	2b60      	cmp	r3, #96	@ 0x60
 80032c0:	d82e      	bhi.n	8003320 <HAL_CAN_IRQHandler+0x334>
 80032c2:	2b50      	cmp	r3, #80	@ 0x50
 80032c4:	d022      	beq.n	800330c <HAL_CAN_IRQHandler+0x320>
 80032c6:	2b50      	cmp	r3, #80	@ 0x50
 80032c8:	d82a      	bhi.n	8003320 <HAL_CAN_IRQHandler+0x334>
 80032ca:	2b40      	cmp	r3, #64	@ 0x40
 80032cc:	d019      	beq.n	8003302 <HAL_CAN_IRQHandler+0x316>
 80032ce:	2b40      	cmp	r3, #64	@ 0x40
 80032d0:	d826      	bhi.n	8003320 <HAL_CAN_IRQHandler+0x334>
 80032d2:	2b30      	cmp	r3, #48	@ 0x30
 80032d4:	d010      	beq.n	80032f8 <HAL_CAN_IRQHandler+0x30c>
 80032d6:	2b30      	cmp	r3, #48	@ 0x30
 80032d8:	d822      	bhi.n	8003320 <HAL_CAN_IRQHandler+0x334>
 80032da:	2b10      	cmp	r3, #16
 80032dc:	d002      	beq.n	80032e4 <HAL_CAN_IRQHandler+0x2f8>
 80032de:	2b20      	cmp	r3, #32
 80032e0:	d005      	beq.n	80032ee <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80032e2:	e01d      	b.n	8003320 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80032e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e6:	f043 0308 	orr.w	r3, r3, #8
 80032ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032ec:	e019      	b.n	8003322 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80032ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f0:	f043 0310 	orr.w	r3, r3, #16
 80032f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032f6:	e014      	b.n	8003322 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80032f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fa:	f043 0320 	orr.w	r3, r3, #32
 80032fe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003300:	e00f      	b.n	8003322 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003304:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003308:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800330a:	e00a      	b.n	8003322 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800330c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003312:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003314:	e005      	b.n	8003322 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800331c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800331e:	e000      	b.n	8003322 <HAL_CAN_IRQHandler+0x336>
            break;
 8003320:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699a      	ldr	r2, [r3, #24]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003330:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2204      	movs	r2, #4
 8003338:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800333a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333c:	2b00      	cmp	r3, #0
 800333e:	d008      	beq.n	8003352 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003346:	431a      	orrs	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f867 	bl	8003420 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003352:	bf00      	nop
 8003354:	3728      	adds	r7, #40	@ 0x28
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr

0800336c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr

0800337e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr

080033a2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr

080033b4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr

080033c6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr

080033d8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bc80      	pop	{r7}
 80033e8:	4770      	bx	lr

080033ea <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80033ea:	b480      	push	{r7}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr

080033fc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr

0800340e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	bc80      	pop	{r7}
 800341e:	4770      	bx	lr

08003420 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	bc80      	pop	{r7}
 8003430:	4770      	bx	lr
	...

08003434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003444:	4b0c      	ldr	r3, [pc, #48]	@ (8003478 <__NVIC_SetPriorityGrouping+0x44>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003450:	4013      	ands	r3, r2
 8003452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800345c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003466:	4a04      	ldr	r2, [pc, #16]	@ (8003478 <__NVIC_SetPriorityGrouping+0x44>)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	60d3      	str	r3, [r2, #12]
}
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	e000ed00 	.word	0xe000ed00

0800347c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003480:	4b04      	ldr	r3, [pc, #16]	@ (8003494 <__NVIC_GetPriorityGrouping+0x18>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	0a1b      	lsrs	r3, r3, #8
 8003486:	f003 0307 	and.w	r3, r3, #7
}
 800348a:	4618      	mov	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	db0b      	blt.n	80034c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	f003 021f 	and.w	r2, r3, #31
 80034b0:	4906      	ldr	r1, [pc, #24]	@ (80034cc <__NVIC_EnableIRQ+0x34>)
 80034b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	2001      	movs	r0, #1
 80034ba:	fa00 f202 	lsl.w	r2, r0, r2
 80034be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr
 80034cc:	e000e100 	.word	0xe000e100

080034d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	6039      	str	r1, [r7, #0]
 80034da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	db0a      	blt.n	80034fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	490c      	ldr	r1, [pc, #48]	@ (800351c <__NVIC_SetPriority+0x4c>)
 80034ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ee:	0112      	lsls	r2, r2, #4
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	440b      	add	r3, r1
 80034f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034f8:	e00a      	b.n	8003510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	b2da      	uxtb	r2, r3
 80034fe:	4908      	ldr	r1, [pc, #32]	@ (8003520 <__NVIC_SetPriority+0x50>)
 8003500:	79fb      	ldrb	r3, [r7, #7]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	3b04      	subs	r3, #4
 8003508:	0112      	lsls	r2, r2, #4
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	440b      	add	r3, r1
 800350e:	761a      	strb	r2, [r3, #24]
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	bc80      	pop	{r7}
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	e000e100 	.word	0xe000e100
 8003520:	e000ed00 	.word	0xe000ed00

08003524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003524:	b480      	push	{r7}
 8003526:	b089      	sub	sp, #36	@ 0x24
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	f1c3 0307 	rsb	r3, r3, #7
 800353e:	2b04      	cmp	r3, #4
 8003540:	bf28      	it	cs
 8003542:	2304      	movcs	r3, #4
 8003544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	3304      	adds	r3, #4
 800354a:	2b06      	cmp	r3, #6
 800354c:	d902      	bls.n	8003554 <NVIC_EncodePriority+0x30>
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	3b03      	subs	r3, #3
 8003552:	e000      	b.n	8003556 <NVIC_EncodePriority+0x32>
 8003554:	2300      	movs	r3, #0
 8003556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003558:	f04f 32ff 	mov.w	r2, #4294967295
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43da      	mvns	r2, r3
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	401a      	ands	r2, r3
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800356c:	f04f 31ff 	mov.w	r1, #4294967295
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	fa01 f303 	lsl.w	r3, r1, r3
 8003576:	43d9      	mvns	r1, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800357c:	4313      	orrs	r3, r2
         );
}
 800357e:	4618      	mov	r0, r3
 8003580:	3724      	adds	r7, #36	@ 0x24
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr

08003588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3b01      	subs	r3, #1
 8003594:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003598:	d301      	bcc.n	800359e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800359a:	2301      	movs	r3, #1
 800359c:	e00f      	b.n	80035be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800359e:	4a0a      	ldr	r2, [pc, #40]	@ (80035c8 <SysTick_Config+0x40>)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035a6:	210f      	movs	r1, #15
 80035a8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ac:	f7ff ff90 	bl	80034d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035b0:	4b05      	ldr	r3, [pc, #20]	@ (80035c8 <SysTick_Config+0x40>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035b6:	4b04      	ldr	r3, [pc, #16]	@ (80035c8 <SysTick_Config+0x40>)
 80035b8:	2207      	movs	r2, #7
 80035ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	e000e010 	.word	0xe000e010

080035cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff ff2d 	bl	8003434 <__NVIC_SetPriorityGrouping>
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b086      	sub	sp, #24
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	4603      	mov	r3, r0
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
 80035ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035f4:	f7ff ff42 	bl	800347c <__NVIC_GetPriorityGrouping>
 80035f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	6978      	ldr	r0, [r7, #20]
 8003600:	f7ff ff90 	bl	8003524 <NVIC_EncodePriority>
 8003604:	4602      	mov	r2, r0
 8003606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800360a:	4611      	mov	r1, r2
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff ff5f 	bl	80034d0 <__NVIC_SetPriority>
}
 8003612:	bf00      	nop
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	4603      	mov	r3, r0
 8003622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff ff35 	bl	8003498 <__NVIC_EnableIRQ>
}
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff ffa2 	bl	8003588 <SysTick_Config>
 8003644:	4603      	mov	r3, r0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800365a:	2300      	movs	r3, #0
 800365c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800365e:	e16f      	b.n	8003940 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	2101      	movs	r1, #1
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	fa01 f303 	lsl.w	r3, r1, r3
 800366c:	4013      	ands	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 8161 	beq.w	800393a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	2b01      	cmp	r3, #1
 8003682:	d005      	beq.n	8003690 <HAL_GPIO_Init+0x40>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d130      	bne.n	80036f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	2203      	movs	r2, #3
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	43db      	mvns	r3, r3
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	4013      	ands	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036c6:	2201      	movs	r2, #1
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4013      	ands	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	091b      	lsrs	r3, r3, #4
 80036dc:	f003 0201 	and.w	r2, r3, #1
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d017      	beq.n	800372e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	2203      	movs	r2, #3
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	43db      	mvns	r3, r3
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	4013      	ands	r3, r2
 8003714:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f003 0303 	and.w	r3, r3, #3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d123      	bne.n	8003782 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	08da      	lsrs	r2, r3, #3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3208      	adds	r2, #8
 8003742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003746:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	220f      	movs	r2, #15
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	43db      	mvns	r3, r3
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4013      	ands	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	691a      	ldr	r2, [r3, #16]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	08da      	lsrs	r2, r3, #3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3208      	adds	r2, #8
 800377c:	6939      	ldr	r1, [r7, #16]
 800377e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	2203      	movs	r2, #3
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	43db      	mvns	r3, r3
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4013      	ands	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f003 0203 	and.w	r2, r3, #3
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	fa02 f303 	lsl.w	r3, r2, r3
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 80bb 	beq.w	800393a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c4:	2300      	movs	r3, #0
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	4b64      	ldr	r3, [pc, #400]	@ (800395c <HAL_GPIO_Init+0x30c>)
 80037ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037cc:	4a63      	ldr	r2, [pc, #396]	@ (800395c <HAL_GPIO_Init+0x30c>)
 80037ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80037d4:	4b61      	ldr	r3, [pc, #388]	@ (800395c <HAL_GPIO_Init+0x30c>)
 80037d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037e0:	4a5f      	ldr	r2, [pc, #380]	@ (8003960 <HAL_GPIO_Init+0x310>)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	089b      	lsrs	r3, r3, #2
 80037e6:	3302      	adds	r3, #2
 80037e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	220f      	movs	r2, #15
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4013      	ands	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a57      	ldr	r2, [pc, #348]	@ (8003964 <HAL_GPIO_Init+0x314>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d031      	beq.n	8003870 <HAL_GPIO_Init+0x220>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a56      	ldr	r2, [pc, #344]	@ (8003968 <HAL_GPIO_Init+0x318>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d02b      	beq.n	800386c <HAL_GPIO_Init+0x21c>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a55      	ldr	r2, [pc, #340]	@ (800396c <HAL_GPIO_Init+0x31c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d025      	beq.n	8003868 <HAL_GPIO_Init+0x218>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a54      	ldr	r2, [pc, #336]	@ (8003970 <HAL_GPIO_Init+0x320>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d01f      	beq.n	8003864 <HAL_GPIO_Init+0x214>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a53      	ldr	r2, [pc, #332]	@ (8003974 <HAL_GPIO_Init+0x324>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d019      	beq.n	8003860 <HAL_GPIO_Init+0x210>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a52      	ldr	r2, [pc, #328]	@ (8003978 <HAL_GPIO_Init+0x328>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d013      	beq.n	800385c <HAL_GPIO_Init+0x20c>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a51      	ldr	r2, [pc, #324]	@ (800397c <HAL_GPIO_Init+0x32c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d00d      	beq.n	8003858 <HAL_GPIO_Init+0x208>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a50      	ldr	r2, [pc, #320]	@ (8003980 <HAL_GPIO_Init+0x330>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d007      	beq.n	8003854 <HAL_GPIO_Init+0x204>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a4f      	ldr	r2, [pc, #316]	@ (8003984 <HAL_GPIO_Init+0x334>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d101      	bne.n	8003850 <HAL_GPIO_Init+0x200>
 800384c:	2308      	movs	r3, #8
 800384e:	e010      	b.n	8003872 <HAL_GPIO_Init+0x222>
 8003850:	2309      	movs	r3, #9
 8003852:	e00e      	b.n	8003872 <HAL_GPIO_Init+0x222>
 8003854:	2307      	movs	r3, #7
 8003856:	e00c      	b.n	8003872 <HAL_GPIO_Init+0x222>
 8003858:	2306      	movs	r3, #6
 800385a:	e00a      	b.n	8003872 <HAL_GPIO_Init+0x222>
 800385c:	2305      	movs	r3, #5
 800385e:	e008      	b.n	8003872 <HAL_GPIO_Init+0x222>
 8003860:	2304      	movs	r3, #4
 8003862:	e006      	b.n	8003872 <HAL_GPIO_Init+0x222>
 8003864:	2303      	movs	r3, #3
 8003866:	e004      	b.n	8003872 <HAL_GPIO_Init+0x222>
 8003868:	2302      	movs	r3, #2
 800386a:	e002      	b.n	8003872 <HAL_GPIO_Init+0x222>
 800386c:	2301      	movs	r3, #1
 800386e:	e000      	b.n	8003872 <HAL_GPIO_Init+0x222>
 8003870:	2300      	movs	r3, #0
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	f002 0203 	and.w	r2, r2, #3
 8003878:	0092      	lsls	r2, r2, #2
 800387a:	4093      	lsls	r3, r2
 800387c:	461a      	mov	r2, r3
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	4313      	orrs	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003884:	4936      	ldr	r1, [pc, #216]	@ (8003960 <HAL_GPIO_Init+0x310>)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	089b      	lsrs	r3, r3, #2
 800388a:	3302      	adds	r3, #2
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003892:	4b3d      	ldr	r3, [pc, #244]	@ (8003988 <HAL_GPIO_Init+0x338>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	43db      	mvns	r3, r3
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4013      	ands	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80038b6:	4a34      	ldr	r2, [pc, #208]	@ (8003988 <HAL_GPIO_Init+0x338>)
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038bc:	4b32      	ldr	r3, [pc, #200]	@ (8003988 <HAL_GPIO_Init+0x338>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	43db      	mvns	r3, r3
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4013      	ands	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80038e0:	4a29      	ldr	r2, [pc, #164]	@ (8003988 <HAL_GPIO_Init+0x338>)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038e6:	4b28      	ldr	r3, [pc, #160]	@ (8003988 <HAL_GPIO_Init+0x338>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	43db      	mvns	r3, r3
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4013      	ands	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4313      	orrs	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800390a:	4a1f      	ldr	r2, [pc, #124]	@ (8003988 <HAL_GPIO_Init+0x338>)
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003910:	4b1d      	ldr	r3, [pc, #116]	@ (8003988 <HAL_GPIO_Init+0x338>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	43db      	mvns	r3, r3
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4013      	ands	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4313      	orrs	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003934:	4a14      	ldr	r2, [pc, #80]	@ (8003988 <HAL_GPIO_Init+0x338>)
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	3301      	adds	r3, #1
 800393e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	fa22 f303 	lsr.w	r3, r2, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	f47f ae88 	bne.w	8003660 <HAL_GPIO_Init+0x10>
  }
}
 8003950:	bf00      	nop
 8003952:	bf00      	nop
 8003954:	371c      	adds	r7, #28
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr
 800395c:	40023800 	.word	0x40023800
 8003960:	40013800 	.word	0x40013800
 8003964:	40020000 	.word	0x40020000
 8003968:	40020400 	.word	0x40020400
 800396c:	40020800 	.word	0x40020800
 8003970:	40020c00 	.word	0x40020c00
 8003974:	40021000 	.word	0x40021000
 8003978:	40021400 	.word	0x40021400
 800397c:	40021800 	.word	0x40021800
 8003980:	40021c00 	.word	0x40021c00
 8003984:	40022000 	.word	0x40022000
 8003988:	40013c00 	.word	0x40013c00

0800398c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	807b      	strh	r3, [r7, #2]
 8003998:	4613      	mov	r3, r2
 800399a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800399c:	787b      	ldrb	r3, [r7, #1]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039a2:	887a      	ldrh	r2, [r7, #2]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039a8:	e003      	b.n	80039b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039aa:	887b      	ldrh	r3, [r7, #2]
 80039ac:	041a      	lsls	r2, r3, #16
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	619a      	str	r2, [r3, #24]
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr

080039bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039ce:	887a      	ldrh	r2, [r7, #2]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4013      	ands	r3, r2
 80039d4:	041a      	lsls	r2, r3, #16
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	43d9      	mvns	r1, r3
 80039da:	887b      	ldrh	r3, [r7, #2]
 80039dc:	400b      	ands	r3, r1
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	619a      	str	r2, [r3, #24]
}
 80039e4:	bf00      	nop
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr

080039ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039f0:	b08f      	sub	sp, #60	@ 0x3c
 80039f2:	af0a      	add	r7, sp, #40	@ 0x28
 80039f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e10f      	b.n	8003c20 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fe fe7c 	bl	8002718 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2203      	movs	r2, #3
 8003a24:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d102      	bne.n	8003a3a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f001 ff2f 	bl	80058a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	603b      	str	r3, [r7, #0]
 8003a4a:	687e      	ldr	r6, [r7, #4]
 8003a4c:	466d      	mov	r5, sp
 8003a4e:	f106 0410 	add.w	r4, r6, #16
 8003a52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a62:	1d33      	adds	r3, r6, #4
 8003a64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a66:	6838      	ldr	r0, [r7, #0]
 8003a68:	f001 fec4 	bl	80057f4 <USB_CoreInit>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2202      	movs	r2, #2
 8003a76:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e0d0      	b.n	8003c20 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2100      	movs	r1, #0
 8003a84:	4618      	mov	r0, r3
 8003a86:	f001 ff1c 	bl	80058c2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	73fb      	strb	r3, [r7, #15]
 8003a8e:	e04a      	b.n	8003b26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a90:	7bfa      	ldrb	r2, [r7, #15]
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	333d      	adds	r3, #61	@ 0x3d
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003aa4:	7bfa      	ldrb	r2, [r7, #15]
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	333c      	adds	r3, #60	@ 0x3c
 8003ab4:	7bfa      	ldrb	r2, [r7, #15]
 8003ab6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ab8:	7bfa      	ldrb	r2, [r7, #15]
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	b298      	uxth	r0, r3
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	3356      	adds	r3, #86	@ 0x56
 8003acc:	4602      	mov	r2, r0
 8003ace:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003ad0:	7bfa      	ldrb	r2, [r7, #15]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	3340      	adds	r3, #64	@ 0x40
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ae4:	7bfa      	ldrb	r2, [r7, #15]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	3344      	adds	r3, #68	@ 0x44
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003af8:	7bfa      	ldrb	r2, [r7, #15]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	3348      	adds	r3, #72	@ 0x48
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b0c:	7bfa      	ldrb	r2, [r7, #15]
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	4613      	mov	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	4413      	add	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	440b      	add	r3, r1
 8003b1a:	334c      	adds	r3, #76	@ 0x4c
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	3301      	adds	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
 8003b26:	7bfa      	ldrb	r2, [r7, #15]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d3af      	bcc.n	8003a90 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b30:	2300      	movs	r3, #0
 8003b32:	73fb      	strb	r3, [r7, #15]
 8003b34:	e044      	b.n	8003bc0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b36:	7bfa      	ldrb	r2, [r7, #15]
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b4c:	7bfa      	ldrb	r2, [r7, #15]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8003b5e:	7bfa      	ldrb	r2, [r7, #15]
 8003b60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b62:	7bfa      	ldrb	r2, [r7, #15]
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	4613      	mov	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	440b      	add	r3, r1
 8003b70:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b78:	7bfa      	ldrb	r2, [r7, #15]
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b8e:	7bfa      	ldrb	r2, [r7, #15]
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	4613      	mov	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4413      	add	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ba4:	7bfa      	ldrb	r2, [r7, #15]
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	4413      	add	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	73fb      	strb	r3, [r7, #15]
 8003bc0:	7bfa      	ldrb	r2, [r7, #15]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d3b5      	bcc.n	8003b36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	603b      	str	r3, [r7, #0]
 8003bd0:	687e      	ldr	r6, [r7, #4]
 8003bd2:	466d      	mov	r5, sp
 8003bd4:	f106 0410 	add.w	r4, r6, #16
 8003bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003be0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003be4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003be8:	1d33      	adds	r3, r6, #4
 8003bea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bec:	6838      	ldr	r0, [r7, #0]
 8003bee:	f001 feb5 	bl	800595c <USB_DevInit>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e00d      	b.n	8003c20 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f002 f875 	bl	8005d08 <USB_DevDisconnect>

  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08a      	sub	sp, #40	@ 0x28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e23b      	b.n	80040b2 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d050      	beq.n	8003ce8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c46:	4b9e      	ldr	r3, [pc, #632]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d00c      	beq.n	8003c6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c52:	4b9b      	ldr	r3, [pc, #620]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d112      	bne.n	8003c84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c5e:	4b98      	ldr	r3, [pc, #608]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c6a:	d10b      	bne.n	8003c84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c6c:	4b94      	ldr	r3, [pc, #592]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d036      	beq.n	8003ce6 <HAL_RCC_OscConfig+0xbe>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d132      	bne.n	8003ce6 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e216      	b.n	80040b2 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	4b8e      	ldr	r3, [pc, #568]	@ (8003ec4 <HAL_RCC_OscConfig+0x29c>)
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d013      	beq.n	8003cbe <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c96:	f7fe fe27 	bl	80028e8 <HAL_GetTick>
 8003c9a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c9e:	f7fe fe23 	bl	80028e8 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b64      	cmp	r3, #100	@ 0x64
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e200      	b.n	80040b2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb0:	4b83      	ldr	r3, [pc, #524]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f0      	beq.n	8003c9e <HAL_RCC_OscConfig+0x76>
 8003cbc:	e014      	b.n	8003ce8 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cbe:	f7fe fe13 	bl	80028e8 <HAL_GetTick>
 8003cc2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc6:	f7fe fe0f 	bl	80028e8 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b64      	cmp	r3, #100	@ 0x64
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e1ec      	b.n	80040b2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd8:	4b79      	ldr	r3, [pc, #484]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1f0      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x9e>
 8003ce4:	e000      	b.n	8003ce8 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d077      	beq.n	8003de4 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cf4:	4b72      	ldr	r3, [pc, #456]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 030c 	and.w	r3, r3, #12
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00b      	beq.n	8003d18 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d00:	4b6f      	ldr	r3, [pc, #444]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d126      	bne.n	8003d5a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d0c:	4b6c      	ldr	r3, [pc, #432]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d120      	bne.n	8003d5a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d18:	4b69      	ldr	r3, [pc, #420]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_RCC_OscConfig+0x108>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e1c0      	b.n	80040b2 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d30:	4b63      	ldr	r3, [pc, #396]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	21f8      	movs	r1, #248	@ 0xf8
 8003d3e:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d40:	69b9      	ldr	r1, [r7, #24]
 8003d42:	fa91 f1a1 	rbit	r1, r1
 8003d46:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d48:	6979      	ldr	r1, [r7, #20]
 8003d4a:	fab1 f181 	clz	r1, r1
 8003d4e:	b2c9      	uxtb	r1, r1
 8003d50:	408b      	lsls	r3, r1
 8003d52:	495b      	ldr	r1, [pc, #364]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d58:	e044      	b.n	8003de4 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d02a      	beq.n	8003db8 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d62:	4b59      	ldr	r3, [pc, #356]	@ (8003ec8 <HAL_RCC_OscConfig+0x2a0>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d68:	f7fe fdbe 	bl	80028e8 <HAL_GetTick>
 8003d6c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d70:	f7fe fdba 	bl	80028e8 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e197      	b.n	80040b2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d82:	4b4f      	ldr	r3, [pc, #316]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d8e:	4b4c      	ldr	r3, [pc, #304]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	21f8      	movs	r1, #248	@ 0xf8
 8003d9c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9e:	6939      	ldr	r1, [r7, #16]
 8003da0:	fa91 f1a1 	rbit	r1, r1
 8003da4:	60f9      	str	r1, [r7, #12]
  return result;
 8003da6:	68f9      	ldr	r1, [r7, #12]
 8003da8:	fab1 f181 	clz	r1, r1
 8003dac:	b2c9      	uxtb	r1, r1
 8003dae:	408b      	lsls	r3, r1
 8003db0:	4943      	ldr	r1, [pc, #268]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	600b      	str	r3, [r1, #0]
 8003db6:	e015      	b.n	8003de4 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003db8:	4b43      	ldr	r3, [pc, #268]	@ (8003ec8 <HAL_RCC_OscConfig+0x2a0>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbe:	f7fe fd93 	bl	80028e8 <HAL_GetTick>
 8003dc2:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dc6:	f7fe fd8f 	bl	80028e8 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	6a3b      	ldr	r3, [r7, #32]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e16c      	b.n	80040b2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dd8:	4b39      	ldr	r3, [pc, #228]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1f0      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d030      	beq.n	8003e52 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d016      	beq.n	8003e26 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003df8:	4b34      	ldr	r3, [pc, #208]	@ (8003ecc <HAL_RCC_OscConfig+0x2a4>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dfe:	f7fe fd73 	bl	80028e8 <HAL_GetTick>
 8003e02:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e06:	f7fe fd6f 	bl	80028e8 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e14c      	b.n	80040b2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e18:	4b29      	ldr	r3, [pc, #164]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003e1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d0f0      	beq.n	8003e06 <HAL_RCC_OscConfig+0x1de>
 8003e24:	e015      	b.n	8003e52 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e26:	4b29      	ldr	r3, [pc, #164]	@ (8003ecc <HAL_RCC_OscConfig+0x2a4>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e2c:	f7fe fd5c 	bl	80028e8 <HAL_GetTick>
 8003e30:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e34:	f7fe fd58 	bl	80028e8 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e135      	b.n	80040b2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e46:	4b1e      	ldr	r3, [pc, #120]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0304 	and.w	r3, r3, #4
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 8087 	beq.w	8003f6e <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e66:	4b16      	ldr	r3, [pc, #88]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d110      	bne.n	8003e94 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	4b12      	ldr	r3, [pc, #72]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7a:	4a11      	ldr	r2, [pc, #68]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e82:	4b0f      	ldr	r3, [pc, #60]	@ (8003ec0 <HAL_RCC_OscConfig+0x298>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e94:	4b0e      	ldr	r3, [pc, #56]	@ (8003ed0 <HAL_RCC_OscConfig+0x2a8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a0d      	ldr	r2, [pc, #52]	@ (8003ed0 <HAL_RCC_OscConfig+0x2a8>)
 8003e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e9e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed0 <HAL_RCC_OscConfig+0x2a8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d122      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eac:	4b08      	ldr	r3, [pc, #32]	@ (8003ed0 <HAL_RCC_OscConfig+0x2a8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a07      	ldr	r2, [pc, #28]	@ (8003ed0 <HAL_RCC_OscConfig+0x2a8>)
 8003eb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eb6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eb8:	f7fe fd16 	bl	80028e8 <HAL_GetTick>
 8003ebc:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebe:	e012      	b.n	8003ee6 <HAL_RCC_OscConfig+0x2be>
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	40023802 	.word	0x40023802
 8003ec8:	42470000 	.word	0x42470000
 8003ecc:	42470e80 	.word	0x42470e80
 8003ed0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed4:	f7fe fd08 	bl	80028e8 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e0e5      	b.n	80040b2 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee6:	4b75      	ldr	r3, [pc, #468]	@ (80040bc <HAL_RCC_OscConfig+0x494>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	4b72      	ldr	r3, [pc, #456]	@ (80040c0 <HAL_RCC_OscConfig+0x498>)
 8003ef8:	b2d2      	uxtb	r2, r2
 8003efa:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d015      	beq.n	8003f30 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f04:	f7fe fcf0 	bl	80028e8 <HAL_GetTick>
 8003f08:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f0c:	f7fe fcec 	bl	80028e8 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e0c7      	b.n	80040b2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f22:	4b68      	ldr	r3, [pc, #416]	@ (80040c4 <HAL_RCC_OscConfig+0x49c>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0ee      	beq.n	8003f0c <HAL_RCC_OscConfig+0x2e4>
 8003f2e:	e014      	b.n	8003f5a <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f30:	f7fe fcda 	bl	80028e8 <HAL_GetTick>
 8003f34:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f36:	e00a      	b.n	8003f4e <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f38:	f7fe fcd6 	bl	80028e8 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e0b1      	b.n	80040b2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f4e:	4b5d      	ldr	r3, [pc, #372]	@ (80040c4 <HAL_RCC_OscConfig+0x49c>)
 8003f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1ee      	bne.n	8003f38 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d105      	bne.n	8003f6e <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f62:	4b58      	ldr	r3, [pc, #352]	@ (80040c4 <HAL_RCC_OscConfig+0x49c>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	4a57      	ldr	r2, [pc, #348]	@ (80040c4 <HAL_RCC_OscConfig+0x49c>)
 8003f68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f6c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 809c 	beq.w	80040b0 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f78:	4b52      	ldr	r3, [pc, #328]	@ (80040c4 <HAL_RCC_OscConfig+0x49c>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 030c 	and.w	r3, r3, #12
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d061      	beq.n	8004048 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d146      	bne.n	800401a <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8c:	4b4e      	ldr	r3, [pc, #312]	@ (80040c8 <HAL_RCC_OscConfig+0x4a0>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f92:	f7fe fca9 	bl	80028e8 <HAL_GetTick>
 8003f96:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f9a:	f7fe fca5 	bl	80028e8 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b64      	cmp	r3, #100	@ 0x64
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e082      	b.n	80040b2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fac:	4b45      	ldr	r3, [pc, #276]	@ (80040c4 <HAL_RCC_OscConfig+0x49c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f0      	bne.n	8003f9a <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fb8:	4b42      	ldr	r3, [pc, #264]	@ (80040c4 <HAL_RCC_OscConfig+0x49c>)
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	4b43      	ldr	r3, [pc, #268]	@ (80040cc <HAL_RCC_OscConfig+0x4a4>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	69d1      	ldr	r1, [r2, #28]
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6a12      	ldr	r2, [r2, #32]
 8003fc8:	4311      	orrs	r1, r2
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fce:	0192      	lsls	r2, r2, #6
 8003fd0:	4311      	orrs	r1, r2
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003fd6:	0612      	lsls	r2, r2, #24
 8003fd8:	4311      	orrs	r1, r2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003fde:	0852      	lsrs	r2, r2, #1
 8003fe0:	3a01      	subs	r2, #1
 8003fe2:	0412      	lsls	r2, r2, #16
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	4937      	ldr	r1, [pc, #220]	@ (80040c4 <HAL_RCC_OscConfig+0x49c>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fec:	4b36      	ldr	r3, [pc, #216]	@ (80040c8 <HAL_RCC_OscConfig+0x4a0>)
 8003fee:	2201      	movs	r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff2:	f7fe fc79 	bl	80028e8 <HAL_GetTick>
 8003ff6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff8:	e008      	b.n	800400c <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ffa:	f7fe fc75 	bl	80028e8 <HAL_GetTick>
 8003ffe:	4602      	mov	r2, r0
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	2b64      	cmp	r3, #100	@ 0x64
 8004006:	d901      	bls.n	800400c <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e052      	b.n	80040b2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400c:	4b2d      	ldr	r3, [pc, #180]	@ (80040c4 <HAL_RCC_OscConfig+0x49c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0f0      	beq.n	8003ffa <HAL_RCC_OscConfig+0x3d2>
 8004018:	e04a      	b.n	80040b0 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800401a:	4b2b      	ldr	r3, [pc, #172]	@ (80040c8 <HAL_RCC_OscConfig+0x4a0>)
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004020:	f7fe fc62 	bl	80028e8 <HAL_GetTick>
 8004024:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004028:	f7fe fc5e 	bl	80028e8 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b64      	cmp	r3, #100	@ 0x64
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e03b      	b.n	80040b2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403a:	4b22      	ldr	r3, [pc, #136]	@ (80040c4 <HAL_RCC_OscConfig+0x49c>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1f0      	bne.n	8004028 <HAL_RCC_OscConfig+0x400>
 8004046:	e033      	b.n	80040b0 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d101      	bne.n	8004054 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e02e      	b.n	80040b2 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8004054:	4b1b      	ldr	r3, [pc, #108]	@ (80040c4 <HAL_RCC_OscConfig+0x49c>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	429a      	cmp	r2, r3
 8004066:	d121      	bne.n	80040ac <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004072:	429a      	cmp	r2, r3
 8004074:	d11a      	bne.n	80040ac <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004076:	69fa      	ldr	r2, [r7, #28]
 8004078:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800407c:	4013      	ands	r3, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004082:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004084:	4293      	cmp	r3, r2
 8004086:	d111      	bne.n	80040ac <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004092:	085b      	lsrs	r3, r3, #1
 8004094:	3b01      	subs	r3, #1
 8004096:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004098:	429a      	cmp	r2, r3
 800409a:	d107      	bne.n	80040ac <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a6:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3728      	adds	r7, #40	@ 0x28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40007000 	.word	0x40007000
 80040c0:	40023870 	.word	0x40023870
 80040c4:	40023800 	.word	0x40023800
 80040c8:	42470060 	.word	0x42470060
 80040cc:	f0bc8000 	.word	0xf0bc8000

080040d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0d2      	b.n	800428a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040e4:	4b6b      	ldr	r3, [pc, #428]	@ (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d90c      	bls.n	800410c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f2:	4b68      	ldr	r3, [pc, #416]	@ (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	b2d2      	uxtb	r2, r2
 80040f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040fa:	4b66      	ldr	r3, [pc, #408]	@ (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	429a      	cmp	r2, r3
 8004106:	d001      	beq.n	800410c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e0be      	b.n	800428a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d020      	beq.n	800415a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004124:	4b5c      	ldr	r3, [pc, #368]	@ (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	4a5b      	ldr	r2, [pc, #364]	@ (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 800412a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800412e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800413c:	4b56      	ldr	r3, [pc, #344]	@ (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4a55      	ldr	r2, [pc, #340]	@ (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 8004142:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004146:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004148:	4b53      	ldr	r3, [pc, #332]	@ (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	4950      	ldr	r1, [pc, #320]	@ (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 8004156:	4313      	orrs	r3, r2
 8004158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d040      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d107      	bne.n	800417e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416e:	4b4a      	ldr	r3, [pc, #296]	@ (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d115      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e085      	b.n	800428a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b02      	cmp	r3, #2
 8004184:	d107      	bne.n	8004196 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004186:	4b44      	ldr	r3, [pc, #272]	@ (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d109      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e079      	b.n	800428a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004196:	4b40      	ldr	r3, [pc, #256]	@ (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e071      	b.n	800428a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041a6:	4b3c      	ldr	r3, [pc, #240]	@ (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f023 0203 	bic.w	r2, r3, #3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	4939      	ldr	r1, [pc, #228]	@ (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041b8:	f7fe fb96 	bl	80028e8 <HAL_GetTick>
 80041bc:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041be:	e00a      	b.n	80041d6 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c0:	f7fe fb92 	bl	80028e8 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e059      	b.n	800428a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d6:	4b30      	ldr	r3, [pc, #192]	@ (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 020c 	and.w	r2, r3, #12
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d1eb      	bne.n	80041c0 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d20c      	bcs.n	8004210 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f6:	4b27      	ldr	r3, [pc, #156]	@ (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fe:	4b25      	ldr	r3, [pc, #148]	@ (8004294 <HAL_RCC_ClockConfig+0x1c4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d001      	beq.n	8004210 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e03c      	b.n	800428a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800421c:	4b1e      	ldr	r3, [pc, #120]	@ (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	491b      	ldr	r1, [pc, #108]	@ (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 800422a:	4313      	orrs	r3, r2
 800422c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d009      	beq.n	800424e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800423a:	4b17      	ldr	r3, [pc, #92]	@ (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	4913      	ldr	r1, [pc, #76]	@ (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800424e:	f000 f82b 	bl	80042a8 <HAL_RCC_GetSysClockFreq>
 8004252:	4601      	mov	r1, r0
 8004254:	4b10      	ldr	r3, [pc, #64]	@ (8004298 <HAL_RCC_ClockConfig+0x1c8>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800425c:	22f0      	movs	r2, #240	@ 0xf0
 800425e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	fa92 f2a2 	rbit	r2, r2
 8004266:	60fa      	str	r2, [r7, #12]
  return result;
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	fab2 f282 	clz	r2, r2
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	40d3      	lsrs	r3, r2
 8004272:	4a0a      	ldr	r2, [pc, #40]	@ (800429c <HAL_RCC_ClockConfig+0x1cc>)
 8004274:	5cd3      	ldrb	r3, [r2, r3]
 8004276:	fa21 f303 	lsr.w	r3, r1, r3
 800427a:	4a09      	ldr	r2, [pc, #36]	@ (80042a0 <HAL_RCC_ClockConfig+0x1d0>)
 800427c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800427e:	4b09      	ldr	r3, [pc, #36]	@ (80042a4 <HAL_RCC_ClockConfig+0x1d4>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7fe faee 	bl	8002864 <HAL_InitTick>

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40023c00 	.word	0x40023c00
 8004298:	40023800 	.word	0x40023800
 800429c:	08008f34 	.word	0x08008f34
 80042a0:	20000060 	.word	0x20000060
 80042a4:	20000064 	.word	0x20000064

080042a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042ac:	b090      	sub	sp, #64	@ 0x40
 80042ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80042b4:	2300      	movs	r3, #0
 80042b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042b8:	2300      	movs	r3, #0
 80042ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042c0:	4b59      	ldr	r3, [pc, #356]	@ (8004428 <HAL_RCC_GetSysClockFreq+0x180>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 030c 	and.w	r3, r3, #12
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d00d      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x40>
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	f200 80a2 	bhi.w	8004416 <HAL_RCC_GetSysClockFreq+0x16e>
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <HAL_RCC_GetSysClockFreq+0x34>
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d003      	beq.n	80042e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80042da:	e09c      	b.n	8004416 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042dc:	4b53      	ldr	r3, [pc, #332]	@ (800442c <HAL_RCC_GetSysClockFreq+0x184>)
 80042de:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80042e0:	e09c      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042e2:	4b53      	ldr	r3, [pc, #332]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x188>)
 80042e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042e6:	e099      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042e8:	4b4f      	ldr	r3, [pc, #316]	@ (8004428 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042f2:	4b4d      	ldr	r3, [pc, #308]	@ (8004428 <HAL_RCC_GetSysClockFreq+0x180>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d027      	beq.n	800434e <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004428 <HAL_RCC_GetSysClockFreq+0x180>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	099b      	lsrs	r3, r3, #6
 8004304:	2200      	movs	r2, #0
 8004306:	623b      	str	r3, [r7, #32]
 8004308:	627a      	str	r2, [r7, #36]	@ 0x24
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004310:	2100      	movs	r1, #0
 8004312:	4b47      	ldr	r3, [pc, #284]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x188>)
 8004314:	fb03 f201 	mul.w	r2, r3, r1
 8004318:	2300      	movs	r3, #0
 800431a:	fb00 f303 	mul.w	r3, r0, r3
 800431e:	4413      	add	r3, r2
 8004320:	4a43      	ldr	r2, [pc, #268]	@ (8004430 <HAL_RCC_GetSysClockFreq+0x188>)
 8004322:	fba0 2102 	umull	r2, r1, r0, r2
 8004326:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004328:	62ba      	str	r2, [r7, #40]	@ 0x28
 800432a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800432c:	4413      	add	r3, r2
 800432e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004332:	2200      	movs	r2, #0
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	61fa      	str	r2, [r7, #28]
 8004338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800433c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004340:	f7fc fbfe 	bl	8000b40 <__aeabi_uldivmod>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4613      	mov	r3, r2
 800434a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800434c:	e055      	b.n	80043fa <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800434e:	4b36      	ldr	r3, [pc, #216]	@ (8004428 <HAL_RCC_GetSysClockFreq+0x180>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	099b      	lsrs	r3, r3, #6
 8004354:	2200      	movs	r2, #0
 8004356:	613b      	str	r3, [r7, #16]
 8004358:	617a      	str	r2, [r7, #20]
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004360:	f04f 0b00 	mov.w	fp, #0
 8004364:	4652      	mov	r2, sl
 8004366:	465b      	mov	r3, fp
 8004368:	f04f 0000 	mov.w	r0, #0
 800436c:	f04f 0100 	mov.w	r1, #0
 8004370:	0159      	lsls	r1, r3, #5
 8004372:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004376:	0150      	lsls	r0, r2, #5
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	ebb2 080a 	subs.w	r8, r2, sl
 8004380:	eb63 090b 	sbc.w	r9, r3, fp
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004390:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004394:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004398:	ebb2 0408 	subs.w	r4, r2, r8
 800439c:	eb63 0509 	sbc.w	r5, r3, r9
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	00eb      	lsls	r3, r5, #3
 80043aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ae:	00e2      	lsls	r2, r4, #3
 80043b0:	4614      	mov	r4, r2
 80043b2:	461d      	mov	r5, r3
 80043b4:	eb14 030a 	adds.w	r3, r4, sl
 80043b8:	603b      	str	r3, [r7, #0]
 80043ba:	eb45 030b 	adc.w	r3, r5, fp
 80043be:	607b      	str	r3, [r7, #4]
 80043c0:	f04f 0200 	mov.w	r2, #0
 80043c4:	f04f 0300 	mov.w	r3, #0
 80043c8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043cc:	4629      	mov	r1, r5
 80043ce:	028b      	lsls	r3, r1, #10
 80043d0:	4620      	mov	r0, r4
 80043d2:	4629      	mov	r1, r5
 80043d4:	4604      	mov	r4, r0
 80043d6:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80043da:	4601      	mov	r1, r0
 80043dc:	028a      	lsls	r2, r1, #10
 80043de:	4610      	mov	r0, r2
 80043e0:	4619      	mov	r1, r3
 80043e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e4:	2200      	movs	r2, #0
 80043e6:	60bb      	str	r3, [r7, #8]
 80043e8:	60fa      	str	r2, [r7, #12]
 80043ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043ee:	f7fc fba7 	bl	8000b40 <__aeabi_uldivmod>
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	4613      	mov	r3, r2
 80043f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004428 <HAL_RCC_GetSysClockFreq+0x180>)
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	0c1b      	lsrs	r3, r3, #16
 8004400:	f003 0303 	and.w	r3, r3, #3
 8004404:	3301      	adds	r3, #1
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800440a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800440c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004412:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004414:	e002      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004416:	4b05      	ldr	r3, [pc, #20]	@ (800442c <HAL_RCC_GetSysClockFreq+0x184>)
 8004418:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800441a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800441c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800441e:	4618      	mov	r0, r3
 8004420:	3740      	adds	r7, #64	@ 0x40
 8004422:	46bd      	mov	sp, r7
 8004424:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004428:	40023800 	.word	0x40023800
 800442c:	00f42400 	.word	0x00f42400
 8004430:	017d7840 	.word	0x017d7840

08004434 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e07b      	b.n	800453e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444a:	2b00      	cmp	r3, #0
 800444c:	d108      	bne.n	8004460 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004456:	d009      	beq.n	800446c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	61da      	str	r2, [r3, #28]
 800445e:	e005      	b.n	800446c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7fd fefa 	bl	8002280 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044f0:	ea42 0103 	orr.w	r1, r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	0c1b      	lsrs	r3, r3, #16
 800450a:	f003 0104 	and.w	r1, r3, #4
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004512:	f003 0210 	and.w	r2, r3, #16
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	69da      	ldr	r2, [r3, #28]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800452c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b088      	sub	sp, #32
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	4613      	mov	r3, r2
 8004554:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004560:	2b01      	cmp	r3, #1
 8004562:	d101      	bne.n	8004568 <HAL_SPI_Transmit+0x22>
 8004564:	2302      	movs	r3, #2
 8004566:	e12d      	b.n	80047c4 <HAL_SPI_Transmit+0x27e>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004570:	f7fe f9ba 	bl	80028e8 <HAL_GetTick>
 8004574:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004576:	88fb      	ldrh	r3, [r7, #6]
 8004578:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b01      	cmp	r3, #1
 8004584:	d002      	beq.n	800458c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004586:	2302      	movs	r3, #2
 8004588:	77fb      	strb	r3, [r7, #31]
    goto error;
 800458a:	e116      	b.n	80047ba <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <HAL_SPI_Transmit+0x52>
 8004592:	88fb      	ldrh	r3, [r7, #6]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d102      	bne.n	800459e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800459c:	e10d      	b.n	80047ba <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2203      	movs	r2, #3
 80045a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	88fa      	ldrh	r2, [r7, #6]
 80045b6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	88fa      	ldrh	r2, [r7, #6]
 80045bc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045e4:	d10f      	bne.n	8004606 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004604:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004610:	2b40      	cmp	r3, #64	@ 0x40
 8004612:	d007      	beq.n	8004624 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004622:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800462c:	d14f      	bne.n	80046ce <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <HAL_SPI_Transmit+0xf6>
 8004636:	8afb      	ldrh	r3, [r7, #22]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d142      	bne.n	80046c2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004640:	881a      	ldrh	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800464c:	1c9a      	adds	r2, r3, #2
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004660:	e02f      	b.n	80046c2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b02      	cmp	r3, #2
 800466e:	d112      	bne.n	8004696 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004674:	881a      	ldrh	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004680:	1c9a      	adds	r2, r3, #2
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800468a:	b29b      	uxth	r3, r3
 800468c:	3b01      	subs	r3, #1
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004694:	e015      	b.n	80046c2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004696:	f7fe f927 	bl	80028e8 <HAL_GetTick>
 800469a:	4602      	mov	r2, r0
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d803      	bhi.n	80046ae <HAL_SPI_Transmit+0x168>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ac:	d102      	bne.n	80046b4 <HAL_SPI_Transmit+0x16e>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d106      	bne.n	80046c2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80046c0:	e07b      	b.n	80047ba <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1ca      	bne.n	8004662 <HAL_SPI_Transmit+0x11c>
 80046cc:	e050      	b.n	8004770 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <HAL_SPI_Transmit+0x196>
 80046d6:	8afb      	ldrh	r3, [r7, #22]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d144      	bne.n	8004766 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	330c      	adds	r3, #12
 80046e6:	7812      	ldrb	r2, [r2, #0]
 80046e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004702:	e030      	b.n	8004766 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b02      	cmp	r3, #2
 8004710:	d113      	bne.n	800473a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	330c      	adds	r3, #12
 800471c:	7812      	ldrb	r2, [r2, #0]
 800471e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800472e:	b29b      	uxth	r3, r3
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004738:	e015      	b.n	8004766 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800473a:	f7fe f8d5 	bl	80028e8 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	429a      	cmp	r2, r3
 8004748:	d803      	bhi.n	8004752 <HAL_SPI_Transmit+0x20c>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004750:	d102      	bne.n	8004758 <HAL_SPI_Transmit+0x212>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d106      	bne.n	8004766 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004764:	e029      	b.n	80047ba <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800476a:	b29b      	uxth	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1c9      	bne.n	8004704 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	6839      	ldr	r1, [r7, #0]
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 fbae 	bl	8004ed6 <SPI_EndRxTxTransaction>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d002      	beq.n	8004786 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10a      	bne.n	80047a4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800478e:	2300      	movs	r3, #0
 8004790:	613b      	str	r3, [r7, #16]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	77fb      	strb	r3, [r7, #31]
 80047b0:	e003      	b.n	80047ba <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80047c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3720      	adds	r7, #32
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b088      	sub	sp, #32
 80047d0:	af02      	add	r7, sp, #8
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	603b      	str	r3, [r7, #0]
 80047d8:	4613      	mov	r3, r2
 80047da:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d002      	beq.n	80047f2 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80047ec:	2302      	movs	r3, #2
 80047ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047f0:	e0fb      	b.n	80049ea <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047fa:	d112      	bne.n	8004822 <HAL_SPI_Receive+0x56>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10e      	bne.n	8004822 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2204      	movs	r2, #4
 8004808:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800480c:	88fa      	ldrh	r2, [r7, #6]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	4613      	mov	r3, r2
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	68b9      	ldr	r1, [r7, #8]
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 f8ef 	bl	80049fc <HAL_SPI_TransmitReceive>
 800481e:	4603      	mov	r3, r0
 8004820:	e0e8      	b.n	80049f4 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_SPI_Receive+0x64>
 800482c:	2302      	movs	r3, #2
 800482e:	e0e1      	b.n	80049f4 <HAL_SPI_Receive+0x228>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004838:	f7fe f856 	bl	80028e8 <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d002      	beq.n	800484a <HAL_SPI_Receive+0x7e>
 8004844:	88fb      	ldrh	r3, [r7, #6]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d102      	bne.n	8004850 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800484e:	e0cc      	b.n	80049ea <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2204      	movs	r2, #4
 8004854:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	88fa      	ldrh	r2, [r7, #6]
 8004868:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	88fa      	ldrh	r2, [r7, #6]
 800486e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004896:	d10f      	bne.n	80048b8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048a6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80048b6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c2:	2b40      	cmp	r3, #64	@ 0x40
 80048c4:	d007      	beq.n	80048d6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048d4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d16a      	bne.n	80049b4 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80048de:	e032      	b.n	8004946 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d115      	bne.n	800491a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f103 020c 	add.w	r2, r3, #12
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fa:	7812      	ldrb	r2, [r2, #0]
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004918:	e015      	b.n	8004946 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800491a:	f7fd ffe5 	bl	80028e8 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d803      	bhi.n	8004932 <HAL_SPI_Receive+0x166>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004930:	d102      	bne.n	8004938 <HAL_SPI_Receive+0x16c>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d106      	bne.n	8004946 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004944:	e051      	b.n	80049ea <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800494a:	b29b      	uxth	r3, r3
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1c7      	bne.n	80048e0 <HAL_SPI_Receive+0x114>
 8004950:	e035      	b.n	80049be <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b01      	cmp	r3, #1
 800495e:	d113      	bne.n	8004988 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800496a:	b292      	uxth	r2, r2
 800496c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004972:	1c9a      	adds	r2, r3, #2
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800497c:	b29b      	uxth	r3, r3
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004986:	e015      	b.n	80049b4 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004988:	f7fd ffae 	bl	80028e8 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	429a      	cmp	r2, r3
 8004996:	d803      	bhi.n	80049a0 <HAL_SPI_Receive+0x1d4>
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499e:	d102      	bne.n	80049a6 <HAL_SPI_Receive+0x1da>
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80049b2:	e01a      	b.n	80049ea <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1c9      	bne.n	8004952 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	6839      	ldr	r1, [r7, #0]
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 fa52 	bl	8004e6c <SPI_EndRxTransaction>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2220      	movs	r2, #32
 80049d2:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	75fb      	strb	r3, [r7, #23]
 80049e0:	e003      	b.n	80049ea <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80049f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b08c      	sub	sp, #48	@ 0x30
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_SPI_TransmitReceive+0x26>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e198      	b.n	8004d54 <HAL_SPI_TransmitReceive+0x358>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a2a:	f7fd ff5d 	bl	80028e8 <HAL_GetTick>
 8004a2e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a40:	887b      	ldrh	r3, [r7, #2]
 8004a42:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d00f      	beq.n	8004a6c <HAL_SPI_TransmitReceive+0x70>
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a52:	d107      	bne.n	8004a64 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d103      	bne.n	8004a64 <HAL_SPI_TransmitReceive+0x68>
 8004a5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a60:	2b04      	cmp	r3, #4
 8004a62:	d003      	beq.n	8004a6c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004a64:	2302      	movs	r3, #2
 8004a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004a6a:	e16d      	b.n	8004d48 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d005      	beq.n	8004a7e <HAL_SPI_TransmitReceive+0x82>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <HAL_SPI_TransmitReceive+0x82>
 8004a78:	887b      	ldrh	r3, [r7, #2]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d103      	bne.n	8004a86 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004a84:	e160      	b.n	8004d48 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d003      	beq.n	8004a9a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2205      	movs	r2, #5
 8004a96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	887a      	ldrh	r2, [r7, #2]
 8004aaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	887a      	ldrh	r2, [r7, #2]
 8004ab0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	887a      	ldrh	r2, [r7, #2]
 8004abc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	887a      	ldrh	r2, [r7, #2]
 8004ac2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ada:	2b40      	cmp	r3, #64	@ 0x40
 8004adc:	d007      	beq.n	8004aee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004aec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004af6:	d17c      	bne.n	8004bf2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d002      	beq.n	8004b06 <HAL_SPI_TransmitReceive+0x10a>
 8004b00:	8b7b      	ldrh	r3, [r7, #26]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d16a      	bne.n	8004bdc <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b0a:	881a      	ldrh	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b16:	1c9a      	adds	r2, r3, #2
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b2a:	e057      	b.n	8004bdc <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d11b      	bne.n	8004b72 <HAL_SPI_TransmitReceive+0x176>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d016      	beq.n	8004b72 <HAL_SPI_TransmitReceive+0x176>
 8004b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d113      	bne.n	8004b72 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4e:	881a      	ldrh	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b5a:	1c9a      	adds	r2, r3, #2
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d119      	bne.n	8004bb4 <HAL_SPI_TransmitReceive+0x1b8>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d014      	beq.n	8004bb4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b94:	b292      	uxth	r2, r2
 8004b96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9c:	1c9a      	adds	r2, r3, #2
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bb4:	f7fd fe98 	bl	80028e8 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d80b      	bhi.n	8004bdc <HAL_SPI_TransmitReceive+0x1e0>
 8004bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bca:	d007      	beq.n	8004bdc <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004bda:	e0b5      	b.n	8004d48 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1a2      	bne.n	8004b2c <HAL_SPI_TransmitReceive+0x130>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d19d      	bne.n	8004b2c <HAL_SPI_TransmitReceive+0x130>
 8004bf0:	e080      	b.n	8004cf4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <HAL_SPI_TransmitReceive+0x204>
 8004bfa:	8b7b      	ldrh	r3, [r7, #26]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d16f      	bne.n	8004ce0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	330c      	adds	r3, #12
 8004c0a:	7812      	ldrb	r2, [r2, #0]
 8004c0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c26:	e05b      	b.n	8004ce0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d11c      	bne.n	8004c70 <HAL_SPI_TransmitReceive+0x274>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d017      	beq.n	8004c70 <HAL_SPI_TransmitReceive+0x274>
 8004c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d114      	bne.n	8004c70 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	330c      	adds	r3, #12
 8004c50:	7812      	ldrb	r2, [r2, #0]
 8004c52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d119      	bne.n	8004cb2 <HAL_SPI_TransmitReceive+0x2b6>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d014      	beq.n	8004cb2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cb2:	f7fd fe19 	bl	80028e8 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d803      	bhi.n	8004cca <HAL_SPI_TransmitReceive+0x2ce>
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc8:	d102      	bne.n	8004cd0 <HAL_SPI_TransmitReceive+0x2d4>
 8004cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d107      	bne.n	8004ce0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004cde:	e033      	b.n	8004d48 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d19e      	bne.n	8004c28 <HAL_SPI_TransmitReceive+0x22c>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d199      	bne.n	8004c28 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cf6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f8ec 	bl	8004ed6 <SPI_EndRxTxTransaction>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d006      	beq.n	8004d12 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2220      	movs	r2, #32
 8004d0e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004d10:	e01a      	b.n	8004d48 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10a      	bne.n	8004d30 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	617b      	str	r3, [r7, #20]
 8004d2e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d3e:	e003      	b.n	8004d48 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004d50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3730      	adds	r7, #48	@ 0x30
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d6c:	f7fd fdbc 	bl	80028e8 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d74:	1a9b      	subs	r3, r3, r2
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	4413      	add	r3, r2
 8004d7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d7c:	f7fd fdb4 	bl	80028e8 <HAL_GetTick>
 8004d80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d82:	4b39      	ldr	r3, [pc, #228]	@ (8004e68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	015b      	lsls	r3, r3, #5
 8004d88:	0d1b      	lsrs	r3, r3, #20
 8004d8a:	69fa      	ldr	r2, [r7, #28]
 8004d8c:	fb02 f303 	mul.w	r3, r2, r3
 8004d90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d92:	e054      	b.n	8004e3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9a:	d050      	beq.n	8004e3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d9c:	f7fd fda4 	bl	80028e8 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d902      	bls.n	8004db2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d13d      	bne.n	8004e2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004dc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dca:	d111      	bne.n	8004df0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dd4:	d004      	beq.n	8004de0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dde:	d107      	bne.n	8004df0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004df8:	d10f      	bne.n	8004e1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e017      	b.n	8004e5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689a      	ldr	r2, [r3, #8]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4013      	ands	r3, r2
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	bf0c      	ite	eq
 8004e4e:	2301      	moveq	r3, #1
 8004e50:	2300      	movne	r3, #0
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	461a      	mov	r2, r3
 8004e56:	79fb      	ldrb	r3, [r7, #7]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d19b      	bne.n	8004d94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	20000060 	.word	0x20000060

08004e6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af02      	add	r7, sp, #8
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e80:	d111      	bne.n	8004ea6 <SPI_EndRxTransaction+0x3a>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e8a:	d004      	beq.n	8004e96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e94:	d107      	bne.n	8004ea6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ea4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	2200      	movs	r2, #0
 8004eae:	2180      	movs	r1, #128	@ 0x80
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f7ff ff53 	bl	8004d5c <SPI_WaitFlagStateUntilTimeout>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec0:	f043 0220 	orr.w	r2, r3, #32
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e000      	b.n	8004ece <SPI_EndRxTransaction+0x62>
  }
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b086      	sub	sp, #24
 8004eda:	af02      	add	r7, sp, #8
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2180      	movs	r1, #128	@ 0x80
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f7ff ff35 	bl	8004d5c <SPI_WaitFlagStateUntilTimeout>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d007      	beq.n	8004f08 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004efc:	f043 0220 	orr.w	r2, r3, #32
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e000      	b.n	8004f0a <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b082      	sub	sp, #8
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e041      	b.n	8004fa8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d106      	bne.n	8004f3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7fd fb9d 	bl	8002678 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2202      	movs	r2, #2
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	4619      	mov	r1, r3
 8004f50:	4610      	mov	r0, r2
 8004f52:	f000 fa8f 	bl	8005474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3708      	adds	r7, #8
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d001      	beq.n	8004fc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e04e      	b.n	8005066 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0201 	orr.w	r2, r2, #1
 8004fde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a22      	ldr	r2, [pc, #136]	@ (8005070 <HAL_TIM_Base_Start_IT+0xc0>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d022      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x80>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ff2:	d01d      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x80>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a1e      	ldr	r2, [pc, #120]	@ (8005074 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d018      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x80>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a1d      	ldr	r2, [pc, #116]	@ (8005078 <HAL_TIM_Base_Start_IT+0xc8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d013      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x80>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a1b      	ldr	r2, [pc, #108]	@ (800507c <HAL_TIM_Base_Start_IT+0xcc>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d00e      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x80>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a1a      	ldr	r2, [pc, #104]	@ (8005080 <HAL_TIM_Base_Start_IT+0xd0>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d009      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x80>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a18      	ldr	r2, [pc, #96]	@ (8005084 <HAL_TIM_Base_Start_IT+0xd4>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d004      	beq.n	8005030 <HAL_TIM_Base_Start_IT+0x80>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a17      	ldr	r2, [pc, #92]	@ (8005088 <HAL_TIM_Base_Start_IT+0xd8>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d111      	bne.n	8005054 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2b06      	cmp	r3, #6
 8005040:	d010      	beq.n	8005064 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f042 0201 	orr.w	r2, r2, #1
 8005050:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005052:	e007      	b.n	8005064 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0201 	orr.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	bc80      	pop	{r7}
 800506e:	4770      	bx	lr
 8005070:	40010000 	.word	0x40010000
 8005074:	40000400 	.word	0x40000400
 8005078:	40000800 	.word	0x40000800
 800507c:	40000c00 	.word	0x40000c00
 8005080:	40010400 	.word	0x40010400
 8005084:	40014000 	.word	0x40014000
 8005088:	40001800 	.word	0x40001800

0800508c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d122      	bne.n	80050e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d11b      	bne.n	80050e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f06f 0202 	mvn.w	r2, #2
 80050b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f9b4 	bl	800543c <HAL_TIM_IC_CaptureCallback>
 80050d4:	e005      	b.n	80050e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f9a7 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f9b6 	bl	800544e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	f003 0304 	and.w	r3, r3, #4
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d122      	bne.n	800513c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	2b04      	cmp	r3, #4
 8005102:	d11b      	bne.n	800513c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f06f 0204 	mvn.w	r2, #4
 800510c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2202      	movs	r2, #2
 8005112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f98a 	bl	800543c <HAL_TIM_IC_CaptureCallback>
 8005128:	e005      	b.n	8005136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f97d 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f98c 	bl	800544e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f003 0308 	and.w	r3, r3, #8
 8005146:	2b08      	cmp	r3, #8
 8005148:	d122      	bne.n	8005190 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f003 0308 	and.w	r3, r3, #8
 8005154:	2b08      	cmp	r3, #8
 8005156:	d11b      	bne.n	8005190 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f06f 0208 	mvn.w	r2, #8
 8005160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2204      	movs	r2, #4
 8005166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f960 	bl	800543c <HAL_TIM_IC_CaptureCallback>
 800517c:	e005      	b.n	800518a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f953 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 f962 	bl	800544e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	f003 0310 	and.w	r3, r3, #16
 800519a:	2b10      	cmp	r3, #16
 800519c:	d122      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f003 0310 	and.w	r3, r3, #16
 80051a8:	2b10      	cmp	r3, #16
 80051aa:	d11b      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f06f 0210 	mvn.w	r2, #16
 80051b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2208      	movs	r2, #8
 80051ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d003      	beq.n	80051d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f936 	bl	800543c <HAL_TIM_IC_CaptureCallback>
 80051d0:	e005      	b.n	80051de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f929 	bl	800542a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f938 	bl	800544e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d10e      	bne.n	8005210 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f003 0301 	and.w	r3, r3, #1
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d107      	bne.n	8005210 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0201 	mvn.w	r2, #1
 8005208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7fc fa00 	bl	8001610 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800521a:	2b80      	cmp	r3, #128	@ 0x80
 800521c:	d10e      	bne.n	800523c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005228:	2b80      	cmp	r3, #128	@ 0x80
 800522a:	d107      	bne.n	800523c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fad3 	bl	80057e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005246:	2b40      	cmp	r3, #64	@ 0x40
 8005248:	d10e      	bne.n	8005268 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005254:	2b40      	cmp	r3, #64	@ 0x40
 8005256:	d107      	bne.n	8005268 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f8fc 	bl	8005460 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0320 	and.w	r3, r3, #32
 8005272:	2b20      	cmp	r3, #32
 8005274:	d10e      	bne.n	8005294 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0320 	and.w	r3, r3, #32
 8005280:	2b20      	cmp	r3, #32
 8005282:	d107      	bne.n	8005294 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0220 	mvn.w	r2, #32
 800528c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fa9e 	bl	80057d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005294:	bf00      	nop
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_TIM_ConfigClockSource+0x1c>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e0b4      	b.n	8005422 <HAL_TIM_ConfigClockSource+0x186>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80052d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052f0:	d03e      	beq.n	8005370 <HAL_TIM_ConfigClockSource+0xd4>
 80052f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052f6:	f200 8087 	bhi.w	8005408 <HAL_TIM_ConfigClockSource+0x16c>
 80052fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052fe:	f000 8086 	beq.w	800540e <HAL_TIM_ConfigClockSource+0x172>
 8005302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005306:	d87f      	bhi.n	8005408 <HAL_TIM_ConfigClockSource+0x16c>
 8005308:	2b70      	cmp	r3, #112	@ 0x70
 800530a:	d01a      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0xa6>
 800530c:	2b70      	cmp	r3, #112	@ 0x70
 800530e:	d87b      	bhi.n	8005408 <HAL_TIM_ConfigClockSource+0x16c>
 8005310:	2b60      	cmp	r3, #96	@ 0x60
 8005312:	d050      	beq.n	80053b6 <HAL_TIM_ConfigClockSource+0x11a>
 8005314:	2b60      	cmp	r3, #96	@ 0x60
 8005316:	d877      	bhi.n	8005408 <HAL_TIM_ConfigClockSource+0x16c>
 8005318:	2b50      	cmp	r3, #80	@ 0x50
 800531a:	d03c      	beq.n	8005396 <HAL_TIM_ConfigClockSource+0xfa>
 800531c:	2b50      	cmp	r3, #80	@ 0x50
 800531e:	d873      	bhi.n	8005408 <HAL_TIM_ConfigClockSource+0x16c>
 8005320:	2b40      	cmp	r3, #64	@ 0x40
 8005322:	d058      	beq.n	80053d6 <HAL_TIM_ConfigClockSource+0x13a>
 8005324:	2b40      	cmp	r3, #64	@ 0x40
 8005326:	d86f      	bhi.n	8005408 <HAL_TIM_ConfigClockSource+0x16c>
 8005328:	2b30      	cmp	r3, #48	@ 0x30
 800532a:	d064      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0x15a>
 800532c:	2b30      	cmp	r3, #48	@ 0x30
 800532e:	d86b      	bhi.n	8005408 <HAL_TIM_ConfigClockSource+0x16c>
 8005330:	2b20      	cmp	r3, #32
 8005332:	d060      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005334:	2b20      	cmp	r3, #32
 8005336:	d867      	bhi.n	8005408 <HAL_TIM_ConfigClockSource+0x16c>
 8005338:	2b00      	cmp	r3, #0
 800533a:	d05c      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0x15a>
 800533c:	2b10      	cmp	r3, #16
 800533e:	d05a      	beq.n	80053f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005340:	e062      	b.n	8005408 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005352:	f000 f9a4 	bl	800569e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005364:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	609a      	str	r2, [r3, #8]
      break;
 800536e:	e04f      	b.n	8005410 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005380:	f000 f98d 	bl	800569e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689a      	ldr	r2, [r3, #8]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005392:	609a      	str	r2, [r3, #8]
      break;
 8005394:	e03c      	b.n	8005410 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a2:	461a      	mov	r2, r3
 80053a4:	f000 f904 	bl	80055b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2150      	movs	r1, #80	@ 0x50
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 f95b 	bl	800566a <TIM_ITRx_SetConfig>
      break;
 80053b4:	e02c      	b.n	8005410 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053c2:	461a      	mov	r2, r3
 80053c4:	f000 f922 	bl	800560c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2160      	movs	r1, #96	@ 0x60
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 f94b 	bl	800566a <TIM_ITRx_SetConfig>
      break;
 80053d4:	e01c      	b.n	8005410 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e2:	461a      	mov	r2, r3
 80053e4:	f000 f8e4 	bl	80055b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2140      	movs	r1, #64	@ 0x40
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 f93b 	bl	800566a <TIM_ITRx_SetConfig>
      break;
 80053f4:	e00c      	b.n	8005410 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4619      	mov	r1, r3
 8005400:	4610      	mov	r0, r2
 8005402:	f000 f932 	bl	800566a <TIM_ITRx_SetConfig>
      break;
 8005406:	e003      	b.n	8005410 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	73fb      	strb	r3, [r7, #15]
      break;
 800540c:	e000      	b.n	8005410 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800540e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005420:	7bfb      	ldrb	r3, [r7, #15]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	bc80      	pop	{r7}
 800543a:	4770      	bx	lr

0800543c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	bc80      	pop	{r7}
 800544c:	4770      	bx	lr

0800544e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr

08005460 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	bc80      	pop	{r7}
 8005470:	4770      	bx	lr
	...

08005474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a3f      	ldr	r2, [pc, #252]	@ (8005584 <TIM_Base_SetConfig+0x110>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d013      	beq.n	80054b4 <TIM_Base_SetConfig+0x40>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005492:	d00f      	beq.n	80054b4 <TIM_Base_SetConfig+0x40>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a3c      	ldr	r2, [pc, #240]	@ (8005588 <TIM_Base_SetConfig+0x114>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00b      	beq.n	80054b4 <TIM_Base_SetConfig+0x40>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a3b      	ldr	r2, [pc, #236]	@ (800558c <TIM_Base_SetConfig+0x118>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d007      	beq.n	80054b4 <TIM_Base_SetConfig+0x40>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a3a      	ldr	r2, [pc, #232]	@ (8005590 <TIM_Base_SetConfig+0x11c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <TIM_Base_SetConfig+0x40>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a39      	ldr	r2, [pc, #228]	@ (8005594 <TIM_Base_SetConfig+0x120>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d108      	bne.n	80054c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a2e      	ldr	r2, [pc, #184]	@ (8005584 <TIM_Base_SetConfig+0x110>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d02b      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054d4:	d027      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a2b      	ldr	r2, [pc, #172]	@ (8005588 <TIM_Base_SetConfig+0x114>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d023      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a2a      	ldr	r2, [pc, #168]	@ (800558c <TIM_Base_SetConfig+0x118>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d01f      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a29      	ldr	r2, [pc, #164]	@ (8005590 <TIM_Base_SetConfig+0x11c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d01b      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a28      	ldr	r2, [pc, #160]	@ (8005594 <TIM_Base_SetConfig+0x120>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d017      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a27      	ldr	r2, [pc, #156]	@ (8005598 <TIM_Base_SetConfig+0x124>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d013      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a26      	ldr	r2, [pc, #152]	@ (800559c <TIM_Base_SetConfig+0x128>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00f      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a25      	ldr	r2, [pc, #148]	@ (80055a0 <TIM_Base_SetConfig+0x12c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00b      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a24      	ldr	r2, [pc, #144]	@ (80055a4 <TIM_Base_SetConfig+0x130>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d007      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a23      	ldr	r2, [pc, #140]	@ (80055a8 <TIM_Base_SetConfig+0x134>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d003      	beq.n	8005526 <TIM_Base_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a22      	ldr	r2, [pc, #136]	@ (80055ac <TIM_Base_SetConfig+0x138>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d108      	bne.n	8005538 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800552c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a09      	ldr	r2, [pc, #36]	@ (8005584 <TIM_Base_SetConfig+0x110>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d003      	beq.n	800556c <TIM_Base_SetConfig+0xf8>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a0b      	ldr	r2, [pc, #44]	@ (8005594 <TIM_Base_SetConfig+0x120>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d103      	bne.n	8005574 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	615a      	str	r2, [r3, #20]
}
 800557a:	bf00      	nop
 800557c:	3714      	adds	r7, #20
 800557e:	46bd      	mov	sp, r7
 8005580:	bc80      	pop	{r7}
 8005582:	4770      	bx	lr
 8005584:	40010000 	.word	0x40010000
 8005588:	40000400 	.word	0x40000400
 800558c:	40000800 	.word	0x40000800
 8005590:	40000c00 	.word	0x40000c00
 8005594:	40010400 	.word	0x40010400
 8005598:	40014000 	.word	0x40014000
 800559c:	40014400 	.word	0x40014400
 80055a0:	40014800 	.word	0x40014800
 80055a4:	40001800 	.word	0x40001800
 80055a8:	40001c00 	.word	0x40001c00
 80055ac:	40002000 	.word	0x40002000

080055b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	f023 0201 	bic.w	r2, r3, #1
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f023 030a 	bic.w	r3, r3, #10
 80055ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	621a      	str	r2, [r3, #32]
}
 8005602:	bf00      	nop
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	bc80      	pop	{r7}
 800560a:	4770      	bx	lr

0800560c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	f023 0210 	bic.w	r2, r3, #16
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	031b      	lsls	r3, r3, #12
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005648:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	4313      	orrs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	621a      	str	r2, [r3, #32]
}
 8005660:	bf00      	nop
 8005662:	371c      	adds	r7, #28
 8005664:	46bd      	mov	sp, r7
 8005666:	bc80      	pop	{r7}
 8005668:	4770      	bx	lr

0800566a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800566a:	b480      	push	{r7}
 800566c:	b085      	sub	sp, #20
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005680:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	f043 0307 	orr.w	r3, r3, #7
 800568c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	609a      	str	r2, [r3, #8]
}
 8005694:	bf00      	nop
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	bc80      	pop	{r7}
 800569c:	4770      	bx	lr

0800569e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800569e:	b480      	push	{r7}
 80056a0:	b087      	sub	sp, #28
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	607a      	str	r2, [r7, #4]
 80056aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056b8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	021a      	lsls	r2, r3, #8
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	431a      	orrs	r2, r3
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	609a      	str	r2, [r3, #8]
}
 80056d2:	bf00      	nop
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr

080056dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e05a      	b.n	80057aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800571a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a20      	ldr	r2, [pc, #128]	@ (80057b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d022      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005740:	d01d      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a1c      	ldr	r2, [pc, #112]	@ (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d018      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a1a      	ldr	r2, [pc, #104]	@ (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d013      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a19      	ldr	r2, [pc, #100]	@ (80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d00e      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a17      	ldr	r2, [pc, #92]	@ (80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d009      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a16      	ldr	r2, [pc, #88]	@ (80057c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d004      	beq.n	800577e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a14      	ldr	r2, [pc, #80]	@ (80057cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d10c      	bne.n	8005798 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005784:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	4313      	orrs	r3, r2
 800578e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3714      	adds	r7, #20
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bc80      	pop	{r7}
 80057b2:	4770      	bx	lr
 80057b4:	40010000 	.word	0x40010000
 80057b8:	40000400 	.word	0x40000400
 80057bc:	40000800 	.word	0x40000800
 80057c0:	40000c00 	.word	0x40000c00
 80057c4:	40010400 	.word	0x40010400
 80057c8:	40014000 	.word	0x40014000
 80057cc:	40001800 	.word	0x40001800

080057d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	bc80      	pop	{r7}
 80057e0:	4770      	bx	lr

080057e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bc80      	pop	{r7}
 80057f2:	4770      	bx	lr

080057f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057f4:	b084      	sub	sp, #16
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	f107 001c 	add.w	r0, r7, #28
 8005802:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005808:	2b01      	cmp	r3, #1
 800580a:	d122      	bne.n	8005852 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005810:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005820:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005836:	2b01      	cmp	r3, #1
 8005838:	d105      	bne.n	8005846 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fa8c 	bl	8005d64 <USB_CoreReset>
 800584c:	4603      	mov	r3, r0
 800584e:	73fb      	strb	r3, [r7, #15]
 8005850:	e010      	b.n	8005874 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fa80 	bl	8005d64 <USB_CoreReset>
 8005864:	4603      	mov	r3, r0
 8005866:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800586c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005876:	2b01      	cmp	r3, #1
 8005878:	d10b      	bne.n	8005892 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f043 0206 	orr.w	r2, r3, #6
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f043 0220 	orr.w	r2, r3, #32
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005892:	7bfb      	ldrb	r3, [r7, #15]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800589e:	b004      	add	sp, #16
 80058a0:	4770      	bx	lr

080058a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f023 0201 	bic.w	r2, r3, #1
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	bc80      	pop	{r7}
 80058c0:	4770      	bx	lr

080058c2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b084      	sub	sp, #16
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
 80058ca:	460b      	mov	r3, r1
 80058cc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058de:	78fb      	ldrb	r3, [r7, #3]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d115      	bne.n	8005910 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058f0:	2001      	movs	r0, #1
 80058f2:	f7fd f803 	bl	80028fc <HAL_Delay>
      ms++;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3301      	adds	r3, #1
 80058fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fa23 	bl	8005d48 <USB_GetMode>
 8005902:	4603      	mov	r3, r0
 8005904:	2b01      	cmp	r3, #1
 8005906:	d01e      	beq.n	8005946 <USB_SetCurrentMode+0x84>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2b31      	cmp	r3, #49	@ 0x31
 800590c:	d9f0      	bls.n	80058f0 <USB_SetCurrentMode+0x2e>
 800590e:	e01a      	b.n	8005946 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d115      	bne.n	8005942 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005922:	2001      	movs	r0, #1
 8005924:	f7fc ffea 	bl	80028fc <HAL_Delay>
      ms++;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	3301      	adds	r3, #1
 800592c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fa0a 	bl	8005d48 <USB_GetMode>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d005      	beq.n	8005946 <USB_SetCurrentMode+0x84>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2b31      	cmp	r3, #49	@ 0x31
 800593e:	d9f0      	bls.n	8005922 <USB_SetCurrentMode+0x60>
 8005940:	e001      	b.n	8005946 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e005      	b.n	8005952 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b32      	cmp	r3, #50	@ 0x32
 800594a:	d101      	bne.n	8005950 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e000      	b.n	8005952 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
	...

0800595c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800595c:	b084      	sub	sp, #16
 800595e:	b580      	push	{r7, lr}
 8005960:	b086      	sub	sp, #24
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800596a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800596e:	2300      	movs	r3, #0
 8005970:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005976:	2300      	movs	r3, #0
 8005978:	613b      	str	r3, [r7, #16]
 800597a:	e009      	b.n	8005990 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	3340      	adds	r3, #64	@ 0x40
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	2200      	movs	r2, #0
 8005988:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	3301      	adds	r3, #1
 800598e:	613b      	str	r3, [r7, #16]
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	2b0e      	cmp	r3, #14
 8005994:	d9f2      	bls.n	800597c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005996:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005998:	2b00      	cmp	r3, #0
 800599a:	d11c      	bne.n	80059d6 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059aa:	f043 0302 	orr.w	r3, r3, #2
 80059ae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c0:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059cc:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80059d4:	e00b      	b.n	80059ee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059da:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059e6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80059f4:	461a      	mov	r2, r3
 80059f6:	2300      	movs	r3, #0
 80059f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d10c      	bne.n	8005a1a <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d104      	bne.n	8005a10 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a06:	2100      	movs	r1, #0
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 f965 	bl	8005cd8 <USB_SetDevSpeed>
 8005a0e:	e008      	b.n	8005a22 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a10:	2101      	movs	r1, #1
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f960 	bl	8005cd8 <USB_SetDevSpeed>
 8005a18:	e003      	b.n	8005a22 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a1a:	2103      	movs	r1, #3
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f95b 	bl	8005cd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a22:	2110      	movs	r1, #16
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f8f3 	bl	8005c10 <USB_FlushTxFifo>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d001      	beq.n	8005a34 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f91f 	bl	8005c78 <USB_FlushRxFifo>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a56:	461a      	mov	r2, r3
 8005a58:	2300      	movs	r3, #0
 8005a5a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a62:	461a      	mov	r2, r3
 8005a64:	2300      	movs	r3, #0
 8005a66:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a68:	2300      	movs	r3, #0
 8005a6a:	613b      	str	r3, [r7, #16]
 8005a6c:	e043      	b.n	8005af6 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a84:	d118      	bne.n	8005ab8 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10a      	bne.n	8005aa2 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a98:	461a      	mov	r2, r3
 8005a9a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	e013      	b.n	8005aca <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ab4:	6013      	str	r3, [r2, #0]
 8005ab6:	e008      	b.n	8005aca <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	2300      	movs	r3, #0
 8005ada:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	015a      	lsls	r2, r3, #5
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ae8:	461a      	mov	r2, r3
 8005aea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005aee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	3301      	adds	r3, #1
 8005af4:	613b      	str	r3, [r7, #16]
 8005af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d3b7      	bcc.n	8005a6e <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005afe:	2300      	movs	r3, #0
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	e043      	b.n	8005b8c <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b1a:	d118      	bne.n	8005b4e <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10a      	bne.n	8005b38 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	015a      	lsls	r2, r3, #5
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4413      	add	r3, r2
 8005b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	e013      	b.n	8005b60 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b44:	461a      	mov	r2, r3
 8005b46:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	e008      	b.n	8005b60 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	2300      	movs	r3, #0
 8005b70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b84:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	613b      	str	r3, [r7, #16]
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d3b7      	bcc.n	8005b04 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ba2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ba6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005bb4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d105      	bne.n	8005bc8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	f043 0210 	orr.w	r2, r3, #16
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	699a      	ldr	r2, [r3, #24]
 8005bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8005c0c <USB_DevInit+0x2b0>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005bd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d005      	beq.n	8005be6 <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	f043 0208 	orr.w	r2, r3, #8
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005be6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d107      	bne.n	8005bfc <USB_DevInit+0x2a0>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bf4:	f043 0304 	orr.w	r3, r3, #4
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3718      	adds	r7, #24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c08:	b004      	add	sp, #16
 8005c0a:	4770      	bx	lr
 8005c0c:	803c3800 	.word	0x803c3800

08005c10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	3301      	adds	r3, #1
 8005c22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4a13      	ldr	r2, [pc, #76]	@ (8005c74 <USB_FlushTxFifo+0x64>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d901      	bls.n	8005c30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e01b      	b.n	8005c68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	daf2      	bge.n	8005c1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	019b      	lsls	r3, r3, #6
 8005c40:	f043 0220 	orr.w	r2, r3, #32
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4a08      	ldr	r2, [pc, #32]	@ (8005c74 <USB_FlushTxFifo+0x64>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d901      	bls.n	8005c5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e006      	b.n	8005c68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b20      	cmp	r3, #32
 8005c64:	d0f0      	beq.n	8005c48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3714      	adds	r7, #20
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bc80      	pop	{r7}
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	00030d40 	.word	0x00030d40

08005c78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	3301      	adds	r3, #1
 8005c88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4a11      	ldr	r2, [pc, #68]	@ (8005cd4 <USB_FlushRxFifo+0x5c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d901      	bls.n	8005c96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e018      	b.n	8005cc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	daf2      	bge.n	8005c84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2210      	movs	r2, #16
 8005ca6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	3301      	adds	r3, #1
 8005cac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	4a08      	ldr	r2, [pc, #32]	@ (8005cd4 <USB_FlushRxFifo+0x5c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d901      	bls.n	8005cba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e006      	b.n	8005cc8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	f003 0310 	and.w	r3, r3, #16
 8005cc2:	2b10      	cmp	r3, #16
 8005cc4:	d0f0      	beq.n	8005ca8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bc80      	pop	{r7}
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	00030d40 	.word	0x00030d40

08005cd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	68f9      	ldr	r1, [r7, #12]
 8005cf4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bc80      	pop	{r7}
 8005d06:	4770      	bx	lr

08005d08 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005d22:	f023 0303 	bic.w	r3, r3, #3
 8005d26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d36:	f043 0302 	orr.w	r3, r3, #2
 8005d3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bc80      	pop	{r7}
 8005d46:	4770      	bx	lr

08005d48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	f003 0301 	and.w	r3, r3, #1
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bc80      	pop	{r7}
 8005d60:	4770      	bx	lr
	...

08005d64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	3301      	adds	r3, #1
 8005d74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4a12      	ldr	r2, [pc, #72]	@ (8005dc4 <USB_CoreReset+0x60>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d901      	bls.n	8005d82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e01b      	b.n	8005dba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	daf2      	bge.n	8005d70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f043 0201 	orr.w	r2, r3, #1
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4a08      	ldr	r2, [pc, #32]	@ (8005dc4 <USB_CoreReset+0x60>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d901      	bls.n	8005dac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e006      	b.n	8005dba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d0f0      	beq.n	8005d9a <USB_CoreReset+0x36>

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bc80      	pop	{r7}
 8005dc2:	4770      	bx	lr
 8005dc4:	00030d40 	.word	0x00030d40

08005dc8 <malloc>:
 8005dc8:	4b02      	ldr	r3, [pc, #8]	@ (8005dd4 <malloc+0xc>)
 8005dca:	4601      	mov	r1, r0
 8005dcc:	6818      	ldr	r0, [r3, #0]
 8005dce:	f000 b82d 	b.w	8005e2c <_malloc_r>
 8005dd2:	bf00      	nop
 8005dd4:	20000078 	.word	0x20000078

08005dd8 <free>:
 8005dd8:	4b02      	ldr	r3, [pc, #8]	@ (8005de4 <free+0xc>)
 8005dda:	4601      	mov	r1, r0
 8005ddc:	6818      	ldr	r0, [r3, #0]
 8005dde:	f001 bd13 	b.w	8007808 <_free_r>
 8005de2:	bf00      	nop
 8005de4:	20000078 	.word	0x20000078

08005de8 <sbrk_aligned>:
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	4e0f      	ldr	r6, [pc, #60]	@ (8005e28 <sbrk_aligned+0x40>)
 8005dec:	460c      	mov	r4, r1
 8005dee:	6831      	ldr	r1, [r6, #0]
 8005df0:	4605      	mov	r5, r0
 8005df2:	b911      	cbnz	r1, 8005dfa <sbrk_aligned+0x12>
 8005df4:	f000 fe5a 	bl	8006aac <_sbrk_r>
 8005df8:	6030      	str	r0, [r6, #0]
 8005dfa:	4621      	mov	r1, r4
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	f000 fe55 	bl	8006aac <_sbrk_r>
 8005e02:	1c43      	adds	r3, r0, #1
 8005e04:	d103      	bne.n	8005e0e <sbrk_aligned+0x26>
 8005e06:	f04f 34ff 	mov.w	r4, #4294967295
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	bd70      	pop	{r4, r5, r6, pc}
 8005e0e:	1cc4      	adds	r4, r0, #3
 8005e10:	f024 0403 	bic.w	r4, r4, #3
 8005e14:	42a0      	cmp	r0, r4
 8005e16:	d0f8      	beq.n	8005e0a <sbrk_aligned+0x22>
 8005e18:	1a21      	subs	r1, r4, r0
 8005e1a:	4628      	mov	r0, r5
 8005e1c:	f000 fe46 	bl	8006aac <_sbrk_r>
 8005e20:	3001      	adds	r0, #1
 8005e22:	d1f2      	bne.n	8005e0a <sbrk_aligned+0x22>
 8005e24:	e7ef      	b.n	8005e06 <sbrk_aligned+0x1e>
 8005e26:	bf00      	nop
 8005e28:	200008e8 	.word	0x200008e8

08005e2c <_malloc_r>:
 8005e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e30:	1ccd      	adds	r5, r1, #3
 8005e32:	f025 0503 	bic.w	r5, r5, #3
 8005e36:	3508      	adds	r5, #8
 8005e38:	2d0c      	cmp	r5, #12
 8005e3a:	bf38      	it	cc
 8005e3c:	250c      	movcc	r5, #12
 8005e3e:	2d00      	cmp	r5, #0
 8005e40:	4606      	mov	r6, r0
 8005e42:	db01      	blt.n	8005e48 <_malloc_r+0x1c>
 8005e44:	42a9      	cmp	r1, r5
 8005e46:	d904      	bls.n	8005e52 <_malloc_r+0x26>
 8005e48:	230c      	movs	r3, #12
 8005e4a:	6033      	str	r3, [r6, #0]
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f28 <_malloc_r+0xfc>
 8005e56:	f000 f869 	bl	8005f2c <__malloc_lock>
 8005e5a:	f8d8 3000 	ldr.w	r3, [r8]
 8005e5e:	461c      	mov	r4, r3
 8005e60:	bb44      	cbnz	r4, 8005eb4 <_malloc_r+0x88>
 8005e62:	4629      	mov	r1, r5
 8005e64:	4630      	mov	r0, r6
 8005e66:	f7ff ffbf 	bl	8005de8 <sbrk_aligned>
 8005e6a:	1c43      	adds	r3, r0, #1
 8005e6c:	4604      	mov	r4, r0
 8005e6e:	d158      	bne.n	8005f22 <_malloc_r+0xf6>
 8005e70:	f8d8 4000 	ldr.w	r4, [r8]
 8005e74:	4627      	mov	r7, r4
 8005e76:	2f00      	cmp	r7, #0
 8005e78:	d143      	bne.n	8005f02 <_malloc_r+0xd6>
 8005e7a:	2c00      	cmp	r4, #0
 8005e7c:	d04b      	beq.n	8005f16 <_malloc_r+0xea>
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	4639      	mov	r1, r7
 8005e82:	4630      	mov	r0, r6
 8005e84:	eb04 0903 	add.w	r9, r4, r3
 8005e88:	f000 fe10 	bl	8006aac <_sbrk_r>
 8005e8c:	4581      	cmp	r9, r0
 8005e8e:	d142      	bne.n	8005f16 <_malloc_r+0xea>
 8005e90:	6821      	ldr	r1, [r4, #0]
 8005e92:	4630      	mov	r0, r6
 8005e94:	1a6d      	subs	r5, r5, r1
 8005e96:	4629      	mov	r1, r5
 8005e98:	f7ff ffa6 	bl	8005de8 <sbrk_aligned>
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	d03a      	beq.n	8005f16 <_malloc_r+0xea>
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	442b      	add	r3, r5
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	f8d8 3000 	ldr.w	r3, [r8]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	bb62      	cbnz	r2, 8005f08 <_malloc_r+0xdc>
 8005eae:	f8c8 7000 	str.w	r7, [r8]
 8005eb2:	e00f      	b.n	8005ed4 <_malloc_r+0xa8>
 8005eb4:	6822      	ldr	r2, [r4, #0]
 8005eb6:	1b52      	subs	r2, r2, r5
 8005eb8:	d420      	bmi.n	8005efc <_malloc_r+0xd0>
 8005eba:	2a0b      	cmp	r2, #11
 8005ebc:	d917      	bls.n	8005eee <_malloc_r+0xc2>
 8005ebe:	1961      	adds	r1, r4, r5
 8005ec0:	42a3      	cmp	r3, r4
 8005ec2:	6025      	str	r5, [r4, #0]
 8005ec4:	bf18      	it	ne
 8005ec6:	6059      	strne	r1, [r3, #4]
 8005ec8:	6863      	ldr	r3, [r4, #4]
 8005eca:	bf08      	it	eq
 8005ecc:	f8c8 1000 	streq.w	r1, [r8]
 8005ed0:	5162      	str	r2, [r4, r5]
 8005ed2:	604b      	str	r3, [r1, #4]
 8005ed4:	4630      	mov	r0, r6
 8005ed6:	f000 f82f 	bl	8005f38 <__malloc_unlock>
 8005eda:	f104 000b 	add.w	r0, r4, #11
 8005ede:	1d23      	adds	r3, r4, #4
 8005ee0:	f020 0007 	bic.w	r0, r0, #7
 8005ee4:	1ac2      	subs	r2, r0, r3
 8005ee6:	bf1c      	itt	ne
 8005ee8:	1a1b      	subne	r3, r3, r0
 8005eea:	50a3      	strne	r3, [r4, r2]
 8005eec:	e7af      	b.n	8005e4e <_malloc_r+0x22>
 8005eee:	6862      	ldr	r2, [r4, #4]
 8005ef0:	42a3      	cmp	r3, r4
 8005ef2:	bf0c      	ite	eq
 8005ef4:	f8c8 2000 	streq.w	r2, [r8]
 8005ef8:	605a      	strne	r2, [r3, #4]
 8005efa:	e7eb      	b.n	8005ed4 <_malloc_r+0xa8>
 8005efc:	4623      	mov	r3, r4
 8005efe:	6864      	ldr	r4, [r4, #4]
 8005f00:	e7ae      	b.n	8005e60 <_malloc_r+0x34>
 8005f02:	463c      	mov	r4, r7
 8005f04:	687f      	ldr	r7, [r7, #4]
 8005f06:	e7b6      	b.n	8005e76 <_malloc_r+0x4a>
 8005f08:	461a      	mov	r2, r3
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	42a3      	cmp	r3, r4
 8005f0e:	d1fb      	bne.n	8005f08 <_malloc_r+0xdc>
 8005f10:	2300      	movs	r3, #0
 8005f12:	6053      	str	r3, [r2, #4]
 8005f14:	e7de      	b.n	8005ed4 <_malloc_r+0xa8>
 8005f16:	230c      	movs	r3, #12
 8005f18:	4630      	mov	r0, r6
 8005f1a:	6033      	str	r3, [r6, #0]
 8005f1c:	f000 f80c 	bl	8005f38 <__malloc_unlock>
 8005f20:	e794      	b.n	8005e4c <_malloc_r+0x20>
 8005f22:	6005      	str	r5, [r0, #0]
 8005f24:	e7d6      	b.n	8005ed4 <_malloc_r+0xa8>
 8005f26:	bf00      	nop
 8005f28:	200008ec 	.word	0x200008ec

08005f2c <__malloc_lock>:
 8005f2c:	4801      	ldr	r0, [pc, #4]	@ (8005f34 <__malloc_lock+0x8>)
 8005f2e:	f000 be0a 	b.w	8006b46 <__retarget_lock_acquire_recursive>
 8005f32:	bf00      	nop
 8005f34:	20000a30 	.word	0x20000a30

08005f38 <__malloc_unlock>:
 8005f38:	4801      	ldr	r0, [pc, #4]	@ (8005f40 <__malloc_unlock+0x8>)
 8005f3a:	f000 be05 	b.w	8006b48 <__retarget_lock_release_recursive>
 8005f3e:	bf00      	nop
 8005f40:	20000a30 	.word	0x20000a30

08005f44 <__cvt>:
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f4a:	461d      	mov	r5, r3
 8005f4c:	bfbb      	ittet	lt
 8005f4e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005f52:	461d      	movlt	r5, r3
 8005f54:	2300      	movge	r3, #0
 8005f56:	232d      	movlt	r3, #45	@ 0x2d
 8005f58:	b088      	sub	sp, #32
 8005f5a:	4614      	mov	r4, r2
 8005f5c:	bfb8      	it	lt
 8005f5e:	4614      	movlt	r4, r2
 8005f60:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005f62:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005f64:	7013      	strb	r3, [r2, #0]
 8005f66:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f68:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005f6c:	f023 0820 	bic.w	r8, r3, #32
 8005f70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f74:	d005      	beq.n	8005f82 <__cvt+0x3e>
 8005f76:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005f7a:	d100      	bne.n	8005f7e <__cvt+0x3a>
 8005f7c:	3601      	adds	r6, #1
 8005f7e:	2302      	movs	r3, #2
 8005f80:	e000      	b.n	8005f84 <__cvt+0x40>
 8005f82:	2303      	movs	r3, #3
 8005f84:	aa07      	add	r2, sp, #28
 8005f86:	9204      	str	r2, [sp, #16]
 8005f88:	aa06      	add	r2, sp, #24
 8005f8a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005f8e:	e9cd 3600 	strd	r3, r6, [sp]
 8005f92:	4622      	mov	r2, r4
 8005f94:	462b      	mov	r3, r5
 8005f96:	f000 fe6f 	bl	8006c78 <_dtoa_r>
 8005f9a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005f9e:	4607      	mov	r7, r0
 8005fa0:	d119      	bne.n	8005fd6 <__cvt+0x92>
 8005fa2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005fa4:	07db      	lsls	r3, r3, #31
 8005fa6:	d50e      	bpl.n	8005fc6 <__cvt+0x82>
 8005fa8:	eb00 0906 	add.w	r9, r0, r6
 8005fac:	2200      	movs	r2, #0
 8005fae:	2300      	movs	r3, #0
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	4629      	mov	r1, r5
 8005fb4:	f7fa fd34 	bl	8000a20 <__aeabi_dcmpeq>
 8005fb8:	b108      	cbz	r0, 8005fbe <__cvt+0x7a>
 8005fba:	f8cd 901c 	str.w	r9, [sp, #28]
 8005fbe:	2230      	movs	r2, #48	@ 0x30
 8005fc0:	9b07      	ldr	r3, [sp, #28]
 8005fc2:	454b      	cmp	r3, r9
 8005fc4:	d31e      	bcc.n	8006004 <__cvt+0xc0>
 8005fc6:	4638      	mov	r0, r7
 8005fc8:	9b07      	ldr	r3, [sp, #28]
 8005fca:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005fcc:	1bdb      	subs	r3, r3, r7
 8005fce:	6013      	str	r3, [r2, #0]
 8005fd0:	b008      	add	sp, #32
 8005fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005fda:	eb00 0906 	add.w	r9, r0, r6
 8005fde:	d1e5      	bne.n	8005fac <__cvt+0x68>
 8005fe0:	7803      	ldrb	r3, [r0, #0]
 8005fe2:	2b30      	cmp	r3, #48	@ 0x30
 8005fe4:	d10a      	bne.n	8005ffc <__cvt+0xb8>
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	2300      	movs	r3, #0
 8005fea:	4620      	mov	r0, r4
 8005fec:	4629      	mov	r1, r5
 8005fee:	f7fa fd17 	bl	8000a20 <__aeabi_dcmpeq>
 8005ff2:	b918      	cbnz	r0, 8005ffc <__cvt+0xb8>
 8005ff4:	f1c6 0601 	rsb	r6, r6, #1
 8005ff8:	f8ca 6000 	str.w	r6, [sl]
 8005ffc:	f8da 3000 	ldr.w	r3, [sl]
 8006000:	4499      	add	r9, r3
 8006002:	e7d3      	b.n	8005fac <__cvt+0x68>
 8006004:	1c59      	adds	r1, r3, #1
 8006006:	9107      	str	r1, [sp, #28]
 8006008:	701a      	strb	r2, [r3, #0]
 800600a:	e7d9      	b.n	8005fc0 <__cvt+0x7c>

0800600c <__exponent>:
 800600c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800600e:	2900      	cmp	r1, #0
 8006010:	bfb6      	itet	lt
 8006012:	232d      	movlt	r3, #45	@ 0x2d
 8006014:	232b      	movge	r3, #43	@ 0x2b
 8006016:	4249      	neglt	r1, r1
 8006018:	2909      	cmp	r1, #9
 800601a:	7002      	strb	r2, [r0, #0]
 800601c:	7043      	strb	r3, [r0, #1]
 800601e:	dd29      	ble.n	8006074 <__exponent+0x68>
 8006020:	f10d 0307 	add.w	r3, sp, #7
 8006024:	461d      	mov	r5, r3
 8006026:	270a      	movs	r7, #10
 8006028:	fbb1 f6f7 	udiv	r6, r1, r7
 800602c:	461a      	mov	r2, r3
 800602e:	fb07 1416 	mls	r4, r7, r6, r1
 8006032:	3430      	adds	r4, #48	@ 0x30
 8006034:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006038:	460c      	mov	r4, r1
 800603a:	2c63      	cmp	r4, #99	@ 0x63
 800603c:	4631      	mov	r1, r6
 800603e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006042:	dcf1      	bgt.n	8006028 <__exponent+0x1c>
 8006044:	3130      	adds	r1, #48	@ 0x30
 8006046:	1e94      	subs	r4, r2, #2
 8006048:	f803 1c01 	strb.w	r1, [r3, #-1]
 800604c:	4623      	mov	r3, r4
 800604e:	1c41      	adds	r1, r0, #1
 8006050:	42ab      	cmp	r3, r5
 8006052:	d30a      	bcc.n	800606a <__exponent+0x5e>
 8006054:	f10d 0309 	add.w	r3, sp, #9
 8006058:	1a9b      	subs	r3, r3, r2
 800605a:	42ac      	cmp	r4, r5
 800605c:	bf88      	it	hi
 800605e:	2300      	movhi	r3, #0
 8006060:	3302      	adds	r3, #2
 8006062:	4403      	add	r3, r0
 8006064:	1a18      	subs	r0, r3, r0
 8006066:	b003      	add	sp, #12
 8006068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800606a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800606e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006072:	e7ed      	b.n	8006050 <__exponent+0x44>
 8006074:	2330      	movs	r3, #48	@ 0x30
 8006076:	3130      	adds	r1, #48	@ 0x30
 8006078:	7083      	strb	r3, [r0, #2]
 800607a:	70c1      	strb	r1, [r0, #3]
 800607c:	1d03      	adds	r3, r0, #4
 800607e:	e7f1      	b.n	8006064 <__exponent+0x58>

08006080 <_printf_float>:
 8006080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006084:	b091      	sub	sp, #68	@ 0x44
 8006086:	460c      	mov	r4, r1
 8006088:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800608c:	4616      	mov	r6, r2
 800608e:	461f      	mov	r7, r3
 8006090:	4605      	mov	r5, r0
 8006092:	f000 fcd3 	bl	8006a3c <_localeconv_r>
 8006096:	6803      	ldr	r3, [r0, #0]
 8006098:	4618      	mov	r0, r3
 800609a:	9308      	str	r3, [sp, #32]
 800609c:	f7fa f894 	bl	80001c8 <strlen>
 80060a0:	2300      	movs	r3, #0
 80060a2:	930e      	str	r3, [sp, #56]	@ 0x38
 80060a4:	f8d8 3000 	ldr.w	r3, [r8]
 80060a8:	9009      	str	r0, [sp, #36]	@ 0x24
 80060aa:	3307      	adds	r3, #7
 80060ac:	f023 0307 	bic.w	r3, r3, #7
 80060b0:	f103 0208 	add.w	r2, r3, #8
 80060b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80060b8:	f8d4 b000 	ldr.w	fp, [r4]
 80060bc:	f8c8 2000 	str.w	r2, [r8]
 80060c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80060c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060ca:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80060ce:	f04f 32ff 	mov.w	r2, #4294967295
 80060d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80060d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80060da:	4b9c      	ldr	r3, [pc, #624]	@ (800634c <_printf_float+0x2cc>)
 80060dc:	f7fa fcd2 	bl	8000a84 <__aeabi_dcmpun>
 80060e0:	bb70      	cbnz	r0, 8006140 <_printf_float+0xc0>
 80060e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80060e6:	f04f 32ff 	mov.w	r2, #4294967295
 80060ea:	4b98      	ldr	r3, [pc, #608]	@ (800634c <_printf_float+0x2cc>)
 80060ec:	f7fa fcac 	bl	8000a48 <__aeabi_dcmple>
 80060f0:	bb30      	cbnz	r0, 8006140 <_printf_float+0xc0>
 80060f2:	2200      	movs	r2, #0
 80060f4:	2300      	movs	r3, #0
 80060f6:	4640      	mov	r0, r8
 80060f8:	4649      	mov	r1, r9
 80060fa:	f7fa fc9b 	bl	8000a34 <__aeabi_dcmplt>
 80060fe:	b110      	cbz	r0, 8006106 <_printf_float+0x86>
 8006100:	232d      	movs	r3, #45	@ 0x2d
 8006102:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006106:	4a92      	ldr	r2, [pc, #584]	@ (8006350 <_printf_float+0x2d0>)
 8006108:	4b92      	ldr	r3, [pc, #584]	@ (8006354 <_printf_float+0x2d4>)
 800610a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800610e:	bf94      	ite	ls
 8006110:	4690      	movls	r8, r2
 8006112:	4698      	movhi	r8, r3
 8006114:	2303      	movs	r3, #3
 8006116:	f04f 0900 	mov.w	r9, #0
 800611a:	6123      	str	r3, [r4, #16]
 800611c:	f02b 0304 	bic.w	r3, fp, #4
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	4633      	mov	r3, r6
 8006124:	4621      	mov	r1, r4
 8006126:	4628      	mov	r0, r5
 8006128:	9700      	str	r7, [sp, #0]
 800612a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800612c:	f000 f9d4 	bl	80064d8 <_printf_common>
 8006130:	3001      	adds	r0, #1
 8006132:	f040 8090 	bne.w	8006256 <_printf_float+0x1d6>
 8006136:	f04f 30ff 	mov.w	r0, #4294967295
 800613a:	b011      	add	sp, #68	@ 0x44
 800613c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006140:	4642      	mov	r2, r8
 8006142:	464b      	mov	r3, r9
 8006144:	4640      	mov	r0, r8
 8006146:	4649      	mov	r1, r9
 8006148:	f7fa fc9c 	bl	8000a84 <__aeabi_dcmpun>
 800614c:	b148      	cbz	r0, 8006162 <_printf_float+0xe2>
 800614e:	464b      	mov	r3, r9
 8006150:	2b00      	cmp	r3, #0
 8006152:	bfb8      	it	lt
 8006154:	232d      	movlt	r3, #45	@ 0x2d
 8006156:	4a80      	ldr	r2, [pc, #512]	@ (8006358 <_printf_float+0x2d8>)
 8006158:	bfb8      	it	lt
 800615a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800615e:	4b7f      	ldr	r3, [pc, #508]	@ (800635c <_printf_float+0x2dc>)
 8006160:	e7d3      	b.n	800610a <_printf_float+0x8a>
 8006162:	6863      	ldr	r3, [r4, #4]
 8006164:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006168:	1c5a      	adds	r2, r3, #1
 800616a:	d13f      	bne.n	80061ec <_printf_float+0x16c>
 800616c:	2306      	movs	r3, #6
 800616e:	6063      	str	r3, [r4, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006176:	6023      	str	r3, [r4, #0]
 8006178:	9206      	str	r2, [sp, #24]
 800617a:	aa0e      	add	r2, sp, #56	@ 0x38
 800617c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006180:	aa0d      	add	r2, sp, #52	@ 0x34
 8006182:	9203      	str	r2, [sp, #12]
 8006184:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006188:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800618c:	6863      	ldr	r3, [r4, #4]
 800618e:	4642      	mov	r2, r8
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	4628      	mov	r0, r5
 8006194:	464b      	mov	r3, r9
 8006196:	910a      	str	r1, [sp, #40]	@ 0x28
 8006198:	f7ff fed4 	bl	8005f44 <__cvt>
 800619c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800619e:	4680      	mov	r8, r0
 80061a0:	2947      	cmp	r1, #71	@ 0x47
 80061a2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80061a4:	d128      	bne.n	80061f8 <_printf_float+0x178>
 80061a6:	1cc8      	adds	r0, r1, #3
 80061a8:	db02      	blt.n	80061b0 <_printf_float+0x130>
 80061aa:	6863      	ldr	r3, [r4, #4]
 80061ac:	4299      	cmp	r1, r3
 80061ae:	dd40      	ble.n	8006232 <_printf_float+0x1b2>
 80061b0:	f1aa 0a02 	sub.w	sl, sl, #2
 80061b4:	fa5f fa8a 	uxtb.w	sl, sl
 80061b8:	4652      	mov	r2, sl
 80061ba:	3901      	subs	r1, #1
 80061bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80061c0:	910d      	str	r1, [sp, #52]	@ 0x34
 80061c2:	f7ff ff23 	bl	800600c <__exponent>
 80061c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061c8:	4681      	mov	r9, r0
 80061ca:	1813      	adds	r3, r2, r0
 80061cc:	2a01      	cmp	r2, #1
 80061ce:	6123      	str	r3, [r4, #16]
 80061d0:	dc02      	bgt.n	80061d8 <_printf_float+0x158>
 80061d2:	6822      	ldr	r2, [r4, #0]
 80061d4:	07d2      	lsls	r2, r2, #31
 80061d6:	d501      	bpl.n	80061dc <_printf_float+0x15c>
 80061d8:	3301      	adds	r3, #1
 80061da:	6123      	str	r3, [r4, #16]
 80061dc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d09e      	beq.n	8006122 <_printf_float+0xa2>
 80061e4:	232d      	movs	r3, #45	@ 0x2d
 80061e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061ea:	e79a      	b.n	8006122 <_printf_float+0xa2>
 80061ec:	2947      	cmp	r1, #71	@ 0x47
 80061ee:	d1bf      	bne.n	8006170 <_printf_float+0xf0>
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1bd      	bne.n	8006170 <_printf_float+0xf0>
 80061f4:	2301      	movs	r3, #1
 80061f6:	e7ba      	b.n	800616e <_printf_float+0xee>
 80061f8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80061fc:	d9dc      	bls.n	80061b8 <_printf_float+0x138>
 80061fe:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006202:	d118      	bne.n	8006236 <_printf_float+0x1b6>
 8006204:	2900      	cmp	r1, #0
 8006206:	6863      	ldr	r3, [r4, #4]
 8006208:	dd0b      	ble.n	8006222 <_printf_float+0x1a2>
 800620a:	6121      	str	r1, [r4, #16]
 800620c:	b913      	cbnz	r3, 8006214 <_printf_float+0x194>
 800620e:	6822      	ldr	r2, [r4, #0]
 8006210:	07d0      	lsls	r0, r2, #31
 8006212:	d502      	bpl.n	800621a <_printf_float+0x19a>
 8006214:	3301      	adds	r3, #1
 8006216:	440b      	add	r3, r1
 8006218:	6123      	str	r3, [r4, #16]
 800621a:	f04f 0900 	mov.w	r9, #0
 800621e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006220:	e7dc      	b.n	80061dc <_printf_float+0x15c>
 8006222:	b913      	cbnz	r3, 800622a <_printf_float+0x1aa>
 8006224:	6822      	ldr	r2, [r4, #0]
 8006226:	07d2      	lsls	r2, r2, #31
 8006228:	d501      	bpl.n	800622e <_printf_float+0x1ae>
 800622a:	3302      	adds	r3, #2
 800622c:	e7f4      	b.n	8006218 <_printf_float+0x198>
 800622e:	2301      	movs	r3, #1
 8006230:	e7f2      	b.n	8006218 <_printf_float+0x198>
 8006232:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006236:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006238:	4299      	cmp	r1, r3
 800623a:	db05      	blt.n	8006248 <_printf_float+0x1c8>
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	6121      	str	r1, [r4, #16]
 8006240:	07d8      	lsls	r0, r3, #31
 8006242:	d5ea      	bpl.n	800621a <_printf_float+0x19a>
 8006244:	1c4b      	adds	r3, r1, #1
 8006246:	e7e7      	b.n	8006218 <_printf_float+0x198>
 8006248:	2900      	cmp	r1, #0
 800624a:	bfcc      	ite	gt
 800624c:	2201      	movgt	r2, #1
 800624e:	f1c1 0202 	rsble	r2, r1, #2
 8006252:	4413      	add	r3, r2
 8006254:	e7e0      	b.n	8006218 <_printf_float+0x198>
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	055a      	lsls	r2, r3, #21
 800625a:	d407      	bmi.n	800626c <_printf_float+0x1ec>
 800625c:	6923      	ldr	r3, [r4, #16]
 800625e:	4642      	mov	r2, r8
 8006260:	4631      	mov	r1, r6
 8006262:	4628      	mov	r0, r5
 8006264:	47b8      	blx	r7
 8006266:	3001      	adds	r0, #1
 8006268:	d12b      	bne.n	80062c2 <_printf_float+0x242>
 800626a:	e764      	b.n	8006136 <_printf_float+0xb6>
 800626c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006270:	f240 80dc 	bls.w	800642c <_printf_float+0x3ac>
 8006274:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006278:	2200      	movs	r2, #0
 800627a:	2300      	movs	r3, #0
 800627c:	f7fa fbd0 	bl	8000a20 <__aeabi_dcmpeq>
 8006280:	2800      	cmp	r0, #0
 8006282:	d033      	beq.n	80062ec <_printf_float+0x26c>
 8006284:	2301      	movs	r3, #1
 8006286:	4631      	mov	r1, r6
 8006288:	4628      	mov	r0, r5
 800628a:	4a35      	ldr	r2, [pc, #212]	@ (8006360 <_printf_float+0x2e0>)
 800628c:	47b8      	blx	r7
 800628e:	3001      	adds	r0, #1
 8006290:	f43f af51 	beq.w	8006136 <_printf_float+0xb6>
 8006294:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006298:	4543      	cmp	r3, r8
 800629a:	db02      	blt.n	80062a2 <_printf_float+0x222>
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	07d8      	lsls	r0, r3, #31
 80062a0:	d50f      	bpl.n	80062c2 <_printf_float+0x242>
 80062a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80062a6:	4631      	mov	r1, r6
 80062a8:	4628      	mov	r0, r5
 80062aa:	47b8      	blx	r7
 80062ac:	3001      	adds	r0, #1
 80062ae:	f43f af42 	beq.w	8006136 <_printf_float+0xb6>
 80062b2:	f04f 0900 	mov.w	r9, #0
 80062b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80062ba:	f104 0a1a 	add.w	sl, r4, #26
 80062be:	45c8      	cmp	r8, r9
 80062c0:	dc09      	bgt.n	80062d6 <_printf_float+0x256>
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	079b      	lsls	r3, r3, #30
 80062c6:	f100 8102 	bmi.w	80064ce <_printf_float+0x44e>
 80062ca:	68e0      	ldr	r0, [r4, #12]
 80062cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062ce:	4298      	cmp	r0, r3
 80062d0:	bfb8      	it	lt
 80062d2:	4618      	movlt	r0, r3
 80062d4:	e731      	b.n	800613a <_printf_float+0xba>
 80062d6:	2301      	movs	r3, #1
 80062d8:	4652      	mov	r2, sl
 80062da:	4631      	mov	r1, r6
 80062dc:	4628      	mov	r0, r5
 80062de:	47b8      	blx	r7
 80062e0:	3001      	adds	r0, #1
 80062e2:	f43f af28 	beq.w	8006136 <_printf_float+0xb6>
 80062e6:	f109 0901 	add.w	r9, r9, #1
 80062ea:	e7e8      	b.n	80062be <_printf_float+0x23e>
 80062ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	dc38      	bgt.n	8006364 <_printf_float+0x2e4>
 80062f2:	2301      	movs	r3, #1
 80062f4:	4631      	mov	r1, r6
 80062f6:	4628      	mov	r0, r5
 80062f8:	4a19      	ldr	r2, [pc, #100]	@ (8006360 <_printf_float+0x2e0>)
 80062fa:	47b8      	blx	r7
 80062fc:	3001      	adds	r0, #1
 80062fe:	f43f af1a 	beq.w	8006136 <_printf_float+0xb6>
 8006302:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006306:	ea59 0303 	orrs.w	r3, r9, r3
 800630a:	d102      	bne.n	8006312 <_printf_float+0x292>
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	07d9      	lsls	r1, r3, #31
 8006310:	d5d7      	bpl.n	80062c2 <_printf_float+0x242>
 8006312:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006316:	4631      	mov	r1, r6
 8006318:	4628      	mov	r0, r5
 800631a:	47b8      	blx	r7
 800631c:	3001      	adds	r0, #1
 800631e:	f43f af0a 	beq.w	8006136 <_printf_float+0xb6>
 8006322:	f04f 0a00 	mov.w	sl, #0
 8006326:	f104 0b1a 	add.w	fp, r4, #26
 800632a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800632c:	425b      	negs	r3, r3
 800632e:	4553      	cmp	r3, sl
 8006330:	dc01      	bgt.n	8006336 <_printf_float+0x2b6>
 8006332:	464b      	mov	r3, r9
 8006334:	e793      	b.n	800625e <_printf_float+0x1de>
 8006336:	2301      	movs	r3, #1
 8006338:	465a      	mov	r2, fp
 800633a:	4631      	mov	r1, r6
 800633c:	4628      	mov	r0, r5
 800633e:	47b8      	blx	r7
 8006340:	3001      	adds	r0, #1
 8006342:	f43f aef8 	beq.w	8006136 <_printf_float+0xb6>
 8006346:	f10a 0a01 	add.w	sl, sl, #1
 800634a:	e7ee      	b.n	800632a <_printf_float+0x2aa>
 800634c:	7fefffff 	.word	0x7fefffff
 8006350:	08008f44 	.word	0x08008f44
 8006354:	08008f48 	.word	0x08008f48
 8006358:	08008f4c 	.word	0x08008f4c
 800635c:	08008f50 	.word	0x08008f50
 8006360:	08008f54 	.word	0x08008f54
 8006364:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006366:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800636a:	4553      	cmp	r3, sl
 800636c:	bfa8      	it	ge
 800636e:	4653      	movge	r3, sl
 8006370:	2b00      	cmp	r3, #0
 8006372:	4699      	mov	r9, r3
 8006374:	dc36      	bgt.n	80063e4 <_printf_float+0x364>
 8006376:	f04f 0b00 	mov.w	fp, #0
 800637a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800637e:	f104 021a 	add.w	r2, r4, #26
 8006382:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006384:	930a      	str	r3, [sp, #40]	@ 0x28
 8006386:	eba3 0309 	sub.w	r3, r3, r9
 800638a:	455b      	cmp	r3, fp
 800638c:	dc31      	bgt.n	80063f2 <_printf_float+0x372>
 800638e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006390:	459a      	cmp	sl, r3
 8006392:	dc3a      	bgt.n	800640a <_printf_float+0x38a>
 8006394:	6823      	ldr	r3, [r4, #0]
 8006396:	07da      	lsls	r2, r3, #31
 8006398:	d437      	bmi.n	800640a <_printf_float+0x38a>
 800639a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800639c:	ebaa 0903 	sub.w	r9, sl, r3
 80063a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063a2:	ebaa 0303 	sub.w	r3, sl, r3
 80063a6:	4599      	cmp	r9, r3
 80063a8:	bfa8      	it	ge
 80063aa:	4699      	movge	r9, r3
 80063ac:	f1b9 0f00 	cmp.w	r9, #0
 80063b0:	dc33      	bgt.n	800641a <_printf_float+0x39a>
 80063b2:	f04f 0800 	mov.w	r8, #0
 80063b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063ba:	f104 0b1a 	add.w	fp, r4, #26
 80063be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80063c0:	ebaa 0303 	sub.w	r3, sl, r3
 80063c4:	eba3 0309 	sub.w	r3, r3, r9
 80063c8:	4543      	cmp	r3, r8
 80063ca:	f77f af7a 	ble.w	80062c2 <_printf_float+0x242>
 80063ce:	2301      	movs	r3, #1
 80063d0:	465a      	mov	r2, fp
 80063d2:	4631      	mov	r1, r6
 80063d4:	4628      	mov	r0, r5
 80063d6:	47b8      	blx	r7
 80063d8:	3001      	adds	r0, #1
 80063da:	f43f aeac 	beq.w	8006136 <_printf_float+0xb6>
 80063de:	f108 0801 	add.w	r8, r8, #1
 80063e2:	e7ec      	b.n	80063be <_printf_float+0x33e>
 80063e4:	4642      	mov	r2, r8
 80063e6:	4631      	mov	r1, r6
 80063e8:	4628      	mov	r0, r5
 80063ea:	47b8      	blx	r7
 80063ec:	3001      	adds	r0, #1
 80063ee:	d1c2      	bne.n	8006376 <_printf_float+0x2f6>
 80063f0:	e6a1      	b.n	8006136 <_printf_float+0xb6>
 80063f2:	2301      	movs	r3, #1
 80063f4:	4631      	mov	r1, r6
 80063f6:	4628      	mov	r0, r5
 80063f8:	920a      	str	r2, [sp, #40]	@ 0x28
 80063fa:	47b8      	blx	r7
 80063fc:	3001      	adds	r0, #1
 80063fe:	f43f ae9a 	beq.w	8006136 <_printf_float+0xb6>
 8006402:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006404:	f10b 0b01 	add.w	fp, fp, #1
 8006408:	e7bb      	b.n	8006382 <_printf_float+0x302>
 800640a:	4631      	mov	r1, r6
 800640c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006410:	4628      	mov	r0, r5
 8006412:	47b8      	blx	r7
 8006414:	3001      	adds	r0, #1
 8006416:	d1c0      	bne.n	800639a <_printf_float+0x31a>
 8006418:	e68d      	b.n	8006136 <_printf_float+0xb6>
 800641a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800641c:	464b      	mov	r3, r9
 800641e:	4631      	mov	r1, r6
 8006420:	4628      	mov	r0, r5
 8006422:	4442      	add	r2, r8
 8006424:	47b8      	blx	r7
 8006426:	3001      	adds	r0, #1
 8006428:	d1c3      	bne.n	80063b2 <_printf_float+0x332>
 800642a:	e684      	b.n	8006136 <_printf_float+0xb6>
 800642c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006430:	f1ba 0f01 	cmp.w	sl, #1
 8006434:	dc01      	bgt.n	800643a <_printf_float+0x3ba>
 8006436:	07db      	lsls	r3, r3, #31
 8006438:	d536      	bpl.n	80064a8 <_printf_float+0x428>
 800643a:	2301      	movs	r3, #1
 800643c:	4642      	mov	r2, r8
 800643e:	4631      	mov	r1, r6
 8006440:	4628      	mov	r0, r5
 8006442:	47b8      	blx	r7
 8006444:	3001      	adds	r0, #1
 8006446:	f43f ae76 	beq.w	8006136 <_printf_float+0xb6>
 800644a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800644e:	4631      	mov	r1, r6
 8006450:	4628      	mov	r0, r5
 8006452:	47b8      	blx	r7
 8006454:	3001      	adds	r0, #1
 8006456:	f43f ae6e 	beq.w	8006136 <_printf_float+0xb6>
 800645a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800645e:	2200      	movs	r2, #0
 8006460:	2300      	movs	r3, #0
 8006462:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006466:	f7fa fadb 	bl	8000a20 <__aeabi_dcmpeq>
 800646a:	b9c0      	cbnz	r0, 800649e <_printf_float+0x41e>
 800646c:	4653      	mov	r3, sl
 800646e:	f108 0201 	add.w	r2, r8, #1
 8006472:	4631      	mov	r1, r6
 8006474:	4628      	mov	r0, r5
 8006476:	47b8      	blx	r7
 8006478:	3001      	adds	r0, #1
 800647a:	d10c      	bne.n	8006496 <_printf_float+0x416>
 800647c:	e65b      	b.n	8006136 <_printf_float+0xb6>
 800647e:	2301      	movs	r3, #1
 8006480:	465a      	mov	r2, fp
 8006482:	4631      	mov	r1, r6
 8006484:	4628      	mov	r0, r5
 8006486:	47b8      	blx	r7
 8006488:	3001      	adds	r0, #1
 800648a:	f43f ae54 	beq.w	8006136 <_printf_float+0xb6>
 800648e:	f108 0801 	add.w	r8, r8, #1
 8006492:	45d0      	cmp	r8, sl
 8006494:	dbf3      	blt.n	800647e <_printf_float+0x3fe>
 8006496:	464b      	mov	r3, r9
 8006498:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800649c:	e6e0      	b.n	8006260 <_printf_float+0x1e0>
 800649e:	f04f 0800 	mov.w	r8, #0
 80064a2:	f104 0b1a 	add.w	fp, r4, #26
 80064a6:	e7f4      	b.n	8006492 <_printf_float+0x412>
 80064a8:	2301      	movs	r3, #1
 80064aa:	4642      	mov	r2, r8
 80064ac:	e7e1      	b.n	8006472 <_printf_float+0x3f2>
 80064ae:	2301      	movs	r3, #1
 80064b0:	464a      	mov	r2, r9
 80064b2:	4631      	mov	r1, r6
 80064b4:	4628      	mov	r0, r5
 80064b6:	47b8      	blx	r7
 80064b8:	3001      	adds	r0, #1
 80064ba:	f43f ae3c 	beq.w	8006136 <_printf_float+0xb6>
 80064be:	f108 0801 	add.w	r8, r8, #1
 80064c2:	68e3      	ldr	r3, [r4, #12]
 80064c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80064c6:	1a5b      	subs	r3, r3, r1
 80064c8:	4543      	cmp	r3, r8
 80064ca:	dcf0      	bgt.n	80064ae <_printf_float+0x42e>
 80064cc:	e6fd      	b.n	80062ca <_printf_float+0x24a>
 80064ce:	f04f 0800 	mov.w	r8, #0
 80064d2:	f104 0919 	add.w	r9, r4, #25
 80064d6:	e7f4      	b.n	80064c2 <_printf_float+0x442>

080064d8 <_printf_common>:
 80064d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064dc:	4616      	mov	r6, r2
 80064de:	4698      	mov	r8, r3
 80064e0:	688a      	ldr	r2, [r1, #8]
 80064e2:	690b      	ldr	r3, [r1, #16]
 80064e4:	4607      	mov	r7, r0
 80064e6:	4293      	cmp	r3, r2
 80064e8:	bfb8      	it	lt
 80064ea:	4613      	movlt	r3, r2
 80064ec:	6033      	str	r3, [r6, #0]
 80064ee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064f2:	460c      	mov	r4, r1
 80064f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064f8:	b10a      	cbz	r2, 80064fe <_printf_common+0x26>
 80064fa:	3301      	adds	r3, #1
 80064fc:	6033      	str	r3, [r6, #0]
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	0699      	lsls	r1, r3, #26
 8006502:	bf42      	ittt	mi
 8006504:	6833      	ldrmi	r3, [r6, #0]
 8006506:	3302      	addmi	r3, #2
 8006508:	6033      	strmi	r3, [r6, #0]
 800650a:	6825      	ldr	r5, [r4, #0]
 800650c:	f015 0506 	ands.w	r5, r5, #6
 8006510:	d106      	bne.n	8006520 <_printf_common+0x48>
 8006512:	f104 0a19 	add.w	sl, r4, #25
 8006516:	68e3      	ldr	r3, [r4, #12]
 8006518:	6832      	ldr	r2, [r6, #0]
 800651a:	1a9b      	subs	r3, r3, r2
 800651c:	42ab      	cmp	r3, r5
 800651e:	dc2b      	bgt.n	8006578 <_printf_common+0xa0>
 8006520:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006524:	6822      	ldr	r2, [r4, #0]
 8006526:	3b00      	subs	r3, #0
 8006528:	bf18      	it	ne
 800652a:	2301      	movne	r3, #1
 800652c:	0692      	lsls	r2, r2, #26
 800652e:	d430      	bmi.n	8006592 <_printf_common+0xba>
 8006530:	4641      	mov	r1, r8
 8006532:	4638      	mov	r0, r7
 8006534:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006538:	47c8      	blx	r9
 800653a:	3001      	adds	r0, #1
 800653c:	d023      	beq.n	8006586 <_printf_common+0xae>
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	6922      	ldr	r2, [r4, #16]
 8006542:	f003 0306 	and.w	r3, r3, #6
 8006546:	2b04      	cmp	r3, #4
 8006548:	bf14      	ite	ne
 800654a:	2500      	movne	r5, #0
 800654c:	6833      	ldreq	r3, [r6, #0]
 800654e:	f04f 0600 	mov.w	r6, #0
 8006552:	bf08      	it	eq
 8006554:	68e5      	ldreq	r5, [r4, #12]
 8006556:	f104 041a 	add.w	r4, r4, #26
 800655a:	bf08      	it	eq
 800655c:	1aed      	subeq	r5, r5, r3
 800655e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006562:	bf08      	it	eq
 8006564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006568:	4293      	cmp	r3, r2
 800656a:	bfc4      	itt	gt
 800656c:	1a9b      	subgt	r3, r3, r2
 800656e:	18ed      	addgt	r5, r5, r3
 8006570:	42b5      	cmp	r5, r6
 8006572:	d11a      	bne.n	80065aa <_printf_common+0xd2>
 8006574:	2000      	movs	r0, #0
 8006576:	e008      	b.n	800658a <_printf_common+0xb2>
 8006578:	2301      	movs	r3, #1
 800657a:	4652      	mov	r2, sl
 800657c:	4641      	mov	r1, r8
 800657e:	4638      	mov	r0, r7
 8006580:	47c8      	blx	r9
 8006582:	3001      	adds	r0, #1
 8006584:	d103      	bne.n	800658e <_printf_common+0xb6>
 8006586:	f04f 30ff 	mov.w	r0, #4294967295
 800658a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800658e:	3501      	adds	r5, #1
 8006590:	e7c1      	b.n	8006516 <_printf_common+0x3e>
 8006592:	2030      	movs	r0, #48	@ 0x30
 8006594:	18e1      	adds	r1, r4, r3
 8006596:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065a0:	4422      	add	r2, r4
 80065a2:	3302      	adds	r3, #2
 80065a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065a8:	e7c2      	b.n	8006530 <_printf_common+0x58>
 80065aa:	2301      	movs	r3, #1
 80065ac:	4622      	mov	r2, r4
 80065ae:	4641      	mov	r1, r8
 80065b0:	4638      	mov	r0, r7
 80065b2:	47c8      	blx	r9
 80065b4:	3001      	adds	r0, #1
 80065b6:	d0e6      	beq.n	8006586 <_printf_common+0xae>
 80065b8:	3601      	adds	r6, #1
 80065ba:	e7d9      	b.n	8006570 <_printf_common+0x98>

080065bc <_printf_i>:
 80065bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065c0:	7e0f      	ldrb	r7, [r1, #24]
 80065c2:	4691      	mov	r9, r2
 80065c4:	2f78      	cmp	r7, #120	@ 0x78
 80065c6:	4680      	mov	r8, r0
 80065c8:	460c      	mov	r4, r1
 80065ca:	469a      	mov	sl, r3
 80065cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80065d2:	d807      	bhi.n	80065e4 <_printf_i+0x28>
 80065d4:	2f62      	cmp	r7, #98	@ 0x62
 80065d6:	d80a      	bhi.n	80065ee <_printf_i+0x32>
 80065d8:	2f00      	cmp	r7, #0
 80065da:	f000 80d3 	beq.w	8006784 <_printf_i+0x1c8>
 80065de:	2f58      	cmp	r7, #88	@ 0x58
 80065e0:	f000 80ba 	beq.w	8006758 <_printf_i+0x19c>
 80065e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80065ec:	e03a      	b.n	8006664 <_printf_i+0xa8>
 80065ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80065f2:	2b15      	cmp	r3, #21
 80065f4:	d8f6      	bhi.n	80065e4 <_printf_i+0x28>
 80065f6:	a101      	add	r1, pc, #4	@ (adr r1, 80065fc <_printf_i+0x40>)
 80065f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065fc:	08006655 	.word	0x08006655
 8006600:	08006669 	.word	0x08006669
 8006604:	080065e5 	.word	0x080065e5
 8006608:	080065e5 	.word	0x080065e5
 800660c:	080065e5 	.word	0x080065e5
 8006610:	080065e5 	.word	0x080065e5
 8006614:	08006669 	.word	0x08006669
 8006618:	080065e5 	.word	0x080065e5
 800661c:	080065e5 	.word	0x080065e5
 8006620:	080065e5 	.word	0x080065e5
 8006624:	080065e5 	.word	0x080065e5
 8006628:	0800676b 	.word	0x0800676b
 800662c:	08006693 	.word	0x08006693
 8006630:	08006725 	.word	0x08006725
 8006634:	080065e5 	.word	0x080065e5
 8006638:	080065e5 	.word	0x080065e5
 800663c:	0800678d 	.word	0x0800678d
 8006640:	080065e5 	.word	0x080065e5
 8006644:	08006693 	.word	0x08006693
 8006648:	080065e5 	.word	0x080065e5
 800664c:	080065e5 	.word	0x080065e5
 8006650:	0800672d 	.word	0x0800672d
 8006654:	6833      	ldr	r3, [r6, #0]
 8006656:	1d1a      	adds	r2, r3, #4
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6032      	str	r2, [r6, #0]
 800665c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006660:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006664:	2301      	movs	r3, #1
 8006666:	e09e      	b.n	80067a6 <_printf_i+0x1ea>
 8006668:	6833      	ldr	r3, [r6, #0]
 800666a:	6820      	ldr	r0, [r4, #0]
 800666c:	1d19      	adds	r1, r3, #4
 800666e:	6031      	str	r1, [r6, #0]
 8006670:	0606      	lsls	r6, r0, #24
 8006672:	d501      	bpl.n	8006678 <_printf_i+0xbc>
 8006674:	681d      	ldr	r5, [r3, #0]
 8006676:	e003      	b.n	8006680 <_printf_i+0xc4>
 8006678:	0645      	lsls	r5, r0, #25
 800667a:	d5fb      	bpl.n	8006674 <_printf_i+0xb8>
 800667c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006680:	2d00      	cmp	r5, #0
 8006682:	da03      	bge.n	800668c <_printf_i+0xd0>
 8006684:	232d      	movs	r3, #45	@ 0x2d
 8006686:	426d      	negs	r5, r5
 8006688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800668c:	230a      	movs	r3, #10
 800668e:	4859      	ldr	r0, [pc, #356]	@ (80067f4 <_printf_i+0x238>)
 8006690:	e011      	b.n	80066b6 <_printf_i+0xfa>
 8006692:	6821      	ldr	r1, [r4, #0]
 8006694:	6833      	ldr	r3, [r6, #0]
 8006696:	0608      	lsls	r0, r1, #24
 8006698:	f853 5b04 	ldr.w	r5, [r3], #4
 800669c:	d402      	bmi.n	80066a4 <_printf_i+0xe8>
 800669e:	0649      	lsls	r1, r1, #25
 80066a0:	bf48      	it	mi
 80066a2:	b2ad      	uxthmi	r5, r5
 80066a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80066a6:	6033      	str	r3, [r6, #0]
 80066a8:	bf14      	ite	ne
 80066aa:	230a      	movne	r3, #10
 80066ac:	2308      	moveq	r3, #8
 80066ae:	4851      	ldr	r0, [pc, #324]	@ (80067f4 <_printf_i+0x238>)
 80066b0:	2100      	movs	r1, #0
 80066b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066b6:	6866      	ldr	r6, [r4, #4]
 80066b8:	2e00      	cmp	r6, #0
 80066ba:	bfa8      	it	ge
 80066bc:	6821      	ldrge	r1, [r4, #0]
 80066be:	60a6      	str	r6, [r4, #8]
 80066c0:	bfa4      	itt	ge
 80066c2:	f021 0104 	bicge.w	r1, r1, #4
 80066c6:	6021      	strge	r1, [r4, #0]
 80066c8:	b90d      	cbnz	r5, 80066ce <_printf_i+0x112>
 80066ca:	2e00      	cmp	r6, #0
 80066cc:	d04b      	beq.n	8006766 <_printf_i+0x1aa>
 80066ce:	4616      	mov	r6, r2
 80066d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80066d4:	fb03 5711 	mls	r7, r3, r1, r5
 80066d8:	5dc7      	ldrb	r7, [r0, r7]
 80066da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066de:	462f      	mov	r7, r5
 80066e0:	42bb      	cmp	r3, r7
 80066e2:	460d      	mov	r5, r1
 80066e4:	d9f4      	bls.n	80066d0 <_printf_i+0x114>
 80066e6:	2b08      	cmp	r3, #8
 80066e8:	d10b      	bne.n	8006702 <_printf_i+0x146>
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	07df      	lsls	r7, r3, #31
 80066ee:	d508      	bpl.n	8006702 <_printf_i+0x146>
 80066f0:	6923      	ldr	r3, [r4, #16]
 80066f2:	6861      	ldr	r1, [r4, #4]
 80066f4:	4299      	cmp	r1, r3
 80066f6:	bfde      	ittt	le
 80066f8:	2330      	movle	r3, #48	@ 0x30
 80066fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006702:	1b92      	subs	r2, r2, r6
 8006704:	6122      	str	r2, [r4, #16]
 8006706:	464b      	mov	r3, r9
 8006708:	4621      	mov	r1, r4
 800670a:	4640      	mov	r0, r8
 800670c:	f8cd a000 	str.w	sl, [sp]
 8006710:	aa03      	add	r2, sp, #12
 8006712:	f7ff fee1 	bl	80064d8 <_printf_common>
 8006716:	3001      	adds	r0, #1
 8006718:	d14a      	bne.n	80067b0 <_printf_i+0x1f4>
 800671a:	f04f 30ff 	mov.w	r0, #4294967295
 800671e:	b004      	add	sp, #16
 8006720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	f043 0320 	orr.w	r3, r3, #32
 800672a:	6023      	str	r3, [r4, #0]
 800672c:	2778      	movs	r7, #120	@ 0x78
 800672e:	4832      	ldr	r0, [pc, #200]	@ (80067f8 <_printf_i+0x23c>)
 8006730:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	6831      	ldr	r1, [r6, #0]
 8006738:	061f      	lsls	r7, r3, #24
 800673a:	f851 5b04 	ldr.w	r5, [r1], #4
 800673e:	d402      	bmi.n	8006746 <_printf_i+0x18a>
 8006740:	065f      	lsls	r7, r3, #25
 8006742:	bf48      	it	mi
 8006744:	b2ad      	uxthmi	r5, r5
 8006746:	6031      	str	r1, [r6, #0]
 8006748:	07d9      	lsls	r1, r3, #31
 800674a:	bf44      	itt	mi
 800674c:	f043 0320 	orrmi.w	r3, r3, #32
 8006750:	6023      	strmi	r3, [r4, #0]
 8006752:	b11d      	cbz	r5, 800675c <_printf_i+0x1a0>
 8006754:	2310      	movs	r3, #16
 8006756:	e7ab      	b.n	80066b0 <_printf_i+0xf4>
 8006758:	4826      	ldr	r0, [pc, #152]	@ (80067f4 <_printf_i+0x238>)
 800675a:	e7e9      	b.n	8006730 <_printf_i+0x174>
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	f023 0320 	bic.w	r3, r3, #32
 8006762:	6023      	str	r3, [r4, #0]
 8006764:	e7f6      	b.n	8006754 <_printf_i+0x198>
 8006766:	4616      	mov	r6, r2
 8006768:	e7bd      	b.n	80066e6 <_printf_i+0x12a>
 800676a:	6833      	ldr	r3, [r6, #0]
 800676c:	6825      	ldr	r5, [r4, #0]
 800676e:	1d18      	adds	r0, r3, #4
 8006770:	6961      	ldr	r1, [r4, #20]
 8006772:	6030      	str	r0, [r6, #0]
 8006774:	062e      	lsls	r6, r5, #24
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	d501      	bpl.n	800677e <_printf_i+0x1c2>
 800677a:	6019      	str	r1, [r3, #0]
 800677c:	e002      	b.n	8006784 <_printf_i+0x1c8>
 800677e:	0668      	lsls	r0, r5, #25
 8006780:	d5fb      	bpl.n	800677a <_printf_i+0x1be>
 8006782:	8019      	strh	r1, [r3, #0]
 8006784:	2300      	movs	r3, #0
 8006786:	4616      	mov	r6, r2
 8006788:	6123      	str	r3, [r4, #16]
 800678a:	e7bc      	b.n	8006706 <_printf_i+0x14a>
 800678c:	6833      	ldr	r3, [r6, #0]
 800678e:	2100      	movs	r1, #0
 8006790:	1d1a      	adds	r2, r3, #4
 8006792:	6032      	str	r2, [r6, #0]
 8006794:	681e      	ldr	r6, [r3, #0]
 8006796:	6862      	ldr	r2, [r4, #4]
 8006798:	4630      	mov	r0, r6
 800679a:	f000 f9d6 	bl	8006b4a <memchr>
 800679e:	b108      	cbz	r0, 80067a4 <_printf_i+0x1e8>
 80067a0:	1b80      	subs	r0, r0, r6
 80067a2:	6060      	str	r0, [r4, #4]
 80067a4:	6863      	ldr	r3, [r4, #4]
 80067a6:	6123      	str	r3, [r4, #16]
 80067a8:	2300      	movs	r3, #0
 80067aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067ae:	e7aa      	b.n	8006706 <_printf_i+0x14a>
 80067b0:	4632      	mov	r2, r6
 80067b2:	4649      	mov	r1, r9
 80067b4:	4640      	mov	r0, r8
 80067b6:	6923      	ldr	r3, [r4, #16]
 80067b8:	47d0      	blx	sl
 80067ba:	3001      	adds	r0, #1
 80067bc:	d0ad      	beq.n	800671a <_printf_i+0x15e>
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	079b      	lsls	r3, r3, #30
 80067c2:	d413      	bmi.n	80067ec <_printf_i+0x230>
 80067c4:	68e0      	ldr	r0, [r4, #12]
 80067c6:	9b03      	ldr	r3, [sp, #12]
 80067c8:	4298      	cmp	r0, r3
 80067ca:	bfb8      	it	lt
 80067cc:	4618      	movlt	r0, r3
 80067ce:	e7a6      	b.n	800671e <_printf_i+0x162>
 80067d0:	2301      	movs	r3, #1
 80067d2:	4632      	mov	r2, r6
 80067d4:	4649      	mov	r1, r9
 80067d6:	4640      	mov	r0, r8
 80067d8:	47d0      	blx	sl
 80067da:	3001      	adds	r0, #1
 80067dc:	d09d      	beq.n	800671a <_printf_i+0x15e>
 80067de:	3501      	adds	r5, #1
 80067e0:	68e3      	ldr	r3, [r4, #12]
 80067e2:	9903      	ldr	r1, [sp, #12]
 80067e4:	1a5b      	subs	r3, r3, r1
 80067e6:	42ab      	cmp	r3, r5
 80067e8:	dcf2      	bgt.n	80067d0 <_printf_i+0x214>
 80067ea:	e7eb      	b.n	80067c4 <_printf_i+0x208>
 80067ec:	2500      	movs	r5, #0
 80067ee:	f104 0619 	add.w	r6, r4, #25
 80067f2:	e7f5      	b.n	80067e0 <_printf_i+0x224>
 80067f4:	08008f56 	.word	0x08008f56
 80067f8:	08008f67 	.word	0x08008f67

080067fc <std>:
 80067fc:	2300      	movs	r3, #0
 80067fe:	b510      	push	{r4, lr}
 8006800:	4604      	mov	r4, r0
 8006802:	e9c0 3300 	strd	r3, r3, [r0]
 8006806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800680a:	6083      	str	r3, [r0, #8]
 800680c:	8181      	strh	r1, [r0, #12]
 800680e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006810:	81c2      	strh	r2, [r0, #14]
 8006812:	6183      	str	r3, [r0, #24]
 8006814:	4619      	mov	r1, r3
 8006816:	2208      	movs	r2, #8
 8006818:	305c      	adds	r0, #92	@ 0x5c
 800681a:	f000 f906 	bl	8006a2a <memset>
 800681e:	4b0d      	ldr	r3, [pc, #52]	@ (8006854 <std+0x58>)
 8006820:	6224      	str	r4, [r4, #32]
 8006822:	6263      	str	r3, [r4, #36]	@ 0x24
 8006824:	4b0c      	ldr	r3, [pc, #48]	@ (8006858 <std+0x5c>)
 8006826:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006828:	4b0c      	ldr	r3, [pc, #48]	@ (800685c <std+0x60>)
 800682a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800682c:	4b0c      	ldr	r3, [pc, #48]	@ (8006860 <std+0x64>)
 800682e:	6323      	str	r3, [r4, #48]	@ 0x30
 8006830:	4b0c      	ldr	r3, [pc, #48]	@ (8006864 <std+0x68>)
 8006832:	429c      	cmp	r4, r3
 8006834:	d006      	beq.n	8006844 <std+0x48>
 8006836:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800683a:	4294      	cmp	r4, r2
 800683c:	d002      	beq.n	8006844 <std+0x48>
 800683e:	33d0      	adds	r3, #208	@ 0xd0
 8006840:	429c      	cmp	r4, r3
 8006842:	d105      	bne.n	8006850 <std+0x54>
 8006844:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800684c:	f000 b97a 	b.w	8006b44 <__retarget_lock_init_recursive>
 8006850:	bd10      	pop	{r4, pc}
 8006852:	bf00      	nop
 8006854:	080069a5 	.word	0x080069a5
 8006858:	080069c7 	.word	0x080069c7
 800685c:	080069ff 	.word	0x080069ff
 8006860:	08006a23 	.word	0x08006a23
 8006864:	200008f0 	.word	0x200008f0

08006868 <stdio_exit_handler>:
 8006868:	4a02      	ldr	r2, [pc, #8]	@ (8006874 <stdio_exit_handler+0xc>)
 800686a:	4903      	ldr	r1, [pc, #12]	@ (8006878 <stdio_exit_handler+0x10>)
 800686c:	4803      	ldr	r0, [pc, #12]	@ (800687c <stdio_exit_handler+0x14>)
 800686e:	f000 b869 	b.w	8006944 <_fwalk_sglue>
 8006872:	bf00      	nop
 8006874:	2000006c 	.word	0x2000006c
 8006878:	08008319 	.word	0x08008319
 800687c:	2000007c 	.word	0x2000007c

08006880 <cleanup_stdio>:
 8006880:	6841      	ldr	r1, [r0, #4]
 8006882:	4b0c      	ldr	r3, [pc, #48]	@ (80068b4 <cleanup_stdio+0x34>)
 8006884:	b510      	push	{r4, lr}
 8006886:	4299      	cmp	r1, r3
 8006888:	4604      	mov	r4, r0
 800688a:	d001      	beq.n	8006890 <cleanup_stdio+0x10>
 800688c:	f001 fd44 	bl	8008318 <_fflush_r>
 8006890:	68a1      	ldr	r1, [r4, #8]
 8006892:	4b09      	ldr	r3, [pc, #36]	@ (80068b8 <cleanup_stdio+0x38>)
 8006894:	4299      	cmp	r1, r3
 8006896:	d002      	beq.n	800689e <cleanup_stdio+0x1e>
 8006898:	4620      	mov	r0, r4
 800689a:	f001 fd3d 	bl	8008318 <_fflush_r>
 800689e:	68e1      	ldr	r1, [r4, #12]
 80068a0:	4b06      	ldr	r3, [pc, #24]	@ (80068bc <cleanup_stdio+0x3c>)
 80068a2:	4299      	cmp	r1, r3
 80068a4:	d004      	beq.n	80068b0 <cleanup_stdio+0x30>
 80068a6:	4620      	mov	r0, r4
 80068a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068ac:	f001 bd34 	b.w	8008318 <_fflush_r>
 80068b0:	bd10      	pop	{r4, pc}
 80068b2:	bf00      	nop
 80068b4:	200008f0 	.word	0x200008f0
 80068b8:	20000958 	.word	0x20000958
 80068bc:	200009c0 	.word	0x200009c0

080068c0 <global_stdio_init.part.0>:
 80068c0:	b510      	push	{r4, lr}
 80068c2:	4b0b      	ldr	r3, [pc, #44]	@ (80068f0 <global_stdio_init.part.0+0x30>)
 80068c4:	4c0b      	ldr	r4, [pc, #44]	@ (80068f4 <global_stdio_init.part.0+0x34>)
 80068c6:	4a0c      	ldr	r2, [pc, #48]	@ (80068f8 <global_stdio_init.part.0+0x38>)
 80068c8:	4620      	mov	r0, r4
 80068ca:	601a      	str	r2, [r3, #0]
 80068cc:	2104      	movs	r1, #4
 80068ce:	2200      	movs	r2, #0
 80068d0:	f7ff ff94 	bl	80067fc <std>
 80068d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068d8:	2201      	movs	r2, #1
 80068da:	2109      	movs	r1, #9
 80068dc:	f7ff ff8e 	bl	80067fc <std>
 80068e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80068e4:	2202      	movs	r2, #2
 80068e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068ea:	2112      	movs	r1, #18
 80068ec:	f7ff bf86 	b.w	80067fc <std>
 80068f0:	20000a28 	.word	0x20000a28
 80068f4:	200008f0 	.word	0x200008f0
 80068f8:	08006869 	.word	0x08006869

080068fc <__sfp_lock_acquire>:
 80068fc:	4801      	ldr	r0, [pc, #4]	@ (8006904 <__sfp_lock_acquire+0x8>)
 80068fe:	f000 b922 	b.w	8006b46 <__retarget_lock_acquire_recursive>
 8006902:	bf00      	nop
 8006904:	20000a31 	.word	0x20000a31

08006908 <__sfp_lock_release>:
 8006908:	4801      	ldr	r0, [pc, #4]	@ (8006910 <__sfp_lock_release+0x8>)
 800690a:	f000 b91d 	b.w	8006b48 <__retarget_lock_release_recursive>
 800690e:	bf00      	nop
 8006910:	20000a31 	.word	0x20000a31

08006914 <__sinit>:
 8006914:	b510      	push	{r4, lr}
 8006916:	4604      	mov	r4, r0
 8006918:	f7ff fff0 	bl	80068fc <__sfp_lock_acquire>
 800691c:	6a23      	ldr	r3, [r4, #32]
 800691e:	b11b      	cbz	r3, 8006928 <__sinit+0x14>
 8006920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006924:	f7ff bff0 	b.w	8006908 <__sfp_lock_release>
 8006928:	4b04      	ldr	r3, [pc, #16]	@ (800693c <__sinit+0x28>)
 800692a:	6223      	str	r3, [r4, #32]
 800692c:	4b04      	ldr	r3, [pc, #16]	@ (8006940 <__sinit+0x2c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1f5      	bne.n	8006920 <__sinit+0xc>
 8006934:	f7ff ffc4 	bl	80068c0 <global_stdio_init.part.0>
 8006938:	e7f2      	b.n	8006920 <__sinit+0xc>
 800693a:	bf00      	nop
 800693c:	08006881 	.word	0x08006881
 8006940:	20000a28 	.word	0x20000a28

08006944 <_fwalk_sglue>:
 8006944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006948:	4607      	mov	r7, r0
 800694a:	4688      	mov	r8, r1
 800694c:	4614      	mov	r4, r2
 800694e:	2600      	movs	r6, #0
 8006950:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006954:	f1b9 0901 	subs.w	r9, r9, #1
 8006958:	d505      	bpl.n	8006966 <_fwalk_sglue+0x22>
 800695a:	6824      	ldr	r4, [r4, #0]
 800695c:	2c00      	cmp	r4, #0
 800695e:	d1f7      	bne.n	8006950 <_fwalk_sglue+0xc>
 8006960:	4630      	mov	r0, r6
 8006962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006966:	89ab      	ldrh	r3, [r5, #12]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d907      	bls.n	800697c <_fwalk_sglue+0x38>
 800696c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006970:	3301      	adds	r3, #1
 8006972:	d003      	beq.n	800697c <_fwalk_sglue+0x38>
 8006974:	4629      	mov	r1, r5
 8006976:	4638      	mov	r0, r7
 8006978:	47c0      	blx	r8
 800697a:	4306      	orrs	r6, r0
 800697c:	3568      	adds	r5, #104	@ 0x68
 800697e:	e7e9      	b.n	8006954 <_fwalk_sglue+0x10>

08006980 <iprintf>:
 8006980:	b40f      	push	{r0, r1, r2, r3}
 8006982:	b507      	push	{r0, r1, r2, lr}
 8006984:	4906      	ldr	r1, [pc, #24]	@ (80069a0 <iprintf+0x20>)
 8006986:	ab04      	add	r3, sp, #16
 8006988:	6808      	ldr	r0, [r1, #0]
 800698a:	f853 2b04 	ldr.w	r2, [r3], #4
 800698e:	6881      	ldr	r1, [r0, #8]
 8006990:	9301      	str	r3, [sp, #4]
 8006992:	f001 fb29 	bl	8007fe8 <_vfiprintf_r>
 8006996:	b003      	add	sp, #12
 8006998:	f85d eb04 	ldr.w	lr, [sp], #4
 800699c:	b004      	add	sp, #16
 800699e:	4770      	bx	lr
 80069a0:	20000078 	.word	0x20000078

080069a4 <__sread>:
 80069a4:	b510      	push	{r4, lr}
 80069a6:	460c      	mov	r4, r1
 80069a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ac:	f000 f86c 	bl	8006a88 <_read_r>
 80069b0:	2800      	cmp	r0, #0
 80069b2:	bfab      	itete	ge
 80069b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80069b6:	89a3      	ldrhlt	r3, [r4, #12]
 80069b8:	181b      	addge	r3, r3, r0
 80069ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80069be:	bfac      	ite	ge
 80069c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80069c2:	81a3      	strhlt	r3, [r4, #12]
 80069c4:	bd10      	pop	{r4, pc}

080069c6 <__swrite>:
 80069c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ca:	461f      	mov	r7, r3
 80069cc:	898b      	ldrh	r3, [r1, #12]
 80069ce:	4605      	mov	r5, r0
 80069d0:	05db      	lsls	r3, r3, #23
 80069d2:	460c      	mov	r4, r1
 80069d4:	4616      	mov	r6, r2
 80069d6:	d505      	bpl.n	80069e4 <__swrite+0x1e>
 80069d8:	2302      	movs	r3, #2
 80069da:	2200      	movs	r2, #0
 80069dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069e0:	f000 f840 	bl	8006a64 <_lseek_r>
 80069e4:	89a3      	ldrh	r3, [r4, #12]
 80069e6:	4632      	mov	r2, r6
 80069e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069ec:	81a3      	strh	r3, [r4, #12]
 80069ee:	4628      	mov	r0, r5
 80069f0:	463b      	mov	r3, r7
 80069f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069fa:	f000 b867 	b.w	8006acc <_write_r>

080069fe <__sseek>:
 80069fe:	b510      	push	{r4, lr}
 8006a00:	460c      	mov	r4, r1
 8006a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a06:	f000 f82d 	bl	8006a64 <_lseek_r>
 8006a0a:	1c43      	adds	r3, r0, #1
 8006a0c:	89a3      	ldrh	r3, [r4, #12]
 8006a0e:	bf15      	itete	ne
 8006a10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006a1a:	81a3      	strheq	r3, [r4, #12]
 8006a1c:	bf18      	it	ne
 8006a1e:	81a3      	strhne	r3, [r4, #12]
 8006a20:	bd10      	pop	{r4, pc}

08006a22 <__sclose>:
 8006a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a26:	f000 b80d 	b.w	8006a44 <_close_r>

08006a2a <memset>:
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	4402      	add	r2, r0
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d100      	bne.n	8006a34 <memset+0xa>
 8006a32:	4770      	bx	lr
 8006a34:	f803 1b01 	strb.w	r1, [r3], #1
 8006a38:	e7f9      	b.n	8006a2e <memset+0x4>
	...

08006a3c <_localeconv_r>:
 8006a3c:	4800      	ldr	r0, [pc, #0]	@ (8006a40 <_localeconv_r+0x4>)
 8006a3e:	4770      	bx	lr
 8006a40:	200001b8 	.word	0x200001b8

08006a44 <_close_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	2300      	movs	r3, #0
 8006a48:	4d05      	ldr	r5, [pc, #20]	@ (8006a60 <_close_r+0x1c>)
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	4608      	mov	r0, r1
 8006a4e:	602b      	str	r3, [r5, #0]
 8006a50:	f7fb fd59 	bl	8002506 <_close>
 8006a54:	1c43      	adds	r3, r0, #1
 8006a56:	d102      	bne.n	8006a5e <_close_r+0x1a>
 8006a58:	682b      	ldr	r3, [r5, #0]
 8006a5a:	b103      	cbz	r3, 8006a5e <_close_r+0x1a>
 8006a5c:	6023      	str	r3, [r4, #0]
 8006a5e:	bd38      	pop	{r3, r4, r5, pc}
 8006a60:	20000a2c 	.word	0x20000a2c

08006a64 <_lseek_r>:
 8006a64:	b538      	push	{r3, r4, r5, lr}
 8006a66:	4604      	mov	r4, r0
 8006a68:	4608      	mov	r0, r1
 8006a6a:	4611      	mov	r1, r2
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	4d05      	ldr	r5, [pc, #20]	@ (8006a84 <_lseek_r+0x20>)
 8006a70:	602a      	str	r2, [r5, #0]
 8006a72:	461a      	mov	r2, r3
 8006a74:	f7fb fd6b 	bl	800254e <_lseek>
 8006a78:	1c43      	adds	r3, r0, #1
 8006a7a:	d102      	bne.n	8006a82 <_lseek_r+0x1e>
 8006a7c:	682b      	ldr	r3, [r5, #0]
 8006a7e:	b103      	cbz	r3, 8006a82 <_lseek_r+0x1e>
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	bd38      	pop	{r3, r4, r5, pc}
 8006a84:	20000a2c 	.word	0x20000a2c

08006a88 <_read_r>:
 8006a88:	b538      	push	{r3, r4, r5, lr}
 8006a8a:	4604      	mov	r4, r0
 8006a8c:	4608      	mov	r0, r1
 8006a8e:	4611      	mov	r1, r2
 8006a90:	2200      	movs	r2, #0
 8006a92:	4d05      	ldr	r5, [pc, #20]	@ (8006aa8 <_read_r+0x20>)
 8006a94:	602a      	str	r2, [r5, #0]
 8006a96:	461a      	mov	r2, r3
 8006a98:	f7fb fcfc 	bl	8002494 <_read>
 8006a9c:	1c43      	adds	r3, r0, #1
 8006a9e:	d102      	bne.n	8006aa6 <_read_r+0x1e>
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	b103      	cbz	r3, 8006aa6 <_read_r+0x1e>
 8006aa4:	6023      	str	r3, [r4, #0]
 8006aa6:	bd38      	pop	{r3, r4, r5, pc}
 8006aa8:	20000a2c 	.word	0x20000a2c

08006aac <_sbrk_r>:
 8006aac:	b538      	push	{r3, r4, r5, lr}
 8006aae:	2300      	movs	r3, #0
 8006ab0:	4d05      	ldr	r5, [pc, #20]	@ (8006ac8 <_sbrk_r+0x1c>)
 8006ab2:	4604      	mov	r4, r0
 8006ab4:	4608      	mov	r0, r1
 8006ab6:	602b      	str	r3, [r5, #0]
 8006ab8:	f7fb fd56 	bl	8002568 <_sbrk>
 8006abc:	1c43      	adds	r3, r0, #1
 8006abe:	d102      	bne.n	8006ac6 <_sbrk_r+0x1a>
 8006ac0:	682b      	ldr	r3, [r5, #0]
 8006ac2:	b103      	cbz	r3, 8006ac6 <_sbrk_r+0x1a>
 8006ac4:	6023      	str	r3, [r4, #0]
 8006ac6:	bd38      	pop	{r3, r4, r5, pc}
 8006ac8:	20000a2c 	.word	0x20000a2c

08006acc <_write_r>:
 8006acc:	b538      	push	{r3, r4, r5, lr}
 8006ace:	4604      	mov	r4, r0
 8006ad0:	4608      	mov	r0, r1
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	4d05      	ldr	r5, [pc, #20]	@ (8006aec <_write_r+0x20>)
 8006ad8:	602a      	str	r2, [r5, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	f7fb fcf7 	bl	80024ce <_write>
 8006ae0:	1c43      	adds	r3, r0, #1
 8006ae2:	d102      	bne.n	8006aea <_write_r+0x1e>
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	b103      	cbz	r3, 8006aea <_write_r+0x1e>
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	bd38      	pop	{r3, r4, r5, pc}
 8006aec:	20000a2c 	.word	0x20000a2c

08006af0 <__errno>:
 8006af0:	4b01      	ldr	r3, [pc, #4]	@ (8006af8 <__errno+0x8>)
 8006af2:	6818      	ldr	r0, [r3, #0]
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	20000078 	.word	0x20000078

08006afc <__libc_init_array>:
 8006afc:	b570      	push	{r4, r5, r6, lr}
 8006afe:	2600      	movs	r6, #0
 8006b00:	4d0c      	ldr	r5, [pc, #48]	@ (8006b34 <__libc_init_array+0x38>)
 8006b02:	4c0d      	ldr	r4, [pc, #52]	@ (8006b38 <__libc_init_array+0x3c>)
 8006b04:	1b64      	subs	r4, r4, r5
 8006b06:	10a4      	asrs	r4, r4, #2
 8006b08:	42a6      	cmp	r6, r4
 8006b0a:	d109      	bne.n	8006b20 <__libc_init_array+0x24>
 8006b0c:	f001 ffee 	bl	8008aec <_init>
 8006b10:	2600      	movs	r6, #0
 8006b12:	4d0a      	ldr	r5, [pc, #40]	@ (8006b3c <__libc_init_array+0x40>)
 8006b14:	4c0a      	ldr	r4, [pc, #40]	@ (8006b40 <__libc_init_array+0x44>)
 8006b16:	1b64      	subs	r4, r4, r5
 8006b18:	10a4      	asrs	r4, r4, #2
 8006b1a:	42a6      	cmp	r6, r4
 8006b1c:	d105      	bne.n	8006b2a <__libc_init_array+0x2e>
 8006b1e:	bd70      	pop	{r4, r5, r6, pc}
 8006b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b24:	4798      	blx	r3
 8006b26:	3601      	adds	r6, #1
 8006b28:	e7ee      	b.n	8006b08 <__libc_init_array+0xc>
 8006b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b2e:	4798      	blx	r3
 8006b30:	3601      	adds	r6, #1
 8006b32:	e7f2      	b.n	8006b1a <__libc_init_array+0x1e>
 8006b34:	080092c0 	.word	0x080092c0
 8006b38:	080092c0 	.word	0x080092c0
 8006b3c:	080092c0 	.word	0x080092c0
 8006b40:	080092c4 	.word	0x080092c4

08006b44 <__retarget_lock_init_recursive>:
 8006b44:	4770      	bx	lr

08006b46 <__retarget_lock_acquire_recursive>:
 8006b46:	4770      	bx	lr

08006b48 <__retarget_lock_release_recursive>:
 8006b48:	4770      	bx	lr

08006b4a <memchr>:
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	b510      	push	{r4, lr}
 8006b4e:	b2c9      	uxtb	r1, r1
 8006b50:	4402      	add	r2, r0
 8006b52:	4293      	cmp	r3, r2
 8006b54:	4618      	mov	r0, r3
 8006b56:	d101      	bne.n	8006b5c <memchr+0x12>
 8006b58:	2000      	movs	r0, #0
 8006b5a:	e003      	b.n	8006b64 <memchr+0x1a>
 8006b5c:	7804      	ldrb	r4, [r0, #0]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	428c      	cmp	r4, r1
 8006b62:	d1f6      	bne.n	8006b52 <memchr+0x8>
 8006b64:	bd10      	pop	{r4, pc}

08006b66 <quorem>:
 8006b66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6a:	6903      	ldr	r3, [r0, #16]
 8006b6c:	690c      	ldr	r4, [r1, #16]
 8006b6e:	4607      	mov	r7, r0
 8006b70:	42a3      	cmp	r3, r4
 8006b72:	db7e      	blt.n	8006c72 <quorem+0x10c>
 8006b74:	3c01      	subs	r4, #1
 8006b76:	00a3      	lsls	r3, r4, #2
 8006b78:	f100 0514 	add.w	r5, r0, #20
 8006b7c:	f101 0814 	add.w	r8, r1, #20
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b86:	9301      	str	r3, [sp, #4]
 8006b88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b90:	3301      	adds	r3, #1
 8006b92:	429a      	cmp	r2, r3
 8006b94:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b9c:	d32e      	bcc.n	8006bfc <quorem+0x96>
 8006b9e:	f04f 0a00 	mov.w	sl, #0
 8006ba2:	46c4      	mov	ip, r8
 8006ba4:	46ae      	mov	lr, r5
 8006ba6:	46d3      	mov	fp, sl
 8006ba8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006bac:	b298      	uxth	r0, r3
 8006bae:	fb06 a000 	mla	r0, r6, r0, sl
 8006bb2:	0c1b      	lsrs	r3, r3, #16
 8006bb4:	0c02      	lsrs	r2, r0, #16
 8006bb6:	fb06 2303 	mla	r3, r6, r3, r2
 8006bba:	f8de 2000 	ldr.w	r2, [lr]
 8006bbe:	b280      	uxth	r0, r0
 8006bc0:	b292      	uxth	r2, r2
 8006bc2:	1a12      	subs	r2, r2, r0
 8006bc4:	445a      	add	r2, fp
 8006bc6:	f8de 0000 	ldr.w	r0, [lr]
 8006bca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006bd4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006bd8:	b292      	uxth	r2, r2
 8006bda:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006bde:	45e1      	cmp	r9, ip
 8006be0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006be4:	f84e 2b04 	str.w	r2, [lr], #4
 8006be8:	d2de      	bcs.n	8006ba8 <quorem+0x42>
 8006bea:	9b00      	ldr	r3, [sp, #0]
 8006bec:	58eb      	ldr	r3, [r5, r3]
 8006bee:	b92b      	cbnz	r3, 8006bfc <quorem+0x96>
 8006bf0:	9b01      	ldr	r3, [sp, #4]
 8006bf2:	3b04      	subs	r3, #4
 8006bf4:	429d      	cmp	r5, r3
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	d32f      	bcc.n	8006c5a <quorem+0xf4>
 8006bfa:	613c      	str	r4, [r7, #16]
 8006bfc:	4638      	mov	r0, r7
 8006bfe:	f001 f8c3 	bl	8007d88 <__mcmp>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	db25      	blt.n	8006c52 <quorem+0xec>
 8006c06:	4629      	mov	r1, r5
 8006c08:	2000      	movs	r0, #0
 8006c0a:	f858 2b04 	ldr.w	r2, [r8], #4
 8006c0e:	f8d1 c000 	ldr.w	ip, [r1]
 8006c12:	fa1f fe82 	uxth.w	lr, r2
 8006c16:	fa1f f38c 	uxth.w	r3, ip
 8006c1a:	eba3 030e 	sub.w	r3, r3, lr
 8006c1e:	4403      	add	r3, r0
 8006c20:	0c12      	lsrs	r2, r2, #16
 8006c22:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006c26:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c30:	45c1      	cmp	r9, r8
 8006c32:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006c36:	f841 3b04 	str.w	r3, [r1], #4
 8006c3a:	d2e6      	bcs.n	8006c0a <quorem+0xa4>
 8006c3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c44:	b922      	cbnz	r2, 8006c50 <quorem+0xea>
 8006c46:	3b04      	subs	r3, #4
 8006c48:	429d      	cmp	r5, r3
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	d30b      	bcc.n	8006c66 <quorem+0x100>
 8006c4e:	613c      	str	r4, [r7, #16]
 8006c50:	3601      	adds	r6, #1
 8006c52:	4630      	mov	r0, r6
 8006c54:	b003      	add	sp, #12
 8006c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c5a:	6812      	ldr	r2, [r2, #0]
 8006c5c:	3b04      	subs	r3, #4
 8006c5e:	2a00      	cmp	r2, #0
 8006c60:	d1cb      	bne.n	8006bfa <quorem+0x94>
 8006c62:	3c01      	subs	r4, #1
 8006c64:	e7c6      	b.n	8006bf4 <quorem+0x8e>
 8006c66:	6812      	ldr	r2, [r2, #0]
 8006c68:	3b04      	subs	r3, #4
 8006c6a:	2a00      	cmp	r2, #0
 8006c6c:	d1ef      	bne.n	8006c4e <quorem+0xe8>
 8006c6e:	3c01      	subs	r4, #1
 8006c70:	e7ea      	b.n	8006c48 <quorem+0xe2>
 8006c72:	2000      	movs	r0, #0
 8006c74:	e7ee      	b.n	8006c54 <quorem+0xee>
	...

08006c78 <_dtoa_r>:
 8006c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7c:	4614      	mov	r4, r2
 8006c7e:	461d      	mov	r5, r3
 8006c80:	69c7      	ldr	r7, [r0, #28]
 8006c82:	b097      	sub	sp, #92	@ 0x5c
 8006c84:	4683      	mov	fp, r0
 8006c86:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006c8a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006c8c:	b97f      	cbnz	r7, 8006cae <_dtoa_r+0x36>
 8006c8e:	2010      	movs	r0, #16
 8006c90:	f7ff f89a 	bl	8005dc8 <malloc>
 8006c94:	4602      	mov	r2, r0
 8006c96:	f8cb 001c 	str.w	r0, [fp, #28]
 8006c9a:	b920      	cbnz	r0, 8006ca6 <_dtoa_r+0x2e>
 8006c9c:	21ef      	movs	r1, #239	@ 0xef
 8006c9e:	4ba8      	ldr	r3, [pc, #672]	@ (8006f40 <_dtoa_r+0x2c8>)
 8006ca0:	48a8      	ldr	r0, [pc, #672]	@ (8006f44 <_dtoa_r+0x2cc>)
 8006ca2:	f001 fc03 	bl	80084ac <__assert_func>
 8006ca6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006caa:	6007      	str	r7, [r0, #0]
 8006cac:	60c7      	str	r7, [r0, #12]
 8006cae:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006cb2:	6819      	ldr	r1, [r3, #0]
 8006cb4:	b159      	cbz	r1, 8006cce <_dtoa_r+0x56>
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	2301      	movs	r3, #1
 8006cba:	4093      	lsls	r3, r2
 8006cbc:	604a      	str	r2, [r1, #4]
 8006cbe:	608b      	str	r3, [r1, #8]
 8006cc0:	4658      	mov	r0, fp
 8006cc2:	f000 fe29 	bl	8007918 <_Bfree>
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	1e2b      	subs	r3, r5, #0
 8006cd0:	bfaf      	iteee	ge
 8006cd2:	2300      	movge	r3, #0
 8006cd4:	2201      	movlt	r2, #1
 8006cd6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006cda:	9303      	strlt	r3, [sp, #12]
 8006cdc:	bfa8      	it	ge
 8006cde:	6033      	strge	r3, [r6, #0]
 8006ce0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006ce4:	4b98      	ldr	r3, [pc, #608]	@ (8006f48 <_dtoa_r+0x2d0>)
 8006ce6:	bfb8      	it	lt
 8006ce8:	6032      	strlt	r2, [r6, #0]
 8006cea:	ea33 0308 	bics.w	r3, r3, r8
 8006cee:	d112      	bne.n	8006d16 <_dtoa_r+0x9e>
 8006cf0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006cf4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006cf6:	6013      	str	r3, [r2, #0]
 8006cf8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006cfc:	4323      	orrs	r3, r4
 8006cfe:	f000 8550 	beq.w	80077a2 <_dtoa_r+0xb2a>
 8006d02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006d04:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006f4c <_dtoa_r+0x2d4>
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 8552 	beq.w	80077b2 <_dtoa_r+0xb3a>
 8006d0e:	f10a 0303 	add.w	r3, sl, #3
 8006d12:	f000 bd4c 	b.w	80077ae <_dtoa_r+0xb36>
 8006d16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d1a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006d1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d22:	2200      	movs	r2, #0
 8006d24:	2300      	movs	r3, #0
 8006d26:	f7f9 fe7b 	bl	8000a20 <__aeabi_dcmpeq>
 8006d2a:	4607      	mov	r7, r0
 8006d2c:	b158      	cbz	r0, 8006d46 <_dtoa_r+0xce>
 8006d2e:	2301      	movs	r3, #1
 8006d30:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006d32:	6013      	str	r3, [r2, #0]
 8006d34:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006d36:	b113      	cbz	r3, 8006d3e <_dtoa_r+0xc6>
 8006d38:	4b85      	ldr	r3, [pc, #532]	@ (8006f50 <_dtoa_r+0x2d8>)
 8006d3a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006d3c:	6013      	str	r3, [r2, #0]
 8006d3e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006f54 <_dtoa_r+0x2dc>
 8006d42:	f000 bd36 	b.w	80077b2 <_dtoa_r+0xb3a>
 8006d46:	ab14      	add	r3, sp, #80	@ 0x50
 8006d48:	9301      	str	r3, [sp, #4]
 8006d4a:	ab15      	add	r3, sp, #84	@ 0x54
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	4658      	mov	r0, fp
 8006d50:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006d54:	f001 f8c8 	bl	8007ee8 <__d2b>
 8006d58:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006d5c:	4681      	mov	r9, r0
 8006d5e:	2e00      	cmp	r6, #0
 8006d60:	d077      	beq.n	8006e52 <_dtoa_r+0x1da>
 8006d62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d68:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d70:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006d74:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006d78:	9712      	str	r7, [sp, #72]	@ 0x48
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	4b76      	ldr	r3, [pc, #472]	@ (8006f58 <_dtoa_r+0x2e0>)
 8006d80:	f7f9 fa2e 	bl	80001e0 <__aeabi_dsub>
 8006d84:	a368      	add	r3, pc, #416	@ (adr r3, 8006f28 <_dtoa_r+0x2b0>)
 8006d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8a:	f7f9 fbe1 	bl	8000550 <__aeabi_dmul>
 8006d8e:	a368      	add	r3, pc, #416	@ (adr r3, 8006f30 <_dtoa_r+0x2b8>)
 8006d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d94:	f7f9 fa26 	bl	80001e4 <__adddf3>
 8006d98:	4604      	mov	r4, r0
 8006d9a:	4630      	mov	r0, r6
 8006d9c:	460d      	mov	r5, r1
 8006d9e:	f7f9 fb6d 	bl	800047c <__aeabi_i2d>
 8006da2:	a365      	add	r3, pc, #404	@ (adr r3, 8006f38 <_dtoa_r+0x2c0>)
 8006da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da8:	f7f9 fbd2 	bl	8000550 <__aeabi_dmul>
 8006dac:	4602      	mov	r2, r0
 8006dae:	460b      	mov	r3, r1
 8006db0:	4620      	mov	r0, r4
 8006db2:	4629      	mov	r1, r5
 8006db4:	f7f9 fa16 	bl	80001e4 <__adddf3>
 8006db8:	4604      	mov	r4, r0
 8006dba:	460d      	mov	r5, r1
 8006dbc:	f7f9 fe78 	bl	8000ab0 <__aeabi_d2iz>
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	4607      	mov	r7, r0
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	4629      	mov	r1, r5
 8006dca:	f7f9 fe33 	bl	8000a34 <__aeabi_dcmplt>
 8006dce:	b140      	cbz	r0, 8006de2 <_dtoa_r+0x16a>
 8006dd0:	4638      	mov	r0, r7
 8006dd2:	f7f9 fb53 	bl	800047c <__aeabi_i2d>
 8006dd6:	4622      	mov	r2, r4
 8006dd8:	462b      	mov	r3, r5
 8006dda:	f7f9 fe21 	bl	8000a20 <__aeabi_dcmpeq>
 8006dde:	b900      	cbnz	r0, 8006de2 <_dtoa_r+0x16a>
 8006de0:	3f01      	subs	r7, #1
 8006de2:	2f16      	cmp	r7, #22
 8006de4:	d853      	bhi.n	8006e8e <_dtoa_r+0x216>
 8006de6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dea:	4b5c      	ldr	r3, [pc, #368]	@ (8006f5c <_dtoa_r+0x2e4>)
 8006dec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df4:	f7f9 fe1e 	bl	8000a34 <__aeabi_dcmplt>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d04a      	beq.n	8006e92 <_dtoa_r+0x21a>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	3f01      	subs	r7, #1
 8006e00:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e02:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006e04:	1b9b      	subs	r3, r3, r6
 8006e06:	1e5a      	subs	r2, r3, #1
 8006e08:	bf46      	itte	mi
 8006e0a:	f1c3 0801 	rsbmi	r8, r3, #1
 8006e0e:	2300      	movmi	r3, #0
 8006e10:	f04f 0800 	movpl.w	r8, #0
 8006e14:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e16:	bf48      	it	mi
 8006e18:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006e1a:	2f00      	cmp	r7, #0
 8006e1c:	db3b      	blt.n	8006e96 <_dtoa_r+0x21e>
 8006e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e20:	970e      	str	r7, [sp, #56]	@ 0x38
 8006e22:	443b      	add	r3, r7
 8006e24:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e26:	2300      	movs	r3, #0
 8006e28:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e2c:	2b09      	cmp	r3, #9
 8006e2e:	d866      	bhi.n	8006efe <_dtoa_r+0x286>
 8006e30:	2b05      	cmp	r3, #5
 8006e32:	bfc4      	itt	gt
 8006e34:	3b04      	subgt	r3, #4
 8006e36:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006e38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e3a:	bfc8      	it	gt
 8006e3c:	2400      	movgt	r4, #0
 8006e3e:	f1a3 0302 	sub.w	r3, r3, #2
 8006e42:	bfd8      	it	le
 8006e44:	2401      	movle	r4, #1
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d864      	bhi.n	8006f14 <_dtoa_r+0x29c>
 8006e4a:	e8df f003 	tbb	[pc, r3]
 8006e4e:	382b      	.short	0x382b
 8006e50:	5636      	.short	0x5636
 8006e52:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006e56:	441e      	add	r6, r3
 8006e58:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006e5c:	2b20      	cmp	r3, #32
 8006e5e:	bfc1      	itttt	gt
 8006e60:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006e64:	fa08 f803 	lslgt.w	r8, r8, r3
 8006e68:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006e6c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006e70:	bfd6      	itet	le
 8006e72:	f1c3 0320 	rsble	r3, r3, #32
 8006e76:	ea48 0003 	orrgt.w	r0, r8, r3
 8006e7a:	fa04 f003 	lslle.w	r0, r4, r3
 8006e7e:	f7f9 faed 	bl	800045c <__aeabi_ui2d>
 8006e82:	2201      	movs	r2, #1
 8006e84:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006e88:	3e01      	subs	r6, #1
 8006e8a:	9212      	str	r2, [sp, #72]	@ 0x48
 8006e8c:	e775      	b.n	8006d7a <_dtoa_r+0x102>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e7b6      	b.n	8006e00 <_dtoa_r+0x188>
 8006e92:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006e94:	e7b5      	b.n	8006e02 <_dtoa_r+0x18a>
 8006e96:	427b      	negs	r3, r7
 8006e98:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	eba8 0807 	sub.w	r8, r8, r7
 8006ea0:	930e      	str	r3, [sp, #56]	@ 0x38
 8006ea2:	e7c2      	b.n	8006e2a <_dtoa_r+0x1b2>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ea8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	dc35      	bgt.n	8006f1a <_dtoa_r+0x2a2>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006eb6:	9221      	str	r2, [sp, #132]	@ 0x84
 8006eb8:	e00b      	b.n	8006ed2 <_dtoa_r+0x25a>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e7f3      	b.n	8006ea6 <_dtoa_r+0x22e>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ec2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ec4:	18fb      	adds	r3, r7, r3
 8006ec6:	9308      	str	r3, [sp, #32]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	9307      	str	r3, [sp, #28]
 8006ece:	bfb8      	it	lt
 8006ed0:	2301      	movlt	r3, #1
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	2204      	movs	r2, #4
 8006ed6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006eda:	f102 0514 	add.w	r5, r2, #20
 8006ede:	429d      	cmp	r5, r3
 8006ee0:	d91f      	bls.n	8006f22 <_dtoa_r+0x2aa>
 8006ee2:	6041      	str	r1, [r0, #4]
 8006ee4:	4658      	mov	r0, fp
 8006ee6:	f000 fcd7 	bl	8007898 <_Balloc>
 8006eea:	4682      	mov	sl, r0
 8006eec:	2800      	cmp	r0, #0
 8006eee:	d139      	bne.n	8006f64 <_dtoa_r+0x2ec>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	f240 11af 	movw	r1, #431	@ 0x1af
 8006ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8006f60 <_dtoa_r+0x2e8>)
 8006ef8:	e6d2      	b.n	8006ca0 <_dtoa_r+0x28>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e7e0      	b.n	8006ec0 <_dtoa_r+0x248>
 8006efe:	2401      	movs	r4, #1
 8006f00:	2300      	movs	r3, #0
 8006f02:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006f04:	9320      	str	r3, [sp, #128]	@ 0x80
 8006f06:	f04f 33ff 	mov.w	r3, #4294967295
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006f10:	2312      	movs	r3, #18
 8006f12:	e7d0      	b.n	8006eb6 <_dtoa_r+0x23e>
 8006f14:	2301      	movs	r3, #1
 8006f16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f18:	e7f5      	b.n	8006f06 <_dtoa_r+0x28e>
 8006f1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f1c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006f20:	e7d7      	b.n	8006ed2 <_dtoa_r+0x25a>
 8006f22:	3101      	adds	r1, #1
 8006f24:	0052      	lsls	r2, r2, #1
 8006f26:	e7d8      	b.n	8006eda <_dtoa_r+0x262>
 8006f28:	636f4361 	.word	0x636f4361
 8006f2c:	3fd287a7 	.word	0x3fd287a7
 8006f30:	8b60c8b3 	.word	0x8b60c8b3
 8006f34:	3fc68a28 	.word	0x3fc68a28
 8006f38:	509f79fb 	.word	0x509f79fb
 8006f3c:	3fd34413 	.word	0x3fd34413
 8006f40:	08008f85 	.word	0x08008f85
 8006f44:	08008f9c 	.word	0x08008f9c
 8006f48:	7ff00000 	.word	0x7ff00000
 8006f4c:	08008f81 	.word	0x08008f81
 8006f50:	08008f55 	.word	0x08008f55
 8006f54:	08008f54 	.word	0x08008f54
 8006f58:	3ff80000 	.word	0x3ff80000
 8006f5c:	08009098 	.word	0x08009098
 8006f60:	08008ff4 	.word	0x08008ff4
 8006f64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f68:	6018      	str	r0, [r3, #0]
 8006f6a:	9b07      	ldr	r3, [sp, #28]
 8006f6c:	2b0e      	cmp	r3, #14
 8006f6e:	f200 80a4 	bhi.w	80070ba <_dtoa_r+0x442>
 8006f72:	2c00      	cmp	r4, #0
 8006f74:	f000 80a1 	beq.w	80070ba <_dtoa_r+0x442>
 8006f78:	2f00      	cmp	r7, #0
 8006f7a:	dd33      	ble.n	8006fe4 <_dtoa_r+0x36c>
 8006f7c:	4b86      	ldr	r3, [pc, #536]	@ (8007198 <_dtoa_r+0x520>)
 8006f7e:	f007 020f 	and.w	r2, r7, #15
 8006f82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f86:	05f8      	lsls	r0, r7, #23
 8006f88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006f8c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006f90:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006f94:	d516      	bpl.n	8006fc4 <_dtoa_r+0x34c>
 8006f96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f9a:	4b80      	ldr	r3, [pc, #512]	@ (800719c <_dtoa_r+0x524>)
 8006f9c:	2603      	movs	r6, #3
 8006f9e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006fa2:	f7f9 fbff 	bl	80007a4 <__aeabi_ddiv>
 8006fa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006faa:	f004 040f 	and.w	r4, r4, #15
 8006fae:	4d7b      	ldr	r5, [pc, #492]	@ (800719c <_dtoa_r+0x524>)
 8006fb0:	b954      	cbnz	r4, 8006fc8 <_dtoa_r+0x350>
 8006fb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fba:	f7f9 fbf3 	bl	80007a4 <__aeabi_ddiv>
 8006fbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fc2:	e028      	b.n	8007016 <_dtoa_r+0x39e>
 8006fc4:	2602      	movs	r6, #2
 8006fc6:	e7f2      	b.n	8006fae <_dtoa_r+0x336>
 8006fc8:	07e1      	lsls	r1, r4, #31
 8006fca:	d508      	bpl.n	8006fde <_dtoa_r+0x366>
 8006fcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006fd4:	f7f9 fabc 	bl	8000550 <__aeabi_dmul>
 8006fd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fdc:	3601      	adds	r6, #1
 8006fde:	1064      	asrs	r4, r4, #1
 8006fe0:	3508      	adds	r5, #8
 8006fe2:	e7e5      	b.n	8006fb0 <_dtoa_r+0x338>
 8006fe4:	f000 80d2 	beq.w	800718c <_dtoa_r+0x514>
 8006fe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fec:	427c      	negs	r4, r7
 8006fee:	4b6a      	ldr	r3, [pc, #424]	@ (8007198 <_dtoa_r+0x520>)
 8006ff0:	f004 020f 	and.w	r2, r4, #15
 8006ff4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffc:	f7f9 faa8 	bl	8000550 <__aeabi_dmul>
 8007000:	2602      	movs	r6, #2
 8007002:	2300      	movs	r3, #0
 8007004:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007008:	4d64      	ldr	r5, [pc, #400]	@ (800719c <_dtoa_r+0x524>)
 800700a:	1124      	asrs	r4, r4, #4
 800700c:	2c00      	cmp	r4, #0
 800700e:	f040 80b2 	bne.w	8007176 <_dtoa_r+0x4fe>
 8007012:	2b00      	cmp	r3, #0
 8007014:	d1d3      	bne.n	8006fbe <_dtoa_r+0x346>
 8007016:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800701a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 80b7 	beq.w	8007190 <_dtoa_r+0x518>
 8007022:	2200      	movs	r2, #0
 8007024:	4620      	mov	r0, r4
 8007026:	4629      	mov	r1, r5
 8007028:	4b5d      	ldr	r3, [pc, #372]	@ (80071a0 <_dtoa_r+0x528>)
 800702a:	f7f9 fd03 	bl	8000a34 <__aeabi_dcmplt>
 800702e:	2800      	cmp	r0, #0
 8007030:	f000 80ae 	beq.w	8007190 <_dtoa_r+0x518>
 8007034:	9b07      	ldr	r3, [sp, #28]
 8007036:	2b00      	cmp	r3, #0
 8007038:	f000 80aa 	beq.w	8007190 <_dtoa_r+0x518>
 800703c:	9b08      	ldr	r3, [sp, #32]
 800703e:	2b00      	cmp	r3, #0
 8007040:	dd37      	ble.n	80070b2 <_dtoa_r+0x43a>
 8007042:	1e7b      	subs	r3, r7, #1
 8007044:	4620      	mov	r0, r4
 8007046:	9304      	str	r3, [sp, #16]
 8007048:	2200      	movs	r2, #0
 800704a:	4629      	mov	r1, r5
 800704c:	4b55      	ldr	r3, [pc, #340]	@ (80071a4 <_dtoa_r+0x52c>)
 800704e:	f7f9 fa7f 	bl	8000550 <__aeabi_dmul>
 8007052:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007056:	9c08      	ldr	r4, [sp, #32]
 8007058:	3601      	adds	r6, #1
 800705a:	4630      	mov	r0, r6
 800705c:	f7f9 fa0e 	bl	800047c <__aeabi_i2d>
 8007060:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007064:	f7f9 fa74 	bl	8000550 <__aeabi_dmul>
 8007068:	2200      	movs	r2, #0
 800706a:	4b4f      	ldr	r3, [pc, #316]	@ (80071a8 <_dtoa_r+0x530>)
 800706c:	f7f9 f8ba 	bl	80001e4 <__adddf3>
 8007070:	4605      	mov	r5, r0
 8007072:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007076:	2c00      	cmp	r4, #0
 8007078:	f040 809a 	bne.w	80071b0 <_dtoa_r+0x538>
 800707c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007080:	2200      	movs	r2, #0
 8007082:	4b4a      	ldr	r3, [pc, #296]	@ (80071ac <_dtoa_r+0x534>)
 8007084:	f7f9 f8ac 	bl	80001e0 <__aeabi_dsub>
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007090:	462a      	mov	r2, r5
 8007092:	4633      	mov	r3, r6
 8007094:	f7f9 fcec 	bl	8000a70 <__aeabi_dcmpgt>
 8007098:	2800      	cmp	r0, #0
 800709a:	f040 828e 	bne.w	80075ba <_dtoa_r+0x942>
 800709e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070a2:	462a      	mov	r2, r5
 80070a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80070a8:	f7f9 fcc4 	bl	8000a34 <__aeabi_dcmplt>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	f040 8127 	bne.w	8007300 <_dtoa_r+0x688>
 80070b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80070b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80070ba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f2c0 8163 	blt.w	8007388 <_dtoa_r+0x710>
 80070c2:	2f0e      	cmp	r7, #14
 80070c4:	f300 8160 	bgt.w	8007388 <_dtoa_r+0x710>
 80070c8:	4b33      	ldr	r3, [pc, #204]	@ (8007198 <_dtoa_r+0x520>)
 80070ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80070ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80070d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80070d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80070d8:	2b00      	cmp	r3, #0
 80070da:	da03      	bge.n	80070e4 <_dtoa_r+0x46c>
 80070dc:	9b07      	ldr	r3, [sp, #28]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f340 8100 	ble.w	80072e4 <_dtoa_r+0x66c>
 80070e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80070e8:	4656      	mov	r6, sl
 80070ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070ee:	4620      	mov	r0, r4
 80070f0:	4629      	mov	r1, r5
 80070f2:	f7f9 fb57 	bl	80007a4 <__aeabi_ddiv>
 80070f6:	f7f9 fcdb 	bl	8000ab0 <__aeabi_d2iz>
 80070fa:	4680      	mov	r8, r0
 80070fc:	f7f9 f9be 	bl	800047c <__aeabi_i2d>
 8007100:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007104:	f7f9 fa24 	bl	8000550 <__aeabi_dmul>
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	4620      	mov	r0, r4
 800710e:	4629      	mov	r1, r5
 8007110:	f7f9 f866 	bl	80001e0 <__aeabi_dsub>
 8007114:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007118:	9d07      	ldr	r5, [sp, #28]
 800711a:	f806 4b01 	strb.w	r4, [r6], #1
 800711e:	eba6 040a 	sub.w	r4, r6, sl
 8007122:	42a5      	cmp	r5, r4
 8007124:	4602      	mov	r2, r0
 8007126:	460b      	mov	r3, r1
 8007128:	f040 8116 	bne.w	8007358 <_dtoa_r+0x6e0>
 800712c:	f7f9 f85a 	bl	80001e4 <__adddf3>
 8007130:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007134:	4604      	mov	r4, r0
 8007136:	460d      	mov	r5, r1
 8007138:	f7f9 fc9a 	bl	8000a70 <__aeabi_dcmpgt>
 800713c:	2800      	cmp	r0, #0
 800713e:	f040 80f8 	bne.w	8007332 <_dtoa_r+0x6ba>
 8007142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007146:	4620      	mov	r0, r4
 8007148:	4629      	mov	r1, r5
 800714a:	f7f9 fc69 	bl	8000a20 <__aeabi_dcmpeq>
 800714e:	b118      	cbz	r0, 8007158 <_dtoa_r+0x4e0>
 8007150:	f018 0f01 	tst.w	r8, #1
 8007154:	f040 80ed 	bne.w	8007332 <_dtoa_r+0x6ba>
 8007158:	4649      	mov	r1, r9
 800715a:	4658      	mov	r0, fp
 800715c:	f000 fbdc 	bl	8007918 <_Bfree>
 8007160:	2300      	movs	r3, #0
 8007162:	7033      	strb	r3, [r6, #0]
 8007164:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007166:	3701      	adds	r7, #1
 8007168:	601f      	str	r7, [r3, #0]
 800716a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 8320 	beq.w	80077b2 <_dtoa_r+0xb3a>
 8007172:	601e      	str	r6, [r3, #0]
 8007174:	e31d      	b.n	80077b2 <_dtoa_r+0xb3a>
 8007176:	07e2      	lsls	r2, r4, #31
 8007178:	d505      	bpl.n	8007186 <_dtoa_r+0x50e>
 800717a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800717e:	f7f9 f9e7 	bl	8000550 <__aeabi_dmul>
 8007182:	2301      	movs	r3, #1
 8007184:	3601      	adds	r6, #1
 8007186:	1064      	asrs	r4, r4, #1
 8007188:	3508      	adds	r5, #8
 800718a:	e73f      	b.n	800700c <_dtoa_r+0x394>
 800718c:	2602      	movs	r6, #2
 800718e:	e742      	b.n	8007016 <_dtoa_r+0x39e>
 8007190:	9c07      	ldr	r4, [sp, #28]
 8007192:	9704      	str	r7, [sp, #16]
 8007194:	e761      	b.n	800705a <_dtoa_r+0x3e2>
 8007196:	bf00      	nop
 8007198:	08009098 	.word	0x08009098
 800719c:	08009070 	.word	0x08009070
 80071a0:	3ff00000 	.word	0x3ff00000
 80071a4:	40240000 	.word	0x40240000
 80071a8:	401c0000 	.word	0x401c0000
 80071ac:	40140000 	.word	0x40140000
 80071b0:	4b70      	ldr	r3, [pc, #448]	@ (8007374 <_dtoa_r+0x6fc>)
 80071b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80071b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80071b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80071bc:	4454      	add	r4, sl
 80071be:	2900      	cmp	r1, #0
 80071c0:	d045      	beq.n	800724e <_dtoa_r+0x5d6>
 80071c2:	2000      	movs	r0, #0
 80071c4:	496c      	ldr	r1, [pc, #432]	@ (8007378 <_dtoa_r+0x700>)
 80071c6:	f7f9 faed 	bl	80007a4 <__aeabi_ddiv>
 80071ca:	4633      	mov	r3, r6
 80071cc:	462a      	mov	r2, r5
 80071ce:	f7f9 f807 	bl	80001e0 <__aeabi_dsub>
 80071d2:	4656      	mov	r6, sl
 80071d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071dc:	f7f9 fc68 	bl	8000ab0 <__aeabi_d2iz>
 80071e0:	4605      	mov	r5, r0
 80071e2:	f7f9 f94b 	bl	800047c <__aeabi_i2d>
 80071e6:	4602      	mov	r2, r0
 80071e8:	460b      	mov	r3, r1
 80071ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071ee:	f7f8 fff7 	bl	80001e0 <__aeabi_dsub>
 80071f2:	4602      	mov	r2, r0
 80071f4:	460b      	mov	r3, r1
 80071f6:	3530      	adds	r5, #48	@ 0x30
 80071f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007200:	f806 5b01 	strb.w	r5, [r6], #1
 8007204:	f7f9 fc16 	bl	8000a34 <__aeabi_dcmplt>
 8007208:	2800      	cmp	r0, #0
 800720a:	d163      	bne.n	80072d4 <_dtoa_r+0x65c>
 800720c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007210:	2000      	movs	r0, #0
 8007212:	495a      	ldr	r1, [pc, #360]	@ (800737c <_dtoa_r+0x704>)
 8007214:	f7f8 ffe4 	bl	80001e0 <__aeabi_dsub>
 8007218:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800721c:	f7f9 fc0a 	bl	8000a34 <__aeabi_dcmplt>
 8007220:	2800      	cmp	r0, #0
 8007222:	f040 8087 	bne.w	8007334 <_dtoa_r+0x6bc>
 8007226:	42a6      	cmp	r6, r4
 8007228:	f43f af43 	beq.w	80070b2 <_dtoa_r+0x43a>
 800722c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007230:	2200      	movs	r2, #0
 8007232:	4b53      	ldr	r3, [pc, #332]	@ (8007380 <_dtoa_r+0x708>)
 8007234:	f7f9 f98c 	bl	8000550 <__aeabi_dmul>
 8007238:	2200      	movs	r2, #0
 800723a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800723e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007242:	4b4f      	ldr	r3, [pc, #316]	@ (8007380 <_dtoa_r+0x708>)
 8007244:	f7f9 f984 	bl	8000550 <__aeabi_dmul>
 8007248:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800724c:	e7c4      	b.n	80071d8 <_dtoa_r+0x560>
 800724e:	4631      	mov	r1, r6
 8007250:	4628      	mov	r0, r5
 8007252:	f7f9 f97d 	bl	8000550 <__aeabi_dmul>
 8007256:	4656      	mov	r6, sl
 8007258:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800725c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800725e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007262:	f7f9 fc25 	bl	8000ab0 <__aeabi_d2iz>
 8007266:	4605      	mov	r5, r0
 8007268:	f7f9 f908 	bl	800047c <__aeabi_i2d>
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007274:	f7f8 ffb4 	bl	80001e0 <__aeabi_dsub>
 8007278:	4602      	mov	r2, r0
 800727a:	460b      	mov	r3, r1
 800727c:	3530      	adds	r5, #48	@ 0x30
 800727e:	f806 5b01 	strb.w	r5, [r6], #1
 8007282:	42a6      	cmp	r6, r4
 8007284:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007288:	f04f 0200 	mov.w	r2, #0
 800728c:	d124      	bne.n	80072d8 <_dtoa_r+0x660>
 800728e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007292:	4b39      	ldr	r3, [pc, #228]	@ (8007378 <_dtoa_r+0x700>)
 8007294:	f7f8 ffa6 	bl	80001e4 <__adddf3>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072a0:	f7f9 fbe6 	bl	8000a70 <__aeabi_dcmpgt>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	d145      	bne.n	8007334 <_dtoa_r+0x6bc>
 80072a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80072ac:	2000      	movs	r0, #0
 80072ae:	4932      	ldr	r1, [pc, #200]	@ (8007378 <_dtoa_r+0x700>)
 80072b0:	f7f8 ff96 	bl	80001e0 <__aeabi_dsub>
 80072b4:	4602      	mov	r2, r0
 80072b6:	460b      	mov	r3, r1
 80072b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072bc:	f7f9 fbba 	bl	8000a34 <__aeabi_dcmplt>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	f43f aef6 	beq.w	80070b2 <_dtoa_r+0x43a>
 80072c6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80072c8:	1e73      	subs	r3, r6, #1
 80072ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 80072cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80072d0:	2b30      	cmp	r3, #48	@ 0x30
 80072d2:	d0f8      	beq.n	80072c6 <_dtoa_r+0x64e>
 80072d4:	9f04      	ldr	r7, [sp, #16]
 80072d6:	e73f      	b.n	8007158 <_dtoa_r+0x4e0>
 80072d8:	4b29      	ldr	r3, [pc, #164]	@ (8007380 <_dtoa_r+0x708>)
 80072da:	f7f9 f939 	bl	8000550 <__aeabi_dmul>
 80072de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072e2:	e7bc      	b.n	800725e <_dtoa_r+0x5e6>
 80072e4:	d10c      	bne.n	8007300 <_dtoa_r+0x688>
 80072e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072ea:	2200      	movs	r2, #0
 80072ec:	4b25      	ldr	r3, [pc, #148]	@ (8007384 <_dtoa_r+0x70c>)
 80072ee:	f7f9 f92f 	bl	8000550 <__aeabi_dmul>
 80072f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072f6:	f7f9 fbb1 	bl	8000a5c <__aeabi_dcmpge>
 80072fa:	2800      	cmp	r0, #0
 80072fc:	f000 815b 	beq.w	80075b6 <_dtoa_r+0x93e>
 8007300:	2400      	movs	r4, #0
 8007302:	4625      	mov	r5, r4
 8007304:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007306:	4656      	mov	r6, sl
 8007308:	43db      	mvns	r3, r3
 800730a:	9304      	str	r3, [sp, #16]
 800730c:	2700      	movs	r7, #0
 800730e:	4621      	mov	r1, r4
 8007310:	4658      	mov	r0, fp
 8007312:	f000 fb01 	bl	8007918 <_Bfree>
 8007316:	2d00      	cmp	r5, #0
 8007318:	d0dc      	beq.n	80072d4 <_dtoa_r+0x65c>
 800731a:	b12f      	cbz	r7, 8007328 <_dtoa_r+0x6b0>
 800731c:	42af      	cmp	r7, r5
 800731e:	d003      	beq.n	8007328 <_dtoa_r+0x6b0>
 8007320:	4639      	mov	r1, r7
 8007322:	4658      	mov	r0, fp
 8007324:	f000 faf8 	bl	8007918 <_Bfree>
 8007328:	4629      	mov	r1, r5
 800732a:	4658      	mov	r0, fp
 800732c:	f000 faf4 	bl	8007918 <_Bfree>
 8007330:	e7d0      	b.n	80072d4 <_dtoa_r+0x65c>
 8007332:	9704      	str	r7, [sp, #16]
 8007334:	4633      	mov	r3, r6
 8007336:	461e      	mov	r6, r3
 8007338:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800733c:	2a39      	cmp	r2, #57	@ 0x39
 800733e:	d107      	bne.n	8007350 <_dtoa_r+0x6d8>
 8007340:	459a      	cmp	sl, r3
 8007342:	d1f8      	bne.n	8007336 <_dtoa_r+0x6be>
 8007344:	9a04      	ldr	r2, [sp, #16]
 8007346:	3201      	adds	r2, #1
 8007348:	9204      	str	r2, [sp, #16]
 800734a:	2230      	movs	r2, #48	@ 0x30
 800734c:	f88a 2000 	strb.w	r2, [sl]
 8007350:	781a      	ldrb	r2, [r3, #0]
 8007352:	3201      	adds	r2, #1
 8007354:	701a      	strb	r2, [r3, #0]
 8007356:	e7bd      	b.n	80072d4 <_dtoa_r+0x65c>
 8007358:	2200      	movs	r2, #0
 800735a:	4b09      	ldr	r3, [pc, #36]	@ (8007380 <_dtoa_r+0x708>)
 800735c:	f7f9 f8f8 	bl	8000550 <__aeabi_dmul>
 8007360:	2200      	movs	r2, #0
 8007362:	2300      	movs	r3, #0
 8007364:	4604      	mov	r4, r0
 8007366:	460d      	mov	r5, r1
 8007368:	f7f9 fb5a 	bl	8000a20 <__aeabi_dcmpeq>
 800736c:	2800      	cmp	r0, #0
 800736e:	f43f aebc 	beq.w	80070ea <_dtoa_r+0x472>
 8007372:	e6f1      	b.n	8007158 <_dtoa_r+0x4e0>
 8007374:	08009098 	.word	0x08009098
 8007378:	3fe00000 	.word	0x3fe00000
 800737c:	3ff00000 	.word	0x3ff00000
 8007380:	40240000 	.word	0x40240000
 8007384:	40140000 	.word	0x40140000
 8007388:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800738a:	2a00      	cmp	r2, #0
 800738c:	f000 80db 	beq.w	8007546 <_dtoa_r+0x8ce>
 8007390:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007392:	2a01      	cmp	r2, #1
 8007394:	f300 80bf 	bgt.w	8007516 <_dtoa_r+0x89e>
 8007398:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800739a:	2a00      	cmp	r2, #0
 800739c:	f000 80b7 	beq.w	800750e <_dtoa_r+0x896>
 80073a0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80073a4:	4646      	mov	r6, r8
 80073a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80073a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073aa:	2101      	movs	r1, #1
 80073ac:	441a      	add	r2, r3
 80073ae:	4658      	mov	r0, fp
 80073b0:	4498      	add	r8, r3
 80073b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80073b4:	f000 fb64 	bl	8007a80 <__i2b>
 80073b8:	4605      	mov	r5, r0
 80073ba:	b15e      	cbz	r6, 80073d4 <_dtoa_r+0x75c>
 80073bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073be:	2b00      	cmp	r3, #0
 80073c0:	dd08      	ble.n	80073d4 <_dtoa_r+0x75c>
 80073c2:	42b3      	cmp	r3, r6
 80073c4:	bfa8      	it	ge
 80073c6:	4633      	movge	r3, r6
 80073c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073ca:	eba8 0803 	sub.w	r8, r8, r3
 80073ce:	1af6      	subs	r6, r6, r3
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80073d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073d6:	b1f3      	cbz	r3, 8007416 <_dtoa_r+0x79e>
 80073d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f000 80b7 	beq.w	800754e <_dtoa_r+0x8d6>
 80073e0:	b18c      	cbz	r4, 8007406 <_dtoa_r+0x78e>
 80073e2:	4629      	mov	r1, r5
 80073e4:	4622      	mov	r2, r4
 80073e6:	4658      	mov	r0, fp
 80073e8:	f000 fc08 	bl	8007bfc <__pow5mult>
 80073ec:	464a      	mov	r2, r9
 80073ee:	4601      	mov	r1, r0
 80073f0:	4605      	mov	r5, r0
 80073f2:	4658      	mov	r0, fp
 80073f4:	f000 fb5a 	bl	8007aac <__multiply>
 80073f8:	4649      	mov	r1, r9
 80073fa:	9004      	str	r0, [sp, #16]
 80073fc:	4658      	mov	r0, fp
 80073fe:	f000 fa8b 	bl	8007918 <_Bfree>
 8007402:	9b04      	ldr	r3, [sp, #16]
 8007404:	4699      	mov	r9, r3
 8007406:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007408:	1b1a      	subs	r2, r3, r4
 800740a:	d004      	beq.n	8007416 <_dtoa_r+0x79e>
 800740c:	4649      	mov	r1, r9
 800740e:	4658      	mov	r0, fp
 8007410:	f000 fbf4 	bl	8007bfc <__pow5mult>
 8007414:	4681      	mov	r9, r0
 8007416:	2101      	movs	r1, #1
 8007418:	4658      	mov	r0, fp
 800741a:	f000 fb31 	bl	8007a80 <__i2b>
 800741e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007420:	4604      	mov	r4, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 81c9 	beq.w	80077ba <_dtoa_r+0xb42>
 8007428:	461a      	mov	r2, r3
 800742a:	4601      	mov	r1, r0
 800742c:	4658      	mov	r0, fp
 800742e:	f000 fbe5 	bl	8007bfc <__pow5mult>
 8007432:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007434:	4604      	mov	r4, r0
 8007436:	2b01      	cmp	r3, #1
 8007438:	f300 808f 	bgt.w	800755a <_dtoa_r+0x8e2>
 800743c:	9b02      	ldr	r3, [sp, #8]
 800743e:	2b00      	cmp	r3, #0
 8007440:	f040 8087 	bne.w	8007552 <_dtoa_r+0x8da>
 8007444:	9b03      	ldr	r3, [sp, #12]
 8007446:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800744a:	2b00      	cmp	r3, #0
 800744c:	f040 8083 	bne.w	8007556 <_dtoa_r+0x8de>
 8007450:	9b03      	ldr	r3, [sp, #12]
 8007452:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007456:	0d1b      	lsrs	r3, r3, #20
 8007458:	051b      	lsls	r3, r3, #20
 800745a:	b12b      	cbz	r3, 8007468 <_dtoa_r+0x7f0>
 800745c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800745e:	f108 0801 	add.w	r8, r8, #1
 8007462:	3301      	adds	r3, #1
 8007464:	9309      	str	r3, [sp, #36]	@ 0x24
 8007466:	2301      	movs	r3, #1
 8007468:	930a      	str	r3, [sp, #40]	@ 0x28
 800746a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800746c:	2b00      	cmp	r3, #0
 800746e:	f000 81aa 	beq.w	80077c6 <_dtoa_r+0xb4e>
 8007472:	6923      	ldr	r3, [r4, #16]
 8007474:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007478:	6918      	ldr	r0, [r3, #16]
 800747a:	f000 fab5 	bl	80079e8 <__hi0bits>
 800747e:	f1c0 0020 	rsb	r0, r0, #32
 8007482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007484:	4418      	add	r0, r3
 8007486:	f010 001f 	ands.w	r0, r0, #31
 800748a:	d071      	beq.n	8007570 <_dtoa_r+0x8f8>
 800748c:	f1c0 0320 	rsb	r3, r0, #32
 8007490:	2b04      	cmp	r3, #4
 8007492:	dd65      	ble.n	8007560 <_dtoa_r+0x8e8>
 8007494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007496:	f1c0 001c 	rsb	r0, r0, #28
 800749a:	4403      	add	r3, r0
 800749c:	4480      	add	r8, r0
 800749e:	4406      	add	r6, r0
 80074a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80074a2:	f1b8 0f00 	cmp.w	r8, #0
 80074a6:	dd05      	ble.n	80074b4 <_dtoa_r+0x83c>
 80074a8:	4649      	mov	r1, r9
 80074aa:	4642      	mov	r2, r8
 80074ac:	4658      	mov	r0, fp
 80074ae:	f000 fbff 	bl	8007cb0 <__lshift>
 80074b2:	4681      	mov	r9, r0
 80074b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	dd05      	ble.n	80074c6 <_dtoa_r+0x84e>
 80074ba:	4621      	mov	r1, r4
 80074bc:	461a      	mov	r2, r3
 80074be:	4658      	mov	r0, fp
 80074c0:	f000 fbf6 	bl	8007cb0 <__lshift>
 80074c4:	4604      	mov	r4, r0
 80074c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d053      	beq.n	8007574 <_dtoa_r+0x8fc>
 80074cc:	4621      	mov	r1, r4
 80074ce:	4648      	mov	r0, r9
 80074d0:	f000 fc5a 	bl	8007d88 <__mcmp>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	da4d      	bge.n	8007574 <_dtoa_r+0x8fc>
 80074d8:	1e7b      	subs	r3, r7, #1
 80074da:	4649      	mov	r1, r9
 80074dc:	9304      	str	r3, [sp, #16]
 80074de:	220a      	movs	r2, #10
 80074e0:	2300      	movs	r3, #0
 80074e2:	4658      	mov	r0, fp
 80074e4:	f000 fa3a 	bl	800795c <__multadd>
 80074e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074ea:	4681      	mov	r9, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 816c 	beq.w	80077ca <_dtoa_r+0xb52>
 80074f2:	2300      	movs	r3, #0
 80074f4:	4629      	mov	r1, r5
 80074f6:	220a      	movs	r2, #10
 80074f8:	4658      	mov	r0, fp
 80074fa:	f000 fa2f 	bl	800795c <__multadd>
 80074fe:	9b08      	ldr	r3, [sp, #32]
 8007500:	4605      	mov	r5, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	dc61      	bgt.n	80075ca <_dtoa_r+0x952>
 8007506:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007508:	2b02      	cmp	r3, #2
 800750a:	dc3b      	bgt.n	8007584 <_dtoa_r+0x90c>
 800750c:	e05d      	b.n	80075ca <_dtoa_r+0x952>
 800750e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007510:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007514:	e746      	b.n	80073a4 <_dtoa_r+0x72c>
 8007516:	9b07      	ldr	r3, [sp, #28]
 8007518:	1e5c      	subs	r4, r3, #1
 800751a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800751c:	42a3      	cmp	r3, r4
 800751e:	bfbf      	itttt	lt
 8007520:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007522:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007524:	1ae3      	sublt	r3, r4, r3
 8007526:	18d2      	addlt	r2, r2, r3
 8007528:	bfa8      	it	ge
 800752a:	1b1c      	subge	r4, r3, r4
 800752c:	9b07      	ldr	r3, [sp, #28]
 800752e:	bfbe      	ittt	lt
 8007530:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007532:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007534:	2400      	movlt	r4, #0
 8007536:	2b00      	cmp	r3, #0
 8007538:	bfb5      	itete	lt
 800753a:	eba8 0603 	sublt.w	r6, r8, r3
 800753e:	4646      	movge	r6, r8
 8007540:	2300      	movlt	r3, #0
 8007542:	9b07      	ldrge	r3, [sp, #28]
 8007544:	e730      	b.n	80073a8 <_dtoa_r+0x730>
 8007546:	4646      	mov	r6, r8
 8007548:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800754a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800754c:	e735      	b.n	80073ba <_dtoa_r+0x742>
 800754e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007550:	e75c      	b.n	800740c <_dtoa_r+0x794>
 8007552:	2300      	movs	r3, #0
 8007554:	e788      	b.n	8007468 <_dtoa_r+0x7f0>
 8007556:	9b02      	ldr	r3, [sp, #8]
 8007558:	e786      	b.n	8007468 <_dtoa_r+0x7f0>
 800755a:	2300      	movs	r3, #0
 800755c:	930a      	str	r3, [sp, #40]	@ 0x28
 800755e:	e788      	b.n	8007472 <_dtoa_r+0x7fa>
 8007560:	d09f      	beq.n	80074a2 <_dtoa_r+0x82a>
 8007562:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007564:	331c      	adds	r3, #28
 8007566:	441a      	add	r2, r3
 8007568:	4498      	add	r8, r3
 800756a:	441e      	add	r6, r3
 800756c:	9209      	str	r2, [sp, #36]	@ 0x24
 800756e:	e798      	b.n	80074a2 <_dtoa_r+0x82a>
 8007570:	4603      	mov	r3, r0
 8007572:	e7f6      	b.n	8007562 <_dtoa_r+0x8ea>
 8007574:	9b07      	ldr	r3, [sp, #28]
 8007576:	9704      	str	r7, [sp, #16]
 8007578:	2b00      	cmp	r3, #0
 800757a:	dc20      	bgt.n	80075be <_dtoa_r+0x946>
 800757c:	9308      	str	r3, [sp, #32]
 800757e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007580:	2b02      	cmp	r3, #2
 8007582:	dd1e      	ble.n	80075c2 <_dtoa_r+0x94a>
 8007584:	9b08      	ldr	r3, [sp, #32]
 8007586:	2b00      	cmp	r3, #0
 8007588:	f47f aebc 	bne.w	8007304 <_dtoa_r+0x68c>
 800758c:	4621      	mov	r1, r4
 800758e:	2205      	movs	r2, #5
 8007590:	4658      	mov	r0, fp
 8007592:	f000 f9e3 	bl	800795c <__multadd>
 8007596:	4601      	mov	r1, r0
 8007598:	4604      	mov	r4, r0
 800759a:	4648      	mov	r0, r9
 800759c:	f000 fbf4 	bl	8007d88 <__mcmp>
 80075a0:	2800      	cmp	r0, #0
 80075a2:	f77f aeaf 	ble.w	8007304 <_dtoa_r+0x68c>
 80075a6:	2331      	movs	r3, #49	@ 0x31
 80075a8:	4656      	mov	r6, sl
 80075aa:	f806 3b01 	strb.w	r3, [r6], #1
 80075ae:	9b04      	ldr	r3, [sp, #16]
 80075b0:	3301      	adds	r3, #1
 80075b2:	9304      	str	r3, [sp, #16]
 80075b4:	e6aa      	b.n	800730c <_dtoa_r+0x694>
 80075b6:	9c07      	ldr	r4, [sp, #28]
 80075b8:	9704      	str	r7, [sp, #16]
 80075ba:	4625      	mov	r5, r4
 80075bc:	e7f3      	b.n	80075a6 <_dtoa_r+0x92e>
 80075be:	9b07      	ldr	r3, [sp, #28]
 80075c0:	9308      	str	r3, [sp, #32]
 80075c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 8104 	beq.w	80077d2 <_dtoa_r+0xb5a>
 80075ca:	2e00      	cmp	r6, #0
 80075cc:	dd05      	ble.n	80075da <_dtoa_r+0x962>
 80075ce:	4629      	mov	r1, r5
 80075d0:	4632      	mov	r2, r6
 80075d2:	4658      	mov	r0, fp
 80075d4:	f000 fb6c 	bl	8007cb0 <__lshift>
 80075d8:	4605      	mov	r5, r0
 80075da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d05a      	beq.n	8007696 <_dtoa_r+0xa1e>
 80075e0:	4658      	mov	r0, fp
 80075e2:	6869      	ldr	r1, [r5, #4]
 80075e4:	f000 f958 	bl	8007898 <_Balloc>
 80075e8:	4606      	mov	r6, r0
 80075ea:	b928      	cbnz	r0, 80075f8 <_dtoa_r+0x980>
 80075ec:	4602      	mov	r2, r0
 80075ee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80075f2:	4b83      	ldr	r3, [pc, #524]	@ (8007800 <_dtoa_r+0xb88>)
 80075f4:	f7ff bb54 	b.w	8006ca0 <_dtoa_r+0x28>
 80075f8:	692a      	ldr	r2, [r5, #16]
 80075fa:	f105 010c 	add.w	r1, r5, #12
 80075fe:	3202      	adds	r2, #2
 8007600:	0092      	lsls	r2, r2, #2
 8007602:	300c      	adds	r0, #12
 8007604:	f000 ff44 	bl	8008490 <memcpy>
 8007608:	2201      	movs	r2, #1
 800760a:	4631      	mov	r1, r6
 800760c:	4658      	mov	r0, fp
 800760e:	f000 fb4f 	bl	8007cb0 <__lshift>
 8007612:	462f      	mov	r7, r5
 8007614:	4605      	mov	r5, r0
 8007616:	f10a 0301 	add.w	r3, sl, #1
 800761a:	9307      	str	r3, [sp, #28]
 800761c:	9b08      	ldr	r3, [sp, #32]
 800761e:	4453      	add	r3, sl
 8007620:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007622:	9b02      	ldr	r3, [sp, #8]
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	930a      	str	r3, [sp, #40]	@ 0x28
 800762a:	9b07      	ldr	r3, [sp, #28]
 800762c:	4621      	mov	r1, r4
 800762e:	3b01      	subs	r3, #1
 8007630:	4648      	mov	r0, r9
 8007632:	9302      	str	r3, [sp, #8]
 8007634:	f7ff fa97 	bl	8006b66 <quorem>
 8007638:	4639      	mov	r1, r7
 800763a:	9008      	str	r0, [sp, #32]
 800763c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007640:	4648      	mov	r0, r9
 8007642:	f000 fba1 	bl	8007d88 <__mcmp>
 8007646:	462a      	mov	r2, r5
 8007648:	9009      	str	r0, [sp, #36]	@ 0x24
 800764a:	4621      	mov	r1, r4
 800764c:	4658      	mov	r0, fp
 800764e:	f000 fbb7 	bl	8007dc0 <__mdiff>
 8007652:	68c2      	ldr	r2, [r0, #12]
 8007654:	4606      	mov	r6, r0
 8007656:	bb02      	cbnz	r2, 800769a <_dtoa_r+0xa22>
 8007658:	4601      	mov	r1, r0
 800765a:	4648      	mov	r0, r9
 800765c:	f000 fb94 	bl	8007d88 <__mcmp>
 8007660:	4602      	mov	r2, r0
 8007662:	4631      	mov	r1, r6
 8007664:	4658      	mov	r0, fp
 8007666:	920c      	str	r2, [sp, #48]	@ 0x30
 8007668:	f000 f956 	bl	8007918 <_Bfree>
 800766c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800766e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007670:	9e07      	ldr	r6, [sp, #28]
 8007672:	ea43 0102 	orr.w	r1, r3, r2
 8007676:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007678:	4319      	orrs	r1, r3
 800767a:	d110      	bne.n	800769e <_dtoa_r+0xa26>
 800767c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007680:	d029      	beq.n	80076d6 <_dtoa_r+0xa5e>
 8007682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007684:	2b00      	cmp	r3, #0
 8007686:	dd02      	ble.n	800768e <_dtoa_r+0xa16>
 8007688:	9b08      	ldr	r3, [sp, #32]
 800768a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800768e:	9b02      	ldr	r3, [sp, #8]
 8007690:	f883 8000 	strb.w	r8, [r3]
 8007694:	e63b      	b.n	800730e <_dtoa_r+0x696>
 8007696:	4628      	mov	r0, r5
 8007698:	e7bb      	b.n	8007612 <_dtoa_r+0x99a>
 800769a:	2201      	movs	r2, #1
 800769c:	e7e1      	b.n	8007662 <_dtoa_r+0x9ea>
 800769e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	db04      	blt.n	80076ae <_dtoa_r+0xa36>
 80076a4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80076a6:	430b      	orrs	r3, r1
 80076a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80076aa:	430b      	orrs	r3, r1
 80076ac:	d120      	bne.n	80076f0 <_dtoa_r+0xa78>
 80076ae:	2a00      	cmp	r2, #0
 80076b0:	dded      	ble.n	800768e <_dtoa_r+0xa16>
 80076b2:	4649      	mov	r1, r9
 80076b4:	2201      	movs	r2, #1
 80076b6:	4658      	mov	r0, fp
 80076b8:	f000 fafa 	bl	8007cb0 <__lshift>
 80076bc:	4621      	mov	r1, r4
 80076be:	4681      	mov	r9, r0
 80076c0:	f000 fb62 	bl	8007d88 <__mcmp>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	dc03      	bgt.n	80076d0 <_dtoa_r+0xa58>
 80076c8:	d1e1      	bne.n	800768e <_dtoa_r+0xa16>
 80076ca:	f018 0f01 	tst.w	r8, #1
 80076ce:	d0de      	beq.n	800768e <_dtoa_r+0xa16>
 80076d0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80076d4:	d1d8      	bne.n	8007688 <_dtoa_r+0xa10>
 80076d6:	2339      	movs	r3, #57	@ 0x39
 80076d8:	9a02      	ldr	r2, [sp, #8]
 80076da:	7013      	strb	r3, [r2, #0]
 80076dc:	4633      	mov	r3, r6
 80076de:	461e      	mov	r6, r3
 80076e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80076e4:	3b01      	subs	r3, #1
 80076e6:	2a39      	cmp	r2, #57	@ 0x39
 80076e8:	d052      	beq.n	8007790 <_dtoa_r+0xb18>
 80076ea:	3201      	adds	r2, #1
 80076ec:	701a      	strb	r2, [r3, #0]
 80076ee:	e60e      	b.n	800730e <_dtoa_r+0x696>
 80076f0:	2a00      	cmp	r2, #0
 80076f2:	dd07      	ble.n	8007704 <_dtoa_r+0xa8c>
 80076f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80076f8:	d0ed      	beq.n	80076d6 <_dtoa_r+0xa5e>
 80076fa:	9a02      	ldr	r2, [sp, #8]
 80076fc:	f108 0301 	add.w	r3, r8, #1
 8007700:	7013      	strb	r3, [r2, #0]
 8007702:	e604      	b.n	800730e <_dtoa_r+0x696>
 8007704:	9b07      	ldr	r3, [sp, #28]
 8007706:	9a07      	ldr	r2, [sp, #28]
 8007708:	f803 8c01 	strb.w	r8, [r3, #-1]
 800770c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800770e:	4293      	cmp	r3, r2
 8007710:	d028      	beq.n	8007764 <_dtoa_r+0xaec>
 8007712:	4649      	mov	r1, r9
 8007714:	2300      	movs	r3, #0
 8007716:	220a      	movs	r2, #10
 8007718:	4658      	mov	r0, fp
 800771a:	f000 f91f 	bl	800795c <__multadd>
 800771e:	42af      	cmp	r7, r5
 8007720:	4681      	mov	r9, r0
 8007722:	f04f 0300 	mov.w	r3, #0
 8007726:	f04f 020a 	mov.w	r2, #10
 800772a:	4639      	mov	r1, r7
 800772c:	4658      	mov	r0, fp
 800772e:	d107      	bne.n	8007740 <_dtoa_r+0xac8>
 8007730:	f000 f914 	bl	800795c <__multadd>
 8007734:	4607      	mov	r7, r0
 8007736:	4605      	mov	r5, r0
 8007738:	9b07      	ldr	r3, [sp, #28]
 800773a:	3301      	adds	r3, #1
 800773c:	9307      	str	r3, [sp, #28]
 800773e:	e774      	b.n	800762a <_dtoa_r+0x9b2>
 8007740:	f000 f90c 	bl	800795c <__multadd>
 8007744:	4629      	mov	r1, r5
 8007746:	4607      	mov	r7, r0
 8007748:	2300      	movs	r3, #0
 800774a:	220a      	movs	r2, #10
 800774c:	4658      	mov	r0, fp
 800774e:	f000 f905 	bl	800795c <__multadd>
 8007752:	4605      	mov	r5, r0
 8007754:	e7f0      	b.n	8007738 <_dtoa_r+0xac0>
 8007756:	9b08      	ldr	r3, [sp, #32]
 8007758:	2700      	movs	r7, #0
 800775a:	2b00      	cmp	r3, #0
 800775c:	bfcc      	ite	gt
 800775e:	461e      	movgt	r6, r3
 8007760:	2601      	movle	r6, #1
 8007762:	4456      	add	r6, sl
 8007764:	4649      	mov	r1, r9
 8007766:	2201      	movs	r2, #1
 8007768:	4658      	mov	r0, fp
 800776a:	f000 faa1 	bl	8007cb0 <__lshift>
 800776e:	4621      	mov	r1, r4
 8007770:	4681      	mov	r9, r0
 8007772:	f000 fb09 	bl	8007d88 <__mcmp>
 8007776:	2800      	cmp	r0, #0
 8007778:	dcb0      	bgt.n	80076dc <_dtoa_r+0xa64>
 800777a:	d102      	bne.n	8007782 <_dtoa_r+0xb0a>
 800777c:	f018 0f01 	tst.w	r8, #1
 8007780:	d1ac      	bne.n	80076dc <_dtoa_r+0xa64>
 8007782:	4633      	mov	r3, r6
 8007784:	461e      	mov	r6, r3
 8007786:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800778a:	2a30      	cmp	r2, #48	@ 0x30
 800778c:	d0fa      	beq.n	8007784 <_dtoa_r+0xb0c>
 800778e:	e5be      	b.n	800730e <_dtoa_r+0x696>
 8007790:	459a      	cmp	sl, r3
 8007792:	d1a4      	bne.n	80076de <_dtoa_r+0xa66>
 8007794:	9b04      	ldr	r3, [sp, #16]
 8007796:	3301      	adds	r3, #1
 8007798:	9304      	str	r3, [sp, #16]
 800779a:	2331      	movs	r3, #49	@ 0x31
 800779c:	f88a 3000 	strb.w	r3, [sl]
 80077a0:	e5b5      	b.n	800730e <_dtoa_r+0x696>
 80077a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80077a4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007804 <_dtoa_r+0xb8c>
 80077a8:	b11b      	cbz	r3, 80077b2 <_dtoa_r+0xb3a>
 80077aa:	f10a 0308 	add.w	r3, sl, #8
 80077ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80077b0:	6013      	str	r3, [r2, #0]
 80077b2:	4650      	mov	r0, sl
 80077b4:	b017      	add	sp, #92	@ 0x5c
 80077b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80077bc:	2b01      	cmp	r3, #1
 80077be:	f77f ae3d 	ble.w	800743c <_dtoa_r+0x7c4>
 80077c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80077c6:	2001      	movs	r0, #1
 80077c8:	e65b      	b.n	8007482 <_dtoa_r+0x80a>
 80077ca:	9b08      	ldr	r3, [sp, #32]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f77f aed6 	ble.w	800757e <_dtoa_r+0x906>
 80077d2:	4656      	mov	r6, sl
 80077d4:	4621      	mov	r1, r4
 80077d6:	4648      	mov	r0, r9
 80077d8:	f7ff f9c5 	bl	8006b66 <quorem>
 80077dc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80077e0:	9b08      	ldr	r3, [sp, #32]
 80077e2:	f806 8b01 	strb.w	r8, [r6], #1
 80077e6:	eba6 020a 	sub.w	r2, r6, sl
 80077ea:	4293      	cmp	r3, r2
 80077ec:	ddb3      	ble.n	8007756 <_dtoa_r+0xade>
 80077ee:	4649      	mov	r1, r9
 80077f0:	2300      	movs	r3, #0
 80077f2:	220a      	movs	r2, #10
 80077f4:	4658      	mov	r0, fp
 80077f6:	f000 f8b1 	bl	800795c <__multadd>
 80077fa:	4681      	mov	r9, r0
 80077fc:	e7ea      	b.n	80077d4 <_dtoa_r+0xb5c>
 80077fe:	bf00      	nop
 8007800:	08008ff4 	.word	0x08008ff4
 8007804:	08008f78 	.word	0x08008f78

08007808 <_free_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	4605      	mov	r5, r0
 800780c:	2900      	cmp	r1, #0
 800780e:	d040      	beq.n	8007892 <_free_r+0x8a>
 8007810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007814:	1f0c      	subs	r4, r1, #4
 8007816:	2b00      	cmp	r3, #0
 8007818:	bfb8      	it	lt
 800781a:	18e4      	addlt	r4, r4, r3
 800781c:	f7fe fb86 	bl	8005f2c <__malloc_lock>
 8007820:	4a1c      	ldr	r2, [pc, #112]	@ (8007894 <_free_r+0x8c>)
 8007822:	6813      	ldr	r3, [r2, #0]
 8007824:	b933      	cbnz	r3, 8007834 <_free_r+0x2c>
 8007826:	6063      	str	r3, [r4, #4]
 8007828:	6014      	str	r4, [r2, #0]
 800782a:	4628      	mov	r0, r5
 800782c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007830:	f7fe bb82 	b.w	8005f38 <__malloc_unlock>
 8007834:	42a3      	cmp	r3, r4
 8007836:	d908      	bls.n	800784a <_free_r+0x42>
 8007838:	6820      	ldr	r0, [r4, #0]
 800783a:	1821      	adds	r1, r4, r0
 800783c:	428b      	cmp	r3, r1
 800783e:	bf01      	itttt	eq
 8007840:	6819      	ldreq	r1, [r3, #0]
 8007842:	685b      	ldreq	r3, [r3, #4]
 8007844:	1809      	addeq	r1, r1, r0
 8007846:	6021      	streq	r1, [r4, #0]
 8007848:	e7ed      	b.n	8007826 <_free_r+0x1e>
 800784a:	461a      	mov	r2, r3
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	b10b      	cbz	r3, 8007854 <_free_r+0x4c>
 8007850:	42a3      	cmp	r3, r4
 8007852:	d9fa      	bls.n	800784a <_free_r+0x42>
 8007854:	6811      	ldr	r1, [r2, #0]
 8007856:	1850      	adds	r0, r2, r1
 8007858:	42a0      	cmp	r0, r4
 800785a:	d10b      	bne.n	8007874 <_free_r+0x6c>
 800785c:	6820      	ldr	r0, [r4, #0]
 800785e:	4401      	add	r1, r0
 8007860:	1850      	adds	r0, r2, r1
 8007862:	4283      	cmp	r3, r0
 8007864:	6011      	str	r1, [r2, #0]
 8007866:	d1e0      	bne.n	800782a <_free_r+0x22>
 8007868:	6818      	ldr	r0, [r3, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	4408      	add	r0, r1
 800786e:	6010      	str	r0, [r2, #0]
 8007870:	6053      	str	r3, [r2, #4]
 8007872:	e7da      	b.n	800782a <_free_r+0x22>
 8007874:	d902      	bls.n	800787c <_free_r+0x74>
 8007876:	230c      	movs	r3, #12
 8007878:	602b      	str	r3, [r5, #0]
 800787a:	e7d6      	b.n	800782a <_free_r+0x22>
 800787c:	6820      	ldr	r0, [r4, #0]
 800787e:	1821      	adds	r1, r4, r0
 8007880:	428b      	cmp	r3, r1
 8007882:	bf01      	itttt	eq
 8007884:	6819      	ldreq	r1, [r3, #0]
 8007886:	685b      	ldreq	r3, [r3, #4]
 8007888:	1809      	addeq	r1, r1, r0
 800788a:	6021      	streq	r1, [r4, #0]
 800788c:	6063      	str	r3, [r4, #4]
 800788e:	6054      	str	r4, [r2, #4]
 8007890:	e7cb      	b.n	800782a <_free_r+0x22>
 8007892:	bd38      	pop	{r3, r4, r5, pc}
 8007894:	200008ec 	.word	0x200008ec

08007898 <_Balloc>:
 8007898:	b570      	push	{r4, r5, r6, lr}
 800789a:	69c6      	ldr	r6, [r0, #28]
 800789c:	4604      	mov	r4, r0
 800789e:	460d      	mov	r5, r1
 80078a0:	b976      	cbnz	r6, 80078c0 <_Balloc+0x28>
 80078a2:	2010      	movs	r0, #16
 80078a4:	f7fe fa90 	bl	8005dc8 <malloc>
 80078a8:	4602      	mov	r2, r0
 80078aa:	61e0      	str	r0, [r4, #28]
 80078ac:	b920      	cbnz	r0, 80078b8 <_Balloc+0x20>
 80078ae:	216b      	movs	r1, #107	@ 0x6b
 80078b0:	4b17      	ldr	r3, [pc, #92]	@ (8007910 <_Balloc+0x78>)
 80078b2:	4818      	ldr	r0, [pc, #96]	@ (8007914 <_Balloc+0x7c>)
 80078b4:	f000 fdfa 	bl	80084ac <__assert_func>
 80078b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078bc:	6006      	str	r6, [r0, #0]
 80078be:	60c6      	str	r6, [r0, #12]
 80078c0:	69e6      	ldr	r6, [r4, #28]
 80078c2:	68f3      	ldr	r3, [r6, #12]
 80078c4:	b183      	cbz	r3, 80078e8 <_Balloc+0x50>
 80078c6:	69e3      	ldr	r3, [r4, #28]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80078ce:	b9b8      	cbnz	r0, 8007900 <_Balloc+0x68>
 80078d0:	2101      	movs	r1, #1
 80078d2:	fa01 f605 	lsl.w	r6, r1, r5
 80078d6:	1d72      	adds	r2, r6, #5
 80078d8:	4620      	mov	r0, r4
 80078da:	0092      	lsls	r2, r2, #2
 80078dc:	f000 fe04 	bl	80084e8 <_calloc_r>
 80078e0:	b160      	cbz	r0, 80078fc <_Balloc+0x64>
 80078e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80078e6:	e00e      	b.n	8007906 <_Balloc+0x6e>
 80078e8:	2221      	movs	r2, #33	@ 0x21
 80078ea:	2104      	movs	r1, #4
 80078ec:	4620      	mov	r0, r4
 80078ee:	f000 fdfb 	bl	80084e8 <_calloc_r>
 80078f2:	69e3      	ldr	r3, [r4, #28]
 80078f4:	60f0      	str	r0, [r6, #12]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d1e4      	bne.n	80078c6 <_Balloc+0x2e>
 80078fc:	2000      	movs	r0, #0
 80078fe:	bd70      	pop	{r4, r5, r6, pc}
 8007900:	6802      	ldr	r2, [r0, #0]
 8007902:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007906:	2300      	movs	r3, #0
 8007908:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800790c:	e7f7      	b.n	80078fe <_Balloc+0x66>
 800790e:	bf00      	nop
 8007910:	08008f85 	.word	0x08008f85
 8007914:	08009005 	.word	0x08009005

08007918 <_Bfree>:
 8007918:	b570      	push	{r4, r5, r6, lr}
 800791a:	69c6      	ldr	r6, [r0, #28]
 800791c:	4605      	mov	r5, r0
 800791e:	460c      	mov	r4, r1
 8007920:	b976      	cbnz	r6, 8007940 <_Bfree+0x28>
 8007922:	2010      	movs	r0, #16
 8007924:	f7fe fa50 	bl	8005dc8 <malloc>
 8007928:	4602      	mov	r2, r0
 800792a:	61e8      	str	r0, [r5, #28]
 800792c:	b920      	cbnz	r0, 8007938 <_Bfree+0x20>
 800792e:	218f      	movs	r1, #143	@ 0x8f
 8007930:	4b08      	ldr	r3, [pc, #32]	@ (8007954 <_Bfree+0x3c>)
 8007932:	4809      	ldr	r0, [pc, #36]	@ (8007958 <_Bfree+0x40>)
 8007934:	f000 fdba 	bl	80084ac <__assert_func>
 8007938:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800793c:	6006      	str	r6, [r0, #0]
 800793e:	60c6      	str	r6, [r0, #12]
 8007940:	b13c      	cbz	r4, 8007952 <_Bfree+0x3a>
 8007942:	69eb      	ldr	r3, [r5, #28]
 8007944:	6862      	ldr	r2, [r4, #4]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800794c:	6021      	str	r1, [r4, #0]
 800794e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007952:	bd70      	pop	{r4, r5, r6, pc}
 8007954:	08008f85 	.word	0x08008f85
 8007958:	08009005 	.word	0x08009005

0800795c <__multadd>:
 800795c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007960:	4607      	mov	r7, r0
 8007962:	460c      	mov	r4, r1
 8007964:	461e      	mov	r6, r3
 8007966:	2000      	movs	r0, #0
 8007968:	690d      	ldr	r5, [r1, #16]
 800796a:	f101 0c14 	add.w	ip, r1, #20
 800796e:	f8dc 3000 	ldr.w	r3, [ip]
 8007972:	3001      	adds	r0, #1
 8007974:	b299      	uxth	r1, r3
 8007976:	fb02 6101 	mla	r1, r2, r1, r6
 800797a:	0c1e      	lsrs	r6, r3, #16
 800797c:	0c0b      	lsrs	r3, r1, #16
 800797e:	fb02 3306 	mla	r3, r2, r6, r3
 8007982:	b289      	uxth	r1, r1
 8007984:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007988:	4285      	cmp	r5, r0
 800798a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800798e:	f84c 1b04 	str.w	r1, [ip], #4
 8007992:	dcec      	bgt.n	800796e <__multadd+0x12>
 8007994:	b30e      	cbz	r6, 80079da <__multadd+0x7e>
 8007996:	68a3      	ldr	r3, [r4, #8]
 8007998:	42ab      	cmp	r3, r5
 800799a:	dc19      	bgt.n	80079d0 <__multadd+0x74>
 800799c:	6861      	ldr	r1, [r4, #4]
 800799e:	4638      	mov	r0, r7
 80079a0:	3101      	adds	r1, #1
 80079a2:	f7ff ff79 	bl	8007898 <_Balloc>
 80079a6:	4680      	mov	r8, r0
 80079a8:	b928      	cbnz	r0, 80079b6 <__multadd+0x5a>
 80079aa:	4602      	mov	r2, r0
 80079ac:	21ba      	movs	r1, #186	@ 0xba
 80079ae:	4b0c      	ldr	r3, [pc, #48]	@ (80079e0 <__multadd+0x84>)
 80079b0:	480c      	ldr	r0, [pc, #48]	@ (80079e4 <__multadd+0x88>)
 80079b2:	f000 fd7b 	bl	80084ac <__assert_func>
 80079b6:	6922      	ldr	r2, [r4, #16]
 80079b8:	f104 010c 	add.w	r1, r4, #12
 80079bc:	3202      	adds	r2, #2
 80079be:	0092      	lsls	r2, r2, #2
 80079c0:	300c      	adds	r0, #12
 80079c2:	f000 fd65 	bl	8008490 <memcpy>
 80079c6:	4621      	mov	r1, r4
 80079c8:	4638      	mov	r0, r7
 80079ca:	f7ff ffa5 	bl	8007918 <_Bfree>
 80079ce:	4644      	mov	r4, r8
 80079d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80079d4:	3501      	adds	r5, #1
 80079d6:	615e      	str	r6, [r3, #20]
 80079d8:	6125      	str	r5, [r4, #16]
 80079da:	4620      	mov	r0, r4
 80079dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079e0:	08008ff4 	.word	0x08008ff4
 80079e4:	08009005 	.word	0x08009005

080079e8 <__hi0bits>:
 80079e8:	4603      	mov	r3, r0
 80079ea:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80079ee:	bf3a      	itte	cc
 80079f0:	0403      	lslcc	r3, r0, #16
 80079f2:	2010      	movcc	r0, #16
 80079f4:	2000      	movcs	r0, #0
 80079f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079fa:	bf3c      	itt	cc
 80079fc:	021b      	lslcc	r3, r3, #8
 80079fe:	3008      	addcc	r0, #8
 8007a00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a04:	bf3c      	itt	cc
 8007a06:	011b      	lslcc	r3, r3, #4
 8007a08:	3004      	addcc	r0, #4
 8007a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a0e:	bf3c      	itt	cc
 8007a10:	009b      	lslcc	r3, r3, #2
 8007a12:	3002      	addcc	r0, #2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	db05      	blt.n	8007a24 <__hi0bits+0x3c>
 8007a18:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007a1c:	f100 0001 	add.w	r0, r0, #1
 8007a20:	bf08      	it	eq
 8007a22:	2020      	moveq	r0, #32
 8007a24:	4770      	bx	lr

08007a26 <__lo0bits>:
 8007a26:	6803      	ldr	r3, [r0, #0]
 8007a28:	4602      	mov	r2, r0
 8007a2a:	f013 0007 	ands.w	r0, r3, #7
 8007a2e:	d00b      	beq.n	8007a48 <__lo0bits+0x22>
 8007a30:	07d9      	lsls	r1, r3, #31
 8007a32:	d421      	bmi.n	8007a78 <__lo0bits+0x52>
 8007a34:	0798      	lsls	r0, r3, #30
 8007a36:	bf49      	itett	mi
 8007a38:	085b      	lsrmi	r3, r3, #1
 8007a3a:	089b      	lsrpl	r3, r3, #2
 8007a3c:	2001      	movmi	r0, #1
 8007a3e:	6013      	strmi	r3, [r2, #0]
 8007a40:	bf5c      	itt	pl
 8007a42:	2002      	movpl	r0, #2
 8007a44:	6013      	strpl	r3, [r2, #0]
 8007a46:	4770      	bx	lr
 8007a48:	b299      	uxth	r1, r3
 8007a4a:	b909      	cbnz	r1, 8007a50 <__lo0bits+0x2a>
 8007a4c:	2010      	movs	r0, #16
 8007a4e:	0c1b      	lsrs	r3, r3, #16
 8007a50:	b2d9      	uxtb	r1, r3
 8007a52:	b909      	cbnz	r1, 8007a58 <__lo0bits+0x32>
 8007a54:	3008      	adds	r0, #8
 8007a56:	0a1b      	lsrs	r3, r3, #8
 8007a58:	0719      	lsls	r1, r3, #28
 8007a5a:	bf04      	itt	eq
 8007a5c:	091b      	lsreq	r3, r3, #4
 8007a5e:	3004      	addeq	r0, #4
 8007a60:	0799      	lsls	r1, r3, #30
 8007a62:	bf04      	itt	eq
 8007a64:	089b      	lsreq	r3, r3, #2
 8007a66:	3002      	addeq	r0, #2
 8007a68:	07d9      	lsls	r1, r3, #31
 8007a6a:	d403      	bmi.n	8007a74 <__lo0bits+0x4e>
 8007a6c:	085b      	lsrs	r3, r3, #1
 8007a6e:	f100 0001 	add.w	r0, r0, #1
 8007a72:	d003      	beq.n	8007a7c <__lo0bits+0x56>
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	4770      	bx	lr
 8007a78:	2000      	movs	r0, #0
 8007a7a:	4770      	bx	lr
 8007a7c:	2020      	movs	r0, #32
 8007a7e:	4770      	bx	lr

08007a80 <__i2b>:
 8007a80:	b510      	push	{r4, lr}
 8007a82:	460c      	mov	r4, r1
 8007a84:	2101      	movs	r1, #1
 8007a86:	f7ff ff07 	bl	8007898 <_Balloc>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	b928      	cbnz	r0, 8007a9a <__i2b+0x1a>
 8007a8e:	f240 1145 	movw	r1, #325	@ 0x145
 8007a92:	4b04      	ldr	r3, [pc, #16]	@ (8007aa4 <__i2b+0x24>)
 8007a94:	4804      	ldr	r0, [pc, #16]	@ (8007aa8 <__i2b+0x28>)
 8007a96:	f000 fd09 	bl	80084ac <__assert_func>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	6144      	str	r4, [r0, #20]
 8007a9e:	6103      	str	r3, [r0, #16]
 8007aa0:	bd10      	pop	{r4, pc}
 8007aa2:	bf00      	nop
 8007aa4:	08008ff4 	.word	0x08008ff4
 8007aa8:	08009005 	.word	0x08009005

08007aac <__multiply>:
 8007aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab0:	4614      	mov	r4, r2
 8007ab2:	690a      	ldr	r2, [r1, #16]
 8007ab4:	6923      	ldr	r3, [r4, #16]
 8007ab6:	460f      	mov	r7, r1
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	bfa2      	ittt	ge
 8007abc:	4623      	movge	r3, r4
 8007abe:	460c      	movge	r4, r1
 8007ac0:	461f      	movge	r7, r3
 8007ac2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007ac6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007aca:	68a3      	ldr	r3, [r4, #8]
 8007acc:	6861      	ldr	r1, [r4, #4]
 8007ace:	eb0a 0609 	add.w	r6, sl, r9
 8007ad2:	42b3      	cmp	r3, r6
 8007ad4:	b085      	sub	sp, #20
 8007ad6:	bfb8      	it	lt
 8007ad8:	3101      	addlt	r1, #1
 8007ada:	f7ff fedd 	bl	8007898 <_Balloc>
 8007ade:	b930      	cbnz	r0, 8007aee <__multiply+0x42>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007ae6:	4b43      	ldr	r3, [pc, #268]	@ (8007bf4 <__multiply+0x148>)
 8007ae8:	4843      	ldr	r0, [pc, #268]	@ (8007bf8 <__multiply+0x14c>)
 8007aea:	f000 fcdf 	bl	80084ac <__assert_func>
 8007aee:	f100 0514 	add.w	r5, r0, #20
 8007af2:	462b      	mov	r3, r5
 8007af4:	2200      	movs	r2, #0
 8007af6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007afa:	4543      	cmp	r3, r8
 8007afc:	d321      	bcc.n	8007b42 <__multiply+0x96>
 8007afe:	f107 0114 	add.w	r1, r7, #20
 8007b02:	f104 0214 	add.w	r2, r4, #20
 8007b06:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007b0a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007b0e:	9302      	str	r3, [sp, #8]
 8007b10:	1b13      	subs	r3, r2, r4
 8007b12:	3b15      	subs	r3, #21
 8007b14:	f023 0303 	bic.w	r3, r3, #3
 8007b18:	3304      	adds	r3, #4
 8007b1a:	f104 0715 	add.w	r7, r4, #21
 8007b1e:	42ba      	cmp	r2, r7
 8007b20:	bf38      	it	cc
 8007b22:	2304      	movcc	r3, #4
 8007b24:	9301      	str	r3, [sp, #4]
 8007b26:	9b02      	ldr	r3, [sp, #8]
 8007b28:	9103      	str	r1, [sp, #12]
 8007b2a:	428b      	cmp	r3, r1
 8007b2c:	d80c      	bhi.n	8007b48 <__multiply+0x9c>
 8007b2e:	2e00      	cmp	r6, #0
 8007b30:	dd03      	ble.n	8007b3a <__multiply+0x8e>
 8007b32:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d05a      	beq.n	8007bf0 <__multiply+0x144>
 8007b3a:	6106      	str	r6, [r0, #16]
 8007b3c:	b005      	add	sp, #20
 8007b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b42:	f843 2b04 	str.w	r2, [r3], #4
 8007b46:	e7d8      	b.n	8007afa <__multiply+0x4e>
 8007b48:	f8b1 a000 	ldrh.w	sl, [r1]
 8007b4c:	f1ba 0f00 	cmp.w	sl, #0
 8007b50:	d023      	beq.n	8007b9a <__multiply+0xee>
 8007b52:	46a9      	mov	r9, r5
 8007b54:	f04f 0c00 	mov.w	ip, #0
 8007b58:	f104 0e14 	add.w	lr, r4, #20
 8007b5c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007b60:	f8d9 3000 	ldr.w	r3, [r9]
 8007b64:	fa1f fb87 	uxth.w	fp, r7
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	fb0a 330b 	mla	r3, sl, fp, r3
 8007b6e:	4463      	add	r3, ip
 8007b70:	f8d9 c000 	ldr.w	ip, [r9]
 8007b74:	0c3f      	lsrs	r7, r7, #16
 8007b76:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007b7a:	fb0a c707 	mla	r7, sl, r7, ip
 8007b7e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b88:	4572      	cmp	r2, lr
 8007b8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007b8e:	f849 3b04 	str.w	r3, [r9], #4
 8007b92:	d8e3      	bhi.n	8007b5c <__multiply+0xb0>
 8007b94:	9b01      	ldr	r3, [sp, #4]
 8007b96:	f845 c003 	str.w	ip, [r5, r3]
 8007b9a:	9b03      	ldr	r3, [sp, #12]
 8007b9c:	3104      	adds	r1, #4
 8007b9e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007ba2:	f1b9 0f00 	cmp.w	r9, #0
 8007ba6:	d021      	beq.n	8007bec <__multiply+0x140>
 8007ba8:	46ae      	mov	lr, r5
 8007baa:	f04f 0a00 	mov.w	sl, #0
 8007bae:	682b      	ldr	r3, [r5, #0]
 8007bb0:	f104 0c14 	add.w	ip, r4, #20
 8007bb4:	f8bc b000 	ldrh.w	fp, [ip]
 8007bb8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	fb09 770b 	mla	r7, r9, fp, r7
 8007bc2:	4457      	add	r7, sl
 8007bc4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007bc8:	f84e 3b04 	str.w	r3, [lr], #4
 8007bcc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007bd0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bd4:	f8be 3000 	ldrh.w	r3, [lr]
 8007bd8:	4562      	cmp	r2, ip
 8007bda:	fb09 330a 	mla	r3, r9, sl, r3
 8007bde:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007be2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007be6:	d8e5      	bhi.n	8007bb4 <__multiply+0x108>
 8007be8:	9f01      	ldr	r7, [sp, #4]
 8007bea:	51eb      	str	r3, [r5, r7]
 8007bec:	3504      	adds	r5, #4
 8007bee:	e79a      	b.n	8007b26 <__multiply+0x7a>
 8007bf0:	3e01      	subs	r6, #1
 8007bf2:	e79c      	b.n	8007b2e <__multiply+0x82>
 8007bf4:	08008ff4 	.word	0x08008ff4
 8007bf8:	08009005 	.word	0x08009005

08007bfc <__pow5mult>:
 8007bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c00:	4615      	mov	r5, r2
 8007c02:	f012 0203 	ands.w	r2, r2, #3
 8007c06:	4607      	mov	r7, r0
 8007c08:	460e      	mov	r6, r1
 8007c0a:	d007      	beq.n	8007c1c <__pow5mult+0x20>
 8007c0c:	4c25      	ldr	r4, [pc, #148]	@ (8007ca4 <__pow5mult+0xa8>)
 8007c0e:	3a01      	subs	r2, #1
 8007c10:	2300      	movs	r3, #0
 8007c12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c16:	f7ff fea1 	bl	800795c <__multadd>
 8007c1a:	4606      	mov	r6, r0
 8007c1c:	10ad      	asrs	r5, r5, #2
 8007c1e:	d03d      	beq.n	8007c9c <__pow5mult+0xa0>
 8007c20:	69fc      	ldr	r4, [r7, #28]
 8007c22:	b97c      	cbnz	r4, 8007c44 <__pow5mult+0x48>
 8007c24:	2010      	movs	r0, #16
 8007c26:	f7fe f8cf 	bl	8005dc8 <malloc>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	61f8      	str	r0, [r7, #28]
 8007c2e:	b928      	cbnz	r0, 8007c3c <__pow5mult+0x40>
 8007c30:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007c34:	4b1c      	ldr	r3, [pc, #112]	@ (8007ca8 <__pow5mult+0xac>)
 8007c36:	481d      	ldr	r0, [pc, #116]	@ (8007cac <__pow5mult+0xb0>)
 8007c38:	f000 fc38 	bl	80084ac <__assert_func>
 8007c3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c40:	6004      	str	r4, [r0, #0]
 8007c42:	60c4      	str	r4, [r0, #12]
 8007c44:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007c48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c4c:	b94c      	cbnz	r4, 8007c62 <__pow5mult+0x66>
 8007c4e:	f240 2171 	movw	r1, #625	@ 0x271
 8007c52:	4638      	mov	r0, r7
 8007c54:	f7ff ff14 	bl	8007a80 <__i2b>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c60:	6003      	str	r3, [r0, #0]
 8007c62:	f04f 0900 	mov.w	r9, #0
 8007c66:	07eb      	lsls	r3, r5, #31
 8007c68:	d50a      	bpl.n	8007c80 <__pow5mult+0x84>
 8007c6a:	4631      	mov	r1, r6
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	4638      	mov	r0, r7
 8007c70:	f7ff ff1c 	bl	8007aac <__multiply>
 8007c74:	4680      	mov	r8, r0
 8007c76:	4631      	mov	r1, r6
 8007c78:	4638      	mov	r0, r7
 8007c7a:	f7ff fe4d 	bl	8007918 <_Bfree>
 8007c7e:	4646      	mov	r6, r8
 8007c80:	106d      	asrs	r5, r5, #1
 8007c82:	d00b      	beq.n	8007c9c <__pow5mult+0xa0>
 8007c84:	6820      	ldr	r0, [r4, #0]
 8007c86:	b938      	cbnz	r0, 8007c98 <__pow5mult+0x9c>
 8007c88:	4622      	mov	r2, r4
 8007c8a:	4621      	mov	r1, r4
 8007c8c:	4638      	mov	r0, r7
 8007c8e:	f7ff ff0d 	bl	8007aac <__multiply>
 8007c92:	6020      	str	r0, [r4, #0]
 8007c94:	f8c0 9000 	str.w	r9, [r0]
 8007c98:	4604      	mov	r4, r0
 8007c9a:	e7e4      	b.n	8007c66 <__pow5mult+0x6a>
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ca2:	bf00      	nop
 8007ca4:	08009060 	.word	0x08009060
 8007ca8:	08008f85 	.word	0x08008f85
 8007cac:	08009005 	.word	0x08009005

08007cb0 <__lshift>:
 8007cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cb4:	460c      	mov	r4, r1
 8007cb6:	4607      	mov	r7, r0
 8007cb8:	4691      	mov	r9, r2
 8007cba:	6923      	ldr	r3, [r4, #16]
 8007cbc:	6849      	ldr	r1, [r1, #4]
 8007cbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007cc2:	68a3      	ldr	r3, [r4, #8]
 8007cc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007cc8:	f108 0601 	add.w	r6, r8, #1
 8007ccc:	42b3      	cmp	r3, r6
 8007cce:	db0b      	blt.n	8007ce8 <__lshift+0x38>
 8007cd0:	4638      	mov	r0, r7
 8007cd2:	f7ff fde1 	bl	8007898 <_Balloc>
 8007cd6:	4605      	mov	r5, r0
 8007cd8:	b948      	cbnz	r0, 8007cee <__lshift+0x3e>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007ce0:	4b27      	ldr	r3, [pc, #156]	@ (8007d80 <__lshift+0xd0>)
 8007ce2:	4828      	ldr	r0, [pc, #160]	@ (8007d84 <__lshift+0xd4>)
 8007ce4:	f000 fbe2 	bl	80084ac <__assert_func>
 8007ce8:	3101      	adds	r1, #1
 8007cea:	005b      	lsls	r3, r3, #1
 8007cec:	e7ee      	b.n	8007ccc <__lshift+0x1c>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	f100 0114 	add.w	r1, r0, #20
 8007cf4:	f100 0210 	add.w	r2, r0, #16
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	4553      	cmp	r3, sl
 8007cfc:	db33      	blt.n	8007d66 <__lshift+0xb6>
 8007cfe:	6920      	ldr	r0, [r4, #16]
 8007d00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007d04:	f104 0314 	add.w	r3, r4, #20
 8007d08:	f019 091f 	ands.w	r9, r9, #31
 8007d0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007d10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d14:	d02b      	beq.n	8007d6e <__lshift+0xbe>
 8007d16:	468a      	mov	sl, r1
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f1c9 0e20 	rsb	lr, r9, #32
 8007d1e:	6818      	ldr	r0, [r3, #0]
 8007d20:	fa00 f009 	lsl.w	r0, r0, r9
 8007d24:	4310      	orrs	r0, r2
 8007d26:	f84a 0b04 	str.w	r0, [sl], #4
 8007d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d2e:	459c      	cmp	ip, r3
 8007d30:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d34:	d8f3      	bhi.n	8007d1e <__lshift+0x6e>
 8007d36:	ebac 0304 	sub.w	r3, ip, r4
 8007d3a:	3b15      	subs	r3, #21
 8007d3c:	f023 0303 	bic.w	r3, r3, #3
 8007d40:	3304      	adds	r3, #4
 8007d42:	f104 0015 	add.w	r0, r4, #21
 8007d46:	4584      	cmp	ip, r0
 8007d48:	bf38      	it	cc
 8007d4a:	2304      	movcc	r3, #4
 8007d4c:	50ca      	str	r2, [r1, r3]
 8007d4e:	b10a      	cbz	r2, 8007d54 <__lshift+0xa4>
 8007d50:	f108 0602 	add.w	r6, r8, #2
 8007d54:	3e01      	subs	r6, #1
 8007d56:	4638      	mov	r0, r7
 8007d58:	4621      	mov	r1, r4
 8007d5a:	612e      	str	r6, [r5, #16]
 8007d5c:	f7ff fddc 	bl	8007918 <_Bfree>
 8007d60:	4628      	mov	r0, r5
 8007d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d66:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	e7c5      	b.n	8007cfa <__lshift+0x4a>
 8007d6e:	3904      	subs	r1, #4
 8007d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d74:	459c      	cmp	ip, r3
 8007d76:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d7a:	d8f9      	bhi.n	8007d70 <__lshift+0xc0>
 8007d7c:	e7ea      	b.n	8007d54 <__lshift+0xa4>
 8007d7e:	bf00      	nop
 8007d80:	08008ff4 	.word	0x08008ff4
 8007d84:	08009005 	.word	0x08009005

08007d88 <__mcmp>:
 8007d88:	4603      	mov	r3, r0
 8007d8a:	690a      	ldr	r2, [r1, #16]
 8007d8c:	6900      	ldr	r0, [r0, #16]
 8007d8e:	b530      	push	{r4, r5, lr}
 8007d90:	1a80      	subs	r0, r0, r2
 8007d92:	d10e      	bne.n	8007db2 <__mcmp+0x2a>
 8007d94:	3314      	adds	r3, #20
 8007d96:	3114      	adds	r1, #20
 8007d98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007da0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007da4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007da8:	4295      	cmp	r5, r2
 8007daa:	d003      	beq.n	8007db4 <__mcmp+0x2c>
 8007dac:	d205      	bcs.n	8007dba <__mcmp+0x32>
 8007dae:	f04f 30ff 	mov.w	r0, #4294967295
 8007db2:	bd30      	pop	{r4, r5, pc}
 8007db4:	42a3      	cmp	r3, r4
 8007db6:	d3f3      	bcc.n	8007da0 <__mcmp+0x18>
 8007db8:	e7fb      	b.n	8007db2 <__mcmp+0x2a>
 8007dba:	2001      	movs	r0, #1
 8007dbc:	e7f9      	b.n	8007db2 <__mcmp+0x2a>
	...

08007dc0 <__mdiff>:
 8007dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc4:	4689      	mov	r9, r1
 8007dc6:	4606      	mov	r6, r0
 8007dc8:	4611      	mov	r1, r2
 8007dca:	4648      	mov	r0, r9
 8007dcc:	4614      	mov	r4, r2
 8007dce:	f7ff ffdb 	bl	8007d88 <__mcmp>
 8007dd2:	1e05      	subs	r5, r0, #0
 8007dd4:	d112      	bne.n	8007dfc <__mdiff+0x3c>
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	4630      	mov	r0, r6
 8007dda:	f7ff fd5d 	bl	8007898 <_Balloc>
 8007dde:	4602      	mov	r2, r0
 8007de0:	b928      	cbnz	r0, 8007dee <__mdiff+0x2e>
 8007de2:	f240 2137 	movw	r1, #567	@ 0x237
 8007de6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ee0 <__mdiff+0x120>)
 8007de8:	483e      	ldr	r0, [pc, #248]	@ (8007ee4 <__mdiff+0x124>)
 8007dea:	f000 fb5f 	bl	80084ac <__assert_func>
 8007dee:	2301      	movs	r3, #1
 8007df0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007df4:	4610      	mov	r0, r2
 8007df6:	b003      	add	sp, #12
 8007df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dfc:	bfbc      	itt	lt
 8007dfe:	464b      	movlt	r3, r9
 8007e00:	46a1      	movlt	r9, r4
 8007e02:	4630      	mov	r0, r6
 8007e04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007e08:	bfba      	itte	lt
 8007e0a:	461c      	movlt	r4, r3
 8007e0c:	2501      	movlt	r5, #1
 8007e0e:	2500      	movge	r5, #0
 8007e10:	f7ff fd42 	bl	8007898 <_Balloc>
 8007e14:	4602      	mov	r2, r0
 8007e16:	b918      	cbnz	r0, 8007e20 <__mdiff+0x60>
 8007e18:	f240 2145 	movw	r1, #581	@ 0x245
 8007e1c:	4b30      	ldr	r3, [pc, #192]	@ (8007ee0 <__mdiff+0x120>)
 8007e1e:	e7e3      	b.n	8007de8 <__mdiff+0x28>
 8007e20:	f100 0b14 	add.w	fp, r0, #20
 8007e24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007e28:	f109 0310 	add.w	r3, r9, #16
 8007e2c:	60c5      	str	r5, [r0, #12]
 8007e2e:	f04f 0c00 	mov.w	ip, #0
 8007e32:	f109 0514 	add.w	r5, r9, #20
 8007e36:	46d9      	mov	r9, fp
 8007e38:	6926      	ldr	r6, [r4, #16]
 8007e3a:	f104 0e14 	add.w	lr, r4, #20
 8007e3e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007e42:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007e46:	9301      	str	r3, [sp, #4]
 8007e48:	9b01      	ldr	r3, [sp, #4]
 8007e4a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007e4e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007e52:	b281      	uxth	r1, r0
 8007e54:	9301      	str	r3, [sp, #4]
 8007e56:	fa1f f38a 	uxth.w	r3, sl
 8007e5a:	1a5b      	subs	r3, r3, r1
 8007e5c:	0c00      	lsrs	r0, r0, #16
 8007e5e:	4463      	add	r3, ip
 8007e60:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007e64:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007e6e:	4576      	cmp	r6, lr
 8007e70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e74:	f849 3b04 	str.w	r3, [r9], #4
 8007e78:	d8e6      	bhi.n	8007e48 <__mdiff+0x88>
 8007e7a:	1b33      	subs	r3, r6, r4
 8007e7c:	3b15      	subs	r3, #21
 8007e7e:	f023 0303 	bic.w	r3, r3, #3
 8007e82:	3415      	adds	r4, #21
 8007e84:	3304      	adds	r3, #4
 8007e86:	42a6      	cmp	r6, r4
 8007e88:	bf38      	it	cc
 8007e8a:	2304      	movcc	r3, #4
 8007e8c:	441d      	add	r5, r3
 8007e8e:	445b      	add	r3, fp
 8007e90:	461e      	mov	r6, r3
 8007e92:	462c      	mov	r4, r5
 8007e94:	4544      	cmp	r4, r8
 8007e96:	d30e      	bcc.n	8007eb6 <__mdiff+0xf6>
 8007e98:	f108 0103 	add.w	r1, r8, #3
 8007e9c:	1b49      	subs	r1, r1, r5
 8007e9e:	f021 0103 	bic.w	r1, r1, #3
 8007ea2:	3d03      	subs	r5, #3
 8007ea4:	45a8      	cmp	r8, r5
 8007ea6:	bf38      	it	cc
 8007ea8:	2100      	movcc	r1, #0
 8007eaa:	440b      	add	r3, r1
 8007eac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007eb0:	b199      	cbz	r1, 8007eda <__mdiff+0x11a>
 8007eb2:	6117      	str	r7, [r2, #16]
 8007eb4:	e79e      	b.n	8007df4 <__mdiff+0x34>
 8007eb6:	46e6      	mov	lr, ip
 8007eb8:	f854 1b04 	ldr.w	r1, [r4], #4
 8007ebc:	fa1f fc81 	uxth.w	ip, r1
 8007ec0:	44f4      	add	ip, lr
 8007ec2:	0c08      	lsrs	r0, r1, #16
 8007ec4:	4471      	add	r1, lr
 8007ec6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007eca:	b289      	uxth	r1, r1
 8007ecc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ed0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ed4:	f846 1b04 	str.w	r1, [r6], #4
 8007ed8:	e7dc      	b.n	8007e94 <__mdiff+0xd4>
 8007eda:	3f01      	subs	r7, #1
 8007edc:	e7e6      	b.n	8007eac <__mdiff+0xec>
 8007ede:	bf00      	nop
 8007ee0:	08008ff4 	.word	0x08008ff4
 8007ee4:	08009005 	.word	0x08009005

08007ee8 <__d2b>:
 8007ee8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007eec:	2101      	movs	r1, #1
 8007eee:	4690      	mov	r8, r2
 8007ef0:	4699      	mov	r9, r3
 8007ef2:	9e08      	ldr	r6, [sp, #32]
 8007ef4:	f7ff fcd0 	bl	8007898 <_Balloc>
 8007ef8:	4604      	mov	r4, r0
 8007efa:	b930      	cbnz	r0, 8007f0a <__d2b+0x22>
 8007efc:	4602      	mov	r2, r0
 8007efe:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f02:	4b23      	ldr	r3, [pc, #140]	@ (8007f90 <__d2b+0xa8>)
 8007f04:	4823      	ldr	r0, [pc, #140]	@ (8007f94 <__d2b+0xac>)
 8007f06:	f000 fad1 	bl	80084ac <__assert_func>
 8007f0a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f12:	b10d      	cbz	r5, 8007f18 <__d2b+0x30>
 8007f14:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f18:	9301      	str	r3, [sp, #4]
 8007f1a:	f1b8 0300 	subs.w	r3, r8, #0
 8007f1e:	d024      	beq.n	8007f6a <__d2b+0x82>
 8007f20:	4668      	mov	r0, sp
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	f7ff fd7f 	bl	8007a26 <__lo0bits>
 8007f28:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f2c:	b1d8      	cbz	r0, 8007f66 <__d2b+0x7e>
 8007f2e:	f1c0 0320 	rsb	r3, r0, #32
 8007f32:	fa02 f303 	lsl.w	r3, r2, r3
 8007f36:	430b      	orrs	r3, r1
 8007f38:	40c2      	lsrs	r2, r0
 8007f3a:	6163      	str	r3, [r4, #20]
 8007f3c:	9201      	str	r2, [sp, #4]
 8007f3e:	9b01      	ldr	r3, [sp, #4]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	bf0c      	ite	eq
 8007f44:	2201      	moveq	r2, #1
 8007f46:	2202      	movne	r2, #2
 8007f48:	61a3      	str	r3, [r4, #24]
 8007f4a:	6122      	str	r2, [r4, #16]
 8007f4c:	b1ad      	cbz	r5, 8007f7a <__d2b+0x92>
 8007f4e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007f52:	4405      	add	r5, r0
 8007f54:	6035      	str	r5, [r6, #0]
 8007f56:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007f5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f5c:	6018      	str	r0, [r3, #0]
 8007f5e:	4620      	mov	r0, r4
 8007f60:	b002      	add	sp, #8
 8007f62:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007f66:	6161      	str	r1, [r4, #20]
 8007f68:	e7e9      	b.n	8007f3e <__d2b+0x56>
 8007f6a:	a801      	add	r0, sp, #4
 8007f6c:	f7ff fd5b 	bl	8007a26 <__lo0bits>
 8007f70:	9b01      	ldr	r3, [sp, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	6163      	str	r3, [r4, #20]
 8007f76:	3020      	adds	r0, #32
 8007f78:	e7e7      	b.n	8007f4a <__d2b+0x62>
 8007f7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007f7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f82:	6030      	str	r0, [r6, #0]
 8007f84:	6918      	ldr	r0, [r3, #16]
 8007f86:	f7ff fd2f 	bl	80079e8 <__hi0bits>
 8007f8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f8e:	e7e4      	b.n	8007f5a <__d2b+0x72>
 8007f90:	08008ff4 	.word	0x08008ff4
 8007f94:	08009005 	.word	0x08009005

08007f98 <__sfputc_r>:
 8007f98:	6893      	ldr	r3, [r2, #8]
 8007f9a:	b410      	push	{r4}
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	6093      	str	r3, [r2, #8]
 8007fa2:	da07      	bge.n	8007fb4 <__sfputc_r+0x1c>
 8007fa4:	6994      	ldr	r4, [r2, #24]
 8007fa6:	42a3      	cmp	r3, r4
 8007fa8:	db01      	blt.n	8007fae <__sfputc_r+0x16>
 8007faa:	290a      	cmp	r1, #10
 8007fac:	d102      	bne.n	8007fb4 <__sfputc_r+0x1c>
 8007fae:	bc10      	pop	{r4}
 8007fb0:	f000 b9da 	b.w	8008368 <__swbuf_r>
 8007fb4:	6813      	ldr	r3, [r2, #0]
 8007fb6:	1c58      	adds	r0, r3, #1
 8007fb8:	6010      	str	r0, [r2, #0]
 8007fba:	7019      	strb	r1, [r3, #0]
 8007fbc:	4608      	mov	r0, r1
 8007fbe:	bc10      	pop	{r4}
 8007fc0:	4770      	bx	lr

08007fc2 <__sfputs_r>:
 8007fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc4:	4606      	mov	r6, r0
 8007fc6:	460f      	mov	r7, r1
 8007fc8:	4614      	mov	r4, r2
 8007fca:	18d5      	adds	r5, r2, r3
 8007fcc:	42ac      	cmp	r4, r5
 8007fce:	d101      	bne.n	8007fd4 <__sfputs_r+0x12>
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	e007      	b.n	8007fe4 <__sfputs_r+0x22>
 8007fd4:	463a      	mov	r2, r7
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fdc:	f7ff ffdc 	bl	8007f98 <__sfputc_r>
 8007fe0:	1c43      	adds	r3, r0, #1
 8007fe2:	d1f3      	bne.n	8007fcc <__sfputs_r+0xa>
 8007fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fe8 <_vfiprintf_r>:
 8007fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fec:	460d      	mov	r5, r1
 8007fee:	4614      	mov	r4, r2
 8007ff0:	4698      	mov	r8, r3
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	b09d      	sub	sp, #116	@ 0x74
 8007ff6:	b118      	cbz	r0, 8008000 <_vfiprintf_r+0x18>
 8007ff8:	6a03      	ldr	r3, [r0, #32]
 8007ffa:	b90b      	cbnz	r3, 8008000 <_vfiprintf_r+0x18>
 8007ffc:	f7fe fc8a 	bl	8006914 <__sinit>
 8008000:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008002:	07d9      	lsls	r1, r3, #31
 8008004:	d405      	bmi.n	8008012 <_vfiprintf_r+0x2a>
 8008006:	89ab      	ldrh	r3, [r5, #12]
 8008008:	059a      	lsls	r2, r3, #22
 800800a:	d402      	bmi.n	8008012 <_vfiprintf_r+0x2a>
 800800c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800800e:	f7fe fd9a 	bl	8006b46 <__retarget_lock_acquire_recursive>
 8008012:	89ab      	ldrh	r3, [r5, #12]
 8008014:	071b      	lsls	r3, r3, #28
 8008016:	d501      	bpl.n	800801c <_vfiprintf_r+0x34>
 8008018:	692b      	ldr	r3, [r5, #16]
 800801a:	b99b      	cbnz	r3, 8008044 <_vfiprintf_r+0x5c>
 800801c:	4629      	mov	r1, r5
 800801e:	4630      	mov	r0, r6
 8008020:	f000 f9e0 	bl	80083e4 <__swsetup_r>
 8008024:	b170      	cbz	r0, 8008044 <_vfiprintf_r+0x5c>
 8008026:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008028:	07dc      	lsls	r4, r3, #31
 800802a:	d504      	bpl.n	8008036 <_vfiprintf_r+0x4e>
 800802c:	f04f 30ff 	mov.w	r0, #4294967295
 8008030:	b01d      	add	sp, #116	@ 0x74
 8008032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008036:	89ab      	ldrh	r3, [r5, #12]
 8008038:	0598      	lsls	r0, r3, #22
 800803a:	d4f7      	bmi.n	800802c <_vfiprintf_r+0x44>
 800803c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800803e:	f7fe fd83 	bl	8006b48 <__retarget_lock_release_recursive>
 8008042:	e7f3      	b.n	800802c <_vfiprintf_r+0x44>
 8008044:	2300      	movs	r3, #0
 8008046:	9309      	str	r3, [sp, #36]	@ 0x24
 8008048:	2320      	movs	r3, #32
 800804a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800804e:	2330      	movs	r3, #48	@ 0x30
 8008050:	f04f 0901 	mov.w	r9, #1
 8008054:	f8cd 800c 	str.w	r8, [sp, #12]
 8008058:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008204 <_vfiprintf_r+0x21c>
 800805c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008060:	4623      	mov	r3, r4
 8008062:	469a      	mov	sl, r3
 8008064:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008068:	b10a      	cbz	r2, 800806e <_vfiprintf_r+0x86>
 800806a:	2a25      	cmp	r2, #37	@ 0x25
 800806c:	d1f9      	bne.n	8008062 <_vfiprintf_r+0x7a>
 800806e:	ebba 0b04 	subs.w	fp, sl, r4
 8008072:	d00b      	beq.n	800808c <_vfiprintf_r+0xa4>
 8008074:	465b      	mov	r3, fp
 8008076:	4622      	mov	r2, r4
 8008078:	4629      	mov	r1, r5
 800807a:	4630      	mov	r0, r6
 800807c:	f7ff ffa1 	bl	8007fc2 <__sfputs_r>
 8008080:	3001      	adds	r0, #1
 8008082:	f000 80a7 	beq.w	80081d4 <_vfiprintf_r+0x1ec>
 8008086:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008088:	445a      	add	r2, fp
 800808a:	9209      	str	r2, [sp, #36]	@ 0x24
 800808c:	f89a 3000 	ldrb.w	r3, [sl]
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 809f 	beq.w	80081d4 <_vfiprintf_r+0x1ec>
 8008096:	2300      	movs	r3, #0
 8008098:	f04f 32ff 	mov.w	r2, #4294967295
 800809c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080a0:	f10a 0a01 	add.w	sl, sl, #1
 80080a4:	9304      	str	r3, [sp, #16]
 80080a6:	9307      	str	r3, [sp, #28]
 80080a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80080ae:	4654      	mov	r4, sl
 80080b0:	2205      	movs	r2, #5
 80080b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080b6:	4853      	ldr	r0, [pc, #332]	@ (8008204 <_vfiprintf_r+0x21c>)
 80080b8:	f7fe fd47 	bl	8006b4a <memchr>
 80080bc:	9a04      	ldr	r2, [sp, #16]
 80080be:	b9d8      	cbnz	r0, 80080f8 <_vfiprintf_r+0x110>
 80080c0:	06d1      	lsls	r1, r2, #27
 80080c2:	bf44      	itt	mi
 80080c4:	2320      	movmi	r3, #32
 80080c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080ca:	0713      	lsls	r3, r2, #28
 80080cc:	bf44      	itt	mi
 80080ce:	232b      	movmi	r3, #43	@ 0x2b
 80080d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080d4:	f89a 3000 	ldrb.w	r3, [sl]
 80080d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80080da:	d015      	beq.n	8008108 <_vfiprintf_r+0x120>
 80080dc:	4654      	mov	r4, sl
 80080de:	2000      	movs	r0, #0
 80080e0:	f04f 0c0a 	mov.w	ip, #10
 80080e4:	9a07      	ldr	r2, [sp, #28]
 80080e6:	4621      	mov	r1, r4
 80080e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080ec:	3b30      	subs	r3, #48	@ 0x30
 80080ee:	2b09      	cmp	r3, #9
 80080f0:	d94b      	bls.n	800818a <_vfiprintf_r+0x1a2>
 80080f2:	b1b0      	cbz	r0, 8008122 <_vfiprintf_r+0x13a>
 80080f4:	9207      	str	r2, [sp, #28]
 80080f6:	e014      	b.n	8008122 <_vfiprintf_r+0x13a>
 80080f8:	eba0 0308 	sub.w	r3, r0, r8
 80080fc:	fa09 f303 	lsl.w	r3, r9, r3
 8008100:	4313      	orrs	r3, r2
 8008102:	46a2      	mov	sl, r4
 8008104:	9304      	str	r3, [sp, #16]
 8008106:	e7d2      	b.n	80080ae <_vfiprintf_r+0xc6>
 8008108:	9b03      	ldr	r3, [sp, #12]
 800810a:	1d19      	adds	r1, r3, #4
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	9103      	str	r1, [sp, #12]
 8008110:	2b00      	cmp	r3, #0
 8008112:	bfbb      	ittet	lt
 8008114:	425b      	neglt	r3, r3
 8008116:	f042 0202 	orrlt.w	r2, r2, #2
 800811a:	9307      	strge	r3, [sp, #28]
 800811c:	9307      	strlt	r3, [sp, #28]
 800811e:	bfb8      	it	lt
 8008120:	9204      	strlt	r2, [sp, #16]
 8008122:	7823      	ldrb	r3, [r4, #0]
 8008124:	2b2e      	cmp	r3, #46	@ 0x2e
 8008126:	d10a      	bne.n	800813e <_vfiprintf_r+0x156>
 8008128:	7863      	ldrb	r3, [r4, #1]
 800812a:	2b2a      	cmp	r3, #42	@ 0x2a
 800812c:	d132      	bne.n	8008194 <_vfiprintf_r+0x1ac>
 800812e:	9b03      	ldr	r3, [sp, #12]
 8008130:	3402      	adds	r4, #2
 8008132:	1d1a      	adds	r2, r3, #4
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	9203      	str	r2, [sp, #12]
 8008138:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800813c:	9305      	str	r3, [sp, #20]
 800813e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008208 <_vfiprintf_r+0x220>
 8008142:	2203      	movs	r2, #3
 8008144:	4650      	mov	r0, sl
 8008146:	7821      	ldrb	r1, [r4, #0]
 8008148:	f7fe fcff 	bl	8006b4a <memchr>
 800814c:	b138      	cbz	r0, 800815e <_vfiprintf_r+0x176>
 800814e:	2240      	movs	r2, #64	@ 0x40
 8008150:	9b04      	ldr	r3, [sp, #16]
 8008152:	eba0 000a 	sub.w	r0, r0, sl
 8008156:	4082      	lsls	r2, r0
 8008158:	4313      	orrs	r3, r2
 800815a:	3401      	adds	r4, #1
 800815c:	9304      	str	r3, [sp, #16]
 800815e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008162:	2206      	movs	r2, #6
 8008164:	4829      	ldr	r0, [pc, #164]	@ (800820c <_vfiprintf_r+0x224>)
 8008166:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800816a:	f7fe fcee 	bl	8006b4a <memchr>
 800816e:	2800      	cmp	r0, #0
 8008170:	d03f      	beq.n	80081f2 <_vfiprintf_r+0x20a>
 8008172:	4b27      	ldr	r3, [pc, #156]	@ (8008210 <_vfiprintf_r+0x228>)
 8008174:	bb1b      	cbnz	r3, 80081be <_vfiprintf_r+0x1d6>
 8008176:	9b03      	ldr	r3, [sp, #12]
 8008178:	3307      	adds	r3, #7
 800817a:	f023 0307 	bic.w	r3, r3, #7
 800817e:	3308      	adds	r3, #8
 8008180:	9303      	str	r3, [sp, #12]
 8008182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008184:	443b      	add	r3, r7
 8008186:	9309      	str	r3, [sp, #36]	@ 0x24
 8008188:	e76a      	b.n	8008060 <_vfiprintf_r+0x78>
 800818a:	460c      	mov	r4, r1
 800818c:	2001      	movs	r0, #1
 800818e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008192:	e7a8      	b.n	80080e6 <_vfiprintf_r+0xfe>
 8008194:	2300      	movs	r3, #0
 8008196:	f04f 0c0a 	mov.w	ip, #10
 800819a:	4619      	mov	r1, r3
 800819c:	3401      	adds	r4, #1
 800819e:	9305      	str	r3, [sp, #20]
 80081a0:	4620      	mov	r0, r4
 80081a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081a6:	3a30      	subs	r2, #48	@ 0x30
 80081a8:	2a09      	cmp	r2, #9
 80081aa:	d903      	bls.n	80081b4 <_vfiprintf_r+0x1cc>
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d0c6      	beq.n	800813e <_vfiprintf_r+0x156>
 80081b0:	9105      	str	r1, [sp, #20]
 80081b2:	e7c4      	b.n	800813e <_vfiprintf_r+0x156>
 80081b4:	4604      	mov	r4, r0
 80081b6:	2301      	movs	r3, #1
 80081b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80081bc:	e7f0      	b.n	80081a0 <_vfiprintf_r+0x1b8>
 80081be:	ab03      	add	r3, sp, #12
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	462a      	mov	r2, r5
 80081c4:	4630      	mov	r0, r6
 80081c6:	4b13      	ldr	r3, [pc, #76]	@ (8008214 <_vfiprintf_r+0x22c>)
 80081c8:	a904      	add	r1, sp, #16
 80081ca:	f7fd ff59 	bl	8006080 <_printf_float>
 80081ce:	4607      	mov	r7, r0
 80081d0:	1c78      	adds	r0, r7, #1
 80081d2:	d1d6      	bne.n	8008182 <_vfiprintf_r+0x19a>
 80081d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081d6:	07d9      	lsls	r1, r3, #31
 80081d8:	d405      	bmi.n	80081e6 <_vfiprintf_r+0x1fe>
 80081da:	89ab      	ldrh	r3, [r5, #12]
 80081dc:	059a      	lsls	r2, r3, #22
 80081de:	d402      	bmi.n	80081e6 <_vfiprintf_r+0x1fe>
 80081e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081e2:	f7fe fcb1 	bl	8006b48 <__retarget_lock_release_recursive>
 80081e6:	89ab      	ldrh	r3, [r5, #12]
 80081e8:	065b      	lsls	r3, r3, #25
 80081ea:	f53f af1f 	bmi.w	800802c <_vfiprintf_r+0x44>
 80081ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081f0:	e71e      	b.n	8008030 <_vfiprintf_r+0x48>
 80081f2:	ab03      	add	r3, sp, #12
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	462a      	mov	r2, r5
 80081f8:	4630      	mov	r0, r6
 80081fa:	4b06      	ldr	r3, [pc, #24]	@ (8008214 <_vfiprintf_r+0x22c>)
 80081fc:	a904      	add	r1, sp, #16
 80081fe:	f7fe f9dd 	bl	80065bc <_printf_i>
 8008202:	e7e4      	b.n	80081ce <_vfiprintf_r+0x1e6>
 8008204:	08009160 	.word	0x08009160
 8008208:	08009166 	.word	0x08009166
 800820c:	0800916a 	.word	0x0800916a
 8008210:	08006081 	.word	0x08006081
 8008214:	08007fc3 	.word	0x08007fc3

08008218 <__sflush_r>:
 8008218:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800821c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821e:	0716      	lsls	r6, r2, #28
 8008220:	4605      	mov	r5, r0
 8008222:	460c      	mov	r4, r1
 8008224:	d454      	bmi.n	80082d0 <__sflush_r+0xb8>
 8008226:	684b      	ldr	r3, [r1, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	dc02      	bgt.n	8008232 <__sflush_r+0x1a>
 800822c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800822e:	2b00      	cmp	r3, #0
 8008230:	dd48      	ble.n	80082c4 <__sflush_r+0xac>
 8008232:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008234:	2e00      	cmp	r6, #0
 8008236:	d045      	beq.n	80082c4 <__sflush_r+0xac>
 8008238:	2300      	movs	r3, #0
 800823a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800823e:	682f      	ldr	r7, [r5, #0]
 8008240:	6a21      	ldr	r1, [r4, #32]
 8008242:	602b      	str	r3, [r5, #0]
 8008244:	d030      	beq.n	80082a8 <__sflush_r+0x90>
 8008246:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008248:	89a3      	ldrh	r3, [r4, #12]
 800824a:	0759      	lsls	r1, r3, #29
 800824c:	d505      	bpl.n	800825a <__sflush_r+0x42>
 800824e:	6863      	ldr	r3, [r4, #4]
 8008250:	1ad2      	subs	r2, r2, r3
 8008252:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008254:	b10b      	cbz	r3, 800825a <__sflush_r+0x42>
 8008256:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008258:	1ad2      	subs	r2, r2, r3
 800825a:	2300      	movs	r3, #0
 800825c:	4628      	mov	r0, r5
 800825e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008260:	6a21      	ldr	r1, [r4, #32]
 8008262:	47b0      	blx	r6
 8008264:	1c43      	adds	r3, r0, #1
 8008266:	89a3      	ldrh	r3, [r4, #12]
 8008268:	d106      	bne.n	8008278 <__sflush_r+0x60>
 800826a:	6829      	ldr	r1, [r5, #0]
 800826c:	291d      	cmp	r1, #29
 800826e:	d82b      	bhi.n	80082c8 <__sflush_r+0xb0>
 8008270:	4a28      	ldr	r2, [pc, #160]	@ (8008314 <__sflush_r+0xfc>)
 8008272:	410a      	asrs	r2, r1
 8008274:	07d6      	lsls	r6, r2, #31
 8008276:	d427      	bmi.n	80082c8 <__sflush_r+0xb0>
 8008278:	2200      	movs	r2, #0
 800827a:	6062      	str	r2, [r4, #4]
 800827c:	6922      	ldr	r2, [r4, #16]
 800827e:	04d9      	lsls	r1, r3, #19
 8008280:	6022      	str	r2, [r4, #0]
 8008282:	d504      	bpl.n	800828e <__sflush_r+0x76>
 8008284:	1c42      	adds	r2, r0, #1
 8008286:	d101      	bne.n	800828c <__sflush_r+0x74>
 8008288:	682b      	ldr	r3, [r5, #0]
 800828a:	b903      	cbnz	r3, 800828e <__sflush_r+0x76>
 800828c:	6560      	str	r0, [r4, #84]	@ 0x54
 800828e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008290:	602f      	str	r7, [r5, #0]
 8008292:	b1b9      	cbz	r1, 80082c4 <__sflush_r+0xac>
 8008294:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008298:	4299      	cmp	r1, r3
 800829a:	d002      	beq.n	80082a2 <__sflush_r+0x8a>
 800829c:	4628      	mov	r0, r5
 800829e:	f7ff fab3 	bl	8007808 <_free_r>
 80082a2:	2300      	movs	r3, #0
 80082a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80082a6:	e00d      	b.n	80082c4 <__sflush_r+0xac>
 80082a8:	2301      	movs	r3, #1
 80082aa:	4628      	mov	r0, r5
 80082ac:	47b0      	blx	r6
 80082ae:	4602      	mov	r2, r0
 80082b0:	1c50      	adds	r0, r2, #1
 80082b2:	d1c9      	bne.n	8008248 <__sflush_r+0x30>
 80082b4:	682b      	ldr	r3, [r5, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d0c6      	beq.n	8008248 <__sflush_r+0x30>
 80082ba:	2b1d      	cmp	r3, #29
 80082bc:	d001      	beq.n	80082c2 <__sflush_r+0xaa>
 80082be:	2b16      	cmp	r3, #22
 80082c0:	d11d      	bne.n	80082fe <__sflush_r+0xe6>
 80082c2:	602f      	str	r7, [r5, #0]
 80082c4:	2000      	movs	r0, #0
 80082c6:	e021      	b.n	800830c <__sflush_r+0xf4>
 80082c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082cc:	b21b      	sxth	r3, r3
 80082ce:	e01a      	b.n	8008306 <__sflush_r+0xee>
 80082d0:	690f      	ldr	r7, [r1, #16]
 80082d2:	2f00      	cmp	r7, #0
 80082d4:	d0f6      	beq.n	80082c4 <__sflush_r+0xac>
 80082d6:	0793      	lsls	r3, r2, #30
 80082d8:	bf18      	it	ne
 80082da:	2300      	movne	r3, #0
 80082dc:	680e      	ldr	r6, [r1, #0]
 80082de:	bf08      	it	eq
 80082e0:	694b      	ldreq	r3, [r1, #20]
 80082e2:	1bf6      	subs	r6, r6, r7
 80082e4:	600f      	str	r7, [r1, #0]
 80082e6:	608b      	str	r3, [r1, #8]
 80082e8:	2e00      	cmp	r6, #0
 80082ea:	ddeb      	ble.n	80082c4 <__sflush_r+0xac>
 80082ec:	4633      	mov	r3, r6
 80082ee:	463a      	mov	r2, r7
 80082f0:	4628      	mov	r0, r5
 80082f2:	6a21      	ldr	r1, [r4, #32]
 80082f4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80082f8:	47e0      	blx	ip
 80082fa:	2800      	cmp	r0, #0
 80082fc:	dc07      	bgt.n	800830e <__sflush_r+0xf6>
 80082fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008306:	f04f 30ff 	mov.w	r0, #4294967295
 800830a:	81a3      	strh	r3, [r4, #12]
 800830c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800830e:	4407      	add	r7, r0
 8008310:	1a36      	subs	r6, r6, r0
 8008312:	e7e9      	b.n	80082e8 <__sflush_r+0xd0>
 8008314:	dfbffffe 	.word	0xdfbffffe

08008318 <_fflush_r>:
 8008318:	b538      	push	{r3, r4, r5, lr}
 800831a:	690b      	ldr	r3, [r1, #16]
 800831c:	4605      	mov	r5, r0
 800831e:	460c      	mov	r4, r1
 8008320:	b913      	cbnz	r3, 8008328 <_fflush_r+0x10>
 8008322:	2500      	movs	r5, #0
 8008324:	4628      	mov	r0, r5
 8008326:	bd38      	pop	{r3, r4, r5, pc}
 8008328:	b118      	cbz	r0, 8008332 <_fflush_r+0x1a>
 800832a:	6a03      	ldr	r3, [r0, #32]
 800832c:	b90b      	cbnz	r3, 8008332 <_fflush_r+0x1a>
 800832e:	f7fe faf1 	bl	8006914 <__sinit>
 8008332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d0f3      	beq.n	8008322 <_fflush_r+0xa>
 800833a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800833c:	07d0      	lsls	r0, r2, #31
 800833e:	d404      	bmi.n	800834a <_fflush_r+0x32>
 8008340:	0599      	lsls	r1, r3, #22
 8008342:	d402      	bmi.n	800834a <_fflush_r+0x32>
 8008344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008346:	f7fe fbfe 	bl	8006b46 <__retarget_lock_acquire_recursive>
 800834a:	4628      	mov	r0, r5
 800834c:	4621      	mov	r1, r4
 800834e:	f7ff ff63 	bl	8008218 <__sflush_r>
 8008352:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008354:	4605      	mov	r5, r0
 8008356:	07da      	lsls	r2, r3, #31
 8008358:	d4e4      	bmi.n	8008324 <_fflush_r+0xc>
 800835a:	89a3      	ldrh	r3, [r4, #12]
 800835c:	059b      	lsls	r3, r3, #22
 800835e:	d4e1      	bmi.n	8008324 <_fflush_r+0xc>
 8008360:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008362:	f7fe fbf1 	bl	8006b48 <__retarget_lock_release_recursive>
 8008366:	e7dd      	b.n	8008324 <_fflush_r+0xc>

08008368 <__swbuf_r>:
 8008368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836a:	460e      	mov	r6, r1
 800836c:	4614      	mov	r4, r2
 800836e:	4605      	mov	r5, r0
 8008370:	b118      	cbz	r0, 800837a <__swbuf_r+0x12>
 8008372:	6a03      	ldr	r3, [r0, #32]
 8008374:	b90b      	cbnz	r3, 800837a <__swbuf_r+0x12>
 8008376:	f7fe facd 	bl	8006914 <__sinit>
 800837a:	69a3      	ldr	r3, [r4, #24]
 800837c:	60a3      	str	r3, [r4, #8]
 800837e:	89a3      	ldrh	r3, [r4, #12]
 8008380:	071a      	lsls	r2, r3, #28
 8008382:	d501      	bpl.n	8008388 <__swbuf_r+0x20>
 8008384:	6923      	ldr	r3, [r4, #16]
 8008386:	b943      	cbnz	r3, 800839a <__swbuf_r+0x32>
 8008388:	4621      	mov	r1, r4
 800838a:	4628      	mov	r0, r5
 800838c:	f000 f82a 	bl	80083e4 <__swsetup_r>
 8008390:	b118      	cbz	r0, 800839a <__swbuf_r+0x32>
 8008392:	f04f 37ff 	mov.w	r7, #4294967295
 8008396:	4638      	mov	r0, r7
 8008398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800839a:	6823      	ldr	r3, [r4, #0]
 800839c:	6922      	ldr	r2, [r4, #16]
 800839e:	b2f6      	uxtb	r6, r6
 80083a0:	1a98      	subs	r0, r3, r2
 80083a2:	6963      	ldr	r3, [r4, #20]
 80083a4:	4637      	mov	r7, r6
 80083a6:	4283      	cmp	r3, r0
 80083a8:	dc05      	bgt.n	80083b6 <__swbuf_r+0x4e>
 80083aa:	4621      	mov	r1, r4
 80083ac:	4628      	mov	r0, r5
 80083ae:	f7ff ffb3 	bl	8008318 <_fflush_r>
 80083b2:	2800      	cmp	r0, #0
 80083b4:	d1ed      	bne.n	8008392 <__swbuf_r+0x2a>
 80083b6:	68a3      	ldr	r3, [r4, #8]
 80083b8:	3b01      	subs	r3, #1
 80083ba:	60a3      	str	r3, [r4, #8]
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	1c5a      	adds	r2, r3, #1
 80083c0:	6022      	str	r2, [r4, #0]
 80083c2:	701e      	strb	r6, [r3, #0]
 80083c4:	6962      	ldr	r2, [r4, #20]
 80083c6:	1c43      	adds	r3, r0, #1
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d004      	beq.n	80083d6 <__swbuf_r+0x6e>
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	07db      	lsls	r3, r3, #31
 80083d0:	d5e1      	bpl.n	8008396 <__swbuf_r+0x2e>
 80083d2:	2e0a      	cmp	r6, #10
 80083d4:	d1df      	bne.n	8008396 <__swbuf_r+0x2e>
 80083d6:	4621      	mov	r1, r4
 80083d8:	4628      	mov	r0, r5
 80083da:	f7ff ff9d 	bl	8008318 <_fflush_r>
 80083de:	2800      	cmp	r0, #0
 80083e0:	d0d9      	beq.n	8008396 <__swbuf_r+0x2e>
 80083e2:	e7d6      	b.n	8008392 <__swbuf_r+0x2a>

080083e4 <__swsetup_r>:
 80083e4:	b538      	push	{r3, r4, r5, lr}
 80083e6:	4b29      	ldr	r3, [pc, #164]	@ (800848c <__swsetup_r+0xa8>)
 80083e8:	4605      	mov	r5, r0
 80083ea:	6818      	ldr	r0, [r3, #0]
 80083ec:	460c      	mov	r4, r1
 80083ee:	b118      	cbz	r0, 80083f8 <__swsetup_r+0x14>
 80083f0:	6a03      	ldr	r3, [r0, #32]
 80083f2:	b90b      	cbnz	r3, 80083f8 <__swsetup_r+0x14>
 80083f4:	f7fe fa8e 	bl	8006914 <__sinit>
 80083f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083fc:	0719      	lsls	r1, r3, #28
 80083fe:	d422      	bmi.n	8008446 <__swsetup_r+0x62>
 8008400:	06da      	lsls	r2, r3, #27
 8008402:	d407      	bmi.n	8008414 <__swsetup_r+0x30>
 8008404:	2209      	movs	r2, #9
 8008406:	602a      	str	r2, [r5, #0]
 8008408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800840c:	f04f 30ff 	mov.w	r0, #4294967295
 8008410:	81a3      	strh	r3, [r4, #12]
 8008412:	e033      	b.n	800847c <__swsetup_r+0x98>
 8008414:	0758      	lsls	r0, r3, #29
 8008416:	d512      	bpl.n	800843e <__swsetup_r+0x5a>
 8008418:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800841a:	b141      	cbz	r1, 800842e <__swsetup_r+0x4a>
 800841c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008420:	4299      	cmp	r1, r3
 8008422:	d002      	beq.n	800842a <__swsetup_r+0x46>
 8008424:	4628      	mov	r0, r5
 8008426:	f7ff f9ef 	bl	8007808 <_free_r>
 800842a:	2300      	movs	r3, #0
 800842c:	6363      	str	r3, [r4, #52]	@ 0x34
 800842e:	89a3      	ldrh	r3, [r4, #12]
 8008430:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008434:	81a3      	strh	r3, [r4, #12]
 8008436:	2300      	movs	r3, #0
 8008438:	6063      	str	r3, [r4, #4]
 800843a:	6923      	ldr	r3, [r4, #16]
 800843c:	6023      	str	r3, [r4, #0]
 800843e:	89a3      	ldrh	r3, [r4, #12]
 8008440:	f043 0308 	orr.w	r3, r3, #8
 8008444:	81a3      	strh	r3, [r4, #12]
 8008446:	6923      	ldr	r3, [r4, #16]
 8008448:	b94b      	cbnz	r3, 800845e <__swsetup_r+0x7a>
 800844a:	89a3      	ldrh	r3, [r4, #12]
 800844c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008454:	d003      	beq.n	800845e <__swsetup_r+0x7a>
 8008456:	4621      	mov	r1, r4
 8008458:	4628      	mov	r0, r5
 800845a:	f000 f8b0 	bl	80085be <__smakebuf_r>
 800845e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008462:	f013 0201 	ands.w	r2, r3, #1
 8008466:	d00a      	beq.n	800847e <__swsetup_r+0x9a>
 8008468:	2200      	movs	r2, #0
 800846a:	60a2      	str	r2, [r4, #8]
 800846c:	6962      	ldr	r2, [r4, #20]
 800846e:	4252      	negs	r2, r2
 8008470:	61a2      	str	r2, [r4, #24]
 8008472:	6922      	ldr	r2, [r4, #16]
 8008474:	b942      	cbnz	r2, 8008488 <__swsetup_r+0xa4>
 8008476:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800847a:	d1c5      	bne.n	8008408 <__swsetup_r+0x24>
 800847c:	bd38      	pop	{r3, r4, r5, pc}
 800847e:	0799      	lsls	r1, r3, #30
 8008480:	bf58      	it	pl
 8008482:	6962      	ldrpl	r2, [r4, #20]
 8008484:	60a2      	str	r2, [r4, #8]
 8008486:	e7f4      	b.n	8008472 <__swsetup_r+0x8e>
 8008488:	2000      	movs	r0, #0
 800848a:	e7f7      	b.n	800847c <__swsetup_r+0x98>
 800848c:	20000078 	.word	0x20000078

08008490 <memcpy>:
 8008490:	440a      	add	r2, r1
 8008492:	4291      	cmp	r1, r2
 8008494:	f100 33ff 	add.w	r3, r0, #4294967295
 8008498:	d100      	bne.n	800849c <memcpy+0xc>
 800849a:	4770      	bx	lr
 800849c:	b510      	push	{r4, lr}
 800849e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084a2:	4291      	cmp	r1, r2
 80084a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084a8:	d1f9      	bne.n	800849e <memcpy+0xe>
 80084aa:	bd10      	pop	{r4, pc}

080084ac <__assert_func>:
 80084ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084ae:	4614      	mov	r4, r2
 80084b0:	461a      	mov	r2, r3
 80084b2:	4b09      	ldr	r3, [pc, #36]	@ (80084d8 <__assert_func+0x2c>)
 80084b4:	4605      	mov	r5, r0
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68d8      	ldr	r0, [r3, #12]
 80084ba:	b954      	cbnz	r4, 80084d2 <__assert_func+0x26>
 80084bc:	4b07      	ldr	r3, [pc, #28]	@ (80084dc <__assert_func+0x30>)
 80084be:	461c      	mov	r4, r3
 80084c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084c4:	9100      	str	r1, [sp, #0]
 80084c6:	462b      	mov	r3, r5
 80084c8:	4905      	ldr	r1, [pc, #20]	@ (80084e0 <__assert_func+0x34>)
 80084ca:	f000 f841 	bl	8008550 <fiprintf>
 80084ce:	f000 f8d5 	bl	800867c <abort>
 80084d2:	4b04      	ldr	r3, [pc, #16]	@ (80084e4 <__assert_func+0x38>)
 80084d4:	e7f4      	b.n	80084c0 <__assert_func+0x14>
 80084d6:	bf00      	nop
 80084d8:	20000078 	.word	0x20000078
 80084dc:	080091b6 	.word	0x080091b6
 80084e0:	08009188 	.word	0x08009188
 80084e4:	0800917b 	.word	0x0800917b

080084e8 <_calloc_r>:
 80084e8:	b570      	push	{r4, r5, r6, lr}
 80084ea:	fba1 5402 	umull	r5, r4, r1, r2
 80084ee:	b93c      	cbnz	r4, 8008500 <_calloc_r+0x18>
 80084f0:	4629      	mov	r1, r5
 80084f2:	f7fd fc9b 	bl	8005e2c <_malloc_r>
 80084f6:	4606      	mov	r6, r0
 80084f8:	b928      	cbnz	r0, 8008506 <_calloc_r+0x1e>
 80084fa:	2600      	movs	r6, #0
 80084fc:	4630      	mov	r0, r6
 80084fe:	bd70      	pop	{r4, r5, r6, pc}
 8008500:	220c      	movs	r2, #12
 8008502:	6002      	str	r2, [r0, #0]
 8008504:	e7f9      	b.n	80084fa <_calloc_r+0x12>
 8008506:	462a      	mov	r2, r5
 8008508:	4621      	mov	r1, r4
 800850a:	f7fe fa8e 	bl	8006a2a <memset>
 800850e:	e7f5      	b.n	80084fc <_calloc_r+0x14>

08008510 <__ascii_mbtowc>:
 8008510:	b082      	sub	sp, #8
 8008512:	b901      	cbnz	r1, 8008516 <__ascii_mbtowc+0x6>
 8008514:	a901      	add	r1, sp, #4
 8008516:	b142      	cbz	r2, 800852a <__ascii_mbtowc+0x1a>
 8008518:	b14b      	cbz	r3, 800852e <__ascii_mbtowc+0x1e>
 800851a:	7813      	ldrb	r3, [r2, #0]
 800851c:	600b      	str	r3, [r1, #0]
 800851e:	7812      	ldrb	r2, [r2, #0]
 8008520:	1e10      	subs	r0, r2, #0
 8008522:	bf18      	it	ne
 8008524:	2001      	movne	r0, #1
 8008526:	b002      	add	sp, #8
 8008528:	4770      	bx	lr
 800852a:	4610      	mov	r0, r2
 800852c:	e7fb      	b.n	8008526 <__ascii_mbtowc+0x16>
 800852e:	f06f 0001 	mvn.w	r0, #1
 8008532:	e7f8      	b.n	8008526 <__ascii_mbtowc+0x16>

08008534 <__ascii_wctomb>:
 8008534:	4603      	mov	r3, r0
 8008536:	4608      	mov	r0, r1
 8008538:	b141      	cbz	r1, 800854c <__ascii_wctomb+0x18>
 800853a:	2aff      	cmp	r2, #255	@ 0xff
 800853c:	d904      	bls.n	8008548 <__ascii_wctomb+0x14>
 800853e:	228a      	movs	r2, #138	@ 0x8a
 8008540:	f04f 30ff 	mov.w	r0, #4294967295
 8008544:	601a      	str	r2, [r3, #0]
 8008546:	4770      	bx	lr
 8008548:	2001      	movs	r0, #1
 800854a:	700a      	strb	r2, [r1, #0]
 800854c:	4770      	bx	lr
	...

08008550 <fiprintf>:
 8008550:	b40e      	push	{r1, r2, r3}
 8008552:	b503      	push	{r0, r1, lr}
 8008554:	4601      	mov	r1, r0
 8008556:	ab03      	add	r3, sp, #12
 8008558:	4805      	ldr	r0, [pc, #20]	@ (8008570 <fiprintf+0x20>)
 800855a:	f853 2b04 	ldr.w	r2, [r3], #4
 800855e:	6800      	ldr	r0, [r0, #0]
 8008560:	9301      	str	r3, [sp, #4]
 8008562:	f7ff fd41 	bl	8007fe8 <_vfiprintf_r>
 8008566:	b002      	add	sp, #8
 8008568:	f85d eb04 	ldr.w	lr, [sp], #4
 800856c:	b003      	add	sp, #12
 800856e:	4770      	bx	lr
 8008570:	20000078 	.word	0x20000078

08008574 <__swhatbuf_r>:
 8008574:	b570      	push	{r4, r5, r6, lr}
 8008576:	460c      	mov	r4, r1
 8008578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800857c:	4615      	mov	r5, r2
 800857e:	2900      	cmp	r1, #0
 8008580:	461e      	mov	r6, r3
 8008582:	b096      	sub	sp, #88	@ 0x58
 8008584:	da0c      	bge.n	80085a0 <__swhatbuf_r+0x2c>
 8008586:	89a3      	ldrh	r3, [r4, #12]
 8008588:	2100      	movs	r1, #0
 800858a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800858e:	bf14      	ite	ne
 8008590:	2340      	movne	r3, #64	@ 0x40
 8008592:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008596:	2000      	movs	r0, #0
 8008598:	6031      	str	r1, [r6, #0]
 800859a:	602b      	str	r3, [r5, #0]
 800859c:	b016      	add	sp, #88	@ 0x58
 800859e:	bd70      	pop	{r4, r5, r6, pc}
 80085a0:	466a      	mov	r2, sp
 80085a2:	f000 f849 	bl	8008638 <_fstat_r>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	dbed      	blt.n	8008586 <__swhatbuf_r+0x12>
 80085aa:	9901      	ldr	r1, [sp, #4]
 80085ac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80085b0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80085b4:	4259      	negs	r1, r3
 80085b6:	4159      	adcs	r1, r3
 80085b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085bc:	e7eb      	b.n	8008596 <__swhatbuf_r+0x22>

080085be <__smakebuf_r>:
 80085be:	898b      	ldrh	r3, [r1, #12]
 80085c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085c2:	079d      	lsls	r5, r3, #30
 80085c4:	4606      	mov	r6, r0
 80085c6:	460c      	mov	r4, r1
 80085c8:	d507      	bpl.n	80085da <__smakebuf_r+0x1c>
 80085ca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80085ce:	6023      	str	r3, [r4, #0]
 80085d0:	6123      	str	r3, [r4, #16]
 80085d2:	2301      	movs	r3, #1
 80085d4:	6163      	str	r3, [r4, #20]
 80085d6:	b003      	add	sp, #12
 80085d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085da:	466a      	mov	r2, sp
 80085dc:	ab01      	add	r3, sp, #4
 80085de:	f7ff ffc9 	bl	8008574 <__swhatbuf_r>
 80085e2:	9f00      	ldr	r7, [sp, #0]
 80085e4:	4605      	mov	r5, r0
 80085e6:	4639      	mov	r1, r7
 80085e8:	4630      	mov	r0, r6
 80085ea:	f7fd fc1f 	bl	8005e2c <_malloc_r>
 80085ee:	b948      	cbnz	r0, 8008604 <__smakebuf_r+0x46>
 80085f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085f4:	059a      	lsls	r2, r3, #22
 80085f6:	d4ee      	bmi.n	80085d6 <__smakebuf_r+0x18>
 80085f8:	f023 0303 	bic.w	r3, r3, #3
 80085fc:	f043 0302 	orr.w	r3, r3, #2
 8008600:	81a3      	strh	r3, [r4, #12]
 8008602:	e7e2      	b.n	80085ca <__smakebuf_r+0xc>
 8008604:	89a3      	ldrh	r3, [r4, #12]
 8008606:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800860a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800860e:	81a3      	strh	r3, [r4, #12]
 8008610:	9b01      	ldr	r3, [sp, #4]
 8008612:	6020      	str	r0, [r4, #0]
 8008614:	b15b      	cbz	r3, 800862e <__smakebuf_r+0x70>
 8008616:	4630      	mov	r0, r6
 8008618:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800861c:	f000 f81e 	bl	800865c <_isatty_r>
 8008620:	b128      	cbz	r0, 800862e <__smakebuf_r+0x70>
 8008622:	89a3      	ldrh	r3, [r4, #12]
 8008624:	f023 0303 	bic.w	r3, r3, #3
 8008628:	f043 0301 	orr.w	r3, r3, #1
 800862c:	81a3      	strh	r3, [r4, #12]
 800862e:	89a3      	ldrh	r3, [r4, #12]
 8008630:	431d      	orrs	r5, r3
 8008632:	81a5      	strh	r5, [r4, #12]
 8008634:	e7cf      	b.n	80085d6 <__smakebuf_r+0x18>
	...

08008638 <_fstat_r>:
 8008638:	b538      	push	{r3, r4, r5, lr}
 800863a:	2300      	movs	r3, #0
 800863c:	4d06      	ldr	r5, [pc, #24]	@ (8008658 <_fstat_r+0x20>)
 800863e:	4604      	mov	r4, r0
 8008640:	4608      	mov	r0, r1
 8008642:	4611      	mov	r1, r2
 8008644:	602b      	str	r3, [r5, #0]
 8008646:	f7f9 ff69 	bl	800251c <_fstat>
 800864a:	1c43      	adds	r3, r0, #1
 800864c:	d102      	bne.n	8008654 <_fstat_r+0x1c>
 800864e:	682b      	ldr	r3, [r5, #0]
 8008650:	b103      	cbz	r3, 8008654 <_fstat_r+0x1c>
 8008652:	6023      	str	r3, [r4, #0]
 8008654:	bd38      	pop	{r3, r4, r5, pc}
 8008656:	bf00      	nop
 8008658:	20000a2c 	.word	0x20000a2c

0800865c <_isatty_r>:
 800865c:	b538      	push	{r3, r4, r5, lr}
 800865e:	2300      	movs	r3, #0
 8008660:	4d05      	ldr	r5, [pc, #20]	@ (8008678 <_isatty_r+0x1c>)
 8008662:	4604      	mov	r4, r0
 8008664:	4608      	mov	r0, r1
 8008666:	602b      	str	r3, [r5, #0]
 8008668:	f7f9 ff67 	bl	800253a <_isatty>
 800866c:	1c43      	adds	r3, r0, #1
 800866e:	d102      	bne.n	8008676 <_isatty_r+0x1a>
 8008670:	682b      	ldr	r3, [r5, #0]
 8008672:	b103      	cbz	r3, 8008676 <_isatty_r+0x1a>
 8008674:	6023      	str	r3, [r4, #0]
 8008676:	bd38      	pop	{r3, r4, r5, pc}
 8008678:	20000a2c 	.word	0x20000a2c

0800867c <abort>:
 800867c:	2006      	movs	r0, #6
 800867e:	b508      	push	{r3, lr}
 8008680:	f000 f82c 	bl	80086dc <raise>
 8008684:	2001      	movs	r0, #1
 8008686:	f7f9 fefa 	bl	800247e <_exit>

0800868a <_raise_r>:
 800868a:	291f      	cmp	r1, #31
 800868c:	b538      	push	{r3, r4, r5, lr}
 800868e:	4605      	mov	r5, r0
 8008690:	460c      	mov	r4, r1
 8008692:	d904      	bls.n	800869e <_raise_r+0x14>
 8008694:	2316      	movs	r3, #22
 8008696:	6003      	str	r3, [r0, #0]
 8008698:	f04f 30ff 	mov.w	r0, #4294967295
 800869c:	bd38      	pop	{r3, r4, r5, pc}
 800869e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80086a0:	b112      	cbz	r2, 80086a8 <_raise_r+0x1e>
 80086a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086a6:	b94b      	cbnz	r3, 80086bc <_raise_r+0x32>
 80086a8:	4628      	mov	r0, r5
 80086aa:	f000 f831 	bl	8008710 <_getpid_r>
 80086ae:	4622      	mov	r2, r4
 80086b0:	4601      	mov	r1, r0
 80086b2:	4628      	mov	r0, r5
 80086b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086b8:	f000 b818 	b.w	80086ec <_kill_r>
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d00a      	beq.n	80086d6 <_raise_r+0x4c>
 80086c0:	1c59      	adds	r1, r3, #1
 80086c2:	d103      	bne.n	80086cc <_raise_r+0x42>
 80086c4:	2316      	movs	r3, #22
 80086c6:	6003      	str	r3, [r0, #0]
 80086c8:	2001      	movs	r0, #1
 80086ca:	e7e7      	b.n	800869c <_raise_r+0x12>
 80086cc:	2100      	movs	r1, #0
 80086ce:	4620      	mov	r0, r4
 80086d0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80086d4:	4798      	blx	r3
 80086d6:	2000      	movs	r0, #0
 80086d8:	e7e0      	b.n	800869c <_raise_r+0x12>
	...

080086dc <raise>:
 80086dc:	4b02      	ldr	r3, [pc, #8]	@ (80086e8 <raise+0xc>)
 80086de:	4601      	mov	r1, r0
 80086e0:	6818      	ldr	r0, [r3, #0]
 80086e2:	f7ff bfd2 	b.w	800868a <_raise_r>
 80086e6:	bf00      	nop
 80086e8:	20000078 	.word	0x20000078

080086ec <_kill_r>:
 80086ec:	b538      	push	{r3, r4, r5, lr}
 80086ee:	2300      	movs	r3, #0
 80086f0:	4d06      	ldr	r5, [pc, #24]	@ (800870c <_kill_r+0x20>)
 80086f2:	4604      	mov	r4, r0
 80086f4:	4608      	mov	r0, r1
 80086f6:	4611      	mov	r1, r2
 80086f8:	602b      	str	r3, [r5, #0]
 80086fa:	f7f9 feb0 	bl	800245e <_kill>
 80086fe:	1c43      	adds	r3, r0, #1
 8008700:	d102      	bne.n	8008708 <_kill_r+0x1c>
 8008702:	682b      	ldr	r3, [r5, #0]
 8008704:	b103      	cbz	r3, 8008708 <_kill_r+0x1c>
 8008706:	6023      	str	r3, [r4, #0]
 8008708:	bd38      	pop	{r3, r4, r5, pc}
 800870a:	bf00      	nop
 800870c:	20000a2c 	.word	0x20000a2c

08008710 <_getpid_r>:
 8008710:	f7f9 be9e 	b.w	8002450 <_getpid>

08008714 <log>:
 8008714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008716:	4604      	mov	r4, r0
 8008718:	460d      	mov	r5, r1
 800871a:	f000 f835 	bl	8008788 <__ieee754_log>
 800871e:	4622      	mov	r2, r4
 8008720:	4606      	mov	r6, r0
 8008722:	460f      	mov	r7, r1
 8008724:	462b      	mov	r3, r5
 8008726:	4620      	mov	r0, r4
 8008728:	4629      	mov	r1, r5
 800872a:	f7f8 f9ab 	bl	8000a84 <__aeabi_dcmpun>
 800872e:	b998      	cbnz	r0, 8008758 <log+0x44>
 8008730:	2200      	movs	r2, #0
 8008732:	2300      	movs	r3, #0
 8008734:	4620      	mov	r0, r4
 8008736:	4629      	mov	r1, r5
 8008738:	f7f8 f99a 	bl	8000a70 <__aeabi_dcmpgt>
 800873c:	b960      	cbnz	r0, 8008758 <log+0x44>
 800873e:	2200      	movs	r2, #0
 8008740:	2300      	movs	r3, #0
 8008742:	4620      	mov	r0, r4
 8008744:	4629      	mov	r1, r5
 8008746:	f7f8 f96b 	bl	8000a20 <__aeabi_dcmpeq>
 800874a:	b140      	cbz	r0, 800875e <log+0x4a>
 800874c:	f7fe f9d0 	bl	8006af0 <__errno>
 8008750:	2322      	movs	r3, #34	@ 0x22
 8008752:	2600      	movs	r6, #0
 8008754:	4f06      	ldr	r7, [pc, #24]	@ (8008770 <log+0x5c>)
 8008756:	6003      	str	r3, [r0, #0]
 8008758:	4630      	mov	r0, r6
 800875a:	4639      	mov	r1, r7
 800875c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800875e:	f7fe f9c7 	bl	8006af0 <__errno>
 8008762:	2321      	movs	r3, #33	@ 0x21
 8008764:	6003      	str	r3, [r0, #0]
 8008766:	4803      	ldr	r0, [pc, #12]	@ (8008774 <log+0x60>)
 8008768:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800876c:	f000 b804 	b.w	8008778 <nan>
 8008770:	fff00000 	.word	0xfff00000
 8008774:	080091b6 	.word	0x080091b6

08008778 <nan>:
 8008778:	2000      	movs	r0, #0
 800877a:	4901      	ldr	r1, [pc, #4]	@ (8008780 <nan+0x8>)
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	7ff80000 	.word	0x7ff80000
 8008784:	00000000 	.word	0x00000000

08008788 <__ieee754_log>:
 8008788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878c:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	460d      	mov	r5, r1
 8008796:	b087      	sub	sp, #28
 8008798:	da24      	bge.n	80087e4 <__ieee754_log+0x5c>
 800879a:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800879e:	4304      	orrs	r4, r0
 80087a0:	d108      	bne.n	80087b4 <__ieee754_log+0x2c>
 80087a2:	2200      	movs	r2, #0
 80087a4:	2300      	movs	r3, #0
 80087a6:	2000      	movs	r0, #0
 80087a8:	49cb      	ldr	r1, [pc, #812]	@ (8008ad8 <__ieee754_log+0x350>)
 80087aa:	f7f7 fffb 	bl	80007a4 <__aeabi_ddiv>
 80087ae:	b007      	add	sp, #28
 80087b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b4:	2900      	cmp	r1, #0
 80087b6:	da04      	bge.n	80087c2 <__ieee754_log+0x3a>
 80087b8:	f7f7 fd12 	bl	80001e0 <__aeabi_dsub>
 80087bc:	2200      	movs	r2, #0
 80087be:	2300      	movs	r3, #0
 80087c0:	e7f3      	b.n	80087aa <__ieee754_log+0x22>
 80087c2:	2200      	movs	r2, #0
 80087c4:	4bc5      	ldr	r3, [pc, #788]	@ (8008adc <__ieee754_log+0x354>)
 80087c6:	f7f7 fec3 	bl	8000550 <__aeabi_dmul>
 80087ca:	460b      	mov	r3, r1
 80087cc:	460d      	mov	r5, r1
 80087ce:	4602      	mov	r2, r0
 80087d0:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 80087d4:	48c2      	ldr	r0, [pc, #776]	@ (8008ae0 <__ieee754_log+0x358>)
 80087d6:	4285      	cmp	r5, r0
 80087d8:	dd06      	ble.n	80087e8 <__ieee754_log+0x60>
 80087da:	4610      	mov	r0, r2
 80087dc:	4619      	mov	r1, r3
 80087de:	f7f7 fd01 	bl	80001e4 <__adddf3>
 80087e2:	e7e4      	b.n	80087ae <__ieee754_log+0x26>
 80087e4:	2100      	movs	r1, #0
 80087e6:	e7f5      	b.n	80087d4 <__ieee754_log+0x4c>
 80087e8:	152c      	asrs	r4, r5, #20
 80087ea:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 80087ee:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80087f2:	440c      	add	r4, r1
 80087f4:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 80087f8:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 80087fc:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8008800:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 8008804:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8008808:	ea41 0305 	orr.w	r3, r1, r5
 800880c:	4610      	mov	r0, r2
 800880e:	4619      	mov	r1, r3
 8008810:	2200      	movs	r2, #0
 8008812:	4bb4      	ldr	r3, [pc, #720]	@ (8008ae4 <__ieee754_log+0x35c>)
 8008814:	f7f7 fce4 	bl	80001e0 <__aeabi_dsub>
 8008818:	1cab      	adds	r3, r5, #2
 800881a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800881e:	2b02      	cmp	r3, #2
 8008820:	4682      	mov	sl, r0
 8008822:	468b      	mov	fp, r1
 8008824:	f04f 0200 	mov.w	r2, #0
 8008828:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800882c:	dc53      	bgt.n	80088d6 <__ieee754_log+0x14e>
 800882e:	2300      	movs	r3, #0
 8008830:	f7f8 f8f6 	bl	8000a20 <__aeabi_dcmpeq>
 8008834:	b1d0      	cbz	r0, 800886c <__ieee754_log+0xe4>
 8008836:	2c00      	cmp	r4, #0
 8008838:	f000 8120 	beq.w	8008a7c <__ieee754_log+0x2f4>
 800883c:	4620      	mov	r0, r4
 800883e:	f7f7 fe1d 	bl	800047c <__aeabi_i2d>
 8008842:	a391      	add	r3, pc, #580	@ (adr r3, 8008a88 <__ieee754_log+0x300>)
 8008844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008848:	4606      	mov	r6, r0
 800884a:	460f      	mov	r7, r1
 800884c:	f7f7 fe80 	bl	8000550 <__aeabi_dmul>
 8008850:	a38f      	add	r3, pc, #572	@ (adr r3, 8008a90 <__ieee754_log+0x308>)
 8008852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008856:	4604      	mov	r4, r0
 8008858:	460d      	mov	r5, r1
 800885a:	4630      	mov	r0, r6
 800885c:	4639      	mov	r1, r7
 800885e:	f7f7 fe77 	bl	8000550 <__aeabi_dmul>
 8008862:	4602      	mov	r2, r0
 8008864:	460b      	mov	r3, r1
 8008866:	4620      	mov	r0, r4
 8008868:	4629      	mov	r1, r5
 800886a:	e7b8      	b.n	80087de <__ieee754_log+0x56>
 800886c:	a38a      	add	r3, pc, #552	@ (adr r3, 8008a98 <__ieee754_log+0x310>)
 800886e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008872:	4650      	mov	r0, sl
 8008874:	4659      	mov	r1, fp
 8008876:	f7f7 fe6b 	bl	8000550 <__aeabi_dmul>
 800887a:	4602      	mov	r2, r0
 800887c:	460b      	mov	r3, r1
 800887e:	2000      	movs	r0, #0
 8008880:	4999      	ldr	r1, [pc, #612]	@ (8008ae8 <__ieee754_log+0x360>)
 8008882:	f7f7 fcad 	bl	80001e0 <__aeabi_dsub>
 8008886:	4652      	mov	r2, sl
 8008888:	4606      	mov	r6, r0
 800888a:	460f      	mov	r7, r1
 800888c:	465b      	mov	r3, fp
 800888e:	4650      	mov	r0, sl
 8008890:	4659      	mov	r1, fp
 8008892:	f7f7 fe5d 	bl	8000550 <__aeabi_dmul>
 8008896:	4602      	mov	r2, r0
 8008898:	460b      	mov	r3, r1
 800889a:	4630      	mov	r0, r6
 800889c:	4639      	mov	r1, r7
 800889e:	f7f7 fe57 	bl	8000550 <__aeabi_dmul>
 80088a2:	4606      	mov	r6, r0
 80088a4:	460f      	mov	r7, r1
 80088a6:	b914      	cbnz	r4, 80088ae <__ieee754_log+0x126>
 80088a8:	4632      	mov	r2, r6
 80088aa:	463b      	mov	r3, r7
 80088ac:	e0a0      	b.n	80089f0 <__ieee754_log+0x268>
 80088ae:	4620      	mov	r0, r4
 80088b0:	f7f7 fde4 	bl	800047c <__aeabi_i2d>
 80088b4:	a374      	add	r3, pc, #464	@ (adr r3, 8008a88 <__ieee754_log+0x300>)
 80088b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ba:	4680      	mov	r8, r0
 80088bc:	4689      	mov	r9, r1
 80088be:	f7f7 fe47 	bl	8000550 <__aeabi_dmul>
 80088c2:	a373      	add	r3, pc, #460	@ (adr r3, 8008a90 <__ieee754_log+0x308>)
 80088c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c8:	4604      	mov	r4, r0
 80088ca:	460d      	mov	r5, r1
 80088cc:	4640      	mov	r0, r8
 80088ce:	4649      	mov	r1, r9
 80088d0:	f7f7 fe3e 	bl	8000550 <__aeabi_dmul>
 80088d4:	e0a5      	b.n	8008a22 <__ieee754_log+0x29a>
 80088d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80088da:	f7f7 fc83 	bl	80001e4 <__adddf3>
 80088de:	4602      	mov	r2, r0
 80088e0:	460b      	mov	r3, r1
 80088e2:	4650      	mov	r0, sl
 80088e4:	4659      	mov	r1, fp
 80088e6:	f7f7 ff5d 	bl	80007a4 <__aeabi_ddiv>
 80088ea:	e9cd 0100 	strd	r0, r1, [sp]
 80088ee:	4620      	mov	r0, r4
 80088f0:	f7f7 fdc4 	bl	800047c <__aeabi_i2d>
 80088f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088fc:	4610      	mov	r0, r2
 80088fe:	4619      	mov	r1, r3
 8008900:	f7f7 fe26 	bl	8000550 <__aeabi_dmul>
 8008904:	4602      	mov	r2, r0
 8008906:	460b      	mov	r3, r1
 8008908:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800890c:	f7f7 fe20 	bl	8000550 <__aeabi_dmul>
 8008910:	a363      	add	r3, pc, #396	@ (adr r3, 8008aa0 <__ieee754_log+0x318>)
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	4680      	mov	r8, r0
 8008918:	4689      	mov	r9, r1
 800891a:	f7f7 fe19 	bl	8000550 <__aeabi_dmul>
 800891e:	a362      	add	r3, pc, #392	@ (adr r3, 8008aa8 <__ieee754_log+0x320>)
 8008920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008924:	f7f7 fc5e 	bl	80001e4 <__adddf3>
 8008928:	4642      	mov	r2, r8
 800892a:	464b      	mov	r3, r9
 800892c:	f7f7 fe10 	bl	8000550 <__aeabi_dmul>
 8008930:	a35f      	add	r3, pc, #380	@ (adr r3, 8008ab0 <__ieee754_log+0x328>)
 8008932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008936:	f7f7 fc55 	bl	80001e4 <__adddf3>
 800893a:	4642      	mov	r2, r8
 800893c:	464b      	mov	r3, r9
 800893e:	f7f7 fe07 	bl	8000550 <__aeabi_dmul>
 8008942:	a35d      	add	r3, pc, #372	@ (adr r3, 8008ab8 <__ieee754_log+0x330>)
 8008944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008948:	f7f7 fc4c 	bl	80001e4 <__adddf3>
 800894c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008950:	f7f7 fdfe 	bl	8000550 <__aeabi_dmul>
 8008954:	a35a      	add	r3, pc, #360	@ (adr r3, 8008ac0 <__ieee754_log+0x338>)
 8008956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800895e:	4640      	mov	r0, r8
 8008960:	4649      	mov	r1, r9
 8008962:	f7f7 fdf5 	bl	8000550 <__aeabi_dmul>
 8008966:	a358      	add	r3, pc, #352	@ (adr r3, 8008ac8 <__ieee754_log+0x340>)
 8008968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896c:	f7f7 fc3a 	bl	80001e4 <__adddf3>
 8008970:	4642      	mov	r2, r8
 8008972:	464b      	mov	r3, r9
 8008974:	f7f7 fdec 	bl	8000550 <__aeabi_dmul>
 8008978:	a355      	add	r3, pc, #340	@ (adr r3, 8008ad0 <__ieee754_log+0x348>)
 800897a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897e:	f7f7 fc31 	bl	80001e4 <__adddf3>
 8008982:	4642      	mov	r2, r8
 8008984:	464b      	mov	r3, r9
 8008986:	f7f7 fde3 	bl	8000550 <__aeabi_dmul>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008992:	f7f7 fc27 	bl	80001e4 <__adddf3>
 8008996:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 800899a:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 800899e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 80089a2:	3551      	adds	r5, #81	@ 0x51
 80089a4:	4335      	orrs	r5, r6
 80089a6:	2d00      	cmp	r5, #0
 80089a8:	4680      	mov	r8, r0
 80089aa:	4689      	mov	r9, r1
 80089ac:	dd48      	ble.n	8008a40 <__ieee754_log+0x2b8>
 80089ae:	2200      	movs	r2, #0
 80089b0:	4b4d      	ldr	r3, [pc, #308]	@ (8008ae8 <__ieee754_log+0x360>)
 80089b2:	4650      	mov	r0, sl
 80089b4:	4659      	mov	r1, fp
 80089b6:	f7f7 fdcb 	bl	8000550 <__aeabi_dmul>
 80089ba:	4652      	mov	r2, sl
 80089bc:	465b      	mov	r3, fp
 80089be:	f7f7 fdc7 	bl	8000550 <__aeabi_dmul>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	4606      	mov	r6, r0
 80089c8:	460f      	mov	r7, r1
 80089ca:	4640      	mov	r0, r8
 80089cc:	4649      	mov	r1, r9
 80089ce:	f7f7 fc09 	bl	80001e4 <__adddf3>
 80089d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80089d6:	f7f7 fdbb 	bl	8000550 <__aeabi_dmul>
 80089da:	4680      	mov	r8, r0
 80089dc:	4689      	mov	r9, r1
 80089de:	b964      	cbnz	r4, 80089fa <__ieee754_log+0x272>
 80089e0:	4602      	mov	r2, r0
 80089e2:	460b      	mov	r3, r1
 80089e4:	4630      	mov	r0, r6
 80089e6:	4639      	mov	r1, r7
 80089e8:	f7f7 fbfa 	bl	80001e0 <__aeabi_dsub>
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	4650      	mov	r0, sl
 80089f2:	4659      	mov	r1, fp
 80089f4:	f7f7 fbf4 	bl	80001e0 <__aeabi_dsub>
 80089f8:	e6d9      	b.n	80087ae <__ieee754_log+0x26>
 80089fa:	a323      	add	r3, pc, #140	@ (adr r3, 8008a88 <__ieee754_log+0x300>)
 80089fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a04:	f7f7 fda4 	bl	8000550 <__aeabi_dmul>
 8008a08:	a321      	add	r3, pc, #132	@ (adr r3, 8008a90 <__ieee754_log+0x308>)
 8008a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0e:	4604      	mov	r4, r0
 8008a10:	460d      	mov	r5, r1
 8008a12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a16:	f7f7 fd9b 	bl	8000550 <__aeabi_dmul>
 8008a1a:	4642      	mov	r2, r8
 8008a1c:	464b      	mov	r3, r9
 8008a1e:	f7f7 fbe1 	bl	80001e4 <__adddf3>
 8008a22:	4602      	mov	r2, r0
 8008a24:	460b      	mov	r3, r1
 8008a26:	4630      	mov	r0, r6
 8008a28:	4639      	mov	r1, r7
 8008a2a:	f7f7 fbd9 	bl	80001e0 <__aeabi_dsub>
 8008a2e:	4652      	mov	r2, sl
 8008a30:	465b      	mov	r3, fp
 8008a32:	f7f7 fbd5 	bl	80001e0 <__aeabi_dsub>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	e7d9      	b.n	80089f4 <__ieee754_log+0x26c>
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	4650      	mov	r0, sl
 8008a46:	4659      	mov	r1, fp
 8008a48:	f7f7 fbca 	bl	80001e0 <__aeabi_dsub>
 8008a4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a50:	f7f7 fd7e 	bl	8000550 <__aeabi_dmul>
 8008a54:	4606      	mov	r6, r0
 8008a56:	460f      	mov	r7, r1
 8008a58:	2c00      	cmp	r4, #0
 8008a5a:	f43f af25 	beq.w	80088a8 <__ieee754_log+0x120>
 8008a5e:	a30a      	add	r3, pc, #40	@ (adr r3, 8008a88 <__ieee754_log+0x300>)
 8008a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a68:	f7f7 fd72 	bl	8000550 <__aeabi_dmul>
 8008a6c:	a308      	add	r3, pc, #32	@ (adr r3, 8008a90 <__ieee754_log+0x308>)
 8008a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a72:	4604      	mov	r4, r0
 8008a74:	460d      	mov	r5, r1
 8008a76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a7a:	e729      	b.n	80088d0 <__ieee754_log+0x148>
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	2100      	movs	r1, #0
 8008a80:	e695      	b.n	80087ae <__ieee754_log+0x26>
 8008a82:	bf00      	nop
 8008a84:	f3af 8000 	nop.w
 8008a88:	fee00000 	.word	0xfee00000
 8008a8c:	3fe62e42 	.word	0x3fe62e42
 8008a90:	35793c76 	.word	0x35793c76
 8008a94:	3dea39ef 	.word	0x3dea39ef
 8008a98:	55555555 	.word	0x55555555
 8008a9c:	3fd55555 	.word	0x3fd55555
 8008aa0:	df3e5244 	.word	0xdf3e5244
 8008aa4:	3fc2f112 	.word	0x3fc2f112
 8008aa8:	96cb03de 	.word	0x96cb03de
 8008aac:	3fc74664 	.word	0x3fc74664
 8008ab0:	94229359 	.word	0x94229359
 8008ab4:	3fd24924 	.word	0x3fd24924
 8008ab8:	55555593 	.word	0x55555593
 8008abc:	3fe55555 	.word	0x3fe55555
 8008ac0:	d078c69f 	.word	0xd078c69f
 8008ac4:	3fc39a09 	.word	0x3fc39a09
 8008ac8:	1d8e78af 	.word	0x1d8e78af
 8008acc:	3fcc71c5 	.word	0x3fcc71c5
 8008ad0:	9997fa04 	.word	0x9997fa04
 8008ad4:	3fd99999 	.word	0x3fd99999
 8008ad8:	c3500000 	.word	0xc3500000
 8008adc:	43500000 	.word	0x43500000
 8008ae0:	7fefffff 	.word	0x7fefffff
 8008ae4:	3ff00000 	.word	0x3ff00000
 8008ae8:	3fe00000 	.word	0x3fe00000

08008aec <_init>:
 8008aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aee:	bf00      	nop
 8008af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008af2:	bc08      	pop	{r3}
 8008af4:	469e      	mov	lr, r3
 8008af6:	4770      	bx	lr

08008af8 <_fini>:
 8008af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afa:	bf00      	nop
 8008afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008afe:	bc08      	pop	{r3}
 8008b00:	469e      	mov	lr, r3
 8008b02:	4770      	bx	lr
