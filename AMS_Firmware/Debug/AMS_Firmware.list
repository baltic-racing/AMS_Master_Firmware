
AMS_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fac  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  08007138  08007138  00008138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074b8  080074b8  00009234  2**0
                  CONTENTS
  4 .ARM          00000008  080074b8  080074b8  000084b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074c0  080074c0  00009234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074c0  080074c0  000084c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074c4  080074c4  000084c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  080074c8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000828  20000234  080076fc  00009234  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a5c  080076fc  00009a5c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009234  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fee  00000000  00000000  0000925d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f84  00000000  00000000  0001b24b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  0001e1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d3b  00000000  00000000  0001f320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039fb  00000000  00000000  0002005b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c61  00000000  00000000  00023a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bebc5  00000000  00000000  000386b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f727c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058a4  00000000  00000000  000f72c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000fcb64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000234 	.word	0x20000234
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800711c 	.word	0x0800711c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000238 	.word	0x20000238
 80001c4:	0800711c 	.word	0x0800711c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295
 8000b14:	f000 b968 	b.w	8000de8 <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9d08      	ldr	r5, [sp, #32]
 8000b36:	460c      	mov	r4, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14e      	bne.n	8000bda <__udivmoddi4+0xaa>
 8000b3c:	4694      	mov	ip, r2
 8000b3e:	458c      	cmp	ip, r1
 8000b40:	4686      	mov	lr, r0
 8000b42:	fab2 f282 	clz	r2, r2
 8000b46:	d962      	bls.n	8000c0e <__udivmoddi4+0xde>
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0320 	rsb	r3, r2, #32
 8000b4e:	4091      	lsls	r1, r2
 8000b50:	fa20 f303 	lsr.w	r3, r0, r3
 8000b54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b58:	4319      	orrs	r1, r3
 8000b5a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b62:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b66:	fb07 1114 	mls	r1, r7, r4, r1
 8000b6a:	fa1f f68c 	uxth.w	r6, ip
 8000b6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b76:	fb04 f106 	mul.w	r1, r4, r6
 8000b7a:	4299      	cmp	r1, r3
 8000b7c:	d90a      	bls.n	8000b94 <__udivmoddi4+0x64>
 8000b7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b82:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b86:	f080 8110 	bcs.w	8000daa <__udivmoddi4+0x27a>
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	f240 810d 	bls.w	8000daa <__udivmoddi4+0x27a>
 8000b90:	3c02      	subs	r4, #2
 8000b92:	4463      	add	r3, ip
 8000b94:	1a59      	subs	r1, r3, r1
 8000b96:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b9a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ba2:	fa1f f38e 	uxth.w	r3, lr
 8000ba6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000baa:	429e      	cmp	r6, r3
 8000bac:	d90a      	bls.n	8000bc4 <__udivmoddi4+0x94>
 8000bae:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bb6:	f080 80fa 	bcs.w	8000dae <__udivmoddi4+0x27e>
 8000bba:	429e      	cmp	r6, r3
 8000bbc:	f240 80f7 	bls.w	8000dae <__udivmoddi4+0x27e>
 8000bc0:	4463      	add	r3, ip
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	1b9b      	subs	r3, r3, r6
 8000bc8:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bcc:	b11d      	cbz	r5, 8000bd6 <__udivmoddi4+0xa6>
 8000bce:	40d3      	lsrs	r3, r2
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d905      	bls.n	8000bea <__udivmoddi4+0xba>
 8000bde:	b10d      	cbz	r5, 8000be4 <__udivmoddi4+0xb4>
 8000be0:	e9c5 0100 	strd	r0, r1, [r5]
 8000be4:	2100      	movs	r1, #0
 8000be6:	4608      	mov	r0, r1
 8000be8:	e7f5      	b.n	8000bd6 <__udivmoddi4+0xa6>
 8000bea:	fab3 f183 	clz	r1, r3
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d146      	bne.n	8000c80 <__udivmoddi4+0x150>
 8000bf2:	42a3      	cmp	r3, r4
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xcc>
 8000bf6:	4290      	cmp	r0, r2
 8000bf8:	f0c0 80ee 	bcc.w	8000dd8 <__udivmoddi4+0x2a8>
 8000bfc:	1a86      	subs	r6, r0, r2
 8000bfe:	eb64 0303 	sbc.w	r3, r4, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	2d00      	cmp	r5, #0
 8000c06:	d0e6      	beq.n	8000bd6 <__udivmoddi4+0xa6>
 8000c08:	e9c5 6300 	strd	r6, r3, [r5]
 8000c0c:	e7e3      	b.n	8000bd6 <__udivmoddi4+0xa6>
 8000c0e:	2a00      	cmp	r2, #0
 8000c10:	f040 808f 	bne.w	8000d32 <__udivmoddi4+0x202>
 8000c14:	eba1 040c 	sub.w	r4, r1, ip
 8000c18:	2101      	movs	r1, #1
 8000c1a:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1e:	fa1f f78c 	uxth.w	r7, ip
 8000c22:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c26:	fb08 4416 	mls	r4, r8, r6, r4
 8000c2a:	fb07 f006 	mul.w	r0, r7, r6
 8000c2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c36:	4298      	cmp	r0, r3
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x11c>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c42:	d202      	bcs.n	8000c4a <__udivmoddi4+0x11a>
 8000c44:	4298      	cmp	r0, r3
 8000c46:	f200 80cb 	bhi.w	8000de0 <__udivmoddi4+0x2b0>
 8000c4a:	4626      	mov	r6, r4
 8000c4c:	1a1c      	subs	r4, r3, r0
 8000c4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c52:	fb08 4410 	mls	r4, r8, r0, r4
 8000c56:	fb00 f707 	mul.w	r7, r0, r7
 8000c5a:	fa1f f38e 	uxth.w	r3, lr
 8000c5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c62:	429f      	cmp	r7, r3
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x148>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x146>
 8000c70:	429f      	cmp	r7, r3
 8000c72:	f200 80ae 	bhi.w	8000dd2 <__udivmoddi4+0x2a2>
 8000c76:	4620      	mov	r0, r4
 8000c78:	1bdb      	subs	r3, r3, r7
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	e7a5      	b.n	8000bcc <__udivmoddi4+0x9c>
 8000c80:	f1c1 0720 	rsb	r7, r1, #32
 8000c84:	408b      	lsls	r3, r1
 8000c86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c8e:	fa24 f607 	lsr.w	r6, r4, r7
 8000c92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c96:	fbb6 f8f9 	udiv	r8, r6, r9
 8000c9a:	fa1f fe8c 	uxth.w	lr, ip
 8000c9e:	fb09 6618 	mls	r6, r9, r8, r6
 8000ca2:	fa20 f307 	lsr.w	r3, r0, r7
 8000ca6:	408c      	lsls	r4, r1
 8000ca8:	fa00 fa01 	lsl.w	sl, r0, r1
 8000cac:	fb08 f00e 	mul.w	r0, r8, lr
 8000cb0:	431c      	orrs	r4, r3
 8000cb2:	0c23      	lsrs	r3, r4, #16
 8000cb4:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cb8:	4298      	cmp	r0, r3
 8000cba:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbe:	d90a      	bls.n	8000cd6 <__udivmoddi4+0x1a6>
 8000cc0:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc4:	f108 36ff 	add.w	r6, r8, #4294967295
 8000cc8:	f080 8081 	bcs.w	8000dce <__udivmoddi4+0x29e>
 8000ccc:	4298      	cmp	r0, r3
 8000cce:	d97e      	bls.n	8000dce <__udivmoddi4+0x29e>
 8000cd0:	f1a8 0802 	sub.w	r8, r8, #2
 8000cd4:	4463      	add	r3, ip
 8000cd6:	1a1e      	subs	r6, r3, r0
 8000cd8:	fbb6 f3f9 	udiv	r3, r6, r9
 8000cdc:	fb09 6613 	mls	r6, r9, r3, r6
 8000ce0:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ce4:	b2a4      	uxth	r4, r4
 8000ce6:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000cea:	45a6      	cmp	lr, r4
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x1d0>
 8000cee:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf2:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cf6:	d266      	bcs.n	8000dc6 <__udivmoddi4+0x296>
 8000cf8:	45a6      	cmp	lr, r4
 8000cfa:	d964      	bls.n	8000dc6 <__udivmoddi4+0x296>
 8000cfc:	3b02      	subs	r3, #2
 8000cfe:	4464      	add	r4, ip
 8000d00:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d04:	fba0 8302 	umull	r8, r3, r0, r2
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	429c      	cmp	r4, r3
 8000d0e:	46c6      	mov	lr, r8
 8000d10:	461e      	mov	r6, r3
 8000d12:	d350      	bcc.n	8000db6 <__udivmoddi4+0x286>
 8000d14:	d04d      	beq.n	8000db2 <__udivmoddi4+0x282>
 8000d16:	b155      	cbz	r5, 8000d2e <__udivmoddi4+0x1fe>
 8000d18:	ebba 030e 	subs.w	r3, sl, lr
 8000d1c:	eb64 0406 	sbc.w	r4, r4, r6
 8000d20:	fa04 f707 	lsl.w	r7, r4, r7
 8000d24:	40cb      	lsrs	r3, r1
 8000d26:	431f      	orrs	r7, r3
 8000d28:	40cc      	lsrs	r4, r1
 8000d2a:	e9c5 7400 	strd	r7, r4, [r5]
 8000d2e:	2100      	movs	r1, #0
 8000d30:	e751      	b.n	8000bd6 <__udivmoddi4+0xa6>
 8000d32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d36:	f1c2 0320 	rsb	r3, r2, #32
 8000d3a:	40d9      	lsrs	r1, r3
 8000d3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d40:	fa20 f303 	lsr.w	r3, r0, r3
 8000d44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d48:	fbb1 f0f8 	udiv	r0, r1, r8
 8000d4c:	fb08 1110 	mls	r1, r8, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	431c      	orrs	r4, r3
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	0c23      	lsrs	r3, r4, #16
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f107 	mul.w	r1, r0, r7
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x248>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d6e:	d22c      	bcs.n	8000dca <__udivmoddi4+0x29a>
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d92a      	bls.n	8000dca <__udivmoddi4+0x29a>
 8000d74:	3802      	subs	r0, #2
 8000d76:	4463      	add	r3, ip
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d7e:	fb08 3311 	mls	r3, r8, r1, r3
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb01 f307 	mul.w	r3, r1, r7
 8000d8c:	42a3      	cmp	r3, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x272>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d98:	d213      	bcs.n	8000dc2 <__udivmoddi4+0x292>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d911      	bls.n	8000dc2 <__udivmoddi4+0x292>
 8000d9e:	3902      	subs	r1, #2
 8000da0:	4464      	add	r4, ip
 8000da2:	1ae4      	subs	r4, r4, r3
 8000da4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000da8:	e73b      	b.n	8000c22 <__udivmoddi4+0xf2>
 8000daa:	4604      	mov	r4, r0
 8000dac:	e6f2      	b.n	8000b94 <__udivmoddi4+0x64>
 8000dae:	4608      	mov	r0, r1
 8000db0:	e708      	b.n	8000bc4 <__udivmoddi4+0x94>
 8000db2:	45c2      	cmp	sl, r8
 8000db4:	d2af      	bcs.n	8000d16 <__udivmoddi4+0x1e6>
 8000db6:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dba:	eb63 060c 	sbc.w	r6, r3, ip
 8000dbe:	3801      	subs	r0, #1
 8000dc0:	e7a9      	b.n	8000d16 <__udivmoddi4+0x1e6>
 8000dc2:	4631      	mov	r1, r6
 8000dc4:	e7ed      	b.n	8000da2 <__udivmoddi4+0x272>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	e79a      	b.n	8000d00 <__udivmoddi4+0x1d0>
 8000dca:	4630      	mov	r0, r6
 8000dcc:	e7d4      	b.n	8000d78 <__udivmoddi4+0x248>
 8000dce:	46b0      	mov	r8, r6
 8000dd0:	e781      	b.n	8000cd6 <__udivmoddi4+0x1a6>
 8000dd2:	4463      	add	r3, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	e74f      	b.n	8000c78 <__udivmoddi4+0x148>
 8000dd8:	4606      	mov	r6, r0
 8000dda:	4623      	mov	r3, r4
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e711      	b.n	8000c04 <__udivmoddi4+0xd4>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	4463      	add	r3, ip
 8000de4:	e732      	b.n	8000c4c <__udivmoddi4+0x11c>
 8000de6:	bf00      	nop

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <HAL_TIM_PeriodElapsedCallback>:
/* 1 ms interrupt
 * HLCK 96 MHz
 * APB1 48 MHz
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]


	can_cnt++;
 8000df4:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000dfe:	701a      	strb	r2, [r3, #0]

	if (can_cnt == (last10 + 10))
 8000e00:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	330a      	adds	r3, #10
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d105      	bne.n	8000e1c <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			CAN_100();				//CAN Messages transmitted with 100 Hz
 8000e10:	f000 f9b2 	bl	8001178 <CAN_100>
			last10 = can_cnt;
 8000e14:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e16:	781a      	ldrb	r2, [r3, #0]
 8000e18:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000e1a:	701a      	strb	r2, [r3, #0]
		}

	if (can_cnt == 100)
 8000e1c:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b64      	cmp	r3, #100	@ 0x64
 8000e22:	d10a      	bne.n	8000e3a <HAL_TIM_PeriodElapsedCallback+0x4e>
		{
			CAN_10(AMS2_databytes[8]);				//CAN Messages transmitted with 10 Hz
 8000e24:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000e26:	6a1b      	ldr	r3, [r3, #32]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 f9cd 	bl	80011c8 <CAN_10>
			can_cnt = 0;
 8000e2e:	4b05      	ldr	r3, [pc, #20]	@ (8000e44 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
			last10 = 0;
 8000e34:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]
		}
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000270 	.word	0x20000270
 8000e48:	20000271 	.word	0x20000271
 8000e4c:	20000250 	.word	0x20000250

08000e50 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
   {
 8000e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e52:	b089      	sub	sp, #36	@ 0x24
 8000e54:	af06      	add	r7, sp, #24
 8000e56:	6078      	str	r0, [r7, #4]
    CAN_RX(hcan1);
 8000e58:	4e08      	ldr	r6, [pc, #32]	@ (8000e7c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000e5a:	466d      	mov	r5, sp
 8000e5c:	f106 0410 	add.w	r4, r6, #16
 8000e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e68:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e6c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000e70:	f000 f95e 	bl	8001130 <CAN_RX>
   }
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e7c:	20000274 	.word	0x20000274

08000e80 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000e84:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000e86:	4a18      	ldr	r2, [pc, #96]	@ (8000ee8 <MX_CAN1_Init+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000e8c:	2204      	movs	r2, #4
 8000e8e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000e90:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000e96:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000e9e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ea2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000ea6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000eaa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000eac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000eca:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ed0:	4804      	ldr	r0, [pc, #16]	@ (8000ee4 <MX_CAN1_Init+0x64>)
 8000ed2:	f000 ff21 	bl	8001d18 <HAL_CAN_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000edc:	f000 fba3 	bl	8001626 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000274 	.word	0x20000274
 8000ee8:	40006400 	.word	0x40006400

08000eec <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000ef0:	4b17      	ldr	r3, [pc, #92]	@ (8000f50 <MX_CAN2_Init+0x64>)
 8000ef2:	4a18      	ldr	r2, [pc, #96]	@ (8000f54 <MX_CAN2_Init+0x68>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 8000ef6:	4b16      	ldr	r3, [pc, #88]	@ (8000f50 <MX_CAN2_Init+0x64>)
 8000ef8:	2204      	movs	r2, #4
 8000efa:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000efc:	4b14      	ldr	r3, [pc, #80]	@ (8000f50 <MX_CAN2_Init+0x64>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f02:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <MX_CAN2_Init+0x64>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000f08:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <MX_CAN2_Init+0x64>)
 8000f0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f0e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	@ (8000f50 <MX_CAN2_Init+0x64>)
 8000f12:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000f16:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000f18:	4b0d      	ldr	r3, [pc, #52]	@ (8000f50 <MX_CAN2_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <MX_CAN2_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000f24:	4b0a      	ldr	r3, [pc, #40]	@ (8000f50 <MX_CAN2_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000f2a:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <MX_CAN2_Init+0x64>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000f30:	4b07      	ldr	r3, [pc, #28]	@ (8000f50 <MX_CAN2_Init+0x64>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <MX_CAN2_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000f3c:	4804      	ldr	r0, [pc, #16]	@ (8000f50 <MX_CAN2_Init+0x64>)
 8000f3e:	f000 feeb 	bl	8001d18 <HAL_CAN_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000f48:	f000 fb6d 	bl	8001626 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	2000029c 	.word	0x2000029c
 8000f54:	40006800 	.word	0x40006800

08000f58 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08c      	sub	sp, #48	@ 0x30
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a4f      	ldr	r2, [pc, #316]	@ (80010b4 <HAL_CAN_MspInit+0x15c>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d146      	bne.n	8001008 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000f7a:	4b4f      	ldr	r3, [pc, #316]	@ (80010b8 <HAL_CAN_MspInit+0x160>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	4a4d      	ldr	r2, [pc, #308]	@ (80010b8 <HAL_CAN_MspInit+0x160>)
 8000f82:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000f84:	4b4c      	ldr	r3, [pc, #304]	@ (80010b8 <HAL_CAN_MspInit+0x160>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d10d      	bne.n	8000fa8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61bb      	str	r3, [r7, #24]
 8000f90:	4b4a      	ldr	r3, [pc, #296]	@ (80010bc <HAL_CAN_MspInit+0x164>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f94:	4a49      	ldr	r2, [pc, #292]	@ (80010bc <HAL_CAN_MspInit+0x164>)
 8000f96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f9c:	4b47      	ldr	r3, [pc, #284]	@ (80010bc <HAL_CAN_MspInit+0x164>)
 8000f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fa4:	61bb      	str	r3, [r7, #24]
 8000fa6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	4b43      	ldr	r3, [pc, #268]	@ (80010bc <HAL_CAN_MspInit+0x164>)
 8000fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb0:	4a42      	ldr	r2, [pc, #264]	@ (80010bc <HAL_CAN_MspInit+0x164>)
 8000fb2:	f043 0302 	orr.w	r3, r3, #2
 8000fb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb8:	4b40      	ldr	r3, [pc, #256]	@ (80010bc <HAL_CAN_MspInit+0x164>)
 8000fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fc4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000fd6:	2309      	movs	r3, #9
 8000fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4837      	ldr	r0, [pc, #220]	@ (80010c0 <HAL_CAN_MspInit+0x168>)
 8000fe2:	f001 fd1f 	bl	8002a24 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2013      	movs	r0, #19
 8000fec:	f001 fce3 	bl	80029b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000ff0:	2013      	movs	r0, #19
 8000ff2:	f001 fcfc 	bl	80029ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2014      	movs	r0, #20
 8000ffc:	f001 fcdb 	bl	80029b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001000:	2014      	movs	r0, #20
 8001002:	f001 fcf4 	bl	80029ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001006:	e050      	b.n	80010aa <HAL_CAN_MspInit+0x152>
  else if(canHandle->Instance==CAN2)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a2d      	ldr	r2, [pc, #180]	@ (80010c4 <HAL_CAN_MspInit+0x16c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d14b      	bne.n	80010aa <HAL_CAN_MspInit+0x152>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	4b29      	ldr	r3, [pc, #164]	@ (80010bc <HAL_CAN_MspInit+0x164>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101a:	4a28      	ldr	r2, [pc, #160]	@ (80010bc <HAL_CAN_MspInit+0x164>)
 800101c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001020:	6413      	str	r3, [r2, #64]	@ 0x40
 8001022:	4b26      	ldr	r3, [pc, #152]	@ (80010bc <HAL_CAN_MspInit+0x164>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800102e:	4b22      	ldr	r3, [pc, #136]	@ (80010b8 <HAL_CAN_MspInit+0x160>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	4a20      	ldr	r2, [pc, #128]	@ (80010b8 <HAL_CAN_MspInit+0x160>)
 8001036:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001038:	4b1f      	ldr	r3, [pc, #124]	@ (80010b8 <HAL_CAN_MspInit+0x160>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d10d      	bne.n	800105c <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	4b1d      	ldr	r3, [pc, #116]	@ (80010bc <HAL_CAN_MspInit+0x164>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001048:	4a1c      	ldr	r2, [pc, #112]	@ (80010bc <HAL_CAN_MspInit+0x164>)
 800104a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800104e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001050:	4b1a      	ldr	r3, [pc, #104]	@ (80010bc <HAL_CAN_MspInit+0x164>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	4b16      	ldr	r3, [pc, #88]	@ (80010bc <HAL_CAN_MspInit+0x164>)
 8001062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001064:	4a15      	ldr	r2, [pc, #84]	@ (80010bc <HAL_CAN_MspInit+0x164>)
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	6313      	str	r3, [r2, #48]	@ 0x30
 800106c:	4b13      	ldr	r3, [pc, #76]	@ (80010bc <HAL_CAN_MspInit+0x164>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001078:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800107c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800108a:	2309      	movs	r3, #9
 800108c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4619      	mov	r1, r3
 8001094:	480a      	ldr	r0, [pc, #40]	@ (80010c0 <HAL_CAN_MspInit+0x168>)
 8001096:	f001 fcc5 	bl	8002a24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800109a:	2200      	movs	r2, #0
 800109c:	2100      	movs	r1, #0
 800109e:	2040      	movs	r0, #64	@ 0x40
 80010a0:	f001 fc89 	bl	80029b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80010a4:	2040      	movs	r0, #64	@ 0x40
 80010a6:	f001 fca2 	bl	80029ee <HAL_NVIC_EnableIRQ>
}
 80010aa:	bf00      	nop
 80010ac:	3730      	adds	r7, #48	@ 0x30
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40006400 	.word	0x40006400
 80010b8:	200002c4 	.word	0x200002c4
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020400 	.word	0x40020400
 80010c4:	40006800 	.word	0x40006800

080010c8 <CAN_TX>:

uint8_t* AMS0_databytes[8], *AMS1_databytes[8], *AMS3_databytes[8], DIC0_databytes[8] ;
uint32_t RxFifo;

void CAN_TX(CAN_HandleTypeDef hcan, CAN_TxHeaderTypeDef TxHeader, uint8_t TxData[])
{
 80010c8:	b084      	sub	sp, #16
 80010ca:	b5b0      	push	{r4, r5, r7, lr}
 80010cc:	b090      	sub	sp, #64	@ 0x40
 80010ce:	af0e      	add	r7, sp, #56	@ 0x38
 80010d0:	f107 0418 	add.w	r4, r7, #24
 80010d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t TxMailbox;
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80010de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80010e0:	f107 0018 	add.w	r0, r7, #24
 80010e4:	f000 ff57 	bl	8001f96 <HAL_CAN_AddTxMessage>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d018      	beq.n	8001120 <CAN_TX+0x58>
	{
		CAN_TX(hcan, TxHeader, TxData);		//retry when failed
 80010ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80010f0:	930c      	str	r3, [sp, #48]	@ 0x30
 80010f2:	ad06      	add	r5, sp, #24
 80010f4:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80010f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001100:	e885 0003 	stmia.w	r5, {r0, r1}
 8001104:	466d      	mov	r5, sp
 8001106:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800110a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800110c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800110e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001112:	e885 0003 	stmia.w	r5, {r0, r1}
 8001116:	f107 0318 	add.w	r3, r7, #24
 800111a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800111c:	f7ff ffd4 	bl	80010c8 <CAN_TX>
	}
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800112a:	b004      	add	sp, #16
 800112c:	4770      	bx	lr
	...

08001130 <CAN_RX>:

void CAN_RX(CAN_HandleTypeDef hcan)
{
 8001130:	b084      	sub	sp, #16
 8001132:	b580      	push	{r7, lr}
 8001134:	b08a      	sub	sp, #40	@ 0x28
 8001136:	af00      	add	r7, sp, #0
 8001138:	f107 0c30 	add.w	ip, r7, #48	@ 0x30
 800113c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	if (HAL_CAN_GetRxMessage(&hcan, RxFifo, &RxHeader, RxData) != HAL_OK)
 8001140:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <CAN_RX+0x40>)
 8001142:	6819      	ldr	r1, [r3, #0]
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	f107 020c 	add.w	r2, r7, #12
 800114a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800114e:	f000 fff1 	bl	8002134 <HAL_CAN_GetRxMessage>
	{

	}

	if( RxHeader.StdId == 0x500)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8001158:	d102      	bne.n	8001160 <CAN_RX+0x30>
	{
		DIC0_databytes[8] = RxData[8];
 800115a:	7b3a      	ldrb	r2, [r7, #12]
 800115c:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <CAN_RX+0x44>)
 800115e:	721a      	strb	r2, [r3, #8]
	}

	// hier kann man weitere Nachrichten zum Empfangen hinzufügen

}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	@ 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800116a:	b004      	add	sp, #16
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000330 	.word	0x20000330
 8001174:	20000328 	.word	0x20000328

08001178 <CAN_100>:




void CAN_100()		// CAN Messages transmitted with 100 Hz
{
 8001178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117a:	b08f      	sub	sp, #60	@ 0x3c
 800117c:	af0e      	add	r7, sp, #56	@ 0x38

	CAN_TX(hcan1, AMS0_header, AMS0_databytes[8]);
 800117e:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <CAN_100+0x44>)
 8001180:	6a1b      	ldr	r3, [r3, #32]
 8001182:	4e0f      	ldr	r6, [pc, #60]	@ (80011c0 <CAN_100+0x48>)
 8001184:	930c      	str	r3, [sp, #48]	@ 0x30
 8001186:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <CAN_100+0x4c>)
 8001188:	ac06      	add	r4, sp, #24
 800118a:	461d      	mov	r5, r3
 800118c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001190:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001194:	e884 0003 	stmia.w	r4, {r0, r1}
 8001198:	466d      	mov	r5, sp
 800119a:	f106 0410 	add.w	r4, r6, #16
 800119e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80011aa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011ae:	f7ff ff8b 	bl	80010c8 <CAN_TX>
}
 80011b2:	bf00      	nop
 80011b4:	3704      	adds	r7, #4
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200002c8 	.word	0x200002c8
 80011c0:	20000274 	.word	0x20000274
 80011c4:	20000000 	.word	0x20000000

080011c8 <CAN_10>:

void CAN_10(uint8_t bms_data[])		// CAN Messages transmitted with 10 Hz
{
 80011c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ca:	b091      	sub	sp, #68	@ 0x44
 80011cc:	af0e      	add	r7, sp, #56	@ 0x38
 80011ce:	6078      	str	r0, [r7, #4]
	CAN_TX(hcan1, AMS1_header, AMS1_databytes[8]);
 80011d0:	4b28      	ldr	r3, [pc, #160]	@ (8001274 <CAN_10+0xac>)
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	4e28      	ldr	r6, [pc, #160]	@ (8001278 <CAN_10+0xb0>)
 80011d6:	930c      	str	r3, [sp, #48]	@ 0x30
 80011d8:	4b28      	ldr	r3, [pc, #160]	@ (800127c <CAN_10+0xb4>)
 80011da:	ac06      	add	r4, sp, #24
 80011dc:	461d      	mov	r5, r3
 80011de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80011e6:	e884 0003 	stmia.w	r4, {r0, r1}
 80011ea:	466d      	mov	r5, sp
 80011ec:	f106 0410 	add.w	r4, r6, #16
 80011f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80011fc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001200:	f7ff ff62 	bl	80010c8 <CAN_TX>
	CAN_TX(hcan1, AMS2_header, &bms_data[8]);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3308      	adds	r3, #8
 8001208:	4e1b      	ldr	r6, [pc, #108]	@ (8001278 <CAN_10+0xb0>)
 800120a:	930c      	str	r3, [sp, #48]	@ 0x30
 800120c:	4b1c      	ldr	r3, [pc, #112]	@ (8001280 <CAN_10+0xb8>)
 800120e:	ac06      	add	r4, sp, #24
 8001210:	461d      	mov	r5, r3
 8001212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001216:	e895 0003 	ldmia.w	r5, {r0, r1}
 800121a:	e884 0003 	stmia.w	r4, {r0, r1}
 800121e:	466d      	mov	r5, sp
 8001220:	f106 0410 	add.w	r4, r6, #16
 8001224:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001226:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001228:	e894 0003 	ldmia.w	r4, {r0, r1}
 800122c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001230:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001234:	f7ff ff48 	bl	80010c8 <CAN_TX>
	CAN_TX(hcan1, AMS3_header, AMS3_databytes[8]);
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <CAN_10+0xbc>)
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	4e0e      	ldr	r6, [pc, #56]	@ (8001278 <CAN_10+0xb0>)
 800123e:	930c      	str	r3, [sp, #48]	@ 0x30
 8001240:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <CAN_10+0xc0>)
 8001242:	ac06      	add	r4, sp, #24
 8001244:	461d      	mov	r5, r3
 8001246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800124a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800124e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001252:	466d      	mov	r5, sp
 8001254:	f106 0410 	add.w	r4, r6, #16
 8001258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800125a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800125c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001260:	e885 0003 	stmia.w	r5, {r0, r1}
 8001264:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001268:	f7ff ff2e 	bl	80010c8 <CAN_TX>
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001274:	200002e8 	.word	0x200002e8
 8001278:	20000274 	.word	0x20000274
 800127c:	20000018 	.word	0x20000018
 8001280:	20000030 	.word	0x20000030
 8001284:	20000308 	.word	0x20000308
 8001288:	20000048 	.word	0x20000048

0800128c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	@ 0x28
 8001290:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b5e      	ldr	r3, [pc, #376]	@ (8001420 <MX_GPIO_Init+0x194>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a5d      	ldr	r2, [pc, #372]	@ (8001420 <MX_GPIO_Init+0x194>)
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001420 <MX_GPIO_Init+0x194>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
 80012c2:	4b57      	ldr	r3, [pc, #348]	@ (8001420 <MX_GPIO_Init+0x194>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a56      	ldr	r2, [pc, #344]	@ (8001420 <MX_GPIO_Init+0x194>)
 80012c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b54      	ldr	r3, [pc, #336]	@ (8001420 <MX_GPIO_Init+0x194>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	4b50      	ldr	r3, [pc, #320]	@ (8001420 <MX_GPIO_Init+0x194>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a4f      	ldr	r2, [pc, #316]	@ (8001420 <MX_GPIO_Init+0x194>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001420 <MX_GPIO_Init+0x194>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60bb      	str	r3, [r7, #8]
 80012f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b49      	ldr	r3, [pc, #292]	@ (8001420 <MX_GPIO_Init+0x194>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a48      	ldr	r2, [pc, #288]	@ (8001420 <MX_GPIO_Init+0x194>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b46      	ldr	r3, [pc, #280]	@ (8001420 <MX_GPIO_Init+0x194>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	4b42      	ldr	r3, [pc, #264]	@ (8001420 <MX_GPIO_Init+0x194>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a41      	ldr	r2, [pc, #260]	@ (8001420 <MX_GPIO_Init+0x194>)
 800131c:	f043 0308 	orr.w	r3, r3, #8
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b3f      	ldr	r3, [pc, #252]	@ (8001420 <MX_GPIO_Init+0x194>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0308 	and.w	r3, r3, #8
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GN_Pin|LED_YW_Pin|LED_RD_Pin|AIR_P_SW_Pin, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8001334:	483b      	ldr	r0, [pc, #236]	@ (8001424 <MX_GPIO_Init+0x198>)
 8001336:	f001 fd2a 	bl	8002d8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WDI_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	f248 0110 	movw	r1, #32784	@ 0x8010
 8001340:	4839      	ldr	r0, [pc, #228]	@ (8001428 <MX_GPIO_Init+0x19c>)
 8001342:	f001 fd24 	bl	8002d8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SC_OPEN_GPIO_Port, SC_OPEN_Pin, GPIO_PIN_SET);
 8001346:	2201      	movs	r2, #1
 8001348:	2180      	movs	r1, #128	@ 0x80
 800134a:	4837      	ldr	r0, [pc, #220]	@ (8001428 <MX_GPIO_Init+0x19c>)
 800134c:	f001 fd1f 	bl	8002d8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_RESET);
 8001350:	2200      	movs	r2, #0
 8001352:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001356:	4835      	ldr	r0, [pc, #212]	@ (800142c <MX_GPIO_Init+0x1a0>)
 8001358:	f001 fd19 	bl	8002d8e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_GN_Pin|LED_YW_Pin|LED_RD_Pin|AIR_P_SW_Pin;
 800135c:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8001360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001362:	2301      	movs	r3, #1
 8001364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	482b      	ldr	r0, [pc, #172]	@ (8001424 <MX_GPIO_Init+0x198>)
 8001376:	f001 fb55 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = V_VEHI_Pin|V_ACCU_Pin|SC_CLOSING_Pin|SC_STATE_Pin
 800137a:	23f3      	movs	r3, #243	@ 0xf3
 800137c:	617b      	str	r3, [r7, #20]
                          |AIR_N_ACT_Pin|AIR_N_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	4825      	ldr	r0, [pc, #148]	@ (8001424 <MX_GPIO_Init+0x198>)
 800138e:	f001 fb49 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_STATE_Pin|IMD_SAFE_Pin|SC_OPENING_Pin;
 8001392:	2368      	movs	r3, #104	@ 0x68
 8001394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4820      	ldr	r0, [pc, #128]	@ (8001428 <MX_GPIO_Init+0x19c>)
 80013a6:	f001 fb3d 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WDI_Pin|SC_OPEN_Pin|SPI3_CS_Pin;
 80013aa:	f248 0390 	movw	r3, #32912	@ 0x8090
 80013ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	4819      	ldr	r0, [pc, #100]	@ (8001428 <MX_GPIO_Init+0x19c>)
 80013c4:	f001 fb2e 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_ACTIVATE_Pin;
 80013c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TS_ACTIVATE_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	4619      	mov	r1, r3
 80013e0:	4812      	ldr	r0, [pc, #72]	@ (800142c <MX_GPIO_Init+0x1a0>)
 80013e2:	f001 fb1f 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DANGER_V_Pin|AIR_P_ACT_Pin|AIR_P_INT_Pin;
 80013e6:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 80013ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	480c      	ldr	r0, [pc, #48]	@ (800142c <MX_GPIO_Init+0x1a0>)
 80013fc:	f001 fb12 	bl	8002a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PCHRG_ACT_Pin;
 8001400:	2304      	movs	r3, #4
 8001402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001404:	2300      	movs	r3, #0
 8001406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PCHRG_ACT_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	4807      	ldr	r0, [pc, #28]	@ (8001430 <MX_GPIO_Init+0x1a4>)
 8001414:	f001 fb06 	bl	8002a24 <HAL_GPIO_Init>

}
 8001418:	bf00      	nop
 800141a:	3728      	adds	r7, #40	@ 0x28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	40020800 	.word	0x40020800
 8001428:	40020000 	.word	0x40020000
 800142c:	40020400 	.word	0x40020400
 8001430:	40020c00 	.word	0x40020c00

08001434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001438:	f000 fbdc 	bl	8001bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800143c:	f000 f8ac 	bl	8001598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001440:	f7ff ff24 	bl	800128c <MX_GPIO_Init>
  MX_SPI3_Init();
 8001444:	f000 f8f6 	bl	8001634 <MX_SPI3_Init>
  MX_TIM2_Init();
 8001448:	f000 fab4 	bl	80019b4 <MX_TIM2_Init>
  MX_CAN1_Init();
 800144c:	f7ff fd18 	bl	8000e80 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001450:	f7ff fd4c 	bl	8000eec <MX_CAN2_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001454:	f000 fb20 	bl	8001a98 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  // Start timer
  HAL_TIM_Base_Start_IT(&htim2);
 8001458:	4844      	ldr	r0, [pc, #272]	@ (800156c <main+0x138>)
 800145a:	f002 fac5 	bl	80039e8 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan1);
 800145e:	4844      	ldr	r0, [pc, #272]	@ (8001570 <main+0x13c>)
 8001460:	f000 fd55 	bl	8001f0e <HAL_CAN_Start>





  	  TxHeader.DLC = 8;
 8001464:	4b43      	ldr	r3, [pc, #268]	@ (8001574 <main+0x140>)
 8001466:	2208      	movs	r2, #8
 8001468:	611a      	str	r2, [r3, #16]
  	  TxHeader.IDE = CAN_ID_STD;
 800146a:	4b42      	ldr	r3, [pc, #264]	@ (8001574 <main+0x140>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  	  TxHeader.RTR = CAN_RTR_DATA;
 8001470:	4b40      	ldr	r3, [pc, #256]	@ (8001574 <main+0x140>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
  	  TxHeader.StdId = 0x203;
 8001476:	4b3f      	ldr	r3, [pc, #252]	@ (8001574 <main+0x140>)
 8001478:	f240 2203 	movw	r2, #515	@ 0x203
 800147c:	601a      	str	r2, [r3, #0]
   	uint32_t				datacheck;
   	*/
   //	uint32_t now = 0, last_blink = 0, last_tx = 0, error =0, last_rx =0, datacheck =0;


   	TxData[0]= 0;
 800147e:	4b3e      	ldr	r3, [pc, #248]	@ (8001578 <main+0x144>)
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
   	TxData[1]= 0xFF;
 8001484:	4b3c      	ldr	r3, [pc, #240]	@ (8001578 <main+0x144>)
 8001486:	22ff      	movs	r2, #255	@ 0xff
 8001488:	705a      	strb	r2, [r3, #1]
   	TxData[2]= 0xFF;
 800148a:	4b3b      	ldr	r3, [pc, #236]	@ (8001578 <main+0x144>)
 800148c:	22ff      	movs	r2, #255	@ 0xff
 800148e:	709a      	strb	r2, [r3, #2]
   	TxData[3]= 0xFF;
 8001490:	4b39      	ldr	r3, [pc, #228]	@ (8001578 <main+0x144>)
 8001492:	22ff      	movs	r2, #255	@ 0xff
 8001494:	70da      	strb	r2, [r3, #3]
   	TxData[4]= 0xFF;
 8001496:	4b38      	ldr	r3, [pc, #224]	@ (8001578 <main+0x144>)
 8001498:	22ff      	movs	r2, #255	@ 0xff
 800149a:	711a      	strb	r2, [r3, #4]
   	TxData[5]= 0xFF;
 800149c:	4b36      	ldr	r3, [pc, #216]	@ (8001578 <main+0x144>)
 800149e:	22ff      	movs	r2, #255	@ 0xff
 80014a0:	715a      	strb	r2, [r3, #5]
   	TxData[6]= 0xFF;
 80014a2:	4b35      	ldr	r3, [pc, #212]	@ (8001578 <main+0x144>)
 80014a4:	22ff      	movs	r2, #255	@ 0xff
 80014a6:	719a      	strb	r2, [r3, #6]
   	TxData[7]= 0xFF;
 80014a8:	4b33      	ldr	r3, [pc, #204]	@ (8001578 <main+0x144>)
 80014aa:	22ff      	movs	r2, #255	@ 0xff
 80014ac:	71da      	strb	r2, [r3, #7]

    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80014ae:	2102      	movs	r1, #2
 80014b0:	482f      	ldr	r0, [pc, #188]	@ (8001570 <main+0x13c>)
 80014b2:	f000 ff60 	bl	8002376 <HAL_CAN_ActivateNotification>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <main+0x8c>
    {
  	  Error_Handler();
 80014bc:	f000 f8b3 	bl	8001626 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	 // HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
	  	  sc_closed =HAL_GPIO_ReadPin(GPIOC,AIR_N_INT_Pin);
 80014c0:	2180      	movs	r1, #128	@ 0x80
 80014c2:	482e      	ldr	r0, [pc, #184]	@ (800157c <main+0x148>)
 80014c4:	f001 fc4c 	bl	8002d60 <HAL_GPIO_ReadPin>
 80014c8:	4603      	mov	r3, r0
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001580 <main+0x14c>)
 80014ce:	701a      	strb	r2, [r3, #0]
	  	  if (sc_closed ==0 && TxData[0] == 1)
 80014d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001580 <main+0x14c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d115      	bne.n	8001504 <main+0xd0>
 80014d8:	4b27      	ldr	r3, [pc, #156]	@ (8001578 <main+0x144>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d111      	bne.n	8001504 <main+0xd0>
	  	  {
	  		  sc_error =1;
 80014e0:	4b28      	ldr	r3, [pc, #160]	@ (8001584 <main+0x150>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
	  		 HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014ec:	4826      	ldr	r0, [pc, #152]	@ (8001588 <main+0x154>)
 80014ee:	f001 fc4e 	bl	8002d8e <HAL_GPIO_WritePin>
	  		 HAL_GPIO_WritePin(GPIOC,AIR_P_SW_Pin, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014f8:	4820      	ldr	r0, [pc, #128]	@ (800157c <main+0x148>)
 80014fa:	f001 fc48 	bl	8002d8e <HAL_GPIO_WritePin>
	  		 TxData[0]= 0;
 80014fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001578 <main+0x144>)
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
	  	  }
	  	 // HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);

	  	 if (datacheck)
 8001504:	4b21      	ldr	r3, [pc, #132]	@ (800158c <main+0x158>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d022      	beq.n	8001552 <main+0x11e>
	  	{
	  	 HAL_GPIO_TogglePin(GPIOC, LED_RD_Pin);
 800150c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001510:	481a      	ldr	r0, [pc, #104]	@ (800157c <main+0x148>)
 8001512:	f001 fc54 	bl	8002dbe <HAL_GPIO_TogglePin>
	  	 datacheck =0;
 8001516:	4b1d      	ldr	r3, [pc, #116]	@ (800158c <main+0x158>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]

			 if (sc_error == 0)
 800151c:	4b19      	ldr	r3, [pc, #100]	@ (8001584 <main+0x150>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d116      	bne.n	8001552 <main+0x11e>
			 {
				 if (RxData[0]>= 1)
 8001524:	4b1a      	ldr	r3, [pc, #104]	@ (8001590 <main+0x15c>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d008      	beq.n	800153e <main+0x10a>
				 {

					 HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001532:	4815      	ldr	r0, [pc, #84]	@ (8001588 <main+0x154>)
 8001534:	f001 fc2b 	bl	8002d8e <HAL_GPIO_WritePin>
					 TxData[0] = 1;
 8001538:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <main+0x144>)
 800153a:	2201      	movs	r2, #1
 800153c:	701a      	strb	r2, [r3, #0]

				 }

				 if (RxData[1]>= 1)
 800153e:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <main+0x15c>)
 8001540:	785b      	ldrb	r3, [r3, #1]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d005      	beq.n	8001552 <main+0x11e>
				 {
					 HAL_GPIO_WritePin(GPIOC,AIR_P_SW_Pin, GPIO_PIN_SET);
 8001546:	2201      	movs	r2, #1
 8001548:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800154c:	480b      	ldr	r0, [pc, #44]	@ (800157c <main+0x148>)
 800154e:	f001 fc1e 	bl	8002d8e <HAL_GPIO_WritePin>
				 }
			}
	  	}
	  	 HAL_Delay(100);
 8001552:	2064      	movs	r0, #100	@ 0x64
 8001554:	f000 fbbc 	bl	8001cd0 <HAL_Delay>

	// }



	 HAL_GPIO_TogglePin(GPIOA, WDI_Pin);
 8001558:	2110      	movs	r1, #16
 800155a:	480e      	ldr	r0, [pc, #56]	@ (8001594 <main+0x160>)
 800155c:	f001 fc2f 	bl	8002dbe <HAL_GPIO_TogglePin>
	 HAL_GPIO_TogglePin(GPIOC, LED_GN_Pin);
 8001560:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001564:	4805      	ldr	r0, [pc, #20]	@ (800157c <main+0x148>)
 8001566:	f001 fc2a 	bl	8002dbe <HAL_GPIO_TogglePin>
	  	  sc_closed =HAL_GPIO_ReadPin(GPIOC,AIR_N_INT_Pin);
 800156a:	e7a9      	b.n	80014c0 <main+0x8c>
 800156c:	200003c0 	.word	0x200003c0
 8001570:	20000274 	.word	0x20000274
 8001574:	20000334 	.word	0x20000334
 8001578:	2000034c 	.word	0x2000034c
 800157c:	40020800 	.word	0x40020800
 8001580:	20000361 	.word	0x20000361
 8001584:	20000360 	.word	0x20000360
 8001588:	40020400 	.word	0x40020400
 800158c:	2000035c 	.word	0x2000035c
 8001590:	20000354 	.word	0x20000354
 8001594:	40020000 	.word	0x40020000

08001598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b092      	sub	sp, #72	@ 0x48
 800159c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159e:	f107 0318 	add.w	r3, r7, #24
 80015a2:	2230      	movs	r2, #48	@ 0x30
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f003 ff41 	bl	800542e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015ba:	2302      	movs	r3, #2
 80015bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015be:	2301      	movs	r3, #1
 80015c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015c2:	2310      	movs	r3, #16
 80015c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c6:	2302      	movs	r3, #2
 80015c8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015ca:	2300      	movs	r3, #0
 80015cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015ce:	2308      	movs	r3, #8
 80015d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 80015d2:	23c0      	movs	r3, #192	@ 0xc0
 80015d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015d6:	2304      	movs	r3, #4
 80015d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80015da:	2308      	movs	r3, #8
 80015dc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015de:	f107 0318 	add.w	r3, r7, #24
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 fd22 	bl	800302c <HAL_RCC_OscConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80015ee:	f000 f81a 	bl	8001626 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f2:	230f      	movs	r3, #15
 80015f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f6:	2302      	movs	r3, #2
 80015f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015fe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001604:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001608:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	2103      	movs	r1, #3
 800160e:	4618      	mov	r0, r3
 8001610:	f001 ff60 	bl	80034d4 <HAL_RCC_ClockConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800161a:	f000 f804 	bl	8001626 <Error_Handler>
  }
}
 800161e:	bf00      	nop
 8001620:	3748      	adds	r7, #72	@ 0x48
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800162a:	b672      	cpsid	i
}
 800162c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800162e:	bf00      	nop
 8001630:	e7fd      	b.n	800162e <Error_Handler+0x8>
	...

08001634 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001638:	4b17      	ldr	r3, [pc, #92]	@ (8001698 <MX_SPI3_Init+0x64>)
 800163a:	4a18      	ldr	r2, [pc, #96]	@ (800169c <MX_SPI3_Init+0x68>)
 800163c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800163e:	4b16      	ldr	r3, [pc, #88]	@ (8001698 <MX_SPI3_Init+0x64>)
 8001640:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001644:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001646:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <MX_SPI3_Init+0x64>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800164c:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <MX_SPI3_Init+0x64>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001652:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <MX_SPI3_Init+0x64>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001658:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <MX_SPI3_Init+0x64>)
 800165a:	2200      	movs	r2, #0
 800165c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800165e:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <MX_SPI3_Init+0x64>)
 8001660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001664:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001666:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <MX_SPI3_Init+0x64>)
 8001668:	2220      	movs	r2, #32
 800166a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800166c:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <MX_SPI3_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001672:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <MX_SPI3_Init+0x64>)
 8001674:	2200      	movs	r2, #0
 8001676:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001678:	4b07      	ldr	r3, [pc, #28]	@ (8001698 <MX_SPI3_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800167e:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <MX_SPI3_Init+0x64>)
 8001680:	220a      	movs	r2, #10
 8001682:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001684:	4804      	ldr	r0, [pc, #16]	@ (8001698 <MX_SPI3_Init+0x64>)
 8001686:	f002 f8d7 	bl	8003838 <HAL_SPI_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001690:	f7ff ffc9 	bl	8001626 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000364 	.word	0x20000364
 800169c:	40003c00 	.word	0x40003c00

080016a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	@ 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a19      	ldr	r2, [pc, #100]	@ (8001724 <HAL_SPI_MspInit+0x84>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d12c      	bne.n	800171c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	4b18      	ldr	r3, [pc, #96]	@ (8001728 <HAL_SPI_MspInit+0x88>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ca:	4a17      	ldr	r2, [pc, #92]	@ (8001728 <HAL_SPI_MspInit+0x88>)
 80016cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d2:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <HAL_SPI_MspInit+0x88>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <HAL_SPI_MspInit+0x88>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	4a10      	ldr	r2, [pc, #64]	@ (8001728 <HAL_SPI_MspInit+0x88>)
 80016e8:	f043 0304 	orr.w	r3, r3, #4
 80016ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <HAL_SPI_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80016fa:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80016fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001700:	2302      	movs	r3, #2
 8001702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800170c:	2306      	movs	r3, #6
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	4619      	mov	r1, r3
 8001716:	4805      	ldr	r0, [pc, #20]	@ (800172c <HAL_SPI_MspInit+0x8c>)
 8001718:	f001 f984 	bl	8002a24 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800171c:	bf00      	nop
 800171e:	3728      	adds	r7, #40	@ 0x28
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40003c00 	.word	0x40003c00
 8001728:	40023800 	.word	0x40023800
 800172c:	40020800 	.word	0x40020800

08001730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	4b0f      	ldr	r3, [pc, #60]	@ (8001778 <HAL_MspInit+0x48>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800173e:	4a0e      	ldr	r2, [pc, #56]	@ (8001778 <HAL_MspInit+0x48>)
 8001740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001744:	6453      	str	r3, [r2, #68]	@ 0x44
 8001746:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <HAL_MspInit+0x48>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <HAL_MspInit+0x48>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	4a07      	ldr	r2, [pc, #28]	@ (8001778 <HAL_MspInit+0x48>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001760:	6413      	str	r3, [r2, #64]	@ 0x40
 8001762:	4b05      	ldr	r3, [pc, #20]	@ (8001778 <HAL_MspInit+0x48>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	40023800 	.word	0x40023800

0800177c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <NMI_Handler+0x4>

08001784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <HardFault_Handler+0x4>

0800178c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <MemManage_Handler+0x4>

08001794 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <BusFault_Handler+0x4>

0800179c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <UsageFault_Handler+0x4>

080017a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017cc:	f000 fa64 	bl	8001c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <CAN1_TX_IRQHandler+0x10>)
 80017da:	f000 fdf1 	bl	80023c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000274 	.word	0x20000274

080017e8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <CAN1_RX0_IRQHandler+0x10>)
 80017ee:	f000 fde7 	bl	80023c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000274 	.word	0x20000274

080017fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <TIM2_IRQHandler+0x10>)
 8001802:	f002 f95f 	bl	8003ac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200003c0 	.word	0x200003c0

08001810 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001814:	4802      	ldr	r0, [pc, #8]	@ (8001820 <CAN2_RX0_IRQHandler+0x10>)
 8001816:	f000 fdd3 	bl	80023c0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	2000029c 	.word	0x2000029c

08001824 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return 1;
 8001828:	2301      	movs	r3, #1
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <_kill>:

int _kill(int pid, int sig)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800183c:	f003 fe5a 	bl	80054f4 <__errno>
 8001840:	4603      	mov	r3, r0
 8001842:	2216      	movs	r2, #22
 8001844:	601a      	str	r2, [r3, #0]
  return -1;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <_exit>:

void _exit (int status)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800185a:	f04f 31ff 	mov.w	r1, #4294967295
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7ff ffe7 	bl	8001832 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <_exit+0x12>

08001868 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	e00a      	b.n	8001890 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800187a:	f3af 8000 	nop.w
 800187e:	4601      	mov	r1, r0
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	60ba      	str	r2, [r7, #8]
 8001886:	b2ca      	uxtb	r2, r1
 8001888:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3301      	adds	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	429a      	cmp	r2, r3
 8001896:	dbf0      	blt.n	800187a <_read+0x12>
  }

  return len;
 8001898:	687b      	ldr	r3, [r7, #4]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	e009      	b.n	80018c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	60ba      	str	r2, [r7, #8]
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3301      	adds	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dbf1      	blt.n	80018b4 <_write+0x12>
  }
  return len;
 80018d0:	687b      	ldr	r3, [r7, #4]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <_close>:

int _close(int file)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001900:	605a      	str	r2, [r3, #4]
  return 0;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <_isatty>:

int _isatty(int file)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001916:	2301      	movs	r3, #1
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001922:	b480      	push	{r7}
 8001924:	b085      	sub	sp, #20
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
	...

0800193c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001944:	4a14      	ldr	r2, [pc, #80]	@ (8001998 <_sbrk+0x5c>)
 8001946:	4b15      	ldr	r3, [pc, #84]	@ (800199c <_sbrk+0x60>)
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001950:	4b13      	ldr	r3, [pc, #76]	@ (80019a0 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001958:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <_sbrk+0x64>)
 800195a:	4a12      	ldr	r2, [pc, #72]	@ (80019a4 <_sbrk+0x68>)
 800195c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195e:	4b10      	ldr	r3, [pc, #64]	@ (80019a0 <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	429a      	cmp	r2, r3
 800196a:	d207      	bcs.n	800197c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800196c:	f003 fdc2 	bl	80054f4 <__errno>
 8001970:	4603      	mov	r3, r0
 8001972:	220c      	movs	r2, #12
 8001974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
 800197a:	e009      	b.n	8001990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800197c:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001982:	4b07      	ldr	r3, [pc, #28]	@ (80019a0 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	4a05      	ldr	r2, [pc, #20]	@ (80019a0 <_sbrk+0x64>)
 800198c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	2000c000 	.word	0x2000c000
 800199c:	00000400 	.word	0x00000400
 80019a0:	200003bc 	.word	0x200003bc
 80019a4:	20000a60 	.word	0x20000a60

080019a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ba:	f107 0308 	add.w	r3, r7, #8
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c8:	463b      	mov	r3, r7
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a48 <MX_TIM2_Init+0x94>)
 80019d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 80019d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a48 <MX_TIM2_Init+0x94>)
 80019da:	2230      	movs	r2, #48	@ 0x30
 80019dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019de:	4b1a      	ldr	r3, [pc, #104]	@ (8001a48 <MX_TIM2_Init+0x94>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 978;
 80019e4:	4b18      	ldr	r3, [pc, #96]	@ (8001a48 <MX_TIM2_Init+0x94>)
 80019e6:	f240 32d2 	movw	r2, #978	@ 0x3d2
 80019ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ec:	4b16      	ldr	r3, [pc, #88]	@ (8001a48 <MX_TIM2_Init+0x94>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f2:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <MX_TIM2_Init+0x94>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019f8:	4813      	ldr	r0, [pc, #76]	@ (8001a48 <MX_TIM2_Init+0x94>)
 80019fa:	f001 ffa6 	bl	800394a <HAL_TIM_Base_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a04:	f7ff fe0f 	bl	8001626 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a0e:	f107 0308 	add.w	r3, r7, #8
 8001a12:	4619      	mov	r1, r3
 8001a14:	480c      	ldr	r0, [pc, #48]	@ (8001a48 <MX_TIM2_Init+0x94>)
 8001a16:	f002 f95d 	bl	8003cd4 <HAL_TIM_ConfigClockSource>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a20:	f7ff fe01 	bl	8001626 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a24:	2300      	movs	r3, #0
 8001a26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4805      	ldr	r0, [pc, #20]	@ (8001a48 <MX_TIM2_Init+0x94>)
 8001a32:	f002 fb6f 	bl	8004114 <HAL_TIMEx_MasterConfigSynchronization>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a3c:	f7ff fdf3 	bl	8001626 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a40:	bf00      	nop
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	200003c0 	.word	0x200003c0

08001a4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a5c:	d115      	bne.n	8001a8a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <HAL_TIM_Base_MspInit+0x48>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	4a0b      	ldr	r2, [pc, #44]	@ (8001a94 <HAL_TIM_Base_MspInit+0x48>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <HAL_TIM_Base_MspInit+0x48>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	201c      	movs	r0, #28
 8001a80:	f000 ff99 	bl	80029b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a84:	201c      	movs	r0, #28
 8001a86:	f000 ffb2 	bl	80029ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800

08001a98 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ae8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001a9e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001aa2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001aa4:	4b10      	ldr	r3, [pc, #64]	@ (8001ae8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001aac:	2202      	movs	r2, #2
 8001aae:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ab8:	2202      	movs	r2, #2
 8001aba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001abc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001ac2:	4b09      	ldr	r3, [pc, #36]	@ (8001ae8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001ac8:	4b07      	ldr	r3, [pc, #28]	@ (8001ae8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ace:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001ad4:	4804      	ldr	r0, [pc, #16]	@ (8001ae8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ad6:	f001 f98b 	bl	8002df0 <HAL_PCD_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8001ae0:	f7ff fda1 	bl	8001626 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000408 	.word	0x20000408

08001aec <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	@ 0x28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0314 	add.w	r3, r7, #20
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b0c:	d13f      	bne.n	8001b8e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	4b21      	ldr	r3, [pc, #132]	@ (8001b98 <HAL_PCD_MspInit+0xac>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	4a20      	ldr	r2, [pc, #128]	@ (8001b98 <HAL_PCD_MspInit+0xac>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001b98 <HAL_PCD_MspInit+0xac>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4817      	ldr	r0, [pc, #92]	@ (8001b9c <HAL_PCD_MspInit+0xb0>)
 8001b40:	f000 ff70 	bl	8002a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b44:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b52:	2303      	movs	r3, #3
 8001b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b56:	230a      	movs	r3, #10
 8001b58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	4619      	mov	r1, r3
 8001b60:	480e      	ldr	r0, [pc, #56]	@ (8001b9c <HAL_PCD_MspInit+0xb0>)
 8001b62:	f000 ff5f 	bl	8002a24 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b66:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <HAL_PCD_MspInit+0xac>)
 8001b68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b6a:	4a0b      	ldr	r2, [pc, #44]	@ (8001b98 <HAL_PCD_MspInit+0xac>)
 8001b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b70:	6353      	str	r3, [r2, #52]	@ 0x34
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <HAL_PCD_MspInit+0xac>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7a:	4a07      	ldr	r2, [pc, #28]	@ (8001b98 <HAL_PCD_MspInit+0xac>)
 8001b7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b82:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <HAL_PCD_MspInit+0xac>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	@ 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40020000 	.word	0x40020000

08001ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ba0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bd8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8001ba4:	f7ff ff00 	bl	80019a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba8:	480c      	ldr	r0, [pc, #48]	@ (8001bdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001baa:	490d      	ldr	r1, [pc, #52]	@ (8001be0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bac:	4a0d      	ldr	r2, [pc, #52]	@ (8001be4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb0:	e002      	b.n	8001bb8 <LoopCopyDataInit>

08001bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb6:	3304      	adds	r3, #4

08001bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bbc:	d3f9      	bcc.n	8001bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001be8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001bec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc4:	e001      	b.n	8001bca <LoopFillZerobss>

08001bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc8:	3204      	adds	r2, #4

08001bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bcc:	d3fb      	bcc.n	8001bc6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001bce:	f003 fc97 	bl	8005500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bd2:	f7ff fc2f 	bl	8001434 <main>
  bx  lr    
 8001bd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bd8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be0:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8001be4:	080074c8 	.word	0x080074c8
  ldr r2, =_sbss
 8001be8:	20000234 	.word	0x20000234
  ldr r4, =_ebss
 8001bec:	20000a5c 	.word	0x20000a5c

08001bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC_IRQHandler>
	...

08001bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <HAL_Init+0x40>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c34 <HAL_Init+0x40>)
 8001bfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c04:	4b0b      	ldr	r3, [pc, #44]	@ (8001c34 <HAL_Init+0x40>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0a      	ldr	r2, [pc, #40]	@ (8001c34 <HAL_Init+0x40>)
 8001c0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c10:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <HAL_Init+0x40>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a07      	ldr	r2, [pc, #28]	@ (8001c34 <HAL_Init+0x40>)
 8001c16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c1c:	2003      	movs	r0, #3
 8001c1e:	f000 febf 	bl	80029a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c22:	200f      	movs	r0, #15
 8001c24:	f000 f808 	bl	8001c38 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001c28:	f7ff fd82 	bl	8001730 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023c00 	.word	0x40023c00

08001c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c40:	4b12      	ldr	r3, [pc, #72]	@ (8001c8c <HAL_InitTick+0x54>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b12      	ldr	r3, [pc, #72]	@ (8001c90 <HAL_InitTick+0x58>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	f000 fed7 	bl	8002a0a <HAL_SYSTICK_Config>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00e      	b.n	8001c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b0f      	cmp	r3, #15
 8001c6a:	d80a      	bhi.n	8001c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f000 fe9f 	bl	80029b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c78:	4a06      	ldr	r2, [pc, #24]	@ (8001c94 <HAL_InitTick+0x5c>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000060 	.word	0x20000060
 8001c90:	20000068 	.word	0x20000068
 8001c94:	20000064 	.word	0x20000064

08001c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <HAL_IncTick+0x1c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <HAL_IncTick+0x20>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a03      	ldr	r2, [pc, #12]	@ (8001cb8 <HAL_IncTick+0x20>)
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr
 8001cb4:	20000068 	.word	0x20000068
 8001cb8:	2000090c 	.word	0x2000090c

08001cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc0:	4b02      	ldr	r3, [pc, #8]	@ (8001ccc <HAL_GetTick+0x10>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	2000090c 	.word	0x2000090c

08001cd0 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff fff0 	bl	8001cbc <HAL_GetTick>
 8001cdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce8:	d005      	beq.n	8001cf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cea:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <HAL_Delay+0x44>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cf6:	bf00      	nop
 8001cf8:	f7ff ffe0 	bl	8001cbc <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d8f7      	bhi.n	8001cf8 <HAL_Delay+0x28>
  {
  }
}
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000068 	.word	0x20000068

08001d18 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e0ed      	b.n	8001f06 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d102      	bne.n	8001d3c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff f90e 	bl	8000f58 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d4c:	f7ff ffb6 	bl	8001cbc <HAL_GetTick>
 8001d50:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d52:	e012      	b.n	8001d7a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d54:	f7ff ffb2 	bl	8001cbc <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b0a      	cmp	r3, #10
 8001d60:	d90b      	bls.n	8001d7a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d66:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2205      	movs	r2, #5
 8001d72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e0c5      	b.n	8001f06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0e5      	beq.n	8001d54 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0202 	bic.w	r2, r2, #2
 8001d96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d98:	f7ff ff90 	bl	8001cbc <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d9e:	e012      	b.n	8001dc6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001da0:	f7ff ff8c 	bl	8001cbc <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b0a      	cmp	r3, #10
 8001dac:	d90b      	bls.n	8001dc6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2205      	movs	r2, #5
 8001dbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e09f      	b.n	8001f06 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1e5      	bne.n	8001da0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7e1b      	ldrb	r3, [r3, #24]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d108      	bne.n	8001dee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e007      	b.n	8001dfe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	7e5b      	ldrb	r3, [r3, #25]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d108      	bne.n	8001e18 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e007      	b.n	8001e28 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e26:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7e9b      	ldrb	r3, [r3, #26]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d108      	bne.n	8001e42 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0220 	orr.w	r2, r2, #32
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	e007      	b.n	8001e52 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0220 	bic.w	r2, r2, #32
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7edb      	ldrb	r3, [r3, #27]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d108      	bne.n	8001e6c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0210 	bic.w	r2, r2, #16
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e007      	b.n	8001e7c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0210 	orr.w	r2, r2, #16
 8001e7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	7f1b      	ldrb	r3, [r3, #28]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d108      	bne.n	8001e96 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0208 	orr.w	r2, r2, #8
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e007      	b.n	8001ea6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0208 	bic.w	r2, r2, #8
 8001ea4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7f5b      	ldrb	r3, [r3, #29]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d108      	bne.n	8001ec0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0204 	orr.w	r2, r2, #4
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	e007      	b.n	8001ed0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0204 	bic.w	r2, r2, #4
 8001ece:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	ea42 0103 	orr.w	r1, r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	1e5a      	subs	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d12e      	bne.n	8001f80 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2202      	movs	r2, #2
 8001f26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0201 	bic.w	r2, r2, #1
 8001f38:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f3a:	f7ff febf 	bl	8001cbc <HAL_GetTick>
 8001f3e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f40:	e012      	b.n	8001f68 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f42:	f7ff febb 	bl	8001cbc <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b0a      	cmp	r3, #10
 8001f4e:	d90b      	bls.n	8001f68 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f54:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2205      	movs	r2, #5
 8001f60:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e012      	b.n	8001f8e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1e5      	bne.n	8001f42 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	e006      	b.n	8001f8e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f84:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
  }
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b089      	sub	sp, #36	@ 0x24
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001faa:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fb4:	7ffb      	ldrb	r3, [r7, #31]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d003      	beq.n	8001fc2 <HAL_CAN_AddTxMessage+0x2c>
 8001fba:	7ffb      	ldrb	r3, [r7, #31]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	f040 80ad 	bne.w	800211c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10a      	bne.n	8001fe2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d105      	bne.n	8001fe2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 8095 	beq.w	800210c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	0e1b      	lsrs	r3, r3, #24
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001fec:	2201      	movs	r2, #1
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10d      	bne.n	800201a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002008:	68f9      	ldr	r1, [r7, #12]
 800200a:	6809      	ldr	r1, [r1, #0]
 800200c:	431a      	orrs	r2, r3
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	3318      	adds	r3, #24
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	440b      	add	r3, r1
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	e00f      	b.n	800203a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002024:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800202a:	68f9      	ldr	r1, [r7, #12]
 800202c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800202e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	3318      	adds	r3, #24
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	440b      	add	r3, r1
 8002038:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6819      	ldr	r1, [r3, #0]
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	691a      	ldr	r2, [r3, #16]
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	3318      	adds	r3, #24
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	440b      	add	r3, r1
 800204a:	3304      	adds	r3, #4
 800204c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	7d1b      	ldrb	r3, [r3, #20]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d111      	bne.n	800207a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	3318      	adds	r3, #24
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	4413      	add	r3, r2
 8002062:	3304      	adds	r3, #4
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	6811      	ldr	r1, [r2, #0]
 800206a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	3318      	adds	r3, #24
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	440b      	add	r3, r1
 8002076:	3304      	adds	r3, #4
 8002078:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3307      	adds	r3, #7
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	061a      	lsls	r2, r3, #24
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3306      	adds	r3, #6
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	041b      	lsls	r3, r3, #16
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3305      	adds	r3, #5
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	021b      	lsls	r3, r3, #8
 8002094:	4313      	orrs	r3, r2
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	3204      	adds	r2, #4
 800209a:	7812      	ldrb	r2, [r2, #0]
 800209c:	4610      	mov	r0, r2
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	6811      	ldr	r1, [r2, #0]
 80020a2:	ea43 0200 	orr.w	r2, r3, r0
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	440b      	add	r3, r1
 80020ac:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80020b0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3303      	adds	r3, #3
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	061a      	lsls	r2, r3, #24
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3302      	adds	r3, #2
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	041b      	lsls	r3, r3, #16
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3301      	adds	r3, #1
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	4313      	orrs	r3, r2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	7812      	ldrb	r2, [r2, #0]
 80020d2:	4610      	mov	r0, r2
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	6811      	ldr	r1, [r2, #0]
 80020d8:	ea43 0200 	orr.w	r2, r3, r0
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	440b      	add	r3, r1
 80020e2:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80020e6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	3318      	adds	r3, #24
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	4413      	add	r3, r2
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	6811      	ldr	r1, [r2, #0]
 80020fa:	f043 0201 	orr.w	r2, r3, #1
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	3318      	adds	r3, #24
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	440b      	add	r3, r1
 8002106:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	e00e      	b.n	800212a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002110:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e006      	b.n	800212a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002120:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
  }
}
 800212a:	4618      	mov	r0, r3
 800212c:	3724      	adds	r7, #36	@ 0x24
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002148:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800214a:	7dfb      	ldrb	r3, [r7, #23]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d003      	beq.n	8002158 <HAL_CAN_GetRxMessage+0x24>
 8002150:	7dfb      	ldrb	r3, [r7, #23]
 8002152:	2b02      	cmp	r3, #2
 8002154:	f040 8103 	bne.w	800235e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10e      	bne.n	800217c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d116      	bne.n	800219a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002170:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0f7      	b.n	800236c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d107      	bne.n	800219a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e0e8      	b.n	800236c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	331b      	adds	r3, #27
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	4413      	add	r3, r2
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0204 	and.w	r2, r3, #4
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10c      	bne.n	80021d2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	331b      	adds	r3, #27
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	4413      	add	r3, r2
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	0d5b      	lsrs	r3, r3, #21
 80021c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	e00b      	b.n	80021ea <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	331b      	adds	r3, #27
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	4413      	add	r3, r2
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	08db      	lsrs	r3, r3, #3
 80021e2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	331b      	adds	r3, #27
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	4413      	add	r3, r2
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0202 	and.w	r2, r3, #2
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	331b      	adds	r3, #27
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	4413      	add	r3, r2
 800220c:	3304      	adds	r3, #4
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2208      	movs	r2, #8
 800221c:	611a      	str	r2, [r3, #16]
 800221e:	e00b      	b.n	8002238 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	331b      	adds	r3, #27
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	4413      	add	r3, r2
 800222c:	3304      	adds	r3, #4
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 020f 	and.w	r2, r3, #15
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	331b      	adds	r3, #27
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	4413      	add	r3, r2
 8002244:	3304      	adds	r3, #4
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0a1b      	lsrs	r3, r3, #8
 800224a:	b2da      	uxtb	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	331b      	adds	r3, #27
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	4413      	add	r3, r2
 800225c:	3304      	adds	r3, #4
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	0c1b      	lsrs	r3, r3, #16
 8002262:	b29a      	uxth	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	4413      	add	r3, r2
 8002272:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	4413      	add	r3, r2
 8002288:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	0a1a      	lsrs	r2, r3, #8
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	3301      	adds	r3, #1
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	0c1a      	lsrs	r2, r3, #16
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	3302      	adds	r3, #2
 80022ae:	b2d2      	uxtb	r2, r2
 80022b0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	4413      	add	r3, r2
 80022bc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	0e1a      	lsrs	r2, r3, #24
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	3303      	adds	r3, #3
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	3304      	adds	r3, #4
 80022e0:	b2d2      	uxtb	r2, r2
 80022e2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	0a1a      	lsrs	r2, r3, #8
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	3305      	adds	r3, #5
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	4413      	add	r3, r2
 8002308:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	0c1a      	lsrs	r2, r3, #16
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	3306      	adds	r3, #6
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	4413      	add	r3, r2
 8002322:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	0e1a      	lsrs	r2, r3, #24
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	3307      	adds	r3, #7
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d108      	bne.n	800234a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0220 	orr.w	r2, r2, #32
 8002346:	60da      	str	r2, [r3, #12]
 8002348:	e007      	b.n	800235a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 0220 	orr.w	r2, r2, #32
 8002358:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800235a:	2300      	movs	r3, #0
 800235c:	e006      	b.n	800236c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002362:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
  }
}
 800236c:	4618      	mov	r0, r3
 800236e:	371c      	adds	r7, #28
 8002370:	46bd      	mov	sp, r7
 8002372:	bc80      	pop	{r7}
 8002374:	4770      	bx	lr

08002376 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002376:	b480      	push	{r7}
 8002378:	b085      	sub	sp, #20
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002386:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d002      	beq.n	8002394 <HAL_CAN_ActivateNotification+0x1e>
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	2b02      	cmp	r3, #2
 8002392:	d109      	bne.n	80023a8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6959      	ldr	r1, [r3, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	e006      	b.n	80023b6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
  }
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	@ 0x28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d07c      	beq.n	8002500 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d023      	beq.n	8002458 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2201      	movs	r2, #1
 8002416:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f983 	bl	800272e <HAL_CAN_TxMailbox0CompleteCallback>
 8002428:	e016      	b.n	8002458 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d004      	beq.n	800243e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002436:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800243a:	627b      	str	r3, [r7, #36]	@ 0x24
 800243c:	e00c      	b.n	8002458 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b00      	cmp	r3, #0
 8002446:	d004      	beq.n	8002452 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800244e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002450:	e002      	b.n	8002458 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f986 	bl	8002764 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800245e:	2b00      	cmp	r3, #0
 8002460:	d024      	beq.n	80024ac <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800246a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f962 	bl	8002740 <HAL_CAN_TxMailbox1CompleteCallback>
 800247c:	e016      	b.n	80024ac <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002484:	2b00      	cmp	r3, #0
 8002486:	d004      	beq.n	8002492 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800248e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002490:	e00c      	b.n	80024ac <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002498:	2b00      	cmp	r3, #0
 800249a:	d004      	beq.n	80024a6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024a4:	e002      	b.n	80024ac <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f965 	bl	8002776 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d024      	beq.n	8002500 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80024be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f941 	bl	8002752 <HAL_CAN_TxMailbox2CompleteCallback>
 80024d0:	e016      	b.n	8002500 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d004      	beq.n	80024e6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80024dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024e4:	e00c      	b.n	8002500 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d004      	beq.n	80024fa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80024f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f8:	e002      	b.n	8002500 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f944 	bl	8002788 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	f003 0308 	and.w	r3, r3, #8
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00c      	beq.n	8002524 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	2b00      	cmp	r3, #0
 8002512:	d007      	beq.n	8002524 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800251a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2210      	movs	r2, #16
 8002522:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00b      	beq.n	8002546 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d006      	beq.n	8002546 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2208      	movs	r2, #8
 800253e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f92a 	bl	800279a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d009      	beq.n	8002564 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d002      	beq.n	8002564 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f7fe fc76 	bl	8000e50 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00c      	beq.n	8002588 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f003 0310 	and.w	r3, r3, #16
 8002574:	2b00      	cmp	r3, #0
 8002576:	d007      	beq.n	8002588 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800257e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2210      	movs	r2, #16
 8002586:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	f003 0320 	and.w	r3, r3, #32
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00b      	beq.n	80025aa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d006      	beq.n	80025aa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2208      	movs	r2, #8
 80025a2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f90a 	bl	80027be <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	f003 0310 	and.w	r3, r3, #16
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d009      	beq.n	80025c8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d002      	beq.n	80025c8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f8f2 	bl	80027ac <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80025c8:	6a3b      	ldr	r3, [r7, #32]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d006      	beq.n	80025ea <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2210      	movs	r2, #16
 80025e2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f8f3 	bl	80027d0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00b      	beq.n	800260c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d006      	beq.n	800260c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2208      	movs	r2, #8
 8002604:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f8eb 	bl	80027e2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d07b      	beq.n	800270e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d072      	beq.n	8002706 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002626:	2b00      	cmp	r3, #0
 8002628:	d008      	beq.n	800263c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002642:	2b00      	cmp	r3, #0
 8002644:	d008      	beq.n	8002658 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002652:	f043 0302 	orr.w	r3, r3, #2
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800265e:	2b00      	cmp	r3, #0
 8002660:	d008      	beq.n	8002674 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	f043 0304 	orr.w	r3, r3, #4
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800267a:	2b00      	cmp	r3, #0
 800267c:	d043      	beq.n	8002706 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002684:	2b00      	cmp	r3, #0
 8002686:	d03e      	beq.n	8002706 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800268e:	2b60      	cmp	r3, #96	@ 0x60
 8002690:	d02b      	beq.n	80026ea <HAL_CAN_IRQHandler+0x32a>
 8002692:	2b60      	cmp	r3, #96	@ 0x60
 8002694:	d82e      	bhi.n	80026f4 <HAL_CAN_IRQHandler+0x334>
 8002696:	2b50      	cmp	r3, #80	@ 0x50
 8002698:	d022      	beq.n	80026e0 <HAL_CAN_IRQHandler+0x320>
 800269a:	2b50      	cmp	r3, #80	@ 0x50
 800269c:	d82a      	bhi.n	80026f4 <HAL_CAN_IRQHandler+0x334>
 800269e:	2b40      	cmp	r3, #64	@ 0x40
 80026a0:	d019      	beq.n	80026d6 <HAL_CAN_IRQHandler+0x316>
 80026a2:	2b40      	cmp	r3, #64	@ 0x40
 80026a4:	d826      	bhi.n	80026f4 <HAL_CAN_IRQHandler+0x334>
 80026a6:	2b30      	cmp	r3, #48	@ 0x30
 80026a8:	d010      	beq.n	80026cc <HAL_CAN_IRQHandler+0x30c>
 80026aa:	2b30      	cmp	r3, #48	@ 0x30
 80026ac:	d822      	bhi.n	80026f4 <HAL_CAN_IRQHandler+0x334>
 80026ae:	2b10      	cmp	r3, #16
 80026b0:	d002      	beq.n	80026b8 <HAL_CAN_IRQHandler+0x2f8>
 80026b2:	2b20      	cmp	r3, #32
 80026b4:	d005      	beq.n	80026c2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80026b6:	e01d      	b.n	80026f4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80026b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ba:	f043 0308 	orr.w	r3, r3, #8
 80026be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026c0:	e019      	b.n	80026f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80026c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c4:	f043 0310 	orr.w	r3, r3, #16
 80026c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026ca:	e014      	b.n	80026f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ce:	f043 0320 	orr.w	r3, r3, #32
 80026d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026d4:	e00f      	b.n	80026f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026dc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026de:	e00a      	b.n	80026f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80026e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026e6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026e8:	e005      	b.n	80026f6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80026ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80026f2:	e000      	b.n	80026f6 <HAL_CAN_IRQHandler+0x336>
            break;
 80026f4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699a      	ldr	r2, [r3, #24]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002704:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2204      	movs	r2, #4
 800270c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800270e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f867 	bl	80027f4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002726:	bf00      	nop
 8002728:	3728      	adds	r7, #40	@ 0x28
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr

08002752 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr

0800279a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr

080027be <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr

080027e2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr
	...

08002808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002818:	4b0c      	ldr	r3, [pc, #48]	@ (800284c <__NVIC_SetPriorityGrouping+0x44>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002824:	4013      	ands	r3, r2
 8002826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002830:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283a:	4a04      	ldr	r2, [pc, #16]	@ (800284c <__NVIC_SetPriorityGrouping+0x44>)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	60d3      	str	r3, [r2, #12]
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002854:	4b04      	ldr	r3, [pc, #16]	@ (8002868 <__NVIC_GetPriorityGrouping+0x18>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	0a1b      	lsrs	r3, r3, #8
 800285a:	f003 0307 	and.w	r3, r3, #7
}
 800285e:	4618      	mov	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287a:	2b00      	cmp	r3, #0
 800287c:	db0b      	blt.n	8002896 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800287e:	79fb      	ldrb	r3, [r7, #7]
 8002880:	f003 021f 	and.w	r2, r3, #31
 8002884:	4906      	ldr	r1, [pc, #24]	@ (80028a0 <__NVIC_EnableIRQ+0x34>)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	2001      	movs	r0, #1
 800288e:	fa00 f202 	lsl.w	r2, r0, r2
 8002892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	e000e100 	.word	0xe000e100

080028a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	6039      	str	r1, [r7, #0]
 80028ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	db0a      	blt.n	80028ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	b2da      	uxtb	r2, r3
 80028bc:	490c      	ldr	r1, [pc, #48]	@ (80028f0 <__NVIC_SetPriority+0x4c>)
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	0112      	lsls	r2, r2, #4
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	440b      	add	r3, r1
 80028c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028cc:	e00a      	b.n	80028e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	b2da      	uxtb	r2, r3
 80028d2:	4908      	ldr	r1, [pc, #32]	@ (80028f4 <__NVIC_SetPriority+0x50>)
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	3b04      	subs	r3, #4
 80028dc:	0112      	lsls	r2, r2, #4
 80028de:	b2d2      	uxtb	r2, r2
 80028e0:	440b      	add	r3, r1
 80028e2:	761a      	strb	r2, [r3, #24]
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000e100 	.word	0xe000e100
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	@ 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f1c3 0307 	rsb	r3, r3, #7
 8002912:	2b04      	cmp	r3, #4
 8002914:	bf28      	it	cs
 8002916:	2304      	movcs	r3, #4
 8002918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	3304      	adds	r3, #4
 800291e:	2b06      	cmp	r3, #6
 8002920:	d902      	bls.n	8002928 <NVIC_EncodePriority+0x30>
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3b03      	subs	r3, #3
 8002926:	e000      	b.n	800292a <NVIC_EncodePriority+0x32>
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800292c:	f04f 32ff 	mov.w	r2, #4294967295
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	43da      	mvns	r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	401a      	ands	r2, r3
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002940:	f04f 31ff 	mov.w	r1, #4294967295
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	fa01 f303 	lsl.w	r3, r1, r3
 800294a:	43d9      	mvns	r1, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002950:	4313      	orrs	r3, r2
         );
}
 8002952:	4618      	mov	r0, r3
 8002954:	3724      	adds	r7, #36	@ 0x24
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3b01      	subs	r3, #1
 8002968:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800296c:	d301      	bcc.n	8002972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800296e:	2301      	movs	r3, #1
 8002970:	e00f      	b.n	8002992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002972:	4a0a      	ldr	r2, [pc, #40]	@ (800299c <SysTick_Config+0x40>)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3b01      	subs	r3, #1
 8002978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800297a:	210f      	movs	r1, #15
 800297c:	f04f 30ff 	mov.w	r0, #4294967295
 8002980:	f7ff ff90 	bl	80028a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002984:	4b05      	ldr	r3, [pc, #20]	@ (800299c <SysTick_Config+0x40>)
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800298a:	4b04      	ldr	r3, [pc, #16]	@ (800299c <SysTick_Config+0x40>)
 800298c:	2207      	movs	r2, #7
 800298e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	e000e010 	.word	0xe000e010

080029a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff ff2d 	bl	8002808 <__NVIC_SetPriorityGrouping>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b086      	sub	sp, #24
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029c8:	f7ff ff42 	bl	8002850 <__NVIC_GetPriorityGrouping>
 80029cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68b9      	ldr	r1, [r7, #8]
 80029d2:	6978      	ldr	r0, [r7, #20]
 80029d4:	f7ff ff90 	bl	80028f8 <NVIC_EncodePriority>
 80029d8:	4602      	mov	r2, r0
 80029da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff5f 	bl	80028a4 <__NVIC_SetPriority>
}
 80029e6:	bf00      	nop
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff ff35 	bl	800286c <__NVIC_EnableIRQ>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff ffa2 	bl	800295c <SysTick_Config>
 8002a18:	4603      	mov	r3, r0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a32:	e16f      	b.n	8002d14 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	2101      	movs	r1, #1
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a40:	4013      	ands	r3, r2
 8002a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 8161 	beq.w	8002d0e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d005      	beq.n	8002a64 <HAL_GPIO_Init+0x40>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d130      	bne.n	8002ac6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	2203      	movs	r2, #3
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	091b      	lsrs	r3, r3, #4
 8002ab0:	f003 0201 	and.w	r2, r3, #1
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d017      	beq.n	8002b02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	2203      	movs	r2, #3
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d123      	bne.n	8002b56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	08da      	lsrs	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3208      	adds	r2, #8
 8002b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	220f      	movs	r2, #15
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	691a      	ldr	r2, [r3, #16]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	08da      	lsrs	r2, r3, #3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3208      	adds	r2, #8
 8002b50:	6939      	ldr	r1, [r7, #16]
 8002b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	2203      	movs	r2, #3
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43db      	mvns	r3, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f003 0203 	and.w	r2, r3, #3
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 80bb 	beq.w	8002d0e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	4b64      	ldr	r3, [pc, #400]	@ (8002d30 <HAL_GPIO_Init+0x30c>)
 8002b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba0:	4a63      	ldr	r2, [pc, #396]	@ (8002d30 <HAL_GPIO_Init+0x30c>)
 8002ba2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ba6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ba8:	4b61      	ldr	r3, [pc, #388]	@ (8002d30 <HAL_GPIO_Init+0x30c>)
 8002baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bb4:	4a5f      	ldr	r2, [pc, #380]	@ (8002d34 <HAL_GPIO_Init+0x310>)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	089b      	lsrs	r3, r3, #2
 8002bba:	3302      	adds	r3, #2
 8002bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f003 0303 	and.w	r3, r3, #3
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	220f      	movs	r2, #15
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a57      	ldr	r2, [pc, #348]	@ (8002d38 <HAL_GPIO_Init+0x314>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d031      	beq.n	8002c44 <HAL_GPIO_Init+0x220>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a56      	ldr	r2, [pc, #344]	@ (8002d3c <HAL_GPIO_Init+0x318>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d02b      	beq.n	8002c40 <HAL_GPIO_Init+0x21c>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a55      	ldr	r2, [pc, #340]	@ (8002d40 <HAL_GPIO_Init+0x31c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d025      	beq.n	8002c3c <HAL_GPIO_Init+0x218>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a54      	ldr	r2, [pc, #336]	@ (8002d44 <HAL_GPIO_Init+0x320>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d01f      	beq.n	8002c38 <HAL_GPIO_Init+0x214>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a53      	ldr	r2, [pc, #332]	@ (8002d48 <HAL_GPIO_Init+0x324>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d019      	beq.n	8002c34 <HAL_GPIO_Init+0x210>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a52      	ldr	r2, [pc, #328]	@ (8002d4c <HAL_GPIO_Init+0x328>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d013      	beq.n	8002c30 <HAL_GPIO_Init+0x20c>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a51      	ldr	r2, [pc, #324]	@ (8002d50 <HAL_GPIO_Init+0x32c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d00d      	beq.n	8002c2c <HAL_GPIO_Init+0x208>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a50      	ldr	r2, [pc, #320]	@ (8002d54 <HAL_GPIO_Init+0x330>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d007      	beq.n	8002c28 <HAL_GPIO_Init+0x204>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a4f      	ldr	r2, [pc, #316]	@ (8002d58 <HAL_GPIO_Init+0x334>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d101      	bne.n	8002c24 <HAL_GPIO_Init+0x200>
 8002c20:	2308      	movs	r3, #8
 8002c22:	e010      	b.n	8002c46 <HAL_GPIO_Init+0x222>
 8002c24:	2309      	movs	r3, #9
 8002c26:	e00e      	b.n	8002c46 <HAL_GPIO_Init+0x222>
 8002c28:	2307      	movs	r3, #7
 8002c2a:	e00c      	b.n	8002c46 <HAL_GPIO_Init+0x222>
 8002c2c:	2306      	movs	r3, #6
 8002c2e:	e00a      	b.n	8002c46 <HAL_GPIO_Init+0x222>
 8002c30:	2305      	movs	r3, #5
 8002c32:	e008      	b.n	8002c46 <HAL_GPIO_Init+0x222>
 8002c34:	2304      	movs	r3, #4
 8002c36:	e006      	b.n	8002c46 <HAL_GPIO_Init+0x222>
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e004      	b.n	8002c46 <HAL_GPIO_Init+0x222>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e002      	b.n	8002c46 <HAL_GPIO_Init+0x222>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <HAL_GPIO_Init+0x222>
 8002c44:	2300      	movs	r3, #0
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	f002 0203 	and.w	r2, r2, #3
 8002c4c:	0092      	lsls	r2, r2, #2
 8002c4e:	4093      	lsls	r3, r2
 8002c50:	461a      	mov	r2, r3
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c58:	4936      	ldr	r1, [pc, #216]	@ (8002d34 <HAL_GPIO_Init+0x310>)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	089b      	lsrs	r3, r3, #2
 8002c5e:	3302      	adds	r3, #2
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c66:	4b3d      	ldr	r3, [pc, #244]	@ (8002d5c <HAL_GPIO_Init+0x338>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4013      	ands	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c8a:	4a34      	ldr	r2, [pc, #208]	@ (8002d5c <HAL_GPIO_Init+0x338>)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c90:	4b32      	ldr	r3, [pc, #200]	@ (8002d5c <HAL_GPIO_Init+0x338>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002cb4:	4a29      	ldr	r2, [pc, #164]	@ (8002d5c <HAL_GPIO_Init+0x338>)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cba:	4b28      	ldr	r3, [pc, #160]	@ (8002d5c <HAL_GPIO_Init+0x338>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002cde:	4a1f      	ldr	r2, [pc, #124]	@ (8002d5c <HAL_GPIO_Init+0x338>)
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d5c <HAL_GPIO_Init+0x338>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d08:	4a14      	ldr	r2, [pc, #80]	@ (8002d5c <HAL_GPIO_Init+0x338>)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	3301      	adds	r3, #1
 8002d12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f47f ae88 	bne.w	8002a34 <HAL_GPIO_Init+0x10>
  }
}
 8002d24:	bf00      	nop
 8002d26:	bf00      	nop
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40013800 	.word	0x40013800
 8002d38:	40020000 	.word	0x40020000
 8002d3c:	40020400 	.word	0x40020400
 8002d40:	40020800 	.word	0x40020800
 8002d44:	40020c00 	.word	0x40020c00
 8002d48:	40021000 	.word	0x40021000
 8002d4c:	40021400 	.word	0x40021400
 8002d50:	40021800 	.word	0x40021800
 8002d54:	40021c00 	.word	0x40021c00
 8002d58:	40022000 	.word	0x40022000
 8002d5c:	40013c00 	.word	0x40013c00

08002d60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	887b      	ldrh	r3, [r7, #2]
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	73fb      	strb	r3, [r7, #15]
 8002d7c:	e001      	b.n	8002d82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr

08002d8e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	460b      	mov	r3, r1
 8002d98:	807b      	strh	r3, [r7, #2]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d9e:	787b      	ldrb	r3, [r7, #1]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002da4:	887a      	ldrh	r2, [r7, #2]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002daa:	e003      	b.n	8002db4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dac:	887b      	ldrh	r3, [r7, #2]
 8002dae:	041a      	lsls	r2, r3, #16
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	619a      	str	r2, [r3, #24]
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr

08002dbe <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dd0:	887a      	ldrh	r2, [r7, #2]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	041a      	lsls	r2, r3, #16
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	43d9      	mvns	r1, r3
 8002ddc:	887b      	ldrh	r3, [r7, #2]
 8002dde:	400b      	ands	r3, r1
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	619a      	str	r2, [r3, #24]
}
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002df2:	b08f      	sub	sp, #60	@ 0x3c
 8002df4:	af0a      	add	r7, sp, #40	@ 0x28
 8002df6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e10f      	b.n	8003022 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d106      	bne.n	8002e22 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f7fe fe65 	bl	8001aec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2203      	movs	r2, #3
 8002e26:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d102      	bne.n	8002e3c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f001 fa4a 	bl	80042da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	687e      	ldr	r6, [r7, #4]
 8002e4e:	466d      	mov	r5, sp
 8002e50:	f106 0410 	add.w	r4, r6, #16
 8002e54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e60:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e64:	1d33      	adds	r3, r6, #4
 8002e66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e68:	6838      	ldr	r0, [r7, #0]
 8002e6a:	f001 f9df 	bl	800422c <USB_CoreInit>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d005      	beq.n	8002e80 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0d0      	b.n	8003022 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f001 fa37 	bl	80042fa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	73fb      	strb	r3, [r7, #15]
 8002e90:	e04a      	b.n	8002f28 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e92:	7bfa      	ldrb	r2, [r7, #15]
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	333d      	adds	r3, #61	@ 0x3d
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ea6:	7bfa      	ldrb	r2, [r7, #15]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	333c      	adds	r3, #60	@ 0x3c
 8002eb6:	7bfa      	ldrb	r2, [r7, #15]
 8002eb8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002eba:	7bfa      	ldrb	r2, [r7, #15]
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	b298      	uxth	r0, r3
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	00db      	lsls	r3, r3, #3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	3356      	adds	r3, #86	@ 0x56
 8002ece:	4602      	mov	r2, r0
 8002ed0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	3340      	adds	r3, #64	@ 0x40
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ee6:	7bfa      	ldrb	r2, [r7, #15]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	3344      	adds	r3, #68	@ 0x44
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002efa:	7bfa      	ldrb	r2, [r7, #15]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	3348      	adds	r3, #72	@ 0x48
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f0e:	7bfa      	ldrb	r2, [r7, #15]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	334c      	adds	r3, #76	@ 0x4c
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
 8002f24:	3301      	adds	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
 8002f28:	7bfa      	ldrb	r2, [r7, #15]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d3af      	bcc.n	8002e92 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	73fb      	strb	r3, [r7, #15]
 8002f36:	e044      	b.n	8002fc2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f38:	7bfa      	ldrb	r2, [r7, #15]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f4e:	7bfa      	ldrb	r2, [r7, #15]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002f60:	7bfa      	ldrb	r2, [r7, #15]
 8002f62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f64:	7bfa      	ldrb	r2, [r7, #15]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002f76:	2200      	movs	r2, #0
 8002f78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f7a:	7bfa      	ldrb	r2, [r7, #15]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f90:	7bfa      	ldrb	r2, [r7, #15]
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	4413      	add	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fa6:	7bfa      	ldrb	r2, [r7, #15]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	4413      	add	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fbc:	7bfb      	ldrb	r3, [r7, #15]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
 8002fc2:	7bfa      	ldrb	r2, [r7, #15]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d3b5      	bcc.n	8002f38 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	603b      	str	r3, [r7, #0]
 8002fd2:	687e      	ldr	r6, [r7, #4]
 8002fd4:	466d      	mov	r5, sp
 8002fd6:	f106 0410 	add.w	r4, r6, #16
 8002fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fe0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fe2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fe6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fea:	1d33      	adds	r3, r6, #4
 8002fec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fee:	6838      	ldr	r0, [r7, #0]
 8002ff0:	f001 f9d0 	bl	8004394 <USB_DevInit>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d005      	beq.n	8003006 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e00d      	b.n	8003022 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f001 fb90 	bl	8004740 <USB_DevDisconnect>

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800302c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08a      	sub	sp, #40	@ 0x28
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e23b      	b.n	80034b6 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d050      	beq.n	80030ec <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800304a:	4b9e      	ldr	r3, [pc, #632]	@ (80032c4 <HAL_RCC_OscConfig+0x298>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b04      	cmp	r3, #4
 8003054:	d00c      	beq.n	8003070 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003056:	4b9b      	ldr	r3, [pc, #620]	@ (80032c4 <HAL_RCC_OscConfig+0x298>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800305e:	2b08      	cmp	r3, #8
 8003060:	d112      	bne.n	8003088 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003062:	4b98      	ldr	r3, [pc, #608]	@ (80032c4 <HAL_RCC_OscConfig+0x298>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800306a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800306e:	d10b      	bne.n	8003088 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003070:	4b94      	ldr	r3, [pc, #592]	@ (80032c4 <HAL_RCC_OscConfig+0x298>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d036      	beq.n	80030ea <HAL_RCC_OscConfig+0xbe>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d132      	bne.n	80030ea <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e216      	b.n	80034b6 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	4b8e      	ldr	r3, [pc, #568]	@ (80032c8 <HAL_RCC_OscConfig+0x29c>)
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d013      	beq.n	80030c2 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309a:	f7fe fe0f 	bl	8001cbc <HAL_GetTick>
 800309e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a2:	f7fe fe0b 	bl	8001cbc <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b64      	cmp	r3, #100	@ 0x64
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e200      	b.n	80034b6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b4:	4b83      	ldr	r3, [pc, #524]	@ (80032c4 <HAL_RCC_OscConfig+0x298>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x76>
 80030c0:	e014      	b.n	80030ec <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c2:	f7fe fdfb 	bl	8001cbc <HAL_GetTick>
 80030c6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030ca:	f7fe fdf7 	bl	8001cbc <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b64      	cmp	r3, #100	@ 0x64
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e1ec      	b.n	80034b6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030dc:	4b79      	ldr	r3, [pc, #484]	@ (80032c4 <HAL_RCC_OscConfig+0x298>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f0      	bne.n	80030ca <HAL_RCC_OscConfig+0x9e>
 80030e8:	e000      	b.n	80030ec <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d077      	beq.n	80031e8 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030f8:	4b72      	ldr	r3, [pc, #456]	@ (80032c4 <HAL_RCC_OscConfig+0x298>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 030c 	and.w	r3, r3, #12
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00b      	beq.n	800311c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003104:	4b6f      	ldr	r3, [pc, #444]	@ (80032c4 <HAL_RCC_OscConfig+0x298>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800310c:	2b08      	cmp	r3, #8
 800310e:	d126      	bne.n	800315e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003110:	4b6c      	ldr	r3, [pc, #432]	@ (80032c4 <HAL_RCC_OscConfig+0x298>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d120      	bne.n	800315e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311c:	4b69      	ldr	r3, [pc, #420]	@ (80032c4 <HAL_RCC_OscConfig+0x298>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_RCC_OscConfig+0x108>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d001      	beq.n	8003134 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e1c0      	b.n	80034b6 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003134:	4b63      	ldr	r3, [pc, #396]	@ (80032c4 <HAL_RCC_OscConfig+0x298>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	21f8      	movs	r1, #248	@ 0xf8
 8003142:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	69b9      	ldr	r1, [r7, #24]
 8003146:	fa91 f1a1 	rbit	r1, r1
 800314a:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800314c:	6979      	ldr	r1, [r7, #20]
 800314e:	fab1 f181 	clz	r1, r1
 8003152:	b2c9      	uxtb	r1, r1
 8003154:	408b      	lsls	r3, r1
 8003156:	495b      	ldr	r1, [pc, #364]	@ (80032c4 <HAL_RCC_OscConfig+0x298>)
 8003158:	4313      	orrs	r3, r2
 800315a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315c:	e044      	b.n	80031e8 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d02a      	beq.n	80031bc <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003166:	4b59      	ldr	r3, [pc, #356]	@ (80032cc <HAL_RCC_OscConfig+0x2a0>)
 8003168:	2201      	movs	r2, #1
 800316a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316c:	f7fe fda6 	bl	8001cbc <HAL_GetTick>
 8003170:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003172:	e008      	b.n	8003186 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003174:	f7fe fda2 	bl	8001cbc <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d901      	bls.n	8003186 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	e197      	b.n	80034b6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003186:	4b4f      	ldr	r3, [pc, #316]	@ (80032c4 <HAL_RCC_OscConfig+0x298>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f0      	beq.n	8003174 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003192:	4b4c      	ldr	r3, [pc, #304]	@ (80032c4 <HAL_RCC_OscConfig+0x298>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	21f8      	movs	r1, #248	@ 0xf8
 80031a0:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	6939      	ldr	r1, [r7, #16]
 80031a4:	fa91 f1a1 	rbit	r1, r1
 80031a8:	60f9      	str	r1, [r7, #12]
  return result;
 80031aa:	68f9      	ldr	r1, [r7, #12]
 80031ac:	fab1 f181 	clz	r1, r1
 80031b0:	b2c9      	uxtb	r1, r1
 80031b2:	408b      	lsls	r3, r1
 80031b4:	4943      	ldr	r1, [pc, #268]	@ (80032c4 <HAL_RCC_OscConfig+0x298>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	600b      	str	r3, [r1, #0]
 80031ba:	e015      	b.n	80031e8 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031bc:	4b43      	ldr	r3, [pc, #268]	@ (80032cc <HAL_RCC_OscConfig+0x2a0>)
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c2:	f7fe fd7b 	bl	8001cbc <HAL_GetTick>
 80031c6:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ca:	f7fe fd77 	bl	8001cbc <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e16c      	b.n	80034b6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031dc:	4b39      	ldr	r3, [pc, #228]	@ (80032c4 <HAL_RCC_OscConfig+0x298>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f0      	bne.n	80031ca <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d030      	beq.n	8003256 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d016      	beq.n	800322a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031fc:	4b34      	ldr	r3, [pc, #208]	@ (80032d0 <HAL_RCC_OscConfig+0x2a4>)
 80031fe:	2201      	movs	r2, #1
 8003200:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003202:	f7fe fd5b 	bl	8001cbc <HAL_GetTick>
 8003206:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800320a:	f7fe fd57 	bl	8001cbc <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e14c      	b.n	80034b6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800321c:	4b29      	ldr	r3, [pc, #164]	@ (80032c4 <HAL_RCC_OscConfig+0x298>)
 800321e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0f0      	beq.n	800320a <HAL_RCC_OscConfig+0x1de>
 8003228:	e015      	b.n	8003256 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800322a:	4b29      	ldr	r3, [pc, #164]	@ (80032d0 <HAL_RCC_OscConfig+0x2a4>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003230:	f7fe fd44 	bl	8001cbc <HAL_GetTick>
 8003234:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003238:	f7fe fd40 	bl	8001cbc <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e135      	b.n	80034b6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800324a:	4b1e      	ldr	r3, [pc, #120]	@ (80032c4 <HAL_RCC_OscConfig+0x298>)
 800324c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 8087 	beq.w	8003372 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003264:	2300      	movs	r3, #0
 8003266:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800326a:	4b16      	ldr	r3, [pc, #88]	@ (80032c4 <HAL_RCC_OscConfig+0x298>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d110      	bne.n	8003298 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	4b12      	ldr	r3, [pc, #72]	@ (80032c4 <HAL_RCC_OscConfig+0x298>)
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	4a11      	ldr	r2, [pc, #68]	@ (80032c4 <HAL_RCC_OscConfig+0x298>)
 8003280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003284:	6413      	str	r3, [r2, #64]	@ 0x40
 8003286:	4b0f      	ldr	r3, [pc, #60]	@ (80032c4 <HAL_RCC_OscConfig+0x298>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003292:	2301      	movs	r3, #1
 8003294:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003298:	4b0e      	ldr	r3, [pc, #56]	@ (80032d4 <HAL_RCC_OscConfig+0x2a8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a0d      	ldr	r2, [pc, #52]	@ (80032d4 <HAL_RCC_OscConfig+0x2a8>)
 800329e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a2:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a4:	4b0b      	ldr	r3, [pc, #44]	@ (80032d4 <HAL_RCC_OscConfig+0x2a8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d122      	bne.n	80032f6 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032b0:	4b08      	ldr	r3, [pc, #32]	@ (80032d4 <HAL_RCC_OscConfig+0x2a8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a07      	ldr	r2, [pc, #28]	@ (80032d4 <HAL_RCC_OscConfig+0x2a8>)
 80032b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032bc:	f7fe fcfe 	bl	8001cbc <HAL_GetTick>
 80032c0:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c2:	e012      	b.n	80032ea <HAL_RCC_OscConfig+0x2be>
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40023802 	.word	0x40023802
 80032cc:	42470000 	.word	0x42470000
 80032d0:	42470e80 	.word	0x42470e80
 80032d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032d8:	f7fe fcf0 	bl	8001cbc <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e0e5      	b.n	80034b6 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ea:	4b75      	ldr	r3, [pc, #468]	@ (80034c0 <HAL_RCC_OscConfig+0x494>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	4b72      	ldr	r3, [pc, #456]	@ (80034c4 <HAL_RCC_OscConfig+0x498>)
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d015      	beq.n	8003334 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003308:	f7fe fcd8 	bl	8001cbc <HAL_GetTick>
 800330c:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330e:	e00a      	b.n	8003326 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003310:	f7fe fcd4 	bl	8001cbc <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e0c7      	b.n	80034b6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003326:	4b68      	ldr	r3, [pc, #416]	@ (80034c8 <HAL_RCC_OscConfig+0x49c>)
 8003328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0ee      	beq.n	8003310 <HAL_RCC_OscConfig+0x2e4>
 8003332:	e014      	b.n	800335e <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003334:	f7fe fcc2 	bl	8001cbc <HAL_GetTick>
 8003338:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800333a:	e00a      	b.n	8003352 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800333c:	f7fe fcbe 	bl	8001cbc <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e0b1      	b.n	80034b6 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003352:	4b5d      	ldr	r3, [pc, #372]	@ (80034c8 <HAL_RCC_OscConfig+0x49c>)
 8003354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1ee      	bne.n	800333c <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800335e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003362:	2b01      	cmp	r3, #1
 8003364:	d105      	bne.n	8003372 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003366:	4b58      	ldr	r3, [pc, #352]	@ (80034c8 <HAL_RCC_OscConfig+0x49c>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	4a57      	ldr	r2, [pc, #348]	@ (80034c8 <HAL_RCC_OscConfig+0x49c>)
 800336c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003370:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 809c 	beq.w	80034b4 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800337c:	4b52      	ldr	r3, [pc, #328]	@ (80034c8 <HAL_RCC_OscConfig+0x49c>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	2b08      	cmp	r3, #8
 8003386:	d061      	beq.n	800344c <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d146      	bne.n	800341e <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003390:	4b4e      	ldr	r3, [pc, #312]	@ (80034cc <HAL_RCC_OscConfig+0x4a0>)
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003396:	f7fe fc91 	bl	8001cbc <HAL_GetTick>
 800339a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800339e:	f7fe fc8d 	bl	8001cbc <HAL_GetTick>
 80033a2:	4602      	mov	r2, r0
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b64      	cmp	r3, #100	@ 0x64
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e082      	b.n	80034b6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b0:	4b45      	ldr	r3, [pc, #276]	@ (80034c8 <HAL_RCC_OscConfig+0x49c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1f0      	bne.n	800339e <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033bc:	4b42      	ldr	r3, [pc, #264]	@ (80034c8 <HAL_RCC_OscConfig+0x49c>)
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	4b43      	ldr	r3, [pc, #268]	@ (80034d0 <HAL_RCC_OscConfig+0x4a4>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	69d1      	ldr	r1, [r2, #28]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6a12      	ldr	r2, [r2, #32]
 80033cc:	4311      	orrs	r1, r2
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033d2:	0192      	lsls	r2, r2, #6
 80033d4:	4311      	orrs	r1, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80033da:	0612      	lsls	r2, r2, #24
 80033dc:	4311      	orrs	r1, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80033e2:	0852      	lsrs	r2, r2, #1
 80033e4:	3a01      	subs	r2, #1
 80033e6:	0412      	lsls	r2, r2, #16
 80033e8:	430a      	orrs	r2, r1
 80033ea:	4937      	ldr	r1, [pc, #220]	@ (80034c8 <HAL_RCC_OscConfig+0x49c>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f0:	4b36      	ldr	r3, [pc, #216]	@ (80034cc <HAL_RCC_OscConfig+0x4a0>)
 80033f2:	2201      	movs	r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f6:	f7fe fc61 	bl	8001cbc <HAL_GetTick>
 80033fa:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033fe:	f7fe fc5d 	bl	8001cbc <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b64      	cmp	r3, #100	@ 0x64
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e052      	b.n	80034b6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003410:	4b2d      	ldr	r3, [pc, #180]	@ (80034c8 <HAL_RCC_OscConfig+0x49c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0f0      	beq.n	80033fe <HAL_RCC_OscConfig+0x3d2>
 800341c:	e04a      	b.n	80034b4 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341e:	4b2b      	ldr	r3, [pc, #172]	@ (80034cc <HAL_RCC_OscConfig+0x4a0>)
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7fe fc4a 	bl	8001cbc <HAL_GetTick>
 8003428:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800342c:	f7fe fc46 	bl	8001cbc <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	@ 0x64
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e03b      	b.n	80034b6 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343e:	4b22      	ldr	r3, [pc, #136]	@ (80034c8 <HAL_RCC_OscConfig+0x49c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0x400>
 800344a:	e033      	b.n	80034b4 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e02e      	b.n	80034b6 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8003458:	4b1b      	ldr	r3, [pc, #108]	@ (80034c8 <HAL_RCC_OscConfig+0x49c>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69db      	ldr	r3, [r3, #28]
 8003468:	429a      	cmp	r2, r3
 800346a:	d121      	bne.n	80034b0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d11a      	bne.n	80034b0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800347a:	69fa      	ldr	r2, [r7, #28]
 800347c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003480:	4013      	ands	r3, r2
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003486:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003488:	4293      	cmp	r3, r2
 800348a:	d111      	bne.n	80034b0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003496:	085b      	lsrs	r3, r3, #1
 8003498:	3b01      	subs	r3, #1
 800349a:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800349c:	429a      	cmp	r2, r3
 800349e:	d107      	bne.n	80034b0 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034aa:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3728      	adds	r7, #40	@ 0x28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40007000 	.word	0x40007000
 80034c4:	40023870 	.word	0x40023870
 80034c8:	40023800 	.word	0x40023800
 80034cc:	42470060 	.word	0x42470060
 80034d0:	f0bc8000 	.word	0xf0bc8000

080034d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0d2      	b.n	800368e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034e8:	4b6b      	ldr	r3, [pc, #428]	@ (8003698 <HAL_RCC_ClockConfig+0x1c4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d90c      	bls.n	8003510 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f6:	4b68      	ldr	r3, [pc, #416]	@ (8003698 <HAL_RCC_ClockConfig+0x1c4>)
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fe:	4b66      	ldr	r3, [pc, #408]	@ (8003698 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d001      	beq.n	8003510 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0be      	b.n	800368e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d020      	beq.n	800355e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d005      	beq.n	8003534 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003528:	4b5c      	ldr	r3, [pc, #368]	@ (800369c <HAL_RCC_ClockConfig+0x1c8>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	4a5b      	ldr	r2, [pc, #364]	@ (800369c <HAL_RCC_ClockConfig+0x1c8>)
 800352e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003532:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8003540:	4b56      	ldr	r3, [pc, #344]	@ (800369c <HAL_RCC_ClockConfig+0x1c8>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	4a55      	ldr	r2, [pc, #340]	@ (800369c <HAL_RCC_ClockConfig+0x1c8>)
 8003546:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800354a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800354c:	4b53      	ldr	r3, [pc, #332]	@ (800369c <HAL_RCC_ClockConfig+0x1c8>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	4950      	ldr	r1, [pc, #320]	@ (800369c <HAL_RCC_ClockConfig+0x1c8>)
 800355a:	4313      	orrs	r3, r2
 800355c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d040      	beq.n	80035ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d107      	bne.n	8003582 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003572:	4b4a      	ldr	r3, [pc, #296]	@ (800369c <HAL_RCC_ClockConfig+0x1c8>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d115      	bne.n	80035aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e085      	b.n	800368e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d107      	bne.n	800359a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358a:	4b44      	ldr	r3, [pc, #272]	@ (800369c <HAL_RCC_ClockConfig+0x1c8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e079      	b.n	800368e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359a:	4b40      	ldr	r3, [pc, #256]	@ (800369c <HAL_RCC_ClockConfig+0x1c8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e071      	b.n	800368e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035aa:	4b3c      	ldr	r3, [pc, #240]	@ (800369c <HAL_RCC_ClockConfig+0x1c8>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f023 0203 	bic.w	r2, r3, #3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4939      	ldr	r1, [pc, #228]	@ (800369c <HAL_RCC_ClockConfig+0x1c8>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035bc:	f7fe fb7e 	bl	8001cbc <HAL_GetTick>
 80035c0:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c2:	e00a      	b.n	80035da <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c4:	f7fe fb7a 	bl	8001cbc <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e059      	b.n	800368e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035da:	4b30      	ldr	r3, [pc, #192]	@ (800369c <HAL_RCC_ClockConfig+0x1c8>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 020c 	and.w	r2, r3, #12
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d1eb      	bne.n	80035c4 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003698 <HAL_RCC_ClockConfig+0x1c4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d20c      	bcs.n	8003614 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fa:	4b27      	ldr	r3, [pc, #156]	@ (8003698 <HAL_RCC_ClockConfig+0x1c4>)
 80035fc:	683a      	ldr	r2, [r7, #0]
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003602:	4b25      	ldr	r3, [pc, #148]	@ (8003698 <HAL_RCC_ClockConfig+0x1c4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e03c      	b.n	800368e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003620:	4b1e      	ldr	r3, [pc, #120]	@ (800369c <HAL_RCC_ClockConfig+0x1c8>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	491b      	ldr	r1, [pc, #108]	@ (800369c <HAL_RCC_ClockConfig+0x1c8>)
 800362e:	4313      	orrs	r3, r2
 8003630:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0308 	and.w	r3, r3, #8
 800363a:	2b00      	cmp	r3, #0
 800363c:	d009      	beq.n	8003652 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800363e:	4b17      	ldr	r3, [pc, #92]	@ (800369c <HAL_RCC_ClockConfig+0x1c8>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4913      	ldr	r1, [pc, #76]	@ (800369c <HAL_RCC_ClockConfig+0x1c8>)
 800364e:	4313      	orrs	r3, r2
 8003650:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003652:	f000 f82b 	bl	80036ac <HAL_RCC_GetSysClockFreq>
 8003656:	4601      	mov	r1, r0
 8003658:	4b10      	ldr	r3, [pc, #64]	@ (800369c <HAL_RCC_ClockConfig+0x1c8>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003660:	22f0      	movs	r2, #240	@ 0xf0
 8003662:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	fa92 f2a2 	rbit	r2, r2
 800366a:	60fa      	str	r2, [r7, #12]
  return result;
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	fab2 f282 	clz	r2, r2
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	40d3      	lsrs	r3, r2
 8003676:	4a0a      	ldr	r2, [pc, #40]	@ (80036a0 <HAL_RCC_ClockConfig+0x1cc>)
 8003678:	5cd3      	ldrb	r3, [r2, r3]
 800367a:	fa21 f303 	lsr.w	r3, r1, r3
 800367e:	4a09      	ldr	r2, [pc, #36]	@ (80036a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003682:	4b09      	ldr	r3, [pc, #36]	@ (80036a8 <HAL_RCC_ClockConfig+0x1d4>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fe fad6 	bl	8001c38 <HAL_InitTick>

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40023c00 	.word	0x40023c00
 800369c:	40023800 	.word	0x40023800
 80036a0:	08007138 	.word	0x08007138
 80036a4:	20000060 	.word	0x20000060
 80036a8:	20000064 	.word	0x20000064

080036ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b0:	b090      	sub	sp, #64	@ 0x40
 80036b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80036b8:	2300      	movs	r3, #0
 80036ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036bc:	2300      	movs	r3, #0
 80036be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036c4:	4b59      	ldr	r3, [pc, #356]	@ (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 030c 	and.w	r3, r3, #12
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d00d      	beq.n	80036ec <HAL_RCC_GetSysClockFreq+0x40>
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	f200 80a2 	bhi.w	800381a <HAL_RCC_GetSysClockFreq+0x16e>
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0x34>
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d003      	beq.n	80036e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80036de:	e09c      	b.n	800381a <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036e0:	4b53      	ldr	r3, [pc, #332]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x184>)
 80036e2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80036e4:	e09c      	b.n	8003820 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036e6:	4b53      	ldr	r3, [pc, #332]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x188>)
 80036e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036ea:	e099      	b.n	8003820 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036ec:	4b4f      	ldr	r3, [pc, #316]	@ (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036f6:	4b4d      	ldr	r3, [pc, #308]	@ (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d027      	beq.n	8003752 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003702:	4b4a      	ldr	r3, [pc, #296]	@ (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	099b      	lsrs	r3, r3, #6
 8003708:	2200      	movs	r2, #0
 800370a:	623b      	str	r3, [r7, #32]
 800370c:	627a      	str	r2, [r7, #36]	@ 0x24
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003714:	2100      	movs	r1, #0
 8003716:	4b47      	ldr	r3, [pc, #284]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x188>)
 8003718:	fb03 f201 	mul.w	r2, r3, r1
 800371c:	2300      	movs	r3, #0
 800371e:	fb00 f303 	mul.w	r3, r0, r3
 8003722:	4413      	add	r3, r2
 8003724:	4a43      	ldr	r2, [pc, #268]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x188>)
 8003726:	fba0 2102 	umull	r2, r1, r0, r2
 800372a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800372c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800372e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003730:	4413      	add	r3, r2
 8003732:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003736:	2200      	movs	r2, #0
 8003738:	61bb      	str	r3, [r7, #24]
 800373a:	61fa      	str	r2, [r7, #28]
 800373c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003740:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003744:	f7fd f9dc 	bl	8000b00 <__aeabi_uldivmod>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4613      	mov	r3, r2
 800374e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003750:	e055      	b.n	80037fe <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003752:	4b36      	ldr	r3, [pc, #216]	@ (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	099b      	lsrs	r3, r3, #6
 8003758:	2200      	movs	r2, #0
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	617a      	str	r2, [r7, #20]
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003764:	f04f 0b00 	mov.w	fp, #0
 8003768:	4652      	mov	r2, sl
 800376a:	465b      	mov	r3, fp
 800376c:	f04f 0000 	mov.w	r0, #0
 8003770:	f04f 0100 	mov.w	r1, #0
 8003774:	0159      	lsls	r1, r3, #5
 8003776:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800377a:	0150      	lsls	r0, r2, #5
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	ebb2 080a 	subs.w	r8, r2, sl
 8003784:	eb63 090b 	sbc.w	r9, r3, fp
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003794:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003798:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800379c:	ebb2 0408 	subs.w	r4, r2, r8
 80037a0:	eb63 0509 	sbc.w	r5, r3, r9
 80037a4:	f04f 0200 	mov.w	r2, #0
 80037a8:	f04f 0300 	mov.w	r3, #0
 80037ac:	00eb      	lsls	r3, r5, #3
 80037ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037b2:	00e2      	lsls	r2, r4, #3
 80037b4:	4614      	mov	r4, r2
 80037b6:	461d      	mov	r5, r3
 80037b8:	eb14 030a 	adds.w	r3, r4, sl
 80037bc:	603b      	str	r3, [r7, #0]
 80037be:	eb45 030b 	adc.w	r3, r5, fp
 80037c2:	607b      	str	r3, [r7, #4]
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037d0:	4629      	mov	r1, r5
 80037d2:	028b      	lsls	r3, r1, #10
 80037d4:	4620      	mov	r0, r4
 80037d6:	4629      	mov	r1, r5
 80037d8:	4604      	mov	r4, r0
 80037da:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80037de:	4601      	mov	r1, r0
 80037e0:	028a      	lsls	r2, r1, #10
 80037e2:	4610      	mov	r0, r2
 80037e4:	4619      	mov	r1, r3
 80037e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037e8:	2200      	movs	r2, #0
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	60fa      	str	r2, [r7, #12]
 80037ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037f2:	f7fd f985 	bl	8000b00 <__aeabi_uldivmod>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4613      	mov	r3, r2
 80037fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037fe:	4b0b      	ldr	r3, [pc, #44]	@ (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	0c1b      	lsrs	r3, r3, #16
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	3301      	adds	r3, #1
 800380a:	005b      	lsls	r3, r3, #1
 800380c:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800380e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003812:	fbb2 f3f3 	udiv	r3, r2, r3
 8003816:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003818:	e002      	b.n	8003820 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800381a:	4b05      	ldr	r3, [pc, #20]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x184>)
 800381c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800381e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003822:	4618      	mov	r0, r3
 8003824:	3740      	adds	r7, #64	@ 0x40
 8003826:	46bd      	mov	sp, r7
 8003828:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800382c:	40023800 	.word	0x40023800
 8003830:	00f42400 	.word	0x00f42400
 8003834:	017d7840 	.word	0x017d7840

08003838 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e07b      	b.n	8003942 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384e:	2b00      	cmp	r3, #0
 8003850:	d108      	bne.n	8003864 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800385a:	d009      	beq.n	8003870 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	61da      	str	r2, [r3, #28]
 8003862:	e005      	b.n	8003870 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fd ff08 	bl	80016a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	f003 0302 	and.w	r3, r3, #2
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038e0:	431a      	orrs	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a1b      	ldr	r3, [r3, #32]
 80038f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f4:	ea42 0103 	orr.w	r1, r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	0c1b      	lsrs	r3, r3, #16
 800390e:	f003 0104 	and.w	r1, r3, #4
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003916:	f003 0210 	and.w	r2, r3, #16
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	69da      	ldr	r2, [r3, #28]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003930:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d101      	bne.n	800395c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e041      	b.n	80039e0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d106      	bne.n	8003976 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7fe f86b 	bl	8001a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2202      	movs	r2, #2
 800397a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3304      	adds	r3, #4
 8003986:	4619      	mov	r1, r3
 8003988:	4610      	mov	r0, r2
 800398a:	f000 fa8f 	bl	8003eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d001      	beq.n	8003a00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e04e      	b.n	8003a9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0201 	orr.w	r2, r2, #1
 8003a16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a22      	ldr	r2, [pc, #136]	@ (8003aa8 <HAL_TIM_Base_Start_IT+0xc0>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d022      	beq.n	8003a68 <HAL_TIM_Base_Start_IT+0x80>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a2a:	d01d      	beq.n	8003a68 <HAL_TIM_Base_Start_IT+0x80>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a1e      	ldr	r2, [pc, #120]	@ (8003aac <HAL_TIM_Base_Start_IT+0xc4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d018      	beq.n	8003a68 <HAL_TIM_Base_Start_IT+0x80>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ab0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d013      	beq.n	8003a68 <HAL_TIM_Base_Start_IT+0x80>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a1b      	ldr	r2, [pc, #108]	@ (8003ab4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00e      	beq.n	8003a68 <HAL_TIM_Base_Start_IT+0x80>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ab8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d009      	beq.n	8003a68 <HAL_TIM_Base_Start_IT+0x80>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a18      	ldr	r2, [pc, #96]	@ (8003abc <HAL_TIM_Base_Start_IT+0xd4>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d004      	beq.n	8003a68 <HAL_TIM_Base_Start_IT+0x80>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a17      	ldr	r2, [pc, #92]	@ (8003ac0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d111      	bne.n	8003a8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b06      	cmp	r3, #6
 8003a78:	d010      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0201 	orr.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8a:	e007      	b.n	8003a9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr
 8003aa8:	40010000 	.word	0x40010000
 8003aac:	40000400 	.word	0x40000400
 8003ab0:	40000800 	.word	0x40000800
 8003ab4:	40000c00 	.word	0x40000c00
 8003ab8:	40010400 	.word	0x40010400
 8003abc:	40014000 	.word	0x40014000
 8003ac0:	40001800 	.word	0x40001800

08003ac4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d122      	bne.n	8003b20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d11b      	bne.n	8003b20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f06f 0202 	mvn.w	r2, #2
 8003af0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f9b4 	bl	8003e74 <HAL_TIM_IC_CaptureCallback>
 8003b0c:	e005      	b.n	8003b1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f9a7 	bl	8003e62 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f9b6 	bl	8003e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b04      	cmp	r3, #4
 8003b2c:	d122      	bne.n	8003b74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d11b      	bne.n	8003b74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0204 	mvn.w	r2, #4
 8003b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f98a 	bl	8003e74 <HAL_TIM_IC_CaptureCallback>
 8003b60:	e005      	b.n	8003b6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f97d 	bl	8003e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f98c 	bl	8003e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d122      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d11b      	bne.n	8003bc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0208 	mvn.w	r2, #8
 8003b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2204      	movs	r2, #4
 8003b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f960 	bl	8003e74 <HAL_TIM_IC_CaptureCallback>
 8003bb4:	e005      	b.n	8003bc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f953 	bl	8003e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f962 	bl	8003e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f003 0310 	and.w	r3, r3, #16
 8003bd2:	2b10      	cmp	r3, #16
 8003bd4:	d122      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	f003 0310 	and.w	r3, r3, #16
 8003be0:	2b10      	cmp	r3, #16
 8003be2:	d11b      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0210 	mvn.w	r2, #16
 8003bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2208      	movs	r2, #8
 8003bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f936 	bl	8003e74 <HAL_TIM_IC_CaptureCallback>
 8003c08:	e005      	b.n	8003c16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 f929 	bl	8003e62 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f938 	bl	8003e86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d10e      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d107      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f06f 0201 	mvn.w	r2, #1
 8003c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7fd f8d2 	bl	8000dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c52:	2b80      	cmp	r3, #128	@ 0x80
 8003c54:	d10e      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c60:	2b80      	cmp	r3, #128	@ 0x80
 8003c62:	d107      	bne.n	8003c74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fad3 	bl	800421a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c7e:	2b40      	cmp	r3, #64	@ 0x40
 8003c80:	d10e      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c8c:	2b40      	cmp	r3, #64	@ 0x40
 8003c8e:	d107      	bne.n	8003ca0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f8fc 	bl	8003e98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 0320 	and.w	r3, r3, #32
 8003caa:	2b20      	cmp	r3, #32
 8003cac:	d10e      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d107      	bne.n	8003ccc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f06f 0220 	mvn.w	r2, #32
 8003cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fa9e 	bl	8004208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ccc:	bf00      	nop
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_TIM_ConfigClockSource+0x1c>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e0b4      	b.n	8003e5a <HAL_TIM_ConfigClockSource+0x186>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d28:	d03e      	beq.n	8003da8 <HAL_TIM_ConfigClockSource+0xd4>
 8003d2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d2e:	f200 8087 	bhi.w	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d36:	f000 8086 	beq.w	8003e46 <HAL_TIM_ConfigClockSource+0x172>
 8003d3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d3e:	d87f      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d40:	2b70      	cmp	r3, #112	@ 0x70
 8003d42:	d01a      	beq.n	8003d7a <HAL_TIM_ConfigClockSource+0xa6>
 8003d44:	2b70      	cmp	r3, #112	@ 0x70
 8003d46:	d87b      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d48:	2b60      	cmp	r3, #96	@ 0x60
 8003d4a:	d050      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x11a>
 8003d4c:	2b60      	cmp	r3, #96	@ 0x60
 8003d4e:	d877      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d50:	2b50      	cmp	r3, #80	@ 0x50
 8003d52:	d03c      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0xfa>
 8003d54:	2b50      	cmp	r3, #80	@ 0x50
 8003d56:	d873      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d58:	2b40      	cmp	r3, #64	@ 0x40
 8003d5a:	d058      	beq.n	8003e0e <HAL_TIM_ConfigClockSource+0x13a>
 8003d5c:	2b40      	cmp	r3, #64	@ 0x40
 8003d5e:	d86f      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d60:	2b30      	cmp	r3, #48	@ 0x30
 8003d62:	d064      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0x15a>
 8003d64:	2b30      	cmp	r3, #48	@ 0x30
 8003d66:	d86b      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d060      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0x15a>
 8003d6c:	2b20      	cmp	r3, #32
 8003d6e:	d867      	bhi.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d05c      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0x15a>
 8003d74:	2b10      	cmp	r3, #16
 8003d76:	d05a      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0x15a>
 8003d78:	e062      	b.n	8003e40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d8a:	f000 f9a4 	bl	80040d6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	609a      	str	r2, [r3, #8]
      break;
 8003da6:	e04f      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003db8:	f000 f98d 	bl	80040d6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dca:	609a      	str	r2, [r3, #8]
      break;
 8003dcc:	e03c      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f000 f904 	bl	8003fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2150      	movs	r1, #80	@ 0x50
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 f95b 	bl	80040a2 <TIM_ITRx_SetConfig>
      break;
 8003dec:	e02c      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	f000 f922 	bl	8004044 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2160      	movs	r1, #96	@ 0x60
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 f94b 	bl	80040a2 <TIM_ITRx_SetConfig>
      break;
 8003e0c:	e01c      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f000 f8e4 	bl	8003fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2140      	movs	r1, #64	@ 0x40
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 f93b 	bl	80040a2 <TIM_ITRx_SetConfig>
      break;
 8003e2c:	e00c      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4619      	mov	r1, r3
 8003e38:	4610      	mov	r0, r2
 8003e3a:	f000 f932 	bl	80040a2 <TIM_ITRx_SetConfig>
      break;
 8003e3e:	e003      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
      break;
 8003e44:	e000      	b.n	8003e48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bc80      	pop	{r7}
 8003e72:	4770      	bx	lr

08003e74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bc80      	pop	{r7}
 8003e84:	4770      	bx	lr

08003e86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr

08003e98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr
	...

08003eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a3f      	ldr	r2, [pc, #252]	@ (8003fbc <TIM_Base_SetConfig+0x110>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d013      	beq.n	8003eec <TIM_Base_SetConfig+0x40>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eca:	d00f      	beq.n	8003eec <TIM_Base_SetConfig+0x40>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a3c      	ldr	r2, [pc, #240]	@ (8003fc0 <TIM_Base_SetConfig+0x114>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00b      	beq.n	8003eec <TIM_Base_SetConfig+0x40>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a3b      	ldr	r2, [pc, #236]	@ (8003fc4 <TIM_Base_SetConfig+0x118>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d007      	beq.n	8003eec <TIM_Base_SetConfig+0x40>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a3a      	ldr	r2, [pc, #232]	@ (8003fc8 <TIM_Base_SetConfig+0x11c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d003      	beq.n	8003eec <TIM_Base_SetConfig+0x40>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a39      	ldr	r2, [pc, #228]	@ (8003fcc <TIM_Base_SetConfig+0x120>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d108      	bne.n	8003efe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2e      	ldr	r2, [pc, #184]	@ (8003fbc <TIM_Base_SetConfig+0x110>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d02b      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f0c:	d027      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a2b      	ldr	r2, [pc, #172]	@ (8003fc0 <TIM_Base_SetConfig+0x114>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d023      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a2a      	ldr	r2, [pc, #168]	@ (8003fc4 <TIM_Base_SetConfig+0x118>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d01f      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a29      	ldr	r2, [pc, #164]	@ (8003fc8 <TIM_Base_SetConfig+0x11c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d01b      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a28      	ldr	r2, [pc, #160]	@ (8003fcc <TIM_Base_SetConfig+0x120>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d017      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a27      	ldr	r2, [pc, #156]	@ (8003fd0 <TIM_Base_SetConfig+0x124>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d013      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a26      	ldr	r2, [pc, #152]	@ (8003fd4 <TIM_Base_SetConfig+0x128>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d00f      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a25      	ldr	r2, [pc, #148]	@ (8003fd8 <TIM_Base_SetConfig+0x12c>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00b      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a24      	ldr	r2, [pc, #144]	@ (8003fdc <TIM_Base_SetConfig+0x130>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d007      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a23      	ldr	r2, [pc, #140]	@ (8003fe0 <TIM_Base_SetConfig+0x134>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d003      	beq.n	8003f5e <TIM_Base_SetConfig+0xb2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a22      	ldr	r2, [pc, #136]	@ (8003fe4 <TIM_Base_SetConfig+0x138>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d108      	bne.n	8003f70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a09      	ldr	r2, [pc, #36]	@ (8003fbc <TIM_Base_SetConfig+0x110>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d003      	beq.n	8003fa4 <TIM_Base_SetConfig+0xf8>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a0b      	ldr	r2, [pc, #44]	@ (8003fcc <TIM_Base_SetConfig+0x120>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d103      	bne.n	8003fac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	615a      	str	r2, [r3, #20]
}
 8003fb2:	bf00      	nop
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr
 8003fbc:	40010000 	.word	0x40010000
 8003fc0:	40000400 	.word	0x40000400
 8003fc4:	40000800 	.word	0x40000800
 8003fc8:	40000c00 	.word	0x40000c00
 8003fcc:	40010400 	.word	0x40010400
 8003fd0:	40014000 	.word	0x40014000
 8003fd4:	40014400 	.word	0x40014400
 8003fd8:	40014800 	.word	0x40014800
 8003fdc:	40001800 	.word	0x40001800
 8003fe0:	40001c00 	.word	0x40001c00
 8003fe4:	40002000 	.word	0x40002000

08003fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	f023 0201 	bic.w	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f023 030a 	bic.w	r3, r3, #10
 8004024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	bf00      	nop
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr

08004044 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f023 0210 	bic.w	r2, r3, #16
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800406e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	031b      	lsls	r3, r3, #12
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004080:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	621a      	str	r2, [r3, #32]
}
 8004098:	bf00      	nop
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr

080040a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b085      	sub	sp, #20
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	f043 0307 	orr.w	r3, r3, #7
 80040c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	609a      	str	r2, [r3, #8]
}
 80040cc:	bf00      	nop
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr

080040d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b087      	sub	sp, #28
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	607a      	str	r2, [r7, #4]
 80040e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	021a      	lsls	r2, r3, #8
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	431a      	orrs	r2, r3
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4313      	orrs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	609a      	str	r2, [r3, #8]
}
 800410a:	bf00      	nop
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr

08004114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004128:	2302      	movs	r3, #2
 800412a:	e05a      	b.n	80041e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004152:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a20      	ldr	r2, [pc, #128]	@ (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d022      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004178:	d01d      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a1c      	ldr	r2, [pc, #112]	@ (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d018      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a1a      	ldr	r2, [pc, #104]	@ (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d013      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a19      	ldr	r2, [pc, #100]	@ (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00e      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a17      	ldr	r2, [pc, #92]	@ (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d009      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a16      	ldr	r2, [pc, #88]	@ (8004200 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d004      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a14      	ldr	r2, [pc, #80]	@ (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d10c      	bne.n	80041d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr
 80041ec:	40010000 	.word	0x40010000
 80041f0:	40000400 	.word	0x40000400
 80041f4:	40000800 	.word	0x40000800
 80041f8:	40000c00 	.word	0x40000c00
 80041fc:	40010400 	.word	0x40010400
 8004200:	40014000 	.word	0x40014000
 8004204:	40001800 	.word	0x40001800

08004208 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr

0800421a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr

0800422c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800422c:	b084      	sub	sp, #16
 800422e:	b580      	push	{r7, lr}
 8004230:	b084      	sub	sp, #16
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	f107 001c 	add.w	r0, r7, #28
 800423a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800423e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004240:	2b01      	cmp	r3, #1
 8004242:	d122      	bne.n	800428a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004248:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004258:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800426c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800426e:	2b01      	cmp	r3, #1
 8004270:	d105      	bne.n	800427e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fa8c 	bl	800479c <USB_CoreReset>
 8004284:	4603      	mov	r3, r0
 8004286:	73fb      	strb	r3, [r7, #15]
 8004288:	e010      	b.n	80042ac <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 fa80 	bl	800479c <USB_CoreReset>
 800429c:	4603      	mov	r3, r0
 800429e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80042ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d10b      	bne.n	80042ca <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f043 0206 	orr.w	r2, r3, #6
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f043 0220 	orr.w	r2, r3, #32
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042d6:	b004      	add	sp, #16
 80042d8:	4770      	bx	lr

080042da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f023 0201 	bic.w	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr

080042fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b084      	sub	sp, #16
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
 8004302:	460b      	mov	r3, r1
 8004304:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004316:	78fb      	ldrb	r3, [r7, #3]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d115      	bne.n	8004348 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004328:	2001      	movs	r0, #1
 800432a:	f7fd fcd1 	bl	8001cd0 <HAL_Delay>
      ms++;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3301      	adds	r3, #1
 8004332:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 fa23 	bl	8004780 <USB_GetMode>
 800433a:	4603      	mov	r3, r0
 800433c:	2b01      	cmp	r3, #1
 800433e:	d01e      	beq.n	800437e <USB_SetCurrentMode+0x84>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2b31      	cmp	r3, #49	@ 0x31
 8004344:	d9f0      	bls.n	8004328 <USB_SetCurrentMode+0x2e>
 8004346:	e01a      	b.n	800437e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d115      	bne.n	800437a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800435a:	2001      	movs	r0, #1
 800435c:	f7fd fcb8 	bl	8001cd0 <HAL_Delay>
      ms++;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	3301      	adds	r3, #1
 8004364:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 fa0a 	bl	8004780 <USB_GetMode>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d005      	beq.n	800437e <USB_SetCurrentMode+0x84>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b31      	cmp	r3, #49	@ 0x31
 8004376:	d9f0      	bls.n	800435a <USB_SetCurrentMode+0x60>
 8004378:	e001      	b.n	800437e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e005      	b.n	800438a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b32      	cmp	r3, #50	@ 0x32
 8004382:	d101      	bne.n	8004388 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e000      	b.n	800438a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004394:	b084      	sub	sp, #16
 8004396:	b580      	push	{r7, lr}
 8004398:	b086      	sub	sp, #24
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80043a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043ae:	2300      	movs	r3, #0
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	e009      	b.n	80043c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	3340      	adds	r3, #64	@ 0x40
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	2200      	movs	r2, #0
 80043c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	3301      	adds	r3, #1
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	2b0e      	cmp	r3, #14
 80043cc:	d9f2      	bls.n	80043b4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80043ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d11c      	bne.n	800440e <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043e2:	f043 0302 	orr.w	r3, r3, #2
 80043e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f8:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004404:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	639a      	str	r2, [r3, #56]	@ 0x38
 800440c:	e00b      	b.n	8004426 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004412:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800442c:	461a      	mov	r2, r3
 800442e:	2300      	movs	r3, #0
 8004430:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004434:	2b01      	cmp	r3, #1
 8004436:	d10c      	bne.n	8004452 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443a:	2b00      	cmp	r3, #0
 800443c:	d104      	bne.n	8004448 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800443e:	2100      	movs	r1, #0
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f965 	bl	8004710 <USB_SetDevSpeed>
 8004446:	e008      	b.n	800445a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004448:	2101      	movs	r1, #1
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f960 	bl	8004710 <USB_SetDevSpeed>
 8004450:	e003      	b.n	800445a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004452:	2103      	movs	r1, #3
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f95b 	bl	8004710 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800445a:	2110      	movs	r1, #16
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f8f3 	bl	8004648 <USB_FlushTxFifo>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f91f 	bl	80046b0 <USB_FlushRxFifo>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004482:	461a      	mov	r2, r3
 8004484:	2300      	movs	r3, #0
 8004486:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800448e:	461a      	mov	r2, r3
 8004490:	2300      	movs	r3, #0
 8004492:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800449a:	461a      	mov	r2, r3
 800449c:	2300      	movs	r3, #0
 800449e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044a0:	2300      	movs	r3, #0
 80044a2:	613b      	str	r3, [r7, #16]
 80044a4:	e043      	b.n	800452e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044bc:	d118      	bne.n	80044f0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10a      	bne.n	80044da <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044d0:	461a      	mov	r2, r3
 80044d2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	e013      	b.n	8004502 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	015a      	lsls	r2, r3, #5
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044e6:	461a      	mov	r2, r3
 80044e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	e008      	b.n	8004502 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044fc:	461a      	mov	r2, r3
 80044fe:	2300      	movs	r3, #0
 8004500:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4413      	add	r3, r2
 800450a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800450e:	461a      	mov	r2, r3
 8004510:	2300      	movs	r3, #0
 8004512:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004520:	461a      	mov	r2, r3
 8004522:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004526:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	3301      	adds	r3, #1
 800452c:	613b      	str	r3, [r7, #16]
 800452e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	429a      	cmp	r2, r3
 8004534:	d3b7      	bcc.n	80044a6 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004536:	2300      	movs	r3, #0
 8004538:	613b      	str	r3, [r7, #16]
 800453a:	e043      	b.n	80045c4 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4413      	add	r3, r2
 8004544:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800454e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004552:	d118      	bne.n	8004586 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10a      	bne.n	8004570 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004566:	461a      	mov	r2, r3
 8004568:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	e013      	b.n	8004598 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800457c:	461a      	mov	r2, r3
 800457e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004582:	6013      	str	r3, [r2, #0]
 8004584:	e008      	b.n	8004598 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004592:	461a      	mov	r2, r3
 8004594:	2300      	movs	r3, #0
 8004596:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045a4:	461a      	mov	r2, r3
 80045a6:	2300      	movs	r3, #0
 80045a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045b6:	461a      	mov	r2, r3
 80045b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80045bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	3301      	adds	r3, #1
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d3b7      	bcc.n	800453c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80045ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80045ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d105      	bne.n	8004600 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	f043 0210 	orr.w	r2, r3, #16
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699a      	ldr	r2, [r3, #24]
 8004604:	4b0f      	ldr	r3, [pc, #60]	@ (8004644 <USB_DevInit+0x2b0>)
 8004606:	4313      	orrs	r3, r2
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800460c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	f043 0208 	orr.w	r2, r3, #8
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800461e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004620:	2b01      	cmp	r3, #1
 8004622:	d107      	bne.n	8004634 <USB_DevInit+0x2a0>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800462c:	f043 0304 	orr.w	r3, r3, #4
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004634:	7dfb      	ldrb	r3, [r7, #23]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004640:	b004      	add	sp, #16
 8004642:	4770      	bx	lr
 8004644:	803c3800 	.word	0x803c3800

08004648 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	3301      	adds	r3, #1
 800465a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4a13      	ldr	r2, [pc, #76]	@ (80046ac <USB_FlushTxFifo+0x64>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d901      	bls.n	8004668 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e01b      	b.n	80046a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	2b00      	cmp	r3, #0
 800466e:	daf2      	bge.n	8004656 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	019b      	lsls	r3, r3, #6
 8004678:	f043 0220 	orr.w	r2, r3, #32
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	3301      	adds	r3, #1
 8004684:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4a08      	ldr	r2, [pc, #32]	@ (80046ac <USB_FlushTxFifo+0x64>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d901      	bls.n	8004692 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e006      	b.n	80046a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b20      	cmp	r3, #32
 800469c:	d0f0      	beq.n	8004680 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	00030d40 	.word	0x00030d40

080046b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	3301      	adds	r3, #1
 80046c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4a11      	ldr	r2, [pc, #68]	@ (800470c <USB_FlushRxFifo+0x5c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d901      	bls.n	80046ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e018      	b.n	8004700 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	daf2      	bge.n	80046bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80046d6:	2300      	movs	r3, #0
 80046d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2210      	movs	r2, #16
 80046de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	3301      	adds	r3, #1
 80046e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4a08      	ldr	r2, [pc, #32]	@ (800470c <USB_FlushRxFifo+0x5c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d901      	bls.n	80046f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e006      	b.n	8004700 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f003 0310 	and.w	r3, r3, #16
 80046fa:	2b10      	cmp	r3, #16
 80046fc:	d0f0      	beq.n	80046e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	bc80      	pop	{r7}
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	00030d40 	.word	0x00030d40

08004710 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	68f9      	ldr	r1, [r7, #12]
 800472c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004730:	4313      	orrs	r3, r2
 8004732:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr

08004740 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800475a:	f023 0303 	bic.w	r3, r3, #3
 800475e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800476e:	f043 0302 	orr.w	r3, r3, #2
 8004772:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr

08004780 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	f003 0301 	and.w	r3, r3, #1
}
 8004790:	4618      	mov	r0, r3
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	bc80      	pop	{r7}
 8004798:	4770      	bx	lr
	...

0800479c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047a4:	2300      	movs	r3, #0
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3301      	adds	r3, #1
 80047ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	4a12      	ldr	r2, [pc, #72]	@ (80047fc <USB_CoreReset+0x60>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d901      	bls.n	80047ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e01b      	b.n	80047f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	daf2      	bge.n	80047a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	f043 0201 	orr.w	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	3301      	adds	r3, #1
 80047d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4a08      	ldr	r2, [pc, #32]	@ (80047fc <USB_CoreReset+0x60>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d901      	bls.n	80047e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e006      	b.n	80047f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d0f0      	beq.n	80047d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr
 80047fc:	00030d40 	.word	0x00030d40

08004800 <malloc>:
 8004800:	4b02      	ldr	r3, [pc, #8]	@ (800480c <malloc+0xc>)
 8004802:	4601      	mov	r1, r0
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	f000 b825 	b.w	8004854 <_malloc_r>
 800480a:	bf00      	nop
 800480c:	20000078 	.word	0x20000078

08004810 <sbrk_aligned>:
 8004810:	b570      	push	{r4, r5, r6, lr}
 8004812:	4e0f      	ldr	r6, [pc, #60]	@ (8004850 <sbrk_aligned+0x40>)
 8004814:	460c      	mov	r4, r1
 8004816:	6831      	ldr	r1, [r6, #0]
 8004818:	4605      	mov	r5, r0
 800481a:	b911      	cbnz	r1, 8004822 <sbrk_aligned+0x12>
 800481c:	f000 fe48 	bl	80054b0 <_sbrk_r>
 8004820:	6030      	str	r0, [r6, #0]
 8004822:	4621      	mov	r1, r4
 8004824:	4628      	mov	r0, r5
 8004826:	f000 fe43 	bl	80054b0 <_sbrk_r>
 800482a:	1c43      	adds	r3, r0, #1
 800482c:	d103      	bne.n	8004836 <sbrk_aligned+0x26>
 800482e:	f04f 34ff 	mov.w	r4, #4294967295
 8004832:	4620      	mov	r0, r4
 8004834:	bd70      	pop	{r4, r5, r6, pc}
 8004836:	1cc4      	adds	r4, r0, #3
 8004838:	f024 0403 	bic.w	r4, r4, #3
 800483c:	42a0      	cmp	r0, r4
 800483e:	d0f8      	beq.n	8004832 <sbrk_aligned+0x22>
 8004840:	1a21      	subs	r1, r4, r0
 8004842:	4628      	mov	r0, r5
 8004844:	f000 fe34 	bl	80054b0 <_sbrk_r>
 8004848:	3001      	adds	r0, #1
 800484a:	d1f2      	bne.n	8004832 <sbrk_aligned+0x22>
 800484c:	e7ef      	b.n	800482e <sbrk_aligned+0x1e>
 800484e:	bf00      	nop
 8004850:	20000910 	.word	0x20000910

08004854 <_malloc_r>:
 8004854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004858:	1ccd      	adds	r5, r1, #3
 800485a:	f025 0503 	bic.w	r5, r5, #3
 800485e:	3508      	adds	r5, #8
 8004860:	2d0c      	cmp	r5, #12
 8004862:	bf38      	it	cc
 8004864:	250c      	movcc	r5, #12
 8004866:	2d00      	cmp	r5, #0
 8004868:	4606      	mov	r6, r0
 800486a:	db01      	blt.n	8004870 <_malloc_r+0x1c>
 800486c:	42a9      	cmp	r1, r5
 800486e:	d904      	bls.n	800487a <_malloc_r+0x26>
 8004870:	230c      	movs	r3, #12
 8004872:	6033      	str	r3, [r6, #0]
 8004874:	2000      	movs	r0, #0
 8004876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800487a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004950 <_malloc_r+0xfc>
 800487e:	f000 f869 	bl	8004954 <__malloc_lock>
 8004882:	f8d8 3000 	ldr.w	r3, [r8]
 8004886:	461c      	mov	r4, r3
 8004888:	bb44      	cbnz	r4, 80048dc <_malloc_r+0x88>
 800488a:	4629      	mov	r1, r5
 800488c:	4630      	mov	r0, r6
 800488e:	f7ff ffbf 	bl	8004810 <sbrk_aligned>
 8004892:	1c43      	adds	r3, r0, #1
 8004894:	4604      	mov	r4, r0
 8004896:	d158      	bne.n	800494a <_malloc_r+0xf6>
 8004898:	f8d8 4000 	ldr.w	r4, [r8]
 800489c:	4627      	mov	r7, r4
 800489e:	2f00      	cmp	r7, #0
 80048a0:	d143      	bne.n	800492a <_malloc_r+0xd6>
 80048a2:	2c00      	cmp	r4, #0
 80048a4:	d04b      	beq.n	800493e <_malloc_r+0xea>
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	4639      	mov	r1, r7
 80048aa:	4630      	mov	r0, r6
 80048ac:	eb04 0903 	add.w	r9, r4, r3
 80048b0:	f000 fdfe 	bl	80054b0 <_sbrk_r>
 80048b4:	4581      	cmp	r9, r0
 80048b6:	d142      	bne.n	800493e <_malloc_r+0xea>
 80048b8:	6821      	ldr	r1, [r4, #0]
 80048ba:	4630      	mov	r0, r6
 80048bc:	1a6d      	subs	r5, r5, r1
 80048be:	4629      	mov	r1, r5
 80048c0:	f7ff ffa6 	bl	8004810 <sbrk_aligned>
 80048c4:	3001      	adds	r0, #1
 80048c6:	d03a      	beq.n	800493e <_malloc_r+0xea>
 80048c8:	6823      	ldr	r3, [r4, #0]
 80048ca:	442b      	add	r3, r5
 80048cc:	6023      	str	r3, [r4, #0]
 80048ce:	f8d8 3000 	ldr.w	r3, [r8]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	bb62      	cbnz	r2, 8004930 <_malloc_r+0xdc>
 80048d6:	f8c8 7000 	str.w	r7, [r8]
 80048da:	e00f      	b.n	80048fc <_malloc_r+0xa8>
 80048dc:	6822      	ldr	r2, [r4, #0]
 80048de:	1b52      	subs	r2, r2, r5
 80048e0:	d420      	bmi.n	8004924 <_malloc_r+0xd0>
 80048e2:	2a0b      	cmp	r2, #11
 80048e4:	d917      	bls.n	8004916 <_malloc_r+0xc2>
 80048e6:	1961      	adds	r1, r4, r5
 80048e8:	42a3      	cmp	r3, r4
 80048ea:	6025      	str	r5, [r4, #0]
 80048ec:	bf18      	it	ne
 80048ee:	6059      	strne	r1, [r3, #4]
 80048f0:	6863      	ldr	r3, [r4, #4]
 80048f2:	bf08      	it	eq
 80048f4:	f8c8 1000 	streq.w	r1, [r8]
 80048f8:	5162      	str	r2, [r4, r5]
 80048fa:	604b      	str	r3, [r1, #4]
 80048fc:	4630      	mov	r0, r6
 80048fe:	f000 f82f 	bl	8004960 <__malloc_unlock>
 8004902:	f104 000b 	add.w	r0, r4, #11
 8004906:	1d23      	adds	r3, r4, #4
 8004908:	f020 0007 	bic.w	r0, r0, #7
 800490c:	1ac2      	subs	r2, r0, r3
 800490e:	bf1c      	itt	ne
 8004910:	1a1b      	subne	r3, r3, r0
 8004912:	50a3      	strne	r3, [r4, r2]
 8004914:	e7af      	b.n	8004876 <_malloc_r+0x22>
 8004916:	6862      	ldr	r2, [r4, #4]
 8004918:	42a3      	cmp	r3, r4
 800491a:	bf0c      	ite	eq
 800491c:	f8c8 2000 	streq.w	r2, [r8]
 8004920:	605a      	strne	r2, [r3, #4]
 8004922:	e7eb      	b.n	80048fc <_malloc_r+0xa8>
 8004924:	4623      	mov	r3, r4
 8004926:	6864      	ldr	r4, [r4, #4]
 8004928:	e7ae      	b.n	8004888 <_malloc_r+0x34>
 800492a:	463c      	mov	r4, r7
 800492c:	687f      	ldr	r7, [r7, #4]
 800492e:	e7b6      	b.n	800489e <_malloc_r+0x4a>
 8004930:	461a      	mov	r2, r3
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	42a3      	cmp	r3, r4
 8004936:	d1fb      	bne.n	8004930 <_malloc_r+0xdc>
 8004938:	2300      	movs	r3, #0
 800493a:	6053      	str	r3, [r2, #4]
 800493c:	e7de      	b.n	80048fc <_malloc_r+0xa8>
 800493e:	230c      	movs	r3, #12
 8004940:	4630      	mov	r0, r6
 8004942:	6033      	str	r3, [r6, #0]
 8004944:	f000 f80c 	bl	8004960 <__malloc_unlock>
 8004948:	e794      	b.n	8004874 <_malloc_r+0x20>
 800494a:	6005      	str	r5, [r0, #0]
 800494c:	e7d6      	b.n	80048fc <_malloc_r+0xa8>
 800494e:	bf00      	nop
 8004950:	20000914 	.word	0x20000914

08004954 <__malloc_lock>:
 8004954:	4801      	ldr	r0, [pc, #4]	@ (800495c <__malloc_lock+0x8>)
 8004956:	f000 bdf8 	b.w	800554a <__retarget_lock_acquire_recursive>
 800495a:	bf00      	nop
 800495c:	20000a58 	.word	0x20000a58

08004960 <__malloc_unlock>:
 8004960:	4801      	ldr	r0, [pc, #4]	@ (8004968 <__malloc_unlock+0x8>)
 8004962:	f000 bdf3 	b.w	800554c <__retarget_lock_release_recursive>
 8004966:	bf00      	nop
 8004968:	20000a58 	.word	0x20000a58

0800496c <__cvt>:
 800496c:	2b00      	cmp	r3, #0
 800496e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004972:	461d      	mov	r5, r3
 8004974:	bfbb      	ittet	lt
 8004976:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800497a:	461d      	movlt	r5, r3
 800497c:	2300      	movge	r3, #0
 800497e:	232d      	movlt	r3, #45	@ 0x2d
 8004980:	b088      	sub	sp, #32
 8004982:	4614      	mov	r4, r2
 8004984:	bfb8      	it	lt
 8004986:	4614      	movlt	r4, r2
 8004988:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800498a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800498c:	7013      	strb	r3, [r2, #0]
 800498e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004990:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004994:	f023 0820 	bic.w	r8, r3, #32
 8004998:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800499c:	d005      	beq.n	80049aa <__cvt+0x3e>
 800499e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80049a2:	d100      	bne.n	80049a6 <__cvt+0x3a>
 80049a4:	3601      	adds	r6, #1
 80049a6:	2302      	movs	r3, #2
 80049a8:	e000      	b.n	80049ac <__cvt+0x40>
 80049aa:	2303      	movs	r3, #3
 80049ac:	aa07      	add	r2, sp, #28
 80049ae:	9204      	str	r2, [sp, #16]
 80049b0:	aa06      	add	r2, sp, #24
 80049b2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80049b6:	e9cd 3600 	strd	r3, r6, [sp]
 80049ba:	4622      	mov	r2, r4
 80049bc:	462b      	mov	r3, r5
 80049be:	f000 fe5f 	bl	8005680 <_dtoa_r>
 80049c2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80049c6:	4607      	mov	r7, r0
 80049c8:	d119      	bne.n	80049fe <__cvt+0x92>
 80049ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80049cc:	07db      	lsls	r3, r3, #31
 80049ce:	d50e      	bpl.n	80049ee <__cvt+0x82>
 80049d0:	eb00 0906 	add.w	r9, r0, r6
 80049d4:	2200      	movs	r2, #0
 80049d6:	2300      	movs	r3, #0
 80049d8:	4620      	mov	r0, r4
 80049da:	4629      	mov	r1, r5
 80049dc:	f7fc f820 	bl	8000a20 <__aeabi_dcmpeq>
 80049e0:	b108      	cbz	r0, 80049e6 <__cvt+0x7a>
 80049e2:	f8cd 901c 	str.w	r9, [sp, #28]
 80049e6:	2230      	movs	r2, #48	@ 0x30
 80049e8:	9b07      	ldr	r3, [sp, #28]
 80049ea:	454b      	cmp	r3, r9
 80049ec:	d31e      	bcc.n	8004a2c <__cvt+0xc0>
 80049ee:	4638      	mov	r0, r7
 80049f0:	9b07      	ldr	r3, [sp, #28]
 80049f2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80049f4:	1bdb      	subs	r3, r3, r7
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	b008      	add	sp, #32
 80049fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049fe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a02:	eb00 0906 	add.w	r9, r0, r6
 8004a06:	d1e5      	bne.n	80049d4 <__cvt+0x68>
 8004a08:	7803      	ldrb	r3, [r0, #0]
 8004a0a:	2b30      	cmp	r3, #48	@ 0x30
 8004a0c:	d10a      	bne.n	8004a24 <__cvt+0xb8>
 8004a0e:	2200      	movs	r2, #0
 8004a10:	2300      	movs	r3, #0
 8004a12:	4620      	mov	r0, r4
 8004a14:	4629      	mov	r1, r5
 8004a16:	f7fc f803 	bl	8000a20 <__aeabi_dcmpeq>
 8004a1a:	b918      	cbnz	r0, 8004a24 <__cvt+0xb8>
 8004a1c:	f1c6 0601 	rsb	r6, r6, #1
 8004a20:	f8ca 6000 	str.w	r6, [sl]
 8004a24:	f8da 3000 	ldr.w	r3, [sl]
 8004a28:	4499      	add	r9, r3
 8004a2a:	e7d3      	b.n	80049d4 <__cvt+0x68>
 8004a2c:	1c59      	adds	r1, r3, #1
 8004a2e:	9107      	str	r1, [sp, #28]
 8004a30:	701a      	strb	r2, [r3, #0]
 8004a32:	e7d9      	b.n	80049e8 <__cvt+0x7c>

08004a34 <__exponent>:
 8004a34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a36:	2900      	cmp	r1, #0
 8004a38:	bfb6      	itet	lt
 8004a3a:	232d      	movlt	r3, #45	@ 0x2d
 8004a3c:	232b      	movge	r3, #43	@ 0x2b
 8004a3e:	4249      	neglt	r1, r1
 8004a40:	2909      	cmp	r1, #9
 8004a42:	7002      	strb	r2, [r0, #0]
 8004a44:	7043      	strb	r3, [r0, #1]
 8004a46:	dd29      	ble.n	8004a9c <__exponent+0x68>
 8004a48:	f10d 0307 	add.w	r3, sp, #7
 8004a4c:	461d      	mov	r5, r3
 8004a4e:	270a      	movs	r7, #10
 8004a50:	fbb1 f6f7 	udiv	r6, r1, r7
 8004a54:	461a      	mov	r2, r3
 8004a56:	fb07 1416 	mls	r4, r7, r6, r1
 8004a5a:	3430      	adds	r4, #48	@ 0x30
 8004a5c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004a60:	460c      	mov	r4, r1
 8004a62:	2c63      	cmp	r4, #99	@ 0x63
 8004a64:	4631      	mov	r1, r6
 8004a66:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a6a:	dcf1      	bgt.n	8004a50 <__exponent+0x1c>
 8004a6c:	3130      	adds	r1, #48	@ 0x30
 8004a6e:	1e94      	subs	r4, r2, #2
 8004a70:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a74:	4623      	mov	r3, r4
 8004a76:	1c41      	adds	r1, r0, #1
 8004a78:	42ab      	cmp	r3, r5
 8004a7a:	d30a      	bcc.n	8004a92 <__exponent+0x5e>
 8004a7c:	f10d 0309 	add.w	r3, sp, #9
 8004a80:	1a9b      	subs	r3, r3, r2
 8004a82:	42ac      	cmp	r4, r5
 8004a84:	bf88      	it	hi
 8004a86:	2300      	movhi	r3, #0
 8004a88:	3302      	adds	r3, #2
 8004a8a:	4403      	add	r3, r0
 8004a8c:	1a18      	subs	r0, r3, r0
 8004a8e:	b003      	add	sp, #12
 8004a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a92:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004a96:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004a9a:	e7ed      	b.n	8004a78 <__exponent+0x44>
 8004a9c:	2330      	movs	r3, #48	@ 0x30
 8004a9e:	3130      	adds	r1, #48	@ 0x30
 8004aa0:	7083      	strb	r3, [r0, #2]
 8004aa2:	70c1      	strb	r1, [r0, #3]
 8004aa4:	1d03      	adds	r3, r0, #4
 8004aa6:	e7f1      	b.n	8004a8c <__exponent+0x58>

08004aa8 <_printf_float>:
 8004aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aac:	b091      	sub	sp, #68	@ 0x44
 8004aae:	460c      	mov	r4, r1
 8004ab0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004ab4:	4616      	mov	r6, r2
 8004ab6:	461f      	mov	r7, r3
 8004ab8:	4605      	mov	r5, r0
 8004aba:	f000 fcc1 	bl	8005440 <_localeconv_r>
 8004abe:	6803      	ldr	r3, [r0, #0]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	9308      	str	r3, [sp, #32]
 8004ac4:	f7fb fb80 	bl	80001c8 <strlen>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	930e      	str	r3, [sp, #56]	@ 0x38
 8004acc:	f8d8 3000 	ldr.w	r3, [r8]
 8004ad0:	9009      	str	r0, [sp, #36]	@ 0x24
 8004ad2:	3307      	adds	r3, #7
 8004ad4:	f023 0307 	bic.w	r3, r3, #7
 8004ad8:	f103 0208 	add.w	r2, r3, #8
 8004adc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004ae0:	f8d4 b000 	ldr.w	fp, [r4]
 8004ae4:	f8c8 2000 	str.w	r2, [r8]
 8004ae8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004aec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004af0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004af2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004af6:	f04f 32ff 	mov.w	r2, #4294967295
 8004afa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004afe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004b02:	4b9c      	ldr	r3, [pc, #624]	@ (8004d74 <_printf_float+0x2cc>)
 8004b04:	f7fb ffbe 	bl	8000a84 <__aeabi_dcmpun>
 8004b08:	bb70      	cbnz	r0, 8004b68 <_printf_float+0xc0>
 8004b0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b12:	4b98      	ldr	r3, [pc, #608]	@ (8004d74 <_printf_float+0x2cc>)
 8004b14:	f7fb ff98 	bl	8000a48 <__aeabi_dcmple>
 8004b18:	bb30      	cbnz	r0, 8004b68 <_printf_float+0xc0>
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	4640      	mov	r0, r8
 8004b20:	4649      	mov	r1, r9
 8004b22:	f7fb ff87 	bl	8000a34 <__aeabi_dcmplt>
 8004b26:	b110      	cbz	r0, 8004b2e <_printf_float+0x86>
 8004b28:	232d      	movs	r3, #45	@ 0x2d
 8004b2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b2e:	4a92      	ldr	r2, [pc, #584]	@ (8004d78 <_printf_float+0x2d0>)
 8004b30:	4b92      	ldr	r3, [pc, #584]	@ (8004d7c <_printf_float+0x2d4>)
 8004b32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004b36:	bf94      	ite	ls
 8004b38:	4690      	movls	r8, r2
 8004b3a:	4698      	movhi	r8, r3
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	f04f 0900 	mov.w	r9, #0
 8004b42:	6123      	str	r3, [r4, #16]
 8004b44:	f02b 0304 	bic.w	r3, fp, #4
 8004b48:	6023      	str	r3, [r4, #0]
 8004b4a:	4633      	mov	r3, r6
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	4628      	mov	r0, r5
 8004b50:	9700      	str	r7, [sp, #0]
 8004b52:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004b54:	f000 f9d4 	bl	8004f00 <_printf_common>
 8004b58:	3001      	adds	r0, #1
 8004b5a:	f040 8090 	bne.w	8004c7e <_printf_float+0x1d6>
 8004b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b62:	b011      	add	sp, #68	@ 0x44
 8004b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b68:	4642      	mov	r2, r8
 8004b6a:	464b      	mov	r3, r9
 8004b6c:	4640      	mov	r0, r8
 8004b6e:	4649      	mov	r1, r9
 8004b70:	f7fb ff88 	bl	8000a84 <__aeabi_dcmpun>
 8004b74:	b148      	cbz	r0, 8004b8a <_printf_float+0xe2>
 8004b76:	464b      	mov	r3, r9
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bfb8      	it	lt
 8004b7c:	232d      	movlt	r3, #45	@ 0x2d
 8004b7e:	4a80      	ldr	r2, [pc, #512]	@ (8004d80 <_printf_float+0x2d8>)
 8004b80:	bfb8      	it	lt
 8004b82:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004b86:	4b7f      	ldr	r3, [pc, #508]	@ (8004d84 <_printf_float+0x2dc>)
 8004b88:	e7d3      	b.n	8004b32 <_printf_float+0x8a>
 8004b8a:	6863      	ldr	r3, [r4, #4]
 8004b8c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	d13f      	bne.n	8004c14 <_printf_float+0x16c>
 8004b94:	2306      	movs	r3, #6
 8004b96:	6063      	str	r3, [r4, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004b9e:	6023      	str	r3, [r4, #0]
 8004ba0:	9206      	str	r2, [sp, #24]
 8004ba2:	aa0e      	add	r2, sp, #56	@ 0x38
 8004ba4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004ba8:	aa0d      	add	r2, sp, #52	@ 0x34
 8004baa:	9203      	str	r2, [sp, #12]
 8004bac:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004bb0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004bb4:	6863      	ldr	r3, [r4, #4]
 8004bb6:	4642      	mov	r2, r8
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	4628      	mov	r0, r5
 8004bbc:	464b      	mov	r3, r9
 8004bbe:	910a      	str	r1, [sp, #40]	@ 0x28
 8004bc0:	f7ff fed4 	bl	800496c <__cvt>
 8004bc4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004bc6:	4680      	mov	r8, r0
 8004bc8:	2947      	cmp	r1, #71	@ 0x47
 8004bca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004bcc:	d128      	bne.n	8004c20 <_printf_float+0x178>
 8004bce:	1cc8      	adds	r0, r1, #3
 8004bd0:	db02      	blt.n	8004bd8 <_printf_float+0x130>
 8004bd2:	6863      	ldr	r3, [r4, #4]
 8004bd4:	4299      	cmp	r1, r3
 8004bd6:	dd40      	ble.n	8004c5a <_printf_float+0x1b2>
 8004bd8:	f1aa 0a02 	sub.w	sl, sl, #2
 8004bdc:	fa5f fa8a 	uxtb.w	sl, sl
 8004be0:	4652      	mov	r2, sl
 8004be2:	3901      	subs	r1, #1
 8004be4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004be8:	910d      	str	r1, [sp, #52]	@ 0x34
 8004bea:	f7ff ff23 	bl	8004a34 <__exponent>
 8004bee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004bf0:	4681      	mov	r9, r0
 8004bf2:	1813      	adds	r3, r2, r0
 8004bf4:	2a01      	cmp	r2, #1
 8004bf6:	6123      	str	r3, [r4, #16]
 8004bf8:	dc02      	bgt.n	8004c00 <_printf_float+0x158>
 8004bfa:	6822      	ldr	r2, [r4, #0]
 8004bfc:	07d2      	lsls	r2, r2, #31
 8004bfe:	d501      	bpl.n	8004c04 <_printf_float+0x15c>
 8004c00:	3301      	adds	r3, #1
 8004c02:	6123      	str	r3, [r4, #16]
 8004c04:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d09e      	beq.n	8004b4a <_printf_float+0xa2>
 8004c0c:	232d      	movs	r3, #45	@ 0x2d
 8004c0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c12:	e79a      	b.n	8004b4a <_printf_float+0xa2>
 8004c14:	2947      	cmp	r1, #71	@ 0x47
 8004c16:	d1bf      	bne.n	8004b98 <_printf_float+0xf0>
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1bd      	bne.n	8004b98 <_printf_float+0xf0>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e7ba      	b.n	8004b96 <_printf_float+0xee>
 8004c20:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c24:	d9dc      	bls.n	8004be0 <_printf_float+0x138>
 8004c26:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004c2a:	d118      	bne.n	8004c5e <_printf_float+0x1b6>
 8004c2c:	2900      	cmp	r1, #0
 8004c2e:	6863      	ldr	r3, [r4, #4]
 8004c30:	dd0b      	ble.n	8004c4a <_printf_float+0x1a2>
 8004c32:	6121      	str	r1, [r4, #16]
 8004c34:	b913      	cbnz	r3, 8004c3c <_printf_float+0x194>
 8004c36:	6822      	ldr	r2, [r4, #0]
 8004c38:	07d0      	lsls	r0, r2, #31
 8004c3a:	d502      	bpl.n	8004c42 <_printf_float+0x19a>
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	440b      	add	r3, r1
 8004c40:	6123      	str	r3, [r4, #16]
 8004c42:	f04f 0900 	mov.w	r9, #0
 8004c46:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004c48:	e7dc      	b.n	8004c04 <_printf_float+0x15c>
 8004c4a:	b913      	cbnz	r3, 8004c52 <_printf_float+0x1aa>
 8004c4c:	6822      	ldr	r2, [r4, #0]
 8004c4e:	07d2      	lsls	r2, r2, #31
 8004c50:	d501      	bpl.n	8004c56 <_printf_float+0x1ae>
 8004c52:	3302      	adds	r3, #2
 8004c54:	e7f4      	b.n	8004c40 <_printf_float+0x198>
 8004c56:	2301      	movs	r3, #1
 8004c58:	e7f2      	b.n	8004c40 <_printf_float+0x198>
 8004c5a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004c5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004c60:	4299      	cmp	r1, r3
 8004c62:	db05      	blt.n	8004c70 <_printf_float+0x1c8>
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	6121      	str	r1, [r4, #16]
 8004c68:	07d8      	lsls	r0, r3, #31
 8004c6a:	d5ea      	bpl.n	8004c42 <_printf_float+0x19a>
 8004c6c:	1c4b      	adds	r3, r1, #1
 8004c6e:	e7e7      	b.n	8004c40 <_printf_float+0x198>
 8004c70:	2900      	cmp	r1, #0
 8004c72:	bfcc      	ite	gt
 8004c74:	2201      	movgt	r2, #1
 8004c76:	f1c1 0202 	rsble	r2, r1, #2
 8004c7a:	4413      	add	r3, r2
 8004c7c:	e7e0      	b.n	8004c40 <_printf_float+0x198>
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	055a      	lsls	r2, r3, #21
 8004c82:	d407      	bmi.n	8004c94 <_printf_float+0x1ec>
 8004c84:	6923      	ldr	r3, [r4, #16]
 8004c86:	4642      	mov	r2, r8
 8004c88:	4631      	mov	r1, r6
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	47b8      	blx	r7
 8004c8e:	3001      	adds	r0, #1
 8004c90:	d12b      	bne.n	8004cea <_printf_float+0x242>
 8004c92:	e764      	b.n	8004b5e <_printf_float+0xb6>
 8004c94:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c98:	f240 80dc 	bls.w	8004e54 <_printf_float+0x3ac>
 8004c9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	f7fb febc 	bl	8000a20 <__aeabi_dcmpeq>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	d033      	beq.n	8004d14 <_printf_float+0x26c>
 8004cac:	2301      	movs	r3, #1
 8004cae:	4631      	mov	r1, r6
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	4a35      	ldr	r2, [pc, #212]	@ (8004d88 <_printf_float+0x2e0>)
 8004cb4:	47b8      	blx	r7
 8004cb6:	3001      	adds	r0, #1
 8004cb8:	f43f af51 	beq.w	8004b5e <_printf_float+0xb6>
 8004cbc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004cc0:	4543      	cmp	r3, r8
 8004cc2:	db02      	blt.n	8004cca <_printf_float+0x222>
 8004cc4:	6823      	ldr	r3, [r4, #0]
 8004cc6:	07d8      	lsls	r0, r3, #31
 8004cc8:	d50f      	bpl.n	8004cea <_printf_float+0x242>
 8004cca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004cce:	4631      	mov	r1, r6
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	47b8      	blx	r7
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	f43f af42 	beq.w	8004b5e <_printf_float+0xb6>
 8004cda:	f04f 0900 	mov.w	r9, #0
 8004cde:	f108 38ff 	add.w	r8, r8, #4294967295
 8004ce2:	f104 0a1a 	add.w	sl, r4, #26
 8004ce6:	45c8      	cmp	r8, r9
 8004ce8:	dc09      	bgt.n	8004cfe <_printf_float+0x256>
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	079b      	lsls	r3, r3, #30
 8004cee:	f100 8102 	bmi.w	8004ef6 <_printf_float+0x44e>
 8004cf2:	68e0      	ldr	r0, [r4, #12]
 8004cf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004cf6:	4298      	cmp	r0, r3
 8004cf8:	bfb8      	it	lt
 8004cfa:	4618      	movlt	r0, r3
 8004cfc:	e731      	b.n	8004b62 <_printf_float+0xba>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	4652      	mov	r2, sl
 8004d02:	4631      	mov	r1, r6
 8004d04:	4628      	mov	r0, r5
 8004d06:	47b8      	blx	r7
 8004d08:	3001      	adds	r0, #1
 8004d0a:	f43f af28 	beq.w	8004b5e <_printf_float+0xb6>
 8004d0e:	f109 0901 	add.w	r9, r9, #1
 8004d12:	e7e8      	b.n	8004ce6 <_printf_float+0x23e>
 8004d14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	dc38      	bgt.n	8004d8c <_printf_float+0x2e4>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	4631      	mov	r1, r6
 8004d1e:	4628      	mov	r0, r5
 8004d20:	4a19      	ldr	r2, [pc, #100]	@ (8004d88 <_printf_float+0x2e0>)
 8004d22:	47b8      	blx	r7
 8004d24:	3001      	adds	r0, #1
 8004d26:	f43f af1a 	beq.w	8004b5e <_printf_float+0xb6>
 8004d2a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004d2e:	ea59 0303 	orrs.w	r3, r9, r3
 8004d32:	d102      	bne.n	8004d3a <_printf_float+0x292>
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	07d9      	lsls	r1, r3, #31
 8004d38:	d5d7      	bpl.n	8004cea <_printf_float+0x242>
 8004d3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d3e:	4631      	mov	r1, r6
 8004d40:	4628      	mov	r0, r5
 8004d42:	47b8      	blx	r7
 8004d44:	3001      	adds	r0, #1
 8004d46:	f43f af0a 	beq.w	8004b5e <_printf_float+0xb6>
 8004d4a:	f04f 0a00 	mov.w	sl, #0
 8004d4e:	f104 0b1a 	add.w	fp, r4, #26
 8004d52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d54:	425b      	negs	r3, r3
 8004d56:	4553      	cmp	r3, sl
 8004d58:	dc01      	bgt.n	8004d5e <_printf_float+0x2b6>
 8004d5a:	464b      	mov	r3, r9
 8004d5c:	e793      	b.n	8004c86 <_printf_float+0x1de>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	465a      	mov	r2, fp
 8004d62:	4631      	mov	r1, r6
 8004d64:	4628      	mov	r0, r5
 8004d66:	47b8      	blx	r7
 8004d68:	3001      	adds	r0, #1
 8004d6a:	f43f aef8 	beq.w	8004b5e <_printf_float+0xb6>
 8004d6e:	f10a 0a01 	add.w	sl, sl, #1
 8004d72:	e7ee      	b.n	8004d52 <_printf_float+0x2aa>
 8004d74:	7fefffff 	.word	0x7fefffff
 8004d78:	08007148 	.word	0x08007148
 8004d7c:	0800714c 	.word	0x0800714c
 8004d80:	08007150 	.word	0x08007150
 8004d84:	08007154 	.word	0x08007154
 8004d88:	08007158 	.word	0x08007158
 8004d8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d8e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004d92:	4553      	cmp	r3, sl
 8004d94:	bfa8      	it	ge
 8004d96:	4653      	movge	r3, sl
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	4699      	mov	r9, r3
 8004d9c:	dc36      	bgt.n	8004e0c <_printf_float+0x364>
 8004d9e:	f04f 0b00 	mov.w	fp, #0
 8004da2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004da6:	f104 021a 	add.w	r2, r4, #26
 8004daa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004dac:	930a      	str	r3, [sp, #40]	@ 0x28
 8004dae:	eba3 0309 	sub.w	r3, r3, r9
 8004db2:	455b      	cmp	r3, fp
 8004db4:	dc31      	bgt.n	8004e1a <_printf_float+0x372>
 8004db6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004db8:	459a      	cmp	sl, r3
 8004dba:	dc3a      	bgt.n	8004e32 <_printf_float+0x38a>
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	07da      	lsls	r2, r3, #31
 8004dc0:	d437      	bmi.n	8004e32 <_printf_float+0x38a>
 8004dc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004dc4:	ebaa 0903 	sub.w	r9, sl, r3
 8004dc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004dca:	ebaa 0303 	sub.w	r3, sl, r3
 8004dce:	4599      	cmp	r9, r3
 8004dd0:	bfa8      	it	ge
 8004dd2:	4699      	movge	r9, r3
 8004dd4:	f1b9 0f00 	cmp.w	r9, #0
 8004dd8:	dc33      	bgt.n	8004e42 <_printf_float+0x39a>
 8004dda:	f04f 0800 	mov.w	r8, #0
 8004dde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004de2:	f104 0b1a 	add.w	fp, r4, #26
 8004de6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004de8:	ebaa 0303 	sub.w	r3, sl, r3
 8004dec:	eba3 0309 	sub.w	r3, r3, r9
 8004df0:	4543      	cmp	r3, r8
 8004df2:	f77f af7a 	ble.w	8004cea <_printf_float+0x242>
 8004df6:	2301      	movs	r3, #1
 8004df8:	465a      	mov	r2, fp
 8004dfa:	4631      	mov	r1, r6
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	47b8      	blx	r7
 8004e00:	3001      	adds	r0, #1
 8004e02:	f43f aeac 	beq.w	8004b5e <_printf_float+0xb6>
 8004e06:	f108 0801 	add.w	r8, r8, #1
 8004e0a:	e7ec      	b.n	8004de6 <_printf_float+0x33e>
 8004e0c:	4642      	mov	r2, r8
 8004e0e:	4631      	mov	r1, r6
 8004e10:	4628      	mov	r0, r5
 8004e12:	47b8      	blx	r7
 8004e14:	3001      	adds	r0, #1
 8004e16:	d1c2      	bne.n	8004d9e <_printf_float+0x2f6>
 8004e18:	e6a1      	b.n	8004b5e <_printf_float+0xb6>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	4631      	mov	r1, r6
 8004e1e:	4628      	mov	r0, r5
 8004e20:	920a      	str	r2, [sp, #40]	@ 0x28
 8004e22:	47b8      	blx	r7
 8004e24:	3001      	adds	r0, #1
 8004e26:	f43f ae9a 	beq.w	8004b5e <_printf_float+0xb6>
 8004e2a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e2c:	f10b 0b01 	add.w	fp, fp, #1
 8004e30:	e7bb      	b.n	8004daa <_printf_float+0x302>
 8004e32:	4631      	mov	r1, r6
 8004e34:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e38:	4628      	mov	r0, r5
 8004e3a:	47b8      	blx	r7
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	d1c0      	bne.n	8004dc2 <_printf_float+0x31a>
 8004e40:	e68d      	b.n	8004b5e <_printf_float+0xb6>
 8004e42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e44:	464b      	mov	r3, r9
 8004e46:	4631      	mov	r1, r6
 8004e48:	4628      	mov	r0, r5
 8004e4a:	4442      	add	r2, r8
 8004e4c:	47b8      	blx	r7
 8004e4e:	3001      	adds	r0, #1
 8004e50:	d1c3      	bne.n	8004dda <_printf_float+0x332>
 8004e52:	e684      	b.n	8004b5e <_printf_float+0xb6>
 8004e54:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004e58:	f1ba 0f01 	cmp.w	sl, #1
 8004e5c:	dc01      	bgt.n	8004e62 <_printf_float+0x3ba>
 8004e5e:	07db      	lsls	r3, r3, #31
 8004e60:	d536      	bpl.n	8004ed0 <_printf_float+0x428>
 8004e62:	2301      	movs	r3, #1
 8004e64:	4642      	mov	r2, r8
 8004e66:	4631      	mov	r1, r6
 8004e68:	4628      	mov	r0, r5
 8004e6a:	47b8      	blx	r7
 8004e6c:	3001      	adds	r0, #1
 8004e6e:	f43f ae76 	beq.w	8004b5e <_printf_float+0xb6>
 8004e72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e76:	4631      	mov	r1, r6
 8004e78:	4628      	mov	r0, r5
 8004e7a:	47b8      	blx	r7
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	f43f ae6e 	beq.w	8004b5e <_printf_float+0xb6>
 8004e82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e86:	2200      	movs	r2, #0
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e8e:	f7fb fdc7 	bl	8000a20 <__aeabi_dcmpeq>
 8004e92:	b9c0      	cbnz	r0, 8004ec6 <_printf_float+0x41e>
 8004e94:	4653      	mov	r3, sl
 8004e96:	f108 0201 	add.w	r2, r8, #1
 8004e9a:	4631      	mov	r1, r6
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	47b8      	blx	r7
 8004ea0:	3001      	adds	r0, #1
 8004ea2:	d10c      	bne.n	8004ebe <_printf_float+0x416>
 8004ea4:	e65b      	b.n	8004b5e <_printf_float+0xb6>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	465a      	mov	r2, fp
 8004eaa:	4631      	mov	r1, r6
 8004eac:	4628      	mov	r0, r5
 8004eae:	47b8      	blx	r7
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	f43f ae54 	beq.w	8004b5e <_printf_float+0xb6>
 8004eb6:	f108 0801 	add.w	r8, r8, #1
 8004eba:	45d0      	cmp	r8, sl
 8004ebc:	dbf3      	blt.n	8004ea6 <_printf_float+0x3fe>
 8004ebe:	464b      	mov	r3, r9
 8004ec0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004ec4:	e6e0      	b.n	8004c88 <_printf_float+0x1e0>
 8004ec6:	f04f 0800 	mov.w	r8, #0
 8004eca:	f104 0b1a 	add.w	fp, r4, #26
 8004ece:	e7f4      	b.n	8004eba <_printf_float+0x412>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	4642      	mov	r2, r8
 8004ed4:	e7e1      	b.n	8004e9a <_printf_float+0x3f2>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	464a      	mov	r2, r9
 8004eda:	4631      	mov	r1, r6
 8004edc:	4628      	mov	r0, r5
 8004ede:	47b8      	blx	r7
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	f43f ae3c 	beq.w	8004b5e <_printf_float+0xb6>
 8004ee6:	f108 0801 	add.w	r8, r8, #1
 8004eea:	68e3      	ldr	r3, [r4, #12]
 8004eec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004eee:	1a5b      	subs	r3, r3, r1
 8004ef0:	4543      	cmp	r3, r8
 8004ef2:	dcf0      	bgt.n	8004ed6 <_printf_float+0x42e>
 8004ef4:	e6fd      	b.n	8004cf2 <_printf_float+0x24a>
 8004ef6:	f04f 0800 	mov.w	r8, #0
 8004efa:	f104 0919 	add.w	r9, r4, #25
 8004efe:	e7f4      	b.n	8004eea <_printf_float+0x442>

08004f00 <_printf_common>:
 8004f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f04:	4616      	mov	r6, r2
 8004f06:	4698      	mov	r8, r3
 8004f08:	688a      	ldr	r2, [r1, #8]
 8004f0a:	690b      	ldr	r3, [r1, #16]
 8004f0c:	4607      	mov	r7, r0
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	bfb8      	it	lt
 8004f12:	4613      	movlt	r3, r2
 8004f14:	6033      	str	r3, [r6, #0]
 8004f16:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f20:	b10a      	cbz	r2, 8004f26 <_printf_common+0x26>
 8004f22:	3301      	adds	r3, #1
 8004f24:	6033      	str	r3, [r6, #0]
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	0699      	lsls	r1, r3, #26
 8004f2a:	bf42      	ittt	mi
 8004f2c:	6833      	ldrmi	r3, [r6, #0]
 8004f2e:	3302      	addmi	r3, #2
 8004f30:	6033      	strmi	r3, [r6, #0]
 8004f32:	6825      	ldr	r5, [r4, #0]
 8004f34:	f015 0506 	ands.w	r5, r5, #6
 8004f38:	d106      	bne.n	8004f48 <_printf_common+0x48>
 8004f3a:	f104 0a19 	add.w	sl, r4, #25
 8004f3e:	68e3      	ldr	r3, [r4, #12]
 8004f40:	6832      	ldr	r2, [r6, #0]
 8004f42:	1a9b      	subs	r3, r3, r2
 8004f44:	42ab      	cmp	r3, r5
 8004f46:	dc2b      	bgt.n	8004fa0 <_printf_common+0xa0>
 8004f48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f4c:	6822      	ldr	r2, [r4, #0]
 8004f4e:	3b00      	subs	r3, #0
 8004f50:	bf18      	it	ne
 8004f52:	2301      	movne	r3, #1
 8004f54:	0692      	lsls	r2, r2, #26
 8004f56:	d430      	bmi.n	8004fba <_printf_common+0xba>
 8004f58:	4641      	mov	r1, r8
 8004f5a:	4638      	mov	r0, r7
 8004f5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f60:	47c8      	blx	r9
 8004f62:	3001      	adds	r0, #1
 8004f64:	d023      	beq.n	8004fae <_printf_common+0xae>
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	6922      	ldr	r2, [r4, #16]
 8004f6a:	f003 0306 	and.w	r3, r3, #6
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	bf14      	ite	ne
 8004f72:	2500      	movne	r5, #0
 8004f74:	6833      	ldreq	r3, [r6, #0]
 8004f76:	f04f 0600 	mov.w	r6, #0
 8004f7a:	bf08      	it	eq
 8004f7c:	68e5      	ldreq	r5, [r4, #12]
 8004f7e:	f104 041a 	add.w	r4, r4, #26
 8004f82:	bf08      	it	eq
 8004f84:	1aed      	subeq	r5, r5, r3
 8004f86:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004f8a:	bf08      	it	eq
 8004f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f90:	4293      	cmp	r3, r2
 8004f92:	bfc4      	itt	gt
 8004f94:	1a9b      	subgt	r3, r3, r2
 8004f96:	18ed      	addgt	r5, r5, r3
 8004f98:	42b5      	cmp	r5, r6
 8004f9a:	d11a      	bne.n	8004fd2 <_printf_common+0xd2>
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	e008      	b.n	8004fb2 <_printf_common+0xb2>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	4652      	mov	r2, sl
 8004fa4:	4641      	mov	r1, r8
 8004fa6:	4638      	mov	r0, r7
 8004fa8:	47c8      	blx	r9
 8004faa:	3001      	adds	r0, #1
 8004fac:	d103      	bne.n	8004fb6 <_printf_common+0xb6>
 8004fae:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb6:	3501      	adds	r5, #1
 8004fb8:	e7c1      	b.n	8004f3e <_printf_common+0x3e>
 8004fba:	2030      	movs	r0, #48	@ 0x30
 8004fbc:	18e1      	adds	r1, r4, r3
 8004fbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fc8:	4422      	add	r2, r4
 8004fca:	3302      	adds	r3, #2
 8004fcc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fd0:	e7c2      	b.n	8004f58 <_printf_common+0x58>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	4622      	mov	r2, r4
 8004fd6:	4641      	mov	r1, r8
 8004fd8:	4638      	mov	r0, r7
 8004fda:	47c8      	blx	r9
 8004fdc:	3001      	adds	r0, #1
 8004fde:	d0e6      	beq.n	8004fae <_printf_common+0xae>
 8004fe0:	3601      	adds	r6, #1
 8004fe2:	e7d9      	b.n	8004f98 <_printf_common+0x98>

08004fe4 <_printf_i>:
 8004fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe8:	7e0f      	ldrb	r7, [r1, #24]
 8004fea:	4691      	mov	r9, r2
 8004fec:	2f78      	cmp	r7, #120	@ 0x78
 8004fee:	4680      	mov	r8, r0
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	469a      	mov	sl, r3
 8004ff4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ff6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ffa:	d807      	bhi.n	800500c <_printf_i+0x28>
 8004ffc:	2f62      	cmp	r7, #98	@ 0x62
 8004ffe:	d80a      	bhi.n	8005016 <_printf_i+0x32>
 8005000:	2f00      	cmp	r7, #0
 8005002:	f000 80d3 	beq.w	80051ac <_printf_i+0x1c8>
 8005006:	2f58      	cmp	r7, #88	@ 0x58
 8005008:	f000 80ba 	beq.w	8005180 <_printf_i+0x19c>
 800500c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005010:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005014:	e03a      	b.n	800508c <_printf_i+0xa8>
 8005016:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800501a:	2b15      	cmp	r3, #21
 800501c:	d8f6      	bhi.n	800500c <_printf_i+0x28>
 800501e:	a101      	add	r1, pc, #4	@ (adr r1, 8005024 <_printf_i+0x40>)
 8005020:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005024:	0800507d 	.word	0x0800507d
 8005028:	08005091 	.word	0x08005091
 800502c:	0800500d 	.word	0x0800500d
 8005030:	0800500d 	.word	0x0800500d
 8005034:	0800500d 	.word	0x0800500d
 8005038:	0800500d 	.word	0x0800500d
 800503c:	08005091 	.word	0x08005091
 8005040:	0800500d 	.word	0x0800500d
 8005044:	0800500d 	.word	0x0800500d
 8005048:	0800500d 	.word	0x0800500d
 800504c:	0800500d 	.word	0x0800500d
 8005050:	08005193 	.word	0x08005193
 8005054:	080050bb 	.word	0x080050bb
 8005058:	0800514d 	.word	0x0800514d
 800505c:	0800500d 	.word	0x0800500d
 8005060:	0800500d 	.word	0x0800500d
 8005064:	080051b5 	.word	0x080051b5
 8005068:	0800500d 	.word	0x0800500d
 800506c:	080050bb 	.word	0x080050bb
 8005070:	0800500d 	.word	0x0800500d
 8005074:	0800500d 	.word	0x0800500d
 8005078:	08005155 	.word	0x08005155
 800507c:	6833      	ldr	r3, [r6, #0]
 800507e:	1d1a      	adds	r2, r3, #4
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6032      	str	r2, [r6, #0]
 8005084:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005088:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800508c:	2301      	movs	r3, #1
 800508e:	e09e      	b.n	80051ce <_printf_i+0x1ea>
 8005090:	6833      	ldr	r3, [r6, #0]
 8005092:	6820      	ldr	r0, [r4, #0]
 8005094:	1d19      	adds	r1, r3, #4
 8005096:	6031      	str	r1, [r6, #0]
 8005098:	0606      	lsls	r6, r0, #24
 800509a:	d501      	bpl.n	80050a0 <_printf_i+0xbc>
 800509c:	681d      	ldr	r5, [r3, #0]
 800509e:	e003      	b.n	80050a8 <_printf_i+0xc4>
 80050a0:	0645      	lsls	r5, r0, #25
 80050a2:	d5fb      	bpl.n	800509c <_printf_i+0xb8>
 80050a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050a8:	2d00      	cmp	r5, #0
 80050aa:	da03      	bge.n	80050b4 <_printf_i+0xd0>
 80050ac:	232d      	movs	r3, #45	@ 0x2d
 80050ae:	426d      	negs	r5, r5
 80050b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050b4:	230a      	movs	r3, #10
 80050b6:	4859      	ldr	r0, [pc, #356]	@ (800521c <_printf_i+0x238>)
 80050b8:	e011      	b.n	80050de <_printf_i+0xfa>
 80050ba:	6821      	ldr	r1, [r4, #0]
 80050bc:	6833      	ldr	r3, [r6, #0]
 80050be:	0608      	lsls	r0, r1, #24
 80050c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80050c4:	d402      	bmi.n	80050cc <_printf_i+0xe8>
 80050c6:	0649      	lsls	r1, r1, #25
 80050c8:	bf48      	it	mi
 80050ca:	b2ad      	uxthmi	r5, r5
 80050cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80050ce:	6033      	str	r3, [r6, #0]
 80050d0:	bf14      	ite	ne
 80050d2:	230a      	movne	r3, #10
 80050d4:	2308      	moveq	r3, #8
 80050d6:	4851      	ldr	r0, [pc, #324]	@ (800521c <_printf_i+0x238>)
 80050d8:	2100      	movs	r1, #0
 80050da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050de:	6866      	ldr	r6, [r4, #4]
 80050e0:	2e00      	cmp	r6, #0
 80050e2:	bfa8      	it	ge
 80050e4:	6821      	ldrge	r1, [r4, #0]
 80050e6:	60a6      	str	r6, [r4, #8]
 80050e8:	bfa4      	itt	ge
 80050ea:	f021 0104 	bicge.w	r1, r1, #4
 80050ee:	6021      	strge	r1, [r4, #0]
 80050f0:	b90d      	cbnz	r5, 80050f6 <_printf_i+0x112>
 80050f2:	2e00      	cmp	r6, #0
 80050f4:	d04b      	beq.n	800518e <_printf_i+0x1aa>
 80050f6:	4616      	mov	r6, r2
 80050f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80050fc:	fb03 5711 	mls	r7, r3, r1, r5
 8005100:	5dc7      	ldrb	r7, [r0, r7]
 8005102:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005106:	462f      	mov	r7, r5
 8005108:	42bb      	cmp	r3, r7
 800510a:	460d      	mov	r5, r1
 800510c:	d9f4      	bls.n	80050f8 <_printf_i+0x114>
 800510e:	2b08      	cmp	r3, #8
 8005110:	d10b      	bne.n	800512a <_printf_i+0x146>
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	07df      	lsls	r7, r3, #31
 8005116:	d508      	bpl.n	800512a <_printf_i+0x146>
 8005118:	6923      	ldr	r3, [r4, #16]
 800511a:	6861      	ldr	r1, [r4, #4]
 800511c:	4299      	cmp	r1, r3
 800511e:	bfde      	ittt	le
 8005120:	2330      	movle	r3, #48	@ 0x30
 8005122:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005126:	f106 36ff 	addle.w	r6, r6, #4294967295
 800512a:	1b92      	subs	r2, r2, r6
 800512c:	6122      	str	r2, [r4, #16]
 800512e:	464b      	mov	r3, r9
 8005130:	4621      	mov	r1, r4
 8005132:	4640      	mov	r0, r8
 8005134:	f8cd a000 	str.w	sl, [sp]
 8005138:	aa03      	add	r2, sp, #12
 800513a:	f7ff fee1 	bl	8004f00 <_printf_common>
 800513e:	3001      	adds	r0, #1
 8005140:	d14a      	bne.n	80051d8 <_printf_i+0x1f4>
 8005142:	f04f 30ff 	mov.w	r0, #4294967295
 8005146:	b004      	add	sp, #16
 8005148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	f043 0320 	orr.w	r3, r3, #32
 8005152:	6023      	str	r3, [r4, #0]
 8005154:	2778      	movs	r7, #120	@ 0x78
 8005156:	4832      	ldr	r0, [pc, #200]	@ (8005220 <_printf_i+0x23c>)
 8005158:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	6831      	ldr	r1, [r6, #0]
 8005160:	061f      	lsls	r7, r3, #24
 8005162:	f851 5b04 	ldr.w	r5, [r1], #4
 8005166:	d402      	bmi.n	800516e <_printf_i+0x18a>
 8005168:	065f      	lsls	r7, r3, #25
 800516a:	bf48      	it	mi
 800516c:	b2ad      	uxthmi	r5, r5
 800516e:	6031      	str	r1, [r6, #0]
 8005170:	07d9      	lsls	r1, r3, #31
 8005172:	bf44      	itt	mi
 8005174:	f043 0320 	orrmi.w	r3, r3, #32
 8005178:	6023      	strmi	r3, [r4, #0]
 800517a:	b11d      	cbz	r5, 8005184 <_printf_i+0x1a0>
 800517c:	2310      	movs	r3, #16
 800517e:	e7ab      	b.n	80050d8 <_printf_i+0xf4>
 8005180:	4826      	ldr	r0, [pc, #152]	@ (800521c <_printf_i+0x238>)
 8005182:	e7e9      	b.n	8005158 <_printf_i+0x174>
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	f023 0320 	bic.w	r3, r3, #32
 800518a:	6023      	str	r3, [r4, #0]
 800518c:	e7f6      	b.n	800517c <_printf_i+0x198>
 800518e:	4616      	mov	r6, r2
 8005190:	e7bd      	b.n	800510e <_printf_i+0x12a>
 8005192:	6833      	ldr	r3, [r6, #0]
 8005194:	6825      	ldr	r5, [r4, #0]
 8005196:	1d18      	adds	r0, r3, #4
 8005198:	6961      	ldr	r1, [r4, #20]
 800519a:	6030      	str	r0, [r6, #0]
 800519c:	062e      	lsls	r6, r5, #24
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	d501      	bpl.n	80051a6 <_printf_i+0x1c2>
 80051a2:	6019      	str	r1, [r3, #0]
 80051a4:	e002      	b.n	80051ac <_printf_i+0x1c8>
 80051a6:	0668      	lsls	r0, r5, #25
 80051a8:	d5fb      	bpl.n	80051a2 <_printf_i+0x1be>
 80051aa:	8019      	strh	r1, [r3, #0]
 80051ac:	2300      	movs	r3, #0
 80051ae:	4616      	mov	r6, r2
 80051b0:	6123      	str	r3, [r4, #16]
 80051b2:	e7bc      	b.n	800512e <_printf_i+0x14a>
 80051b4:	6833      	ldr	r3, [r6, #0]
 80051b6:	2100      	movs	r1, #0
 80051b8:	1d1a      	adds	r2, r3, #4
 80051ba:	6032      	str	r2, [r6, #0]
 80051bc:	681e      	ldr	r6, [r3, #0]
 80051be:	6862      	ldr	r2, [r4, #4]
 80051c0:	4630      	mov	r0, r6
 80051c2:	f000 f9c4 	bl	800554e <memchr>
 80051c6:	b108      	cbz	r0, 80051cc <_printf_i+0x1e8>
 80051c8:	1b80      	subs	r0, r0, r6
 80051ca:	6060      	str	r0, [r4, #4]
 80051cc:	6863      	ldr	r3, [r4, #4]
 80051ce:	6123      	str	r3, [r4, #16]
 80051d0:	2300      	movs	r3, #0
 80051d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051d6:	e7aa      	b.n	800512e <_printf_i+0x14a>
 80051d8:	4632      	mov	r2, r6
 80051da:	4649      	mov	r1, r9
 80051dc:	4640      	mov	r0, r8
 80051de:	6923      	ldr	r3, [r4, #16]
 80051e0:	47d0      	blx	sl
 80051e2:	3001      	adds	r0, #1
 80051e4:	d0ad      	beq.n	8005142 <_printf_i+0x15e>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	079b      	lsls	r3, r3, #30
 80051ea:	d413      	bmi.n	8005214 <_printf_i+0x230>
 80051ec:	68e0      	ldr	r0, [r4, #12]
 80051ee:	9b03      	ldr	r3, [sp, #12]
 80051f0:	4298      	cmp	r0, r3
 80051f2:	bfb8      	it	lt
 80051f4:	4618      	movlt	r0, r3
 80051f6:	e7a6      	b.n	8005146 <_printf_i+0x162>
 80051f8:	2301      	movs	r3, #1
 80051fa:	4632      	mov	r2, r6
 80051fc:	4649      	mov	r1, r9
 80051fe:	4640      	mov	r0, r8
 8005200:	47d0      	blx	sl
 8005202:	3001      	adds	r0, #1
 8005204:	d09d      	beq.n	8005142 <_printf_i+0x15e>
 8005206:	3501      	adds	r5, #1
 8005208:	68e3      	ldr	r3, [r4, #12]
 800520a:	9903      	ldr	r1, [sp, #12]
 800520c:	1a5b      	subs	r3, r3, r1
 800520e:	42ab      	cmp	r3, r5
 8005210:	dcf2      	bgt.n	80051f8 <_printf_i+0x214>
 8005212:	e7eb      	b.n	80051ec <_printf_i+0x208>
 8005214:	2500      	movs	r5, #0
 8005216:	f104 0619 	add.w	r6, r4, #25
 800521a:	e7f5      	b.n	8005208 <_printf_i+0x224>
 800521c:	0800715a 	.word	0x0800715a
 8005220:	0800716b 	.word	0x0800716b

08005224 <std>:
 8005224:	2300      	movs	r3, #0
 8005226:	b510      	push	{r4, lr}
 8005228:	4604      	mov	r4, r0
 800522a:	e9c0 3300 	strd	r3, r3, [r0]
 800522e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005232:	6083      	str	r3, [r0, #8]
 8005234:	8181      	strh	r1, [r0, #12]
 8005236:	6643      	str	r3, [r0, #100]	@ 0x64
 8005238:	81c2      	strh	r2, [r0, #14]
 800523a:	6183      	str	r3, [r0, #24]
 800523c:	4619      	mov	r1, r3
 800523e:	2208      	movs	r2, #8
 8005240:	305c      	adds	r0, #92	@ 0x5c
 8005242:	f000 f8f4 	bl	800542e <memset>
 8005246:	4b0d      	ldr	r3, [pc, #52]	@ (800527c <std+0x58>)
 8005248:	6224      	str	r4, [r4, #32]
 800524a:	6263      	str	r3, [r4, #36]	@ 0x24
 800524c:	4b0c      	ldr	r3, [pc, #48]	@ (8005280 <std+0x5c>)
 800524e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005250:	4b0c      	ldr	r3, [pc, #48]	@ (8005284 <std+0x60>)
 8005252:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005254:	4b0c      	ldr	r3, [pc, #48]	@ (8005288 <std+0x64>)
 8005256:	6323      	str	r3, [r4, #48]	@ 0x30
 8005258:	4b0c      	ldr	r3, [pc, #48]	@ (800528c <std+0x68>)
 800525a:	429c      	cmp	r4, r3
 800525c:	d006      	beq.n	800526c <std+0x48>
 800525e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005262:	4294      	cmp	r4, r2
 8005264:	d002      	beq.n	800526c <std+0x48>
 8005266:	33d0      	adds	r3, #208	@ 0xd0
 8005268:	429c      	cmp	r4, r3
 800526a:	d105      	bne.n	8005278 <std+0x54>
 800526c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005274:	f000 b968 	b.w	8005548 <__retarget_lock_init_recursive>
 8005278:	bd10      	pop	{r4, pc}
 800527a:	bf00      	nop
 800527c:	080053a9 	.word	0x080053a9
 8005280:	080053cb 	.word	0x080053cb
 8005284:	08005403 	.word	0x08005403
 8005288:	08005427 	.word	0x08005427
 800528c:	20000918 	.word	0x20000918

08005290 <stdio_exit_handler>:
 8005290:	4a02      	ldr	r2, [pc, #8]	@ (800529c <stdio_exit_handler+0xc>)
 8005292:	4903      	ldr	r1, [pc, #12]	@ (80052a0 <stdio_exit_handler+0x10>)
 8005294:	4803      	ldr	r0, [pc, #12]	@ (80052a4 <stdio_exit_handler+0x14>)
 8005296:	f000 b869 	b.w	800536c <_fwalk_sglue>
 800529a:	bf00      	nop
 800529c:	2000006c 	.word	0x2000006c
 80052a0:	08006d21 	.word	0x08006d21
 80052a4:	2000007c 	.word	0x2000007c

080052a8 <cleanup_stdio>:
 80052a8:	6841      	ldr	r1, [r0, #4]
 80052aa:	4b0c      	ldr	r3, [pc, #48]	@ (80052dc <cleanup_stdio+0x34>)
 80052ac:	b510      	push	{r4, lr}
 80052ae:	4299      	cmp	r1, r3
 80052b0:	4604      	mov	r4, r0
 80052b2:	d001      	beq.n	80052b8 <cleanup_stdio+0x10>
 80052b4:	f001 fd34 	bl	8006d20 <_fflush_r>
 80052b8:	68a1      	ldr	r1, [r4, #8]
 80052ba:	4b09      	ldr	r3, [pc, #36]	@ (80052e0 <cleanup_stdio+0x38>)
 80052bc:	4299      	cmp	r1, r3
 80052be:	d002      	beq.n	80052c6 <cleanup_stdio+0x1e>
 80052c0:	4620      	mov	r0, r4
 80052c2:	f001 fd2d 	bl	8006d20 <_fflush_r>
 80052c6:	68e1      	ldr	r1, [r4, #12]
 80052c8:	4b06      	ldr	r3, [pc, #24]	@ (80052e4 <cleanup_stdio+0x3c>)
 80052ca:	4299      	cmp	r1, r3
 80052cc:	d004      	beq.n	80052d8 <cleanup_stdio+0x30>
 80052ce:	4620      	mov	r0, r4
 80052d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052d4:	f001 bd24 	b.w	8006d20 <_fflush_r>
 80052d8:	bd10      	pop	{r4, pc}
 80052da:	bf00      	nop
 80052dc:	20000918 	.word	0x20000918
 80052e0:	20000980 	.word	0x20000980
 80052e4:	200009e8 	.word	0x200009e8

080052e8 <global_stdio_init.part.0>:
 80052e8:	b510      	push	{r4, lr}
 80052ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005318 <global_stdio_init.part.0+0x30>)
 80052ec:	4c0b      	ldr	r4, [pc, #44]	@ (800531c <global_stdio_init.part.0+0x34>)
 80052ee:	4a0c      	ldr	r2, [pc, #48]	@ (8005320 <global_stdio_init.part.0+0x38>)
 80052f0:	4620      	mov	r0, r4
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	2104      	movs	r1, #4
 80052f6:	2200      	movs	r2, #0
 80052f8:	f7ff ff94 	bl	8005224 <std>
 80052fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005300:	2201      	movs	r2, #1
 8005302:	2109      	movs	r1, #9
 8005304:	f7ff ff8e 	bl	8005224 <std>
 8005308:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800530c:	2202      	movs	r2, #2
 800530e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005312:	2112      	movs	r1, #18
 8005314:	f7ff bf86 	b.w	8005224 <std>
 8005318:	20000a50 	.word	0x20000a50
 800531c:	20000918 	.word	0x20000918
 8005320:	08005291 	.word	0x08005291

08005324 <__sfp_lock_acquire>:
 8005324:	4801      	ldr	r0, [pc, #4]	@ (800532c <__sfp_lock_acquire+0x8>)
 8005326:	f000 b910 	b.w	800554a <__retarget_lock_acquire_recursive>
 800532a:	bf00      	nop
 800532c:	20000a59 	.word	0x20000a59

08005330 <__sfp_lock_release>:
 8005330:	4801      	ldr	r0, [pc, #4]	@ (8005338 <__sfp_lock_release+0x8>)
 8005332:	f000 b90b 	b.w	800554c <__retarget_lock_release_recursive>
 8005336:	bf00      	nop
 8005338:	20000a59 	.word	0x20000a59

0800533c <__sinit>:
 800533c:	b510      	push	{r4, lr}
 800533e:	4604      	mov	r4, r0
 8005340:	f7ff fff0 	bl	8005324 <__sfp_lock_acquire>
 8005344:	6a23      	ldr	r3, [r4, #32]
 8005346:	b11b      	cbz	r3, 8005350 <__sinit+0x14>
 8005348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800534c:	f7ff bff0 	b.w	8005330 <__sfp_lock_release>
 8005350:	4b04      	ldr	r3, [pc, #16]	@ (8005364 <__sinit+0x28>)
 8005352:	6223      	str	r3, [r4, #32]
 8005354:	4b04      	ldr	r3, [pc, #16]	@ (8005368 <__sinit+0x2c>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d1f5      	bne.n	8005348 <__sinit+0xc>
 800535c:	f7ff ffc4 	bl	80052e8 <global_stdio_init.part.0>
 8005360:	e7f2      	b.n	8005348 <__sinit+0xc>
 8005362:	bf00      	nop
 8005364:	080052a9 	.word	0x080052a9
 8005368:	20000a50 	.word	0x20000a50

0800536c <_fwalk_sglue>:
 800536c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005370:	4607      	mov	r7, r0
 8005372:	4688      	mov	r8, r1
 8005374:	4614      	mov	r4, r2
 8005376:	2600      	movs	r6, #0
 8005378:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800537c:	f1b9 0901 	subs.w	r9, r9, #1
 8005380:	d505      	bpl.n	800538e <_fwalk_sglue+0x22>
 8005382:	6824      	ldr	r4, [r4, #0]
 8005384:	2c00      	cmp	r4, #0
 8005386:	d1f7      	bne.n	8005378 <_fwalk_sglue+0xc>
 8005388:	4630      	mov	r0, r6
 800538a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800538e:	89ab      	ldrh	r3, [r5, #12]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d907      	bls.n	80053a4 <_fwalk_sglue+0x38>
 8005394:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005398:	3301      	adds	r3, #1
 800539a:	d003      	beq.n	80053a4 <_fwalk_sglue+0x38>
 800539c:	4629      	mov	r1, r5
 800539e:	4638      	mov	r0, r7
 80053a0:	47c0      	blx	r8
 80053a2:	4306      	orrs	r6, r0
 80053a4:	3568      	adds	r5, #104	@ 0x68
 80053a6:	e7e9      	b.n	800537c <_fwalk_sglue+0x10>

080053a8 <__sread>:
 80053a8:	b510      	push	{r4, lr}
 80053aa:	460c      	mov	r4, r1
 80053ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053b0:	f000 f86c 	bl	800548c <_read_r>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	bfab      	itete	ge
 80053b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80053ba:	89a3      	ldrhlt	r3, [r4, #12]
 80053bc:	181b      	addge	r3, r3, r0
 80053be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80053c2:	bfac      	ite	ge
 80053c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80053c6:	81a3      	strhlt	r3, [r4, #12]
 80053c8:	bd10      	pop	{r4, pc}

080053ca <__swrite>:
 80053ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053ce:	461f      	mov	r7, r3
 80053d0:	898b      	ldrh	r3, [r1, #12]
 80053d2:	4605      	mov	r5, r0
 80053d4:	05db      	lsls	r3, r3, #23
 80053d6:	460c      	mov	r4, r1
 80053d8:	4616      	mov	r6, r2
 80053da:	d505      	bpl.n	80053e8 <__swrite+0x1e>
 80053dc:	2302      	movs	r3, #2
 80053de:	2200      	movs	r2, #0
 80053e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e4:	f000 f840 	bl	8005468 <_lseek_r>
 80053e8:	89a3      	ldrh	r3, [r4, #12]
 80053ea:	4632      	mov	r2, r6
 80053ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053f0:	81a3      	strh	r3, [r4, #12]
 80053f2:	4628      	mov	r0, r5
 80053f4:	463b      	mov	r3, r7
 80053f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053fe:	f000 b867 	b.w	80054d0 <_write_r>

08005402 <__sseek>:
 8005402:	b510      	push	{r4, lr}
 8005404:	460c      	mov	r4, r1
 8005406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800540a:	f000 f82d 	bl	8005468 <_lseek_r>
 800540e:	1c43      	adds	r3, r0, #1
 8005410:	89a3      	ldrh	r3, [r4, #12]
 8005412:	bf15      	itete	ne
 8005414:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005416:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800541a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800541e:	81a3      	strheq	r3, [r4, #12]
 8005420:	bf18      	it	ne
 8005422:	81a3      	strhne	r3, [r4, #12]
 8005424:	bd10      	pop	{r4, pc}

08005426 <__sclose>:
 8005426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800542a:	f000 b80d 	b.w	8005448 <_close_r>

0800542e <memset>:
 800542e:	4603      	mov	r3, r0
 8005430:	4402      	add	r2, r0
 8005432:	4293      	cmp	r3, r2
 8005434:	d100      	bne.n	8005438 <memset+0xa>
 8005436:	4770      	bx	lr
 8005438:	f803 1b01 	strb.w	r1, [r3], #1
 800543c:	e7f9      	b.n	8005432 <memset+0x4>
	...

08005440 <_localeconv_r>:
 8005440:	4800      	ldr	r0, [pc, #0]	@ (8005444 <_localeconv_r+0x4>)
 8005442:	4770      	bx	lr
 8005444:	200001b8 	.word	0x200001b8

08005448 <_close_r>:
 8005448:	b538      	push	{r3, r4, r5, lr}
 800544a:	2300      	movs	r3, #0
 800544c:	4d05      	ldr	r5, [pc, #20]	@ (8005464 <_close_r+0x1c>)
 800544e:	4604      	mov	r4, r0
 8005450:	4608      	mov	r0, r1
 8005452:	602b      	str	r3, [r5, #0]
 8005454:	f7fc fa41 	bl	80018da <_close>
 8005458:	1c43      	adds	r3, r0, #1
 800545a:	d102      	bne.n	8005462 <_close_r+0x1a>
 800545c:	682b      	ldr	r3, [r5, #0]
 800545e:	b103      	cbz	r3, 8005462 <_close_r+0x1a>
 8005460:	6023      	str	r3, [r4, #0]
 8005462:	bd38      	pop	{r3, r4, r5, pc}
 8005464:	20000a54 	.word	0x20000a54

08005468 <_lseek_r>:
 8005468:	b538      	push	{r3, r4, r5, lr}
 800546a:	4604      	mov	r4, r0
 800546c:	4608      	mov	r0, r1
 800546e:	4611      	mov	r1, r2
 8005470:	2200      	movs	r2, #0
 8005472:	4d05      	ldr	r5, [pc, #20]	@ (8005488 <_lseek_r+0x20>)
 8005474:	602a      	str	r2, [r5, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	f7fc fa53 	bl	8001922 <_lseek>
 800547c:	1c43      	adds	r3, r0, #1
 800547e:	d102      	bne.n	8005486 <_lseek_r+0x1e>
 8005480:	682b      	ldr	r3, [r5, #0]
 8005482:	b103      	cbz	r3, 8005486 <_lseek_r+0x1e>
 8005484:	6023      	str	r3, [r4, #0]
 8005486:	bd38      	pop	{r3, r4, r5, pc}
 8005488:	20000a54 	.word	0x20000a54

0800548c <_read_r>:
 800548c:	b538      	push	{r3, r4, r5, lr}
 800548e:	4604      	mov	r4, r0
 8005490:	4608      	mov	r0, r1
 8005492:	4611      	mov	r1, r2
 8005494:	2200      	movs	r2, #0
 8005496:	4d05      	ldr	r5, [pc, #20]	@ (80054ac <_read_r+0x20>)
 8005498:	602a      	str	r2, [r5, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	f7fc f9e4 	bl	8001868 <_read>
 80054a0:	1c43      	adds	r3, r0, #1
 80054a2:	d102      	bne.n	80054aa <_read_r+0x1e>
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	b103      	cbz	r3, 80054aa <_read_r+0x1e>
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	bd38      	pop	{r3, r4, r5, pc}
 80054ac:	20000a54 	.word	0x20000a54

080054b0 <_sbrk_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	2300      	movs	r3, #0
 80054b4:	4d05      	ldr	r5, [pc, #20]	@ (80054cc <_sbrk_r+0x1c>)
 80054b6:	4604      	mov	r4, r0
 80054b8:	4608      	mov	r0, r1
 80054ba:	602b      	str	r3, [r5, #0]
 80054bc:	f7fc fa3e 	bl	800193c <_sbrk>
 80054c0:	1c43      	adds	r3, r0, #1
 80054c2:	d102      	bne.n	80054ca <_sbrk_r+0x1a>
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	b103      	cbz	r3, 80054ca <_sbrk_r+0x1a>
 80054c8:	6023      	str	r3, [r4, #0]
 80054ca:	bd38      	pop	{r3, r4, r5, pc}
 80054cc:	20000a54 	.word	0x20000a54

080054d0 <_write_r>:
 80054d0:	b538      	push	{r3, r4, r5, lr}
 80054d2:	4604      	mov	r4, r0
 80054d4:	4608      	mov	r0, r1
 80054d6:	4611      	mov	r1, r2
 80054d8:	2200      	movs	r2, #0
 80054da:	4d05      	ldr	r5, [pc, #20]	@ (80054f0 <_write_r+0x20>)
 80054dc:	602a      	str	r2, [r5, #0]
 80054de:	461a      	mov	r2, r3
 80054e0:	f7fc f9df 	bl	80018a2 <_write>
 80054e4:	1c43      	adds	r3, r0, #1
 80054e6:	d102      	bne.n	80054ee <_write_r+0x1e>
 80054e8:	682b      	ldr	r3, [r5, #0]
 80054ea:	b103      	cbz	r3, 80054ee <_write_r+0x1e>
 80054ec:	6023      	str	r3, [r4, #0]
 80054ee:	bd38      	pop	{r3, r4, r5, pc}
 80054f0:	20000a54 	.word	0x20000a54

080054f4 <__errno>:
 80054f4:	4b01      	ldr	r3, [pc, #4]	@ (80054fc <__errno+0x8>)
 80054f6:	6818      	ldr	r0, [r3, #0]
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	20000078 	.word	0x20000078

08005500 <__libc_init_array>:
 8005500:	b570      	push	{r4, r5, r6, lr}
 8005502:	2600      	movs	r6, #0
 8005504:	4d0c      	ldr	r5, [pc, #48]	@ (8005538 <__libc_init_array+0x38>)
 8005506:	4c0d      	ldr	r4, [pc, #52]	@ (800553c <__libc_init_array+0x3c>)
 8005508:	1b64      	subs	r4, r4, r5
 800550a:	10a4      	asrs	r4, r4, #2
 800550c:	42a6      	cmp	r6, r4
 800550e:	d109      	bne.n	8005524 <__libc_init_array+0x24>
 8005510:	f001 fe04 	bl	800711c <_init>
 8005514:	2600      	movs	r6, #0
 8005516:	4d0a      	ldr	r5, [pc, #40]	@ (8005540 <__libc_init_array+0x40>)
 8005518:	4c0a      	ldr	r4, [pc, #40]	@ (8005544 <__libc_init_array+0x44>)
 800551a:	1b64      	subs	r4, r4, r5
 800551c:	10a4      	asrs	r4, r4, #2
 800551e:	42a6      	cmp	r6, r4
 8005520:	d105      	bne.n	800552e <__libc_init_array+0x2e>
 8005522:	bd70      	pop	{r4, r5, r6, pc}
 8005524:	f855 3b04 	ldr.w	r3, [r5], #4
 8005528:	4798      	blx	r3
 800552a:	3601      	adds	r6, #1
 800552c:	e7ee      	b.n	800550c <__libc_init_array+0xc>
 800552e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005532:	4798      	blx	r3
 8005534:	3601      	adds	r6, #1
 8005536:	e7f2      	b.n	800551e <__libc_init_array+0x1e>
 8005538:	080074c0 	.word	0x080074c0
 800553c:	080074c0 	.word	0x080074c0
 8005540:	080074c0 	.word	0x080074c0
 8005544:	080074c4 	.word	0x080074c4

08005548 <__retarget_lock_init_recursive>:
 8005548:	4770      	bx	lr

0800554a <__retarget_lock_acquire_recursive>:
 800554a:	4770      	bx	lr

0800554c <__retarget_lock_release_recursive>:
 800554c:	4770      	bx	lr

0800554e <memchr>:
 800554e:	4603      	mov	r3, r0
 8005550:	b510      	push	{r4, lr}
 8005552:	b2c9      	uxtb	r1, r1
 8005554:	4402      	add	r2, r0
 8005556:	4293      	cmp	r3, r2
 8005558:	4618      	mov	r0, r3
 800555a:	d101      	bne.n	8005560 <memchr+0x12>
 800555c:	2000      	movs	r0, #0
 800555e:	e003      	b.n	8005568 <memchr+0x1a>
 8005560:	7804      	ldrb	r4, [r0, #0]
 8005562:	3301      	adds	r3, #1
 8005564:	428c      	cmp	r4, r1
 8005566:	d1f6      	bne.n	8005556 <memchr+0x8>
 8005568:	bd10      	pop	{r4, pc}

0800556a <quorem>:
 800556a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800556e:	6903      	ldr	r3, [r0, #16]
 8005570:	690c      	ldr	r4, [r1, #16]
 8005572:	4607      	mov	r7, r0
 8005574:	42a3      	cmp	r3, r4
 8005576:	db7e      	blt.n	8005676 <quorem+0x10c>
 8005578:	3c01      	subs	r4, #1
 800557a:	00a3      	lsls	r3, r4, #2
 800557c:	f100 0514 	add.w	r5, r0, #20
 8005580:	f101 0814 	add.w	r8, r1, #20
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800558a:	9301      	str	r3, [sp, #4]
 800558c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005590:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005594:	3301      	adds	r3, #1
 8005596:	429a      	cmp	r2, r3
 8005598:	fbb2 f6f3 	udiv	r6, r2, r3
 800559c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055a0:	d32e      	bcc.n	8005600 <quorem+0x96>
 80055a2:	f04f 0a00 	mov.w	sl, #0
 80055a6:	46c4      	mov	ip, r8
 80055a8:	46ae      	mov	lr, r5
 80055aa:	46d3      	mov	fp, sl
 80055ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80055b0:	b298      	uxth	r0, r3
 80055b2:	fb06 a000 	mla	r0, r6, r0, sl
 80055b6:	0c1b      	lsrs	r3, r3, #16
 80055b8:	0c02      	lsrs	r2, r0, #16
 80055ba:	fb06 2303 	mla	r3, r6, r3, r2
 80055be:	f8de 2000 	ldr.w	r2, [lr]
 80055c2:	b280      	uxth	r0, r0
 80055c4:	b292      	uxth	r2, r2
 80055c6:	1a12      	subs	r2, r2, r0
 80055c8:	445a      	add	r2, fp
 80055ca:	f8de 0000 	ldr.w	r0, [lr]
 80055ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80055d8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80055dc:	b292      	uxth	r2, r2
 80055de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80055e2:	45e1      	cmp	r9, ip
 80055e4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80055e8:	f84e 2b04 	str.w	r2, [lr], #4
 80055ec:	d2de      	bcs.n	80055ac <quorem+0x42>
 80055ee:	9b00      	ldr	r3, [sp, #0]
 80055f0:	58eb      	ldr	r3, [r5, r3]
 80055f2:	b92b      	cbnz	r3, 8005600 <quorem+0x96>
 80055f4:	9b01      	ldr	r3, [sp, #4]
 80055f6:	3b04      	subs	r3, #4
 80055f8:	429d      	cmp	r5, r3
 80055fa:	461a      	mov	r2, r3
 80055fc:	d32f      	bcc.n	800565e <quorem+0xf4>
 80055fe:	613c      	str	r4, [r7, #16]
 8005600:	4638      	mov	r0, r7
 8005602:	f001 f8c5 	bl	8006790 <__mcmp>
 8005606:	2800      	cmp	r0, #0
 8005608:	db25      	blt.n	8005656 <quorem+0xec>
 800560a:	4629      	mov	r1, r5
 800560c:	2000      	movs	r0, #0
 800560e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005612:	f8d1 c000 	ldr.w	ip, [r1]
 8005616:	fa1f fe82 	uxth.w	lr, r2
 800561a:	fa1f f38c 	uxth.w	r3, ip
 800561e:	eba3 030e 	sub.w	r3, r3, lr
 8005622:	4403      	add	r3, r0
 8005624:	0c12      	lsrs	r2, r2, #16
 8005626:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800562a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800562e:	b29b      	uxth	r3, r3
 8005630:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005634:	45c1      	cmp	r9, r8
 8005636:	ea4f 4022 	mov.w	r0, r2, asr #16
 800563a:	f841 3b04 	str.w	r3, [r1], #4
 800563e:	d2e6      	bcs.n	800560e <quorem+0xa4>
 8005640:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005644:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005648:	b922      	cbnz	r2, 8005654 <quorem+0xea>
 800564a:	3b04      	subs	r3, #4
 800564c:	429d      	cmp	r5, r3
 800564e:	461a      	mov	r2, r3
 8005650:	d30b      	bcc.n	800566a <quorem+0x100>
 8005652:	613c      	str	r4, [r7, #16]
 8005654:	3601      	adds	r6, #1
 8005656:	4630      	mov	r0, r6
 8005658:	b003      	add	sp, #12
 800565a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800565e:	6812      	ldr	r2, [r2, #0]
 8005660:	3b04      	subs	r3, #4
 8005662:	2a00      	cmp	r2, #0
 8005664:	d1cb      	bne.n	80055fe <quorem+0x94>
 8005666:	3c01      	subs	r4, #1
 8005668:	e7c6      	b.n	80055f8 <quorem+0x8e>
 800566a:	6812      	ldr	r2, [r2, #0]
 800566c:	3b04      	subs	r3, #4
 800566e:	2a00      	cmp	r2, #0
 8005670:	d1ef      	bne.n	8005652 <quorem+0xe8>
 8005672:	3c01      	subs	r4, #1
 8005674:	e7ea      	b.n	800564c <quorem+0xe2>
 8005676:	2000      	movs	r0, #0
 8005678:	e7ee      	b.n	8005658 <quorem+0xee>
 800567a:	0000      	movs	r0, r0
 800567c:	0000      	movs	r0, r0
	...

08005680 <_dtoa_r>:
 8005680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005684:	4614      	mov	r4, r2
 8005686:	461d      	mov	r5, r3
 8005688:	69c7      	ldr	r7, [r0, #28]
 800568a:	b097      	sub	sp, #92	@ 0x5c
 800568c:	4683      	mov	fp, r0
 800568e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005692:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005694:	b97f      	cbnz	r7, 80056b6 <_dtoa_r+0x36>
 8005696:	2010      	movs	r0, #16
 8005698:	f7ff f8b2 	bl	8004800 <malloc>
 800569c:	4602      	mov	r2, r0
 800569e:	f8cb 001c 	str.w	r0, [fp, #28]
 80056a2:	b920      	cbnz	r0, 80056ae <_dtoa_r+0x2e>
 80056a4:	21ef      	movs	r1, #239	@ 0xef
 80056a6:	4ba8      	ldr	r3, [pc, #672]	@ (8005948 <_dtoa_r+0x2c8>)
 80056a8:	48a8      	ldr	r0, [pc, #672]	@ (800594c <_dtoa_r+0x2cc>)
 80056aa:	f001 fc03 	bl	8006eb4 <__assert_func>
 80056ae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80056b2:	6007      	str	r7, [r0, #0]
 80056b4:	60c7      	str	r7, [r0, #12]
 80056b6:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056ba:	6819      	ldr	r1, [r3, #0]
 80056bc:	b159      	cbz	r1, 80056d6 <_dtoa_r+0x56>
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	2301      	movs	r3, #1
 80056c2:	4093      	lsls	r3, r2
 80056c4:	604a      	str	r2, [r1, #4]
 80056c6:	608b      	str	r3, [r1, #8]
 80056c8:	4658      	mov	r0, fp
 80056ca:	f000 fe29 	bl	8006320 <_Bfree>
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	1e2b      	subs	r3, r5, #0
 80056d8:	bfaf      	iteee	ge
 80056da:	2300      	movge	r3, #0
 80056dc:	2201      	movlt	r2, #1
 80056de:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80056e2:	9303      	strlt	r3, [sp, #12]
 80056e4:	bfa8      	it	ge
 80056e6:	6033      	strge	r3, [r6, #0]
 80056e8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80056ec:	4b98      	ldr	r3, [pc, #608]	@ (8005950 <_dtoa_r+0x2d0>)
 80056ee:	bfb8      	it	lt
 80056f0:	6032      	strlt	r2, [r6, #0]
 80056f2:	ea33 0308 	bics.w	r3, r3, r8
 80056f6:	d112      	bne.n	800571e <_dtoa_r+0x9e>
 80056f8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80056fc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005704:	4323      	orrs	r3, r4
 8005706:	f000 8550 	beq.w	80061aa <_dtoa_r+0xb2a>
 800570a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800570c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005954 <_dtoa_r+0x2d4>
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 8552 	beq.w	80061ba <_dtoa_r+0xb3a>
 8005716:	f10a 0303 	add.w	r3, sl, #3
 800571a:	f000 bd4c 	b.w	80061b6 <_dtoa_r+0xb36>
 800571e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005722:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005726:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800572a:	2200      	movs	r2, #0
 800572c:	2300      	movs	r3, #0
 800572e:	f7fb f977 	bl	8000a20 <__aeabi_dcmpeq>
 8005732:	4607      	mov	r7, r0
 8005734:	b158      	cbz	r0, 800574e <_dtoa_r+0xce>
 8005736:	2301      	movs	r3, #1
 8005738:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800573a:	6013      	str	r3, [r2, #0]
 800573c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800573e:	b113      	cbz	r3, 8005746 <_dtoa_r+0xc6>
 8005740:	4b85      	ldr	r3, [pc, #532]	@ (8005958 <_dtoa_r+0x2d8>)
 8005742:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005744:	6013      	str	r3, [r2, #0]
 8005746:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800595c <_dtoa_r+0x2dc>
 800574a:	f000 bd36 	b.w	80061ba <_dtoa_r+0xb3a>
 800574e:	ab14      	add	r3, sp, #80	@ 0x50
 8005750:	9301      	str	r3, [sp, #4]
 8005752:	ab15      	add	r3, sp, #84	@ 0x54
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	4658      	mov	r0, fp
 8005758:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800575c:	f001 f8c8 	bl	80068f0 <__d2b>
 8005760:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005764:	4681      	mov	r9, r0
 8005766:	2e00      	cmp	r6, #0
 8005768:	d077      	beq.n	800585a <_dtoa_r+0x1da>
 800576a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800576e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005770:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005778:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800577c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005780:	9712      	str	r7, [sp, #72]	@ 0x48
 8005782:	4619      	mov	r1, r3
 8005784:	2200      	movs	r2, #0
 8005786:	4b76      	ldr	r3, [pc, #472]	@ (8005960 <_dtoa_r+0x2e0>)
 8005788:	f7fa fd2a 	bl	80001e0 <__aeabi_dsub>
 800578c:	a368      	add	r3, pc, #416	@ (adr r3, 8005930 <_dtoa_r+0x2b0>)
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	f7fa fedd 	bl	8000550 <__aeabi_dmul>
 8005796:	a368      	add	r3, pc, #416	@ (adr r3, 8005938 <_dtoa_r+0x2b8>)
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	f7fa fd22 	bl	80001e4 <__adddf3>
 80057a0:	4604      	mov	r4, r0
 80057a2:	4630      	mov	r0, r6
 80057a4:	460d      	mov	r5, r1
 80057a6:	f7fa fe69 	bl	800047c <__aeabi_i2d>
 80057aa:	a365      	add	r3, pc, #404	@ (adr r3, 8005940 <_dtoa_r+0x2c0>)
 80057ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b0:	f7fa fece 	bl	8000550 <__aeabi_dmul>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4620      	mov	r0, r4
 80057ba:	4629      	mov	r1, r5
 80057bc:	f7fa fd12 	bl	80001e4 <__adddf3>
 80057c0:	4604      	mov	r4, r0
 80057c2:	460d      	mov	r5, r1
 80057c4:	f7fb f974 	bl	8000ab0 <__aeabi_d2iz>
 80057c8:	2200      	movs	r2, #0
 80057ca:	4607      	mov	r7, r0
 80057cc:	2300      	movs	r3, #0
 80057ce:	4620      	mov	r0, r4
 80057d0:	4629      	mov	r1, r5
 80057d2:	f7fb f92f 	bl	8000a34 <__aeabi_dcmplt>
 80057d6:	b140      	cbz	r0, 80057ea <_dtoa_r+0x16a>
 80057d8:	4638      	mov	r0, r7
 80057da:	f7fa fe4f 	bl	800047c <__aeabi_i2d>
 80057de:	4622      	mov	r2, r4
 80057e0:	462b      	mov	r3, r5
 80057e2:	f7fb f91d 	bl	8000a20 <__aeabi_dcmpeq>
 80057e6:	b900      	cbnz	r0, 80057ea <_dtoa_r+0x16a>
 80057e8:	3f01      	subs	r7, #1
 80057ea:	2f16      	cmp	r7, #22
 80057ec:	d853      	bhi.n	8005896 <_dtoa_r+0x216>
 80057ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057f2:	4b5c      	ldr	r3, [pc, #368]	@ (8005964 <_dtoa_r+0x2e4>)
 80057f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fc:	f7fb f91a 	bl	8000a34 <__aeabi_dcmplt>
 8005800:	2800      	cmp	r0, #0
 8005802:	d04a      	beq.n	800589a <_dtoa_r+0x21a>
 8005804:	2300      	movs	r3, #0
 8005806:	3f01      	subs	r7, #1
 8005808:	930f      	str	r3, [sp, #60]	@ 0x3c
 800580a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800580c:	1b9b      	subs	r3, r3, r6
 800580e:	1e5a      	subs	r2, r3, #1
 8005810:	bf46      	itte	mi
 8005812:	f1c3 0801 	rsbmi	r8, r3, #1
 8005816:	2300      	movmi	r3, #0
 8005818:	f04f 0800 	movpl.w	r8, #0
 800581c:	9209      	str	r2, [sp, #36]	@ 0x24
 800581e:	bf48      	it	mi
 8005820:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005822:	2f00      	cmp	r7, #0
 8005824:	db3b      	blt.n	800589e <_dtoa_r+0x21e>
 8005826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005828:	970e      	str	r7, [sp, #56]	@ 0x38
 800582a:	443b      	add	r3, r7
 800582c:	9309      	str	r3, [sp, #36]	@ 0x24
 800582e:	2300      	movs	r3, #0
 8005830:	930a      	str	r3, [sp, #40]	@ 0x28
 8005832:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005834:	2b09      	cmp	r3, #9
 8005836:	d866      	bhi.n	8005906 <_dtoa_r+0x286>
 8005838:	2b05      	cmp	r3, #5
 800583a:	bfc4      	itt	gt
 800583c:	3b04      	subgt	r3, #4
 800583e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005840:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005842:	bfc8      	it	gt
 8005844:	2400      	movgt	r4, #0
 8005846:	f1a3 0302 	sub.w	r3, r3, #2
 800584a:	bfd8      	it	le
 800584c:	2401      	movle	r4, #1
 800584e:	2b03      	cmp	r3, #3
 8005850:	d864      	bhi.n	800591c <_dtoa_r+0x29c>
 8005852:	e8df f003 	tbb	[pc, r3]
 8005856:	382b      	.short	0x382b
 8005858:	5636      	.short	0x5636
 800585a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800585e:	441e      	add	r6, r3
 8005860:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005864:	2b20      	cmp	r3, #32
 8005866:	bfc1      	itttt	gt
 8005868:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800586c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005870:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005874:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005878:	bfd6      	itet	le
 800587a:	f1c3 0320 	rsble	r3, r3, #32
 800587e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005882:	fa04 f003 	lslle.w	r0, r4, r3
 8005886:	f7fa fde9 	bl	800045c <__aeabi_ui2d>
 800588a:	2201      	movs	r2, #1
 800588c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005890:	3e01      	subs	r6, #1
 8005892:	9212      	str	r2, [sp, #72]	@ 0x48
 8005894:	e775      	b.n	8005782 <_dtoa_r+0x102>
 8005896:	2301      	movs	r3, #1
 8005898:	e7b6      	b.n	8005808 <_dtoa_r+0x188>
 800589a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800589c:	e7b5      	b.n	800580a <_dtoa_r+0x18a>
 800589e:	427b      	negs	r3, r7
 80058a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80058a2:	2300      	movs	r3, #0
 80058a4:	eba8 0807 	sub.w	r8, r8, r7
 80058a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80058aa:	e7c2      	b.n	8005832 <_dtoa_r+0x1b2>
 80058ac:	2300      	movs	r3, #0
 80058ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	dc35      	bgt.n	8005922 <_dtoa_r+0x2a2>
 80058b6:	2301      	movs	r3, #1
 80058b8:	461a      	mov	r2, r3
 80058ba:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80058be:	9221      	str	r2, [sp, #132]	@ 0x84
 80058c0:	e00b      	b.n	80058da <_dtoa_r+0x25a>
 80058c2:	2301      	movs	r3, #1
 80058c4:	e7f3      	b.n	80058ae <_dtoa_r+0x22e>
 80058c6:	2300      	movs	r3, #0
 80058c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80058cc:	18fb      	adds	r3, r7, r3
 80058ce:	9308      	str	r3, [sp, #32]
 80058d0:	3301      	adds	r3, #1
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	9307      	str	r3, [sp, #28]
 80058d6:	bfb8      	it	lt
 80058d8:	2301      	movlt	r3, #1
 80058da:	2100      	movs	r1, #0
 80058dc:	2204      	movs	r2, #4
 80058de:	f8db 001c 	ldr.w	r0, [fp, #28]
 80058e2:	f102 0514 	add.w	r5, r2, #20
 80058e6:	429d      	cmp	r5, r3
 80058e8:	d91f      	bls.n	800592a <_dtoa_r+0x2aa>
 80058ea:	6041      	str	r1, [r0, #4]
 80058ec:	4658      	mov	r0, fp
 80058ee:	f000 fcd7 	bl	80062a0 <_Balloc>
 80058f2:	4682      	mov	sl, r0
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d139      	bne.n	800596c <_dtoa_r+0x2ec>
 80058f8:	4602      	mov	r2, r0
 80058fa:	f240 11af 	movw	r1, #431	@ 0x1af
 80058fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005968 <_dtoa_r+0x2e8>)
 8005900:	e6d2      	b.n	80056a8 <_dtoa_r+0x28>
 8005902:	2301      	movs	r3, #1
 8005904:	e7e0      	b.n	80058c8 <_dtoa_r+0x248>
 8005906:	2401      	movs	r4, #1
 8005908:	2300      	movs	r3, #0
 800590a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800590c:	9320      	str	r3, [sp, #128]	@ 0x80
 800590e:	f04f 33ff 	mov.w	r3, #4294967295
 8005912:	2200      	movs	r2, #0
 8005914:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005918:	2312      	movs	r3, #18
 800591a:	e7d0      	b.n	80058be <_dtoa_r+0x23e>
 800591c:	2301      	movs	r3, #1
 800591e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005920:	e7f5      	b.n	800590e <_dtoa_r+0x28e>
 8005922:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005924:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005928:	e7d7      	b.n	80058da <_dtoa_r+0x25a>
 800592a:	3101      	adds	r1, #1
 800592c:	0052      	lsls	r2, r2, #1
 800592e:	e7d8      	b.n	80058e2 <_dtoa_r+0x262>
 8005930:	636f4361 	.word	0x636f4361
 8005934:	3fd287a7 	.word	0x3fd287a7
 8005938:	8b60c8b3 	.word	0x8b60c8b3
 800593c:	3fc68a28 	.word	0x3fc68a28
 8005940:	509f79fb 	.word	0x509f79fb
 8005944:	3fd34413 	.word	0x3fd34413
 8005948:	08007189 	.word	0x08007189
 800594c:	080071a0 	.word	0x080071a0
 8005950:	7ff00000 	.word	0x7ff00000
 8005954:	08007185 	.word	0x08007185
 8005958:	08007159 	.word	0x08007159
 800595c:	08007158 	.word	0x08007158
 8005960:	3ff80000 	.word	0x3ff80000
 8005964:	08007298 	.word	0x08007298
 8005968:	080071f8 	.word	0x080071f8
 800596c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005970:	6018      	str	r0, [r3, #0]
 8005972:	9b07      	ldr	r3, [sp, #28]
 8005974:	2b0e      	cmp	r3, #14
 8005976:	f200 80a4 	bhi.w	8005ac2 <_dtoa_r+0x442>
 800597a:	2c00      	cmp	r4, #0
 800597c:	f000 80a1 	beq.w	8005ac2 <_dtoa_r+0x442>
 8005980:	2f00      	cmp	r7, #0
 8005982:	dd33      	ble.n	80059ec <_dtoa_r+0x36c>
 8005984:	4b86      	ldr	r3, [pc, #536]	@ (8005ba0 <_dtoa_r+0x520>)
 8005986:	f007 020f 	and.w	r2, r7, #15
 800598a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800598e:	05f8      	lsls	r0, r7, #23
 8005990:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005994:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005998:	ea4f 1427 	mov.w	r4, r7, asr #4
 800599c:	d516      	bpl.n	80059cc <_dtoa_r+0x34c>
 800599e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059a2:	4b80      	ldr	r3, [pc, #512]	@ (8005ba4 <_dtoa_r+0x524>)
 80059a4:	2603      	movs	r6, #3
 80059a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059aa:	f7fa fefb 	bl	80007a4 <__aeabi_ddiv>
 80059ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059b2:	f004 040f 	and.w	r4, r4, #15
 80059b6:	4d7b      	ldr	r5, [pc, #492]	@ (8005ba4 <_dtoa_r+0x524>)
 80059b8:	b954      	cbnz	r4, 80059d0 <_dtoa_r+0x350>
 80059ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059c2:	f7fa feef 	bl	80007a4 <__aeabi_ddiv>
 80059c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059ca:	e028      	b.n	8005a1e <_dtoa_r+0x39e>
 80059cc:	2602      	movs	r6, #2
 80059ce:	e7f2      	b.n	80059b6 <_dtoa_r+0x336>
 80059d0:	07e1      	lsls	r1, r4, #31
 80059d2:	d508      	bpl.n	80059e6 <_dtoa_r+0x366>
 80059d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059dc:	f7fa fdb8 	bl	8000550 <__aeabi_dmul>
 80059e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059e4:	3601      	adds	r6, #1
 80059e6:	1064      	asrs	r4, r4, #1
 80059e8:	3508      	adds	r5, #8
 80059ea:	e7e5      	b.n	80059b8 <_dtoa_r+0x338>
 80059ec:	f000 80d2 	beq.w	8005b94 <_dtoa_r+0x514>
 80059f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059f4:	427c      	negs	r4, r7
 80059f6:	4b6a      	ldr	r3, [pc, #424]	@ (8005ba0 <_dtoa_r+0x520>)
 80059f8:	f004 020f 	and.w	r2, r4, #15
 80059fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a04:	f7fa fda4 	bl	8000550 <__aeabi_dmul>
 8005a08:	2602      	movs	r6, #2
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a10:	4d64      	ldr	r5, [pc, #400]	@ (8005ba4 <_dtoa_r+0x524>)
 8005a12:	1124      	asrs	r4, r4, #4
 8005a14:	2c00      	cmp	r4, #0
 8005a16:	f040 80b2 	bne.w	8005b7e <_dtoa_r+0x4fe>
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1d3      	bne.n	80059c6 <_dtoa_r+0x346>
 8005a1e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005a22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 80b7 	beq.w	8005b98 <_dtoa_r+0x518>
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	4629      	mov	r1, r5
 8005a30:	4b5d      	ldr	r3, [pc, #372]	@ (8005ba8 <_dtoa_r+0x528>)
 8005a32:	f7fa ffff 	bl	8000a34 <__aeabi_dcmplt>
 8005a36:	2800      	cmp	r0, #0
 8005a38:	f000 80ae 	beq.w	8005b98 <_dtoa_r+0x518>
 8005a3c:	9b07      	ldr	r3, [sp, #28]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f000 80aa 	beq.w	8005b98 <_dtoa_r+0x518>
 8005a44:	9b08      	ldr	r3, [sp, #32]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	dd37      	ble.n	8005aba <_dtoa_r+0x43a>
 8005a4a:	1e7b      	subs	r3, r7, #1
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	9304      	str	r3, [sp, #16]
 8005a50:	2200      	movs	r2, #0
 8005a52:	4629      	mov	r1, r5
 8005a54:	4b55      	ldr	r3, [pc, #340]	@ (8005bac <_dtoa_r+0x52c>)
 8005a56:	f7fa fd7b 	bl	8000550 <__aeabi_dmul>
 8005a5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a5e:	9c08      	ldr	r4, [sp, #32]
 8005a60:	3601      	adds	r6, #1
 8005a62:	4630      	mov	r0, r6
 8005a64:	f7fa fd0a 	bl	800047c <__aeabi_i2d>
 8005a68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a6c:	f7fa fd70 	bl	8000550 <__aeabi_dmul>
 8005a70:	2200      	movs	r2, #0
 8005a72:	4b4f      	ldr	r3, [pc, #316]	@ (8005bb0 <_dtoa_r+0x530>)
 8005a74:	f7fa fbb6 	bl	80001e4 <__adddf3>
 8005a78:	4605      	mov	r5, r0
 8005a7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a7e:	2c00      	cmp	r4, #0
 8005a80:	f040 809a 	bne.w	8005bb8 <_dtoa_r+0x538>
 8005a84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8005bb4 <_dtoa_r+0x534>)
 8005a8c:	f7fa fba8 	bl	80001e0 <__aeabi_dsub>
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a98:	462a      	mov	r2, r5
 8005a9a:	4633      	mov	r3, r6
 8005a9c:	f7fa ffe8 	bl	8000a70 <__aeabi_dcmpgt>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	f040 828e 	bne.w	8005fc2 <_dtoa_r+0x942>
 8005aa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005aaa:	462a      	mov	r2, r5
 8005aac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005ab0:	f7fa ffc0 	bl	8000a34 <__aeabi_dcmplt>
 8005ab4:	2800      	cmp	r0, #0
 8005ab6:	f040 8127 	bne.w	8005d08 <_dtoa_r+0x688>
 8005aba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005abe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005ac2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f2c0 8163 	blt.w	8005d90 <_dtoa_r+0x710>
 8005aca:	2f0e      	cmp	r7, #14
 8005acc:	f300 8160 	bgt.w	8005d90 <_dtoa_r+0x710>
 8005ad0:	4b33      	ldr	r3, [pc, #204]	@ (8005ba0 <_dtoa_r+0x520>)
 8005ad2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ad6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ada:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005ade:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	da03      	bge.n	8005aec <_dtoa_r+0x46c>
 8005ae4:	9b07      	ldr	r3, [sp, #28]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f340 8100 	ble.w	8005cec <_dtoa_r+0x66c>
 8005aec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005af0:	4656      	mov	r6, sl
 8005af2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005af6:	4620      	mov	r0, r4
 8005af8:	4629      	mov	r1, r5
 8005afa:	f7fa fe53 	bl	80007a4 <__aeabi_ddiv>
 8005afe:	f7fa ffd7 	bl	8000ab0 <__aeabi_d2iz>
 8005b02:	4680      	mov	r8, r0
 8005b04:	f7fa fcba 	bl	800047c <__aeabi_i2d>
 8005b08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b0c:	f7fa fd20 	bl	8000550 <__aeabi_dmul>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	4620      	mov	r0, r4
 8005b16:	4629      	mov	r1, r5
 8005b18:	f7fa fb62 	bl	80001e0 <__aeabi_dsub>
 8005b1c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005b20:	9d07      	ldr	r5, [sp, #28]
 8005b22:	f806 4b01 	strb.w	r4, [r6], #1
 8005b26:	eba6 040a 	sub.w	r4, r6, sl
 8005b2a:	42a5      	cmp	r5, r4
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	f040 8116 	bne.w	8005d60 <_dtoa_r+0x6e0>
 8005b34:	f7fa fb56 	bl	80001e4 <__adddf3>
 8005b38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	460d      	mov	r5, r1
 8005b40:	f7fa ff96 	bl	8000a70 <__aeabi_dcmpgt>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	f040 80f8 	bne.w	8005d3a <_dtoa_r+0x6ba>
 8005b4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b4e:	4620      	mov	r0, r4
 8005b50:	4629      	mov	r1, r5
 8005b52:	f7fa ff65 	bl	8000a20 <__aeabi_dcmpeq>
 8005b56:	b118      	cbz	r0, 8005b60 <_dtoa_r+0x4e0>
 8005b58:	f018 0f01 	tst.w	r8, #1
 8005b5c:	f040 80ed 	bne.w	8005d3a <_dtoa_r+0x6ba>
 8005b60:	4649      	mov	r1, r9
 8005b62:	4658      	mov	r0, fp
 8005b64:	f000 fbdc 	bl	8006320 <_Bfree>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	7033      	strb	r3, [r6, #0]
 8005b6c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005b6e:	3701      	adds	r7, #1
 8005b70:	601f      	str	r7, [r3, #0]
 8005b72:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8320 	beq.w	80061ba <_dtoa_r+0xb3a>
 8005b7a:	601e      	str	r6, [r3, #0]
 8005b7c:	e31d      	b.n	80061ba <_dtoa_r+0xb3a>
 8005b7e:	07e2      	lsls	r2, r4, #31
 8005b80:	d505      	bpl.n	8005b8e <_dtoa_r+0x50e>
 8005b82:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b86:	f7fa fce3 	bl	8000550 <__aeabi_dmul>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	3601      	adds	r6, #1
 8005b8e:	1064      	asrs	r4, r4, #1
 8005b90:	3508      	adds	r5, #8
 8005b92:	e73f      	b.n	8005a14 <_dtoa_r+0x394>
 8005b94:	2602      	movs	r6, #2
 8005b96:	e742      	b.n	8005a1e <_dtoa_r+0x39e>
 8005b98:	9c07      	ldr	r4, [sp, #28]
 8005b9a:	9704      	str	r7, [sp, #16]
 8005b9c:	e761      	b.n	8005a62 <_dtoa_r+0x3e2>
 8005b9e:	bf00      	nop
 8005ba0:	08007298 	.word	0x08007298
 8005ba4:	08007270 	.word	0x08007270
 8005ba8:	3ff00000 	.word	0x3ff00000
 8005bac:	40240000 	.word	0x40240000
 8005bb0:	401c0000 	.word	0x401c0000
 8005bb4:	40140000 	.word	0x40140000
 8005bb8:	4b70      	ldr	r3, [pc, #448]	@ (8005d7c <_dtoa_r+0x6fc>)
 8005bba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005bbc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005bc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005bc4:	4454      	add	r4, sl
 8005bc6:	2900      	cmp	r1, #0
 8005bc8:	d045      	beq.n	8005c56 <_dtoa_r+0x5d6>
 8005bca:	2000      	movs	r0, #0
 8005bcc:	496c      	ldr	r1, [pc, #432]	@ (8005d80 <_dtoa_r+0x700>)
 8005bce:	f7fa fde9 	bl	80007a4 <__aeabi_ddiv>
 8005bd2:	4633      	mov	r3, r6
 8005bd4:	462a      	mov	r2, r5
 8005bd6:	f7fa fb03 	bl	80001e0 <__aeabi_dsub>
 8005bda:	4656      	mov	r6, sl
 8005bdc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005be0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005be4:	f7fa ff64 	bl	8000ab0 <__aeabi_d2iz>
 8005be8:	4605      	mov	r5, r0
 8005bea:	f7fa fc47 	bl	800047c <__aeabi_i2d>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bf6:	f7fa faf3 	bl	80001e0 <__aeabi_dsub>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	3530      	adds	r5, #48	@ 0x30
 8005c00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c08:	f806 5b01 	strb.w	r5, [r6], #1
 8005c0c:	f7fa ff12 	bl	8000a34 <__aeabi_dcmplt>
 8005c10:	2800      	cmp	r0, #0
 8005c12:	d163      	bne.n	8005cdc <_dtoa_r+0x65c>
 8005c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c18:	2000      	movs	r0, #0
 8005c1a:	495a      	ldr	r1, [pc, #360]	@ (8005d84 <_dtoa_r+0x704>)
 8005c1c:	f7fa fae0 	bl	80001e0 <__aeabi_dsub>
 8005c20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c24:	f7fa ff06 	bl	8000a34 <__aeabi_dcmplt>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	f040 8087 	bne.w	8005d3c <_dtoa_r+0x6bc>
 8005c2e:	42a6      	cmp	r6, r4
 8005c30:	f43f af43 	beq.w	8005aba <_dtoa_r+0x43a>
 8005c34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4b53      	ldr	r3, [pc, #332]	@ (8005d88 <_dtoa_r+0x708>)
 8005c3c:	f7fa fc88 	bl	8000550 <__aeabi_dmul>
 8005c40:	2200      	movs	r2, #0
 8005c42:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c4a:	4b4f      	ldr	r3, [pc, #316]	@ (8005d88 <_dtoa_r+0x708>)
 8005c4c:	f7fa fc80 	bl	8000550 <__aeabi_dmul>
 8005c50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c54:	e7c4      	b.n	8005be0 <_dtoa_r+0x560>
 8005c56:	4631      	mov	r1, r6
 8005c58:	4628      	mov	r0, r5
 8005c5a:	f7fa fc79 	bl	8000550 <__aeabi_dmul>
 8005c5e:	4656      	mov	r6, sl
 8005c60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c64:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c6a:	f7fa ff21 	bl	8000ab0 <__aeabi_d2iz>
 8005c6e:	4605      	mov	r5, r0
 8005c70:	f7fa fc04 	bl	800047c <__aeabi_i2d>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c7c:	f7fa fab0 	bl	80001e0 <__aeabi_dsub>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	3530      	adds	r5, #48	@ 0x30
 8005c86:	f806 5b01 	strb.w	r5, [r6], #1
 8005c8a:	42a6      	cmp	r6, r4
 8005c8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	d124      	bne.n	8005ce0 <_dtoa_r+0x660>
 8005c96:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c9a:	4b39      	ldr	r3, [pc, #228]	@ (8005d80 <_dtoa_r+0x700>)
 8005c9c:	f7fa faa2 	bl	80001e4 <__adddf3>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ca8:	f7fa fee2 	bl	8000a70 <__aeabi_dcmpgt>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	d145      	bne.n	8005d3c <_dtoa_r+0x6bc>
 8005cb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	4932      	ldr	r1, [pc, #200]	@ (8005d80 <_dtoa_r+0x700>)
 8005cb8:	f7fa fa92 	bl	80001e0 <__aeabi_dsub>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cc4:	f7fa feb6 	bl	8000a34 <__aeabi_dcmplt>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	f43f aef6 	beq.w	8005aba <_dtoa_r+0x43a>
 8005cce:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005cd0:	1e73      	subs	r3, r6, #1
 8005cd2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005cd4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005cd8:	2b30      	cmp	r3, #48	@ 0x30
 8005cda:	d0f8      	beq.n	8005cce <_dtoa_r+0x64e>
 8005cdc:	9f04      	ldr	r7, [sp, #16]
 8005cde:	e73f      	b.n	8005b60 <_dtoa_r+0x4e0>
 8005ce0:	4b29      	ldr	r3, [pc, #164]	@ (8005d88 <_dtoa_r+0x708>)
 8005ce2:	f7fa fc35 	bl	8000550 <__aeabi_dmul>
 8005ce6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cea:	e7bc      	b.n	8005c66 <_dtoa_r+0x5e6>
 8005cec:	d10c      	bne.n	8005d08 <_dtoa_r+0x688>
 8005cee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	4b25      	ldr	r3, [pc, #148]	@ (8005d8c <_dtoa_r+0x70c>)
 8005cf6:	f7fa fc2b 	bl	8000550 <__aeabi_dmul>
 8005cfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cfe:	f7fa fead 	bl	8000a5c <__aeabi_dcmpge>
 8005d02:	2800      	cmp	r0, #0
 8005d04:	f000 815b 	beq.w	8005fbe <_dtoa_r+0x93e>
 8005d08:	2400      	movs	r4, #0
 8005d0a:	4625      	mov	r5, r4
 8005d0c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d0e:	4656      	mov	r6, sl
 8005d10:	43db      	mvns	r3, r3
 8005d12:	9304      	str	r3, [sp, #16]
 8005d14:	2700      	movs	r7, #0
 8005d16:	4621      	mov	r1, r4
 8005d18:	4658      	mov	r0, fp
 8005d1a:	f000 fb01 	bl	8006320 <_Bfree>
 8005d1e:	2d00      	cmp	r5, #0
 8005d20:	d0dc      	beq.n	8005cdc <_dtoa_r+0x65c>
 8005d22:	b12f      	cbz	r7, 8005d30 <_dtoa_r+0x6b0>
 8005d24:	42af      	cmp	r7, r5
 8005d26:	d003      	beq.n	8005d30 <_dtoa_r+0x6b0>
 8005d28:	4639      	mov	r1, r7
 8005d2a:	4658      	mov	r0, fp
 8005d2c:	f000 faf8 	bl	8006320 <_Bfree>
 8005d30:	4629      	mov	r1, r5
 8005d32:	4658      	mov	r0, fp
 8005d34:	f000 faf4 	bl	8006320 <_Bfree>
 8005d38:	e7d0      	b.n	8005cdc <_dtoa_r+0x65c>
 8005d3a:	9704      	str	r7, [sp, #16]
 8005d3c:	4633      	mov	r3, r6
 8005d3e:	461e      	mov	r6, r3
 8005d40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d44:	2a39      	cmp	r2, #57	@ 0x39
 8005d46:	d107      	bne.n	8005d58 <_dtoa_r+0x6d8>
 8005d48:	459a      	cmp	sl, r3
 8005d4a:	d1f8      	bne.n	8005d3e <_dtoa_r+0x6be>
 8005d4c:	9a04      	ldr	r2, [sp, #16]
 8005d4e:	3201      	adds	r2, #1
 8005d50:	9204      	str	r2, [sp, #16]
 8005d52:	2230      	movs	r2, #48	@ 0x30
 8005d54:	f88a 2000 	strb.w	r2, [sl]
 8005d58:	781a      	ldrb	r2, [r3, #0]
 8005d5a:	3201      	adds	r2, #1
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	e7bd      	b.n	8005cdc <_dtoa_r+0x65c>
 8005d60:	2200      	movs	r2, #0
 8005d62:	4b09      	ldr	r3, [pc, #36]	@ (8005d88 <_dtoa_r+0x708>)
 8005d64:	f7fa fbf4 	bl	8000550 <__aeabi_dmul>
 8005d68:	2200      	movs	r2, #0
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	460d      	mov	r5, r1
 8005d70:	f7fa fe56 	bl	8000a20 <__aeabi_dcmpeq>
 8005d74:	2800      	cmp	r0, #0
 8005d76:	f43f aebc 	beq.w	8005af2 <_dtoa_r+0x472>
 8005d7a:	e6f1      	b.n	8005b60 <_dtoa_r+0x4e0>
 8005d7c:	08007298 	.word	0x08007298
 8005d80:	3fe00000 	.word	0x3fe00000
 8005d84:	3ff00000 	.word	0x3ff00000
 8005d88:	40240000 	.word	0x40240000
 8005d8c:	40140000 	.word	0x40140000
 8005d90:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005d92:	2a00      	cmp	r2, #0
 8005d94:	f000 80db 	beq.w	8005f4e <_dtoa_r+0x8ce>
 8005d98:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005d9a:	2a01      	cmp	r2, #1
 8005d9c:	f300 80bf 	bgt.w	8005f1e <_dtoa_r+0x89e>
 8005da0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005da2:	2a00      	cmp	r2, #0
 8005da4:	f000 80b7 	beq.w	8005f16 <_dtoa_r+0x896>
 8005da8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005dac:	4646      	mov	r6, r8
 8005dae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005db0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005db2:	2101      	movs	r1, #1
 8005db4:	441a      	add	r2, r3
 8005db6:	4658      	mov	r0, fp
 8005db8:	4498      	add	r8, r3
 8005dba:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dbc:	f000 fb64 	bl	8006488 <__i2b>
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	b15e      	cbz	r6, 8005ddc <_dtoa_r+0x75c>
 8005dc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	dd08      	ble.n	8005ddc <_dtoa_r+0x75c>
 8005dca:	42b3      	cmp	r3, r6
 8005dcc:	bfa8      	it	ge
 8005dce:	4633      	movge	r3, r6
 8005dd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dd2:	eba8 0803 	sub.w	r8, r8, r3
 8005dd6:	1af6      	subs	r6, r6, r3
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dde:	b1f3      	cbz	r3, 8005e1e <_dtoa_r+0x79e>
 8005de0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 80b7 	beq.w	8005f56 <_dtoa_r+0x8d6>
 8005de8:	b18c      	cbz	r4, 8005e0e <_dtoa_r+0x78e>
 8005dea:	4629      	mov	r1, r5
 8005dec:	4622      	mov	r2, r4
 8005dee:	4658      	mov	r0, fp
 8005df0:	f000 fc08 	bl	8006604 <__pow5mult>
 8005df4:	464a      	mov	r2, r9
 8005df6:	4601      	mov	r1, r0
 8005df8:	4605      	mov	r5, r0
 8005dfa:	4658      	mov	r0, fp
 8005dfc:	f000 fb5a 	bl	80064b4 <__multiply>
 8005e00:	4649      	mov	r1, r9
 8005e02:	9004      	str	r0, [sp, #16]
 8005e04:	4658      	mov	r0, fp
 8005e06:	f000 fa8b 	bl	8006320 <_Bfree>
 8005e0a:	9b04      	ldr	r3, [sp, #16]
 8005e0c:	4699      	mov	r9, r3
 8005e0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e10:	1b1a      	subs	r2, r3, r4
 8005e12:	d004      	beq.n	8005e1e <_dtoa_r+0x79e>
 8005e14:	4649      	mov	r1, r9
 8005e16:	4658      	mov	r0, fp
 8005e18:	f000 fbf4 	bl	8006604 <__pow5mult>
 8005e1c:	4681      	mov	r9, r0
 8005e1e:	2101      	movs	r1, #1
 8005e20:	4658      	mov	r0, fp
 8005e22:	f000 fb31 	bl	8006488 <__i2b>
 8005e26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e28:	4604      	mov	r4, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 81c9 	beq.w	80061c2 <_dtoa_r+0xb42>
 8005e30:	461a      	mov	r2, r3
 8005e32:	4601      	mov	r1, r0
 8005e34:	4658      	mov	r0, fp
 8005e36:	f000 fbe5 	bl	8006604 <__pow5mult>
 8005e3a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	f300 808f 	bgt.w	8005f62 <_dtoa_r+0x8e2>
 8005e44:	9b02      	ldr	r3, [sp, #8]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f040 8087 	bne.w	8005f5a <_dtoa_r+0x8da>
 8005e4c:	9b03      	ldr	r3, [sp, #12]
 8005e4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f040 8083 	bne.w	8005f5e <_dtoa_r+0x8de>
 8005e58:	9b03      	ldr	r3, [sp, #12]
 8005e5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e5e:	0d1b      	lsrs	r3, r3, #20
 8005e60:	051b      	lsls	r3, r3, #20
 8005e62:	b12b      	cbz	r3, 8005e70 <_dtoa_r+0x7f0>
 8005e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e66:	f108 0801 	add.w	r8, r8, #1
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e6e:	2301      	movs	r3, #1
 8005e70:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 81aa 	beq.w	80061ce <_dtoa_r+0xb4e>
 8005e7a:	6923      	ldr	r3, [r4, #16]
 8005e7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e80:	6918      	ldr	r0, [r3, #16]
 8005e82:	f000 fab5 	bl	80063f0 <__hi0bits>
 8005e86:	f1c0 0020 	rsb	r0, r0, #32
 8005e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e8c:	4418      	add	r0, r3
 8005e8e:	f010 001f 	ands.w	r0, r0, #31
 8005e92:	d071      	beq.n	8005f78 <_dtoa_r+0x8f8>
 8005e94:	f1c0 0320 	rsb	r3, r0, #32
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	dd65      	ble.n	8005f68 <_dtoa_r+0x8e8>
 8005e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e9e:	f1c0 001c 	rsb	r0, r0, #28
 8005ea2:	4403      	add	r3, r0
 8005ea4:	4480      	add	r8, r0
 8005ea6:	4406      	add	r6, r0
 8005ea8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eaa:	f1b8 0f00 	cmp.w	r8, #0
 8005eae:	dd05      	ble.n	8005ebc <_dtoa_r+0x83c>
 8005eb0:	4649      	mov	r1, r9
 8005eb2:	4642      	mov	r2, r8
 8005eb4:	4658      	mov	r0, fp
 8005eb6:	f000 fbff 	bl	80066b8 <__lshift>
 8005eba:	4681      	mov	r9, r0
 8005ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	dd05      	ble.n	8005ece <_dtoa_r+0x84e>
 8005ec2:	4621      	mov	r1, r4
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	4658      	mov	r0, fp
 8005ec8:	f000 fbf6 	bl	80066b8 <__lshift>
 8005ecc:	4604      	mov	r4, r0
 8005ece:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d053      	beq.n	8005f7c <_dtoa_r+0x8fc>
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	4648      	mov	r0, r9
 8005ed8:	f000 fc5a 	bl	8006790 <__mcmp>
 8005edc:	2800      	cmp	r0, #0
 8005ede:	da4d      	bge.n	8005f7c <_dtoa_r+0x8fc>
 8005ee0:	1e7b      	subs	r3, r7, #1
 8005ee2:	4649      	mov	r1, r9
 8005ee4:	9304      	str	r3, [sp, #16]
 8005ee6:	220a      	movs	r2, #10
 8005ee8:	2300      	movs	r3, #0
 8005eea:	4658      	mov	r0, fp
 8005eec:	f000 fa3a 	bl	8006364 <__multadd>
 8005ef0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ef2:	4681      	mov	r9, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 816c 	beq.w	80061d2 <_dtoa_r+0xb52>
 8005efa:	2300      	movs	r3, #0
 8005efc:	4629      	mov	r1, r5
 8005efe:	220a      	movs	r2, #10
 8005f00:	4658      	mov	r0, fp
 8005f02:	f000 fa2f 	bl	8006364 <__multadd>
 8005f06:	9b08      	ldr	r3, [sp, #32]
 8005f08:	4605      	mov	r5, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	dc61      	bgt.n	8005fd2 <_dtoa_r+0x952>
 8005f0e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	dc3b      	bgt.n	8005f8c <_dtoa_r+0x90c>
 8005f14:	e05d      	b.n	8005fd2 <_dtoa_r+0x952>
 8005f16:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f18:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005f1c:	e746      	b.n	8005dac <_dtoa_r+0x72c>
 8005f1e:	9b07      	ldr	r3, [sp, #28]
 8005f20:	1e5c      	subs	r4, r3, #1
 8005f22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f24:	42a3      	cmp	r3, r4
 8005f26:	bfbf      	itttt	lt
 8005f28:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005f2a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005f2c:	1ae3      	sublt	r3, r4, r3
 8005f2e:	18d2      	addlt	r2, r2, r3
 8005f30:	bfa8      	it	ge
 8005f32:	1b1c      	subge	r4, r3, r4
 8005f34:	9b07      	ldr	r3, [sp, #28]
 8005f36:	bfbe      	ittt	lt
 8005f38:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005f3a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005f3c:	2400      	movlt	r4, #0
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	bfb5      	itete	lt
 8005f42:	eba8 0603 	sublt.w	r6, r8, r3
 8005f46:	4646      	movge	r6, r8
 8005f48:	2300      	movlt	r3, #0
 8005f4a:	9b07      	ldrge	r3, [sp, #28]
 8005f4c:	e730      	b.n	8005db0 <_dtoa_r+0x730>
 8005f4e:	4646      	mov	r6, r8
 8005f50:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f52:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005f54:	e735      	b.n	8005dc2 <_dtoa_r+0x742>
 8005f56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f58:	e75c      	b.n	8005e14 <_dtoa_r+0x794>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e788      	b.n	8005e70 <_dtoa_r+0x7f0>
 8005f5e:	9b02      	ldr	r3, [sp, #8]
 8005f60:	e786      	b.n	8005e70 <_dtoa_r+0x7f0>
 8005f62:	2300      	movs	r3, #0
 8005f64:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f66:	e788      	b.n	8005e7a <_dtoa_r+0x7fa>
 8005f68:	d09f      	beq.n	8005eaa <_dtoa_r+0x82a>
 8005f6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f6c:	331c      	adds	r3, #28
 8005f6e:	441a      	add	r2, r3
 8005f70:	4498      	add	r8, r3
 8005f72:	441e      	add	r6, r3
 8005f74:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f76:	e798      	b.n	8005eaa <_dtoa_r+0x82a>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	e7f6      	b.n	8005f6a <_dtoa_r+0x8ea>
 8005f7c:	9b07      	ldr	r3, [sp, #28]
 8005f7e:	9704      	str	r7, [sp, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	dc20      	bgt.n	8005fc6 <_dtoa_r+0x946>
 8005f84:	9308      	str	r3, [sp, #32]
 8005f86:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	dd1e      	ble.n	8005fca <_dtoa_r+0x94a>
 8005f8c:	9b08      	ldr	r3, [sp, #32]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f47f aebc 	bne.w	8005d0c <_dtoa_r+0x68c>
 8005f94:	4621      	mov	r1, r4
 8005f96:	2205      	movs	r2, #5
 8005f98:	4658      	mov	r0, fp
 8005f9a:	f000 f9e3 	bl	8006364 <__multadd>
 8005f9e:	4601      	mov	r1, r0
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	4648      	mov	r0, r9
 8005fa4:	f000 fbf4 	bl	8006790 <__mcmp>
 8005fa8:	2800      	cmp	r0, #0
 8005faa:	f77f aeaf 	ble.w	8005d0c <_dtoa_r+0x68c>
 8005fae:	2331      	movs	r3, #49	@ 0x31
 8005fb0:	4656      	mov	r6, sl
 8005fb2:	f806 3b01 	strb.w	r3, [r6], #1
 8005fb6:	9b04      	ldr	r3, [sp, #16]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	9304      	str	r3, [sp, #16]
 8005fbc:	e6aa      	b.n	8005d14 <_dtoa_r+0x694>
 8005fbe:	9c07      	ldr	r4, [sp, #28]
 8005fc0:	9704      	str	r7, [sp, #16]
 8005fc2:	4625      	mov	r5, r4
 8005fc4:	e7f3      	b.n	8005fae <_dtoa_r+0x92e>
 8005fc6:	9b07      	ldr	r3, [sp, #28]
 8005fc8:	9308      	str	r3, [sp, #32]
 8005fca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f000 8104 	beq.w	80061da <_dtoa_r+0xb5a>
 8005fd2:	2e00      	cmp	r6, #0
 8005fd4:	dd05      	ble.n	8005fe2 <_dtoa_r+0x962>
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	4632      	mov	r2, r6
 8005fda:	4658      	mov	r0, fp
 8005fdc:	f000 fb6c 	bl	80066b8 <__lshift>
 8005fe0:	4605      	mov	r5, r0
 8005fe2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d05a      	beq.n	800609e <_dtoa_r+0xa1e>
 8005fe8:	4658      	mov	r0, fp
 8005fea:	6869      	ldr	r1, [r5, #4]
 8005fec:	f000 f958 	bl	80062a0 <_Balloc>
 8005ff0:	4606      	mov	r6, r0
 8005ff2:	b928      	cbnz	r0, 8006000 <_dtoa_r+0x980>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005ffa:	4b83      	ldr	r3, [pc, #524]	@ (8006208 <_dtoa_r+0xb88>)
 8005ffc:	f7ff bb54 	b.w	80056a8 <_dtoa_r+0x28>
 8006000:	692a      	ldr	r2, [r5, #16]
 8006002:	f105 010c 	add.w	r1, r5, #12
 8006006:	3202      	adds	r2, #2
 8006008:	0092      	lsls	r2, r2, #2
 800600a:	300c      	adds	r0, #12
 800600c:	f000 ff44 	bl	8006e98 <memcpy>
 8006010:	2201      	movs	r2, #1
 8006012:	4631      	mov	r1, r6
 8006014:	4658      	mov	r0, fp
 8006016:	f000 fb4f 	bl	80066b8 <__lshift>
 800601a:	462f      	mov	r7, r5
 800601c:	4605      	mov	r5, r0
 800601e:	f10a 0301 	add.w	r3, sl, #1
 8006022:	9307      	str	r3, [sp, #28]
 8006024:	9b08      	ldr	r3, [sp, #32]
 8006026:	4453      	add	r3, sl
 8006028:	930b      	str	r3, [sp, #44]	@ 0x2c
 800602a:	9b02      	ldr	r3, [sp, #8]
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	930a      	str	r3, [sp, #40]	@ 0x28
 8006032:	9b07      	ldr	r3, [sp, #28]
 8006034:	4621      	mov	r1, r4
 8006036:	3b01      	subs	r3, #1
 8006038:	4648      	mov	r0, r9
 800603a:	9302      	str	r3, [sp, #8]
 800603c:	f7ff fa95 	bl	800556a <quorem>
 8006040:	4639      	mov	r1, r7
 8006042:	9008      	str	r0, [sp, #32]
 8006044:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006048:	4648      	mov	r0, r9
 800604a:	f000 fba1 	bl	8006790 <__mcmp>
 800604e:	462a      	mov	r2, r5
 8006050:	9009      	str	r0, [sp, #36]	@ 0x24
 8006052:	4621      	mov	r1, r4
 8006054:	4658      	mov	r0, fp
 8006056:	f000 fbb7 	bl	80067c8 <__mdiff>
 800605a:	68c2      	ldr	r2, [r0, #12]
 800605c:	4606      	mov	r6, r0
 800605e:	bb02      	cbnz	r2, 80060a2 <_dtoa_r+0xa22>
 8006060:	4601      	mov	r1, r0
 8006062:	4648      	mov	r0, r9
 8006064:	f000 fb94 	bl	8006790 <__mcmp>
 8006068:	4602      	mov	r2, r0
 800606a:	4631      	mov	r1, r6
 800606c:	4658      	mov	r0, fp
 800606e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006070:	f000 f956 	bl	8006320 <_Bfree>
 8006074:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006076:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006078:	9e07      	ldr	r6, [sp, #28]
 800607a:	ea43 0102 	orr.w	r1, r3, r2
 800607e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006080:	4319      	orrs	r1, r3
 8006082:	d110      	bne.n	80060a6 <_dtoa_r+0xa26>
 8006084:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006088:	d029      	beq.n	80060de <_dtoa_r+0xa5e>
 800608a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800608c:	2b00      	cmp	r3, #0
 800608e:	dd02      	ble.n	8006096 <_dtoa_r+0xa16>
 8006090:	9b08      	ldr	r3, [sp, #32]
 8006092:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006096:	9b02      	ldr	r3, [sp, #8]
 8006098:	f883 8000 	strb.w	r8, [r3]
 800609c:	e63b      	b.n	8005d16 <_dtoa_r+0x696>
 800609e:	4628      	mov	r0, r5
 80060a0:	e7bb      	b.n	800601a <_dtoa_r+0x99a>
 80060a2:	2201      	movs	r2, #1
 80060a4:	e7e1      	b.n	800606a <_dtoa_r+0x9ea>
 80060a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	db04      	blt.n	80060b6 <_dtoa_r+0xa36>
 80060ac:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80060ae:	430b      	orrs	r3, r1
 80060b0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060b2:	430b      	orrs	r3, r1
 80060b4:	d120      	bne.n	80060f8 <_dtoa_r+0xa78>
 80060b6:	2a00      	cmp	r2, #0
 80060b8:	dded      	ble.n	8006096 <_dtoa_r+0xa16>
 80060ba:	4649      	mov	r1, r9
 80060bc:	2201      	movs	r2, #1
 80060be:	4658      	mov	r0, fp
 80060c0:	f000 fafa 	bl	80066b8 <__lshift>
 80060c4:	4621      	mov	r1, r4
 80060c6:	4681      	mov	r9, r0
 80060c8:	f000 fb62 	bl	8006790 <__mcmp>
 80060cc:	2800      	cmp	r0, #0
 80060ce:	dc03      	bgt.n	80060d8 <_dtoa_r+0xa58>
 80060d0:	d1e1      	bne.n	8006096 <_dtoa_r+0xa16>
 80060d2:	f018 0f01 	tst.w	r8, #1
 80060d6:	d0de      	beq.n	8006096 <_dtoa_r+0xa16>
 80060d8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060dc:	d1d8      	bne.n	8006090 <_dtoa_r+0xa10>
 80060de:	2339      	movs	r3, #57	@ 0x39
 80060e0:	9a02      	ldr	r2, [sp, #8]
 80060e2:	7013      	strb	r3, [r2, #0]
 80060e4:	4633      	mov	r3, r6
 80060e6:	461e      	mov	r6, r3
 80060e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80060ec:	3b01      	subs	r3, #1
 80060ee:	2a39      	cmp	r2, #57	@ 0x39
 80060f0:	d052      	beq.n	8006198 <_dtoa_r+0xb18>
 80060f2:	3201      	adds	r2, #1
 80060f4:	701a      	strb	r2, [r3, #0]
 80060f6:	e60e      	b.n	8005d16 <_dtoa_r+0x696>
 80060f8:	2a00      	cmp	r2, #0
 80060fa:	dd07      	ble.n	800610c <_dtoa_r+0xa8c>
 80060fc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006100:	d0ed      	beq.n	80060de <_dtoa_r+0xa5e>
 8006102:	9a02      	ldr	r2, [sp, #8]
 8006104:	f108 0301 	add.w	r3, r8, #1
 8006108:	7013      	strb	r3, [r2, #0]
 800610a:	e604      	b.n	8005d16 <_dtoa_r+0x696>
 800610c:	9b07      	ldr	r3, [sp, #28]
 800610e:	9a07      	ldr	r2, [sp, #28]
 8006110:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006114:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006116:	4293      	cmp	r3, r2
 8006118:	d028      	beq.n	800616c <_dtoa_r+0xaec>
 800611a:	4649      	mov	r1, r9
 800611c:	2300      	movs	r3, #0
 800611e:	220a      	movs	r2, #10
 8006120:	4658      	mov	r0, fp
 8006122:	f000 f91f 	bl	8006364 <__multadd>
 8006126:	42af      	cmp	r7, r5
 8006128:	4681      	mov	r9, r0
 800612a:	f04f 0300 	mov.w	r3, #0
 800612e:	f04f 020a 	mov.w	r2, #10
 8006132:	4639      	mov	r1, r7
 8006134:	4658      	mov	r0, fp
 8006136:	d107      	bne.n	8006148 <_dtoa_r+0xac8>
 8006138:	f000 f914 	bl	8006364 <__multadd>
 800613c:	4607      	mov	r7, r0
 800613e:	4605      	mov	r5, r0
 8006140:	9b07      	ldr	r3, [sp, #28]
 8006142:	3301      	adds	r3, #1
 8006144:	9307      	str	r3, [sp, #28]
 8006146:	e774      	b.n	8006032 <_dtoa_r+0x9b2>
 8006148:	f000 f90c 	bl	8006364 <__multadd>
 800614c:	4629      	mov	r1, r5
 800614e:	4607      	mov	r7, r0
 8006150:	2300      	movs	r3, #0
 8006152:	220a      	movs	r2, #10
 8006154:	4658      	mov	r0, fp
 8006156:	f000 f905 	bl	8006364 <__multadd>
 800615a:	4605      	mov	r5, r0
 800615c:	e7f0      	b.n	8006140 <_dtoa_r+0xac0>
 800615e:	9b08      	ldr	r3, [sp, #32]
 8006160:	2700      	movs	r7, #0
 8006162:	2b00      	cmp	r3, #0
 8006164:	bfcc      	ite	gt
 8006166:	461e      	movgt	r6, r3
 8006168:	2601      	movle	r6, #1
 800616a:	4456      	add	r6, sl
 800616c:	4649      	mov	r1, r9
 800616e:	2201      	movs	r2, #1
 8006170:	4658      	mov	r0, fp
 8006172:	f000 faa1 	bl	80066b8 <__lshift>
 8006176:	4621      	mov	r1, r4
 8006178:	4681      	mov	r9, r0
 800617a:	f000 fb09 	bl	8006790 <__mcmp>
 800617e:	2800      	cmp	r0, #0
 8006180:	dcb0      	bgt.n	80060e4 <_dtoa_r+0xa64>
 8006182:	d102      	bne.n	800618a <_dtoa_r+0xb0a>
 8006184:	f018 0f01 	tst.w	r8, #1
 8006188:	d1ac      	bne.n	80060e4 <_dtoa_r+0xa64>
 800618a:	4633      	mov	r3, r6
 800618c:	461e      	mov	r6, r3
 800618e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006192:	2a30      	cmp	r2, #48	@ 0x30
 8006194:	d0fa      	beq.n	800618c <_dtoa_r+0xb0c>
 8006196:	e5be      	b.n	8005d16 <_dtoa_r+0x696>
 8006198:	459a      	cmp	sl, r3
 800619a:	d1a4      	bne.n	80060e6 <_dtoa_r+0xa66>
 800619c:	9b04      	ldr	r3, [sp, #16]
 800619e:	3301      	adds	r3, #1
 80061a0:	9304      	str	r3, [sp, #16]
 80061a2:	2331      	movs	r3, #49	@ 0x31
 80061a4:	f88a 3000 	strb.w	r3, [sl]
 80061a8:	e5b5      	b.n	8005d16 <_dtoa_r+0x696>
 80061aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80061ac:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800620c <_dtoa_r+0xb8c>
 80061b0:	b11b      	cbz	r3, 80061ba <_dtoa_r+0xb3a>
 80061b2:	f10a 0308 	add.w	r3, sl, #8
 80061b6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80061b8:	6013      	str	r3, [r2, #0]
 80061ba:	4650      	mov	r0, sl
 80061bc:	b017      	add	sp, #92	@ 0x5c
 80061be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	f77f ae3d 	ble.w	8005e44 <_dtoa_r+0x7c4>
 80061ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80061ce:	2001      	movs	r0, #1
 80061d0:	e65b      	b.n	8005e8a <_dtoa_r+0x80a>
 80061d2:	9b08      	ldr	r3, [sp, #32]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f77f aed6 	ble.w	8005f86 <_dtoa_r+0x906>
 80061da:	4656      	mov	r6, sl
 80061dc:	4621      	mov	r1, r4
 80061de:	4648      	mov	r0, r9
 80061e0:	f7ff f9c3 	bl	800556a <quorem>
 80061e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80061e8:	9b08      	ldr	r3, [sp, #32]
 80061ea:	f806 8b01 	strb.w	r8, [r6], #1
 80061ee:	eba6 020a 	sub.w	r2, r6, sl
 80061f2:	4293      	cmp	r3, r2
 80061f4:	ddb3      	ble.n	800615e <_dtoa_r+0xade>
 80061f6:	4649      	mov	r1, r9
 80061f8:	2300      	movs	r3, #0
 80061fa:	220a      	movs	r2, #10
 80061fc:	4658      	mov	r0, fp
 80061fe:	f000 f8b1 	bl	8006364 <__multadd>
 8006202:	4681      	mov	r9, r0
 8006204:	e7ea      	b.n	80061dc <_dtoa_r+0xb5c>
 8006206:	bf00      	nop
 8006208:	080071f8 	.word	0x080071f8
 800620c:	0800717c 	.word	0x0800717c

08006210 <_free_r>:
 8006210:	b538      	push	{r3, r4, r5, lr}
 8006212:	4605      	mov	r5, r0
 8006214:	2900      	cmp	r1, #0
 8006216:	d040      	beq.n	800629a <_free_r+0x8a>
 8006218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800621c:	1f0c      	subs	r4, r1, #4
 800621e:	2b00      	cmp	r3, #0
 8006220:	bfb8      	it	lt
 8006222:	18e4      	addlt	r4, r4, r3
 8006224:	f7fe fb96 	bl	8004954 <__malloc_lock>
 8006228:	4a1c      	ldr	r2, [pc, #112]	@ (800629c <_free_r+0x8c>)
 800622a:	6813      	ldr	r3, [r2, #0]
 800622c:	b933      	cbnz	r3, 800623c <_free_r+0x2c>
 800622e:	6063      	str	r3, [r4, #4]
 8006230:	6014      	str	r4, [r2, #0]
 8006232:	4628      	mov	r0, r5
 8006234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006238:	f7fe bb92 	b.w	8004960 <__malloc_unlock>
 800623c:	42a3      	cmp	r3, r4
 800623e:	d908      	bls.n	8006252 <_free_r+0x42>
 8006240:	6820      	ldr	r0, [r4, #0]
 8006242:	1821      	adds	r1, r4, r0
 8006244:	428b      	cmp	r3, r1
 8006246:	bf01      	itttt	eq
 8006248:	6819      	ldreq	r1, [r3, #0]
 800624a:	685b      	ldreq	r3, [r3, #4]
 800624c:	1809      	addeq	r1, r1, r0
 800624e:	6021      	streq	r1, [r4, #0]
 8006250:	e7ed      	b.n	800622e <_free_r+0x1e>
 8006252:	461a      	mov	r2, r3
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	b10b      	cbz	r3, 800625c <_free_r+0x4c>
 8006258:	42a3      	cmp	r3, r4
 800625a:	d9fa      	bls.n	8006252 <_free_r+0x42>
 800625c:	6811      	ldr	r1, [r2, #0]
 800625e:	1850      	adds	r0, r2, r1
 8006260:	42a0      	cmp	r0, r4
 8006262:	d10b      	bne.n	800627c <_free_r+0x6c>
 8006264:	6820      	ldr	r0, [r4, #0]
 8006266:	4401      	add	r1, r0
 8006268:	1850      	adds	r0, r2, r1
 800626a:	4283      	cmp	r3, r0
 800626c:	6011      	str	r1, [r2, #0]
 800626e:	d1e0      	bne.n	8006232 <_free_r+0x22>
 8006270:	6818      	ldr	r0, [r3, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	4408      	add	r0, r1
 8006276:	6010      	str	r0, [r2, #0]
 8006278:	6053      	str	r3, [r2, #4]
 800627a:	e7da      	b.n	8006232 <_free_r+0x22>
 800627c:	d902      	bls.n	8006284 <_free_r+0x74>
 800627e:	230c      	movs	r3, #12
 8006280:	602b      	str	r3, [r5, #0]
 8006282:	e7d6      	b.n	8006232 <_free_r+0x22>
 8006284:	6820      	ldr	r0, [r4, #0]
 8006286:	1821      	adds	r1, r4, r0
 8006288:	428b      	cmp	r3, r1
 800628a:	bf01      	itttt	eq
 800628c:	6819      	ldreq	r1, [r3, #0]
 800628e:	685b      	ldreq	r3, [r3, #4]
 8006290:	1809      	addeq	r1, r1, r0
 8006292:	6021      	streq	r1, [r4, #0]
 8006294:	6063      	str	r3, [r4, #4]
 8006296:	6054      	str	r4, [r2, #4]
 8006298:	e7cb      	b.n	8006232 <_free_r+0x22>
 800629a:	bd38      	pop	{r3, r4, r5, pc}
 800629c:	20000914 	.word	0x20000914

080062a0 <_Balloc>:
 80062a0:	b570      	push	{r4, r5, r6, lr}
 80062a2:	69c6      	ldr	r6, [r0, #28]
 80062a4:	4604      	mov	r4, r0
 80062a6:	460d      	mov	r5, r1
 80062a8:	b976      	cbnz	r6, 80062c8 <_Balloc+0x28>
 80062aa:	2010      	movs	r0, #16
 80062ac:	f7fe faa8 	bl	8004800 <malloc>
 80062b0:	4602      	mov	r2, r0
 80062b2:	61e0      	str	r0, [r4, #28]
 80062b4:	b920      	cbnz	r0, 80062c0 <_Balloc+0x20>
 80062b6:	216b      	movs	r1, #107	@ 0x6b
 80062b8:	4b17      	ldr	r3, [pc, #92]	@ (8006318 <_Balloc+0x78>)
 80062ba:	4818      	ldr	r0, [pc, #96]	@ (800631c <_Balloc+0x7c>)
 80062bc:	f000 fdfa 	bl	8006eb4 <__assert_func>
 80062c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062c4:	6006      	str	r6, [r0, #0]
 80062c6:	60c6      	str	r6, [r0, #12]
 80062c8:	69e6      	ldr	r6, [r4, #28]
 80062ca:	68f3      	ldr	r3, [r6, #12]
 80062cc:	b183      	cbz	r3, 80062f0 <_Balloc+0x50>
 80062ce:	69e3      	ldr	r3, [r4, #28]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80062d6:	b9b8      	cbnz	r0, 8006308 <_Balloc+0x68>
 80062d8:	2101      	movs	r1, #1
 80062da:	fa01 f605 	lsl.w	r6, r1, r5
 80062de:	1d72      	adds	r2, r6, #5
 80062e0:	4620      	mov	r0, r4
 80062e2:	0092      	lsls	r2, r2, #2
 80062e4:	f000 fe04 	bl	8006ef0 <_calloc_r>
 80062e8:	b160      	cbz	r0, 8006304 <_Balloc+0x64>
 80062ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80062ee:	e00e      	b.n	800630e <_Balloc+0x6e>
 80062f0:	2221      	movs	r2, #33	@ 0x21
 80062f2:	2104      	movs	r1, #4
 80062f4:	4620      	mov	r0, r4
 80062f6:	f000 fdfb 	bl	8006ef0 <_calloc_r>
 80062fa:	69e3      	ldr	r3, [r4, #28]
 80062fc:	60f0      	str	r0, [r6, #12]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1e4      	bne.n	80062ce <_Balloc+0x2e>
 8006304:	2000      	movs	r0, #0
 8006306:	bd70      	pop	{r4, r5, r6, pc}
 8006308:	6802      	ldr	r2, [r0, #0]
 800630a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800630e:	2300      	movs	r3, #0
 8006310:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006314:	e7f7      	b.n	8006306 <_Balloc+0x66>
 8006316:	bf00      	nop
 8006318:	08007189 	.word	0x08007189
 800631c:	08007209 	.word	0x08007209

08006320 <_Bfree>:
 8006320:	b570      	push	{r4, r5, r6, lr}
 8006322:	69c6      	ldr	r6, [r0, #28]
 8006324:	4605      	mov	r5, r0
 8006326:	460c      	mov	r4, r1
 8006328:	b976      	cbnz	r6, 8006348 <_Bfree+0x28>
 800632a:	2010      	movs	r0, #16
 800632c:	f7fe fa68 	bl	8004800 <malloc>
 8006330:	4602      	mov	r2, r0
 8006332:	61e8      	str	r0, [r5, #28]
 8006334:	b920      	cbnz	r0, 8006340 <_Bfree+0x20>
 8006336:	218f      	movs	r1, #143	@ 0x8f
 8006338:	4b08      	ldr	r3, [pc, #32]	@ (800635c <_Bfree+0x3c>)
 800633a:	4809      	ldr	r0, [pc, #36]	@ (8006360 <_Bfree+0x40>)
 800633c:	f000 fdba 	bl	8006eb4 <__assert_func>
 8006340:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006344:	6006      	str	r6, [r0, #0]
 8006346:	60c6      	str	r6, [r0, #12]
 8006348:	b13c      	cbz	r4, 800635a <_Bfree+0x3a>
 800634a:	69eb      	ldr	r3, [r5, #28]
 800634c:	6862      	ldr	r2, [r4, #4]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006354:	6021      	str	r1, [r4, #0]
 8006356:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800635a:	bd70      	pop	{r4, r5, r6, pc}
 800635c:	08007189 	.word	0x08007189
 8006360:	08007209 	.word	0x08007209

08006364 <__multadd>:
 8006364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006368:	4607      	mov	r7, r0
 800636a:	460c      	mov	r4, r1
 800636c:	461e      	mov	r6, r3
 800636e:	2000      	movs	r0, #0
 8006370:	690d      	ldr	r5, [r1, #16]
 8006372:	f101 0c14 	add.w	ip, r1, #20
 8006376:	f8dc 3000 	ldr.w	r3, [ip]
 800637a:	3001      	adds	r0, #1
 800637c:	b299      	uxth	r1, r3
 800637e:	fb02 6101 	mla	r1, r2, r1, r6
 8006382:	0c1e      	lsrs	r6, r3, #16
 8006384:	0c0b      	lsrs	r3, r1, #16
 8006386:	fb02 3306 	mla	r3, r2, r6, r3
 800638a:	b289      	uxth	r1, r1
 800638c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006390:	4285      	cmp	r5, r0
 8006392:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006396:	f84c 1b04 	str.w	r1, [ip], #4
 800639a:	dcec      	bgt.n	8006376 <__multadd+0x12>
 800639c:	b30e      	cbz	r6, 80063e2 <__multadd+0x7e>
 800639e:	68a3      	ldr	r3, [r4, #8]
 80063a0:	42ab      	cmp	r3, r5
 80063a2:	dc19      	bgt.n	80063d8 <__multadd+0x74>
 80063a4:	6861      	ldr	r1, [r4, #4]
 80063a6:	4638      	mov	r0, r7
 80063a8:	3101      	adds	r1, #1
 80063aa:	f7ff ff79 	bl	80062a0 <_Balloc>
 80063ae:	4680      	mov	r8, r0
 80063b0:	b928      	cbnz	r0, 80063be <__multadd+0x5a>
 80063b2:	4602      	mov	r2, r0
 80063b4:	21ba      	movs	r1, #186	@ 0xba
 80063b6:	4b0c      	ldr	r3, [pc, #48]	@ (80063e8 <__multadd+0x84>)
 80063b8:	480c      	ldr	r0, [pc, #48]	@ (80063ec <__multadd+0x88>)
 80063ba:	f000 fd7b 	bl	8006eb4 <__assert_func>
 80063be:	6922      	ldr	r2, [r4, #16]
 80063c0:	f104 010c 	add.w	r1, r4, #12
 80063c4:	3202      	adds	r2, #2
 80063c6:	0092      	lsls	r2, r2, #2
 80063c8:	300c      	adds	r0, #12
 80063ca:	f000 fd65 	bl	8006e98 <memcpy>
 80063ce:	4621      	mov	r1, r4
 80063d0:	4638      	mov	r0, r7
 80063d2:	f7ff ffa5 	bl	8006320 <_Bfree>
 80063d6:	4644      	mov	r4, r8
 80063d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80063dc:	3501      	adds	r5, #1
 80063de:	615e      	str	r6, [r3, #20]
 80063e0:	6125      	str	r5, [r4, #16]
 80063e2:	4620      	mov	r0, r4
 80063e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063e8:	080071f8 	.word	0x080071f8
 80063ec:	08007209 	.word	0x08007209

080063f0 <__hi0bits>:
 80063f0:	4603      	mov	r3, r0
 80063f2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80063f6:	bf3a      	itte	cc
 80063f8:	0403      	lslcc	r3, r0, #16
 80063fa:	2010      	movcc	r0, #16
 80063fc:	2000      	movcs	r0, #0
 80063fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006402:	bf3c      	itt	cc
 8006404:	021b      	lslcc	r3, r3, #8
 8006406:	3008      	addcc	r0, #8
 8006408:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800640c:	bf3c      	itt	cc
 800640e:	011b      	lslcc	r3, r3, #4
 8006410:	3004      	addcc	r0, #4
 8006412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006416:	bf3c      	itt	cc
 8006418:	009b      	lslcc	r3, r3, #2
 800641a:	3002      	addcc	r0, #2
 800641c:	2b00      	cmp	r3, #0
 800641e:	db05      	blt.n	800642c <__hi0bits+0x3c>
 8006420:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006424:	f100 0001 	add.w	r0, r0, #1
 8006428:	bf08      	it	eq
 800642a:	2020      	moveq	r0, #32
 800642c:	4770      	bx	lr

0800642e <__lo0bits>:
 800642e:	6803      	ldr	r3, [r0, #0]
 8006430:	4602      	mov	r2, r0
 8006432:	f013 0007 	ands.w	r0, r3, #7
 8006436:	d00b      	beq.n	8006450 <__lo0bits+0x22>
 8006438:	07d9      	lsls	r1, r3, #31
 800643a:	d421      	bmi.n	8006480 <__lo0bits+0x52>
 800643c:	0798      	lsls	r0, r3, #30
 800643e:	bf49      	itett	mi
 8006440:	085b      	lsrmi	r3, r3, #1
 8006442:	089b      	lsrpl	r3, r3, #2
 8006444:	2001      	movmi	r0, #1
 8006446:	6013      	strmi	r3, [r2, #0]
 8006448:	bf5c      	itt	pl
 800644a:	2002      	movpl	r0, #2
 800644c:	6013      	strpl	r3, [r2, #0]
 800644e:	4770      	bx	lr
 8006450:	b299      	uxth	r1, r3
 8006452:	b909      	cbnz	r1, 8006458 <__lo0bits+0x2a>
 8006454:	2010      	movs	r0, #16
 8006456:	0c1b      	lsrs	r3, r3, #16
 8006458:	b2d9      	uxtb	r1, r3
 800645a:	b909      	cbnz	r1, 8006460 <__lo0bits+0x32>
 800645c:	3008      	adds	r0, #8
 800645e:	0a1b      	lsrs	r3, r3, #8
 8006460:	0719      	lsls	r1, r3, #28
 8006462:	bf04      	itt	eq
 8006464:	091b      	lsreq	r3, r3, #4
 8006466:	3004      	addeq	r0, #4
 8006468:	0799      	lsls	r1, r3, #30
 800646a:	bf04      	itt	eq
 800646c:	089b      	lsreq	r3, r3, #2
 800646e:	3002      	addeq	r0, #2
 8006470:	07d9      	lsls	r1, r3, #31
 8006472:	d403      	bmi.n	800647c <__lo0bits+0x4e>
 8006474:	085b      	lsrs	r3, r3, #1
 8006476:	f100 0001 	add.w	r0, r0, #1
 800647a:	d003      	beq.n	8006484 <__lo0bits+0x56>
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	4770      	bx	lr
 8006480:	2000      	movs	r0, #0
 8006482:	4770      	bx	lr
 8006484:	2020      	movs	r0, #32
 8006486:	4770      	bx	lr

08006488 <__i2b>:
 8006488:	b510      	push	{r4, lr}
 800648a:	460c      	mov	r4, r1
 800648c:	2101      	movs	r1, #1
 800648e:	f7ff ff07 	bl	80062a0 <_Balloc>
 8006492:	4602      	mov	r2, r0
 8006494:	b928      	cbnz	r0, 80064a2 <__i2b+0x1a>
 8006496:	f240 1145 	movw	r1, #325	@ 0x145
 800649a:	4b04      	ldr	r3, [pc, #16]	@ (80064ac <__i2b+0x24>)
 800649c:	4804      	ldr	r0, [pc, #16]	@ (80064b0 <__i2b+0x28>)
 800649e:	f000 fd09 	bl	8006eb4 <__assert_func>
 80064a2:	2301      	movs	r3, #1
 80064a4:	6144      	str	r4, [r0, #20]
 80064a6:	6103      	str	r3, [r0, #16]
 80064a8:	bd10      	pop	{r4, pc}
 80064aa:	bf00      	nop
 80064ac:	080071f8 	.word	0x080071f8
 80064b0:	08007209 	.word	0x08007209

080064b4 <__multiply>:
 80064b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b8:	4614      	mov	r4, r2
 80064ba:	690a      	ldr	r2, [r1, #16]
 80064bc:	6923      	ldr	r3, [r4, #16]
 80064be:	460f      	mov	r7, r1
 80064c0:	429a      	cmp	r2, r3
 80064c2:	bfa2      	ittt	ge
 80064c4:	4623      	movge	r3, r4
 80064c6:	460c      	movge	r4, r1
 80064c8:	461f      	movge	r7, r3
 80064ca:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80064ce:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80064d2:	68a3      	ldr	r3, [r4, #8]
 80064d4:	6861      	ldr	r1, [r4, #4]
 80064d6:	eb0a 0609 	add.w	r6, sl, r9
 80064da:	42b3      	cmp	r3, r6
 80064dc:	b085      	sub	sp, #20
 80064de:	bfb8      	it	lt
 80064e0:	3101      	addlt	r1, #1
 80064e2:	f7ff fedd 	bl	80062a0 <_Balloc>
 80064e6:	b930      	cbnz	r0, 80064f6 <__multiply+0x42>
 80064e8:	4602      	mov	r2, r0
 80064ea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80064ee:	4b43      	ldr	r3, [pc, #268]	@ (80065fc <__multiply+0x148>)
 80064f0:	4843      	ldr	r0, [pc, #268]	@ (8006600 <__multiply+0x14c>)
 80064f2:	f000 fcdf 	bl	8006eb4 <__assert_func>
 80064f6:	f100 0514 	add.w	r5, r0, #20
 80064fa:	462b      	mov	r3, r5
 80064fc:	2200      	movs	r2, #0
 80064fe:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006502:	4543      	cmp	r3, r8
 8006504:	d321      	bcc.n	800654a <__multiply+0x96>
 8006506:	f107 0114 	add.w	r1, r7, #20
 800650a:	f104 0214 	add.w	r2, r4, #20
 800650e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006512:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006516:	9302      	str	r3, [sp, #8]
 8006518:	1b13      	subs	r3, r2, r4
 800651a:	3b15      	subs	r3, #21
 800651c:	f023 0303 	bic.w	r3, r3, #3
 8006520:	3304      	adds	r3, #4
 8006522:	f104 0715 	add.w	r7, r4, #21
 8006526:	42ba      	cmp	r2, r7
 8006528:	bf38      	it	cc
 800652a:	2304      	movcc	r3, #4
 800652c:	9301      	str	r3, [sp, #4]
 800652e:	9b02      	ldr	r3, [sp, #8]
 8006530:	9103      	str	r1, [sp, #12]
 8006532:	428b      	cmp	r3, r1
 8006534:	d80c      	bhi.n	8006550 <__multiply+0x9c>
 8006536:	2e00      	cmp	r6, #0
 8006538:	dd03      	ble.n	8006542 <__multiply+0x8e>
 800653a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800653e:	2b00      	cmp	r3, #0
 8006540:	d05a      	beq.n	80065f8 <__multiply+0x144>
 8006542:	6106      	str	r6, [r0, #16]
 8006544:	b005      	add	sp, #20
 8006546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800654a:	f843 2b04 	str.w	r2, [r3], #4
 800654e:	e7d8      	b.n	8006502 <__multiply+0x4e>
 8006550:	f8b1 a000 	ldrh.w	sl, [r1]
 8006554:	f1ba 0f00 	cmp.w	sl, #0
 8006558:	d023      	beq.n	80065a2 <__multiply+0xee>
 800655a:	46a9      	mov	r9, r5
 800655c:	f04f 0c00 	mov.w	ip, #0
 8006560:	f104 0e14 	add.w	lr, r4, #20
 8006564:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006568:	f8d9 3000 	ldr.w	r3, [r9]
 800656c:	fa1f fb87 	uxth.w	fp, r7
 8006570:	b29b      	uxth	r3, r3
 8006572:	fb0a 330b 	mla	r3, sl, fp, r3
 8006576:	4463      	add	r3, ip
 8006578:	f8d9 c000 	ldr.w	ip, [r9]
 800657c:	0c3f      	lsrs	r7, r7, #16
 800657e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006582:	fb0a c707 	mla	r7, sl, r7, ip
 8006586:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800658a:	b29b      	uxth	r3, r3
 800658c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006590:	4572      	cmp	r2, lr
 8006592:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006596:	f849 3b04 	str.w	r3, [r9], #4
 800659a:	d8e3      	bhi.n	8006564 <__multiply+0xb0>
 800659c:	9b01      	ldr	r3, [sp, #4]
 800659e:	f845 c003 	str.w	ip, [r5, r3]
 80065a2:	9b03      	ldr	r3, [sp, #12]
 80065a4:	3104      	adds	r1, #4
 80065a6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80065aa:	f1b9 0f00 	cmp.w	r9, #0
 80065ae:	d021      	beq.n	80065f4 <__multiply+0x140>
 80065b0:	46ae      	mov	lr, r5
 80065b2:	f04f 0a00 	mov.w	sl, #0
 80065b6:	682b      	ldr	r3, [r5, #0]
 80065b8:	f104 0c14 	add.w	ip, r4, #20
 80065bc:	f8bc b000 	ldrh.w	fp, [ip]
 80065c0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	fb09 770b 	mla	r7, r9, fp, r7
 80065ca:	4457      	add	r7, sl
 80065cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80065d0:	f84e 3b04 	str.w	r3, [lr], #4
 80065d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80065d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80065dc:	f8be 3000 	ldrh.w	r3, [lr]
 80065e0:	4562      	cmp	r2, ip
 80065e2:	fb09 330a 	mla	r3, r9, sl, r3
 80065e6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80065ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80065ee:	d8e5      	bhi.n	80065bc <__multiply+0x108>
 80065f0:	9f01      	ldr	r7, [sp, #4]
 80065f2:	51eb      	str	r3, [r5, r7]
 80065f4:	3504      	adds	r5, #4
 80065f6:	e79a      	b.n	800652e <__multiply+0x7a>
 80065f8:	3e01      	subs	r6, #1
 80065fa:	e79c      	b.n	8006536 <__multiply+0x82>
 80065fc:	080071f8 	.word	0x080071f8
 8006600:	08007209 	.word	0x08007209

08006604 <__pow5mult>:
 8006604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006608:	4615      	mov	r5, r2
 800660a:	f012 0203 	ands.w	r2, r2, #3
 800660e:	4607      	mov	r7, r0
 8006610:	460e      	mov	r6, r1
 8006612:	d007      	beq.n	8006624 <__pow5mult+0x20>
 8006614:	4c25      	ldr	r4, [pc, #148]	@ (80066ac <__pow5mult+0xa8>)
 8006616:	3a01      	subs	r2, #1
 8006618:	2300      	movs	r3, #0
 800661a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800661e:	f7ff fea1 	bl	8006364 <__multadd>
 8006622:	4606      	mov	r6, r0
 8006624:	10ad      	asrs	r5, r5, #2
 8006626:	d03d      	beq.n	80066a4 <__pow5mult+0xa0>
 8006628:	69fc      	ldr	r4, [r7, #28]
 800662a:	b97c      	cbnz	r4, 800664c <__pow5mult+0x48>
 800662c:	2010      	movs	r0, #16
 800662e:	f7fe f8e7 	bl	8004800 <malloc>
 8006632:	4602      	mov	r2, r0
 8006634:	61f8      	str	r0, [r7, #28]
 8006636:	b928      	cbnz	r0, 8006644 <__pow5mult+0x40>
 8006638:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800663c:	4b1c      	ldr	r3, [pc, #112]	@ (80066b0 <__pow5mult+0xac>)
 800663e:	481d      	ldr	r0, [pc, #116]	@ (80066b4 <__pow5mult+0xb0>)
 8006640:	f000 fc38 	bl	8006eb4 <__assert_func>
 8006644:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006648:	6004      	str	r4, [r0, #0]
 800664a:	60c4      	str	r4, [r0, #12]
 800664c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006650:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006654:	b94c      	cbnz	r4, 800666a <__pow5mult+0x66>
 8006656:	f240 2171 	movw	r1, #625	@ 0x271
 800665a:	4638      	mov	r0, r7
 800665c:	f7ff ff14 	bl	8006488 <__i2b>
 8006660:	2300      	movs	r3, #0
 8006662:	4604      	mov	r4, r0
 8006664:	f8c8 0008 	str.w	r0, [r8, #8]
 8006668:	6003      	str	r3, [r0, #0]
 800666a:	f04f 0900 	mov.w	r9, #0
 800666e:	07eb      	lsls	r3, r5, #31
 8006670:	d50a      	bpl.n	8006688 <__pow5mult+0x84>
 8006672:	4631      	mov	r1, r6
 8006674:	4622      	mov	r2, r4
 8006676:	4638      	mov	r0, r7
 8006678:	f7ff ff1c 	bl	80064b4 <__multiply>
 800667c:	4680      	mov	r8, r0
 800667e:	4631      	mov	r1, r6
 8006680:	4638      	mov	r0, r7
 8006682:	f7ff fe4d 	bl	8006320 <_Bfree>
 8006686:	4646      	mov	r6, r8
 8006688:	106d      	asrs	r5, r5, #1
 800668a:	d00b      	beq.n	80066a4 <__pow5mult+0xa0>
 800668c:	6820      	ldr	r0, [r4, #0]
 800668e:	b938      	cbnz	r0, 80066a0 <__pow5mult+0x9c>
 8006690:	4622      	mov	r2, r4
 8006692:	4621      	mov	r1, r4
 8006694:	4638      	mov	r0, r7
 8006696:	f7ff ff0d 	bl	80064b4 <__multiply>
 800669a:	6020      	str	r0, [r4, #0]
 800669c:	f8c0 9000 	str.w	r9, [r0]
 80066a0:	4604      	mov	r4, r0
 80066a2:	e7e4      	b.n	800666e <__pow5mult+0x6a>
 80066a4:	4630      	mov	r0, r6
 80066a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066aa:	bf00      	nop
 80066ac:	08007264 	.word	0x08007264
 80066b0:	08007189 	.word	0x08007189
 80066b4:	08007209 	.word	0x08007209

080066b8 <__lshift>:
 80066b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066bc:	460c      	mov	r4, r1
 80066be:	4607      	mov	r7, r0
 80066c0:	4691      	mov	r9, r2
 80066c2:	6923      	ldr	r3, [r4, #16]
 80066c4:	6849      	ldr	r1, [r1, #4]
 80066c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80066ca:	68a3      	ldr	r3, [r4, #8]
 80066cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066d0:	f108 0601 	add.w	r6, r8, #1
 80066d4:	42b3      	cmp	r3, r6
 80066d6:	db0b      	blt.n	80066f0 <__lshift+0x38>
 80066d8:	4638      	mov	r0, r7
 80066da:	f7ff fde1 	bl	80062a0 <_Balloc>
 80066de:	4605      	mov	r5, r0
 80066e0:	b948      	cbnz	r0, 80066f6 <__lshift+0x3e>
 80066e2:	4602      	mov	r2, r0
 80066e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80066e8:	4b27      	ldr	r3, [pc, #156]	@ (8006788 <__lshift+0xd0>)
 80066ea:	4828      	ldr	r0, [pc, #160]	@ (800678c <__lshift+0xd4>)
 80066ec:	f000 fbe2 	bl	8006eb4 <__assert_func>
 80066f0:	3101      	adds	r1, #1
 80066f2:	005b      	lsls	r3, r3, #1
 80066f4:	e7ee      	b.n	80066d4 <__lshift+0x1c>
 80066f6:	2300      	movs	r3, #0
 80066f8:	f100 0114 	add.w	r1, r0, #20
 80066fc:	f100 0210 	add.w	r2, r0, #16
 8006700:	4618      	mov	r0, r3
 8006702:	4553      	cmp	r3, sl
 8006704:	db33      	blt.n	800676e <__lshift+0xb6>
 8006706:	6920      	ldr	r0, [r4, #16]
 8006708:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800670c:	f104 0314 	add.w	r3, r4, #20
 8006710:	f019 091f 	ands.w	r9, r9, #31
 8006714:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006718:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800671c:	d02b      	beq.n	8006776 <__lshift+0xbe>
 800671e:	468a      	mov	sl, r1
 8006720:	2200      	movs	r2, #0
 8006722:	f1c9 0e20 	rsb	lr, r9, #32
 8006726:	6818      	ldr	r0, [r3, #0]
 8006728:	fa00 f009 	lsl.w	r0, r0, r9
 800672c:	4310      	orrs	r0, r2
 800672e:	f84a 0b04 	str.w	r0, [sl], #4
 8006732:	f853 2b04 	ldr.w	r2, [r3], #4
 8006736:	459c      	cmp	ip, r3
 8006738:	fa22 f20e 	lsr.w	r2, r2, lr
 800673c:	d8f3      	bhi.n	8006726 <__lshift+0x6e>
 800673e:	ebac 0304 	sub.w	r3, ip, r4
 8006742:	3b15      	subs	r3, #21
 8006744:	f023 0303 	bic.w	r3, r3, #3
 8006748:	3304      	adds	r3, #4
 800674a:	f104 0015 	add.w	r0, r4, #21
 800674e:	4584      	cmp	ip, r0
 8006750:	bf38      	it	cc
 8006752:	2304      	movcc	r3, #4
 8006754:	50ca      	str	r2, [r1, r3]
 8006756:	b10a      	cbz	r2, 800675c <__lshift+0xa4>
 8006758:	f108 0602 	add.w	r6, r8, #2
 800675c:	3e01      	subs	r6, #1
 800675e:	4638      	mov	r0, r7
 8006760:	4621      	mov	r1, r4
 8006762:	612e      	str	r6, [r5, #16]
 8006764:	f7ff fddc 	bl	8006320 <_Bfree>
 8006768:	4628      	mov	r0, r5
 800676a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800676e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006772:	3301      	adds	r3, #1
 8006774:	e7c5      	b.n	8006702 <__lshift+0x4a>
 8006776:	3904      	subs	r1, #4
 8006778:	f853 2b04 	ldr.w	r2, [r3], #4
 800677c:	459c      	cmp	ip, r3
 800677e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006782:	d8f9      	bhi.n	8006778 <__lshift+0xc0>
 8006784:	e7ea      	b.n	800675c <__lshift+0xa4>
 8006786:	bf00      	nop
 8006788:	080071f8 	.word	0x080071f8
 800678c:	08007209 	.word	0x08007209

08006790 <__mcmp>:
 8006790:	4603      	mov	r3, r0
 8006792:	690a      	ldr	r2, [r1, #16]
 8006794:	6900      	ldr	r0, [r0, #16]
 8006796:	b530      	push	{r4, r5, lr}
 8006798:	1a80      	subs	r0, r0, r2
 800679a:	d10e      	bne.n	80067ba <__mcmp+0x2a>
 800679c:	3314      	adds	r3, #20
 800679e:	3114      	adds	r1, #20
 80067a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80067a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80067a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80067ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80067b0:	4295      	cmp	r5, r2
 80067b2:	d003      	beq.n	80067bc <__mcmp+0x2c>
 80067b4:	d205      	bcs.n	80067c2 <__mcmp+0x32>
 80067b6:	f04f 30ff 	mov.w	r0, #4294967295
 80067ba:	bd30      	pop	{r4, r5, pc}
 80067bc:	42a3      	cmp	r3, r4
 80067be:	d3f3      	bcc.n	80067a8 <__mcmp+0x18>
 80067c0:	e7fb      	b.n	80067ba <__mcmp+0x2a>
 80067c2:	2001      	movs	r0, #1
 80067c4:	e7f9      	b.n	80067ba <__mcmp+0x2a>
	...

080067c8 <__mdiff>:
 80067c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067cc:	4689      	mov	r9, r1
 80067ce:	4606      	mov	r6, r0
 80067d0:	4611      	mov	r1, r2
 80067d2:	4648      	mov	r0, r9
 80067d4:	4614      	mov	r4, r2
 80067d6:	f7ff ffdb 	bl	8006790 <__mcmp>
 80067da:	1e05      	subs	r5, r0, #0
 80067dc:	d112      	bne.n	8006804 <__mdiff+0x3c>
 80067de:	4629      	mov	r1, r5
 80067e0:	4630      	mov	r0, r6
 80067e2:	f7ff fd5d 	bl	80062a0 <_Balloc>
 80067e6:	4602      	mov	r2, r0
 80067e8:	b928      	cbnz	r0, 80067f6 <__mdiff+0x2e>
 80067ea:	f240 2137 	movw	r1, #567	@ 0x237
 80067ee:	4b3e      	ldr	r3, [pc, #248]	@ (80068e8 <__mdiff+0x120>)
 80067f0:	483e      	ldr	r0, [pc, #248]	@ (80068ec <__mdiff+0x124>)
 80067f2:	f000 fb5f 	bl	8006eb4 <__assert_func>
 80067f6:	2301      	movs	r3, #1
 80067f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80067fc:	4610      	mov	r0, r2
 80067fe:	b003      	add	sp, #12
 8006800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006804:	bfbc      	itt	lt
 8006806:	464b      	movlt	r3, r9
 8006808:	46a1      	movlt	r9, r4
 800680a:	4630      	mov	r0, r6
 800680c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006810:	bfba      	itte	lt
 8006812:	461c      	movlt	r4, r3
 8006814:	2501      	movlt	r5, #1
 8006816:	2500      	movge	r5, #0
 8006818:	f7ff fd42 	bl	80062a0 <_Balloc>
 800681c:	4602      	mov	r2, r0
 800681e:	b918      	cbnz	r0, 8006828 <__mdiff+0x60>
 8006820:	f240 2145 	movw	r1, #581	@ 0x245
 8006824:	4b30      	ldr	r3, [pc, #192]	@ (80068e8 <__mdiff+0x120>)
 8006826:	e7e3      	b.n	80067f0 <__mdiff+0x28>
 8006828:	f100 0b14 	add.w	fp, r0, #20
 800682c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006830:	f109 0310 	add.w	r3, r9, #16
 8006834:	60c5      	str	r5, [r0, #12]
 8006836:	f04f 0c00 	mov.w	ip, #0
 800683a:	f109 0514 	add.w	r5, r9, #20
 800683e:	46d9      	mov	r9, fp
 8006840:	6926      	ldr	r6, [r4, #16]
 8006842:	f104 0e14 	add.w	lr, r4, #20
 8006846:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800684a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800684e:	9301      	str	r3, [sp, #4]
 8006850:	9b01      	ldr	r3, [sp, #4]
 8006852:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006856:	f853 af04 	ldr.w	sl, [r3, #4]!
 800685a:	b281      	uxth	r1, r0
 800685c:	9301      	str	r3, [sp, #4]
 800685e:	fa1f f38a 	uxth.w	r3, sl
 8006862:	1a5b      	subs	r3, r3, r1
 8006864:	0c00      	lsrs	r0, r0, #16
 8006866:	4463      	add	r3, ip
 8006868:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800686c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006870:	b29b      	uxth	r3, r3
 8006872:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006876:	4576      	cmp	r6, lr
 8006878:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800687c:	f849 3b04 	str.w	r3, [r9], #4
 8006880:	d8e6      	bhi.n	8006850 <__mdiff+0x88>
 8006882:	1b33      	subs	r3, r6, r4
 8006884:	3b15      	subs	r3, #21
 8006886:	f023 0303 	bic.w	r3, r3, #3
 800688a:	3415      	adds	r4, #21
 800688c:	3304      	adds	r3, #4
 800688e:	42a6      	cmp	r6, r4
 8006890:	bf38      	it	cc
 8006892:	2304      	movcc	r3, #4
 8006894:	441d      	add	r5, r3
 8006896:	445b      	add	r3, fp
 8006898:	461e      	mov	r6, r3
 800689a:	462c      	mov	r4, r5
 800689c:	4544      	cmp	r4, r8
 800689e:	d30e      	bcc.n	80068be <__mdiff+0xf6>
 80068a0:	f108 0103 	add.w	r1, r8, #3
 80068a4:	1b49      	subs	r1, r1, r5
 80068a6:	f021 0103 	bic.w	r1, r1, #3
 80068aa:	3d03      	subs	r5, #3
 80068ac:	45a8      	cmp	r8, r5
 80068ae:	bf38      	it	cc
 80068b0:	2100      	movcc	r1, #0
 80068b2:	440b      	add	r3, r1
 80068b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80068b8:	b199      	cbz	r1, 80068e2 <__mdiff+0x11a>
 80068ba:	6117      	str	r7, [r2, #16]
 80068bc:	e79e      	b.n	80067fc <__mdiff+0x34>
 80068be:	46e6      	mov	lr, ip
 80068c0:	f854 1b04 	ldr.w	r1, [r4], #4
 80068c4:	fa1f fc81 	uxth.w	ip, r1
 80068c8:	44f4      	add	ip, lr
 80068ca:	0c08      	lsrs	r0, r1, #16
 80068cc:	4471      	add	r1, lr
 80068ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80068d2:	b289      	uxth	r1, r1
 80068d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80068d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80068dc:	f846 1b04 	str.w	r1, [r6], #4
 80068e0:	e7dc      	b.n	800689c <__mdiff+0xd4>
 80068e2:	3f01      	subs	r7, #1
 80068e4:	e7e6      	b.n	80068b4 <__mdiff+0xec>
 80068e6:	bf00      	nop
 80068e8:	080071f8 	.word	0x080071f8
 80068ec:	08007209 	.word	0x08007209

080068f0 <__d2b>:
 80068f0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80068f4:	2101      	movs	r1, #1
 80068f6:	4690      	mov	r8, r2
 80068f8:	4699      	mov	r9, r3
 80068fa:	9e08      	ldr	r6, [sp, #32]
 80068fc:	f7ff fcd0 	bl	80062a0 <_Balloc>
 8006900:	4604      	mov	r4, r0
 8006902:	b930      	cbnz	r0, 8006912 <__d2b+0x22>
 8006904:	4602      	mov	r2, r0
 8006906:	f240 310f 	movw	r1, #783	@ 0x30f
 800690a:	4b23      	ldr	r3, [pc, #140]	@ (8006998 <__d2b+0xa8>)
 800690c:	4823      	ldr	r0, [pc, #140]	@ (800699c <__d2b+0xac>)
 800690e:	f000 fad1 	bl	8006eb4 <__assert_func>
 8006912:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006916:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800691a:	b10d      	cbz	r5, 8006920 <__d2b+0x30>
 800691c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006920:	9301      	str	r3, [sp, #4]
 8006922:	f1b8 0300 	subs.w	r3, r8, #0
 8006926:	d024      	beq.n	8006972 <__d2b+0x82>
 8006928:	4668      	mov	r0, sp
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	f7ff fd7f 	bl	800642e <__lo0bits>
 8006930:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006934:	b1d8      	cbz	r0, 800696e <__d2b+0x7e>
 8006936:	f1c0 0320 	rsb	r3, r0, #32
 800693a:	fa02 f303 	lsl.w	r3, r2, r3
 800693e:	430b      	orrs	r3, r1
 8006940:	40c2      	lsrs	r2, r0
 8006942:	6163      	str	r3, [r4, #20]
 8006944:	9201      	str	r2, [sp, #4]
 8006946:	9b01      	ldr	r3, [sp, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	bf0c      	ite	eq
 800694c:	2201      	moveq	r2, #1
 800694e:	2202      	movne	r2, #2
 8006950:	61a3      	str	r3, [r4, #24]
 8006952:	6122      	str	r2, [r4, #16]
 8006954:	b1ad      	cbz	r5, 8006982 <__d2b+0x92>
 8006956:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800695a:	4405      	add	r5, r0
 800695c:	6035      	str	r5, [r6, #0]
 800695e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006964:	6018      	str	r0, [r3, #0]
 8006966:	4620      	mov	r0, r4
 8006968:	b002      	add	sp, #8
 800696a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800696e:	6161      	str	r1, [r4, #20]
 8006970:	e7e9      	b.n	8006946 <__d2b+0x56>
 8006972:	a801      	add	r0, sp, #4
 8006974:	f7ff fd5b 	bl	800642e <__lo0bits>
 8006978:	9b01      	ldr	r3, [sp, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	6163      	str	r3, [r4, #20]
 800697e:	3020      	adds	r0, #32
 8006980:	e7e7      	b.n	8006952 <__d2b+0x62>
 8006982:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006986:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800698a:	6030      	str	r0, [r6, #0]
 800698c:	6918      	ldr	r0, [r3, #16]
 800698e:	f7ff fd2f 	bl	80063f0 <__hi0bits>
 8006992:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006996:	e7e4      	b.n	8006962 <__d2b+0x72>
 8006998:	080071f8 	.word	0x080071f8
 800699c:	08007209 	.word	0x08007209

080069a0 <__sfputc_r>:
 80069a0:	6893      	ldr	r3, [r2, #8]
 80069a2:	b410      	push	{r4}
 80069a4:	3b01      	subs	r3, #1
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	6093      	str	r3, [r2, #8]
 80069aa:	da07      	bge.n	80069bc <__sfputc_r+0x1c>
 80069ac:	6994      	ldr	r4, [r2, #24]
 80069ae:	42a3      	cmp	r3, r4
 80069b0:	db01      	blt.n	80069b6 <__sfputc_r+0x16>
 80069b2:	290a      	cmp	r1, #10
 80069b4:	d102      	bne.n	80069bc <__sfputc_r+0x1c>
 80069b6:	bc10      	pop	{r4}
 80069b8:	f000 b9da 	b.w	8006d70 <__swbuf_r>
 80069bc:	6813      	ldr	r3, [r2, #0]
 80069be:	1c58      	adds	r0, r3, #1
 80069c0:	6010      	str	r0, [r2, #0]
 80069c2:	7019      	strb	r1, [r3, #0]
 80069c4:	4608      	mov	r0, r1
 80069c6:	bc10      	pop	{r4}
 80069c8:	4770      	bx	lr

080069ca <__sfputs_r>:
 80069ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069cc:	4606      	mov	r6, r0
 80069ce:	460f      	mov	r7, r1
 80069d0:	4614      	mov	r4, r2
 80069d2:	18d5      	adds	r5, r2, r3
 80069d4:	42ac      	cmp	r4, r5
 80069d6:	d101      	bne.n	80069dc <__sfputs_r+0x12>
 80069d8:	2000      	movs	r0, #0
 80069da:	e007      	b.n	80069ec <__sfputs_r+0x22>
 80069dc:	463a      	mov	r2, r7
 80069de:	4630      	mov	r0, r6
 80069e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069e4:	f7ff ffdc 	bl	80069a0 <__sfputc_r>
 80069e8:	1c43      	adds	r3, r0, #1
 80069ea:	d1f3      	bne.n	80069d4 <__sfputs_r+0xa>
 80069ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069f0 <_vfiprintf_r>:
 80069f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069f4:	460d      	mov	r5, r1
 80069f6:	4614      	mov	r4, r2
 80069f8:	4698      	mov	r8, r3
 80069fa:	4606      	mov	r6, r0
 80069fc:	b09d      	sub	sp, #116	@ 0x74
 80069fe:	b118      	cbz	r0, 8006a08 <_vfiprintf_r+0x18>
 8006a00:	6a03      	ldr	r3, [r0, #32]
 8006a02:	b90b      	cbnz	r3, 8006a08 <_vfiprintf_r+0x18>
 8006a04:	f7fe fc9a 	bl	800533c <__sinit>
 8006a08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a0a:	07d9      	lsls	r1, r3, #31
 8006a0c:	d405      	bmi.n	8006a1a <_vfiprintf_r+0x2a>
 8006a0e:	89ab      	ldrh	r3, [r5, #12]
 8006a10:	059a      	lsls	r2, r3, #22
 8006a12:	d402      	bmi.n	8006a1a <_vfiprintf_r+0x2a>
 8006a14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a16:	f7fe fd98 	bl	800554a <__retarget_lock_acquire_recursive>
 8006a1a:	89ab      	ldrh	r3, [r5, #12]
 8006a1c:	071b      	lsls	r3, r3, #28
 8006a1e:	d501      	bpl.n	8006a24 <_vfiprintf_r+0x34>
 8006a20:	692b      	ldr	r3, [r5, #16]
 8006a22:	b99b      	cbnz	r3, 8006a4c <_vfiprintf_r+0x5c>
 8006a24:	4629      	mov	r1, r5
 8006a26:	4630      	mov	r0, r6
 8006a28:	f000 f9e0 	bl	8006dec <__swsetup_r>
 8006a2c:	b170      	cbz	r0, 8006a4c <_vfiprintf_r+0x5c>
 8006a2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a30:	07dc      	lsls	r4, r3, #31
 8006a32:	d504      	bpl.n	8006a3e <_vfiprintf_r+0x4e>
 8006a34:	f04f 30ff 	mov.w	r0, #4294967295
 8006a38:	b01d      	add	sp, #116	@ 0x74
 8006a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3e:	89ab      	ldrh	r3, [r5, #12]
 8006a40:	0598      	lsls	r0, r3, #22
 8006a42:	d4f7      	bmi.n	8006a34 <_vfiprintf_r+0x44>
 8006a44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a46:	f7fe fd81 	bl	800554c <__retarget_lock_release_recursive>
 8006a4a:	e7f3      	b.n	8006a34 <_vfiprintf_r+0x44>
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a50:	2320      	movs	r3, #32
 8006a52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a56:	2330      	movs	r3, #48	@ 0x30
 8006a58:	f04f 0901 	mov.w	r9, #1
 8006a5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a60:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006c0c <_vfiprintf_r+0x21c>
 8006a64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a68:	4623      	mov	r3, r4
 8006a6a:	469a      	mov	sl, r3
 8006a6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a70:	b10a      	cbz	r2, 8006a76 <_vfiprintf_r+0x86>
 8006a72:	2a25      	cmp	r2, #37	@ 0x25
 8006a74:	d1f9      	bne.n	8006a6a <_vfiprintf_r+0x7a>
 8006a76:	ebba 0b04 	subs.w	fp, sl, r4
 8006a7a:	d00b      	beq.n	8006a94 <_vfiprintf_r+0xa4>
 8006a7c:	465b      	mov	r3, fp
 8006a7e:	4622      	mov	r2, r4
 8006a80:	4629      	mov	r1, r5
 8006a82:	4630      	mov	r0, r6
 8006a84:	f7ff ffa1 	bl	80069ca <__sfputs_r>
 8006a88:	3001      	adds	r0, #1
 8006a8a:	f000 80a7 	beq.w	8006bdc <_vfiprintf_r+0x1ec>
 8006a8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a90:	445a      	add	r2, fp
 8006a92:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a94:	f89a 3000 	ldrb.w	r3, [sl]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 809f 	beq.w	8006bdc <_vfiprintf_r+0x1ec>
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006aa8:	f10a 0a01 	add.w	sl, sl, #1
 8006aac:	9304      	str	r3, [sp, #16]
 8006aae:	9307      	str	r3, [sp, #28]
 8006ab0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ab4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ab6:	4654      	mov	r4, sl
 8006ab8:	2205      	movs	r2, #5
 8006aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006abe:	4853      	ldr	r0, [pc, #332]	@ (8006c0c <_vfiprintf_r+0x21c>)
 8006ac0:	f7fe fd45 	bl	800554e <memchr>
 8006ac4:	9a04      	ldr	r2, [sp, #16]
 8006ac6:	b9d8      	cbnz	r0, 8006b00 <_vfiprintf_r+0x110>
 8006ac8:	06d1      	lsls	r1, r2, #27
 8006aca:	bf44      	itt	mi
 8006acc:	2320      	movmi	r3, #32
 8006ace:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ad2:	0713      	lsls	r3, r2, #28
 8006ad4:	bf44      	itt	mi
 8006ad6:	232b      	movmi	r3, #43	@ 0x2b
 8006ad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006adc:	f89a 3000 	ldrb.w	r3, [sl]
 8006ae0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ae2:	d015      	beq.n	8006b10 <_vfiprintf_r+0x120>
 8006ae4:	4654      	mov	r4, sl
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	f04f 0c0a 	mov.w	ip, #10
 8006aec:	9a07      	ldr	r2, [sp, #28]
 8006aee:	4621      	mov	r1, r4
 8006af0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006af4:	3b30      	subs	r3, #48	@ 0x30
 8006af6:	2b09      	cmp	r3, #9
 8006af8:	d94b      	bls.n	8006b92 <_vfiprintf_r+0x1a2>
 8006afa:	b1b0      	cbz	r0, 8006b2a <_vfiprintf_r+0x13a>
 8006afc:	9207      	str	r2, [sp, #28]
 8006afe:	e014      	b.n	8006b2a <_vfiprintf_r+0x13a>
 8006b00:	eba0 0308 	sub.w	r3, r0, r8
 8006b04:	fa09 f303 	lsl.w	r3, r9, r3
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	46a2      	mov	sl, r4
 8006b0c:	9304      	str	r3, [sp, #16]
 8006b0e:	e7d2      	b.n	8006ab6 <_vfiprintf_r+0xc6>
 8006b10:	9b03      	ldr	r3, [sp, #12]
 8006b12:	1d19      	adds	r1, r3, #4
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	9103      	str	r1, [sp, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	bfbb      	ittet	lt
 8006b1c:	425b      	neglt	r3, r3
 8006b1e:	f042 0202 	orrlt.w	r2, r2, #2
 8006b22:	9307      	strge	r3, [sp, #28]
 8006b24:	9307      	strlt	r3, [sp, #28]
 8006b26:	bfb8      	it	lt
 8006b28:	9204      	strlt	r2, [sp, #16]
 8006b2a:	7823      	ldrb	r3, [r4, #0]
 8006b2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b2e:	d10a      	bne.n	8006b46 <_vfiprintf_r+0x156>
 8006b30:	7863      	ldrb	r3, [r4, #1]
 8006b32:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b34:	d132      	bne.n	8006b9c <_vfiprintf_r+0x1ac>
 8006b36:	9b03      	ldr	r3, [sp, #12]
 8006b38:	3402      	adds	r4, #2
 8006b3a:	1d1a      	adds	r2, r3, #4
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	9203      	str	r2, [sp, #12]
 8006b40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b44:	9305      	str	r3, [sp, #20]
 8006b46:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006c10 <_vfiprintf_r+0x220>
 8006b4a:	2203      	movs	r2, #3
 8006b4c:	4650      	mov	r0, sl
 8006b4e:	7821      	ldrb	r1, [r4, #0]
 8006b50:	f7fe fcfd 	bl	800554e <memchr>
 8006b54:	b138      	cbz	r0, 8006b66 <_vfiprintf_r+0x176>
 8006b56:	2240      	movs	r2, #64	@ 0x40
 8006b58:	9b04      	ldr	r3, [sp, #16]
 8006b5a:	eba0 000a 	sub.w	r0, r0, sl
 8006b5e:	4082      	lsls	r2, r0
 8006b60:	4313      	orrs	r3, r2
 8006b62:	3401      	adds	r4, #1
 8006b64:	9304      	str	r3, [sp, #16]
 8006b66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b6a:	2206      	movs	r2, #6
 8006b6c:	4829      	ldr	r0, [pc, #164]	@ (8006c14 <_vfiprintf_r+0x224>)
 8006b6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b72:	f7fe fcec 	bl	800554e <memchr>
 8006b76:	2800      	cmp	r0, #0
 8006b78:	d03f      	beq.n	8006bfa <_vfiprintf_r+0x20a>
 8006b7a:	4b27      	ldr	r3, [pc, #156]	@ (8006c18 <_vfiprintf_r+0x228>)
 8006b7c:	bb1b      	cbnz	r3, 8006bc6 <_vfiprintf_r+0x1d6>
 8006b7e:	9b03      	ldr	r3, [sp, #12]
 8006b80:	3307      	adds	r3, #7
 8006b82:	f023 0307 	bic.w	r3, r3, #7
 8006b86:	3308      	adds	r3, #8
 8006b88:	9303      	str	r3, [sp, #12]
 8006b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b8c:	443b      	add	r3, r7
 8006b8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b90:	e76a      	b.n	8006a68 <_vfiprintf_r+0x78>
 8006b92:	460c      	mov	r4, r1
 8006b94:	2001      	movs	r0, #1
 8006b96:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b9a:	e7a8      	b.n	8006aee <_vfiprintf_r+0xfe>
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	f04f 0c0a 	mov.w	ip, #10
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	3401      	adds	r4, #1
 8006ba6:	9305      	str	r3, [sp, #20]
 8006ba8:	4620      	mov	r0, r4
 8006baa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bae:	3a30      	subs	r2, #48	@ 0x30
 8006bb0:	2a09      	cmp	r2, #9
 8006bb2:	d903      	bls.n	8006bbc <_vfiprintf_r+0x1cc>
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d0c6      	beq.n	8006b46 <_vfiprintf_r+0x156>
 8006bb8:	9105      	str	r1, [sp, #20]
 8006bba:	e7c4      	b.n	8006b46 <_vfiprintf_r+0x156>
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bc4:	e7f0      	b.n	8006ba8 <_vfiprintf_r+0x1b8>
 8006bc6:	ab03      	add	r3, sp, #12
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	462a      	mov	r2, r5
 8006bcc:	4630      	mov	r0, r6
 8006bce:	4b13      	ldr	r3, [pc, #76]	@ (8006c1c <_vfiprintf_r+0x22c>)
 8006bd0:	a904      	add	r1, sp, #16
 8006bd2:	f7fd ff69 	bl	8004aa8 <_printf_float>
 8006bd6:	4607      	mov	r7, r0
 8006bd8:	1c78      	adds	r0, r7, #1
 8006bda:	d1d6      	bne.n	8006b8a <_vfiprintf_r+0x19a>
 8006bdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006bde:	07d9      	lsls	r1, r3, #31
 8006be0:	d405      	bmi.n	8006bee <_vfiprintf_r+0x1fe>
 8006be2:	89ab      	ldrh	r3, [r5, #12]
 8006be4:	059a      	lsls	r2, r3, #22
 8006be6:	d402      	bmi.n	8006bee <_vfiprintf_r+0x1fe>
 8006be8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bea:	f7fe fcaf 	bl	800554c <__retarget_lock_release_recursive>
 8006bee:	89ab      	ldrh	r3, [r5, #12]
 8006bf0:	065b      	lsls	r3, r3, #25
 8006bf2:	f53f af1f 	bmi.w	8006a34 <_vfiprintf_r+0x44>
 8006bf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006bf8:	e71e      	b.n	8006a38 <_vfiprintf_r+0x48>
 8006bfa:	ab03      	add	r3, sp, #12
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	462a      	mov	r2, r5
 8006c00:	4630      	mov	r0, r6
 8006c02:	4b06      	ldr	r3, [pc, #24]	@ (8006c1c <_vfiprintf_r+0x22c>)
 8006c04:	a904      	add	r1, sp, #16
 8006c06:	f7fe f9ed 	bl	8004fe4 <_printf_i>
 8006c0a:	e7e4      	b.n	8006bd6 <_vfiprintf_r+0x1e6>
 8006c0c:	08007360 	.word	0x08007360
 8006c10:	08007366 	.word	0x08007366
 8006c14:	0800736a 	.word	0x0800736a
 8006c18:	08004aa9 	.word	0x08004aa9
 8006c1c:	080069cb 	.word	0x080069cb

08006c20 <__sflush_r>:
 8006c20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c26:	0716      	lsls	r6, r2, #28
 8006c28:	4605      	mov	r5, r0
 8006c2a:	460c      	mov	r4, r1
 8006c2c:	d454      	bmi.n	8006cd8 <__sflush_r+0xb8>
 8006c2e:	684b      	ldr	r3, [r1, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	dc02      	bgt.n	8006c3a <__sflush_r+0x1a>
 8006c34:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	dd48      	ble.n	8006ccc <__sflush_r+0xac>
 8006c3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c3c:	2e00      	cmp	r6, #0
 8006c3e:	d045      	beq.n	8006ccc <__sflush_r+0xac>
 8006c40:	2300      	movs	r3, #0
 8006c42:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006c46:	682f      	ldr	r7, [r5, #0]
 8006c48:	6a21      	ldr	r1, [r4, #32]
 8006c4a:	602b      	str	r3, [r5, #0]
 8006c4c:	d030      	beq.n	8006cb0 <__sflush_r+0x90>
 8006c4e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c50:	89a3      	ldrh	r3, [r4, #12]
 8006c52:	0759      	lsls	r1, r3, #29
 8006c54:	d505      	bpl.n	8006c62 <__sflush_r+0x42>
 8006c56:	6863      	ldr	r3, [r4, #4]
 8006c58:	1ad2      	subs	r2, r2, r3
 8006c5a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c5c:	b10b      	cbz	r3, 8006c62 <__sflush_r+0x42>
 8006c5e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c60:	1ad2      	subs	r2, r2, r3
 8006c62:	2300      	movs	r3, #0
 8006c64:	4628      	mov	r0, r5
 8006c66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c68:	6a21      	ldr	r1, [r4, #32]
 8006c6a:	47b0      	blx	r6
 8006c6c:	1c43      	adds	r3, r0, #1
 8006c6e:	89a3      	ldrh	r3, [r4, #12]
 8006c70:	d106      	bne.n	8006c80 <__sflush_r+0x60>
 8006c72:	6829      	ldr	r1, [r5, #0]
 8006c74:	291d      	cmp	r1, #29
 8006c76:	d82b      	bhi.n	8006cd0 <__sflush_r+0xb0>
 8006c78:	4a28      	ldr	r2, [pc, #160]	@ (8006d1c <__sflush_r+0xfc>)
 8006c7a:	410a      	asrs	r2, r1
 8006c7c:	07d6      	lsls	r6, r2, #31
 8006c7e:	d427      	bmi.n	8006cd0 <__sflush_r+0xb0>
 8006c80:	2200      	movs	r2, #0
 8006c82:	6062      	str	r2, [r4, #4]
 8006c84:	6922      	ldr	r2, [r4, #16]
 8006c86:	04d9      	lsls	r1, r3, #19
 8006c88:	6022      	str	r2, [r4, #0]
 8006c8a:	d504      	bpl.n	8006c96 <__sflush_r+0x76>
 8006c8c:	1c42      	adds	r2, r0, #1
 8006c8e:	d101      	bne.n	8006c94 <__sflush_r+0x74>
 8006c90:	682b      	ldr	r3, [r5, #0]
 8006c92:	b903      	cbnz	r3, 8006c96 <__sflush_r+0x76>
 8006c94:	6560      	str	r0, [r4, #84]	@ 0x54
 8006c96:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c98:	602f      	str	r7, [r5, #0]
 8006c9a:	b1b9      	cbz	r1, 8006ccc <__sflush_r+0xac>
 8006c9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ca0:	4299      	cmp	r1, r3
 8006ca2:	d002      	beq.n	8006caa <__sflush_r+0x8a>
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	f7ff fab3 	bl	8006210 <_free_r>
 8006caa:	2300      	movs	r3, #0
 8006cac:	6363      	str	r3, [r4, #52]	@ 0x34
 8006cae:	e00d      	b.n	8006ccc <__sflush_r+0xac>
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	47b0      	blx	r6
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	1c50      	adds	r0, r2, #1
 8006cba:	d1c9      	bne.n	8006c50 <__sflush_r+0x30>
 8006cbc:	682b      	ldr	r3, [r5, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d0c6      	beq.n	8006c50 <__sflush_r+0x30>
 8006cc2:	2b1d      	cmp	r3, #29
 8006cc4:	d001      	beq.n	8006cca <__sflush_r+0xaa>
 8006cc6:	2b16      	cmp	r3, #22
 8006cc8:	d11d      	bne.n	8006d06 <__sflush_r+0xe6>
 8006cca:	602f      	str	r7, [r5, #0]
 8006ccc:	2000      	movs	r0, #0
 8006cce:	e021      	b.n	8006d14 <__sflush_r+0xf4>
 8006cd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cd4:	b21b      	sxth	r3, r3
 8006cd6:	e01a      	b.n	8006d0e <__sflush_r+0xee>
 8006cd8:	690f      	ldr	r7, [r1, #16]
 8006cda:	2f00      	cmp	r7, #0
 8006cdc:	d0f6      	beq.n	8006ccc <__sflush_r+0xac>
 8006cde:	0793      	lsls	r3, r2, #30
 8006ce0:	bf18      	it	ne
 8006ce2:	2300      	movne	r3, #0
 8006ce4:	680e      	ldr	r6, [r1, #0]
 8006ce6:	bf08      	it	eq
 8006ce8:	694b      	ldreq	r3, [r1, #20]
 8006cea:	1bf6      	subs	r6, r6, r7
 8006cec:	600f      	str	r7, [r1, #0]
 8006cee:	608b      	str	r3, [r1, #8]
 8006cf0:	2e00      	cmp	r6, #0
 8006cf2:	ddeb      	ble.n	8006ccc <__sflush_r+0xac>
 8006cf4:	4633      	mov	r3, r6
 8006cf6:	463a      	mov	r2, r7
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	6a21      	ldr	r1, [r4, #32]
 8006cfc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006d00:	47e0      	blx	ip
 8006d02:	2800      	cmp	r0, #0
 8006d04:	dc07      	bgt.n	8006d16 <__sflush_r+0xf6>
 8006d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d12:	81a3      	strh	r3, [r4, #12]
 8006d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d16:	4407      	add	r7, r0
 8006d18:	1a36      	subs	r6, r6, r0
 8006d1a:	e7e9      	b.n	8006cf0 <__sflush_r+0xd0>
 8006d1c:	dfbffffe 	.word	0xdfbffffe

08006d20 <_fflush_r>:
 8006d20:	b538      	push	{r3, r4, r5, lr}
 8006d22:	690b      	ldr	r3, [r1, #16]
 8006d24:	4605      	mov	r5, r0
 8006d26:	460c      	mov	r4, r1
 8006d28:	b913      	cbnz	r3, 8006d30 <_fflush_r+0x10>
 8006d2a:	2500      	movs	r5, #0
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	bd38      	pop	{r3, r4, r5, pc}
 8006d30:	b118      	cbz	r0, 8006d3a <_fflush_r+0x1a>
 8006d32:	6a03      	ldr	r3, [r0, #32]
 8006d34:	b90b      	cbnz	r3, 8006d3a <_fflush_r+0x1a>
 8006d36:	f7fe fb01 	bl	800533c <__sinit>
 8006d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d0f3      	beq.n	8006d2a <_fflush_r+0xa>
 8006d42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d44:	07d0      	lsls	r0, r2, #31
 8006d46:	d404      	bmi.n	8006d52 <_fflush_r+0x32>
 8006d48:	0599      	lsls	r1, r3, #22
 8006d4a:	d402      	bmi.n	8006d52 <_fflush_r+0x32>
 8006d4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d4e:	f7fe fbfc 	bl	800554a <__retarget_lock_acquire_recursive>
 8006d52:	4628      	mov	r0, r5
 8006d54:	4621      	mov	r1, r4
 8006d56:	f7ff ff63 	bl	8006c20 <__sflush_r>
 8006d5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d5c:	4605      	mov	r5, r0
 8006d5e:	07da      	lsls	r2, r3, #31
 8006d60:	d4e4      	bmi.n	8006d2c <_fflush_r+0xc>
 8006d62:	89a3      	ldrh	r3, [r4, #12]
 8006d64:	059b      	lsls	r3, r3, #22
 8006d66:	d4e1      	bmi.n	8006d2c <_fflush_r+0xc>
 8006d68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d6a:	f7fe fbef 	bl	800554c <__retarget_lock_release_recursive>
 8006d6e:	e7dd      	b.n	8006d2c <_fflush_r+0xc>

08006d70 <__swbuf_r>:
 8006d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d72:	460e      	mov	r6, r1
 8006d74:	4614      	mov	r4, r2
 8006d76:	4605      	mov	r5, r0
 8006d78:	b118      	cbz	r0, 8006d82 <__swbuf_r+0x12>
 8006d7a:	6a03      	ldr	r3, [r0, #32]
 8006d7c:	b90b      	cbnz	r3, 8006d82 <__swbuf_r+0x12>
 8006d7e:	f7fe fadd 	bl	800533c <__sinit>
 8006d82:	69a3      	ldr	r3, [r4, #24]
 8006d84:	60a3      	str	r3, [r4, #8]
 8006d86:	89a3      	ldrh	r3, [r4, #12]
 8006d88:	071a      	lsls	r2, r3, #28
 8006d8a:	d501      	bpl.n	8006d90 <__swbuf_r+0x20>
 8006d8c:	6923      	ldr	r3, [r4, #16]
 8006d8e:	b943      	cbnz	r3, 8006da2 <__swbuf_r+0x32>
 8006d90:	4621      	mov	r1, r4
 8006d92:	4628      	mov	r0, r5
 8006d94:	f000 f82a 	bl	8006dec <__swsetup_r>
 8006d98:	b118      	cbz	r0, 8006da2 <__swbuf_r+0x32>
 8006d9a:	f04f 37ff 	mov.w	r7, #4294967295
 8006d9e:	4638      	mov	r0, r7
 8006da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	6922      	ldr	r2, [r4, #16]
 8006da6:	b2f6      	uxtb	r6, r6
 8006da8:	1a98      	subs	r0, r3, r2
 8006daa:	6963      	ldr	r3, [r4, #20]
 8006dac:	4637      	mov	r7, r6
 8006dae:	4283      	cmp	r3, r0
 8006db0:	dc05      	bgt.n	8006dbe <__swbuf_r+0x4e>
 8006db2:	4621      	mov	r1, r4
 8006db4:	4628      	mov	r0, r5
 8006db6:	f7ff ffb3 	bl	8006d20 <_fflush_r>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d1ed      	bne.n	8006d9a <__swbuf_r+0x2a>
 8006dbe:	68a3      	ldr	r3, [r4, #8]
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	60a3      	str	r3, [r4, #8]
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	6022      	str	r2, [r4, #0]
 8006dca:	701e      	strb	r6, [r3, #0]
 8006dcc:	6962      	ldr	r2, [r4, #20]
 8006dce:	1c43      	adds	r3, r0, #1
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d004      	beq.n	8006dde <__swbuf_r+0x6e>
 8006dd4:	89a3      	ldrh	r3, [r4, #12]
 8006dd6:	07db      	lsls	r3, r3, #31
 8006dd8:	d5e1      	bpl.n	8006d9e <__swbuf_r+0x2e>
 8006dda:	2e0a      	cmp	r6, #10
 8006ddc:	d1df      	bne.n	8006d9e <__swbuf_r+0x2e>
 8006dde:	4621      	mov	r1, r4
 8006de0:	4628      	mov	r0, r5
 8006de2:	f7ff ff9d 	bl	8006d20 <_fflush_r>
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d0d9      	beq.n	8006d9e <__swbuf_r+0x2e>
 8006dea:	e7d6      	b.n	8006d9a <__swbuf_r+0x2a>

08006dec <__swsetup_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	4b29      	ldr	r3, [pc, #164]	@ (8006e94 <__swsetup_r+0xa8>)
 8006df0:	4605      	mov	r5, r0
 8006df2:	6818      	ldr	r0, [r3, #0]
 8006df4:	460c      	mov	r4, r1
 8006df6:	b118      	cbz	r0, 8006e00 <__swsetup_r+0x14>
 8006df8:	6a03      	ldr	r3, [r0, #32]
 8006dfa:	b90b      	cbnz	r3, 8006e00 <__swsetup_r+0x14>
 8006dfc:	f7fe fa9e 	bl	800533c <__sinit>
 8006e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e04:	0719      	lsls	r1, r3, #28
 8006e06:	d422      	bmi.n	8006e4e <__swsetup_r+0x62>
 8006e08:	06da      	lsls	r2, r3, #27
 8006e0a:	d407      	bmi.n	8006e1c <__swsetup_r+0x30>
 8006e0c:	2209      	movs	r2, #9
 8006e0e:	602a      	str	r2, [r5, #0]
 8006e10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e14:	f04f 30ff 	mov.w	r0, #4294967295
 8006e18:	81a3      	strh	r3, [r4, #12]
 8006e1a:	e033      	b.n	8006e84 <__swsetup_r+0x98>
 8006e1c:	0758      	lsls	r0, r3, #29
 8006e1e:	d512      	bpl.n	8006e46 <__swsetup_r+0x5a>
 8006e20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e22:	b141      	cbz	r1, 8006e36 <__swsetup_r+0x4a>
 8006e24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e28:	4299      	cmp	r1, r3
 8006e2a:	d002      	beq.n	8006e32 <__swsetup_r+0x46>
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	f7ff f9ef 	bl	8006210 <_free_r>
 8006e32:	2300      	movs	r3, #0
 8006e34:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e36:	89a3      	ldrh	r3, [r4, #12]
 8006e38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e3c:	81a3      	strh	r3, [r4, #12]
 8006e3e:	2300      	movs	r3, #0
 8006e40:	6063      	str	r3, [r4, #4]
 8006e42:	6923      	ldr	r3, [r4, #16]
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	89a3      	ldrh	r3, [r4, #12]
 8006e48:	f043 0308 	orr.w	r3, r3, #8
 8006e4c:	81a3      	strh	r3, [r4, #12]
 8006e4e:	6923      	ldr	r3, [r4, #16]
 8006e50:	b94b      	cbnz	r3, 8006e66 <__swsetup_r+0x7a>
 8006e52:	89a3      	ldrh	r3, [r4, #12]
 8006e54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e5c:	d003      	beq.n	8006e66 <__swsetup_r+0x7a>
 8006e5e:	4621      	mov	r1, r4
 8006e60:	4628      	mov	r0, r5
 8006e62:	f000 f8b0 	bl	8006fc6 <__smakebuf_r>
 8006e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e6a:	f013 0201 	ands.w	r2, r3, #1
 8006e6e:	d00a      	beq.n	8006e86 <__swsetup_r+0x9a>
 8006e70:	2200      	movs	r2, #0
 8006e72:	60a2      	str	r2, [r4, #8]
 8006e74:	6962      	ldr	r2, [r4, #20]
 8006e76:	4252      	negs	r2, r2
 8006e78:	61a2      	str	r2, [r4, #24]
 8006e7a:	6922      	ldr	r2, [r4, #16]
 8006e7c:	b942      	cbnz	r2, 8006e90 <__swsetup_r+0xa4>
 8006e7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e82:	d1c5      	bne.n	8006e10 <__swsetup_r+0x24>
 8006e84:	bd38      	pop	{r3, r4, r5, pc}
 8006e86:	0799      	lsls	r1, r3, #30
 8006e88:	bf58      	it	pl
 8006e8a:	6962      	ldrpl	r2, [r4, #20]
 8006e8c:	60a2      	str	r2, [r4, #8]
 8006e8e:	e7f4      	b.n	8006e7a <__swsetup_r+0x8e>
 8006e90:	2000      	movs	r0, #0
 8006e92:	e7f7      	b.n	8006e84 <__swsetup_r+0x98>
 8006e94:	20000078 	.word	0x20000078

08006e98 <memcpy>:
 8006e98:	440a      	add	r2, r1
 8006e9a:	4291      	cmp	r1, r2
 8006e9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ea0:	d100      	bne.n	8006ea4 <memcpy+0xc>
 8006ea2:	4770      	bx	lr
 8006ea4:	b510      	push	{r4, lr}
 8006ea6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eaa:	4291      	cmp	r1, r2
 8006eac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eb0:	d1f9      	bne.n	8006ea6 <memcpy+0xe>
 8006eb2:	bd10      	pop	{r4, pc}

08006eb4 <__assert_func>:
 8006eb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006eb6:	4614      	mov	r4, r2
 8006eb8:	461a      	mov	r2, r3
 8006eba:	4b09      	ldr	r3, [pc, #36]	@ (8006ee0 <__assert_func+0x2c>)
 8006ebc:	4605      	mov	r5, r0
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68d8      	ldr	r0, [r3, #12]
 8006ec2:	b954      	cbnz	r4, 8006eda <__assert_func+0x26>
 8006ec4:	4b07      	ldr	r3, [pc, #28]	@ (8006ee4 <__assert_func+0x30>)
 8006ec6:	461c      	mov	r4, r3
 8006ec8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ecc:	9100      	str	r1, [sp, #0]
 8006ece:	462b      	mov	r3, r5
 8006ed0:	4905      	ldr	r1, [pc, #20]	@ (8006ee8 <__assert_func+0x34>)
 8006ed2:	f000 f841 	bl	8006f58 <fiprintf>
 8006ed6:	f000 f8d5 	bl	8007084 <abort>
 8006eda:	4b04      	ldr	r3, [pc, #16]	@ (8006eec <__assert_func+0x38>)
 8006edc:	e7f4      	b.n	8006ec8 <__assert_func+0x14>
 8006ede:	bf00      	nop
 8006ee0:	20000078 	.word	0x20000078
 8006ee4:	080073b6 	.word	0x080073b6
 8006ee8:	08007388 	.word	0x08007388
 8006eec:	0800737b 	.word	0x0800737b

08006ef0 <_calloc_r>:
 8006ef0:	b570      	push	{r4, r5, r6, lr}
 8006ef2:	fba1 5402 	umull	r5, r4, r1, r2
 8006ef6:	b93c      	cbnz	r4, 8006f08 <_calloc_r+0x18>
 8006ef8:	4629      	mov	r1, r5
 8006efa:	f7fd fcab 	bl	8004854 <_malloc_r>
 8006efe:	4606      	mov	r6, r0
 8006f00:	b928      	cbnz	r0, 8006f0e <_calloc_r+0x1e>
 8006f02:	2600      	movs	r6, #0
 8006f04:	4630      	mov	r0, r6
 8006f06:	bd70      	pop	{r4, r5, r6, pc}
 8006f08:	220c      	movs	r2, #12
 8006f0a:	6002      	str	r2, [r0, #0]
 8006f0c:	e7f9      	b.n	8006f02 <_calloc_r+0x12>
 8006f0e:	462a      	mov	r2, r5
 8006f10:	4621      	mov	r1, r4
 8006f12:	f7fe fa8c 	bl	800542e <memset>
 8006f16:	e7f5      	b.n	8006f04 <_calloc_r+0x14>

08006f18 <__ascii_mbtowc>:
 8006f18:	b082      	sub	sp, #8
 8006f1a:	b901      	cbnz	r1, 8006f1e <__ascii_mbtowc+0x6>
 8006f1c:	a901      	add	r1, sp, #4
 8006f1e:	b142      	cbz	r2, 8006f32 <__ascii_mbtowc+0x1a>
 8006f20:	b14b      	cbz	r3, 8006f36 <__ascii_mbtowc+0x1e>
 8006f22:	7813      	ldrb	r3, [r2, #0]
 8006f24:	600b      	str	r3, [r1, #0]
 8006f26:	7812      	ldrb	r2, [r2, #0]
 8006f28:	1e10      	subs	r0, r2, #0
 8006f2a:	bf18      	it	ne
 8006f2c:	2001      	movne	r0, #1
 8006f2e:	b002      	add	sp, #8
 8006f30:	4770      	bx	lr
 8006f32:	4610      	mov	r0, r2
 8006f34:	e7fb      	b.n	8006f2e <__ascii_mbtowc+0x16>
 8006f36:	f06f 0001 	mvn.w	r0, #1
 8006f3a:	e7f8      	b.n	8006f2e <__ascii_mbtowc+0x16>

08006f3c <__ascii_wctomb>:
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	4608      	mov	r0, r1
 8006f40:	b141      	cbz	r1, 8006f54 <__ascii_wctomb+0x18>
 8006f42:	2aff      	cmp	r2, #255	@ 0xff
 8006f44:	d904      	bls.n	8006f50 <__ascii_wctomb+0x14>
 8006f46:	228a      	movs	r2, #138	@ 0x8a
 8006f48:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	4770      	bx	lr
 8006f50:	2001      	movs	r0, #1
 8006f52:	700a      	strb	r2, [r1, #0]
 8006f54:	4770      	bx	lr
	...

08006f58 <fiprintf>:
 8006f58:	b40e      	push	{r1, r2, r3}
 8006f5a:	b503      	push	{r0, r1, lr}
 8006f5c:	4601      	mov	r1, r0
 8006f5e:	ab03      	add	r3, sp, #12
 8006f60:	4805      	ldr	r0, [pc, #20]	@ (8006f78 <fiprintf+0x20>)
 8006f62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f66:	6800      	ldr	r0, [r0, #0]
 8006f68:	9301      	str	r3, [sp, #4]
 8006f6a:	f7ff fd41 	bl	80069f0 <_vfiprintf_r>
 8006f6e:	b002      	add	sp, #8
 8006f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f74:	b003      	add	sp, #12
 8006f76:	4770      	bx	lr
 8006f78:	20000078 	.word	0x20000078

08006f7c <__swhatbuf_r>:
 8006f7c:	b570      	push	{r4, r5, r6, lr}
 8006f7e:	460c      	mov	r4, r1
 8006f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f84:	4615      	mov	r5, r2
 8006f86:	2900      	cmp	r1, #0
 8006f88:	461e      	mov	r6, r3
 8006f8a:	b096      	sub	sp, #88	@ 0x58
 8006f8c:	da0c      	bge.n	8006fa8 <__swhatbuf_r+0x2c>
 8006f8e:	89a3      	ldrh	r3, [r4, #12]
 8006f90:	2100      	movs	r1, #0
 8006f92:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006f96:	bf14      	ite	ne
 8006f98:	2340      	movne	r3, #64	@ 0x40
 8006f9a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006f9e:	2000      	movs	r0, #0
 8006fa0:	6031      	str	r1, [r6, #0]
 8006fa2:	602b      	str	r3, [r5, #0]
 8006fa4:	b016      	add	sp, #88	@ 0x58
 8006fa6:	bd70      	pop	{r4, r5, r6, pc}
 8006fa8:	466a      	mov	r2, sp
 8006faa:	f000 f849 	bl	8007040 <_fstat_r>
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	dbed      	blt.n	8006f8e <__swhatbuf_r+0x12>
 8006fb2:	9901      	ldr	r1, [sp, #4]
 8006fb4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006fb8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006fbc:	4259      	negs	r1, r3
 8006fbe:	4159      	adcs	r1, r3
 8006fc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006fc4:	e7eb      	b.n	8006f9e <__swhatbuf_r+0x22>

08006fc6 <__smakebuf_r>:
 8006fc6:	898b      	ldrh	r3, [r1, #12]
 8006fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fca:	079d      	lsls	r5, r3, #30
 8006fcc:	4606      	mov	r6, r0
 8006fce:	460c      	mov	r4, r1
 8006fd0:	d507      	bpl.n	8006fe2 <__smakebuf_r+0x1c>
 8006fd2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006fd6:	6023      	str	r3, [r4, #0]
 8006fd8:	6123      	str	r3, [r4, #16]
 8006fda:	2301      	movs	r3, #1
 8006fdc:	6163      	str	r3, [r4, #20]
 8006fde:	b003      	add	sp, #12
 8006fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fe2:	466a      	mov	r2, sp
 8006fe4:	ab01      	add	r3, sp, #4
 8006fe6:	f7ff ffc9 	bl	8006f7c <__swhatbuf_r>
 8006fea:	9f00      	ldr	r7, [sp, #0]
 8006fec:	4605      	mov	r5, r0
 8006fee:	4639      	mov	r1, r7
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	f7fd fc2f 	bl	8004854 <_malloc_r>
 8006ff6:	b948      	cbnz	r0, 800700c <__smakebuf_r+0x46>
 8006ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ffc:	059a      	lsls	r2, r3, #22
 8006ffe:	d4ee      	bmi.n	8006fde <__smakebuf_r+0x18>
 8007000:	f023 0303 	bic.w	r3, r3, #3
 8007004:	f043 0302 	orr.w	r3, r3, #2
 8007008:	81a3      	strh	r3, [r4, #12]
 800700a:	e7e2      	b.n	8006fd2 <__smakebuf_r+0xc>
 800700c:	89a3      	ldrh	r3, [r4, #12]
 800700e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007016:	81a3      	strh	r3, [r4, #12]
 8007018:	9b01      	ldr	r3, [sp, #4]
 800701a:	6020      	str	r0, [r4, #0]
 800701c:	b15b      	cbz	r3, 8007036 <__smakebuf_r+0x70>
 800701e:	4630      	mov	r0, r6
 8007020:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007024:	f000 f81e 	bl	8007064 <_isatty_r>
 8007028:	b128      	cbz	r0, 8007036 <__smakebuf_r+0x70>
 800702a:	89a3      	ldrh	r3, [r4, #12]
 800702c:	f023 0303 	bic.w	r3, r3, #3
 8007030:	f043 0301 	orr.w	r3, r3, #1
 8007034:	81a3      	strh	r3, [r4, #12]
 8007036:	89a3      	ldrh	r3, [r4, #12]
 8007038:	431d      	orrs	r5, r3
 800703a:	81a5      	strh	r5, [r4, #12]
 800703c:	e7cf      	b.n	8006fde <__smakebuf_r+0x18>
	...

08007040 <_fstat_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	2300      	movs	r3, #0
 8007044:	4d06      	ldr	r5, [pc, #24]	@ (8007060 <_fstat_r+0x20>)
 8007046:	4604      	mov	r4, r0
 8007048:	4608      	mov	r0, r1
 800704a:	4611      	mov	r1, r2
 800704c:	602b      	str	r3, [r5, #0]
 800704e:	f7fa fc4f 	bl	80018f0 <_fstat>
 8007052:	1c43      	adds	r3, r0, #1
 8007054:	d102      	bne.n	800705c <_fstat_r+0x1c>
 8007056:	682b      	ldr	r3, [r5, #0]
 8007058:	b103      	cbz	r3, 800705c <_fstat_r+0x1c>
 800705a:	6023      	str	r3, [r4, #0]
 800705c:	bd38      	pop	{r3, r4, r5, pc}
 800705e:	bf00      	nop
 8007060:	20000a54 	.word	0x20000a54

08007064 <_isatty_r>:
 8007064:	b538      	push	{r3, r4, r5, lr}
 8007066:	2300      	movs	r3, #0
 8007068:	4d05      	ldr	r5, [pc, #20]	@ (8007080 <_isatty_r+0x1c>)
 800706a:	4604      	mov	r4, r0
 800706c:	4608      	mov	r0, r1
 800706e:	602b      	str	r3, [r5, #0]
 8007070:	f7fa fc4d 	bl	800190e <_isatty>
 8007074:	1c43      	adds	r3, r0, #1
 8007076:	d102      	bne.n	800707e <_isatty_r+0x1a>
 8007078:	682b      	ldr	r3, [r5, #0]
 800707a:	b103      	cbz	r3, 800707e <_isatty_r+0x1a>
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	bd38      	pop	{r3, r4, r5, pc}
 8007080:	20000a54 	.word	0x20000a54

08007084 <abort>:
 8007084:	2006      	movs	r0, #6
 8007086:	b508      	push	{r3, lr}
 8007088:	f000 f82c 	bl	80070e4 <raise>
 800708c:	2001      	movs	r0, #1
 800708e:	f7fa fbe0 	bl	8001852 <_exit>

08007092 <_raise_r>:
 8007092:	291f      	cmp	r1, #31
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	4605      	mov	r5, r0
 8007098:	460c      	mov	r4, r1
 800709a:	d904      	bls.n	80070a6 <_raise_r+0x14>
 800709c:	2316      	movs	r3, #22
 800709e:	6003      	str	r3, [r0, #0]
 80070a0:	f04f 30ff 	mov.w	r0, #4294967295
 80070a4:	bd38      	pop	{r3, r4, r5, pc}
 80070a6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80070a8:	b112      	cbz	r2, 80070b0 <_raise_r+0x1e>
 80070aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80070ae:	b94b      	cbnz	r3, 80070c4 <_raise_r+0x32>
 80070b0:	4628      	mov	r0, r5
 80070b2:	f000 f831 	bl	8007118 <_getpid_r>
 80070b6:	4622      	mov	r2, r4
 80070b8:	4601      	mov	r1, r0
 80070ba:	4628      	mov	r0, r5
 80070bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070c0:	f000 b818 	b.w	80070f4 <_kill_r>
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d00a      	beq.n	80070de <_raise_r+0x4c>
 80070c8:	1c59      	adds	r1, r3, #1
 80070ca:	d103      	bne.n	80070d4 <_raise_r+0x42>
 80070cc:	2316      	movs	r3, #22
 80070ce:	6003      	str	r3, [r0, #0]
 80070d0:	2001      	movs	r0, #1
 80070d2:	e7e7      	b.n	80070a4 <_raise_r+0x12>
 80070d4:	2100      	movs	r1, #0
 80070d6:	4620      	mov	r0, r4
 80070d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80070dc:	4798      	blx	r3
 80070de:	2000      	movs	r0, #0
 80070e0:	e7e0      	b.n	80070a4 <_raise_r+0x12>
	...

080070e4 <raise>:
 80070e4:	4b02      	ldr	r3, [pc, #8]	@ (80070f0 <raise+0xc>)
 80070e6:	4601      	mov	r1, r0
 80070e8:	6818      	ldr	r0, [r3, #0]
 80070ea:	f7ff bfd2 	b.w	8007092 <_raise_r>
 80070ee:	bf00      	nop
 80070f0:	20000078 	.word	0x20000078

080070f4 <_kill_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	2300      	movs	r3, #0
 80070f8:	4d06      	ldr	r5, [pc, #24]	@ (8007114 <_kill_r+0x20>)
 80070fa:	4604      	mov	r4, r0
 80070fc:	4608      	mov	r0, r1
 80070fe:	4611      	mov	r1, r2
 8007100:	602b      	str	r3, [r5, #0]
 8007102:	f7fa fb96 	bl	8001832 <_kill>
 8007106:	1c43      	adds	r3, r0, #1
 8007108:	d102      	bne.n	8007110 <_kill_r+0x1c>
 800710a:	682b      	ldr	r3, [r5, #0]
 800710c:	b103      	cbz	r3, 8007110 <_kill_r+0x1c>
 800710e:	6023      	str	r3, [r4, #0]
 8007110:	bd38      	pop	{r3, r4, r5, pc}
 8007112:	bf00      	nop
 8007114:	20000a54 	.word	0x20000a54

08007118 <_getpid_r>:
 8007118:	f7fa bb84 	b.w	8001824 <_getpid>

0800711c <_init>:
 800711c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800711e:	bf00      	nop
 8007120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007122:	bc08      	pop	{r3}
 8007124:	469e      	mov	lr, r3
 8007126:	4770      	bx	lr

08007128 <_fini>:
 8007128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712a:	bf00      	nop
 800712c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800712e:	bc08      	pop	{r3}
 8007130:	469e      	mov	lr, r3
 8007132:	4770      	bx	lr
