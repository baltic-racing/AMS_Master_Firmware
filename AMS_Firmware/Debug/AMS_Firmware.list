
AMS_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce8c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  0800d018  0800d018  0001d018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7ec  0800d7ec  000203a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7ec  0800d7ec  0001d7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7f4  0800d7f4  000203a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7f4  0800d7f4  0001d7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d7f8  0800d7f8  0001d7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003a8  20000000  0800d7fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014f8  200003a8  0800dba4  000203a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200018a0  0800dba4  000218a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000203a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000203d1  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018aaf  00000000  00000000  00020414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004532  00000000  00000000  00038ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001600  00000000  00000000  0003d3f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ae  00000000  00000000  0003e9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023309  00000000  00000000  0003faa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c42a  00000000  00000000  00062daf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0a5e  00000000  00000000  0007f1d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b8c  00000000  00000000  0013fc38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001467c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200003a8 	.word	0x200003a8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800cffc 	.word	0x0800cffc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200003ac 	.word	0x200003ac
 80001c4:	0800cffc 	.word	0x0800cffc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b972 	b.w	8000e3c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	460d      	mov	r5, r1
 8000b78:	4604      	mov	r4, r0
 8000b7a:	468e      	mov	lr, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14c      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4694      	mov	ip, r2
 8000b84:	d967      	bls.n	8000c56 <__udivmoddi4+0xe6>
 8000b86:	fab2 f382 	clz	r3, r2
 8000b8a:	b153      	cbz	r3, 8000ba2 <__udivmoddi4+0x32>
 8000b8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b90:	f1c3 0220 	rsb	r2, r3, #32
 8000b94:	fa01 fe03 	lsl.w	lr, r1, r3
 8000b98:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9c:	ea42 0e0e 	orr.w	lr, r2, lr
 8000ba0:	409c      	lsls	r4, r3
 8000ba2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba6:	fbbe f1f7 	udiv	r1, lr, r7
 8000baa:	fa1f f58c 	uxth.w	r5, ip
 8000bae:	fb07 ee11 	mls	lr, r7, r1, lr
 8000bb2:	fb01 f005 	mul.w	r0, r1, r5
 8000bb6:	0c22      	lsrs	r2, r4, #16
 8000bb8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000bbc:	4290      	cmp	r0, r2
 8000bbe:	d90a      	bls.n	8000bd6 <__udivmoddi4+0x66>
 8000bc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc4:	f101 3eff 	add.w	lr, r1, #4294967295
 8000bc8:	f080 8119 	bcs.w	8000dfe <__udivmoddi4+0x28e>
 8000bcc:	4290      	cmp	r0, r2
 8000bce:	f240 8116 	bls.w	8000dfe <__udivmoddi4+0x28e>
 8000bd2:	3902      	subs	r1, #2
 8000bd4:	4462      	add	r2, ip
 8000bd6:	1a12      	subs	r2, r2, r0
 8000bd8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bdc:	fb07 2210 	mls	r2, r7, r0, r2
 8000be0:	fb00 f505 	mul.w	r5, r0, r5
 8000be4:	b2a4      	uxth	r4, r4
 8000be6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bea:	42a5      	cmp	r5, r4
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x94>
 8000bee:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf6:	f080 8104 	bcs.w	8000e02 <__udivmoddi4+0x292>
 8000bfa:	42a5      	cmp	r5, r4
 8000bfc:	f240 8101 	bls.w	8000e02 <__udivmoddi4+0x292>
 8000c00:	4464      	add	r4, ip
 8000c02:	3802      	subs	r0, #2
 8000c04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c08:	2100      	movs	r1, #0
 8000c0a:	1b64      	subs	r4, r4, r5
 8000c0c:	b11e      	cbz	r6, 8000c16 <__udivmoddi4+0xa6>
 8000c0e:	40dc      	lsrs	r4, r3
 8000c10:	2300      	movs	r3, #0
 8000c12:	e9c6 4300 	strd	r4, r3, [r6]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0xc0>
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	f000 80ea 	beq.w	8000df8 <__udivmoddi4+0x288>
 8000c24:	2100      	movs	r1, #0
 8000c26:	e9c6 0500 	strd	r0, r5, [r6]
 8000c2a:	4608      	mov	r0, r1
 8000c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c30:	fab3 f183 	clz	r1, r3
 8000c34:	2900      	cmp	r1, #0
 8000c36:	d148      	bne.n	8000cca <__udivmoddi4+0x15a>
 8000c38:	42ab      	cmp	r3, r5
 8000c3a:	d302      	bcc.n	8000c42 <__udivmoddi4+0xd2>
 8000c3c:	4282      	cmp	r2, r0
 8000c3e:	f200 80f8 	bhi.w	8000e32 <__udivmoddi4+0x2c2>
 8000c42:	1a84      	subs	r4, r0, r2
 8000c44:	eb65 0203 	sbc.w	r2, r5, r3
 8000c48:	2001      	movs	r0, #1
 8000c4a:	4696      	mov	lr, r2
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	d0e2      	beq.n	8000c16 <__udivmoddi4+0xa6>
 8000c50:	e9c6 4e00 	strd	r4, lr, [r6]
 8000c54:	e7df      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c56:	b902      	cbnz	r2, 8000c5a <__udivmoddi4+0xea>
 8000c58:	deff      	udf	#255	; 0xff
 8000c5a:	fab2 f382 	clz	r3, r2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f040 808e 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c64:	1a88      	subs	r0, r1, r2
 8000c66:	2101      	movs	r1, #1
 8000c68:	0c17      	lsrs	r7, r2, #16
 8000c6a:	fa1f fe82 	uxth.w	lr, r2
 8000c6e:	fbb0 f5f7 	udiv	r5, r0, r7
 8000c72:	fb07 0015 	mls	r0, r7, r5, r0
 8000c76:	0c22      	lsrs	r2, r4, #16
 8000c78:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c7c:	fb0e f005 	mul.w	r0, lr, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x126>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c8c:	d202      	bcs.n	8000c94 <__udivmoddi4+0x124>
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	f200 80cc 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c94:	4645      	mov	r5, r8
 8000c96:	1a12      	subs	r2, r2, r0
 8000c98:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c9c:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ca4:	b2a4      	uxth	r4, r4
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x150>
 8000cae:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x14e>
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	f200 80b4 	bhi.w	8000e26 <__udivmoddi4+0x2b6>
 8000cbe:	4610      	mov	r0, r2
 8000cc0:	eba4 040e 	sub.w	r4, r4, lr
 8000cc4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cc8:	e7a0      	b.n	8000c0c <__udivmoddi4+0x9c>
 8000cca:	f1c1 0720 	rsb	r7, r1, #32
 8000cce:	408b      	lsls	r3, r1
 8000cd0:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cd4:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cd8:	fa25 fa07 	lsr.w	sl, r5, r7
 8000cdc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ce0:	fbba f8f9 	udiv	r8, sl, r9
 8000ce4:	408d      	lsls	r5, r1
 8000ce6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cea:	fb09 aa18 	mls	sl, r9, r8, sl
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	432b      	orrs	r3, r5
 8000cf4:	fa00 f501 	lsl.w	r5, r0, r1
 8000cf8:	fb08 f00e 	mul.w	r0, r8, lr
 8000cfc:	0c1c      	lsrs	r4, r3, #16
 8000cfe:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d02:	42a0      	cmp	r0, r4
 8000d04:	fa02 f201 	lsl.w	r2, r2, r1
 8000d08:	d90b      	bls.n	8000d22 <__udivmoddi4+0x1b2>
 8000d0a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d12:	f080 8086 	bcs.w	8000e22 <__udivmoddi4+0x2b2>
 8000d16:	42a0      	cmp	r0, r4
 8000d18:	f240 8083 	bls.w	8000e22 <__udivmoddi4+0x2b2>
 8000d1c:	f1a8 0802 	sub.w	r8, r8, #2
 8000d20:	4464      	add	r4, ip
 8000d22:	1a24      	subs	r4, r4, r0
 8000d24:	b298      	uxth	r0, r3
 8000d26:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d2a:	fb09 4413 	mls	r4, r9, r3, r4
 8000d2e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d32:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x1dc>
 8000d3a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d42:	d26a      	bcs.n	8000e1a <__udivmoddi4+0x2aa>
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d968      	bls.n	8000e1a <__udivmoddi4+0x2aa>
 8000d48:	3b02      	subs	r3, #2
 8000d4a:	4464      	add	r4, ip
 8000d4c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d50:	fba0 9302 	umull	r9, r3, r0, r2
 8000d54:	eba4 040e 	sub.w	r4, r4, lr
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	46c8      	mov	r8, r9
 8000d5c:	469e      	mov	lr, r3
 8000d5e:	d354      	bcc.n	8000e0a <__udivmoddi4+0x29a>
 8000d60:	d051      	beq.n	8000e06 <__udivmoddi4+0x296>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d067      	beq.n	8000e36 <__udivmoddi4+0x2c6>
 8000d66:	ebb5 0308 	subs.w	r3, r5, r8
 8000d6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d6e:	40cb      	lsrs	r3, r1
 8000d70:	fa04 f707 	lsl.w	r7, r4, r7
 8000d74:	431f      	orrs	r7, r3
 8000d76:	40cc      	lsrs	r4, r1
 8000d78:	e9c6 7400 	strd	r7, r4, [r6]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e74a      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0020 	rsb	r0, r3, #32
 8000d88:	40c1      	lsrs	r1, r0
 8000d8a:	409d      	lsls	r5, r3
 8000d8c:	fa24 f000 	lsr.w	r0, r4, r0
 8000d90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d94:	4328      	orrs	r0, r5
 8000d96:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d9a:	fb07 1115 	mls	r1, r7, r5, r1
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	0c02      	lsrs	r2, r0, #16
 8000da4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000da8:	fb05 f10e 	mul.w	r1, r5, lr
 8000dac:	4291      	cmp	r1, r2
 8000dae:	fa04 f403 	lsl.w	r4, r4, r3
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x256>
 8000db4:	eb1c 0202 	adds.w	r2, ip, r2
 8000db8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dbc:	d22f      	bcs.n	8000e1e <__udivmoddi4+0x2ae>
 8000dbe:	4291      	cmp	r1, r2
 8000dc0:	d92d      	bls.n	8000e1e <__udivmoddi4+0x2ae>
 8000dc2:	3d02      	subs	r5, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a52      	subs	r2, r2, r1
 8000dc8:	fbb2 f1f7 	udiv	r1, r2, r7
 8000dcc:	fb07 2211 	mls	r2, r7, r1, r2
 8000dd0:	b280      	uxth	r0, r0
 8000dd2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000dd6:	fb01 f20e 	mul.w	r2, r1, lr
 8000dda:	4282      	cmp	r2, r0
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x280>
 8000dde:	eb1c 0000 	adds.w	r0, ip, r0
 8000de2:	f101 38ff 	add.w	r8, r1, #4294967295
 8000de6:	d216      	bcs.n	8000e16 <__udivmoddi4+0x2a6>
 8000de8:	4282      	cmp	r2, r0
 8000dea:	d914      	bls.n	8000e16 <__udivmoddi4+0x2a6>
 8000dec:	3902      	subs	r1, #2
 8000dee:	4460      	add	r0, ip
 8000df0:	1a80      	subs	r0, r0, r2
 8000df2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000df6:	e73a      	b.n	8000c6e <__udivmoddi4+0xfe>
 8000df8:	4631      	mov	r1, r6
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e70b      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000dfe:	4671      	mov	r1, lr
 8000e00:	e6e9      	b.n	8000bd6 <__udivmoddi4+0x66>
 8000e02:	4610      	mov	r0, r2
 8000e04:	e6fe      	b.n	8000c04 <__udivmoddi4+0x94>
 8000e06:	454d      	cmp	r5, r9
 8000e08:	d2ab      	bcs.n	8000d62 <__udivmoddi4+0x1f2>
 8000e0a:	ebb9 0802 	subs.w	r8, r9, r2
 8000e0e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000e12:	3801      	subs	r0, #1
 8000e14:	e7a5      	b.n	8000d62 <__udivmoddi4+0x1f2>
 8000e16:	4641      	mov	r1, r8
 8000e18:	e7ea      	b.n	8000df0 <__udivmoddi4+0x280>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	e796      	b.n	8000d4c <__udivmoddi4+0x1dc>
 8000e1e:	4645      	mov	r5, r8
 8000e20:	e7d1      	b.n	8000dc6 <__udivmoddi4+0x256>
 8000e22:	46d0      	mov	r8, sl
 8000e24:	e77d      	b.n	8000d22 <__udivmoddi4+0x1b2>
 8000e26:	4464      	add	r4, ip
 8000e28:	3802      	subs	r0, #2
 8000e2a:	e749      	b.n	8000cc0 <__udivmoddi4+0x150>
 8000e2c:	3d02      	subs	r5, #2
 8000e2e:	4462      	add	r2, ip
 8000e30:	e731      	b.n	8000c96 <__udivmoddi4+0x126>
 8000e32:	4608      	mov	r0, r1
 8000e34:	e70a      	b.n	8000c4c <__udivmoddi4+0xdc>
 8000e36:	4631      	mov	r1, r6
 8000e38:	e6ed      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <spi_write_array>:
 * @param len length of the data array
 * @param data pointer to the data array
 */

static inline void spi_write_array(uint8_t len, uint8_t data[])
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi3, data, len, HAL_MAX_DELAY);
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
 8000e54:	6839      	ldr	r1, [r7, #0]
 8000e56:	4803      	ldr	r0, [pc, #12]	; (8000e64 <spi_write_array+0x24>)
 8000e58:	f004 fd1f 	bl	800589a <HAL_SPI_Transmit>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	200004e0 	.word	0x200004e0

08000e68 <spi_write_read>:
 * @param tx_len length of the data array to be transmitted
 * @param rx_data pointer to the data array to be received
 * @param rx_len length of the data array to be received
 */
static inline void spi_write_read(uint8_t tx_Data[], uint8_t tx_len, uint8_t *rx_data, uint8_t rx_len)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	461a      	mov	r2, r3
 8000e74:	460b      	mov	r3, r1
 8000e76:	72fb      	strb	r3, [r7, #11]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	72bb      	strb	r3, [r7, #10]
  HAL_SPI_Transmit(&hspi3, tx_Data, tx_len, HAL_MAX_DELAY);
 8000e7c:	7afb      	ldrb	r3, [r7, #11]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
 8000e84:	68f9      	ldr	r1, [r7, #12]
 8000e86:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <spi_write_read+0x3c>)
 8000e88:	f004 fd07 	bl	800589a <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3, rx_data, rx_len, HAL_MAX_DELAY);
 8000e8c:	7abb      	ldrb	r3, [r7, #10]
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	f04f 33ff 	mov.w	r3, #4294967295
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <spi_write_read+0x3c>)
 8000e98:	f004 fe42 	bl	8005b20 <HAL_SPI_Receive>

}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200004e0 	.word	0x200004e0

08000ea8 <LTC6811_initialize>:
uint8_t wakeup = 0x00;

/*@brief Initializes all command variables
 */
void LTC6811_initialize()
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af02      	add	r7, sp, #8
  set_adc(MD_NORMAL, DCP_DISABLED, CELL_CH_ALL, AUX_CH_ALL, CHST_SC);
 8000eae:	2301      	movs	r3, #1
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f000 f81f 	bl	8000efc <set_adc>
  //set_selftest(MD_NORMAL, ST_1);
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <wakeup_idle>:

void wakeup_idle()
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ece:	4808      	ldr	r0, [pc, #32]	; (8000ef0 <wakeup_idle+0x2c>)
 8000ed0:	f002 fde8 	bl	8003aa4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4906      	ldr	r1, [pc, #24]	; (8000ef4 <wakeup_idle+0x30>)
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <wakeup_idle+0x34>)
 8000edc:	f004 fcdd 	bl	800589a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee6:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <wakeup_idle+0x2c>)
 8000ee8:	f002 fddc 	bl	8003aa4 <HAL_GPIO_WritePin>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	200003ca 	.word	0x200003ca
 8000ef8:	200004e0 	.word	0x200004e0

08000efc <set_adc>:
			|-----------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|
			|ADCV:	    |   0   |   1   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CH[2] | CH[1] | CH[0] |
			|ADAX:	    |   1   |   0   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CHG[2]| CHG[1]| CHG[0]|
 ******************************************************************************************************************/
void set_adc(uint8_t MD, uint8_t DCP, uint8_t CH, uint8_t CHG, uint8_t CHST)
{
 8000efc:	b490      	push	{r4, r7}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4604      	mov	r4, r0
 8000f04:	4608      	mov	r0, r1
 8000f06:	4611      	mov	r1, r2
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4623      	mov	r3, r4
 8000f0c:	71fb      	strb	r3, [r7, #7]
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71bb      	strb	r3, [r7, #6]
 8000f12:	460b      	mov	r3, r1
 8000f14:	717b      	strb	r3, [r7, #5]
 8000f16:	4613      	mov	r3, r2
 8000f18:	713b      	strb	r3, [r7, #4]
  uint8_t md_bits;

  md_bits = (MD & 0x02) >> 1;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	105b      	asrs	r3, r3, #1
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]
  ADCV[0] = md_bits | 0x02;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <set_adc+0x94>)
 8000f30:	701a      	strb	r2, [r3, #0]
  md_bits = (MD & 0x01) << 7;
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	01db      	lsls	r3, r3, #7
 8000f36:	73fb      	strb	r3, [r7, #15]
  ADCV[1] = md_bits | 0x60 | (DCP << 4) | CH;
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	797b      	ldrb	r3, [r7, #5]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <set_adc+0x94>)
 8000f52:	705a      	strb	r2, [r3, #1]

  md_bits = (MD & 0x02) >> 1;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	105b      	asrs	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
  ADAX[0] = md_bits | 0x04;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <set_adc+0x98>)
 8000f6a:	701a      	strb	r2, [r3, #0]
  md_bits = (MD & 0x01) << 7;
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	01db      	lsls	r3, r3, #7
 8000f70:	73fb      	strb	r3, [r7, #15]
  ADAX[1] = md_bits | 0x60 | CHG;
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	793b      	ldrb	r3, [r7, #4]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <set_adc+0x98>)
 8000f82:	705a      	strb	r2, [r3, #1]
  md_bits = (MD & 0x02) >> 1;
  ADSTAT[0] = md_bits | 0x04;
  md_bits = (MD & 0x01) << 7;
  ADSTAT[1] = md_bits | 0x68 | CHST;
  */
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc90      	pop	{r4, r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	200003c4 	.word	0x200003c4
 8000f94:	200003c8 	.word	0x200003c8

08000f98 <LTC6811_adcv>:
 | CH     | Determines which cell channels are converted |
 | DCP    | Determines if Discharge is Permitted	     |

***********************************************************************************************/
void LTC6811_adcv()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;
	//1
	cmd[0] = ADCV[0];
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <LTC6811_adcv+0x74>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADCV[1];
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <LTC6811_adcv+0x74>)
 8000fa6:	785b      	ldrb	r3, [r3, #1]
 8000fa8:	707b      	strb	r3, [r7, #1]
	//2
	temp_pec = pec15_calc(2, ADCV);
 8000faa:	4918      	ldr	r1, [pc, #96]	; (800100c <LTC6811_adcv+0x74>)
 8000fac:	2002      	movs	r0, #2
 8000fae:	f000 fb0d 	bl	80015cc <pec15_calc>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	70fb      	strb	r3, [r7, #3]
	//3
	wakeup_idle();
 8000fc6:	f7ff ff7d 	bl	8000ec4 <wakeup_idle>
	//4
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd0:	480f      	ldr	r0, [pc, #60]	; (8001010 <LTC6811_adcv+0x78>)
 8000fd2:	f002 fd67 	bl	8003aa4 <HAL_GPIO_WritePin>
	spi_write_array(4, cmd);
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	2004      	movs	r0, #4
 8000fdc:	f7ff ff30 	bl	8000e40 <spi_write_array>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fe6:	480a      	ldr	r0, [pc, #40]	; (8001010 <LTC6811_adcv+0x78>)
 8000fe8:	f002 fd5c 	bl	8003aa4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000fec:	2301      	movs	r3, #1
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4908      	ldr	r1, [pc, #32]	; (8001014 <LTC6811_adcv+0x7c>)
 8000ff2:	4809      	ldr	r0, [pc, #36]	; (8001018 <LTC6811_adcv+0x80>)
 8000ff4:	f004 fc51 	bl	800589a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4905      	ldr	r1, [pc, #20]	; (8001014 <LTC6811_adcv+0x7c>)
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <LTC6811_adcv+0x80>)
 8001000:	f004 fc4b 	bl	800589a <HAL_SPI_Transmit>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200003c4 	.word	0x200003c4
 8001010:	40020000 	.word	0x40020000
 8001014:	200003ca 	.word	0x200003ca
 8001018:	200004e0 	.word	0x200004e0

0800101c <LTC6811_adax>:
 | MD     | Determines the filter corner of the ADC      |
 | CHG    | Determines which GPIO channels are converted |

*********************************************************************************************************/
void LTC6811_adax()
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;

	//1
	cmd[0] = ADAX[0];
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <LTC6811_adax+0x74>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADAX[1];
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <LTC6811_adax+0x74>)
 800102a:	785b      	ldrb	r3, [r3, #1]
 800102c:	707b      	strb	r3, [r7, #1]
	//2
	temp_pec = pec15_calc(2, ADAX);
 800102e:	4918      	ldr	r1, [pc, #96]	; (8001090 <LTC6811_adax+0x74>)
 8001030:	2002      	movs	r0, #2
 8001032:	f000 facb 	bl	80015cc <pec15_calc>
 8001036:	4603      	mov	r3, r0
 8001038:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	b29b      	uxth	r3, r3
 8001040:	b2db      	uxtb	r3, r3
 8001042:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	70fb      	strb	r3, [r7, #3]
	//3
	wakeup_idle();
 800104a:	f7ff ff3b 	bl	8000ec4 <wakeup_idle>
	//4
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001054:	480f      	ldr	r0, [pc, #60]	; (8001094 <LTC6811_adax+0x78>)
 8001056:	f002 fd25 	bl	8003aa4 <HAL_GPIO_WritePin>
	spi_write_array(4, cmd);
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	2004      	movs	r0, #4
 8001060:	f7ff feee 	bl	8000e40 <spi_write_array>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800106a:	480a      	ldr	r0, [pc, #40]	; (8001094 <LTC6811_adax+0x78>)
 800106c:	f002 fd1a 	bl	8003aa4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8001070:	2301      	movs	r3, #1
 8001072:	2201      	movs	r2, #1
 8001074:	4908      	ldr	r1, [pc, #32]	; (8001098 <LTC6811_adax+0x7c>)
 8001076:	4809      	ldr	r0, [pc, #36]	; (800109c <LTC6811_adax+0x80>)
 8001078:	f004 fc0f 	bl	800589a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 800107c:	2301      	movs	r3, #1
 800107e:	2201      	movs	r2, #1
 8001080:	4905      	ldr	r1, [pc, #20]	; (8001098 <LTC6811_adax+0x7c>)
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <LTC6811_adax+0x80>)
 8001084:	f004 fc09 	bl	800589a <HAL_SPI_Transmit>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200003c8 	.word	0x200003c8
 8001094:	40020000 	.word	0x40020000
 8001098:	200003ca 	.word	0x200003ca
 800109c:	200004e0 	.word	0x200004e0

080010a0 <LTC6811_wrcfg>:


void LTC6811_wrcfg(uint8_t nIC, uint8_t config [][6])

{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 80010ac:	2306      	movs	r3, #6
 80010ae:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * nIC);
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	3304      	adds	r3, #4
 80010b8:	74fb      	strb	r3, [r7, #19]

	uint16_t temp_pec;
	uint8_t current_ic;
	uint8_t WRCFG_index = 4;
 80010ba:	2304      	movs	r3, #4
 80010bc:	75bb      	strb	r3, [r7, #22]
	uint8_t *WRCFG;


	WRCFG = (uint8_t *)malloc(CMD_LEN * sizeof(uint8_t));
 80010be:	7cfb      	ldrb	r3, [r7, #19]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f009 f903 	bl	800a2cc <malloc>
 80010c6:	4603      	mov	r3, r0
 80010c8:	60fb      	str	r3, [r7, #12]

	for(current_ic = 0; current_ic < nIC; current_ic++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	75fb      	strb	r3, [r7, #23]
 80010ce:	e03f      	b.n	8001150 <LTC6811_wrcfg+0xb0>
	{
		for(uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	757b      	strb	r3, [r7, #21]
 80010d4:	e013      	b.n	80010fe <LTC6811_wrcfg+0x5e>
		{
			WRCFG[WRCFG_index] = config[current_ic][current_byte];
 80010d6:	7dfa      	ldrb	r2, [r7, #23]
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	461a      	mov	r2, r3
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	1899      	adds	r1, r3, r2
 80010e6:	7d7a      	ldrb	r2, [r7, #21]
 80010e8:	7dbb      	ldrb	r3, [r7, #22]
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	4403      	add	r3, r0
 80010ee:	5c8a      	ldrb	r2, [r1, r2]
 80010f0:	701a      	strb	r2, [r3, #0]
			WRCFG_index++;
 80010f2:	7dbb      	ldrb	r3, [r7, #22]
 80010f4:	3301      	adds	r3, #1
 80010f6:	75bb      	strb	r3, [r7, #22]
		for(uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80010f8:	7d7b      	ldrb	r3, [r7, #21]
 80010fa:	3301      	adds	r3, #1
 80010fc:	757b      	strb	r3, [r7, #21]
 80010fe:	7d7a      	ldrb	r2, [r7, #21]
 8001100:	7d3b      	ldrb	r3, [r7, #20]
 8001102:	429a      	cmp	r2, r3
 8001104:	d3e7      	bcc.n	80010d6 <LTC6811_wrcfg+0x36>
		}

		temp_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic][0]);
 8001106:	7dfa      	ldrb	r2, [r7, #23]
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	461a      	mov	r2, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	4413      	add	r3, r2
 8001116:	461a      	mov	r2, r3
 8001118:	7d3b      	ldrb	r3, [r7, #20]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fa55 	bl	80015cc <pec15_calc>
 8001122:	4603      	mov	r3, r0
 8001124:	817b      	strh	r3, [r7, #10]
		WRCFG[WRCFG_index] = (uint8_t)(temp_pec >> 8);
 8001126:	897b      	ldrh	r3, [r7, #10]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b299      	uxth	r1, r3
 800112c:	7dbb      	ldrb	r3, [r7, #22]
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	b2ca      	uxtb	r2, r1
 8001134:	701a      	strb	r2, [r3, #0]
		WRCFG[WRCFG_index + 1] = (uint8_t)temp_pec;
 8001136:	7dbb      	ldrb	r3, [r7, #22]
 8001138:	3301      	adds	r3, #1
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	4413      	add	r3, r2
 800113e:	897a      	ldrh	r2, [r7, #10]
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	701a      	strb	r2, [r3, #0]
		WRCFG_index += 2;
 8001144:	7dbb      	ldrb	r3, [r7, #22]
 8001146:	3302      	adds	r3, #2
 8001148:	75bb      	strb	r3, [r7, #22]
	for(current_ic = 0; current_ic < nIC; current_ic++)
 800114a:	7dfb      	ldrb	r3, [r7, #23]
 800114c:	3301      	adds	r3, #1
 800114e:	75fb      	strb	r3, [r7, #23]
 8001150:	7dfa      	ldrb	r2, [r7, #23]
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	429a      	cmp	r2, r3
 8001156:	d3bb      	bcc.n	80010d0 <LTC6811_wrcfg+0x30>
	}

	wakeup_idle();
 8001158:	f7ff feb4 	bl	8000ec4 <wakeup_idle>

	for(current_ic = 0; current_ic < nIC; current_ic++)
 800115c:	2300      	movs	r3, #0
 800115e:	75fb      	strb	r3, [r7, #23]
 8001160:	e045      	b.n	80011ee <LTC6811_wrcfg+0x14e>
	{
	    WRCFG[0] = 0x80 + (current_ic << 3); //Setting address
 8001162:	7dfb      	ldrb	r3, [r7, #23]
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	3b80      	subs	r3, #128	; 0x80
 800116a:	b2da      	uxtb	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	701a      	strb	r2, [r3, #0]
	    WRCFG[1] = 0x01;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3301      	adds	r3, #1
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
	    temp_pec = pec15_calc(2, WRCFG);
 8001178:	68f9      	ldr	r1, [r7, #12]
 800117a:	2002      	movs	r0, #2
 800117c:	f000 fa26 	bl	80015cc <pec15_calc>
 8001180:	4603      	mov	r3, r0
 8001182:	817b      	strh	r3, [r7, #10]
	    WRCFG[2] = (uint8_t)(temp_pec >> 8);
 8001184:	897b      	ldrh	r3, [r7, #10]
 8001186:	0a1b      	lsrs	r3, r3, #8
 8001188:	b29a      	uxth	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	3302      	adds	r3, #2
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	701a      	strb	r2, [r3, #0]
	    WRCFG[3] = (uint8_t)(temp_pec);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3303      	adds	r3, #3
 8001196:	897a      	ldrh	r2, [r7, #10]
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a2:	4818      	ldr	r0, [pc, #96]	; (8001204 <LTC6811_wrcfg+0x164>)
 80011a4:	f002 fc7e 	bl	8003aa4 <HAL_GPIO_WritePin>
		spi_write_array(4, WRCFG);
 80011a8:	68f9      	ldr	r1, [r7, #12]
 80011aa:	2004      	movs	r0, #4
 80011ac:	f7ff fe48 	bl	8000e40 <spi_write_array>
		spi_write_array(8, &WRCFG[4 + (8 * current_ic)]);
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	3304      	adds	r3, #4
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	2008      	movs	r0, #8
 80011c0:	f7ff fe3e 	bl	8000e40 <spi_write_array>
		HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ca:	480e      	ldr	r0, [pc, #56]	; (8001204 <LTC6811_wrcfg+0x164>)
 80011cc:	f002 fc6a 	bl	8003aa4 <HAL_GPIO_WritePin>


		HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 80011d0:	2301      	movs	r3, #1
 80011d2:	2201      	movs	r2, #1
 80011d4:	490c      	ldr	r1, [pc, #48]	; (8001208 <LTC6811_wrcfg+0x168>)
 80011d6:	480d      	ldr	r0, [pc, #52]	; (800120c <LTC6811_wrcfg+0x16c>)
 80011d8:	f004 fb5f 	bl	800589a <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 80011dc:	2301      	movs	r3, #1
 80011de:	2201      	movs	r2, #1
 80011e0:	4909      	ldr	r1, [pc, #36]	; (8001208 <LTC6811_wrcfg+0x168>)
 80011e2:	480a      	ldr	r0, [pc, #40]	; (800120c <LTC6811_wrcfg+0x16c>)
 80011e4:	f004 fb59 	bl	800589a <HAL_SPI_Transmit>
	for(current_ic = 0; current_ic < nIC; current_ic++)
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	3301      	adds	r3, #1
 80011ec:	75fb      	strb	r3, [r7, #23]
 80011ee:	7dfa      	ldrb	r2, [r7, #23]
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d3b5      	bcc.n	8001162 <LTC6811_wrcfg+0xc2>

	}

	free(WRCFG);
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f009 f870 	bl	800a2dc <free>
}
 80011fc:	bf00      	nop
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40020000 	.word	0x40020000
 8001208:	200003ca 	.word	0x200003ca
 800120c:	200004e0 	.word	0x200004e0

08001210 <LTC6811_rdcv>:
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
}
*/

uint8_t LTC6811_rdcv(uint8_t reg, uint8_t nIC, uint16_t cell_codes[][12])
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	603a      	str	r2, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
 800121c:	460b      	mov	r3, r1
 800121e:	71bb      	strb	r3, [r7, #6]
	const uint8_t NUM_RX_BYT = 8;
 8001220:	2308      	movs	r3, #8
 8001222:	76bb      	strb	r3, [r7, #26]
	const uint8_t BYT_IN_REG = 6;
 8001224:	2306      	movs	r3, #6
 8001226:	767b      	strb	r3, [r7, #25]
	const uint8_t CELL_IN_REG = 3;
 8001228:	2303      	movs	r3, #3
 800122a:	763b      	strb	r3, [r7, #24]

	uint8_t pec_error = 0; //pec Error wenn -1
 800122c:	2300      	movs	r3, #0
 800122e:	77fb      	strb	r3, [r7, #31]
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	77bb      	strb	r3, [r7, #30]
	uint8_t *cell_data;
	cell_data = (uint8_t *)malloc((NUM_RX_BYT * nIC) * sizeof(uint8_t));
 8001234:	7ebb      	ldrb	r3, [r7, #26]
 8001236:	79ba      	ldrb	r2, [r7, #6]
 8001238:	fb02 f303 	mul.w	r3, r2, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f009 f845 	bl	800a2cc <malloc>
 8001242:	4603      	mov	r3, r0
 8001244:	617b      	str	r3, [r7, #20]

	for(uint8_t cell_reg = 1; cell_reg < 5; cell_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001246:	2301      	movs	r3, #1
 8001248:	777b      	strb	r3, [r7, #29]
 800124a:	e068      	b.n	800131e <LTC6811_rdcv+0x10e>
	{
		data_counter = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	77bb      	strb	r3, [r7, #30]
		LTC6811_rdcv_reg(cell_reg, nIC, cell_data);
 8001250:	79b9      	ldrb	r1, [r7, #6]
 8001252:	7f7b      	ldrb	r3, [r7, #29]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f86c 	bl	8001334 <LTC6811_rdcv_reg>

		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 800125c:	2300      	movs	r3, #0
 800125e:	773b      	strb	r3, [r7, #28]
 8001260:	e056      	b.n	8001310 <LTC6811_rdcv+0x100>
		{
			 // current_ic is used as an IC counter
			for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 8001262:	2300      	movs	r3, #0
 8001264:	76fb      	strb	r3, [r7, #27]
 8001266:	e026      	b.n	80012b6 <LTC6811_rdcv+0xa6>
			{
				uint16_t parsed_cell = cell_data[data_counter] | (cell_data[data_counter + 1] << 8);
 8001268:	7fbb      	ldrb	r3, [r7, #30]
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b21a      	sxth	r2, r3
 8001272:	7fbb      	ldrb	r3, [r7, #30]
 8001274:	3301      	adds	r3, #1
 8001276:	6979      	ldr	r1, [r7, #20]
 8001278:	440b      	add	r3, r1
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	b21b      	sxth	r3, r3
 8001280:	4313      	orrs	r3, r2
 8001282:	b21b      	sxth	r3, r3
 8001284:	81fb      	strh	r3, [r7, #14]
				cell_codes[current_ic][current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8001286:	7f3a      	ldrb	r2, [r7, #28]
 8001288:	4613      	mov	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4413      	add	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	461a      	mov	r2, r3
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	4413      	add	r3, r2
 8001296:	7ef9      	ldrb	r1, [r7, #27]
 8001298:	7f7a      	ldrb	r2, [r7, #29]
 800129a:	3a01      	subs	r2, #1
 800129c:	7e38      	ldrb	r0, [r7, #24]
 800129e:	fb00 f202 	mul.w	r2, r0, r2
 80012a2:	440a      	add	r2, r1
 80012a4:	89f9      	ldrh	r1, [r7, #14]
 80012a6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter = data_counter + 2;
 80012aa:	7fbb      	ldrb	r3, [r7, #30]
 80012ac:	3302      	adds	r3, #2
 80012ae:	77bb      	strb	r3, [r7, #30]
			for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 80012b0:	7efb      	ldrb	r3, [r7, #27]
 80012b2:	3301      	adds	r3, #1
 80012b4:	76fb      	strb	r3, [r7, #27]
 80012b6:	7efa      	ldrb	r2, [r7, #27]
 80012b8:	7e3b      	ldrb	r3, [r7, #24]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d3d4      	bcc.n	8001268 <LTC6811_rdcv+0x58>
			}
			received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter + 1];
 80012be:	7fbb      	ldrb	r3, [r7, #30]
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	4413      	add	r3, r2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	7fbb      	ldrb	r3, [r7, #30]
 80012ce:	3301      	adds	r3, #1
 80012d0:	6979      	ldr	r1, [r7, #20]
 80012d2:	440b      	add	r3, r1
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	4413      	add	r3, r2
 80012da:	827b      	strh	r3, [r7, #18]
			data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 80012dc:	7f3b      	ldrb	r3, [r7, #28]
 80012de:	7eba      	ldrb	r2, [r7, #26]
 80012e0:	fb02 f303 	mul.w	r3, r2, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	441a      	add	r2, r3
 80012ea:	7e7b      	ldrb	r3, [r7, #25]
 80012ec:	4611      	mov	r1, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f96c 	bl	80015cc <pec15_calc>
 80012f4:	4603      	mov	r3, r0
 80012f6:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 80012f8:	8a7a      	ldrh	r2, [r7, #18]
 80012fa:	8a3b      	ldrh	r3, [r7, #16]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d001      	beq.n	8001304 <LTC6811_rdcv+0xf4>
			{
			  pec_error = -1;
 8001300:	23ff      	movs	r3, #255	; 0xff
 8001302:	77fb      	strb	r3, [r7, #31]
			}
			data_counter = data_counter + 2;
 8001304:	7fbb      	ldrb	r3, [r7, #30]
 8001306:	3302      	adds	r3, #2
 8001308:	77bb      	strb	r3, [r7, #30]
		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 800130a:	7f3b      	ldrb	r3, [r7, #28]
 800130c:	3301      	adds	r3, #1
 800130e:	773b      	strb	r3, [r7, #28]
 8001310:	7f3a      	ldrb	r2, [r7, #28]
 8001312:	79bb      	ldrb	r3, [r7, #6]
 8001314:	429a      	cmp	r2, r3
 8001316:	d3a4      	bcc.n	8001262 <LTC6811_rdcv+0x52>
	for(uint8_t cell_reg = 1; cell_reg < 5; cell_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001318:	7f7b      	ldrb	r3, [r7, #29]
 800131a:	3301      	adds	r3, #1
 800131c:	777b      	strb	r3, [r7, #29]
 800131e:	7f7b      	ldrb	r3, [r7, #29]
 8001320:	2b04      	cmp	r3, #4
 8001322:	d993      	bls.n	800124c <LTC6811_rdcv+0x3c>
		}
	}

	free(cell_data);
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f008 ffd9 	bl	800a2dc <free>
	return(pec_error);
 800132a:	7ffb      	ldrb	r3, [r7, #31]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <LTC6811_rdcv_reg>:

void LTC6811_rdcv_reg(uint8_t reg, uint8_t nIC, uint8_t *data)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	603a      	str	r2, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	460b      	mov	r3, r1
 8001342:	71bb      	strb	r3, [r7, #6]
	uint8_t RDCV[4];
	uint16_t temp_pec;

	switch(reg){
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	3b01      	subs	r3, #1
 8001348:	2b03      	cmp	r3, #3
 800134a:	d817      	bhi.n	800137c <LTC6811_rdcv_reg+0x48>
 800134c:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <LTC6811_rdcv_reg+0x20>)
 800134e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001352:	bf00      	nop
 8001354:	08001365 	.word	0x08001365
 8001358:	0800136b 	.word	0x0800136b
 800135c:	08001371 	.word	0x08001371
 8001360:	08001377 	.word	0x08001377
		case 1: RDCV[1] = 0x04; break;
 8001364:	2304      	movs	r3, #4
 8001366:	727b      	strb	r3, [r7, #9]
 8001368:	e008      	b.n	800137c <LTC6811_rdcv_reg+0x48>
		case 2: RDCV[1] = 0x06; break;
 800136a:	2306      	movs	r3, #6
 800136c:	727b      	strb	r3, [r7, #9]
 800136e:	e005      	b.n	800137c <LTC6811_rdcv_reg+0x48>
		case 3: RDCV[1] = 0x08; break;
 8001370:	2308      	movs	r3, #8
 8001372:	727b      	strb	r3, [r7, #9]
 8001374:	e002      	b.n	800137c <LTC6811_rdcv_reg+0x48>
		case 4: RDCV[1] = 0x0a; break;
 8001376:	230a      	movs	r3, #10
 8001378:	727b      	strb	r3, [r7, #9]
 800137a:	bf00      	nop
	}

	wakeup_idle();
 800137c:	f7ff fda2 	bl	8000ec4 <wakeup_idle>

    //Register A-D = reg 1-4
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	e02f      	b.n	80013e6 <LTC6811_rdcv_reg+0xb2>
    {
    	RDCV[0] = 0x80 + (current_ic << 3);
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	3b80      	subs	r3, #128	; 0x80
 800138e:	b2db      	uxtb	r3, r3
 8001390:	723b      	strb	r3, [r7, #8]
        temp_pec = pec15_calc(2, RDCV);
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	4619      	mov	r1, r3
 8001398:	2002      	movs	r0, #2
 800139a:	f000 f917 	bl	80015cc <pec15_calc>
 800139e:	4603      	mov	r3, r0
 80013a0:	81bb      	strh	r3, [r7, #12]
        RDCV[2] = (uint8_t)(temp_pec >> 8);
 80013a2:	89bb      	ldrh	r3, [r7, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	72bb      	strb	r3, [r7, #10]
        RDCV[3] = (uint8_t)(temp_pec);
 80013ac:	89bb      	ldrh	r3, [r7, #12]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b8:	480f      	ldr	r0, [pc, #60]	; (80013f8 <LTC6811_rdcv_reg+0xc4>)
 80013ba:	f002 fb73 	bl	8003aa4 <HAL_GPIO_WritePin>
        spi_write_read(RDCV, 4, &data[current_ic * 8], 8);
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	461a      	mov	r2, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	441a      	add	r2, r3
 80013c8:	f107 0008 	add.w	r0, r7, #8
 80013cc:	2308      	movs	r3, #8
 80013ce:	2104      	movs	r1, #4
 80013d0:	f7ff fd4a 	bl	8000e68 <spi_write_read>
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013da:	4807      	ldr	r0, [pc, #28]	; (80013f8 <LTC6811_rdcv_reg+0xc4>)
 80013dc:	f002 fb62 	bl	8003aa4 <HAL_GPIO_WritePin>
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	3301      	adds	r3, #1
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d3cb      	bcc.n	8001386 <LTC6811_rdcv_reg+0x52>
    }
}
 80013ee:	bf00      	nop
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40020000 	.word	0x40020000

080013fc <LTC6811_rdaux>:

int8_t LTC6811_rdaux(uint8_t reg, uint8_t nIC, uint16_t aux_codes[][6])
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	603a      	str	r2, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	460b      	mov	r3, r1
 800140a:	71bb      	strb	r3, [r7, #6]
	const uint8_t NUM_RX_BYT = 8;
 800140c:	2308      	movs	r3, #8
 800140e:	76bb      	strb	r3, [r7, #26]
	const uint8_t BYT_IN_REG = 6;
 8001410:	2306      	movs	r3, #6
 8001412:	767b      	strb	r3, [r7, #25]
	const uint8_t AUX_IN_REG = 3;
 8001414:	2303      	movs	r3, #3
 8001416:	763b      	strb	r3, [r7, #24]

	uint8_t pec_error = 0; //pec Error wenn -1
 8001418:	2300      	movs	r3, #0
 800141a:	77fb      	strb	r3, [r7, #31]
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	77bb      	strb	r3, [r7, #30]
	uint8_t *aux_data;

	aux_data = (uint8_t *)malloc((NUM_RX_BYT * nIC) * sizeof(uint8_t));
 8001420:	7ebb      	ldrb	r3, [r7, #26]
 8001422:	79ba      	ldrb	r2, [r7, #6]
 8001424:	fb02 f303 	mul.w	r3, r2, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f008 ff4f 	bl	800a2cc <malloc>
 800142e:	4603      	mov	r3, r0
 8001430:	617b      	str	r3, [r7, #20]

	for(uint8_t aux_reg = 1; aux_reg < AUX_IN_REG; aux_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001432:	2301      	movs	r3, #1
 8001434:	777b      	strb	r3, [r7, #29]
 8001436:	e068      	b.n	800150a <LTC6811_rdaux+0x10e>
	{
		data_counter = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	77bb      	strb	r3, [r7, #30]
		LTC6811_rdaux_reg(aux_reg, nIC, aux_data);
 800143c:	79b9      	ldrb	r1, [r7, #6]
 800143e:	7f7b      	ldrb	r3, [r7, #29]
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f86e 	bl	8001524 <LTC6811_rdaux_reg>

		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 8001448:	2300      	movs	r3, #0
 800144a:	773b      	strb	r3, [r7, #28]
 800144c:	e056      	b.n	80014fc <LTC6811_rdaux+0x100>
		{
			 // current_ic is used as an IC counter
			for(uint8_t current_cell = 0; current_cell < AUX_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 800144e:	2300      	movs	r3, #0
 8001450:	76fb      	strb	r3, [r7, #27]
 8001452:	e026      	b.n	80014a2 <LTC6811_rdaux+0xa6>
			{
				uint16_t parsed_cell = aux_data[data_counter] | (aux_data[data_counter + 1] << 8);
 8001454:	7fbb      	ldrb	r3, [r7, #30]
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	4413      	add	r3, r2
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b21a      	sxth	r2, r3
 800145e:	7fbb      	ldrb	r3, [r7, #30]
 8001460:	3301      	adds	r3, #1
 8001462:	6979      	ldr	r1, [r7, #20]
 8001464:	440b      	add	r3, r1
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21b      	sxth	r3, r3
 8001470:	81fb      	strh	r3, [r7, #14]
				aux_codes[current_ic][current_cell + ((aux_reg - 1) * AUX_IN_REG)] = parsed_cell;
 8001472:	7f3a      	ldrb	r2, [r7, #28]
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	461a      	mov	r2, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	4413      	add	r3, r2
 8001482:	7ef9      	ldrb	r1, [r7, #27]
 8001484:	7f7a      	ldrb	r2, [r7, #29]
 8001486:	3a01      	subs	r2, #1
 8001488:	7e38      	ldrb	r0, [r7, #24]
 800148a:	fb00 f202 	mul.w	r2, r0, r2
 800148e:	440a      	add	r2, r1
 8001490:	89f9      	ldrh	r1, [r7, #14]
 8001492:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter += 2;
 8001496:	7fbb      	ldrb	r3, [r7, #30]
 8001498:	3302      	adds	r3, #2
 800149a:	77bb      	strb	r3, [r7, #30]
			for(uint8_t current_cell = 0; current_cell < AUX_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 800149c:	7efb      	ldrb	r3, [r7, #27]
 800149e:	3301      	adds	r3, #1
 80014a0:	76fb      	strb	r3, [r7, #27]
 80014a2:	7efa      	ldrb	r2, [r7, #27]
 80014a4:	7e3b      	ldrb	r3, [r7, #24]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d3d4      	bcc.n	8001454 <LTC6811_rdaux+0x58>
			}
			received_pec = (aux_data[data_counter] << 8) + aux_data[data_counter + 1];
 80014aa:	7fbb      	ldrb	r3, [r7, #30]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	7fbb      	ldrb	r3, [r7, #30]
 80014ba:	3301      	adds	r3, #1
 80014bc:	6979      	ldr	r1, [r7, #20]
 80014be:	440b      	add	r3, r1
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	4413      	add	r3, r2
 80014c6:	827b      	strh	r3, [r7, #18]
			data_pec = pec15_calc(BYT_IN_REG, &aux_data[current_ic * NUM_RX_BYT]);
 80014c8:	7f3b      	ldrb	r3, [r7, #28]
 80014ca:	7eba      	ldrb	r2, [r7, #26]
 80014cc:	fb02 f303 	mul.w	r3, r2, r3
 80014d0:	461a      	mov	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	441a      	add	r2, r3
 80014d6:	7e7b      	ldrb	r3, [r7, #25]
 80014d8:	4611      	mov	r1, r2
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f876 	bl	80015cc <pec15_calc>
 80014e0:	4603      	mov	r3, r0
 80014e2:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 80014e4:	8a7a      	ldrh	r2, [r7, #18]
 80014e6:	8a3b      	ldrh	r3, [r7, #16]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d001      	beq.n	80014f0 <LTC6811_rdaux+0xf4>
			{
			  pec_error = -1;
 80014ec:	23ff      	movs	r3, #255	; 0xff
 80014ee:	77fb      	strb	r3, [r7, #31]
			}
			data_counter += 2;
 80014f0:	7fbb      	ldrb	r3, [r7, #30]
 80014f2:	3302      	adds	r3, #2
 80014f4:	77bb      	strb	r3, [r7, #30]
		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 80014f6:	7f3b      	ldrb	r3, [r7, #28]
 80014f8:	3301      	adds	r3, #1
 80014fa:	773b      	strb	r3, [r7, #28]
 80014fc:	7f3a      	ldrb	r2, [r7, #28]
 80014fe:	79bb      	ldrb	r3, [r7, #6]
 8001500:	429a      	cmp	r2, r3
 8001502:	d3a4      	bcc.n	800144e <LTC6811_rdaux+0x52>
	for(uint8_t aux_reg = 1; aux_reg < AUX_IN_REG; aux_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001504:	7f7b      	ldrb	r3, [r7, #29]
 8001506:	3301      	adds	r3, #1
 8001508:	777b      	strb	r3, [r7, #29]
 800150a:	7f7a      	ldrb	r2, [r7, #29]
 800150c:	7e3b      	ldrb	r3, [r7, #24]
 800150e:	429a      	cmp	r2, r3
 8001510:	d392      	bcc.n	8001438 <LTC6811_rdaux+0x3c>
		}
	}

	free(aux_data);
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f008 fee2 	bl	800a2dc <free>
	return(pec_error);
 8001518:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <LTC6811_rdaux_reg>:

void LTC6811_rdaux_reg(uint8_t reg, uint8_t nIC, uint8_t *data)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	603a      	str	r2, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
 8001530:	460b      	mov	r3, r1
 8001532:	71bb      	strb	r3, [r7, #6]
	uint8_t RDAUX[4];
	uint16_t temp_pec;

	switch(reg){
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d002      	beq.n	8001540 <LTC6811_rdaux_reg+0x1c>
 800153a:	2b02      	cmp	r3, #2
 800153c:	d003      	beq.n	8001546 <LTC6811_rdaux_reg+0x22>
 800153e:	e005      	b.n	800154c <LTC6811_rdaux_reg+0x28>
		case 1: RDAUX[1] = 0xC; break;
 8001540:	230c      	movs	r3, #12
 8001542:	727b      	strb	r3, [r7, #9]
 8001544:	e002      	b.n	800154c <LTC6811_rdaux_reg+0x28>
		case 2: RDAUX[1] = 0xE; break;
 8001546:	230e      	movs	r3, #14
 8001548:	727b      	strb	r3, [r7, #9]
 800154a:	bf00      	nop
	}

	wakeup_idle();
 800154c:	f7ff fcba 	bl	8000ec4 <wakeup_idle>

    //Register A-D = reg 1-4
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e02f      	b.n	80015b6 <LTC6811_rdaux_reg+0x92>
    {
    	RDAUX[0] = 0x80 + (current_ic << 3);
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	3b80      	subs	r3, #128	; 0x80
 800155e:	b2db      	uxtb	r3, r3
 8001560:	723b      	strb	r3, [r7, #8]
        temp_pec = pec15_calc(2, RDAUX);
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	4619      	mov	r1, r3
 8001568:	2002      	movs	r0, #2
 800156a:	f000 f82f 	bl	80015cc <pec15_calc>
 800156e:	4603      	mov	r3, r0
 8001570:	81bb      	strh	r3, [r7, #12]
        RDAUX[2] = (uint8_t)(temp_pec >> 8);
 8001572:	89bb      	ldrh	r3, [r7, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	b29b      	uxth	r3, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	72bb      	strb	r3, [r7, #10]
        RDAUX[3] = (uint8_t)(temp_pec);
 800157c:	89bb      	ldrh	r3, [r7, #12]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001588:	480f      	ldr	r0, [pc, #60]	; (80015c8 <LTC6811_rdaux_reg+0xa4>)
 800158a:	f002 fa8b 	bl	8003aa4 <HAL_GPIO_WritePin>
        spi_write_read(RDAUX, 4, &data[current_ic * 8], 8);
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	461a      	mov	r2, r3
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	441a      	add	r2, r3
 8001598:	f107 0008 	add.w	r0, r7, #8
 800159c:	2308      	movs	r3, #8
 800159e:	2104      	movs	r1, #4
 80015a0:	f7ff fc62 	bl	8000e68 <spi_write_read>
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015aa:	4807      	ldr	r0, [pc, #28]	; (80015c8 <LTC6811_rdaux_reg+0xa4>)
 80015ac:	f002 fa7a 	bl	8003aa4 <HAL_GPIO_WritePin>
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	3301      	adds	r3, #1
 80015b4:	73fb      	strb	r3, [r7, #15]
 80015b6:	7bfa      	ldrb	r2, [r7, #15]
 80015b8:	79bb      	ldrb	r3, [r7, #6]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d3cb      	bcc.n	8001556 <LTC6811_rdaux_reg+0x32>
    }
}
 80015be:	bf00      	nop
 80015c0:	bf00      	nop
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40020000 	.word	0x40020000

080015cc <pec15_calc>:
}
*/

//char *data uint8_t *data , uint8_t len
uint16_t pec15_calc(uint8_t len, uint8_t *data)
 {
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
 uint16_t remainder, address;

 remainder = 16;//PEC seed
 80015d8:	2310      	movs	r3, #16
 80015da:	82fb      	strh	r3, [r7, #22]
 for (int i = 0; i < len; i++)
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	e018      	b.n	8001614 <pec15_calc+0x48>
 {
 address = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 80015e2:	8afb      	ldrh	r3, [r7, #22]
 80015e4:	09db      	lsrs	r3, r3, #7
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	6839      	ldr	r1, [r7, #0]
 80015ec:	440b      	add	r3, r1
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	4053      	eors	r3, r2
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	81fb      	strh	r3, [r7, #14]
 remainder = (remainder << 8 ) ^ pec15Table[address];
 80015fa:	8afb      	ldrh	r3, [r7, #22]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	b29a      	uxth	r2, r3
 8001600:	89fb      	ldrh	r3, [r7, #14]
 8001602:	490a      	ldr	r1, [pc, #40]	; (800162c <pec15_calc+0x60>)
 8001604:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001608:	b29b      	uxth	r3, r3
 800160a:	4053      	eors	r3, r2
 800160c:	82fb      	strh	r3, [r7, #22]
 for (int i = 0; i < len; i++)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	3301      	adds	r3, #1
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	429a      	cmp	r2, r3
 800161a:	dbe2      	blt.n	80015e2 <pec15_calc+0x16>
 }
 return (remainder*2);//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 800161c:	8afb      	ldrh	r3, [r7, #22]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	b29b      	uxth	r3, r3
 }
 8001622:	4618      	mov	r0, r3
 8001624:	371c      	adds	r7, #28
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	0800d06c 	.word	0x0800d06c

08001630 <HAL_TIM_PeriodElapsedCallback>:
 * HLCK 96 MHz
 * APB1 48 MHz
 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

CAN_interrupt();
 8001638:	f000 fa22 	bl	8001a80 <CAN_interrupt>
}
 800163c:	bf00      	nop
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
   {
 8001644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001646:	b089      	sub	sp, #36	; 0x24
 8001648:	af06      	add	r7, sp, #24
 800164a:	6078      	str	r0, [r7, #4]
    CAN_RX(hcan1);
 800164c:	4e08      	ldr	r6, [pc, #32]	; (8001670 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800164e:	466d      	mov	r5, sp
 8001650:	f106 0410 	add.w	r4, r6, #16
 8001654:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001656:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001658:	e894 0003 	ldmia.w	r4, {r0, r1}
 800165c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001660:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001664:	f000 fb96 	bl	8001d94 <CAN_RX>
   }
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001670:	20000488 	.word	0x20000488

08001674 <BMS_init>:


void BMS_init()
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	LTC6811_initialize();
 8001678:	f7ff fc16 	bl	8000ea8 <LTC6811_initialize>
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <BMS>:

void BMS()		// Battery Management System function for main loop.
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
	uint8_t pec = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	713b      	strb	r3, [r7, #4]
	static uint8_t selTemp = 0;
	uint16_t VOV = MAX_VOLTAGE/16;					// Formeln aus Datenblatt S.65
 800168a:	f640 1385 	movw	r3, #2437	; 0x985
 800168e:	807b      	strh	r3, [r7, #2]
	uint16_t VUV = (MIN_VOLTAGE/16)-1;
 8001690:	f240 7352 	movw	r3, #1874	; 0x752
 8001694:	803b      	strh	r3, [r7, #0]


	for (uint8_t i = 0; i < NUM_STACK; i++)
 8001696:	2300      	movs	r3, #0
 8001698:	71fb      	strb	r3, [r7, #7]
 800169a:	e0b2      	b.n	8001802 <BMS+0x182>
		cfg[i][4] = 0x00 | OV_flag[i];
		cfg[i][5] = 0x00 | (OV_flag[i]>>8);

*/
		//Balancing without flags
		cfg[i][0] = 0x3C | ((selTemp << 6) & 0xC0);		//cfg : Databytes in config register of the LTC6811
 800169c:	4b7e      	ldr	r3, [pc, #504]	; (8001898 <BMS+0x218>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	019b      	lsls	r3, r3, #6
 80016a2:	b25b      	sxtb	r3, r3
 80016a4:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	79fa      	ldrb	r2, [r7, #7]
 80016ac:	b2d8      	uxtb	r0, r3
 80016ae:	497b      	ldr	r1, [pc, #492]	; (800189c <BMS+0x21c>)
 80016b0:	4613      	mov	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4413      	add	r3, r2
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	440b      	add	r3, r1
 80016ba:	4602      	mov	r2, r0
 80016bc:	701a      	strb	r2, [r3, #0]
		cfg[i][1] = 0x00;
 80016be:	79fa      	ldrb	r2, [r7, #7]
 80016c0:	4976      	ldr	r1, [pc, #472]	; (800189c <BMS+0x21c>)
 80016c2:	4613      	mov	r3, r2
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4413      	add	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	440b      	add	r3, r1
 80016cc:	3301      	adds	r3, #1
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
		cfg[i][2] = 0x00;
 80016d2:	79fa      	ldrb	r2, [r7, #7]
 80016d4:	4971      	ldr	r1, [pc, #452]	; (800189c <BMS+0x21c>)
 80016d6:	4613      	mov	r3, r2
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	4413      	add	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	440b      	add	r3, r1
 80016e0:	3302      	adds	r3, #2
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
		cfg[i][3] = 0x00;
 80016e6:	79fa      	ldrb	r2, [r7, #7]
 80016e8:	496c      	ldr	r1, [pc, #432]	; (800189c <BMS+0x21c>)
 80016ea:	4613      	mov	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4413      	add	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	440b      	add	r3, r1
 80016f4:	3303      	adds	r3, #3
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
		cfg[i][4] = 0x00;
 80016fa:	79fa      	ldrb	r2, [r7, #7]
 80016fc:	4967      	ldr	r1, [pc, #412]	; (800189c <BMS+0x21c>)
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	440b      	add	r3, r1
 8001708:	3304      	adds	r3, #4
 800170a:	2200      	movs	r2, #0
 800170c:	701a      	strb	r2, [r3, #0]
		cfg[i][5] = 0x00;
 800170e:	79fa      	ldrb	r2, [r7, #7]
 8001710:	4962      	ldr	r1, [pc, #392]	; (800189c <BMS+0x21c>)
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	440b      	add	r3, r1
 800171c:	3305      	adds	r3, #5
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]

		if(balancing)
 8001722:	4b5f      	ldr	r3, [pc, #380]	; (80018a0 <BMS+0x220>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d068      	beq.n	80017fc <BMS+0x17c>
		{
			if(selTemp < 3)
 800172a:	4b5b      	ldr	r3, [pc, #364]	; (8001898 <BMS+0x218>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d864      	bhi.n	80017fc <BMS+0x17c>
			{
				for(uint8_t j = 0; j < 8; j++)
 8001732:	2300      	movs	r3, #0
 8001734:	71bb      	strb	r3, [r7, #6]
 8001736:	e02b      	b.n	8001790 <BMS+0x110>
				{
					if(cellVoltages[i * NUM_STACK + j] - MAX_VOLTAGE > balanceMargin)cfg[i][4] |= 1 << j;
 8001738:	79fa      	ldrb	r2, [r7, #7]
 800173a:	79bb      	ldrb	r3, [r7, #6]
 800173c:	4413      	add	r3, r2
 800173e:	4a59      	ldr	r2, [pc, #356]	; (80018a4 <BMS+0x224>)
 8001740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001744:	f5a3 4318 	sub.w	r3, r3, #38912	; 0x9800
 8001748:	3b58      	subs	r3, #88	; 0x58
 800174a:	4a57      	ldr	r2, [pc, #348]	; (80018a8 <BMS+0x228>)
 800174c:	8812      	ldrh	r2, [r2, #0]
 800174e:	4293      	cmp	r3, r2
 8001750:	dd1b      	ble.n	800178a <BMS+0x10a>
 8001752:	79fa      	ldrb	r2, [r7, #7]
 8001754:	4951      	ldr	r1, [pc, #324]	; (800189c <BMS+0x21c>)
 8001756:	4613      	mov	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	440b      	add	r3, r1
 8001760:	3304      	adds	r3, #4
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b25a      	sxtb	r2, r3
 8001766:	79bb      	ldrb	r3, [r7, #6]
 8001768:	2101      	movs	r1, #1
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	b25b      	sxtb	r3, r3
 8001770:	4313      	orrs	r3, r2
 8001772:	b25b      	sxtb	r3, r3
 8001774:	79fa      	ldrb	r2, [r7, #7]
 8001776:	b2d8      	uxtb	r0, r3
 8001778:	4948      	ldr	r1, [pc, #288]	; (800189c <BMS+0x21c>)
 800177a:	4613      	mov	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	4413      	add	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	440b      	add	r3, r1
 8001784:	3304      	adds	r3, #4
 8001786:	4602      	mov	r2, r0
 8001788:	701a      	strb	r2, [r3, #0]
				for(uint8_t j = 0; j < 8; j++)
 800178a:	79bb      	ldrb	r3, [r7, #6]
 800178c:	3301      	adds	r3, #1
 800178e:	71bb      	strb	r3, [r7, #6]
 8001790:	79bb      	ldrb	r3, [r7, #6]
 8001792:	2b07      	cmp	r3, #7
 8001794:	d9d0      	bls.n	8001738 <BMS+0xb8>
				}
				for(uint8_t j = 0; j < 3; j++)
 8001796:	2300      	movs	r3, #0
 8001798:	717b      	strb	r3, [r7, #5]
 800179a:	e02c      	b.n	80017f6 <BMS+0x176>
				{
					if(cellVoltages[i * NUM_STACK + j + 8] - MAX_VOLTAGE > balanceMargin)cfg[i][5] |= 1 << j;
 800179c:	79fa      	ldrb	r2, [r7, #7]
 800179e:	797b      	ldrb	r3, [r7, #5]
 80017a0:	4413      	add	r3, r2
 80017a2:	3308      	adds	r3, #8
 80017a4:	4a3f      	ldr	r2, [pc, #252]	; (80018a4 <BMS+0x224>)
 80017a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017aa:	f5a3 4318 	sub.w	r3, r3, #38912	; 0x9800
 80017ae:	3b58      	subs	r3, #88	; 0x58
 80017b0:	4a3d      	ldr	r2, [pc, #244]	; (80018a8 <BMS+0x228>)
 80017b2:	8812      	ldrh	r2, [r2, #0]
 80017b4:	4293      	cmp	r3, r2
 80017b6:	dd1b      	ble.n	80017f0 <BMS+0x170>
 80017b8:	79fa      	ldrb	r2, [r7, #7]
 80017ba:	4938      	ldr	r1, [pc, #224]	; (800189c <BMS+0x21c>)
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	440b      	add	r3, r1
 80017c6:	3305      	adds	r3, #5
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b25a      	sxtb	r2, r3
 80017cc:	797b      	ldrb	r3, [r7, #5]
 80017ce:	2101      	movs	r1, #1
 80017d0:	fa01 f303 	lsl.w	r3, r1, r3
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	4313      	orrs	r3, r2
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	79fa      	ldrb	r2, [r7, #7]
 80017dc:	b2d8      	uxtb	r0, r3
 80017de:	492f      	ldr	r1, [pc, #188]	; (800189c <BMS+0x21c>)
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	440b      	add	r3, r1
 80017ea:	3305      	adds	r3, #5
 80017ec:	4602      	mov	r2, r0
 80017ee:	701a      	strb	r2, [r3, #0]
				for(uint8_t j = 0; j < 3; j++)
 80017f0:	797b      	ldrb	r3, [r7, #5]
 80017f2:	3301      	adds	r3, #1
 80017f4:	717b      	strb	r3, [r7, #5]
 80017f6:	797b      	ldrb	r3, [r7, #5]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d9cf      	bls.n	800179c <BMS+0x11c>
	for (uint8_t i = 0; i < NUM_STACK; i++)
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	3301      	adds	r3, #1
 8001800:	71fb      	strb	r3, [r7, #7]
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	2b00      	cmp	r3, #0
 8001806:	f43f af49 	beq.w	800169c <BMS+0x1c>
	/*
	LTC6811_clrstat();
	HAL_Delay(3);
*/

	LTC6811_wrcfg(NUM_STACK, (uint8_t(*)[6])cfg);		// Write config
 800180a:	4924      	ldr	r1, [pc, #144]	; (800189c <BMS+0x21c>)
 800180c:	2001      	movs	r0, #1
 800180e:	f7ff fc47 	bl	80010a0 <LTC6811_wrcfg>
	HAL_Delay(3);
 8001812:	2003      	movs	r0, #3
 8001814:	f001 f8fe 	bl	8002a14 <HAL_Delay>

	//wakeup_idle();									// read config
	//LTC6811_rdcfg();
	//HAL_Delay(3);

	LTC6811_adcv();										// measure voltages
 8001818:	f7ff fbbe 	bl	8000f98 <LTC6811_adcv>
	HAL_Delay(3);
 800181c:	2003      	movs	r0, #3
 800181e:	f001 f8f9 	bl	8002a14 <HAL_Delay>

	pec += LTC6811_rdcv(0, NUM_STACK, (uint16_t(*)[12])cellVoltages);	//read voltages
 8001822:	4a20      	ldr	r2, [pc, #128]	; (80018a4 <BMS+0x224>)
 8001824:	2101      	movs	r1, #1
 8001826:	2000      	movs	r0, #0
 8001828:	f7ff fcf2 	bl	8001210 <LTC6811_rdcv>
 800182c:	4603      	mov	r3, r0
 800182e:	461a      	mov	r2, r3
 8001830:	793b      	ldrb	r3, [r7, #4]
 8001832:	4413      	add	r3, r2
 8001834:	713b      	strb	r3, [r7, #4]
	HAL_Delay(3);
 8001836:	2003      	movs	r0, #3
 8001838:	f001 f8ec 	bl	8002a14 <HAL_Delay>

	//CAN_interrupt();

	LTC6811_adax();										// measure 3 celltemp
 800183c:	f7ff fbee 	bl	800101c <LTC6811_adax>
	HAL_Delay(3);
 8001840:	2003      	movs	r0, #3
 8001842:	f001 f8e7 	bl	8002a14 <HAL_Delay>

	pec += LTC6811_rdaux(0, NUM_STACK, (uint16_t(*)[6])slaveGPIOs);	// read celltemp
 8001846:	4a19      	ldr	r2, [pc, #100]	; (80018ac <BMS+0x22c>)
 8001848:	2101      	movs	r1, #1
 800184a:	2000      	movs	r0, #0
 800184c:	f7ff fdd6 	bl	80013fc <LTC6811_rdaux>
 8001850:	4603      	mov	r3, r0
 8001852:	b2da      	uxtb	r2, r3
 8001854:	793b      	ldrb	r3, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	713b      	strb	r3, [r7, #4]
	HAL_Delay(3);
 800185a:	2003      	movs	r0, #3
 800185c:	f001 f8da 	bl	8002a14 <HAL_Delay>

	//pec += LTC6811_rdstatb(NUM_STACK, OV_flag, UV_flag, r_statb);
	//HAL_Delay(3);


	convertVoltage();
 8001860:	f000 f826 	bl	80018b0 <convertVoltage>

	convertTemperature(selTemp);
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <BMS+0x218>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f000 f965 	bl	8001b38 <convertTemperature>

	wakeup_idle();
	LTC6811_rdstat();
*/

	if (selTemp < 3)		// Variable for cycling the multiplexers for temp measurement.
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <BMS+0x218>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b02      	cmp	r3, #2
 8001874:	d806      	bhi.n	8001884 <BMS+0x204>
	{
		selTemp++;
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <BMS+0x218>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <BMS+0x218>)
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	e002      	b.n	800188a <BMS+0x20a>
		//CAN_interrupt();
	}


	else
		selTemp = 0;
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <BMS+0x218>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]

	send_usb();
 800188a:	f000 fa25 	bl	8001cd8 <send_usb>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000460 	.word	0x20000460
 800189c:	200003e4 	.word	0x200003e4
 80018a0:	200003cb 	.word	0x200003cb
 80018a4:	200003cc 	.word	0x200003cc
 80018a8:	20000000 	.word	0x20000000
 80018ac:	200003ec 	.word	0x200003ec

080018b0 <convertVoltage>:

void convertVoltage()		//convert and sort Voltages
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
	//double voltage[NUM_CELLS];


	for(uint8_t i = 0; i < NUM_CELLS; i++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	71fb      	strb	r3, [r7, #7]
 80018ba:	e00f      	b.n	80018dc <convertVoltage+0x2c>
	{
		usb_voltages[i] = cellVoltages[i]/1000;
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	4a3a      	ldr	r2, [pc, #232]	; (80019a8 <convertVoltage+0xf8>)
 80018c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018c4:	4a39      	ldr	r2, [pc, #228]	; (80019ac <convertVoltage+0xfc>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	099b      	lsrs	r3, r3, #6
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	b2d1      	uxtb	r1, r2
 80018d2:	4a37      	ldr	r2, [pc, #220]	; (80019b0 <convertVoltage+0x100>)
 80018d4:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < NUM_CELLS; i++)
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	3301      	adds	r3, #1
 80018da:	71fb      	strb	r3, [r7, #7]
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	2b0b      	cmp	r3, #11
 80018e0:	d9ec      	bls.n	80018bc <convertVoltage+0xc>
	}

	//uint16_t cell_max = 42890;
	//uint16_t cell_min = 37789;

	uint16_t cell_max = cellVoltages[0];
 80018e2:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <convertVoltage+0xf8>)
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	80bb      	strh	r3, [r7, #4]
	uint16_t cell_min = cellVoltages[0];
 80018e8:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <convertVoltage+0xf8>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	807b      	strh	r3, [r7, #2]
	for(uint8_t k = 0; k < NUM_STACK; k++)
 80018ee:	2300      	movs	r3, #0
 80018f0:	707b      	strb	r3, [r7, #1]
 80018f2:	e03c      	b.n	800196e <convertVoltage+0xbe>
	{
		for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 80018f4:	2300      	movs	r3, #0
 80018f6:	703b      	strb	r3, [r7, #0]
 80018f8:	e033      	b.n	8001962 <convertVoltage+0xb2>
		{
			if(cellVoltages[i + k * 12] > cell_max) cell_max = cellVoltages[i + k * 12];
 80018fa:	7839      	ldrb	r1, [r7, #0]
 80018fc:	787a      	ldrb	r2, [r7, #1]
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	4a27      	ldr	r2, [pc, #156]	; (80019a8 <convertVoltage+0xf8>)
 800190a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800190e:	88ba      	ldrh	r2, [r7, #4]
 8001910:	429a      	cmp	r2, r3
 8001912:	d20b      	bcs.n	800192c <convertVoltage+0x7c>
 8001914:	7839      	ldrb	r1, [r7, #0]
 8001916:	787a      	ldrb	r2, [r7, #1]
 8001918:	4613      	mov	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4413      	add	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	4a21      	ldr	r2, [pc, #132]	; (80019a8 <convertVoltage+0xf8>)
 8001924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001928:	80bb      	strh	r3, [r7, #4]
 800192a:	e017      	b.n	800195c <convertVoltage+0xac>
			else if(cellVoltages[i + k * 12] < cell_min) cell_min = cellVoltages[i + k * 12];
 800192c:	7839      	ldrb	r1, [r7, #0]
 800192e:	787a      	ldrb	r2, [r7, #1]
 8001930:	4613      	mov	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	440b      	add	r3, r1
 800193a:	4a1b      	ldr	r2, [pc, #108]	; (80019a8 <convertVoltage+0xf8>)
 800193c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001940:	887a      	ldrh	r2, [r7, #2]
 8001942:	429a      	cmp	r2, r3
 8001944:	d90a      	bls.n	800195c <convertVoltage+0xac>
 8001946:	7839      	ldrb	r1, [r7, #0]
 8001948:	787a      	ldrb	r2, [r7, #1]
 800194a:	4613      	mov	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <convertVoltage+0xf8>)
 8001956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800195a:	807b      	strh	r3, [r7, #2]
		for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 800195c:	783b      	ldrb	r3, [r7, #0]
 800195e:	3301      	adds	r3, #1
 8001960:	703b      	strb	r3, [r7, #0]
 8001962:	783b      	ldrb	r3, [r7, #0]
 8001964:	2b0b      	cmp	r3, #11
 8001966:	d9c8      	bls.n	80018fa <convertVoltage+0x4a>
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001968:	787b      	ldrb	r3, [r7, #1]
 800196a:	3301      	adds	r3, #1
 800196c:	707b      	strb	r3, [r7, #1]
 800196e:	787b      	ldrb	r3, [r7, #1]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0bf      	beq.n	80018f4 <convertVoltage+0x44>
			//voltage[i + k * 12] = (double)cellVoltages[i + k * 12]/10000;
			//printf(" Stack %d Cell %d = %.4f V \r\n", k, i, voltage[i + k * 12]);
		}
	}

	AMS2_databytes[0] = cell_min;
 8001974:	887b      	ldrh	r3, [r7, #2]
 8001976:	b2da      	uxtb	r2, r3
 8001978:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <convertVoltage+0x104>)
 800197a:	701a      	strb	r2, [r3, #0]
	AMS2_databytes[1] = (cell_min >> 8);
 800197c:	887b      	ldrh	r3, [r7, #2]
 800197e:	0a1b      	lsrs	r3, r3, #8
 8001980:	b29b      	uxth	r3, r3
 8001982:	b2da      	uxtb	r2, r3
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <convertVoltage+0x104>)
 8001986:	705a      	strb	r2, [r3, #1]
	AMS2_databytes[2] = cell_max;
 8001988:	88bb      	ldrh	r3, [r7, #4]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <convertVoltage+0x104>)
 800198e:	709a      	strb	r2, [r3, #2]
	AMS2_databytes[3] = (cell_max >> 8);
 8001990:	88bb      	ldrh	r3, [r7, #4]
 8001992:	0a1b      	lsrs	r3, r3, #8
 8001994:	b29b      	uxth	r3, r3
 8001996:	b2da      	uxtb	r2, r3
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <convertVoltage+0x104>)
 800199a:	70da      	strb	r2, [r3, #3]



}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	200003cc 	.word	0x200003cc
 80019ac:	10624dd3 	.word	0x10624dd3
 80019b0:	2000042c 	.word	0x2000042c
 80019b4:	20000444 	.word	0x20000444

080019b8 <calculateTemperature>:


uint16_t calculateTemperature(uint16_t voltageCode, uint16_t referenceCode)		//convert temp
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	460a      	mov	r2, r1
 80019c2:	80fb      	strh	r3, [r7, #6]
 80019c4:	4613      	mov	r3, r2
 80019c6:	80bb      	strh	r3, [r7, #4]
	if(referenceCode - voltageCode != 0)
 80019c8:	88ba      	ldrh	r2, [r7, #4]
 80019ca:	88fb      	ldrh	r3, [r7, #6]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d03e      	beq.n	8001a4e <calculateTemperature+0x96>
	{
		uint32_t convert_R = (voltageCode * 100000)/(referenceCode - voltageCode);
 80019d0:	88fb      	ldrh	r3, [r7, #6]
 80019d2:	4a29      	ldr	r2, [pc, #164]	; (8001a78 <calculateTemperature+0xc0>)
 80019d4:	fb03 f202 	mul.w	r2, r3, r2
 80019d8:	88b9      	ldrh	r1, [r7, #4]
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	1acb      	subs	r3, r1, r3
 80019de:	fb92 f3f3 	sdiv	r3, r2, r3
 80019e2:	60fb      	str	r3, [r7, #12]
		return 1000.0 / ((1.0 / 298.15) - (log(10000.0 / convert_R) / 3435.0)) - 273150.0;
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7fe fd39 	bl	800045c <__aeabi_ui2d>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	a11a      	add	r1, pc, #104	; (adr r1, 8001a58 <calculateTemperature+0xa0>)
 80019f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019f4:	f7fe fed6 	bl	80007a4 <__aeabi_ddiv>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	f00b f910 	bl	800cc24 <log>
 8001a04:	a316      	add	r3, pc, #88	; (adr r3, 8001a60 <calculateTemperature+0xa8>)
 8001a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0a:	f7fe fecb 	bl	80007a4 <__aeabi_ddiv>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	a115      	add	r1, pc, #84	; (adr r1, 8001a68 <calculateTemperature+0xb0>)
 8001a14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a18:	f7fe fbe2 	bl	80001e0 <__aeabi_dsub>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	f04f 0000 	mov.w	r0, #0
 8001a24:	4915      	ldr	r1, [pc, #84]	; (8001a7c <calculateTemperature+0xc4>)
 8001a26:	f7fe febd 	bl	80007a4 <__aeabi_ddiv>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	a30f      	add	r3, pc, #60	; (adr r3, 8001a70 <calculateTemperature+0xb8>)
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	f7fe fbd2 	bl	80001e0 <__aeabi_dsub>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4610      	mov	r0, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	f7ff f85c 	bl	8000b00 <__aeabi_d2uiz>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	e000      	b.n	8001a50 <calculateTemperature+0x98>
	}
	else
		return 0x00;
 8001a4e:	2300      	movs	r3, #0


}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	00000000 	.word	0x00000000
 8001a5c:	40c38800 	.word	0x40c38800
 8001a60:	00000000 	.word	0x00000000
 8001a64:	40aad600 	.word	0x40aad600
 8001a68:	dcb5db83 	.word	0xdcb5db83
 8001a6c:	3f6b79e1 	.word	0x3f6b79e1
 8001a70:	00000000 	.word	0x00000000
 8001a74:	4110abf8 	.word	0x4110abf8
 8001a78:	000186a0 	.word	0x000186a0
 8001a7c:	408f4000 	.word	0x408f4000

08001a80 <CAN_interrupt>:

void CAN_interrupt()
{
 8001a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0

	if (HAL_GetTick()>= last10 + 10)
 8001a88:	f000 ffba 	bl	8002a00 <HAL_GetTick>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2200      	movs	r2, #0
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	617a      	str	r2, [r7, #20]
 8001a94:	4b23      	ldr	r3, [pc, #140]	; (8001b24 <CAN_interrupt+0xa4>)
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	f112 080a 	adds.w	r8, r2, #10
 8001a9e:	f143 0900 	adc.w	r9, r3, #0
 8001aa2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4541      	cmp	r1, r8
 8001aaa:	eb73 0309 	sbcs.w	r3, r3, r9
 8001aae:	d30c      	bcc.n	8001aca <CAN_interrupt+0x4a>
	{
		CAN_100();
 8001ab0:	f000 f99e 	bl	8001df0 <CAN_100>
		last10 = HAL_GetTick();
 8001ab4:	f000 ffa4 	bl	8002a00 <HAL_GetTick>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2200      	movs	r2, #0
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	60fa      	str	r2, [r7, #12]
 8001ac0:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <CAN_interrupt+0xa4>)
 8001ac2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001ac6:	e9c3 1200 	strd	r1, r2, [r3]

	}
	if (HAL_GetTick()>= last100 + 100)
 8001aca:	f000 ff99 	bl	8002a00 <HAL_GetTick>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	469a      	mov	sl, r3
 8001ad4:	4693      	mov	fp, r2
 8001ad6:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <CAN_interrupt+0xa8>)
 8001ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001adc:	f112 0464 	adds.w	r4, r2, #100	; 0x64
 8001ae0:	f143 0500 	adc.w	r5, r3, #0
 8001ae4:	45a2      	cmp	sl, r4
 8001ae6:	eb7b 0305 	sbcs.w	r3, fp, r5
 8001aea:	d316      	bcc.n	8001b1a <CAN_interrupt+0x9a>
	{
		CAN_10(AMS2_databytes);
 8001aec:	480f      	ldr	r0, [pc, #60]	; (8001b2c <CAN_interrupt+0xac>)
 8001aee:	f000 f9a5 	bl	8001e3c <CAN_10>

		HAL_GPIO_TogglePin(GPIOA, WDI_Pin);		// toggle watchdog
 8001af2:	2110      	movs	r1, #16
 8001af4:	480e      	ldr	r0, [pc, #56]	; (8001b30 <CAN_interrupt+0xb0>)
 8001af6:	f001 ffed 	bl	8003ad4 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, LED_GN_Pin);	// toggle LED
 8001afa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001afe:	480d      	ldr	r0, [pc, #52]	; (8001b34 <CAN_interrupt+0xb4>)
 8001b00:	f001 ffe8 	bl	8003ad4 <HAL_GPIO_TogglePin>
		last100 = HAL_GetTick();
 8001b04:	f000 ff7c 	bl	8002a00 <HAL_GetTick>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	603b      	str	r3, [r7, #0]
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <CAN_interrupt+0xa8>)
 8001b12:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001b16:	e9c3 1200 	strd	r1, r2, [r3]
	}
}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b24:	20000450 	.word	0x20000450
 8001b28:	20000458 	.word	0x20000458
 8001b2c:	20000444 	.word	0x20000444
 8001b30:	40020000 	.word	0x40020000
 8001b34:	40020800 	.word	0x40020800

08001b38 <convertTemperature>:


void convertTemperature(uint8_t selTemp)		// sort temp
{
 8001b38:	b5b0      	push	{r4, r5, r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
*/

	//min und max Werte noch finden


	uint8_t indexOffset[12] = {9, 4, 11, 7, 6, 1, 0, 3, 10, 2, 5, 8};
 8001b42:	4a5f      	ldr	r2, [pc, #380]	; (8001cc0 <convertTemperature+0x188>)
 8001b44:	f107 0308 	add.w	r3, r7, #8
 8001b48:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	77fb      	strb	r3, [r7, #31]
 8001b52:	e037      	b.n	8001bc4 <convertTemperature+0x8c>
	{
			for(uint8_t j = 0; j < 3; j++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	77bb      	strb	r3, [r7, #30]
 8001b58:	e02e      	b.n	8001bb8 <convertTemperature+0x80>
			{
				temperature[k * NUM_CELLS_STACK + indexOffset[j + selTemp * 3]] = calculateTemperature(slaveGPIOs[j + k * 6], slaveGPIOs[5 + k * NUM_GPIO_STACK]);
 8001b5a:	7fb9      	ldrb	r1, [r7, #30]
 8001b5c:	7ffa      	ldrb	r2, [r7, #31]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	440b      	add	r3, r1
 8001b68:	4a56      	ldr	r2, [pc, #344]	; (8001cc4 <convertTemperature+0x18c>)
 8001b6a:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8001b6e:	7ffa      	ldrb	r2, [r7, #31]
 8001b70:	4613      	mov	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	3305      	adds	r3, #5
 8001b7a:	4a52      	ldr	r2, [pc, #328]	; (8001cc4 <convertTemperature+0x18c>)
 8001b7c:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8001b80:	7ffa      	ldrb	r2, [r7, #31]
 8001b82:	4613      	mov	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	461c      	mov	r4, r3
 8001b8c:	7fb9      	ldrb	r1, [r7, #30]
 8001b8e:	79fa      	ldrb	r2, [r7, #7]
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	3320      	adds	r3, #32
 8001b9a:	443b      	add	r3, r7
 8001b9c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001ba0:	441c      	add	r4, r3
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	f7ff ff08 	bl	80019b8 <calculateTemperature>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b46      	ldr	r3, [pc, #280]	; (8001cc8 <convertTemperature+0x190>)
 8001bae:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			for(uint8_t j = 0; j < 3; j++)
 8001bb2:	7fbb      	ldrb	r3, [r7, #30]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	77bb      	strb	r3, [r7, #30]
 8001bb8:	7fbb      	ldrb	r3, [r7, #30]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d9cd      	bls.n	8001b5a <convertTemperature+0x22>
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001bbe:	7ffb      	ldrb	r3, [r7, #31]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	77fb      	strb	r3, [r7, #31]
 8001bc4:	7ffb      	ldrb	r3, [r7, #31]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0c4      	beq.n	8001b54 <convertTemperature+0x1c>
				}
			}
			*/
		//USB STUFF

	if(selTemp == 3)
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d172      	bne.n	8001cb6 <convertTemperature+0x17e>
	{
		for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	777b      	strb	r3, [r7, #29]
 8001bd4:	e00f      	b.n	8001bf6 <convertTemperature+0xbe>
		{
			usb_temperatures[i] = temperature[i]/1000;
 8001bd6:	7f7b      	ldrb	r3, [r7, #29]
 8001bd8:	4a3b      	ldr	r2, [pc, #236]	; (8001cc8 <convertTemperature+0x190>)
 8001bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bde:	4a3b      	ldr	r2, [pc, #236]	; (8001ccc <convertTemperature+0x194>)
 8001be0:	fba2 2303 	umull	r2, r3, r2, r3
 8001be4:	099b      	lsrs	r3, r3, #6
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	7f7b      	ldrb	r3, [r7, #29]
 8001bea:	b2d1      	uxtb	r1, r2
 8001bec:	4a38      	ldr	r2, [pc, #224]	; (8001cd0 <convertTemperature+0x198>)
 8001bee:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001bf0:	7f7b      	ldrb	r3, [r7, #29]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	777b      	strb	r3, [r7, #29]
 8001bf6:	7f7b      	ldrb	r3, [r7, #29]
 8001bf8:	2b0b      	cmp	r3, #11
 8001bfa:	d9ec      	bls.n	8001bd6 <convertTemperature+0x9e>
		}

		//CAN stuff


		uint16_t temp_min = temperature[0];
 8001bfc:	4b32      	ldr	r3, [pc, #200]	; (8001cc8 <convertTemperature+0x190>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	837b      	strh	r3, [r7, #26]
			uint16_t temp_max = temperature[0];
 8001c02:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <convertTemperature+0x190>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	833b      	strh	r3, [r7, #24]
		for(uint8_t k = 0; k < NUM_STACK; k++)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	75fb      	strb	r3, [r7, #23]
 8001c0c:	e050      	b.n	8001cb0 <convertTemperature+0x178>
			{
				for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	75bb      	strb	r3, [r7, #22]
 8001c12:	e033      	b.n	8001c7c <convertTemperature+0x144>
				{
					if(temperature[i + k * 12] > temp_max) temp_max = temperature[i + k * 12];
 8001c14:	7db9      	ldrb	r1, [r7, #22]
 8001c16:	7dfa      	ldrb	r2, [r7, #23]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	4a29      	ldr	r2, [pc, #164]	; (8001cc8 <convertTemperature+0x190>)
 8001c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c28:	8b3a      	ldrh	r2, [r7, #24]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d20b      	bcs.n	8001c46 <convertTemperature+0x10e>
 8001c2e:	7db9      	ldrb	r1, [r7, #22]
 8001c30:	7dfa      	ldrb	r2, [r7, #23]
 8001c32:	4613      	mov	r3, r2
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4413      	add	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	4a22      	ldr	r2, [pc, #136]	; (8001cc8 <convertTemperature+0x190>)
 8001c3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c42:	833b      	strh	r3, [r7, #24]
 8001c44:	e017      	b.n	8001c76 <convertTemperature+0x13e>
					else if(temperature[i + k * 12] < temp_min) temp_min = temperature[i + k * 12];
 8001c46:	7db9      	ldrb	r1, [r7, #22]
 8001c48:	7dfa      	ldrb	r2, [r7, #23]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	4a1c      	ldr	r2, [pc, #112]	; (8001cc8 <convertTemperature+0x190>)
 8001c56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c5a:	8b7a      	ldrh	r2, [r7, #26]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d90a      	bls.n	8001c76 <convertTemperature+0x13e>
 8001c60:	7db9      	ldrb	r1, [r7, #22]
 8001c62:	7dfa      	ldrb	r2, [r7, #23]
 8001c64:	4613      	mov	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <convertTemperature+0x190>)
 8001c70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c74:	837b      	strh	r3, [r7, #26]
				for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 8001c76:	7dbb      	ldrb	r3, [r7, #22]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	75bb      	strb	r3, [r7, #22]
 8001c7c:	7dbb      	ldrb	r3, [r7, #22]
 8001c7e:	2b0b      	cmp	r3, #11
 8001c80:	d9c8      	bls.n	8001c14 <convertTemperature+0xdc>
				}

		AMS2_databytes[4] = temp_min;
 8001c82:	8b7b      	ldrh	r3, [r7, #26]
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <convertTemperature+0x19c>)
 8001c88:	711a      	strb	r2, [r3, #4]
		AMS2_databytes[5] = (temp_min >> 8);
 8001c8a:	8b7b      	ldrh	r3, [r7, #26]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <convertTemperature+0x19c>)
 8001c94:	715a      	strb	r2, [r3, #5]
		AMS2_databytes[6] = temp_max;
 8001c96:	8b3b      	ldrh	r3, [r7, #24]
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <convertTemperature+0x19c>)
 8001c9c:	719a      	strb	r2, [r3, #6]
		AMS2_databytes[7] = (temp_max >> 8);
 8001c9e:	8b3b      	ldrh	r3, [r7, #24]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <convertTemperature+0x19c>)
 8001ca8:	71da      	strb	r2, [r3, #7]
		for(uint8_t k = 0; k < NUM_STACK; k++)
 8001caa:	7dfb      	ldrb	r3, [r7, #23]
 8001cac:	3301      	adds	r3, #1
 8001cae:	75fb      	strb	r3, [r7, #23]
 8001cb0:	7dfb      	ldrb	r3, [r7, #23]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0ab      	beq.n	8001c0e <convertTemperature+0xd6>


			}
	}
}
 8001cb6:	bf00      	nop
 8001cb8:	3720      	adds	r7, #32
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	0800d018 	.word	0x0800d018
 8001cc4:	200003ec 	.word	0x200003ec
 8001cc8:	200003f8 	.word	0x200003f8
 8001ccc:	10624dd3 	.word	0x10624dd3
 8001cd0:	20000438 	.word	0x20000438
 8001cd4:	20000444 	.word	0x20000444

08001cd8 <send_usb>:

void send_usb()
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
	usb_data[NUM_CELLS * 2] = 0xff;
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <send_usb+0x48>)
 8001ce0:	22ff      	movs	r2, #255	; 0xff
 8001ce2:	761a      	strb	r2, [r3, #24]
	for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	71fb      	strb	r3, [r7, #7]
 8001ce8:	e00f      	b.n	8001d0a <send_usb+0x32>
	{
		usb_data[i] = usb_voltages[i];
 8001cea:	79fa      	ldrb	r2, [r7, #7]
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	490d      	ldr	r1, [pc, #52]	; (8001d24 <send_usb+0x4c>)
 8001cf0:	5c89      	ldrb	r1, [r1, r2]
 8001cf2:	4a0b      	ldr	r2, [pc, #44]	; (8001d20 <send_usb+0x48>)
 8001cf4:	54d1      	strb	r1, [r2, r3]
		usb_data[NUM_CELLS + i] = usb_temperatures[i];
 8001cf6:	79fa      	ldrb	r2, [r7, #7]
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
 8001cfa:	330c      	adds	r3, #12
 8001cfc:	490a      	ldr	r1, [pc, #40]	; (8001d28 <send_usb+0x50>)
 8001cfe:	5c89      	ldrb	r1, [r1, r2]
 8001d00:	4a07      	ldr	r2, [pc, #28]	; (8001d20 <send_usb+0x48>)
 8001d02:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	3301      	adds	r3, #1
 8001d08:	71fb      	strb	r3, [r7, #7]
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	2b0b      	cmp	r3, #11
 8001d0e:	d9ec      	bls.n	8001cea <send_usb+0x12>

	}

	CDC_Transmit_FS(usb_data, NUM_CELLS * 2 + 1);
 8001d10:	2119      	movs	r1, #25
 8001d12:	4803      	ldr	r0, [pc, #12]	; (8001d20 <send_usb+0x48>)
 8001d14:	f007 fe9a 	bl	8009a4c <CDC_Transmit_FS>
	//CDC_Transmit_FS(usb_voltages, NUM_CELLS + 1);

}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000410 	.word	0x20000410
 8001d24:	2000042c 	.word	0x2000042c
 8001d28:	20000438 	.word	0x20000438

08001d2c <CAN_TX>:

uint32_t RxFifo;

	// transmit CAN Message
void CAN_TX(CAN_HandleTypeDef hcan, CAN_TxHeaderTypeDef TxHeader, uint8_t* TxData)
{
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	b5b0      	push	{r4, r5, r7, lr}
 8001d30:	b090      	sub	sp, #64	; 0x40
 8001d32:	af0e      	add	r7, sp, #56	; 0x38
 8001d34:	f107 0418 	add.w	r4, r7, #24
 8001d38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t TxMailbox;
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001d42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d44:	f107 0018 	add.w	r0, r7, #24
 8001d48:	f000 ffc7 	bl	8002cda <HAL_CAN_AddTxMessage>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d018      	beq.n	8001d84 <CAN_TX+0x58>
	{
		CAN_TX(hcan, TxHeader, TxData);		//retry when failed
 8001d52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d54:	930c      	str	r3, [sp, #48]	; 0x30
 8001d56:	ad06      	add	r5, sp, #24
 8001d58:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001d5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d64:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d68:	466d      	mov	r5, sp
 8001d6a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d76:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d7a:	f107 0318 	add.w	r3, r7, #24
 8001d7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d80:	f7ff ffd4 	bl	8001d2c <CAN_TX>
	}
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001d8e:	b004      	add	sp, #16
 8001d90:	4770      	bx	lr
	...

08001d94 <CAN_RX>:

	// receive CAN Message
void CAN_RX(CAN_HandleTypeDef hcan)
{
 8001d94:	b084      	sub	sp, #16
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b08a      	sub	sp, #40	; 0x28
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8001da0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];


	if (HAL_CAN_GetRxMessage(&hcan, RxFifo, &RxHeader, RxData) != HAL_OK)
 8001da4:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <CAN_RX+0x50>)
 8001da6:	6819      	ldr	r1, [r3, #0]
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	f107 020c 	add.w	r2, r7, #12
 8001dae:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001db2:	f001 f861 	bl	8002e78 <HAL_CAN_GetRxMessage>
	{

	}

	if( RxHeader.StdId == 0x500)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001dbc:	d10b      	bne.n	8001dd6 <CAN_RX+0x42>
	{

		DIC0_databytes[8] = RxData[8];
 8001dbe:	7b3a      	ldrb	r2, [r7, #12]
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <CAN_RX+0x54>)
 8001dc2:	721a      	strb	r2, [r3, #8]

		AIR_Logic(DIC0_databytes[0], AMS3_databytes[0], DIC0_databytes[1]);
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <CAN_RX+0x54>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4a08      	ldr	r2, [pc, #32]	; (8001dec <CAN_RX+0x58>)
 8001dca:	7811      	ldrb	r1, [r2, #0]
 8001dcc:	4a06      	ldr	r2, [pc, #24]	; (8001de8 <CAN_RX+0x54>)
 8001dce:	7852      	ldrb	r2, [r2, #1]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 f9db 	bl	800218c <AIR_Logic>

	}

	// hier kann man weitere Nachrichten zum Empfangen hinzufügen

}
 8001dd6:	bf00      	nop
 8001dd8:	3728      	adds	r7, #40	; 0x28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001de0:	b004      	add	sp, #16
 8001de2:	4770      	bx	lr
 8001de4:	20000484 	.word	0x20000484
 8001de8:	2000047c 	.word	0x2000047c
 8001dec:	2000046c 	.word	0x2000046c

08001df0 <CAN_100>:




void CAN_100()		// CAN Messages transmitted with 100 Hz
{
 8001df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df2:	b08f      	sub	sp, #60	; 0x3c
 8001df4:	af0e      	add	r7, sp, #56	; 0x38

	CAN_TX(hcan1, AMS0_header, AMS0_databytes);
 8001df6:	4e0e      	ldr	r6, [pc, #56]	; (8001e30 <CAN_100+0x40>)
 8001df8:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <CAN_100+0x44>)
 8001dfa:	930c      	str	r3, [sp, #48]	; 0x30
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <CAN_100+0x48>)
 8001dfe:	ac06      	add	r4, sp, #24
 8001e00:	461d      	mov	r5, r3
 8001e02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e06:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e0a:	e884 0003 	stmia.w	r4, {r0, r1}
 8001e0e:	466d      	mov	r5, sp
 8001e10:	f106 0410 	add.w	r4, r6, #16
 8001e14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e20:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001e24:	f7ff ff82 	bl	8001d2c <CAN_TX>
}
 8001e28:	bf00      	nop
 8001e2a:	3704      	adds	r7, #4
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e30:	20000488 	.word	0x20000488
 8001e34:	20000464 	.word	0x20000464
 8001e38:	20000004 	.word	0x20000004

08001e3c <CAN_10>:

void CAN_10(uint8_t bms_data[])		// CAN Messages transmitted with 10 Hz
{
 8001e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e3e:	b091      	sub	sp, #68	; 0x44
 8001e40:	af0e      	add	r7, sp, #56	; 0x38
 8001e42:	6078      	str	r0, [r7, #4]
	CAN_TX(hcan1, AMS1_header, AMS1_databytes);
 8001e44:	4e27      	ldr	r6, [pc, #156]	; (8001ee4 <CAN_10+0xa8>)
 8001e46:	4b28      	ldr	r3, [pc, #160]	; (8001ee8 <CAN_10+0xac>)
 8001e48:	930c      	str	r3, [sp, #48]	; 0x30
 8001e4a:	4b28      	ldr	r3, [pc, #160]	; (8001eec <CAN_10+0xb0>)
 8001e4c:	ac06      	add	r4, sp, #24
 8001e4e:	461d      	mov	r5, r3
 8001e50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e54:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e58:	e884 0003 	stmia.w	r4, {r0, r1}
 8001e5c:	466d      	mov	r5, sp
 8001e5e:	f106 0410 	add.w	r4, r6, #16
 8001e62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e6e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001e72:	f7ff ff5b 	bl	8001d2c <CAN_TX>
	CAN_TX(hcan1, AMS2_header, bms_data);
 8001e76:	4e1b      	ldr	r6, [pc, #108]	; (8001ee4 <CAN_10+0xa8>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	930c      	str	r3, [sp, #48]	; 0x30
 8001e7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <CAN_10+0xb4>)
 8001e7e:	ac06      	add	r4, sp, #24
 8001e80:	461d      	mov	r5, r3
 8001e82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e86:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e8a:	e884 0003 	stmia.w	r4, {r0, r1}
 8001e8e:	466d      	mov	r5, sp
 8001e90:	f106 0410 	add.w	r4, r6, #16
 8001e94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ea0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001ea4:	f7ff ff42 	bl	8001d2c <CAN_TX>
	CAN_TX(hcan1, AMS3_header, AMS3_databytes);
 8001ea8:	4e0e      	ldr	r6, [pc, #56]	; (8001ee4 <CAN_10+0xa8>)
 8001eaa:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <CAN_10+0xb8>)
 8001eac:	930c      	str	r3, [sp, #48]	; 0x30
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <CAN_10+0xbc>)
 8001eb0:	ac06      	add	r4, sp, #24
 8001eb2:	461d      	mov	r5, r3
 8001eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eb8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ebc:	e884 0003 	stmia.w	r4, {r0, r1}
 8001ec0:	466d      	mov	r5, sp
 8001ec2:	f106 0410 	add.w	r4, r6, #16
 8001ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ece:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ed2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001ed6:	f7ff ff29 	bl	8001d2c <CAN_TX>
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000488 	.word	0x20000488
 8001ee8:	20000474 	.word	0x20000474
 8001eec:	2000001c 	.word	0x2000001c
 8001ef0:	20000034 	.word	0x20000034
 8001ef4:	2000046c 	.word	0x2000046c
 8001ef8:	2000004c 	.word	0x2000004c

08001efc <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */
AMS3_databytes[0]=0;
 8001f00:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <MX_CAN1_Init+0xa8>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
AMS3_databytes[1]=0;
 8001f06:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <MX_CAN1_Init+0xa8>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	705a      	strb	r2, [r3, #1]
AMS3_databytes[2]=0;
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <MX_CAN1_Init+0xa8>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	709a      	strb	r2, [r3, #2]
AMS3_databytes[3]=0;
 8001f12:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <MX_CAN1_Init+0xa8>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	70da      	strb	r2, [r3, #3]
AMS3_databytes[4]=0;
 8001f18:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <MX_CAN1_Init+0xa8>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	711a      	strb	r2, [r3, #4]
AMS3_databytes[5]=0;
 8001f1e:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <MX_CAN1_Init+0xa8>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	715a      	strb	r2, [r3, #5]
AMS3_databytes[6]=0;
 8001f24:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <MX_CAN1_Init+0xa8>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	719a      	strb	r2, [r3, #6]
AMS3_databytes[7]=0;
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <MX_CAN1_Init+0xa8>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	71da      	strb	r2, [r3, #7]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001f30:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <MX_CAN1_Init+0xac>)
 8001f32:	4a1e      	ldr	r2, [pc, #120]	; (8001fac <MX_CAN1_Init+0xb0>)
 8001f34:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8001f36:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <MX_CAN1_Init+0xac>)
 8001f38:	2204      	movs	r2, #4
 8001f3a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001f3c:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <MX_CAN1_Init+0xac>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001f42:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <MX_CAN1_Init+0xac>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001f48:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <MX_CAN1_Init+0xac>)
 8001f4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f4e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001f50:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <MX_CAN1_Init+0xac>)
 8001f52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f56:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <MX_CAN1_Init+0xac>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <MX_CAN1_Init+0xac>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001f64:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <MX_CAN1_Init+0xac>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <MX_CAN1_Init+0xac>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001f70:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <MX_CAN1_Init+0xac>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <MX_CAN1_Init+0xac>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001f7c:	480a      	ldr	r0, [pc, #40]	; (8001fa8 <MX_CAN1_Init+0xac>)
 8001f7e:	f000 fd6d 	bl	8002a5c <HAL_CAN_Init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_CAN1_Init+0x90>
  {
    Error_Handler();
 8001f88:	f000 fa71 	bl	800246e <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001f8c:	2102      	movs	r1, #2
 8001f8e:	4806      	ldr	r0, [pc, #24]	; (8001fa8 <MX_CAN1_Init+0xac>)
 8001f90:	f001 f893 	bl	80030ba <HAL_CAN_ActivateNotification>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_CAN1_Init+0xa2>
    {
  	  Error_Handler();
 8001f9a:	f000 fa68 	bl	800246e <Error_Handler>
    }
  /* USER CODE END CAN1_Init 2 */

}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	2000046c 	.word	0x2000046c
 8001fa8:	20000488 	.word	0x20000488
 8001fac:	40006400 	.word	0x40006400

08001fb0 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001fb4:	4b17      	ldr	r3, [pc, #92]	; (8002014 <MX_CAN2_Init+0x64>)
 8001fb6:	4a18      	ldr	r2, [pc, #96]	; (8002018 <MX_CAN2_Init+0x68>)
 8001fb8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 8001fba:	4b16      	ldr	r3, [pc, #88]	; (8002014 <MX_CAN2_Init+0x64>)
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001fc0:	4b14      	ldr	r3, [pc, #80]	; (8002014 <MX_CAN2_Init+0x64>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001fc6:	4b13      	ldr	r3, [pc, #76]	; (8002014 <MX_CAN2_Init+0x64>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <MX_CAN2_Init+0x64>)
 8001fce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fd2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <MX_CAN2_Init+0x64>)
 8001fd6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001fda:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001fdc:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <MX_CAN2_Init+0x64>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <MX_CAN2_Init+0x64>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <MX_CAN2_Init+0x64>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <MX_CAN2_Init+0x64>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001ff4:	4b07      	ldr	r3, [pc, #28]	; (8002014 <MX_CAN2_Init+0x64>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <MX_CAN2_Init+0x64>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002000:	4804      	ldr	r0, [pc, #16]	; (8002014 <MX_CAN2_Init+0x64>)
 8002002:	f000 fd2b 	bl	8002a5c <HAL_CAN_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800200c:	f000 fa2f 	bl	800246e <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}
 8002014:	200004b0 	.word	0x200004b0
 8002018:	40006800 	.word	0x40006800

0800201c <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08c      	sub	sp, #48	; 0x30
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 031c 	add.w	r3, r7, #28
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a4f      	ldr	r2, [pc, #316]	; (8002178 <HAL_CAN_MspInit+0x15c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d146      	bne.n	80020cc <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800203e:	4b4f      	ldr	r3, [pc, #316]	; (800217c <HAL_CAN_MspInit+0x160>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	3301      	adds	r3, #1
 8002044:	4a4d      	ldr	r2, [pc, #308]	; (800217c <HAL_CAN_MspInit+0x160>)
 8002046:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002048:	4b4c      	ldr	r3, [pc, #304]	; (800217c <HAL_CAN_MspInit+0x160>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d10d      	bne.n	800206c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002050:	2300      	movs	r3, #0
 8002052:	61bb      	str	r3, [r7, #24]
 8002054:	4b4a      	ldr	r3, [pc, #296]	; (8002180 <HAL_CAN_MspInit+0x164>)
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	4a49      	ldr	r2, [pc, #292]	; (8002180 <HAL_CAN_MspInit+0x164>)
 800205a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800205e:	6413      	str	r3, [r2, #64]	; 0x40
 8002060:	4b47      	ldr	r3, [pc, #284]	; (8002180 <HAL_CAN_MspInit+0x164>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	4b43      	ldr	r3, [pc, #268]	; (8002180 <HAL_CAN_MspInit+0x164>)
 8002072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002074:	4a42      	ldr	r2, [pc, #264]	; (8002180 <HAL_CAN_MspInit+0x164>)
 8002076:	f043 0302 	orr.w	r3, r3, #2
 800207a:	6313      	str	r3, [r2, #48]	; 0x30
 800207c:	4b40      	ldr	r3, [pc, #256]	; (8002180 <HAL_CAN_MspInit+0x164>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002088:	f44f 7340 	mov.w	r3, #768	; 0x300
 800208c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002096:	2303      	movs	r3, #3
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800209a:	2309      	movs	r3, #9
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800209e:	f107 031c 	add.w	r3, r7, #28
 80020a2:	4619      	mov	r1, r3
 80020a4:	4837      	ldr	r0, [pc, #220]	; (8002184 <HAL_CAN_MspInit+0x168>)
 80020a6:	f001 fb5f 	bl	8003768 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2100      	movs	r1, #0
 80020ae:	2013      	movs	r0, #19
 80020b0:	f001 fb23 	bl	80036fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80020b4:	2013      	movs	r0, #19
 80020b6:	f001 fb3c 	bl	8003732 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	2014      	movs	r0, #20
 80020c0:	f001 fb1b 	bl	80036fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80020c4:	2014      	movs	r0, #20
 80020c6:	f001 fb34 	bl	8003732 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80020ca:	e050      	b.n	800216e <HAL_CAN_MspInit+0x152>
  else if(canHandle->Instance==CAN2)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a2d      	ldr	r2, [pc, #180]	; (8002188 <HAL_CAN_MspInit+0x16c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d14b      	bne.n	800216e <HAL_CAN_MspInit+0x152>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	4b29      	ldr	r3, [pc, #164]	; (8002180 <HAL_CAN_MspInit+0x164>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	4a28      	ldr	r2, [pc, #160]	; (8002180 <HAL_CAN_MspInit+0x164>)
 80020e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020e4:	6413      	str	r3, [r2, #64]	; 0x40
 80020e6:	4b26      	ldr	r3, [pc, #152]	; (8002180 <HAL_CAN_MspInit+0x164>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80020f2:	4b22      	ldr	r3, [pc, #136]	; (800217c <HAL_CAN_MspInit+0x160>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	3301      	adds	r3, #1
 80020f8:	4a20      	ldr	r2, [pc, #128]	; (800217c <HAL_CAN_MspInit+0x160>)
 80020fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80020fc:	4b1f      	ldr	r3, [pc, #124]	; (800217c <HAL_CAN_MspInit+0x160>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d10d      	bne.n	8002120 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <HAL_CAN_MspInit+0x164>)
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	4a1c      	ldr	r2, [pc, #112]	; (8002180 <HAL_CAN_MspInit+0x164>)
 800210e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002112:	6413      	str	r3, [r2, #64]	; 0x40
 8002114:	4b1a      	ldr	r3, [pc, #104]	; (8002180 <HAL_CAN_MspInit+0x164>)
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002120:	2300      	movs	r3, #0
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	4b16      	ldr	r3, [pc, #88]	; (8002180 <HAL_CAN_MspInit+0x164>)
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	4a15      	ldr	r2, [pc, #84]	; (8002180 <HAL_CAN_MspInit+0x164>)
 800212a:	f043 0302 	orr.w	r3, r3, #2
 800212e:	6313      	str	r3, [r2, #48]	; 0x30
 8002130:	4b13      	ldr	r3, [pc, #76]	; (8002180 <HAL_CAN_MspInit+0x164>)
 8002132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800213c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214a:	2303      	movs	r3, #3
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800214e:	2309      	movs	r3, #9
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002152:	f107 031c 	add.w	r3, r7, #28
 8002156:	4619      	mov	r1, r3
 8002158:	480a      	ldr	r0, [pc, #40]	; (8002184 <HAL_CAN_MspInit+0x168>)
 800215a:	f001 fb05 	bl	8003768 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800215e:	2200      	movs	r2, #0
 8002160:	2100      	movs	r1, #0
 8002162:	2040      	movs	r0, #64	; 0x40
 8002164:	f001 fac9 	bl	80036fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002168:	2040      	movs	r0, #64	; 0x40
 800216a:	f001 fae2 	bl	8003732 <HAL_NVIC_EnableIRQ>
}
 800216e:	bf00      	nop
 8002170:	3730      	adds	r7, #48	; 0x30
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40006400 	.word	0x40006400
 800217c:	200004d8 	.word	0x200004d8
 8002180:	40023800 	.word	0x40023800
 8002184:	40020400 	.word	0x40020400
 8002188:	40006800 	.word	0x40006800

0800218c <AIR_Logic>:
	// returns 0 if open
	return HAL_GPIO_ReadPin(GPIOC,AIR_N_INT_Pin);
}

void AIR_Logic(uint8_t ts_on, uint8_t ts_ready, uint8_t ts_start)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	71fb      	strb	r3, [r7, #7]
 8002196:	460b      	mov	r3, r1
 8002198:	71bb      	strb	r3, [r7, #6]
 800219a:	4613      	mov	r3, r2
 800219c:	717b      	strb	r3, [r7, #5]

	 if (error == 0)
 800219e:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <AIR_Logic+0x4c>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d113      	bne.n	80021ce <AIR_Logic+0x42>
	 {
		 if (ts_on>= 1)
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d007      	beq.n	80021bc <AIR_Logic+0x30>
		 {

			 HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_SET);
 80021ac:	2201      	movs	r2, #1
 80021ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021b2:	480a      	ldr	r0, [pc, #40]	; (80021dc <AIR_Logic+0x50>)
 80021b4:	f001 fc76 	bl	8003aa4 <HAL_GPIO_WritePin>
			 ts_ready = 1;
 80021b8:	2301      	movs	r3, #1
 80021ba:	71bb      	strb	r3, [r7, #6]

		 }

		 if (ts_start>= 1)
 80021bc:	797b      	ldrb	r3, [r7, #5]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d005      	beq.n	80021ce <AIR_Logic+0x42>
		 {
			 HAL_GPIO_WritePin(GPIOC,AIR_P_SW_Pin, GPIO_PIN_SET);
 80021c2:	2201      	movs	r2, #1
 80021c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021c8:	4805      	ldr	r0, [pc, #20]	; (80021e0 <AIR_Logic+0x54>)
 80021ca:	f001 fc6b 	bl	8003aa4 <HAL_GPIO_WritePin>
		 }
	}
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	200004dc 	.word	0x200004dc
 80021dc:	40020400 	.word	0x40020400
 80021e0:	40020800 	.word	0x40020800

080021e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ea:	f107 0314 	add.w	r3, r7, #20
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	605a      	str	r2, [r3, #4]
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	60da      	str	r2, [r3, #12]
 80021f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	4b5e      	ldr	r3, [pc, #376]	; (8002378 <MX_GPIO_Init+0x194>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	4a5d      	ldr	r2, [pc, #372]	; (8002378 <MX_GPIO_Init+0x194>)
 8002204:	f043 0304 	orr.w	r3, r3, #4
 8002208:	6313      	str	r3, [r2, #48]	; 0x30
 800220a:	4b5b      	ldr	r3, [pc, #364]	; (8002378 <MX_GPIO_Init+0x194>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b57      	ldr	r3, [pc, #348]	; (8002378 <MX_GPIO_Init+0x194>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	4a56      	ldr	r2, [pc, #344]	; (8002378 <MX_GPIO_Init+0x194>)
 8002220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002224:	6313      	str	r3, [r2, #48]	; 0x30
 8002226:	4b54      	ldr	r3, [pc, #336]	; (8002378 <MX_GPIO_Init+0x194>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	4b50      	ldr	r3, [pc, #320]	; (8002378 <MX_GPIO_Init+0x194>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	4a4f      	ldr	r2, [pc, #316]	; (8002378 <MX_GPIO_Init+0x194>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6313      	str	r3, [r2, #48]	; 0x30
 8002242:	4b4d      	ldr	r3, [pc, #308]	; (8002378 <MX_GPIO_Init+0x194>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	4b49      	ldr	r3, [pc, #292]	; (8002378 <MX_GPIO_Init+0x194>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	4a48      	ldr	r2, [pc, #288]	; (8002378 <MX_GPIO_Init+0x194>)
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	6313      	str	r3, [r2, #48]	; 0x30
 800225e:	4b46      	ldr	r3, [pc, #280]	; (8002378 <MX_GPIO_Init+0x194>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	607b      	str	r3, [r7, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	603b      	str	r3, [r7, #0]
 800226e:	4b42      	ldr	r3, [pc, #264]	; (8002378 <MX_GPIO_Init+0x194>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	4a41      	ldr	r2, [pc, #260]	; (8002378 <MX_GPIO_Init+0x194>)
 8002274:	f043 0308 	orr.w	r3, r3, #8
 8002278:	6313      	str	r3, [r2, #48]	; 0x30
 800227a:	4b3f      	ldr	r3, [pc, #252]	; (8002378 <MX_GPIO_Init+0x194>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	603b      	str	r3, [r7, #0]
 8002284:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GN_Pin|LED_YW_Pin|LED_RD_Pin|AIR_P_SW_Pin, GPIO_PIN_RESET);
 8002286:	2200      	movs	r2, #0
 8002288:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800228c:	483b      	ldr	r0, [pc, #236]	; (800237c <MX_GPIO_Init+0x198>)
 800228e:	f001 fc09 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WDI_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 8002292:	2200      	movs	r2, #0
 8002294:	f248 0110 	movw	r1, #32784	; 0x8010
 8002298:	4839      	ldr	r0, [pc, #228]	; (8002380 <MX_GPIO_Init+0x19c>)
 800229a:	f001 fc03 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SC_OPEN_GPIO_Port, SC_OPEN_Pin, GPIO_PIN_SET);
 800229e:	2201      	movs	r2, #1
 80022a0:	2180      	movs	r1, #128	; 0x80
 80022a2:	4837      	ldr	r0, [pc, #220]	; (8002380 <MX_GPIO_Init+0x19c>)
 80022a4:	f001 fbfe 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_RESET);
 80022a8:	2200      	movs	r2, #0
 80022aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022ae:	4835      	ldr	r0, [pc, #212]	; (8002384 <MX_GPIO_Init+0x1a0>)
 80022b0:	f001 fbf8 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_GN_Pin|LED_YW_Pin|LED_RD_Pin|AIR_P_SW_Pin;
 80022b4:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80022b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ba:	2301      	movs	r3, #1
 80022bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c2:	2300      	movs	r3, #0
 80022c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c6:	f107 0314 	add.w	r3, r7, #20
 80022ca:	4619      	mov	r1, r3
 80022cc:	482b      	ldr	r0, [pc, #172]	; (800237c <MX_GPIO_Init+0x198>)
 80022ce:	f001 fa4b 	bl	8003768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = V_VEHI_Pin|V_ACCU_Pin|SC_CLOSING_Pin|SC_STATE_Pin
 80022d2:	23f3      	movs	r3, #243	; 0xf3
 80022d4:	617b      	str	r3, [r7, #20]
                          |AIR_N_ACT_Pin|AIR_N_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	4619      	mov	r1, r3
 80022e4:	4825      	ldr	r0, [pc, #148]	; (800237c <MX_GPIO_Init+0x198>)
 80022e6:	f001 fa3f 	bl	8003768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_STATE_Pin|IMD_SAFE_Pin|SC_OPENING_Pin;
 80022ea:	2368      	movs	r3, #104	; 0x68
 80022ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	4619      	mov	r1, r3
 80022fc:	4820      	ldr	r0, [pc, #128]	; (8002380 <MX_GPIO_Init+0x19c>)
 80022fe:	f001 fa33 	bl	8003768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WDI_Pin|SC_OPEN_Pin|SPI3_CS_Pin;
 8002302:	f248 0390 	movw	r3, #32912	; 0x8090
 8002306:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002308:	2301      	movs	r3, #1
 800230a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002310:	2300      	movs	r3, #0
 8002312:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	4619      	mov	r1, r3
 800231a:	4819      	ldr	r0, [pc, #100]	; (8002380 <MX_GPIO_Init+0x19c>)
 800231c:	f001 fa24 	bl	8003768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_ACTIVATE_Pin;
 8002320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002326:	2301      	movs	r3, #1
 8002328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232e:	2300      	movs	r3, #0
 8002330:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TS_ACTIVATE_GPIO_Port, &GPIO_InitStruct);
 8002332:	f107 0314 	add.w	r3, r7, #20
 8002336:	4619      	mov	r1, r3
 8002338:	4812      	ldr	r0, [pc, #72]	; (8002384 <MX_GPIO_Init+0x1a0>)
 800233a:	f001 fa15 	bl	8003768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DANGER_V_Pin|AIR_P_ACT_Pin|AIR_P_INT_Pin;
 800233e:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8002342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002344:	2300      	movs	r3, #0
 8002346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	4619      	mov	r1, r3
 8002352:	480c      	ldr	r0, [pc, #48]	; (8002384 <MX_GPIO_Init+0x1a0>)
 8002354:	f001 fa08 	bl	8003768 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PCHRG_ACT_Pin;
 8002358:	2304      	movs	r3, #4
 800235a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800235c:	2300      	movs	r3, #0
 800235e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PCHRG_ACT_GPIO_Port, &GPIO_InitStruct);
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	4619      	mov	r1, r3
 800236a:	4807      	ldr	r0, [pc, #28]	; (8002388 <MX_GPIO_Init+0x1a4>)
 800236c:	f001 f9fc 	bl	8003768 <HAL_GPIO_Init>

}
 8002370:	bf00      	nop
 8002372:	3728      	adds	r7, #40	; 0x28
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40023800 	.word	0x40023800
 800237c:	40020800 	.word	0x40020800
 8002380:	40020000 	.word	0x40020000
 8002384:	40020400 	.word	0x40020400
 8002388:	40020c00 	.word	0x40020c00

0800238c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002390:	f000 fad2 	bl	8002938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002394:	f000 f824 	bl	80023e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002398:	f7ff ff24 	bl	80021e4 <MX_GPIO_Init>
  MX_SPI3_Init();
 800239c:	f000 f86c 	bl	8002478 <MX_SPI3_Init>
  MX_TIM2_Init();
 80023a0:	f000 fa2e 	bl	8002800 <MX_TIM2_Init>
  MX_CAN1_Init();
 80023a4:	f7ff fdaa 	bl	8001efc <MX_CAN1_Init>
  MX_CAN2_Init();
 80023a8:	f7ff fe02 	bl	8001fb0 <MX_CAN2_Init>
  MX_USB_DEVICE_Init();
 80023ac:	f007 fa90 	bl	80098d0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  // Start timer
  HAL_TIM_Base_Start_IT(&htim2);
 80023b0:	4809      	ldr	r0, [pc, #36]	; (80023d8 <main+0x4c>)
 80023b2:	f003 ffa7 	bl	8006304 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan1);
 80023b6:	4809      	ldr	r0, [pc, #36]	; (80023dc <main+0x50>)
 80023b8:	f000 fc4b 	bl	8002c52 <HAL_CAN_Start>
  BMS_init();
 80023bc:	f7ff f95a 	bl	8001674 <BMS_init>

    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80023c0:	2102      	movs	r1, #2
 80023c2:	4806      	ldr	r0, [pc, #24]	; (80023dc <main+0x50>)
 80023c4:	f000 fe79 	bl	80030ba <HAL_CAN_ActivateNotification>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <main+0x46>
    {
  	  Error_Handler();
 80023ce:	f000 f84e 	bl	800246e <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 BMS();
 80023d2:	f7ff f955 	bl	8001680 <BMS>
 80023d6:	e7fc      	b.n	80023d2 <main+0x46>
 80023d8:	2000053c 	.word	0x2000053c
 80023dc:	20000488 	.word	0x20000488

080023e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b092      	sub	sp, #72	; 0x48
 80023e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023e6:	f107 0318 	add.w	r3, r7, #24
 80023ea:	2230      	movs	r2, #48	; 0x30
 80023ec:	2100      	movs	r1, #0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f008 fd8b 	bl	800af0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	60da      	str	r2, [r3, #12]
 8002400:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002402:	2302      	movs	r3, #2
 8002404:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002406:	2301      	movs	r3, #1
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800240a:	2310      	movs	r3, #16
 800240c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800240e:	2302      	movs	r3, #2
 8002410:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002412:	2300      	movs	r3, #0
 8002414:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002416:	2308      	movs	r3, #8
 8002418:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 800241a:	23c0      	movs	r3, #192	; 0xc0
 800241c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800241e:	2304      	movs	r3, #4
 8002420:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002422:	2308      	movs	r3, #8
 8002424:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002426:	f107 0318 	add.w	r3, r7, #24
 800242a:	4618      	mov	r0, r3
 800242c:	f002 fd9c 	bl	8004f68 <HAL_RCC_OscConfig>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8002436:	f000 f81a 	bl	800246e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800243a:	230f      	movs	r3, #15
 800243c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800243e:	2302      	movs	r3, #2
 8002440:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002446:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800244a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800244c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002450:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002452:	1d3b      	adds	r3, r7, #4
 8002454:	2103      	movs	r1, #3
 8002456:	4618      	mov	r0, r3
 8002458:	f002 ffda 	bl	8005410 <HAL_RCC_ClockConfig>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002462:	f000 f804 	bl	800246e <Error_Handler>
  }
}
 8002466:	bf00      	nop
 8002468:	3748      	adds	r7, #72	; 0x48
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002472:	b672      	cpsid	i
}
 8002474:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002476:	e7fe      	b.n	8002476 <Error_Handler+0x8>

08002478 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800247c:	4b17      	ldr	r3, [pc, #92]	; (80024dc <MX_SPI3_Init+0x64>)
 800247e:	4a18      	ldr	r2, [pc, #96]	; (80024e0 <MX_SPI3_Init+0x68>)
 8002480:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002482:	4b16      	ldr	r3, [pc, #88]	; (80024dc <MX_SPI3_Init+0x64>)
 8002484:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002488:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800248a:	4b14      	ldr	r3, [pc, #80]	; (80024dc <MX_SPI3_Init+0x64>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002490:	4b12      	ldr	r3, [pc, #72]	; (80024dc <MX_SPI3_Init+0x64>)
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <MX_SPI3_Init+0x64>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800249c:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <MX_SPI3_Init+0x64>)
 800249e:	2200      	movs	r2, #0
 80024a0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <MX_SPI3_Init+0x64>)
 80024a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80024aa:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <MX_SPI3_Init+0x64>)
 80024ac:	2220      	movs	r2, #32
 80024ae:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024b0:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <MX_SPI3_Init+0x64>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <MX_SPI3_Init+0x64>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024bc:	4b07      	ldr	r3, [pc, #28]	; (80024dc <MX_SPI3_Init+0x64>)
 80024be:	2200      	movs	r2, #0
 80024c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <MX_SPI3_Init+0x64>)
 80024c4:	220a      	movs	r2, #10
 80024c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80024c8:	4804      	ldr	r0, [pc, #16]	; (80024dc <MX_SPI3_Init+0x64>)
 80024ca:	f003 f95d 	bl	8005788 <HAL_SPI_Init>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80024d4:	f7ff ffcb 	bl	800246e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80024d8:	bf00      	nop
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	200004e0 	.word	0x200004e0
 80024e0:	40003c00 	.word	0x40003c00

080024e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	; 0x28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a19      	ldr	r2, [pc, #100]	; (8002568 <HAL_SPI_MspInit+0x84>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d12c      	bne.n	8002560 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	4b18      	ldr	r3, [pc, #96]	; (800256c <HAL_SPI_MspInit+0x88>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a17      	ldr	r2, [pc, #92]	; (800256c <HAL_SPI_MspInit+0x88>)
 8002510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <HAL_SPI_MspInit+0x88>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <HAL_SPI_MspInit+0x88>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	4a10      	ldr	r2, [pc, #64]	; (800256c <HAL_SPI_MspInit+0x88>)
 800252c:	f043 0304 	orr.w	r3, r3, #4
 8002530:	6313      	str	r3, [r2, #48]	; 0x30
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <HAL_SPI_MspInit+0x88>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800253e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002544:	2302      	movs	r3, #2
 8002546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002550:	2306      	movs	r3, #6
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	4619      	mov	r1, r3
 800255a:	4805      	ldr	r0, [pc, #20]	; (8002570 <HAL_SPI_MspInit+0x8c>)
 800255c:	f001 f904 	bl	8003768 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002560:	bf00      	nop
 8002562:	3728      	adds	r7, #40	; 0x28
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40003c00 	.word	0x40003c00
 800256c:	40023800 	.word	0x40023800
 8002570:	40020800 	.word	0x40020800

08002574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <HAL_MspInit+0x48>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	4a0e      	ldr	r2, [pc, #56]	; (80025bc <HAL_MspInit+0x48>)
 8002584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002588:	6453      	str	r3, [r2, #68]	; 0x44
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <HAL_MspInit+0x48>)
 800258c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002592:	607b      	str	r3, [r7, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	603b      	str	r3, [r7, #0]
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <HAL_MspInit+0x48>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	4a07      	ldr	r2, [pc, #28]	; (80025bc <HAL_MspInit+0x48>)
 80025a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a4:	6413      	str	r3, [r2, #64]	; 0x40
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_MspInit+0x48>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	40023800 	.word	0x40023800

080025c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025c4:	e7fe      	b.n	80025c4 <NMI_Handler+0x4>

080025c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c6:	b480      	push	{r7}
 80025c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ca:	e7fe      	b.n	80025ca <HardFault_Handler+0x4>

080025cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025d0:	e7fe      	b.n	80025d0 <MemManage_Handler+0x4>

080025d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025d2:	b480      	push	{r7}
 80025d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025d6:	e7fe      	b.n	80025d6 <BusFault_Handler+0x4>

080025d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025dc:	e7fe      	b.n	80025dc <UsageFault_Handler+0x4>

080025de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025de:	b480      	push	{r7}
 80025e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr

080025ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002606:	f000 f9e9 	bl	80029dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002614:	4802      	ldr	r0, [pc, #8]	; (8002620 <CAN1_TX_IRQHandler+0x10>)
 8002616:	f000 fd75 	bl	8003104 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000488 	.word	0x20000488

08002624 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002628:	4802      	ldr	r0, [pc, #8]	; (8002634 <CAN1_RX0_IRQHandler+0x10>)
 800262a:	f000 fd6b 	bl	8003104 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000488 	.word	0x20000488

08002638 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800263c:	4802      	ldr	r0, [pc, #8]	; (8002648 <TIM2_IRQHandler+0x10>)
 800263e:	f003 fecf 	bl	80063e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	2000053c 	.word	0x2000053c

0800264c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002650:	4802      	ldr	r0, [pc, #8]	; (800265c <CAN2_RX0_IRQHandler+0x10>)
 8002652:	f000 fd57 	bl	8003104 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	200004b0 	.word	0x200004b0

08002660 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <OTG_FS_IRQHandler+0x10>)
 8002666:	f001 fb8d 	bl	8003d84 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20001250 	.word	0x20001250

08002674 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return 1;
 8002678:	2301      	movs	r3, #1
}
 800267a:	4618      	mov	r0, r3
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr

08002682 <_kill>:

int _kill(int pid, int sig)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800268c:	f008 fca0 	bl	800afd0 <__errno>
 8002690:	4603      	mov	r3, r0
 8002692:	2216      	movs	r2, #22
 8002694:	601a      	str	r2, [r3, #0]
  return -1;
 8002696:	f04f 33ff 	mov.w	r3, #4294967295
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <_exit>:

void _exit (int status)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026aa:	f04f 31ff 	mov.w	r1, #4294967295
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ffe7 	bl	8002682 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026b4:	e7fe      	b.n	80026b4 <_exit+0x12>

080026b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b086      	sub	sp, #24
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	e00a      	b.n	80026de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026c8:	f3af 8000 	nop.w
 80026cc:	4601      	mov	r1, r0
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	60ba      	str	r2, [r7, #8]
 80026d4:	b2ca      	uxtb	r2, r1
 80026d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	3301      	adds	r3, #1
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	dbf0      	blt.n	80026c8 <_read+0x12>
  }

  return len;
 80026e6:	687b      	ldr	r3, [r7, #4]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	e009      	b.n	8002716 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	60ba      	str	r2, [r7, #8]
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	3301      	adds	r3, #1
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	429a      	cmp	r2, r3
 800271c:	dbf1      	blt.n	8002702 <_write+0x12>
    //ITM_SendChar(*ptr++); //Diese Zeile kann gelöscht werden wenn kein printf über SWV mehr gewollt ist
  }
  return len;
 800271e:	687b      	ldr	r3, [r7, #4]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <_close>:

int _close(int file)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002730:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800274e:	605a      	str	r2, [r3, #4]
  return 0;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr

0800275c <_isatty>:

int _isatty(int file)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002764:	2301      	movs	r3, #1
}
 8002766:	4618      	mov	r0, r3
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002790:	4a14      	ldr	r2, [pc, #80]	; (80027e4 <_sbrk+0x5c>)
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <_sbrk+0x60>)
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800279c:	4b13      	ldr	r3, [pc, #76]	; (80027ec <_sbrk+0x64>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d102      	bne.n	80027aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <_sbrk+0x64>)
 80027a6:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <_sbrk+0x68>)
 80027a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027aa:	4b10      	ldr	r3, [pc, #64]	; (80027ec <_sbrk+0x64>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d207      	bcs.n	80027c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027b8:	f008 fc0a 	bl	800afd0 <__errno>
 80027bc:	4603      	mov	r3, r0
 80027be:	220c      	movs	r2, #12
 80027c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295
 80027c6:	e009      	b.n	80027dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <_sbrk+0x64>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ce:	4b07      	ldr	r3, [pc, #28]	; (80027ec <_sbrk+0x64>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4413      	add	r3, r2
 80027d6:	4a05      	ldr	r2, [pc, #20]	; (80027ec <_sbrk+0x64>)
 80027d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027da:	68fb      	ldr	r3, [r7, #12]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	2000c000 	.word	0x2000c000
 80027e8:	00000400 	.word	0x00000400
 80027ec:	20000538 	.word	0x20000538
 80027f0:	200018a0 	.word	0x200018a0

080027f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002806:	f107 0308 	add.w	r3, r7, #8
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002814:	463b      	mov	r3, r7
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800281c:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <MX_TIM2_Init+0x94>)
 800281e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002822:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8002824:	4b1b      	ldr	r3, [pc, #108]	; (8002894 <MX_TIM2_Init+0x94>)
 8002826:	222f      	movs	r2, #47	; 0x2f
 8002828:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800282a:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <MX_TIM2_Init+0x94>)
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8002830:	4b18      	ldr	r3, [pc, #96]	; (8002894 <MX_TIM2_Init+0x94>)
 8002832:	f242 7210 	movw	r2, #10000	; 0x2710
 8002836:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002838:	4b16      	ldr	r3, [pc, #88]	; (8002894 <MX_TIM2_Init+0x94>)
 800283a:	2200      	movs	r2, #0
 800283c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800283e:	4b15      	ldr	r3, [pc, #84]	; (8002894 <MX_TIM2_Init+0x94>)
 8002840:	2200      	movs	r2, #0
 8002842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002844:	4813      	ldr	r0, [pc, #76]	; (8002894 <MX_TIM2_Init+0x94>)
 8002846:	f003 fd0e 	bl	8006266 <HAL_TIM_Base_Init>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002850:	f7ff fe0d 	bl	800246e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002854:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002858:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800285a:	f107 0308 	add.w	r3, r7, #8
 800285e:	4619      	mov	r1, r3
 8002860:	480c      	ldr	r0, [pc, #48]	; (8002894 <MX_TIM2_Init+0x94>)
 8002862:	f003 fec5 	bl	80065f0 <HAL_TIM_ConfigClockSource>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800286c:	f7ff fdff 	bl	800246e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002870:	2300      	movs	r3, #0
 8002872:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002874:	2300      	movs	r3, #0
 8002876:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002878:	463b      	mov	r3, r7
 800287a:	4619      	mov	r1, r3
 800287c:	4805      	ldr	r0, [pc, #20]	; (8002894 <MX_TIM2_Init+0x94>)
 800287e:	f004 f8d7 	bl	8006a30 <HAL_TIMEx_MasterConfigSynchronization>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002888:	f7ff fdf1 	bl	800246e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800288c:	bf00      	nop
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	2000053c 	.word	0x2000053c

08002898 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028a8:	d115      	bne.n	80028d6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	4b0c      	ldr	r3, [pc, #48]	; (80028e0 <HAL_TIM_Base_MspInit+0x48>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	4a0b      	ldr	r2, [pc, #44]	; (80028e0 <HAL_TIM_Base_MspInit+0x48>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <HAL_TIM_Base_MspInit+0x48>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2100      	movs	r1, #0
 80028ca:	201c      	movs	r0, #28
 80028cc:	f000 ff15 	bl	80036fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028d0:	201c      	movs	r0, #28
 80028d2:	f000 ff2e 	bl	8003732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800

080028e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800291c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 80028e8:	f7ff ff84 	bl	80027f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028ec:	480c      	ldr	r0, [pc, #48]	; (8002920 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028ee:	490d      	ldr	r1, [pc, #52]	; (8002924 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028f0:	4a0d      	ldr	r2, [pc, #52]	; (8002928 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028f4:	e002      	b.n	80028fc <LoopCopyDataInit>

080028f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028fa:	3304      	adds	r3, #4

080028fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002900:	d3f9      	bcc.n	80028f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002902:	4a0a      	ldr	r2, [pc, #40]	; (800292c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002904:	4c0a      	ldr	r4, [pc, #40]	; (8002930 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002908:	e001      	b.n	800290e <LoopFillZerobss>

0800290a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800290a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800290c:	3204      	adds	r2, #4

0800290e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800290e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002910:	d3fb      	bcc.n	800290a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002912:	f008 fb63 	bl	800afdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002916:	f7ff fd39 	bl	800238c <main>
  bx  lr    
 800291a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800291c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002924:	200003a8 	.word	0x200003a8
  ldr r2, =_sidata
 8002928:	0800d7fc 	.word	0x0800d7fc
  ldr r2, =_sbss
 800292c:	200003a8 	.word	0x200003a8
  ldr r4, =_ebss
 8002930:	200018a0 	.word	0x200018a0

08002934 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002934:	e7fe      	b.n	8002934 <ADC_IRQHandler>
	...

08002938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800293c:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <HAL_Init+0x40>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0d      	ldr	r2, [pc, #52]	; (8002978 <HAL_Init+0x40>)
 8002942:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002946:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <HAL_Init+0x40>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a0a      	ldr	r2, [pc, #40]	; (8002978 <HAL_Init+0x40>)
 800294e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002952:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002954:	4b08      	ldr	r3, [pc, #32]	; (8002978 <HAL_Init+0x40>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a07      	ldr	r2, [pc, #28]	; (8002978 <HAL_Init+0x40>)
 800295a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002960:	2003      	movs	r0, #3
 8002962:	f000 febf 	bl	80036e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002966:	200f      	movs	r0, #15
 8002968:	f000 f808 	bl	800297c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800296c:	f7ff fe02 	bl	8002574 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40023c00 	.word	0x40023c00

0800297c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002984:	4b12      	ldr	r3, [pc, #72]	; (80029d0 <HAL_InitTick+0x54>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <HAL_InitTick+0x58>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	4619      	mov	r1, r3
 800298e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002992:	fbb3 f3f1 	udiv	r3, r3, r1
 8002996:	fbb2 f3f3 	udiv	r3, r2, r3
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fed7 	bl	800374e <HAL_SYSTICK_Config>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e00e      	b.n	80029c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b0f      	cmp	r3, #15
 80029ae:	d80a      	bhi.n	80029c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029b0:	2200      	movs	r2, #0
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	f04f 30ff 	mov.w	r0, #4294967295
 80029b8:	f000 fe9f 	bl	80036fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029bc:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <HAL_InitTick+0x5c>)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e000      	b.n	80029c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000064 	.word	0x20000064
 80029d4:	2000006c 	.word	0x2000006c
 80029d8:	20000068 	.word	0x20000068

080029dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_IncTick+0x1c>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_IncTick+0x20>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4413      	add	r3, r2
 80029ec:	4a03      	ldr	r2, [pc, #12]	; (80029fc <HAL_IncTick+0x20>)
 80029ee:	6013      	str	r3, [r2, #0]
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	2000006c 	.word	0x2000006c
 80029fc:	20000584 	.word	0x20000584

08002a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  return uwTick;
 8002a04:	4b02      	ldr	r3, [pc, #8]	; (8002a10 <HAL_GetTick+0x10>)
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr
 8002a10:	20000584 	.word	0x20000584

08002a14 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a1c:	f7ff fff0 	bl	8002a00 <HAL_GetTick>
 8002a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2c:	d005      	beq.n	8002a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <HAL_Delay+0x44>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4413      	add	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a3a:	bf00      	nop
 8002a3c:	f7ff ffe0 	bl	8002a00 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d8f7      	bhi.n	8002a3c <HAL_Delay+0x28>
  {
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	bf00      	nop
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	2000006c 	.word	0x2000006c

08002a5c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e0ed      	b.n	8002c4a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d102      	bne.n	8002a80 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff face 	bl	800201c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0201 	orr.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a90:	f7ff ffb6 	bl	8002a00 <HAL_GetTick>
 8002a94:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a96:	e012      	b.n	8002abe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a98:	f7ff ffb2 	bl	8002a00 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b0a      	cmp	r3, #10
 8002aa4:	d90b      	bls.n	8002abe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2205      	movs	r2, #5
 8002ab6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e0c5      	b.n	8002c4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0e5      	beq.n	8002a98 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0202 	bic.w	r2, r2, #2
 8002ada:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002adc:	f7ff ff90 	bl	8002a00 <HAL_GetTick>
 8002ae0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ae2:	e012      	b.n	8002b0a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ae4:	f7ff ff8c 	bl	8002a00 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b0a      	cmp	r3, #10
 8002af0:	d90b      	bls.n	8002b0a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2205      	movs	r2, #5
 8002b02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e09f      	b.n	8002c4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1e5      	bne.n	8002ae4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	7e1b      	ldrb	r3, [r3, #24]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d108      	bne.n	8002b32 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	e007      	b.n	8002b42 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	7e5b      	ldrb	r3, [r3, #25]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d108      	bne.n	8002b5c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	e007      	b.n	8002b6c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	7e9b      	ldrb	r3, [r3, #26]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d108      	bne.n	8002b86 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0220 	orr.w	r2, r2, #32
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	e007      	b.n	8002b96 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0220 	bic.w	r2, r2, #32
 8002b94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	7edb      	ldrb	r3, [r3, #27]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d108      	bne.n	8002bb0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0210 	bic.w	r2, r2, #16
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	e007      	b.n	8002bc0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0210 	orr.w	r2, r2, #16
 8002bbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	7f1b      	ldrb	r3, [r3, #28]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d108      	bne.n	8002bda <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0208 	orr.w	r2, r2, #8
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	e007      	b.n	8002bea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0208 	bic.w	r2, r2, #8
 8002be8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	7f5b      	ldrb	r3, [r3, #29]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d108      	bne.n	8002c04 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0204 	orr.w	r2, r2, #4
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	e007      	b.n	8002c14 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0204 	bic.w	r2, r2, #4
 8002c12:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	ea42 0103 	orr.w	r1, r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	1e5a      	subs	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b084      	sub	sp, #16
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d12e      	bne.n	8002cc4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2202      	movs	r2, #2
 8002c6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0201 	bic.w	r2, r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c7e:	f7ff febf 	bl	8002a00 <HAL_GetTick>
 8002c82:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c84:	e012      	b.n	8002cac <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c86:	f7ff febb 	bl	8002a00 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b0a      	cmp	r3, #10
 8002c92:	d90b      	bls.n	8002cac <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2205      	movs	r2, #5
 8002ca4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e012      	b.n	8002cd2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1e5      	bne.n	8002c86 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e006      	b.n	8002cd2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
  }
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b089      	sub	sp, #36	; 0x24
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
 8002ce6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cee:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cf8:	7ffb      	ldrb	r3, [r7, #31]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d003      	beq.n	8002d06 <HAL_CAN_AddTxMessage+0x2c>
 8002cfe:	7ffb      	ldrb	r3, [r7, #31]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	f040 80ad 	bne.w	8002e60 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10a      	bne.n	8002d26 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d105      	bne.n	8002d26 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 8095 	beq.w	8002e50 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	0e1b      	lsrs	r3, r3, #24
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002d30:	2201      	movs	r2, #1
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	409a      	lsls	r2, r3
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10d      	bne.n	8002d5e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d4c:	68f9      	ldr	r1, [r7, #12]
 8002d4e:	6809      	ldr	r1, [r1, #0]
 8002d50:	431a      	orrs	r2, r3
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	3318      	adds	r3, #24
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	440b      	add	r3, r1
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	e00f      	b.n	8002d7e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d68:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d6e:	68f9      	ldr	r1, [r7, #12]
 8002d70:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002d72:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	3318      	adds	r3, #24
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	440b      	add	r3, r1
 8002d7c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6819      	ldr	r1, [r3, #0]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	3318      	adds	r3, #24
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	440b      	add	r3, r1
 8002d8e:	3304      	adds	r3, #4
 8002d90:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	7d1b      	ldrb	r3, [r3, #20]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d111      	bne.n	8002dbe <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	3318      	adds	r3, #24
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	4413      	add	r3, r2
 8002da6:	3304      	adds	r3, #4
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	6811      	ldr	r1, [r2, #0]
 8002dae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	3318      	adds	r3, #24
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	440b      	add	r3, r1
 8002dba:	3304      	adds	r3, #4
 8002dbc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3307      	adds	r3, #7
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	061a      	lsls	r2, r3, #24
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3306      	adds	r3, #6
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	041b      	lsls	r3, r3, #16
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3305      	adds	r3, #5
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	021b      	lsls	r3, r3, #8
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	3204      	adds	r2, #4
 8002dde:	7812      	ldrb	r2, [r2, #0]
 8002de0:	4610      	mov	r0, r2
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	6811      	ldr	r1, [r2, #0]
 8002de6:	ea43 0200 	orr.w	r2, r3, r0
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	440b      	add	r3, r1
 8002df0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002df4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3303      	adds	r3, #3
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	061a      	lsls	r2, r3, #24
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3302      	adds	r3, #2
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	041b      	lsls	r3, r3, #16
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	4313      	orrs	r3, r2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	7812      	ldrb	r2, [r2, #0]
 8002e16:	4610      	mov	r0, r2
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	6811      	ldr	r1, [r2, #0]
 8002e1c:	ea43 0200 	orr.w	r2, r3, r0
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	440b      	add	r3, r1
 8002e26:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002e2a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	3318      	adds	r3, #24
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	4413      	add	r3, r2
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	6811      	ldr	r1, [r2, #0]
 8002e3e:	f043 0201 	orr.w	r2, r3, #1
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	3318      	adds	r3, #24
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	440b      	add	r3, r1
 8002e4a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	e00e      	b.n	8002e6e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e006      	b.n	8002e6e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
  }
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3724      	adds	r7, #36	; 0x24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
 8002e84:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e8c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e8e:	7dfb      	ldrb	r3, [r7, #23]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d003      	beq.n	8002e9c <HAL_CAN_GetRxMessage+0x24>
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	f040 8103 	bne.w	80030a2 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d116      	bne.n	8002ede <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0f7      	b.n	80030b0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d107      	bne.n	8002ede <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e0e8      	b.n	80030b0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	331b      	adds	r3, #27
 8002ee6:	011b      	lsls	r3, r3, #4
 8002ee8:	4413      	add	r3, r2
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0204 	and.w	r2, r3, #4
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10c      	bne.n	8002f16 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	331b      	adds	r3, #27
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	4413      	add	r3, r2
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	0d5b      	lsrs	r3, r3, #21
 8002f0c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	e00b      	b.n	8002f2e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	331b      	adds	r3, #27
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	4413      	add	r3, r2
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	08db      	lsrs	r3, r3, #3
 8002f26:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	331b      	adds	r3, #27
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	4413      	add	r3, r2
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0202 	and.w	r2, r3, #2
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	331b      	adds	r3, #27
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	4413      	add	r3, r2
 8002f50:	3304      	adds	r3, #4
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2208      	movs	r2, #8
 8002f60:	611a      	str	r2, [r3, #16]
 8002f62:	e00b      	b.n	8002f7c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	331b      	adds	r3, #27
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	4413      	add	r3, r2
 8002f70:	3304      	adds	r3, #4
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 020f 	and.w	r2, r3, #15
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	331b      	adds	r3, #27
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	4413      	add	r3, r2
 8002f88:	3304      	adds	r3, #4
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	0a1b      	lsrs	r3, r3, #8
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	331b      	adds	r3, #27
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	0c1b      	lsrs	r3, r3, #16
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	4413      	add	r3, r2
 8002fb6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	0a1a      	lsrs	r2, r3, #8
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	4413      	add	r3, r2
 8002fe6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	0c1a      	lsrs	r2, r3, #16
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	0e1a      	lsrs	r2, r3, #24
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	3303      	adds	r3, #3
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	4413      	add	r3, r2
 800301a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	3304      	adds	r3, #4
 8003024:	b2d2      	uxtb	r2, r2
 8003026:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	4413      	add	r3, r2
 8003032:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	0a1a      	lsrs	r2, r3, #8
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	3305      	adds	r3, #5
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	4413      	add	r3, r2
 800304c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	0c1a      	lsrs	r2, r3, #16
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	3306      	adds	r3, #6
 8003058:	b2d2      	uxtb	r2, r2
 800305a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	4413      	add	r3, r2
 8003066:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	0e1a      	lsrs	r2, r3, #24
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	3307      	adds	r3, #7
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d108      	bne.n	800308e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0220 	orr.w	r2, r2, #32
 800308a:	60da      	str	r2, [r3, #12]
 800308c:	e007      	b.n	800309e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	691a      	ldr	r2, [r3, #16]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f042 0220 	orr.w	r2, r2, #32
 800309c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	e006      	b.n	80030b0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
  }
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	371c      	adds	r7, #28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr

080030ba <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80030ba:	b480      	push	{r7}
 80030bc:	b085      	sub	sp, #20
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ca:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d002      	beq.n	80030d8 <HAL_CAN_ActivateNotification+0x1e>
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d109      	bne.n	80030ec <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6959      	ldr	r1, [r3, #20]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	e006      	b.n	80030fa <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
  }
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08a      	sub	sp, #40	; 0x28
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800310c:	2300      	movs	r3, #0
 800310e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003140:	6a3b      	ldr	r3, [r7, #32]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d07c      	beq.n	8003244 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d023      	beq.n	800319c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2201      	movs	r2, #1
 800315a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f983 	bl	8003472 <HAL_CAN_TxMailbox0CompleteCallback>
 800316c:	e016      	b.n	800319c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	d004      	beq.n	8003182 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
 8003180:	e00c      	b.n	800319c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	2b00      	cmp	r3, #0
 800318a:	d004      	beq.n	8003196 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
 8003194:	e002      	b.n	800319c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f986 	bl	80034a8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d024      	beq.n	80031f0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f962 	bl	8003484 <HAL_CAN_TxMailbox1CompleteCallback>
 80031c0:	e016      	b.n	80031f0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d004      	beq.n	80031d6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24
 80031d4:	e00c      	b.n	80031f0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d004      	beq.n	80031ea <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
 80031e8:	e002      	b.n	80031f0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f965 	bl	80034ba <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d024      	beq.n	8003244 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003202:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f941 	bl	8003496 <HAL_CAN_TxMailbox2CompleteCallback>
 8003214:	e016      	b.n	8003244 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d004      	beq.n	800322a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
 8003228:	e00c      	b.n	8003244 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d004      	beq.n	800323e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
 800323c:	e002      	b.n	8003244 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f944 	bl	80034cc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00c      	beq.n	8003268 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	2b00      	cmp	r3, #0
 8003256:	d007      	beq.n	8003268 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800325e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2210      	movs	r2, #16
 8003266:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00b      	beq.n	800328a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f003 0308 	and.w	r3, r3, #8
 8003278:	2b00      	cmp	r3, #0
 800327a:	d006      	beq.n	800328a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2208      	movs	r2, #8
 8003282:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f92a 	bl	80034de <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d009      	beq.n	80032a8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d002      	beq.n	80032a8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7fe f9ce 	bl	8001644 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00c      	beq.n	80032cc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d007      	beq.n	80032cc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2210      	movs	r2, #16
 80032ca:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00b      	beq.n	80032ee <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d006      	beq.n	80032ee <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2208      	movs	r2, #8
 80032e6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 f90a 	bl	8003502 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d009      	beq.n	800330c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f8f2 	bl	80034f0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800330c:	6a3b      	ldr	r3, [r7, #32]
 800330e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00b      	beq.n	800332e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b00      	cmp	r3, #0
 800331e:	d006      	beq.n	800332e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2210      	movs	r2, #16
 8003326:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f8f3 	bl	8003514 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00b      	beq.n	8003350 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d006      	beq.n	8003350 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2208      	movs	r2, #8
 8003348:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f8eb 	bl	8003526 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003350:	6a3b      	ldr	r3, [r7, #32]
 8003352:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d07b      	beq.n	8003452 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d072      	beq.n	800344a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336a:	2b00      	cmp	r3, #0
 800336c:	d008      	beq.n	8003380 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003374:	2b00      	cmp	r3, #0
 8003376:	d003      	beq.n	8003380 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	f043 0302 	orr.w	r3, r3, #2
 800339a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	f043 0304 	orr.w	r3, r3, #4
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d043      	beq.n	800344a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d03e      	beq.n	800344a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033d2:	2b60      	cmp	r3, #96	; 0x60
 80033d4:	d02b      	beq.n	800342e <HAL_CAN_IRQHandler+0x32a>
 80033d6:	2b60      	cmp	r3, #96	; 0x60
 80033d8:	d82e      	bhi.n	8003438 <HAL_CAN_IRQHandler+0x334>
 80033da:	2b50      	cmp	r3, #80	; 0x50
 80033dc:	d022      	beq.n	8003424 <HAL_CAN_IRQHandler+0x320>
 80033de:	2b50      	cmp	r3, #80	; 0x50
 80033e0:	d82a      	bhi.n	8003438 <HAL_CAN_IRQHandler+0x334>
 80033e2:	2b40      	cmp	r3, #64	; 0x40
 80033e4:	d019      	beq.n	800341a <HAL_CAN_IRQHandler+0x316>
 80033e6:	2b40      	cmp	r3, #64	; 0x40
 80033e8:	d826      	bhi.n	8003438 <HAL_CAN_IRQHandler+0x334>
 80033ea:	2b30      	cmp	r3, #48	; 0x30
 80033ec:	d010      	beq.n	8003410 <HAL_CAN_IRQHandler+0x30c>
 80033ee:	2b30      	cmp	r3, #48	; 0x30
 80033f0:	d822      	bhi.n	8003438 <HAL_CAN_IRQHandler+0x334>
 80033f2:	2b10      	cmp	r3, #16
 80033f4:	d002      	beq.n	80033fc <HAL_CAN_IRQHandler+0x2f8>
 80033f6:	2b20      	cmp	r3, #32
 80033f8:	d005      	beq.n	8003406 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80033fa:	e01d      	b.n	8003438 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	f043 0308 	orr.w	r3, r3, #8
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003404:	e019      	b.n	800343a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	f043 0310 	orr.w	r3, r3, #16
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800340e:	e014      	b.n	800343a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003412:	f043 0320 	orr.w	r3, r3, #32
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003418:	e00f      	b.n	800343a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003422:	e00a      	b.n	800343a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800342c:	e005      	b.n	800343a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003436:	e000      	b.n	800343a <HAL_CAN_IRQHandler+0x336>
            break;
 8003438:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699a      	ldr	r2, [r3, #24]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003448:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2204      	movs	r2, #4
 8003450:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f867 	bl	8003538 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800346a:	bf00      	nop
 800346c:	3728      	adds	r7, #40	; 0x28
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr

08003484 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr

08003496 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003496:	b480      	push	{r7}
 8003498:	b083      	sub	sp, #12
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800349e:	bf00      	nop
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr

080034a8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr

080034ba <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr

080034cc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr

080034de <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr

08003502 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr

08003514 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr

08003526 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr

08003538 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr
	...

0800354c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800355c:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <__NVIC_SetPriorityGrouping+0x44>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003568:	4013      	ands	r3, r2
 800356a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800357c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800357e:	4a04      	ldr	r2, [pc, #16]	; (8003590 <__NVIC_SetPriorityGrouping+0x44>)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	60d3      	str	r3, [r2, #12]
}
 8003584:	bf00      	nop
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	e000ed00 	.word	0xe000ed00

08003594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003598:	4b04      	ldr	r3, [pc, #16]	; (80035ac <__NVIC_GetPriorityGrouping+0x18>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	0a1b      	lsrs	r3, r3, #8
 800359e:	f003 0307 	and.w	r3, r3, #7
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	db0b      	blt.n	80035da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035c2:	79fb      	ldrb	r3, [r7, #7]
 80035c4:	f003 021f 	and.w	r2, r3, #31
 80035c8:	4906      	ldr	r1, [pc, #24]	; (80035e4 <__NVIC_EnableIRQ+0x34>)
 80035ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	2001      	movs	r0, #1
 80035d2:	fa00 f202 	lsl.w	r2, r0, r2
 80035d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	e000e100 	.word	0xe000e100

080035e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	6039      	str	r1, [r7, #0]
 80035f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	db0a      	blt.n	8003612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	490c      	ldr	r1, [pc, #48]	; (8003634 <__NVIC_SetPriority+0x4c>)
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	0112      	lsls	r2, r2, #4
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	440b      	add	r3, r1
 800360c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003610:	e00a      	b.n	8003628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	b2da      	uxtb	r2, r3
 8003616:	4908      	ldr	r1, [pc, #32]	; (8003638 <__NVIC_SetPriority+0x50>)
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	3b04      	subs	r3, #4
 8003620:	0112      	lsls	r2, r2, #4
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	440b      	add	r3, r1
 8003626:	761a      	strb	r2, [r3, #24]
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	e000e100 	.word	0xe000e100
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800363c:	b480      	push	{r7}
 800363e:	b089      	sub	sp, #36	; 0x24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f1c3 0307 	rsb	r3, r3, #7
 8003656:	2b04      	cmp	r3, #4
 8003658:	bf28      	it	cs
 800365a:	2304      	movcs	r3, #4
 800365c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	3304      	adds	r3, #4
 8003662:	2b06      	cmp	r3, #6
 8003664:	d902      	bls.n	800366c <NVIC_EncodePriority+0x30>
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3b03      	subs	r3, #3
 800366a:	e000      	b.n	800366e <NVIC_EncodePriority+0x32>
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003670:	f04f 32ff 	mov.w	r2, #4294967295
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43da      	mvns	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	401a      	ands	r2, r3
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003684:	f04f 31ff 	mov.w	r1, #4294967295
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	fa01 f303 	lsl.w	r3, r1, r3
 800368e:	43d9      	mvns	r1, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003694:	4313      	orrs	r3, r2
         );
}
 8003696:	4618      	mov	r0, r3
 8003698:	3724      	adds	r7, #36	; 0x24
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr

080036a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036b0:	d301      	bcc.n	80036b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036b2:	2301      	movs	r3, #1
 80036b4:	e00f      	b.n	80036d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036b6:	4a0a      	ldr	r2, [pc, #40]	; (80036e0 <SysTick_Config+0x40>)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036be:	210f      	movs	r1, #15
 80036c0:	f04f 30ff 	mov.w	r0, #4294967295
 80036c4:	f7ff ff90 	bl	80035e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036c8:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <SysTick_Config+0x40>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ce:	4b04      	ldr	r3, [pc, #16]	; (80036e0 <SysTick_Config+0x40>)
 80036d0:	2207      	movs	r2, #7
 80036d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	e000e010 	.word	0xe000e010

080036e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f7ff ff2d 	bl	800354c <__NVIC_SetPriorityGrouping>
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b086      	sub	sp, #24
 80036fe:	af00      	add	r7, sp, #0
 8003700:	4603      	mov	r3, r0
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	607a      	str	r2, [r7, #4]
 8003706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003708:	2300      	movs	r3, #0
 800370a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800370c:	f7ff ff42 	bl	8003594 <__NVIC_GetPriorityGrouping>
 8003710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	6978      	ldr	r0, [r7, #20]
 8003718:	f7ff ff90 	bl	800363c <NVIC_EncodePriority>
 800371c:	4602      	mov	r2, r0
 800371e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003722:	4611      	mov	r1, r2
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff ff5f 	bl	80035e8 <__NVIC_SetPriority>
}
 800372a:	bf00      	nop
 800372c:	3718      	adds	r7, #24
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	4603      	mov	r3, r0
 800373a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800373c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff ff35 	bl	80035b0 <__NVIC_EnableIRQ>
}
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7ff ffa2 	bl	80036a0 <SysTick_Config>
 800375c:	4603      	mov	r3, r0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003768:	b480      	push	{r7}
 800376a:	b087      	sub	sp, #28
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003772:	2300      	movs	r3, #0
 8003774:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003776:	e16f      	b.n	8003a58 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	2101      	movs	r1, #1
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	fa01 f303 	lsl.w	r3, r1, r3
 8003784:	4013      	ands	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 8161 	beq.w	8003a52 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	2b01      	cmp	r3, #1
 800379a:	d005      	beq.n	80037a8 <HAL_GPIO_Init+0x40>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d130      	bne.n	800380a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	2203      	movs	r2, #3
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	43db      	mvns	r3, r3
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4013      	ands	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037de:	2201      	movs	r2, #1
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43db      	mvns	r3, r3
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4013      	ands	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	091b      	lsrs	r3, r3, #4
 80037f4:	f003 0201 	and.w	r2, r3, #1
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b03      	cmp	r3, #3
 8003814:	d017      	beq.n	8003846 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	2203      	movs	r2, #3
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43db      	mvns	r3, r3
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4013      	ands	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d123      	bne.n	800389a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	08da      	lsrs	r2, r3, #3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3208      	adds	r2, #8
 800385a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800385e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f003 0307 	and.w	r3, r3, #7
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	220f      	movs	r2, #15
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4013      	ands	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	691a      	ldr	r2, [r3, #16]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	4313      	orrs	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	08da      	lsrs	r2, r3, #3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3208      	adds	r2, #8
 8003894:	6939      	ldr	r1, [r7, #16]
 8003896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	2203      	movs	r2, #3
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	43db      	mvns	r3, r3
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4013      	ands	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f003 0203 	and.w	r2, r3, #3
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 80bb 	beq.w	8003a52 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038dc:	2300      	movs	r3, #0
 80038de:	60bb      	str	r3, [r7, #8]
 80038e0:	4b64      	ldr	r3, [pc, #400]	; (8003a74 <HAL_GPIO_Init+0x30c>)
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	4a63      	ldr	r2, [pc, #396]	; (8003a74 <HAL_GPIO_Init+0x30c>)
 80038e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038ea:	6453      	str	r3, [r2, #68]	; 0x44
 80038ec:	4b61      	ldr	r3, [pc, #388]	; (8003a74 <HAL_GPIO_Init+0x30c>)
 80038ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038f8:	4a5f      	ldr	r2, [pc, #380]	; (8003a78 <HAL_GPIO_Init+0x310>)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	089b      	lsrs	r3, r3, #2
 80038fe:	3302      	adds	r3, #2
 8003900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003904:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f003 0303 	and.w	r3, r3, #3
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	220f      	movs	r2, #15
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	43db      	mvns	r3, r3
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4013      	ands	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a57      	ldr	r2, [pc, #348]	; (8003a7c <HAL_GPIO_Init+0x314>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d031      	beq.n	8003988 <HAL_GPIO_Init+0x220>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a56      	ldr	r2, [pc, #344]	; (8003a80 <HAL_GPIO_Init+0x318>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d02b      	beq.n	8003984 <HAL_GPIO_Init+0x21c>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a55      	ldr	r2, [pc, #340]	; (8003a84 <HAL_GPIO_Init+0x31c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d025      	beq.n	8003980 <HAL_GPIO_Init+0x218>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a54      	ldr	r2, [pc, #336]	; (8003a88 <HAL_GPIO_Init+0x320>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d01f      	beq.n	800397c <HAL_GPIO_Init+0x214>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a53      	ldr	r2, [pc, #332]	; (8003a8c <HAL_GPIO_Init+0x324>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d019      	beq.n	8003978 <HAL_GPIO_Init+0x210>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a52      	ldr	r2, [pc, #328]	; (8003a90 <HAL_GPIO_Init+0x328>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d013      	beq.n	8003974 <HAL_GPIO_Init+0x20c>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a51      	ldr	r2, [pc, #324]	; (8003a94 <HAL_GPIO_Init+0x32c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00d      	beq.n	8003970 <HAL_GPIO_Init+0x208>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a50      	ldr	r2, [pc, #320]	; (8003a98 <HAL_GPIO_Init+0x330>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d007      	beq.n	800396c <HAL_GPIO_Init+0x204>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a4f      	ldr	r2, [pc, #316]	; (8003a9c <HAL_GPIO_Init+0x334>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d101      	bne.n	8003968 <HAL_GPIO_Init+0x200>
 8003964:	2308      	movs	r3, #8
 8003966:	e010      	b.n	800398a <HAL_GPIO_Init+0x222>
 8003968:	2309      	movs	r3, #9
 800396a:	e00e      	b.n	800398a <HAL_GPIO_Init+0x222>
 800396c:	2307      	movs	r3, #7
 800396e:	e00c      	b.n	800398a <HAL_GPIO_Init+0x222>
 8003970:	2306      	movs	r3, #6
 8003972:	e00a      	b.n	800398a <HAL_GPIO_Init+0x222>
 8003974:	2305      	movs	r3, #5
 8003976:	e008      	b.n	800398a <HAL_GPIO_Init+0x222>
 8003978:	2304      	movs	r3, #4
 800397a:	e006      	b.n	800398a <HAL_GPIO_Init+0x222>
 800397c:	2303      	movs	r3, #3
 800397e:	e004      	b.n	800398a <HAL_GPIO_Init+0x222>
 8003980:	2302      	movs	r3, #2
 8003982:	e002      	b.n	800398a <HAL_GPIO_Init+0x222>
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <HAL_GPIO_Init+0x222>
 8003988:	2300      	movs	r3, #0
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	f002 0203 	and.w	r2, r2, #3
 8003990:	0092      	lsls	r2, r2, #2
 8003992:	4093      	lsls	r3, r2
 8003994:	461a      	mov	r2, r3
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800399c:	4936      	ldr	r1, [pc, #216]	; (8003a78 <HAL_GPIO_Init+0x310>)
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	089b      	lsrs	r3, r3, #2
 80039a2:	3302      	adds	r3, #2
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039aa:	4b3d      	ldr	r3, [pc, #244]	; (8003aa0 <HAL_GPIO_Init+0x338>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	43db      	mvns	r3, r3
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	4013      	ands	r3, r2
 80039b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80039ce:	4a34      	ldr	r2, [pc, #208]	; (8003aa0 <HAL_GPIO_Init+0x338>)
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039d4:	4b32      	ldr	r3, [pc, #200]	; (8003aa0 <HAL_GPIO_Init+0x338>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	43db      	mvns	r3, r3
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4013      	ands	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80039f8:	4a29      	ldr	r2, [pc, #164]	; (8003aa0 <HAL_GPIO_Init+0x338>)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039fe:	4b28      	ldr	r3, [pc, #160]	; (8003aa0 <HAL_GPIO_Init+0x338>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	43db      	mvns	r3, r3
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a22:	4a1f      	ldr	r2, [pc, #124]	; (8003aa0 <HAL_GPIO_Init+0x338>)
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a28:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <HAL_GPIO_Init+0x338>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4013      	ands	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8003a44:	693a      	ldr	r2, [r7, #16]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a4c:	4a14      	ldr	r2, [pc, #80]	; (8003aa0 <HAL_GPIO_Init+0x338>)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	3301      	adds	r3, #1
 8003a56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f47f ae88 	bne.w	8003778 <HAL_GPIO_Init+0x10>
  }
}
 8003a68:	bf00      	nop
 8003a6a:	bf00      	nop
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr
 8003a74:	40023800 	.word	0x40023800
 8003a78:	40013800 	.word	0x40013800
 8003a7c:	40020000 	.word	0x40020000
 8003a80:	40020400 	.word	0x40020400
 8003a84:	40020800 	.word	0x40020800
 8003a88:	40020c00 	.word	0x40020c00
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	40021400 	.word	0x40021400
 8003a94:	40021800 	.word	0x40021800
 8003a98:	40021c00 	.word	0x40021c00
 8003a9c:	40022000 	.word	0x40022000
 8003aa0:	40013c00 	.word	0x40013c00

08003aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	807b      	strh	r3, [r7, #2]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ab4:	787b      	ldrb	r3, [r7, #1]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aba:	887a      	ldrh	r2, [r7, #2]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ac0:	e003      	b.n	8003aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ac2:	887b      	ldrh	r3, [r7, #2]
 8003ac4:	041a      	lsls	r2, r3, #16
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	619a      	str	r2, [r3, #24]
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	460b      	mov	r3, r1
 8003ade:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ae6:	887a      	ldrh	r2, [r7, #2]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4013      	ands	r3, r2
 8003aec:	041a      	lsls	r2, r3, #16
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	43d9      	mvns	r1, r3
 8003af2:	887b      	ldrh	r3, [r7, #2]
 8003af4:	400b      	ands	r3, r1
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	619a      	str	r2, [r3, #24]
}
 8003afc:	bf00      	nop
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr

08003b06 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b08:	b08f      	sub	sp, #60	; 0x3c
 8003b0a:	af0a      	add	r7, sp, #40	; 0x28
 8003b0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d101      	bne.n	8003b18 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e10f      	b.n	8003d38 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d106      	bne.n	8003b38 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f006 f8be 	bl	8009cb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2203      	movs	r2, #3
 8003b3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d102      	bne.n	8003b52 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f003 f900 	bl	8006d5c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	603b      	str	r3, [r7, #0]
 8003b62:	687e      	ldr	r6, [r7, #4]
 8003b64:	466d      	mov	r5, sp
 8003b66:	f106 0410 	add.w	r4, r6, #16
 8003b6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b76:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b7a:	1d33      	adds	r3, r6, #4
 8003b7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b7e:	6838      	ldr	r0, [r7, #0]
 8003b80:	f002 ffe2 	bl	8006b48 <USB_CoreInit>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e0d0      	b.n	8003d38 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f003 f8ed 	bl	8006d7c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	73fb      	strb	r3, [r7, #15]
 8003ba6:	e04a      	b.n	8003c3e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ba8:	7bfa      	ldrb	r2, [r7, #15]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	333d      	adds	r3, #61	; 0x3d
 8003bb8:	2201      	movs	r2, #1
 8003bba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003bbc:	7bfa      	ldrb	r2, [r7, #15]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	333c      	adds	r3, #60	; 0x3c
 8003bcc:	7bfa      	ldrb	r2, [r7, #15]
 8003bce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003bd0:	7bfa      	ldrb	r2, [r7, #15]
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	b298      	uxth	r0, r3
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	3356      	adds	r3, #86	; 0x56
 8003be4:	4602      	mov	r2, r0
 8003be6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003be8:	7bfa      	ldrb	r2, [r7, #15]
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	3340      	adds	r3, #64	; 0x40
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003bfc:	7bfa      	ldrb	r2, [r7, #15]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4413      	add	r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	3344      	adds	r3, #68	; 0x44
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c10:	7bfa      	ldrb	r2, [r7, #15]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	4413      	add	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	3348      	adds	r3, #72	; 0x48
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c24:	7bfa      	ldrb	r2, [r7, #15]
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	334c      	adds	r3, #76	; 0x4c
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	73fb      	strb	r3, [r7, #15]
 8003c3e:	7bfa      	ldrb	r2, [r7, #15]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d3af      	bcc.n	8003ba8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c48:	2300      	movs	r3, #0
 8003c4a:	73fb      	strb	r3, [r7, #15]
 8003c4c:	e044      	b.n	8003cd8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c4e:	7bfa      	ldrb	r2, [r7, #15]
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003c60:	2200      	movs	r2, #0
 8003c62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c64:	7bfa      	ldrb	r2, [r7, #15]
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003c76:	7bfa      	ldrb	r2, [r7, #15]
 8003c78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c7a:	7bfa      	ldrb	r2, [r7, #15]
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c90:	7bfa      	ldrb	r2, [r7, #15]
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	4613      	mov	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	4413      	add	r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ca6:	7bfa      	ldrb	r2, [r7, #15]
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003cbc:	7bfa      	ldrb	r2, [r7, #15]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cd2:	7bfb      	ldrb	r3, [r7, #15]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	73fb      	strb	r3, [r7, #15]
 8003cd8:	7bfa      	ldrb	r2, [r7, #15]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d3b5      	bcc.n	8003c4e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	603b      	str	r3, [r7, #0]
 8003ce8:	687e      	ldr	r6, [r7, #4]
 8003cea:	466d      	mov	r5, sp
 8003cec:	f106 0410 	add.w	r4, r6, #16
 8003cf0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cf2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cf8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cfc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d00:	1d33      	adds	r3, r6, #4
 8003d02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d04:	6838      	ldr	r0, [r7, #0]
 8003d06:	f003 f885 	bl	8006e14 <USB_DevInit>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d005      	beq.n	8003d1c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2202      	movs	r2, #2
 8003d14:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e00d      	b.n	8003d38 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f004 f8b7 	bl	8007ea4 <USB_DevDisconnect>

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d40 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_PCD_Start+0x16>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e012      	b.n	8003d7c <HAL_PCD_Start+0x3c>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f002 ffea 	bl	8006d3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f004 f879 	bl	8007e64 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d84:	b590      	push	{r4, r7, lr}
 8003d86:	b08d      	sub	sp, #52	; 0x34
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f004 f930 	bl	8008000 <USB_GetMode>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f040 847c 	bne.w	80046a0 <HAL_PCD_IRQHandler+0x91c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f004 f899 	bl	8007ee4 <USB_ReadInterrupts>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 8472 	beq.w	800469e <HAL_PCD_IRQHandler+0x91a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	0a1b      	lsrs	r3, r3, #8
 8003dc4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f004 f886 	bl	8007ee4 <USB_ReadInterrupts>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d107      	bne.n	8003df2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695a      	ldr	r2, [r3, #20]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f002 0202 	and.w	r2, r2, #2
 8003df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f004 f874 	bl	8007ee4 <USB_ReadInterrupts>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b10      	cmp	r3, #16
 8003e04:	d161      	bne.n	8003eca <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699a      	ldr	r2, [r3, #24]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0210 	bic.w	r2, r2, #16
 8003e14:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	f003 020f 	and.w	r2, r3, #15
 8003e22:	4613      	mov	r3, r2
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	4413      	add	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	4413      	add	r3, r2
 8003e32:	3304      	adds	r3, #4
 8003e34:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	0c5b      	lsrs	r3, r3, #17
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d124      	bne.n	8003e8c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003e48:	4013      	ands	r3, r2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d035      	beq.n	8003eba <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	091b      	lsrs	r3, r3, #4
 8003e56:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	6a38      	ldr	r0, [r7, #32]
 8003e62:	f003 feb1 	bl	8007bc8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	091b      	lsrs	r3, r3, #4
 8003e6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e72:	441a      	add	r2, r3
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e84:	441a      	add	r2, r3
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	615a      	str	r2, [r3, #20]
 8003e8a:	e016      	b.n	8003eba <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	0c5b      	lsrs	r3, r3, #17
 8003e90:	f003 030f 	and.w	r3, r3, #15
 8003e94:	2b06      	cmp	r3, #6
 8003e96:	d110      	bne.n	8003eba <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e9e:	2208      	movs	r2, #8
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	6a38      	ldr	r0, [r7, #32]
 8003ea4:	f003 fe90 	bl	8007bc8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	695a      	ldr	r2, [r3, #20]
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	091b      	lsrs	r3, r3, #4
 8003eb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003eb4:	441a      	add	r2, r3
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699a      	ldr	r2, [r3, #24]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0210 	orr.w	r2, r2, #16
 8003ec8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f004 f808 	bl	8007ee4 <USB_ReadInterrupts>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eda:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ede:	f040 80a7 	bne.w	8004030 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f004 f80c 	bl	8007f08 <USB_ReadDevAllOutEpInterrupt>
 8003ef0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003ef2:	e099      	b.n	8004028 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 808e 	beq.w	800401c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	4611      	mov	r1, r2
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f004 f82e 	bl	8007f6c <USB_ReadDevOutEPInterrupt>
 8003f10:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00c      	beq.n	8003f36 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f28:	461a      	mov	r2, r3
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003f2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 fe95 	bl	8004c60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00c      	beq.n	8003f5a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	2308      	movs	r3, #8
 8003f50:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003f52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 ff6b 	bl	8004e30 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f003 0310 	and.w	r3, r3, #16
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d008      	beq.n	8003f76 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f70:	461a      	mov	r2, r3
 8003f72:	2310      	movs	r3, #16
 8003f74:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d030      	beq.n	8003fe2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003f80:	6a3b      	ldr	r3, [r7, #32]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f88:	2b80      	cmp	r3, #128	; 0x80
 8003f8a:	d109      	bne.n	8003fa0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f9e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	78db      	ldrb	r3, [r3, #3]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d108      	bne.n	8003fd0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	4619      	mov	r1, r3
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f005 ff86 	bl	8009edc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fdc:	461a      	mov	r2, r3
 8003fde:	2302      	movs	r3, #2
 8003fe0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f003 0320 	and.w	r3, r3, #32
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	2320      	movs	r3, #32
 8003ffc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d009      	beq.n	800401c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004014:	461a      	mov	r2, r3
 8004016:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800401a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	3301      	adds	r3, #1
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004024:	085b      	lsrs	r3, r3, #1
 8004026:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402a:	2b00      	cmp	r3, #0
 800402c:	f47f af62 	bne.w	8003ef4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4618      	mov	r0, r3
 8004036:	f003 ff55 	bl	8007ee4 <USB_ReadInterrupts>
 800403a:	4603      	mov	r3, r0
 800403c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004040:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004044:	f040 80db 	bne.w	80041fe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f003 ff74 	bl	8007f3a <USB_ReadDevAllInEpInterrupt>
 8004052:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004058:	e0cd      	b.n	80041f6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800405a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 80c2 	beq.w	80041ea <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406c:	b2d2      	uxtb	r2, r2
 800406e:	4611      	mov	r1, r2
 8004070:	4618      	mov	r0, r3
 8004072:	f003 ff98 	bl	8007fa6 <USB_ReadDevInEPInterrupt>
 8004076:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d057      	beq.n	8004132 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	f003 030f 	and.w	r3, r3, #15
 8004088:	2201      	movs	r2, #1
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	43db      	mvns	r3, r3
 800409c:	69f9      	ldr	r1, [r7, #28]
 800409e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040a2:	4013      	ands	r3, r2
 80040a4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b2:	461a      	mov	r2, r3
 80040b4:	2301      	movs	r3, #1
 80040b6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d132      	bne.n	8004126 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c4:	4613      	mov	r3, r2
 80040c6:	00db      	lsls	r3, r3, #3
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	3348      	adds	r3, #72	; 0x48
 80040d0:	6819      	ldr	r1, [r3, #0]
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d6:	4613      	mov	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	4413      	add	r3, r2
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4403      	add	r3, r0
 80040e0:	3344      	adds	r3, #68	; 0x44
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4419      	add	r1, r3
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ea:	4613      	mov	r3, r2
 80040ec:	00db      	lsls	r3, r3, #3
 80040ee:	4413      	add	r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4403      	add	r3, r0
 80040f4:	3348      	adds	r3, #72	; 0x48
 80040f6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d113      	bne.n	8004126 <HAL_PCD_IRQHandler+0x3a2>
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004102:	4613      	mov	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	440b      	add	r3, r1
 800410c:	334c      	adds	r3, #76	; 0x4c
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d108      	bne.n	8004126 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800411e:	461a      	mov	r2, r3
 8004120:	2101      	movs	r1, #1
 8004122:	f003 ff9d 	bl	8008060 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	b2db      	uxtb	r3, r3
 800412a:	4619      	mov	r1, r3
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f005 fe50 	bl	8009dd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b00      	cmp	r3, #0
 800413a:	d008      	beq.n	800414e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004148:	461a      	mov	r2, r3
 800414a:	2308      	movs	r3, #8
 800414c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f003 0310 	and.w	r3, r3, #16
 8004154:	2b00      	cmp	r3, #0
 8004156:	d008      	beq.n	800416a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004164:	461a      	mov	r2, r3
 8004166:	2310      	movs	r3, #16
 8004168:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	4413      	add	r3, r2
 800417c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004180:	461a      	mov	r2, r3
 8004182:	2340      	movs	r3, #64	; 0x40
 8004184:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d023      	beq.n	80041d8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004190:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004192:	6a38      	ldr	r0, [r7, #32]
 8004194:	f002 ff98 	bl	80070c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419a:	4613      	mov	r3, r2
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	4413      	add	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	3338      	adds	r3, #56	; 0x38
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	4413      	add	r3, r2
 80041a8:	3304      	adds	r3, #4
 80041aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	78db      	ldrb	r3, [r3, #3]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d108      	bne.n	80041c6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	2200      	movs	r2, #0
 80041b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	4619      	mov	r1, r3
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f005 fe9d 	bl	8009f00 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d2:	461a      	mov	r2, r3
 80041d4:	2302      	movs	r3, #2
 80041d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80041e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 fcae 	bl	8004b46 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	3301      	adds	r3, #1
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80041f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f2:	085b      	lsrs	r3, r3, #1
 80041f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80041f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f47f af2e 	bne.w	800405a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f003 fe6e 	bl	8007ee4 <USB_ReadInterrupts>
 8004208:	4603      	mov	r3, r0
 800420a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800420e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004212:	d114      	bne.n	800423e <HAL_PCD_IRQHandler+0x4ba>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004222:	f023 0301 	bic.w	r3, r3, #1
 8004226:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f005 fe49 	bl	8009ec0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800423c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f003 fe4e 	bl	8007ee4 <USB_ReadInterrupts>
 8004248:	4603      	mov	r3, r0
 800424a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800424e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004252:	d112      	bne.n	800427a <HAL_PCD_IRQHandler+0x4f6>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b01      	cmp	r3, #1
 8004262:	d102      	bne.n	800426a <HAL_PCD_IRQHandler+0x4e6>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f005 fe05 	bl	8009e74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	695a      	ldr	r2, [r3, #20]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004278:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4618      	mov	r0, r3
 8004280:	f003 fe30 	bl	8007ee4 <USB_ReadInterrupts>
 8004284:	4603      	mov	r3, r0
 8004286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800428a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800428e:	f040 80b7 	bne.w	8004400 <HAL_PCD_IRQHandler+0x67c>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042a0:	f023 0301 	bic.w	r3, r3, #1
 80042a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2110      	movs	r1, #16
 80042ac:	4618      	mov	r0, r3
 80042ae:	f002 ff0b 	bl	80070c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042b2:	2300      	movs	r3, #0
 80042b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042b6:	e046      	b.n	8004346 <HAL_PCD_IRQHandler+0x5c2>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80042b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c4:	461a      	mov	r2, r3
 80042c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80042cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042dc:	0151      	lsls	r1, r2, #5
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	440a      	add	r2, r1
 80042e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80042ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f8:	461a      	mov	r2, r3
 80042fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004310:	0151      	lsls	r1, r2, #5
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	440a      	add	r2, r1
 8004316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800431a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800431e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004330:	0151      	lsls	r1, r2, #5
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	440a      	add	r2, r1
 8004336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800433a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800433e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004342:	3301      	adds	r3, #1
 8004344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800434c:	429a      	cmp	r2, r3
 800434e:	d3b3      	bcc.n	80042b8 <HAL_PCD_IRQHandler+0x534>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	69fa      	ldr	r2, [r7, #28]
 800435a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800435e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004362:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	2b00      	cmp	r3, #0
 800436a:	d016      	beq.n	800439a <HAL_PCD_IRQHandler+0x616>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004376:	69fa      	ldr	r2, [r7, #28]
 8004378:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800437c:	f043 030b 	orr.w	r3, r3, #11
 8004380:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438c:	69fa      	ldr	r2, [r7, #28]
 800438e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004392:	f043 030b 	orr.w	r3, r3, #11
 8004396:	6453      	str	r3, [r2, #68]	; 0x44
 8004398:	e015      	b.n	80043c6 <HAL_PCD_IRQHandler+0x642>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80043ac:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80043b0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	69fa      	ldr	r2, [r7, #28]
 80043bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043c0:	f043 030b 	orr.w	r3, r3, #11
 80043c4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	69fa      	ldr	r2, [r7, #28]
 80043d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80043d8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80043ea:	461a      	mov	r2, r3
 80043ec:	f003 fe38 	bl	8008060 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695a      	ldr	r2, [r3, #20]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80043fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4618      	mov	r0, r3
 8004406:	f003 fd6d 	bl	8007ee4 <USB_ReadInterrupts>
 800440a:	4603      	mov	r3, r0
 800440c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004414:	d124      	bne.n	8004460 <HAL_PCD_IRQHandler+0x6dc>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f003 fdfd 	bl	800801a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4618      	mov	r0, r3
 8004426:	f002 fecb 	bl	80071c0 <USB_GetDevSpeed>
 800442a:	4603      	mov	r3, r0
 800442c:	461a      	mov	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681c      	ldr	r4, [r3, #0]
 8004436:	f001 f99d 	bl	8005774 <HAL_RCC_GetHCLKFreq>
 800443a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004440:	b2db      	uxtb	r3, r3
 8004442:	461a      	mov	r2, r3
 8004444:	4620      	mov	r0, r4
 8004446:	f002 fbd7 	bl	8006bf8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f005 fce9 	bl	8009e22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	695a      	ldr	r2, [r3, #20]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800445e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f003 fd3d 	bl	8007ee4 <USB_ReadInterrupts>
 800446a:	4603      	mov	r3, r0
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b08      	cmp	r3, #8
 8004472:	d10a      	bne.n	800448a <HAL_PCD_IRQHandler+0x706>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f005 fcc6 	bl	8009e06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695a      	ldr	r2, [r3, #20]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f002 0208 	and.w	r2, r2, #8
 8004488:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f003 fd28 	bl	8007ee4 <USB_ReadInterrupts>
 8004494:	4603      	mov	r3, r0
 8004496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449a:	2b80      	cmp	r3, #128	; 0x80
 800449c:	d122      	bne.n	80044e4 <HAL_PCD_IRQHandler+0x760>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044aa:	2301      	movs	r3, #1
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
 80044ae:	e014      	b.n	80044da <HAL_PCD_IRQHandler+0x756>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b4:	4613      	mov	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d105      	bne.n	80044d4 <HAL_PCD_IRQHandler+0x750>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	4619      	mov	r1, r3
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fb08 	bl	8004ae4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	3301      	adds	r3, #1
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d3e5      	bcc.n	80044b0 <HAL_PCD_IRQHandler+0x72c>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f003 fcfb 	bl	8007ee4 <USB_ReadInterrupts>
 80044ee:	4603      	mov	r3, r0
 80044f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044f8:	d13b      	bne.n	8004572 <HAL_PCD_IRQHandler+0x7ee>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044fa:	2301      	movs	r3, #1
 80044fc:	627b      	str	r3, [r7, #36]	; 0x24
 80044fe:	e02b      	b.n	8004558 <HAL_PCD_IRQHandler+0x7d4>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004514:	4613      	mov	r3, r2
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	4413      	add	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	440b      	add	r3, r1
 800451e:	3340      	adds	r3, #64	; 0x40
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d115      	bne.n	8004552 <HAL_PCD_IRQHandler+0x7ce>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004526:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004528:	2b00      	cmp	r3, #0
 800452a:	da12      	bge.n	8004552 <HAL_PCD_IRQHandler+0x7ce>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004530:	4613      	mov	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4413      	add	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	333f      	adds	r3, #63	; 0x3f
 800453c:	2201      	movs	r2, #1
 800453e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	b2db      	uxtb	r3, r3
 8004544:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004548:	b2db      	uxtb	r3, r3
 800454a:	4619      	mov	r1, r3
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 fac9 	bl	8004ae4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	3301      	adds	r3, #1
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800455e:	429a      	cmp	r2, r3
 8004560:	d3ce      	bcc.n	8004500 <HAL_PCD_IRQHandler+0x77c>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695a      	ldr	r2, [r3, #20]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004570:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f003 fcb4 	bl	8007ee4 <USB_ReadInterrupts>
 800457c:	4603      	mov	r3, r0
 800457e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004582:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004586:	d155      	bne.n	8004634 <HAL_PCD_IRQHandler+0x8b0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004588:	2301      	movs	r3, #1
 800458a:	627b      	str	r3, [r7, #36]	; 0x24
 800458c:	e045      	b.n	800461a <HAL_PCD_IRQHandler+0x896>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a2:	4613      	mov	r3, r2
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	4413      	add	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	440b      	add	r3, r1
 80045ac:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d12e      	bne.n	8004614 <HAL_PCD_IRQHandler+0x890>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80045b6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	da2b      	bge.n	8004614 <HAL_PCD_IRQHandler+0x890>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80045c8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d121      	bne.n	8004614 <HAL_PCD_IRQHandler+0x890>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d4:	4613      	mov	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80045e2:	2201      	movs	r2, #1
 80045e4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10a      	bne.n	8004614 <HAL_PCD_IRQHandler+0x890>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800460c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004610:	6053      	str	r3, [r2, #4]
            break;
 8004612:	e007      	b.n	8004624 <HAL_PCD_IRQHandler+0x8a0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	3301      	adds	r3, #1
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004620:	429a      	cmp	r2, r3
 8004622:	d3b4      	bcc.n	800458e <HAL_PCD_IRQHandler+0x80a>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	695a      	ldr	r2, [r3, #20]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004632:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f003 fc53 	bl	8007ee4 <USB_ReadInterrupts>
 800463e:	4603      	mov	r3, r0
 8004640:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004648:	d10a      	bne.n	8004660 <HAL_PCD_IRQHandler+0x8dc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f005 fc6a 	bl	8009f24 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695a      	ldr	r2, [r3, #20]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800465e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f003 fc3d 	bl	8007ee4 <USB_ReadInterrupts>
 800466a:	4603      	mov	r3, r0
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b04      	cmp	r3, #4
 8004672:	d115      	bne.n	80046a0 <HAL_PCD_IRQHandler+0x91c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	f003 0304 	and.w	r3, r3, #4
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <HAL_PCD_IRQHandler+0x908>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f005 fc5a 	bl	8009f40 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6859      	ldr	r1, [r3, #4]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	430a      	orrs	r2, r1
 800469a:	605a      	str	r2, [r3, #4]
 800469c:	e000      	b.n	80046a0 <HAL_PCD_IRQHandler+0x91c>
      return;
 800469e:	bf00      	nop
    }
  }
}
 80046a0:	3734      	adds	r7, #52	; 0x34
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd90      	pop	{r4, r7, pc}

080046a6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	460b      	mov	r3, r1
 80046b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_PCD_SetAddress+0x1a>
 80046bc:	2302      	movs	r3, #2
 80046be:	e013      	b.n	80046e8 <HAL_PCD_SetAddress+0x42>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	78fa      	ldrb	r2, [r7, #3]
 80046cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	78fa      	ldrb	r2, [r7, #3]
 80046d6:	4611      	mov	r1, r2
 80046d8:	4618      	mov	r0, r3
 80046da:	f003 fb9e 	bl	8007e1a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	4608      	mov	r0, r1
 80046fa:	4611      	mov	r1, r2
 80046fc:	461a      	mov	r2, r3
 80046fe:	4603      	mov	r3, r0
 8004700:	70fb      	strb	r3, [r7, #3]
 8004702:	460b      	mov	r3, r1
 8004704:	803b      	strh	r3, [r7, #0]
 8004706:	4613      	mov	r3, r2
 8004708:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800470e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004712:	2b00      	cmp	r3, #0
 8004714:	da0f      	bge.n	8004736 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004716:	78fb      	ldrb	r3, [r7, #3]
 8004718:	f003 020f 	and.w	r2, r3, #15
 800471c:	4613      	mov	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4413      	add	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	3338      	adds	r3, #56	; 0x38
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	4413      	add	r3, r2
 800472a:	3304      	adds	r3, #4
 800472c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2201      	movs	r2, #1
 8004732:	705a      	strb	r2, [r3, #1]
 8004734:	e00f      	b.n	8004756 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004736:	78fb      	ldrb	r3, [r7, #3]
 8004738:	f003 020f 	and.w	r2, r3, #15
 800473c:	4613      	mov	r3, r2
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	4413      	add	r3, r2
 800474c:	3304      	adds	r3, #4
 800474e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004756:	78fb      	ldrb	r3, [r7, #3]
 8004758:	f003 030f 	and.w	r3, r3, #15
 800475c:	b2da      	uxtb	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004762:	883a      	ldrh	r2, [r7, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	78ba      	ldrb	r2, [r7, #2]
 800476c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	785b      	ldrb	r3, [r3, #1]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d004      	beq.n	8004780 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004780:	78bb      	ldrb	r3, [r7, #2]
 8004782:	2b02      	cmp	r3, #2
 8004784:	d102      	bne.n	800478c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <HAL_PCD_EP_Open+0xaa>
 8004796:	2302      	movs	r3, #2
 8004798:	e00e      	b.n	80047b8 <HAL_PCD_EP_Open+0xc8>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68f9      	ldr	r1, [r7, #12]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f002 fd2d 	bl	8007208 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80047b6:	7afb      	ldrb	r3, [r7, #11]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	da0f      	bge.n	80047f4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	f003 020f 	and.w	r2, r3, #15
 80047da:	4613      	mov	r3, r2
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	4413      	add	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	3338      	adds	r3, #56	; 0x38
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	4413      	add	r3, r2
 80047e8:	3304      	adds	r3, #4
 80047ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2201      	movs	r2, #1
 80047f0:	705a      	strb	r2, [r3, #1]
 80047f2:	e00f      	b.n	8004814 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047f4:	78fb      	ldrb	r3, [r7, #3]
 80047f6:	f003 020f 	and.w	r2, r3, #15
 80047fa:	4613      	mov	r3, r2
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	4413      	add	r3, r2
 800480a:	3304      	adds	r3, #4
 800480c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004814:	78fb      	ldrb	r3, [r7, #3]
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	b2da      	uxtb	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004826:	2b01      	cmp	r3, #1
 8004828:	d101      	bne.n	800482e <HAL_PCD_EP_Close+0x6e>
 800482a:	2302      	movs	r3, #2
 800482c:	e00e      	b.n	800484c <HAL_PCD_EP_Close+0x8c>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68f9      	ldr	r1, [r7, #12]
 800483c:	4618      	mov	r0, r3
 800483e:	f002 fd69 	bl	8007314 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	607a      	str	r2, [r7, #4]
 800485e:	603b      	str	r3, [r7, #0]
 8004860:	460b      	mov	r3, r1
 8004862:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004864:	7afb      	ldrb	r3, [r7, #11]
 8004866:	f003 020f 	and.w	r2, r3, #15
 800486a:	4613      	mov	r3, r2
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	4413      	add	r3, r2
 800487a:	3304      	adds	r3, #4
 800487c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2200      	movs	r2, #0
 800488e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	2200      	movs	r2, #0
 8004894:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004896:	7afb      	ldrb	r3, [r7, #11]
 8004898:	f003 030f 	and.w	r3, r3, #15
 800489c:	b2da      	uxtb	r2, r3
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d102      	bne.n	80048b0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6818      	ldr	r0, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	461a      	mov	r2, r3
 80048bc:	6979      	ldr	r1, [r7, #20]
 80048be:	f002 fe05 	bl	80074cc <USB_EPStartXfer>

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	460b      	mov	r3, r1
 80048d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80048d8:	78fb      	ldrb	r3, [r7, #3]
 80048da:	f003 020f 	and.w	r2, r3, #15
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	4613      	mov	r3, r2
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	4413      	add	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80048ee:	681b      	ldr	r3, [r3, #0]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bc80      	pop	{r7}
 80048f8:	4770      	bx	lr

080048fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b086      	sub	sp, #24
 80048fe:	af00      	add	r7, sp, #0
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	607a      	str	r2, [r7, #4]
 8004904:	603b      	str	r3, [r7, #0]
 8004906:	460b      	mov	r3, r1
 8004908:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800490a:	7afb      	ldrb	r3, [r7, #11]
 800490c:	f003 020f 	and.w	r2, r3, #15
 8004910:	4613      	mov	r3, r2
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	3338      	adds	r3, #56	; 0x38
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4413      	add	r3, r2
 800491e:	3304      	adds	r3, #4
 8004920:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2200      	movs	r2, #0
 8004932:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2201      	movs	r2, #1
 8004938:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800493a:	7afb      	ldrb	r3, [r7, #11]
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	b2da      	uxtb	r2, r3
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d102      	bne.n	8004954 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6818      	ldr	r0, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	b2db      	uxtb	r3, r3
 800495e:	461a      	mov	r2, r3
 8004960:	6979      	ldr	r1, [r7, #20]
 8004962:	f002 fdb3 	bl	80074cc <USB_EPStartXfer>

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	460b      	mov	r3, r1
 800497a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	f003 020f 	and.w	r2, r3, #15
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	429a      	cmp	r2, r3
 8004988:	d901      	bls.n	800498e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e050      	b.n	8004a30 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800498e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004992:	2b00      	cmp	r3, #0
 8004994:	da0f      	bge.n	80049b6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004996:	78fb      	ldrb	r3, [r7, #3]
 8004998:	f003 020f 	and.w	r2, r3, #15
 800499c:	4613      	mov	r3, r2
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	4413      	add	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	3338      	adds	r3, #56	; 0x38
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	4413      	add	r3, r2
 80049aa:	3304      	adds	r3, #4
 80049ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2201      	movs	r2, #1
 80049b2:	705a      	strb	r2, [r3, #1]
 80049b4:	e00d      	b.n	80049d2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049b6:	78fa      	ldrb	r2, [r7, #3]
 80049b8:	4613      	mov	r3, r2
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	4413      	add	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	4413      	add	r3, r2
 80049c8:	3304      	adds	r3, #4
 80049ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2201      	movs	r2, #1
 80049d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	f003 030f 	and.w	r3, r3, #15
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d101      	bne.n	80049f2 <HAL_PCD_EP_SetStall+0x82>
 80049ee:	2302      	movs	r3, #2
 80049f0:	e01e      	b.n	8004a30 <HAL_PCD_EP_SetStall+0xc0>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68f9      	ldr	r1, [r7, #12]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f003 f938 	bl	8007c76 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a06:	78fb      	ldrb	r3, [r7, #3]
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10a      	bne.n	8004a26 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6818      	ldr	r0, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	b2d9      	uxtb	r1, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a20:	461a      	mov	r2, r3
 8004a22:	f003 fb1d 	bl	8008060 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	f003 020f 	and.w	r2, r3, #15
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d901      	bls.n	8004a56 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e042      	b.n	8004adc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	da0f      	bge.n	8004a7e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a5e:	78fb      	ldrb	r3, [r7, #3]
 8004a60:	f003 020f 	and.w	r2, r3, #15
 8004a64:	4613      	mov	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	4413      	add	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	3338      	adds	r3, #56	; 0x38
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	4413      	add	r3, r2
 8004a72:	3304      	adds	r3, #4
 8004a74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	705a      	strb	r2, [r3, #1]
 8004a7c:	e00f      	b.n	8004a9e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a7e:	78fb      	ldrb	r3, [r7, #3]
 8004a80:	f003 020f 	and.w	r2, r3, #15
 8004a84:	4613      	mov	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	4413      	add	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	4413      	add	r3, r2
 8004a94:	3304      	adds	r3, #4
 8004a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d101      	bne.n	8004abe <HAL_PCD_EP_ClrStall+0x86>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e00e      	b.n	8004adc <HAL_PCD_EP_ClrStall+0xa4>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68f9      	ldr	r1, [r7, #12]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f003 f93f 	bl	8007d50 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004af0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	da0c      	bge.n	8004b12 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004af8:	78fb      	ldrb	r3, [r7, #3]
 8004afa:	f003 020f 	and.w	r2, r3, #15
 8004afe:	4613      	mov	r3, r2
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	4413      	add	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	3338      	adds	r3, #56	; 0x38
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3304      	adds	r3, #4
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	e00c      	b.n	8004b2c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b12:	78fb      	ldrb	r3, [r7, #3]
 8004b14:	f003 020f 	and.w	r2, r3, #15
 8004b18:	4613      	mov	r3, r2
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	4413      	add	r3, r2
 8004b28:	3304      	adds	r3, #4
 8004b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68f9      	ldr	r1, [r7, #12]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f002 ff62 	bl	80079fc <USB_EPStopXfer>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004b3c:	7afb      	ldrb	r3, [r7, #11]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b08a      	sub	sp, #40	; 0x28
 8004b4a:	af02      	add	r7, sp, #8
 8004b4c:	6078      	str	r0, [r7, #4]
 8004b4e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004b5a:	683a      	ldr	r2, [r7, #0]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	3338      	adds	r3, #56	; 0x38
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	4413      	add	r3, r2
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	695a      	ldr	r2, [r3, #20]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d901      	bls.n	8004b7e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e06c      	b.n	8004c58 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	691a      	ldr	r2, [r3, #16]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	69fa      	ldr	r2, [r7, #28]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d902      	bls.n	8004b9a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	3303      	adds	r3, #3
 8004b9e:	089b      	lsrs	r3, r3, #2
 8004ba0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ba2:	e02b      	b.n	8004bfc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	691a      	ldr	r2, [r3, #16]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	69fa      	ldr	r2, [r7, #28]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d902      	bls.n	8004bc0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	3303      	adds	r3, #3
 8004bc4:	089b      	lsrs	r3, r3, #2
 8004bc6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	68d9      	ldr	r1, [r3, #12]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	4603      	mov	r3, r0
 8004bde:	6978      	ldr	r0, [r7, #20]
 8004be0:	f002 ffb5 	bl	8007b4e <USB_WritePacket>

    ep->xfer_buff  += len;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	441a      	add	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	695a      	ldr	r2, [r3, #20]
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	441a      	add	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d809      	bhi.n	8004c26 <PCD_WriteEmptyTxFifo+0xe0>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	695a      	ldr	r2, [r3, #20]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d203      	bcs.n	8004c26 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1be      	bne.n	8004ba4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	691a      	ldr	r2, [r3, #16]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d811      	bhi.n	8004c56 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	2201      	movs	r2, #1
 8004c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	6939      	ldr	r1, [r7, #16]
 8004c4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c52:	4013      	ands	r3, r2
 8004c54:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3720      	adds	r7, #32
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b088      	sub	sp, #32
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	333c      	adds	r3, #60	; 0x3c
 8004c78:	3304      	adds	r3, #4
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d17b      	bne.n	8004d8e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f003 0308 	and.w	r3, r3, #8
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d015      	beq.n	8004ccc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	4a61      	ldr	r2, [pc, #388]	; (8004e28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	f240 80b9 	bls.w	8004e1c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 80b3 	beq.w	8004e1c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cc8:	6093      	str	r3, [r2, #8]
 8004cca:	e0a7      	b.n	8004e1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d009      	beq.n	8004cea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	015a      	lsls	r2, r3, #5
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	2320      	movs	r3, #32
 8004ce6:	6093      	str	r3, [r2, #8]
 8004ce8:	e098      	b.n	8004e1c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f040 8093 	bne.w	8004e1c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	4a4b      	ldr	r2, [pc, #300]	; (8004e28 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d90f      	bls.n	8004d1e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d14:	461a      	mov	r2, r3
 8004d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d1a:	6093      	str	r3, [r2, #8]
 8004d1c:	e07e      	b.n	8004e1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	4613      	mov	r3, r2
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	4413      	add	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	4413      	add	r3, r2
 8004d30:	3304      	adds	r3, #4
 8004d32:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a1a      	ldr	r2, [r3, #32]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	0159      	lsls	r1, r3, #5
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	440b      	add	r3, r1
 8004d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d4a:	1ad2      	subs	r2, r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d114      	bne.n	8004d80 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d109      	bne.n	8004d72 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6818      	ldr	r0, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d68:	461a      	mov	r2, r3
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	f003 f978 	bl	8008060 <USB_EP0_OutStart>
 8004d70:	e006      	b.n	8004d80 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	441a      	add	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	4619      	mov	r1, r3
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f005 f808 	bl	8009d9c <HAL_PCD_DataOutStageCallback>
 8004d8c:	e046      	b.n	8004e1c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	4a26      	ldr	r2, [pc, #152]	; (8004e2c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d124      	bne.n	8004de0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00a      	beq.n	8004db6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dac:	461a      	mov	r2, r3
 8004dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004db2:	6093      	str	r3, [r2, #8]
 8004db4:	e032      	b.n	8004e1c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d008      	beq.n	8004dd2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dcc:	461a      	mov	r2, r3
 8004dce:	2320      	movs	r3, #32
 8004dd0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f004 ffdf 	bl	8009d9c <HAL_PCD_DataOutStageCallback>
 8004dde:	e01d      	b.n	8004e1c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d114      	bne.n	8004e10 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	4613      	mov	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d108      	bne.n	8004e10 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e08:	461a      	mov	r2, r3
 8004e0a:	2100      	movs	r1, #0
 8004e0c:	f003 f928 	bl	8008060 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	4619      	mov	r1, r3
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f004 ffc0 	bl	8009d9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3720      	adds	r7, #32
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	4f54300a 	.word	0x4f54300a
 8004e2c:	4f54310a 	.word	0x4f54310a

08004e30 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	333c      	adds	r3, #60	; 0x3c
 8004e48:	3304      	adds	r3, #4
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4a15      	ldr	r2, [pc, #84]	; (8004eb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d90e      	bls.n	8004e84 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d009      	beq.n	8004e84 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e82:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f004 ff77 	bl	8009d78 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4a0a      	ldr	r2, [pc, #40]	; (8004eb8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d90c      	bls.n	8004eac <PCD_EP_OutSetupPacket_int+0x7c>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d108      	bne.n	8004eac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	f003 f8da 	bl	8008060 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3718      	adds	r7, #24
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	4f54300a 	.word	0x4f54300a

08004ebc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	70fb      	strb	r3, [r7, #3]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ed4:	78fb      	ldrb	r3, [r7, #3]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d107      	bne.n	8004eea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004eda:	883b      	ldrh	r3, [r7, #0]
 8004edc:	0419      	lsls	r1, r3, #16
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	629a      	str	r2, [r3, #40]	; 0x28
 8004ee8:	e028      	b.n	8004f3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef0:	0c1b      	lsrs	r3, r3, #16
 8004ef2:	68ba      	ldr	r2, [r7, #8]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ef8:	2300      	movs	r3, #0
 8004efa:	73fb      	strb	r3, [r7, #15]
 8004efc:	e00d      	b.n	8004f1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	3340      	adds	r3, #64	; 0x40
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	0c1b      	lsrs	r3, r3, #16
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	4413      	add	r3, r2
 8004f12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
 8004f16:	3301      	adds	r3, #1
 8004f18:	73fb      	strb	r3, [r7, #15]
 8004f1a:	7bfa      	ldrb	r2, [r7, #15]
 8004f1c:	78fb      	ldrb	r3, [r7, #3]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d3ec      	bcc.n	8004efe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004f24:	883b      	ldrh	r3, [r7, #0]
 8004f26:	0418      	lsls	r0, r3, #16
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6819      	ldr	r1, [r3, #0]
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	4302      	orrs	r2, r0
 8004f34:	3340      	adds	r3, #64	; 0x40
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	440b      	add	r3, r1
 8004f3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr

08004f48 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	887a      	ldrh	r2, [r7, #2]
 8004f5a:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bc80      	pop	{r7}
 8004f66:	4770      	bx	lr

08004f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b08a      	sub	sp, #40	; 0x28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e23b      	b.n	80053f2 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d050      	beq.n	8005028 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f86:	4b9e      	ldr	r3, [pc, #632]	; (8005200 <HAL_RCC_OscConfig+0x298>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 030c 	and.w	r3, r3, #12
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d00c      	beq.n	8004fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f92:	4b9b      	ldr	r3, [pc, #620]	; (8005200 <HAL_RCC_OscConfig+0x298>)
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f9a:	2b08      	cmp	r3, #8
 8004f9c:	d112      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f9e:	4b98      	ldr	r3, [pc, #608]	; (8005200 <HAL_RCC_OscConfig+0x298>)
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004faa:	d10b      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fac:	4b94      	ldr	r3, [pc, #592]	; (8005200 <HAL_RCC_OscConfig+0x298>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d036      	beq.n	8005026 <HAL_RCC_OscConfig+0xbe>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d132      	bne.n	8005026 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e216      	b.n	80053f2 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	4b8e      	ldr	r3, [pc, #568]	; (8005204 <HAL_RCC_OscConfig+0x29c>)
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d013      	beq.n	8004ffe <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd6:	f7fd fd13 	bl	8002a00 <HAL_GetTick>
 8004fda:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fde:	f7fd fd0f 	bl	8002a00 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b64      	cmp	r3, #100	; 0x64
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e200      	b.n	80053f2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff0:	4b83      	ldr	r3, [pc, #524]	; (8005200 <HAL_RCC_OscConfig+0x298>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0f0      	beq.n	8004fde <HAL_RCC_OscConfig+0x76>
 8004ffc:	e014      	b.n	8005028 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffe:	f7fd fcff 	bl	8002a00 <HAL_GetTick>
 8005002:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005004:	e008      	b.n	8005018 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005006:	f7fd fcfb 	bl	8002a00 <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b64      	cmp	r3, #100	; 0x64
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e1ec      	b.n	80053f2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005018:	4b79      	ldr	r3, [pc, #484]	; (8005200 <HAL_RCC_OscConfig+0x298>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1f0      	bne.n	8005006 <HAL_RCC_OscConfig+0x9e>
 8005024:	e000      	b.n	8005028 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005026:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d077      	beq.n	8005124 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005034:	4b72      	ldr	r3, [pc, #456]	; (8005200 <HAL_RCC_OscConfig+0x298>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f003 030c 	and.w	r3, r3, #12
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00b      	beq.n	8005058 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005040:	4b6f      	ldr	r3, [pc, #444]	; (8005200 <HAL_RCC_OscConfig+0x298>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005048:	2b08      	cmp	r3, #8
 800504a:	d126      	bne.n	800509a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800504c:	4b6c      	ldr	r3, [pc, #432]	; (8005200 <HAL_RCC_OscConfig+0x298>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d120      	bne.n	800509a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005058:	4b69      	ldr	r3, [pc, #420]	; (8005200 <HAL_RCC_OscConfig+0x298>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d005      	beq.n	8005070 <HAL_RCC_OscConfig+0x108>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d001      	beq.n	8005070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e1c0      	b.n	80053f2 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005070:	4b63      	ldr	r3, [pc, #396]	; (8005200 <HAL_RCC_OscConfig+0x298>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	21f8      	movs	r1, #248	; 0xf8
 800507e:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005080:	69b9      	ldr	r1, [r7, #24]
 8005082:	fa91 f1a1 	rbit	r1, r1
 8005086:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005088:	6979      	ldr	r1, [r7, #20]
 800508a:	fab1 f181 	clz	r1, r1
 800508e:	b2c9      	uxtb	r1, r1
 8005090:	408b      	lsls	r3, r1
 8005092:	495b      	ldr	r1, [pc, #364]	; (8005200 <HAL_RCC_OscConfig+0x298>)
 8005094:	4313      	orrs	r3, r2
 8005096:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005098:	e044      	b.n	8005124 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d02a      	beq.n	80050f8 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050a2:	4b59      	ldr	r3, [pc, #356]	; (8005208 <HAL_RCC_OscConfig+0x2a0>)
 80050a4:	2201      	movs	r2, #1
 80050a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a8:	f7fd fcaa 	bl	8002a00 <HAL_GetTick>
 80050ac:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050b0:	f7fd fca6 	bl	8002a00 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e197      	b.n	80053f2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c2:	4b4f      	ldr	r3, [pc, #316]	; (8005200 <HAL_RCC_OscConfig+0x298>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0f0      	beq.n	80050b0 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050ce:	4b4c      	ldr	r3, [pc, #304]	; (8005200 <HAL_RCC_OscConfig+0x298>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	21f8      	movs	r1, #248	; 0xf8
 80050dc:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050de:	6939      	ldr	r1, [r7, #16]
 80050e0:	fa91 f1a1 	rbit	r1, r1
 80050e4:	60f9      	str	r1, [r7, #12]
  return result;
 80050e6:	68f9      	ldr	r1, [r7, #12]
 80050e8:	fab1 f181 	clz	r1, r1
 80050ec:	b2c9      	uxtb	r1, r1
 80050ee:	408b      	lsls	r3, r1
 80050f0:	4943      	ldr	r1, [pc, #268]	; (8005200 <HAL_RCC_OscConfig+0x298>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	600b      	str	r3, [r1, #0]
 80050f6:	e015      	b.n	8005124 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050f8:	4b43      	ldr	r3, [pc, #268]	; (8005208 <HAL_RCC_OscConfig+0x2a0>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fe:	f7fd fc7f 	bl	8002a00 <HAL_GetTick>
 8005102:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005104:	e008      	b.n	8005118 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005106:	f7fd fc7b 	bl	8002a00 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e16c      	b.n	80053f2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005118:	4b39      	ldr	r3, [pc, #228]	; (8005200 <HAL_RCC_OscConfig+0x298>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1f0      	bne.n	8005106 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0308 	and.w	r3, r3, #8
 800512c:	2b00      	cmp	r3, #0
 800512e:	d030      	beq.n	8005192 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d016      	beq.n	8005166 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005138:	4b34      	ldr	r3, [pc, #208]	; (800520c <HAL_RCC_OscConfig+0x2a4>)
 800513a:	2201      	movs	r2, #1
 800513c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800513e:	f7fd fc5f 	bl	8002a00 <HAL_GetTick>
 8005142:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005144:	e008      	b.n	8005158 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005146:	f7fd fc5b 	bl	8002a00 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e14c      	b.n	80053f2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005158:	4b29      	ldr	r3, [pc, #164]	; (8005200 <HAL_RCC_OscConfig+0x298>)
 800515a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800515c:	f003 0302 	and.w	r3, r3, #2
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0f0      	beq.n	8005146 <HAL_RCC_OscConfig+0x1de>
 8005164:	e015      	b.n	8005192 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005166:	4b29      	ldr	r3, [pc, #164]	; (800520c <HAL_RCC_OscConfig+0x2a4>)
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800516c:	f7fd fc48 	bl	8002a00 <HAL_GetTick>
 8005170:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005174:	f7fd fc44 	bl	8002a00 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b02      	cmp	r3, #2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e135      	b.n	80053f2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005186:	4b1e      	ldr	r3, [pc, #120]	; (8005200 <HAL_RCC_OscConfig+0x298>)
 8005188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1f0      	bne.n	8005174 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0304 	and.w	r3, r3, #4
 800519a:	2b00      	cmp	r3, #0
 800519c:	f000 8087 	beq.w	80052ae <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051a0:	2300      	movs	r3, #0
 80051a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051a6:	4b16      	ldr	r3, [pc, #88]	; (8005200 <HAL_RCC_OscConfig+0x298>)
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d110      	bne.n	80051d4 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051b2:	2300      	movs	r3, #0
 80051b4:	60bb      	str	r3, [r7, #8]
 80051b6:	4b12      	ldr	r3, [pc, #72]	; (8005200 <HAL_RCC_OscConfig+0x298>)
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	4a11      	ldr	r2, [pc, #68]	; (8005200 <HAL_RCC_OscConfig+0x298>)
 80051bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c0:	6413      	str	r3, [r2, #64]	; 0x40
 80051c2:	4b0f      	ldr	r3, [pc, #60]	; (8005200 <HAL_RCC_OscConfig+0x298>)
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ca:	60bb      	str	r3, [r7, #8]
 80051cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ce:	2301      	movs	r3, #1
 80051d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80051d4:	4b0e      	ldr	r3, [pc, #56]	; (8005210 <HAL_RCC_OscConfig+0x2a8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a0d      	ldr	r2, [pc, #52]	; (8005210 <HAL_RCC_OscConfig+0x2a8>)
 80051da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051de:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e0:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <HAL_RCC_OscConfig+0x2a8>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d122      	bne.n	8005232 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ec:	4b08      	ldr	r3, [pc, #32]	; (8005210 <HAL_RCC_OscConfig+0x2a8>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a07      	ldr	r2, [pc, #28]	; (8005210 <HAL_RCC_OscConfig+0x2a8>)
 80051f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051f8:	f7fd fc02 	bl	8002a00 <HAL_GetTick>
 80051fc:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051fe:	e012      	b.n	8005226 <HAL_RCC_OscConfig+0x2be>
 8005200:	40023800 	.word	0x40023800
 8005204:	40023802 	.word	0x40023802
 8005208:	42470000 	.word	0x42470000
 800520c:	42470e80 	.word	0x42470e80
 8005210:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005214:	f7fd fbf4 	bl	8002a00 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	6a3b      	ldr	r3, [r7, #32]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e0e5      	b.n	80053f2 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005226:	4b75      	ldr	r3, [pc, #468]	; (80053fc <HAL_RCC_OscConfig+0x494>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0f0      	beq.n	8005214 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689a      	ldr	r2, [r3, #8]
 8005236:	4b72      	ldr	r3, [pc, #456]	; (8005400 <HAL_RCC_OscConfig+0x498>)
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d015      	beq.n	8005270 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005244:	f7fd fbdc 	bl	8002a00 <HAL_GetTick>
 8005248:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800524a:	e00a      	b.n	8005262 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800524c:	f7fd fbd8 	bl	8002a00 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	f241 3288 	movw	r2, #5000	; 0x1388
 800525a:	4293      	cmp	r3, r2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e0c7      	b.n	80053f2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005262:	4b68      	ldr	r3, [pc, #416]	; (8005404 <HAL_RCC_OscConfig+0x49c>)
 8005264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0ee      	beq.n	800524c <HAL_RCC_OscConfig+0x2e4>
 800526e:	e014      	b.n	800529a <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005270:	f7fd fbc6 	bl	8002a00 <HAL_GetTick>
 8005274:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005276:	e00a      	b.n	800528e <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005278:	f7fd fbc2 	bl	8002a00 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	f241 3288 	movw	r2, #5000	; 0x1388
 8005286:	4293      	cmp	r3, r2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e0b1      	b.n	80053f2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800528e:	4b5d      	ldr	r3, [pc, #372]	; (8005404 <HAL_RCC_OscConfig+0x49c>)
 8005290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1ee      	bne.n	8005278 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800529a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d105      	bne.n	80052ae <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052a2:	4b58      	ldr	r3, [pc, #352]	; (8005404 <HAL_RCC_OscConfig+0x49c>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	4a57      	ldr	r2, [pc, #348]	; (8005404 <HAL_RCC_OscConfig+0x49c>)
 80052a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 809c 	beq.w	80053f0 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052b8:	4b52      	ldr	r3, [pc, #328]	; (8005404 <HAL_RCC_OscConfig+0x49c>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 030c 	and.w	r3, r3, #12
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d061      	beq.n	8005388 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d146      	bne.n	800535a <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052cc:	4b4e      	ldr	r3, [pc, #312]	; (8005408 <HAL_RCC_OscConfig+0x4a0>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d2:	f7fd fb95 	bl	8002a00 <HAL_GetTick>
 80052d6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d8:	e008      	b.n	80052ec <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052da:	f7fd fb91 	bl	8002a00 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	2b64      	cmp	r3, #100	; 0x64
 80052e6:	d901      	bls.n	80052ec <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e082      	b.n	80053f2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ec:	4b45      	ldr	r3, [pc, #276]	; (8005404 <HAL_RCC_OscConfig+0x49c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1f0      	bne.n	80052da <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052f8:	4b42      	ldr	r3, [pc, #264]	; (8005404 <HAL_RCC_OscConfig+0x49c>)
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	4b43      	ldr	r3, [pc, #268]	; (800540c <HAL_RCC_OscConfig+0x4a4>)
 80052fe:	4013      	ands	r3, r2
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	69d1      	ldr	r1, [r2, #28]
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6a12      	ldr	r2, [r2, #32]
 8005308:	4311      	orrs	r1, r2
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800530e:	0192      	lsls	r2, r2, #6
 8005310:	4311      	orrs	r1, r2
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005316:	0612      	lsls	r2, r2, #24
 8005318:	4311      	orrs	r1, r2
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800531e:	0852      	lsrs	r2, r2, #1
 8005320:	3a01      	subs	r2, #1
 8005322:	0412      	lsls	r2, r2, #16
 8005324:	430a      	orrs	r2, r1
 8005326:	4937      	ldr	r1, [pc, #220]	; (8005404 <HAL_RCC_OscConfig+0x49c>)
 8005328:	4313      	orrs	r3, r2
 800532a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800532c:	4b36      	ldr	r3, [pc, #216]	; (8005408 <HAL_RCC_OscConfig+0x4a0>)
 800532e:	2201      	movs	r2, #1
 8005330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005332:	f7fd fb65 	bl	8002a00 <HAL_GetTick>
 8005336:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005338:	e008      	b.n	800534c <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800533a:	f7fd fb61 	bl	8002a00 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b64      	cmp	r3, #100	; 0x64
 8005346:	d901      	bls.n	800534c <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e052      	b.n	80053f2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800534c:	4b2d      	ldr	r3, [pc, #180]	; (8005404 <HAL_RCC_OscConfig+0x49c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0f0      	beq.n	800533a <HAL_RCC_OscConfig+0x3d2>
 8005358:	e04a      	b.n	80053f0 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800535a:	4b2b      	ldr	r3, [pc, #172]	; (8005408 <HAL_RCC_OscConfig+0x4a0>)
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005360:	f7fd fb4e 	bl	8002a00 <HAL_GetTick>
 8005364:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005366:	e008      	b.n	800537a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005368:	f7fd fb4a 	bl	8002a00 <HAL_GetTick>
 800536c:	4602      	mov	r2, r0
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	2b64      	cmp	r3, #100	; 0x64
 8005374:	d901      	bls.n	800537a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e03b      	b.n	80053f2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800537a:	4b22      	ldr	r3, [pc, #136]	; (8005404 <HAL_RCC_OscConfig+0x49c>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1f0      	bne.n	8005368 <HAL_RCC_OscConfig+0x400>
 8005386:	e033      	b.n	80053f0 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e02e      	b.n	80053f2 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8005394:	4b1b      	ldr	r3, [pc, #108]	; (8005404 <HAL_RCC_OscConfig+0x49c>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d121      	bne.n	80053ec <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d11a      	bne.n	80053ec <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053b6:	69fa      	ldr	r2, [r7, #28]
 80053b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053bc:	4013      	ands	r3, r2
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053c2:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d111      	bne.n	80053ec <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d2:	085b      	lsrs	r3, r3, #1
 80053d4:	3b01      	subs	r3, #1
 80053d6:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053d8:	429a      	cmp	r2, r3
 80053da:	d107      	bne.n	80053ec <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e6:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d001      	beq.n	80053f0 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3728      	adds	r7, #40	; 0x28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	40007000 	.word	0x40007000
 8005400:	40023870 	.word	0x40023870
 8005404:	40023800 	.word	0x40023800
 8005408:	42470060 	.word	0x42470060
 800540c:	f0bc8000 	.word	0xf0bc8000

08005410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e0d2      	b.n	80055ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005424:	4b6b      	ldr	r3, [pc, #428]	; (80055d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 030f 	and.w	r3, r3, #15
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	429a      	cmp	r2, r3
 8005430:	d90c      	bls.n	800544c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005432:	4b68      	ldr	r3, [pc, #416]	; (80055d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800543a:	4b66      	ldr	r3, [pc, #408]	; (80055d4 <HAL_RCC_ClockConfig+0x1c4>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d001      	beq.n	800544c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e0be      	b.n	80055ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d020      	beq.n	800549a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	d005      	beq.n	8005470 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005464:	4b5c      	ldr	r3, [pc, #368]	; (80055d8 <HAL_RCC_ClockConfig+0x1c8>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	4a5b      	ldr	r2, [pc, #364]	; (80055d8 <HAL_RCC_ClockConfig+0x1c8>)
 800546a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800546e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0308 	and.w	r3, r3, #8
 8005478:	2b00      	cmp	r3, #0
 800547a:	d005      	beq.n	8005488 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800547c:	4b56      	ldr	r3, [pc, #344]	; (80055d8 <HAL_RCC_ClockConfig+0x1c8>)
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	4a55      	ldr	r2, [pc, #340]	; (80055d8 <HAL_RCC_ClockConfig+0x1c8>)
 8005482:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005486:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005488:	4b53      	ldr	r3, [pc, #332]	; (80055d8 <HAL_RCC_ClockConfig+0x1c8>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	4950      	ldr	r1, [pc, #320]	; (80055d8 <HAL_RCC_ClockConfig+0x1c8>)
 8005496:	4313      	orrs	r3, r2
 8005498:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d040      	beq.n	8005528 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d107      	bne.n	80054be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ae:	4b4a      	ldr	r3, [pc, #296]	; (80055d8 <HAL_RCC_ClockConfig+0x1c8>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d115      	bne.n	80054e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e085      	b.n	80055ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d107      	bne.n	80054d6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054c6:	4b44      	ldr	r3, [pc, #272]	; (80055d8 <HAL_RCC_ClockConfig+0x1c8>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d109      	bne.n	80054e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e079      	b.n	80055ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d6:	4b40      	ldr	r3, [pc, #256]	; (80055d8 <HAL_RCC_ClockConfig+0x1c8>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e071      	b.n	80055ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054e6:	4b3c      	ldr	r3, [pc, #240]	; (80055d8 <HAL_RCC_ClockConfig+0x1c8>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f023 0203 	bic.w	r2, r3, #3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	4939      	ldr	r1, [pc, #228]	; (80055d8 <HAL_RCC_ClockConfig+0x1c8>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054f8:	f7fd fa82 	bl	8002a00 <HAL_GetTick>
 80054fc:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054fe:	e00a      	b.n	8005516 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005500:	f7fd fa7e 	bl	8002a00 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	f241 3288 	movw	r2, #5000	; 0x1388
 800550e:	4293      	cmp	r3, r2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e059      	b.n	80055ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005516:	4b30      	ldr	r3, [pc, #192]	; (80055d8 <HAL_RCC_ClockConfig+0x1c8>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 020c 	and.w	r2, r3, #12
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	429a      	cmp	r2, r3
 8005526:	d1eb      	bne.n	8005500 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005528:	4b2a      	ldr	r3, [pc, #168]	; (80055d4 <HAL_RCC_ClockConfig+0x1c4>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d20c      	bcs.n	8005550 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005536:	4b27      	ldr	r3, [pc, #156]	; (80055d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800553e:	4b25      	ldr	r3, [pc, #148]	; (80055d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	429a      	cmp	r2, r3
 800554a:	d001      	beq.n	8005550 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e03c      	b.n	80055ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0304 	and.w	r3, r3, #4
 8005558:	2b00      	cmp	r3, #0
 800555a:	d008      	beq.n	800556e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800555c:	4b1e      	ldr	r3, [pc, #120]	; (80055d8 <HAL_RCC_ClockConfig+0x1c8>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	491b      	ldr	r1, [pc, #108]	; (80055d8 <HAL_RCC_ClockConfig+0x1c8>)
 800556a:	4313      	orrs	r3, r2
 800556c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b00      	cmp	r3, #0
 8005578:	d009      	beq.n	800558e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800557a:	4b17      	ldr	r3, [pc, #92]	; (80055d8 <HAL_RCC_ClockConfig+0x1c8>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	4913      	ldr	r1, [pc, #76]	; (80055d8 <HAL_RCC_ClockConfig+0x1c8>)
 800558a:	4313      	orrs	r3, r2
 800558c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800558e:	f000 f82b 	bl	80055e8 <HAL_RCC_GetSysClockFreq>
 8005592:	4601      	mov	r1, r0
 8005594:	4b10      	ldr	r3, [pc, #64]	; (80055d8 <HAL_RCC_ClockConfig+0x1c8>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800559c:	22f0      	movs	r2, #240	; 0xf0
 800559e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	fa92 f2a2 	rbit	r2, r2
 80055a6:	60fa      	str	r2, [r7, #12]
  return result;
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	fab2 f282 	clz	r2, r2
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	40d3      	lsrs	r3, r2
 80055b2:	4a0a      	ldr	r2, [pc, #40]	; (80055dc <HAL_RCC_ClockConfig+0x1cc>)
 80055b4:	5cd3      	ldrb	r3, [r2, r3]
 80055b6:	fa21 f303 	lsr.w	r3, r1, r3
 80055ba:	4a09      	ldr	r2, [pc, #36]	; (80055e0 <HAL_RCC_ClockConfig+0x1d0>)
 80055bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80055be:	4b09      	ldr	r3, [pc, #36]	; (80055e4 <HAL_RCC_ClockConfig+0x1d4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fd f9da 	bl	800297c <HAL_InitTick>

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	40023c00 	.word	0x40023c00
 80055d8:	40023800 	.word	0x40023800
 80055dc:	0800d46c 	.word	0x0800d46c
 80055e0:	20000064 	.word	0x20000064
 80055e4:	20000068 	.word	0x20000068

080055e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055ec:	b090      	sub	sp, #64	; 0x40
 80055ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	637b      	str	r3, [r7, #52]	; 0x34
 80055f4:	2300      	movs	r3, #0
 80055f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055f8:	2300      	movs	r3, #0
 80055fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005600:	4b59      	ldr	r3, [pc, #356]	; (8005768 <HAL_RCC_GetSysClockFreq+0x180>)
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f003 030c 	and.w	r3, r3, #12
 8005608:	2b08      	cmp	r3, #8
 800560a:	d00d      	beq.n	8005628 <HAL_RCC_GetSysClockFreq+0x40>
 800560c:	2b08      	cmp	r3, #8
 800560e:	f200 80a2 	bhi.w	8005756 <HAL_RCC_GetSysClockFreq+0x16e>
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <HAL_RCC_GetSysClockFreq+0x34>
 8005616:	2b04      	cmp	r3, #4
 8005618:	d003      	beq.n	8005622 <HAL_RCC_GetSysClockFreq+0x3a>
 800561a:	e09c      	b.n	8005756 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800561c:	4b53      	ldr	r3, [pc, #332]	; (800576c <HAL_RCC_GetSysClockFreq+0x184>)
 800561e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005620:	e09c      	b.n	800575c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005622:	4b53      	ldr	r3, [pc, #332]	; (8005770 <HAL_RCC_GetSysClockFreq+0x188>)
 8005624:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005626:	e099      	b.n	800575c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005628:	4b4f      	ldr	r3, [pc, #316]	; (8005768 <HAL_RCC_GetSysClockFreq+0x180>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005630:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005632:	4b4d      	ldr	r3, [pc, #308]	; (8005768 <HAL_RCC_GetSysClockFreq+0x180>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d027      	beq.n	800568e <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800563e:	4b4a      	ldr	r3, [pc, #296]	; (8005768 <HAL_RCC_GetSysClockFreq+0x180>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	099b      	lsrs	r3, r3, #6
 8005644:	2200      	movs	r2, #0
 8005646:	623b      	str	r3, [r7, #32]
 8005648:	627a      	str	r2, [r7, #36]	; 0x24
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005650:	2100      	movs	r1, #0
 8005652:	4b47      	ldr	r3, [pc, #284]	; (8005770 <HAL_RCC_GetSysClockFreq+0x188>)
 8005654:	fb03 f201 	mul.w	r2, r3, r1
 8005658:	2300      	movs	r3, #0
 800565a:	fb00 f303 	mul.w	r3, r0, r3
 800565e:	4413      	add	r3, r2
 8005660:	4a43      	ldr	r2, [pc, #268]	; (8005770 <HAL_RCC_GetSysClockFreq+0x188>)
 8005662:	fba0 2102 	umull	r2, r1, r0, r2
 8005666:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005668:	62ba      	str	r2, [r7, #40]	; 0x28
 800566a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800566c:	4413      	add	r3, r2
 800566e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005672:	2200      	movs	r2, #0
 8005674:	61bb      	str	r3, [r7, #24]
 8005676:	61fa      	str	r2, [r7, #28]
 8005678:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800567c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005680:	f7fb fa5e 	bl	8000b40 <__aeabi_uldivmod>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4613      	mov	r3, r2
 800568a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800568c:	e055      	b.n	800573a <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800568e:	4b36      	ldr	r3, [pc, #216]	; (8005768 <HAL_RCC_GetSysClockFreq+0x180>)
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	099b      	lsrs	r3, r3, #6
 8005694:	2200      	movs	r2, #0
 8005696:	613b      	str	r3, [r7, #16]
 8005698:	617a      	str	r2, [r7, #20]
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80056a0:	f04f 0b00 	mov.w	fp, #0
 80056a4:	4652      	mov	r2, sl
 80056a6:	465b      	mov	r3, fp
 80056a8:	f04f 0000 	mov.w	r0, #0
 80056ac:	f04f 0100 	mov.w	r1, #0
 80056b0:	0159      	lsls	r1, r3, #5
 80056b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056b6:	0150      	lsls	r0, r2, #5
 80056b8:	4602      	mov	r2, r0
 80056ba:	460b      	mov	r3, r1
 80056bc:	ebb2 080a 	subs.w	r8, r2, sl
 80056c0:	eb63 090b 	sbc.w	r9, r3, fp
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80056d0:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80056d4:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80056d8:	ebb2 0408 	subs.w	r4, r2, r8
 80056dc:	eb63 0509 	sbc.w	r5, r3, r9
 80056e0:	f04f 0200 	mov.w	r2, #0
 80056e4:	f04f 0300 	mov.w	r3, #0
 80056e8:	00eb      	lsls	r3, r5, #3
 80056ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056ee:	00e2      	lsls	r2, r4, #3
 80056f0:	4614      	mov	r4, r2
 80056f2:	461d      	mov	r5, r3
 80056f4:	eb14 030a 	adds.w	r3, r4, sl
 80056f8:	603b      	str	r3, [r7, #0]
 80056fa:	eb45 030b 	adc.w	r3, r5, fp
 80056fe:	607b      	str	r3, [r7, #4]
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	e9d7 4500 	ldrd	r4, r5, [r7]
 800570c:	4629      	mov	r1, r5
 800570e:	028b      	lsls	r3, r1, #10
 8005710:	4620      	mov	r0, r4
 8005712:	4629      	mov	r1, r5
 8005714:	4604      	mov	r4, r0
 8005716:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800571a:	4601      	mov	r1, r0
 800571c:	028a      	lsls	r2, r1, #10
 800571e:	4610      	mov	r0, r2
 8005720:	4619      	mov	r1, r3
 8005722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005724:	2200      	movs	r2, #0
 8005726:	60bb      	str	r3, [r7, #8]
 8005728:	60fa      	str	r2, [r7, #12]
 800572a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800572e:	f7fb fa07 	bl	8000b40 <__aeabi_uldivmod>
 8005732:	4602      	mov	r2, r0
 8005734:	460b      	mov	r3, r1
 8005736:	4613      	mov	r3, r2
 8005738:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800573a:	4b0b      	ldr	r3, [pc, #44]	; (8005768 <HAL_RCC_GetSysClockFreq+0x180>)
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	0c1b      	lsrs	r3, r3, #16
 8005740:	f003 0303 	and.w	r3, r3, #3
 8005744:	3301      	adds	r3, #1
 8005746:	005b      	lsls	r3, r3, #1
 8005748:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800574a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005752:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005754:	e002      	b.n	800575c <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005756:	4b05      	ldr	r3, [pc, #20]	; (800576c <HAL_RCC_GetSysClockFreq+0x184>)
 8005758:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800575a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800575c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800575e:	4618      	mov	r0, r3
 8005760:	3740      	adds	r7, #64	; 0x40
 8005762:	46bd      	mov	sp, r7
 8005764:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005768:	40023800 	.word	0x40023800
 800576c:	00f42400 	.word	0x00f42400
 8005770:	017d7840 	.word	0x017d7840

08005774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005778:	4b02      	ldr	r3, [pc, #8]	; (8005784 <HAL_RCC_GetHCLKFreq+0x10>)
 800577a:	681b      	ldr	r3, [r3, #0]
}
 800577c:	4618      	mov	r0, r3
 800577e:	46bd      	mov	sp, r7
 8005780:	bc80      	pop	{r7}
 8005782:	4770      	bx	lr
 8005784:	20000064 	.word	0x20000064

08005788 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e07b      	b.n	8005892 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d108      	bne.n	80057b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057aa:	d009      	beq.n	80057c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	61da      	str	r2, [r3, #28]
 80057b2:	e005      	b.n	80057c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d106      	bne.n	80057e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7fc fe82 	bl	80024e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2202      	movs	r2, #2
 80057e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005808:	431a      	orrs	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005812:	431a      	orrs	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	431a      	orrs	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	431a      	orrs	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005830:	431a      	orrs	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800583a:	431a      	orrs	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005844:	ea42 0103 	orr.w	r1, r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	0c1b      	lsrs	r3, r3, #16
 800585e:	f003 0104 	and.w	r1, r3, #4
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	f003 0210 	and.w	r2, r3, #16
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	69da      	ldr	r2, [r3, #28]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005880:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b088      	sub	sp, #32
 800589e:	af00      	add	r7, sp, #0
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	603b      	str	r3, [r7, #0]
 80058a6:	4613      	mov	r3, r2
 80058a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_SPI_Transmit+0x22>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e12d      	b.n	8005b18 <HAL_SPI_Transmit+0x27e>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058c4:	f7fd f89c 	bl	8002a00 <HAL_GetTick>
 80058c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d002      	beq.n	80058e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80058da:	2302      	movs	r3, #2
 80058dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058de:	e116      	b.n	8005b0e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <HAL_SPI_Transmit+0x52>
 80058e6:	88fb      	ldrh	r3, [r7, #6]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d102      	bne.n	80058f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 80058f0:	e10d      	b.n	8005b0e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2203      	movs	r2, #3
 80058f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	68ba      	ldr	r2, [r7, #8]
 8005904:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	88fa      	ldrh	r2, [r7, #6]
 800590a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	88fa      	ldrh	r2, [r7, #6]
 8005910:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2200      	movs	r2, #0
 800591c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005938:	d10f      	bne.n	800595a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005948:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005958:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005964:	2b40      	cmp	r3, #64	; 0x40
 8005966:	d007      	beq.n	8005978 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005976:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005980:	d14f      	bne.n	8005a22 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <HAL_SPI_Transmit+0xf6>
 800598a:	8afb      	ldrh	r3, [r7, #22]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d142      	bne.n	8005a16 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005994:	881a      	ldrh	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a0:	1c9a      	adds	r2, r3, #2
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	3b01      	subs	r3, #1
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80059b4:	e02f      	b.n	8005a16 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d112      	bne.n	80059ea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c8:	881a      	ldrh	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d4:	1c9a      	adds	r2, r3, #2
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80059e8:	e015      	b.n	8005a16 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059ea:	f7fd f809 	bl	8002a00 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d803      	bhi.n	8005a02 <HAL_SPI_Transmit+0x168>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a00:	d102      	bne.n	8005a08 <HAL_SPI_Transmit+0x16e>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d106      	bne.n	8005a16 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005a14:	e07b      	b.n	8005b0e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1ca      	bne.n	80059b6 <HAL_SPI_Transmit+0x11c>
 8005a20:	e050      	b.n	8005ac4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <HAL_SPI_Transmit+0x196>
 8005a2a:	8afb      	ldrh	r3, [r7, #22]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d144      	bne.n	8005aba <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	330c      	adds	r3, #12
 8005a3a:	7812      	ldrb	r2, [r2, #0]
 8005a3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a42:	1c5a      	adds	r2, r3, #1
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005a56:	e030      	b.n	8005aba <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d113      	bne.n	8005a8e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	330c      	adds	r3, #12
 8005a70:	7812      	ldrb	r2, [r2, #0]
 8005a72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	3b01      	subs	r3, #1
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a8c:	e015      	b.n	8005aba <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a8e:	f7fc ffb7 	bl	8002a00 <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	683a      	ldr	r2, [r7, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d803      	bhi.n	8005aa6 <HAL_SPI_Transmit+0x20c>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa4:	d102      	bne.n	8005aac <HAL_SPI_Transmit+0x212>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d106      	bne.n	8005aba <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005ab8:	e029      	b.n	8005b0e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1c9      	bne.n	8005a58 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ac4:	69ba      	ldr	r2, [r7, #24]
 8005ac6:	6839      	ldr	r1, [r7, #0]
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f000 fbae 	bl	800622a <SPI_EndRxTxTransaction>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10a      	bne.n	8005af8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	613b      	str	r3, [r7, #16]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	613b      	str	r3, [r7, #16]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	613b      	str	r3, [r7, #16]
 8005af6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	77fb      	strb	r3, [r7, #31]
 8005b04:	e003      	b.n	8005b0e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b16:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3720      	adds	r7, #32
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b088      	sub	sp, #32
 8005b24:	af02      	add	r7, sp, #8
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	603b      	str	r3, [r7, #0]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d002      	beq.n	8005b46 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005b40:	2302      	movs	r3, #2
 8005b42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005b44:	e0fb      	b.n	8005d3e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b4e:	d112      	bne.n	8005b76 <HAL_SPI_Receive+0x56>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10e      	bne.n	8005b76 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2204      	movs	r2, #4
 8005b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b60:	88fa      	ldrh	r2, [r7, #6]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	4613      	mov	r3, r2
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	68b9      	ldr	r1, [r7, #8]
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 f8ef 	bl	8005d50 <HAL_SPI_TransmitReceive>
 8005b72:	4603      	mov	r3, r0
 8005b74:	e0e8      	b.n	8005d48 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d101      	bne.n	8005b84 <HAL_SPI_Receive+0x64>
 8005b80:	2302      	movs	r3, #2
 8005b82:	e0e1      	b.n	8005d48 <HAL_SPI_Receive+0x228>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b8c:	f7fc ff38 	bl	8002a00 <HAL_GetTick>
 8005b90:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <HAL_SPI_Receive+0x7e>
 8005b98:	88fb      	ldrh	r3, [r7, #6]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d102      	bne.n	8005ba4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ba2:	e0cc      	b.n	8005d3e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2204      	movs	r2, #4
 8005ba8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	88fa      	ldrh	r2, [r7, #6]
 8005bbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	88fa      	ldrh	r2, [r7, #6]
 8005bc2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bea:	d10f      	bne.n	8005c0c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bfa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c0a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c16:	2b40      	cmp	r3, #64	; 0x40
 8005c18:	d007      	beq.n	8005c2a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c28:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d16a      	bne.n	8005d08 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005c32:	e032      	b.n	8005c9a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d115      	bne.n	8005c6e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f103 020c 	add.w	r2, r3, #12
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c4e:	7812      	ldrb	r2, [r2, #0]
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c6c:	e015      	b.n	8005c9a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c6e:	f7fc fec7 	bl	8002a00 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	683a      	ldr	r2, [r7, #0]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d803      	bhi.n	8005c86 <HAL_SPI_Receive+0x166>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c84:	d102      	bne.n	8005c8c <HAL_SPI_Receive+0x16c>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d106      	bne.n	8005c9a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005c98:	e051      	b.n	8005d3e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1c7      	bne.n	8005c34 <HAL_SPI_Receive+0x114>
 8005ca4:	e035      	b.n	8005d12 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d113      	bne.n	8005cdc <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbe:	b292      	uxth	r2, r2
 8005cc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc6:	1c9a      	adds	r2, r3, #2
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	3b01      	subs	r3, #1
 8005cd4:	b29a      	uxth	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cda:	e015      	b.n	8005d08 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cdc:	f7fc fe90 	bl	8002a00 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d803      	bhi.n	8005cf4 <HAL_SPI_Receive+0x1d4>
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf2:	d102      	bne.n	8005cfa <HAL_SPI_Receive+0x1da>
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005d06:	e01a      	b.n	8005d3e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1c9      	bne.n	8005ca6 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	6839      	ldr	r1, [r7, #0]
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f000 fa52 	bl	80061c0 <SPI_EndRxTransaction>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d002      	beq.n	8005d28 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2220      	movs	r2, #32
 8005d26:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	75fb      	strb	r3, [r7, #23]
 8005d34:	e003      	b.n	8005d3e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3718      	adds	r7, #24
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08c      	sub	sp, #48	; 0x30
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
 8005d5c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d101      	bne.n	8005d76 <HAL_SPI_TransmitReceive+0x26>
 8005d72:	2302      	movs	r3, #2
 8005d74:	e198      	b.n	80060a8 <HAL_SPI_TransmitReceive+0x358>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d7e:	f7fc fe3f 	bl	8002a00 <HAL_GetTick>
 8005d82:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005d94:	887b      	ldrh	r3, [r7, #2]
 8005d96:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d00f      	beq.n	8005dc0 <HAL_SPI_TransmitReceive+0x70>
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005da6:	d107      	bne.n	8005db8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d103      	bne.n	8005db8 <HAL_SPI_TransmitReceive+0x68>
 8005db0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d003      	beq.n	8005dc0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005db8:	2302      	movs	r3, #2
 8005dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005dbe:	e16d      	b.n	800609c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d005      	beq.n	8005dd2 <HAL_SPI_TransmitReceive+0x82>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <HAL_SPI_TransmitReceive+0x82>
 8005dcc:	887b      	ldrh	r3, [r7, #2]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d103      	bne.n	8005dda <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005dd8:	e160      	b.n	800609c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	d003      	beq.n	8005dee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2205      	movs	r2, #5
 8005dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	887a      	ldrh	r2, [r7, #2]
 8005dfe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	887a      	ldrh	r2, [r7, #2]
 8005e04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	887a      	ldrh	r2, [r7, #2]
 8005e10:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	887a      	ldrh	r2, [r7, #2]
 8005e16:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2e:	2b40      	cmp	r3, #64	; 0x40
 8005e30:	d007      	beq.n	8005e42 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e4a:	d17c      	bne.n	8005f46 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <HAL_SPI_TransmitReceive+0x10a>
 8005e54:	8b7b      	ldrh	r3, [r7, #26]
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d16a      	bne.n	8005f30 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5e:	881a      	ldrh	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6a:	1c9a      	adds	r2, r3, #2
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	3b01      	subs	r3, #1
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e7e:	e057      	b.n	8005f30 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d11b      	bne.n	8005ec6 <HAL_SPI_TransmitReceive+0x176>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d016      	beq.n	8005ec6 <HAL_SPI_TransmitReceive+0x176>
 8005e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d113      	bne.n	8005ec6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea2:	881a      	ldrh	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eae:	1c9a      	adds	r2, r3, #2
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f003 0301 	and.w	r3, r3, #1
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d119      	bne.n	8005f08 <HAL_SPI_TransmitReceive+0x1b8>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d014      	beq.n	8005f08 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee8:	b292      	uxth	r2, r2
 8005eea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef0:	1c9a      	adds	r2, r3, #2
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	3b01      	subs	r3, #1
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f04:	2301      	movs	r3, #1
 8005f06:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f08:	f7fc fd7a 	bl	8002a00 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d80b      	bhi.n	8005f30 <HAL_SPI_TransmitReceive+0x1e0>
 8005f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1e:	d007      	beq.n	8005f30 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005f2e:	e0b5      	b.n	800609c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1a2      	bne.n	8005e80 <HAL_SPI_TransmitReceive+0x130>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d19d      	bne.n	8005e80 <HAL_SPI_TransmitReceive+0x130>
 8005f44:	e080      	b.n	8006048 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <HAL_SPI_TransmitReceive+0x204>
 8005f4e:	8b7b      	ldrh	r3, [r7, #26]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d16f      	bne.n	8006034 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	330c      	adds	r3, #12
 8005f5e:	7812      	ldrb	r2, [r2, #0]
 8005f60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3b01      	subs	r3, #1
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f7a:	e05b      	b.n	8006034 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d11c      	bne.n	8005fc4 <HAL_SPI_TransmitReceive+0x274>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d017      	beq.n	8005fc4 <HAL_SPI_TransmitReceive+0x274>
 8005f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d114      	bne.n	8005fc4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	330c      	adds	r3, #12
 8005fa4:	7812      	ldrb	r2, [r2, #0]
 8005fa6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d119      	bne.n	8006006 <HAL_SPI_TransmitReceive+0x2b6>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d014      	beq.n	8006006 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	3b01      	subs	r3, #1
 8005ffc:	b29a      	uxth	r2, r3
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006002:	2301      	movs	r3, #1
 8006004:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006006:	f7fc fcfb 	bl	8002a00 <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006012:	429a      	cmp	r2, r3
 8006014:	d803      	bhi.n	800601e <HAL_SPI_TransmitReceive+0x2ce>
 8006016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601c:	d102      	bne.n	8006024 <HAL_SPI_TransmitReceive+0x2d4>
 800601e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006020:	2b00      	cmp	r3, #0
 8006022:	d107      	bne.n	8006034 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006032:	e033      	b.n	800609c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006038:	b29b      	uxth	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d19e      	bne.n	8005f7c <HAL_SPI_TransmitReceive+0x22c>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006042:	b29b      	uxth	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d199      	bne.n	8005f7c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 f8ec 	bl	800622a <SPI_EndRxTxTransaction>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d006      	beq.n	8006066 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2220      	movs	r2, #32
 8006062:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006064:	e01a      	b.n	800609c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10a      	bne.n	8006084 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800606e:	2300      	movs	r3, #0
 8006070:	617b      	str	r3, [r7, #20]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	617b      	str	r3, [r7, #20]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	617b      	str	r3, [r7, #20]
 8006082:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006088:	2b00      	cmp	r3, #0
 800608a:	d003      	beq.n	8006094 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006092:	e003      	b.n	800609c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80060a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3730      	adds	r7, #48	; 0x30
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b088      	sub	sp, #32
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	603b      	str	r3, [r7, #0]
 80060bc:	4613      	mov	r3, r2
 80060be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80060c0:	f7fc fc9e 	bl	8002a00 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	1a9b      	subs	r3, r3, r2
 80060ca:	683a      	ldr	r2, [r7, #0]
 80060cc:	4413      	add	r3, r2
 80060ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060d0:	f7fc fc96 	bl	8002a00 <HAL_GetTick>
 80060d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060d6:	4b39      	ldr	r3, [pc, #228]	; (80061bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	015b      	lsls	r3, r3, #5
 80060dc:	0d1b      	lsrs	r3, r3, #20
 80060de:	69fa      	ldr	r2, [r7, #28]
 80060e0:	fb02 f303 	mul.w	r3, r2, r3
 80060e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060e6:	e054      	b.n	8006192 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ee:	d050      	beq.n	8006192 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060f0:	f7fc fc86 	bl	8002a00 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	69fa      	ldr	r2, [r7, #28]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d902      	bls.n	8006106 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d13d      	bne.n	8006182 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006114:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800611e:	d111      	bne.n	8006144 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006128:	d004      	beq.n	8006134 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006132:	d107      	bne.n	8006144 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006142:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800614c:	d10f      	bne.n	800616e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800616c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e017      	b.n	80061b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d101      	bne.n	800618c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	3b01      	subs	r3, #1
 8006190:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	689a      	ldr	r2, [r3, #8]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4013      	ands	r3, r2
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	429a      	cmp	r2, r3
 80061a0:	bf0c      	ite	eq
 80061a2:	2301      	moveq	r3, #1
 80061a4:	2300      	movne	r3, #0
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	461a      	mov	r2, r3
 80061aa:	79fb      	ldrb	r3, [r7, #7]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d19b      	bne.n	80060e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3720      	adds	r7, #32
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	20000064 	.word	0x20000064

080061c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af02      	add	r7, sp, #8
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061d4:	d111      	bne.n	80061fa <SPI_EndRxTransaction+0x3a>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061de:	d004      	beq.n	80061ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061e8:	d107      	bne.n	80061fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061f8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2200      	movs	r2, #0
 8006202:	2180      	movs	r1, #128	; 0x80
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f7ff ff53 	bl	80060b0 <SPI_WaitFlagStateUntilTimeout>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d007      	beq.n	8006220 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006214:	f043 0220 	orr.w	r2, r3, #32
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e000      	b.n	8006222 <SPI_EndRxTransaction+0x62>
  }
  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b086      	sub	sp, #24
 800622e:	af02      	add	r7, sp, #8
 8006230:	60f8      	str	r0, [r7, #12]
 8006232:	60b9      	str	r1, [r7, #8]
 8006234:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	2200      	movs	r2, #0
 800623e:	2180      	movs	r1, #128	; 0x80
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f7ff ff35 	bl	80060b0 <SPI_WaitFlagStateUntilTimeout>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d007      	beq.n	800625c <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006250:	f043 0220 	orr.w	r2, r3, #32
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e000      	b.n	800625e <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}

08006266 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b082      	sub	sp, #8
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e041      	b.n	80062fc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b00      	cmp	r3, #0
 8006282:	d106      	bne.n	8006292 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7fc fb03 	bl	8002898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2202      	movs	r2, #2
 8006296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3304      	adds	r3, #4
 80062a2:	4619      	mov	r1, r3
 80062a4:	4610      	mov	r0, r2
 80062a6:	f000 fa8f 	bl	80067c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2201      	movs	r2, #1
 80062be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b01      	cmp	r3, #1
 8006316:	d001      	beq.n	800631c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e04e      	b.n	80063ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68da      	ldr	r2, [r3, #12]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f042 0201 	orr.w	r2, r2, #1
 8006332:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a22      	ldr	r2, [pc, #136]	; (80063c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d022      	beq.n	8006384 <HAL_TIM_Base_Start_IT+0x80>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006346:	d01d      	beq.n	8006384 <HAL_TIM_Base_Start_IT+0x80>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1e      	ldr	r2, [pc, #120]	; (80063c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d018      	beq.n	8006384 <HAL_TIM_Base_Start_IT+0x80>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a1d      	ldr	r2, [pc, #116]	; (80063cc <HAL_TIM_Base_Start_IT+0xc8>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d013      	beq.n	8006384 <HAL_TIM_Base_Start_IT+0x80>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a1b      	ldr	r2, [pc, #108]	; (80063d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d00e      	beq.n	8006384 <HAL_TIM_Base_Start_IT+0x80>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a1a      	ldr	r2, [pc, #104]	; (80063d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d009      	beq.n	8006384 <HAL_TIM_Base_Start_IT+0x80>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a18      	ldr	r2, [pc, #96]	; (80063d8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d004      	beq.n	8006384 <HAL_TIM_Base_Start_IT+0x80>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a17      	ldr	r2, [pc, #92]	; (80063dc <HAL_TIM_Base_Start_IT+0xd8>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d111      	bne.n	80063a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f003 0307 	and.w	r3, r3, #7
 800638e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2b06      	cmp	r3, #6
 8006394:	d010      	beq.n	80063b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f042 0201 	orr.w	r2, r2, #1
 80063a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a6:	e007      	b.n	80063b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0201 	orr.w	r2, r2, #1
 80063b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	bc80      	pop	{r7}
 80063c2:	4770      	bx	lr
 80063c4:	40010000 	.word	0x40010000
 80063c8:	40000400 	.word	0x40000400
 80063cc:	40000800 	.word	0x40000800
 80063d0:	40000c00 	.word	0x40000c00
 80063d4:	40010400 	.word	0x40010400
 80063d8:	40014000 	.word	0x40014000
 80063dc:	40001800 	.word	0x40001800

080063e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d122      	bne.n	800643c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f003 0302 	and.w	r3, r3, #2
 8006400:	2b02      	cmp	r3, #2
 8006402:	d11b      	bne.n	800643c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f06f 0202 	mvn.w	r2, #2
 800640c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	f003 0303 	and.w	r3, r3, #3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f9b4 	bl	8006790 <HAL_TIM_IC_CaptureCallback>
 8006428:	e005      	b.n	8006436 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f9a7 	bl	800677e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f9b6 	bl	80067a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	f003 0304 	and.w	r3, r3, #4
 8006446:	2b04      	cmp	r3, #4
 8006448:	d122      	bne.n	8006490 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b04      	cmp	r3, #4
 8006456:	d11b      	bne.n	8006490 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f06f 0204 	mvn.w	r2, #4
 8006460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2202      	movs	r2, #2
 8006466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 f98a 	bl	8006790 <HAL_TIM_IC_CaptureCallback>
 800647c:	e005      	b.n	800648a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f97d 	bl	800677e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f98c 	bl	80067a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	f003 0308 	and.w	r3, r3, #8
 800649a:	2b08      	cmp	r3, #8
 800649c:	d122      	bne.n	80064e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f003 0308 	and.w	r3, r3, #8
 80064a8:	2b08      	cmp	r3, #8
 80064aa:	d11b      	bne.n	80064e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f06f 0208 	mvn.w	r2, #8
 80064b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2204      	movs	r2, #4
 80064ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	f003 0303 	and.w	r3, r3, #3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f960 	bl	8006790 <HAL_TIM_IC_CaptureCallback>
 80064d0:	e005      	b.n	80064de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f953 	bl	800677e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f962 	bl	80067a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	f003 0310 	and.w	r3, r3, #16
 80064ee:	2b10      	cmp	r3, #16
 80064f0:	d122      	bne.n	8006538 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f003 0310 	and.w	r3, r3, #16
 80064fc:	2b10      	cmp	r3, #16
 80064fe:	d11b      	bne.n	8006538 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f06f 0210 	mvn.w	r2, #16
 8006508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2208      	movs	r2, #8
 800650e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f936 	bl	8006790 <HAL_TIM_IC_CaptureCallback>
 8006524:	e005      	b.n	8006532 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 f929 	bl	800677e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 f938 	bl	80067a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b01      	cmp	r3, #1
 8006544:	d10e      	bne.n	8006564 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f003 0301 	and.w	r3, r3, #1
 8006550:	2b01      	cmp	r3, #1
 8006552:	d107      	bne.n	8006564 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f06f 0201 	mvn.w	r2, #1
 800655c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7fb f866 	bl	8001630 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656e:	2b80      	cmp	r3, #128	; 0x80
 8006570:	d10e      	bne.n	8006590 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800657c:	2b80      	cmp	r3, #128	; 0x80
 800657e:	d107      	bne.n	8006590 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 fad3 	bl	8006b36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659a:	2b40      	cmp	r3, #64	; 0x40
 800659c:	d10e      	bne.n	80065bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a8:	2b40      	cmp	r3, #64	; 0x40
 80065aa:	d107      	bne.n	80065bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f8fc 	bl	80067b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 0320 	and.w	r3, r3, #32
 80065c6:	2b20      	cmp	r3, #32
 80065c8:	d10e      	bne.n	80065e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f003 0320 	and.w	r3, r3, #32
 80065d4:	2b20      	cmp	r3, #32
 80065d6:	d107      	bne.n	80065e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0220 	mvn.w	r2, #32
 80065e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fa9e 	bl	8006b24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065e8:	bf00      	nop
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065fa:	2300      	movs	r3, #0
 80065fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006604:	2b01      	cmp	r3, #1
 8006606:	d101      	bne.n	800660c <HAL_TIM_ConfigClockSource+0x1c>
 8006608:	2302      	movs	r3, #2
 800660a:	e0b4      	b.n	8006776 <HAL_TIM_ConfigClockSource+0x186>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2202      	movs	r2, #2
 8006618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800662a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006632:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006644:	d03e      	beq.n	80066c4 <HAL_TIM_ConfigClockSource+0xd4>
 8006646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800664a:	f200 8087 	bhi.w	800675c <HAL_TIM_ConfigClockSource+0x16c>
 800664e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006652:	f000 8086 	beq.w	8006762 <HAL_TIM_ConfigClockSource+0x172>
 8006656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800665a:	d87f      	bhi.n	800675c <HAL_TIM_ConfigClockSource+0x16c>
 800665c:	2b70      	cmp	r3, #112	; 0x70
 800665e:	d01a      	beq.n	8006696 <HAL_TIM_ConfigClockSource+0xa6>
 8006660:	2b70      	cmp	r3, #112	; 0x70
 8006662:	d87b      	bhi.n	800675c <HAL_TIM_ConfigClockSource+0x16c>
 8006664:	2b60      	cmp	r3, #96	; 0x60
 8006666:	d050      	beq.n	800670a <HAL_TIM_ConfigClockSource+0x11a>
 8006668:	2b60      	cmp	r3, #96	; 0x60
 800666a:	d877      	bhi.n	800675c <HAL_TIM_ConfigClockSource+0x16c>
 800666c:	2b50      	cmp	r3, #80	; 0x50
 800666e:	d03c      	beq.n	80066ea <HAL_TIM_ConfigClockSource+0xfa>
 8006670:	2b50      	cmp	r3, #80	; 0x50
 8006672:	d873      	bhi.n	800675c <HAL_TIM_ConfigClockSource+0x16c>
 8006674:	2b40      	cmp	r3, #64	; 0x40
 8006676:	d058      	beq.n	800672a <HAL_TIM_ConfigClockSource+0x13a>
 8006678:	2b40      	cmp	r3, #64	; 0x40
 800667a:	d86f      	bhi.n	800675c <HAL_TIM_ConfigClockSource+0x16c>
 800667c:	2b30      	cmp	r3, #48	; 0x30
 800667e:	d064      	beq.n	800674a <HAL_TIM_ConfigClockSource+0x15a>
 8006680:	2b30      	cmp	r3, #48	; 0x30
 8006682:	d86b      	bhi.n	800675c <HAL_TIM_ConfigClockSource+0x16c>
 8006684:	2b20      	cmp	r3, #32
 8006686:	d060      	beq.n	800674a <HAL_TIM_ConfigClockSource+0x15a>
 8006688:	2b20      	cmp	r3, #32
 800668a:	d867      	bhi.n	800675c <HAL_TIM_ConfigClockSource+0x16c>
 800668c:	2b00      	cmp	r3, #0
 800668e:	d05c      	beq.n	800674a <HAL_TIM_ConfigClockSource+0x15a>
 8006690:	2b10      	cmp	r3, #16
 8006692:	d05a      	beq.n	800674a <HAL_TIM_ConfigClockSource+0x15a>
 8006694:	e062      	b.n	800675c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066a6:	f000 f9a4 	bl	80069f2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	609a      	str	r2, [r3, #8]
      break;
 80066c2:	e04f      	b.n	8006764 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066d4:	f000 f98d 	bl	80069f2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689a      	ldr	r2, [r3, #8]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066e6:	609a      	str	r2, [r3, #8]
      break;
 80066e8:	e03c      	b.n	8006764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066f6:	461a      	mov	r2, r3
 80066f8:	f000 f904 	bl	8006904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2150      	movs	r1, #80	; 0x50
 8006702:	4618      	mov	r0, r3
 8006704:	f000 f95b 	bl	80069be <TIM_ITRx_SetConfig>
      break;
 8006708:	e02c      	b.n	8006764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006716:	461a      	mov	r2, r3
 8006718:	f000 f922 	bl	8006960 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2160      	movs	r1, #96	; 0x60
 8006722:	4618      	mov	r0, r3
 8006724:	f000 f94b 	bl	80069be <TIM_ITRx_SetConfig>
      break;
 8006728:	e01c      	b.n	8006764 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006736:	461a      	mov	r2, r3
 8006738:	f000 f8e4 	bl	8006904 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2140      	movs	r1, #64	; 0x40
 8006742:	4618      	mov	r0, r3
 8006744:	f000 f93b 	bl	80069be <TIM_ITRx_SetConfig>
      break;
 8006748:	e00c      	b.n	8006764 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4619      	mov	r1, r3
 8006754:	4610      	mov	r0, r2
 8006756:	f000 f932 	bl	80069be <TIM_ITRx_SetConfig>
      break;
 800675a:	e003      	b.n	8006764 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	73fb      	strb	r3, [r7, #15]
      break;
 8006760:	e000      	b.n	8006764 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006762:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006774:	7bfb      	ldrb	r3, [r7, #15]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800677e:	b480      	push	{r7}
 8006780:	b083      	sub	sp, #12
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	bc80      	pop	{r7}
 800678e:	4770      	bx	lr

08006790 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	bc80      	pop	{r7}
 80067a0:	4770      	bx	lr

080067a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bc80      	pop	{r7}
 80067b2:	4770      	bx	lr

080067b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bc80      	pop	{r7}
 80067c4:	4770      	bx	lr
	...

080067c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a3f      	ldr	r2, [pc, #252]	; (80068d8 <TIM_Base_SetConfig+0x110>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d013      	beq.n	8006808 <TIM_Base_SetConfig+0x40>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067e6:	d00f      	beq.n	8006808 <TIM_Base_SetConfig+0x40>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a3c      	ldr	r2, [pc, #240]	; (80068dc <TIM_Base_SetConfig+0x114>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00b      	beq.n	8006808 <TIM_Base_SetConfig+0x40>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a3b      	ldr	r2, [pc, #236]	; (80068e0 <TIM_Base_SetConfig+0x118>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d007      	beq.n	8006808 <TIM_Base_SetConfig+0x40>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a3a      	ldr	r2, [pc, #232]	; (80068e4 <TIM_Base_SetConfig+0x11c>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d003      	beq.n	8006808 <TIM_Base_SetConfig+0x40>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a39      	ldr	r2, [pc, #228]	; (80068e8 <TIM_Base_SetConfig+0x120>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d108      	bne.n	800681a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800680e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	4313      	orrs	r3, r2
 8006818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a2e      	ldr	r2, [pc, #184]	; (80068d8 <TIM_Base_SetConfig+0x110>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d02b      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006828:	d027      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a2b      	ldr	r2, [pc, #172]	; (80068dc <TIM_Base_SetConfig+0x114>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d023      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a2a      	ldr	r2, [pc, #168]	; (80068e0 <TIM_Base_SetConfig+0x118>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d01f      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a29      	ldr	r2, [pc, #164]	; (80068e4 <TIM_Base_SetConfig+0x11c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d01b      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a28      	ldr	r2, [pc, #160]	; (80068e8 <TIM_Base_SetConfig+0x120>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d017      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4a27      	ldr	r2, [pc, #156]	; (80068ec <TIM_Base_SetConfig+0x124>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d013      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a26      	ldr	r2, [pc, #152]	; (80068f0 <TIM_Base_SetConfig+0x128>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d00f      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a25      	ldr	r2, [pc, #148]	; (80068f4 <TIM_Base_SetConfig+0x12c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d00b      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a24      	ldr	r2, [pc, #144]	; (80068f8 <TIM_Base_SetConfig+0x130>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d007      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a23      	ldr	r2, [pc, #140]	; (80068fc <TIM_Base_SetConfig+0x134>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d003      	beq.n	800687a <TIM_Base_SetConfig+0xb2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a22      	ldr	r2, [pc, #136]	; (8006900 <TIM_Base_SetConfig+0x138>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d108      	bne.n	800688c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	4313      	orrs	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a09      	ldr	r2, [pc, #36]	; (80068d8 <TIM_Base_SetConfig+0x110>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d003      	beq.n	80068c0 <TIM_Base_SetConfig+0xf8>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a0b      	ldr	r2, [pc, #44]	; (80068e8 <TIM_Base_SetConfig+0x120>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d103      	bne.n	80068c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	691a      	ldr	r2, [r3, #16]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	615a      	str	r2, [r3, #20]
}
 80068ce:	bf00      	nop
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bc80      	pop	{r7}
 80068d6:	4770      	bx	lr
 80068d8:	40010000 	.word	0x40010000
 80068dc:	40000400 	.word	0x40000400
 80068e0:	40000800 	.word	0x40000800
 80068e4:	40000c00 	.word	0x40000c00
 80068e8:	40010400 	.word	0x40010400
 80068ec:	40014000 	.word	0x40014000
 80068f0:	40014400 	.word	0x40014400
 80068f4:	40014800 	.word	0x40014800
 80068f8:	40001800 	.word	0x40001800
 80068fc:	40001c00 	.word	0x40001c00
 8006900:	40002000 	.word	0x40002000

08006904 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	f023 0201 	bic.w	r2, r3, #1
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800692e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	011b      	lsls	r3, r3, #4
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	4313      	orrs	r3, r2
 8006938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f023 030a 	bic.w	r3, r3, #10
 8006940:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	4313      	orrs	r3, r2
 8006948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	697a      	ldr	r2, [r7, #20]
 8006954:	621a      	str	r2, [r3, #32]
}
 8006956:	bf00      	nop
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	bc80      	pop	{r7}
 800695e:	4770      	bx	lr

08006960 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006960:	b480      	push	{r7}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a1b      	ldr	r3, [r3, #32]
 8006970:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	f023 0210 	bic.w	r2, r3, #16
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800698a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	031b      	lsls	r3, r3, #12
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	4313      	orrs	r3, r2
 8006994:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800699c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	011b      	lsls	r3, r3, #4
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	621a      	str	r2, [r3, #32]
}
 80069b4:	bf00      	nop
 80069b6:	371c      	adds	r7, #28
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bc80      	pop	{r7}
 80069bc:	4770      	bx	lr

080069be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069be:	b480      	push	{r7}
 80069c0:	b085      	sub	sp, #20
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	4313      	orrs	r3, r2
 80069dc:	f043 0307 	orr.w	r3, r3, #7
 80069e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	609a      	str	r2, [r3, #8]
}
 80069e8:	bf00      	nop
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bc80      	pop	{r7}
 80069f0:	4770      	bx	lr

080069f2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b087      	sub	sp, #28
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	607a      	str	r2, [r7, #4]
 80069fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	021a      	lsls	r2, r3, #8
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	431a      	orrs	r2, r3
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	609a      	str	r2, [r3, #8]
}
 8006a26:	bf00      	nop
 8006a28:	371c      	adds	r7, #28
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bc80      	pop	{r7}
 8006a2e:	4770      	bx	lr

08006a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d101      	bne.n	8006a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a44:	2302      	movs	r3, #2
 8006a46:	e05a      	b.n	8006afe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a20      	ldr	r2, [pc, #128]	; (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d022      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a94:	d01d      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a1c      	ldr	r2, [pc, #112]	; (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d018      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a1a      	ldr	r2, [pc, #104]	; (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d013      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a19      	ldr	r2, [pc, #100]	; (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d00e      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a17      	ldr	r2, [pc, #92]	; (8006b18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d009      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a16      	ldr	r2, [pc, #88]	; (8006b1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d004      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a14      	ldr	r2, [pc, #80]	; (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d10c      	bne.n	8006aec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ad8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bc80      	pop	{r7}
 8006b06:	4770      	bx	lr
 8006b08:	40010000 	.word	0x40010000
 8006b0c:	40000400 	.word	0x40000400
 8006b10:	40000800 	.word	0x40000800
 8006b14:	40000c00 	.word	0x40000c00
 8006b18:	40010400 	.word	0x40010400
 8006b1c:	40014000 	.word	0x40014000
 8006b20:	40001800 	.word	0x40001800

08006b24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bc80      	pop	{r7}
 8006b34:	4770      	bx	lr

08006b36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b083      	sub	sp, #12
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b3e:	bf00      	nop
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bc80      	pop	{r7}
 8006b46:	4770      	bx	lr

08006b48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b48:	b084      	sub	sp, #16
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
 8006b52:	f107 001c 	add.w	r0, r7, #28
 8006b56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d122      	bne.n	8006ba6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d105      	bne.n	8006b9a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f001 fabc 	bl	8008118 <USB_CoreReset>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	73fb      	strb	r3, [r7, #15]
 8006ba4:	e010      	b.n	8006bc8 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f001 fab0 	bl	8008118 <USB_CoreReset>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d10b      	bne.n	8006be6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f043 0206 	orr.w	r2, r3, #6
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f043 0220 	orr.w	r2, r3, #32
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bf2:	b004      	add	sp, #16
 8006bf4:	4770      	bx	lr
	...

08006bf8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	4613      	mov	r3, r2
 8006c04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006c06:	79fb      	ldrb	r3, [r7, #7]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d165      	bne.n	8006cd8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	4a41      	ldr	r2, [pc, #260]	; (8006d14 <USB_SetTurnaroundTime+0x11c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d906      	bls.n	8006c22 <USB_SetTurnaroundTime+0x2a>
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	4a40      	ldr	r2, [pc, #256]	; (8006d18 <USB_SetTurnaroundTime+0x120>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d202      	bcs.n	8006c22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006c1c:	230f      	movs	r3, #15
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	e062      	b.n	8006ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	4a3c      	ldr	r2, [pc, #240]	; (8006d18 <USB_SetTurnaroundTime+0x120>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d306      	bcc.n	8006c38 <USB_SetTurnaroundTime+0x40>
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	4a3b      	ldr	r2, [pc, #236]	; (8006d1c <USB_SetTurnaroundTime+0x124>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d202      	bcs.n	8006c38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006c32:	230e      	movs	r3, #14
 8006c34:	617b      	str	r3, [r7, #20]
 8006c36:	e057      	b.n	8006ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	4a38      	ldr	r2, [pc, #224]	; (8006d1c <USB_SetTurnaroundTime+0x124>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d306      	bcc.n	8006c4e <USB_SetTurnaroundTime+0x56>
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	4a37      	ldr	r2, [pc, #220]	; (8006d20 <USB_SetTurnaroundTime+0x128>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d202      	bcs.n	8006c4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006c48:	230d      	movs	r3, #13
 8006c4a:	617b      	str	r3, [r7, #20]
 8006c4c:	e04c      	b.n	8006ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	4a33      	ldr	r2, [pc, #204]	; (8006d20 <USB_SetTurnaroundTime+0x128>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d306      	bcc.n	8006c64 <USB_SetTurnaroundTime+0x6c>
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	4a32      	ldr	r2, [pc, #200]	; (8006d24 <USB_SetTurnaroundTime+0x12c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d802      	bhi.n	8006c64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006c5e:	230c      	movs	r3, #12
 8006c60:	617b      	str	r3, [r7, #20]
 8006c62:	e041      	b.n	8006ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	4a2f      	ldr	r2, [pc, #188]	; (8006d24 <USB_SetTurnaroundTime+0x12c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d906      	bls.n	8006c7a <USB_SetTurnaroundTime+0x82>
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	4a2e      	ldr	r2, [pc, #184]	; (8006d28 <USB_SetTurnaroundTime+0x130>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d802      	bhi.n	8006c7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006c74:	230b      	movs	r3, #11
 8006c76:	617b      	str	r3, [r7, #20]
 8006c78:	e036      	b.n	8006ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	4a2a      	ldr	r2, [pc, #168]	; (8006d28 <USB_SetTurnaroundTime+0x130>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d906      	bls.n	8006c90 <USB_SetTurnaroundTime+0x98>
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	4a29      	ldr	r2, [pc, #164]	; (8006d2c <USB_SetTurnaroundTime+0x134>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d802      	bhi.n	8006c90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006c8a:	230a      	movs	r3, #10
 8006c8c:	617b      	str	r3, [r7, #20]
 8006c8e:	e02b      	b.n	8006ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	4a26      	ldr	r2, [pc, #152]	; (8006d2c <USB_SetTurnaroundTime+0x134>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d906      	bls.n	8006ca6 <USB_SetTurnaroundTime+0xae>
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	4a25      	ldr	r2, [pc, #148]	; (8006d30 <USB_SetTurnaroundTime+0x138>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d202      	bcs.n	8006ca6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006ca0:	2309      	movs	r3, #9
 8006ca2:	617b      	str	r3, [r7, #20]
 8006ca4:	e020      	b.n	8006ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	4a21      	ldr	r2, [pc, #132]	; (8006d30 <USB_SetTurnaroundTime+0x138>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d306      	bcc.n	8006cbc <USB_SetTurnaroundTime+0xc4>
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	4a20      	ldr	r2, [pc, #128]	; (8006d34 <USB_SetTurnaroundTime+0x13c>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d802      	bhi.n	8006cbc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006cb6:	2308      	movs	r3, #8
 8006cb8:	617b      	str	r3, [r7, #20]
 8006cba:	e015      	b.n	8006ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	4a1d      	ldr	r2, [pc, #116]	; (8006d34 <USB_SetTurnaroundTime+0x13c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d906      	bls.n	8006cd2 <USB_SetTurnaroundTime+0xda>
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	4a1c      	ldr	r2, [pc, #112]	; (8006d38 <USB_SetTurnaroundTime+0x140>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d202      	bcs.n	8006cd2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006ccc:	2307      	movs	r3, #7
 8006cce:	617b      	str	r3, [r7, #20]
 8006cd0:	e00a      	b.n	8006ce8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006cd2:	2306      	movs	r3, #6
 8006cd4:	617b      	str	r3, [r7, #20]
 8006cd6:	e007      	b.n	8006ce8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006cd8:	79fb      	ldrb	r3, [r7, #7]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d102      	bne.n	8006ce4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006cde:	2309      	movs	r3, #9
 8006ce0:	617b      	str	r3, [r7, #20]
 8006ce2:	e001      	b.n	8006ce8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006ce4:	2309      	movs	r3, #9
 8006ce6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	68da      	ldr	r2, [r3, #12]
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	029b      	lsls	r3, r3, #10
 8006cfc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006d00:	431a      	orrs	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	371c      	adds	r7, #28
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bc80      	pop	{r7}
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	00d8acbf 	.word	0x00d8acbf
 8006d18:	00e4e1c0 	.word	0x00e4e1c0
 8006d1c:	00f42400 	.word	0x00f42400
 8006d20:	01067380 	.word	0x01067380
 8006d24:	011a499f 	.word	0x011a499f
 8006d28:	01312cff 	.word	0x01312cff
 8006d2c:	014ca43f 	.word	0x014ca43f
 8006d30:	016e3600 	.word	0x016e3600
 8006d34:	01a6ab1f 	.word	0x01a6ab1f
 8006d38:	01e84800 	.word	0x01e84800

08006d3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	f043 0201 	orr.w	r2, r3, #1
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bc80      	pop	{r7}
 8006d5a:	4770      	bx	lr

08006d5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f023 0201 	bic.w	r2, r3, #1
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	370c      	adds	r7, #12
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bc80      	pop	{r7}
 8006d7a:	4770      	bx	lr

08006d7c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	460b      	mov	r3, r1
 8006d86:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d98:	78fb      	ldrb	r3, [r7, #3]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d115      	bne.n	8006dca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006daa:	2001      	movs	r0, #1
 8006dac:	f7fb fe32 	bl	8002a14 <HAL_Delay>
      ms++;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	3301      	adds	r3, #1
 8006db4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f001 f922 	bl	8008000 <USB_GetMode>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d01e      	beq.n	8006e00 <USB_SetCurrentMode+0x84>
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2b31      	cmp	r3, #49	; 0x31
 8006dc6:	d9f0      	bls.n	8006daa <USB_SetCurrentMode+0x2e>
 8006dc8:	e01a      	b.n	8006e00 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006dca:	78fb      	ldrb	r3, [r7, #3]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d115      	bne.n	8006dfc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ddc:	2001      	movs	r0, #1
 8006dde:	f7fb fe19 	bl	8002a14 <HAL_Delay>
      ms++;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	3301      	adds	r3, #1
 8006de6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 f909 	bl	8008000 <USB_GetMode>
 8006dee:	4603      	mov	r3, r0
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d005      	beq.n	8006e00 <USB_SetCurrentMode+0x84>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2b31      	cmp	r3, #49	; 0x31
 8006df8:	d9f0      	bls.n	8006ddc <USB_SetCurrentMode+0x60>
 8006dfa:	e001      	b.n	8006e00 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e005      	b.n	8006e0c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2b32      	cmp	r3, #50	; 0x32
 8006e04:	d101      	bne.n	8006e0a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e000      	b.n	8006e0c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e14:	b084      	sub	sp, #16
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b086      	sub	sp, #24
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006e22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006e2e:	2300      	movs	r3, #0
 8006e30:	613b      	str	r3, [r7, #16]
 8006e32:	e009      	b.n	8006e48 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	3340      	adds	r3, #64	; 0x40
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4413      	add	r3, r2
 8006e3e:	2200      	movs	r2, #0
 8006e40:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	3301      	adds	r3, #1
 8006e46:	613b      	str	r3, [r7, #16]
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	2b0e      	cmp	r3, #14
 8006e4c:	d9f2      	bls.n	8006e34 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d11c      	bne.n	8006e8e <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e62:	f043 0302 	orr.w	r3, r3, #2
 8006e66:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e78:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e84:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	639a      	str	r2, [r3, #56]	; 0x38
 8006e8c:	e00b      	b.n	8006ea6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e92:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006eac:	461a      	mov	r2, r3
 8006eae:	2300      	movs	r3, #0
 8006eb0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d10c      	bne.n	8006ed2 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d104      	bne.n	8006ec8 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f965 	bl	8007190 <USB_SetDevSpeed>
 8006ec6:	e008      	b.n	8006eda <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ec8:	2101      	movs	r1, #1
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f960 	bl	8007190 <USB_SetDevSpeed>
 8006ed0:	e003      	b.n	8006eda <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006ed2:	2103      	movs	r1, #3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f95b 	bl	8007190 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006eda:	2110      	movs	r1, #16
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 f8f3 	bl	80070c8 <USB_FlushTxFifo>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f91f 	bl	8007130 <USB_FlushRxFifo>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f02:	461a      	mov	r2, r3
 8006f04:	2300      	movs	r3, #0
 8006f06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0e:	461a      	mov	r2, r3
 8006f10:	2300      	movs	r3, #0
 8006f12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f20:	2300      	movs	r3, #0
 8006f22:	613b      	str	r3, [r7, #16]
 8006f24:	e043      	b.n	8006fae <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f3c:	d118      	bne.n	8006f70 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10a      	bne.n	8006f5a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f50:	461a      	mov	r2, r3
 8006f52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	e013      	b.n	8006f82 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	015a      	lsls	r2, r3, #5
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	4413      	add	r3, r2
 8006f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f66:	461a      	mov	r2, r3
 8006f68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f6c:	6013      	str	r3, [r2, #0]
 8006f6e:	e008      	b.n	8006f82 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	2300      	movs	r3, #0
 8006f80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	015a      	lsls	r2, r3, #5
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	4413      	add	r3, r2
 8006f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8e:	461a      	mov	r2, r3
 8006f90:	2300      	movs	r3, #0
 8006f92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	015a      	lsls	r2, r3, #5
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006fa6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	3301      	adds	r3, #1
 8006fac:	613b      	str	r3, [r7, #16]
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d3b7      	bcc.n	8006f26 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	613b      	str	r3, [r7, #16]
 8006fba:	e043      	b.n	8007044 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fd2:	d118      	bne.n	8007006 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d10a      	bne.n	8006ff0 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006fec:	6013      	str	r3, [r2, #0]
 8006fee:	e013      	b.n	8007018 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007002:	6013      	str	r3, [r2, #0]
 8007004:	e008      	b.n	8007018 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4413      	add	r3, r2
 800700e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007012:	461a      	mov	r2, r3
 8007014:	2300      	movs	r3, #0
 8007016:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	015a      	lsls	r2, r3, #5
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	4413      	add	r3, r2
 8007020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007024:	461a      	mov	r2, r3
 8007026:	2300      	movs	r3, #0
 8007028:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	4413      	add	r3, r2
 8007032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007036:	461a      	mov	r2, r3
 8007038:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800703c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	3301      	adds	r3, #1
 8007042:	613b      	str	r3, [r7, #16]
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	429a      	cmp	r2, r3
 800704a:	d3b7      	bcc.n	8006fbc <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800705a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800705e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800706c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800706e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007070:	2b00      	cmp	r3, #0
 8007072:	d105      	bne.n	8007080 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	f043 0210 	orr.w	r2, r3, #16
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	699a      	ldr	r2, [r3, #24]
 8007084:	4b0f      	ldr	r3, [pc, #60]	; (80070c4 <USB_DevInit+0x2b0>)
 8007086:	4313      	orrs	r3, r2
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800708c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	f043 0208 	orr.w	r2, r3, #8
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800709e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d107      	bne.n	80070b4 <USB_DevInit+0x2a0>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070ac:	f043 0304 	orr.w	r3, r3, #4
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80070b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3718      	adds	r7, #24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070c0:	b004      	add	sp, #16
 80070c2:	4770      	bx	lr
 80070c4:	803c3800 	.word	0x803c3800

080070c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070d2:	2300      	movs	r3, #0
 80070d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3301      	adds	r3, #1
 80070da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4a13      	ldr	r2, [pc, #76]	; (800712c <USB_FlushTxFifo+0x64>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d901      	bls.n	80070e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e01b      	b.n	8007120 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	daf2      	bge.n	80070d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	019b      	lsls	r3, r3, #6
 80070f8:	f043 0220 	orr.w	r2, r3, #32
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3301      	adds	r3, #1
 8007104:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	4a08      	ldr	r2, [pc, #32]	; (800712c <USB_FlushTxFifo+0x64>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d901      	bls.n	8007112 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800710e:	2303      	movs	r3, #3
 8007110:	e006      	b.n	8007120 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	f003 0320 	and.w	r3, r3, #32
 800711a:	2b20      	cmp	r3, #32
 800711c:	d0f0      	beq.n	8007100 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	bc80      	pop	{r7}
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	00030d40 	.word	0x00030d40

08007130 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3301      	adds	r3, #1
 8007140:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	4a11      	ldr	r2, [pc, #68]	; (800718c <USB_FlushRxFifo+0x5c>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d901      	bls.n	800714e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e018      	b.n	8007180 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	daf2      	bge.n	800713c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2210      	movs	r2, #16
 800715e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	3301      	adds	r3, #1
 8007164:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	4a08      	ldr	r2, [pc, #32]	; (800718c <USB_FlushRxFifo+0x5c>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d901      	bls.n	8007172 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e006      	b.n	8007180 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	f003 0310 	and.w	r3, r3, #16
 800717a:	2b10      	cmp	r3, #16
 800717c:	d0f0      	beq.n	8007160 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	bc80      	pop	{r7}
 8007188:	4770      	bx	lr
 800718a:	bf00      	nop
 800718c:	00030d40 	.word	0x00030d40

08007190 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	78fb      	ldrb	r3, [r7, #3]
 80071aa:	68f9      	ldr	r1, [r7, #12]
 80071ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071b0:	4313      	orrs	r3, r2
 80071b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bc80      	pop	{r7}
 80071be:	4770      	bx	lr

080071c0 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f003 0306 	and.w	r3, r3, #6
 80071d8:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d102      	bne.n	80071e6 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80071e0:	2300      	movs	r3, #0
 80071e2:	75fb      	strb	r3, [r7, #23]
 80071e4:	e00a      	b.n	80071fc <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	d002      	beq.n	80071f2 <USB_GetDevSpeed+0x32>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2b06      	cmp	r3, #6
 80071f0:	d102      	bne.n	80071f8 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80071f2:	2302      	movs	r3, #2
 80071f4:	75fb      	strb	r3, [r7, #23]
 80071f6:	e001      	b.n	80071fc <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80071f8:	230f      	movs	r3, #15
 80071fa:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80071fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	371c      	adds	r7, #28
 8007202:	46bd      	mov	sp, r7
 8007204:	bc80      	pop	{r7}
 8007206:	4770      	bx	lr

08007208 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	785b      	ldrb	r3, [r3, #1]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d13a      	bne.n	800729a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800722a:	69da      	ldr	r2, [r3, #28]
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	f003 030f 	and.w	r3, r3, #15
 8007234:	2101      	movs	r1, #1
 8007236:	fa01 f303 	lsl.w	r3, r1, r3
 800723a:	b29b      	uxth	r3, r3
 800723c:	68f9      	ldr	r1, [r7, #12]
 800723e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007242:	4313      	orrs	r3, r2
 8007244:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	015a      	lsls	r2, r3, #5
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	4413      	add	r3, r2
 800724e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d155      	bne.n	8007308 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	791b      	ldrb	r3, [r3, #4]
 8007276:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007278:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	059b      	lsls	r3, r3, #22
 800727e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007280:	4313      	orrs	r3, r2
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	0151      	lsls	r1, r2, #5
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	440a      	add	r2, r1
 800728a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800728e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007296:	6013      	str	r3, [r2, #0]
 8007298:	e036      	b.n	8007308 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a0:	69da      	ldr	r2, [r3, #28]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	f003 030f 	and.w	r3, r3, #15
 80072aa:	2101      	movs	r1, #1
 80072ac:	fa01 f303 	lsl.w	r3, r1, r3
 80072b0:	041b      	lsls	r3, r3, #16
 80072b2:	68f9      	ldr	r1, [r7, #12]
 80072b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072b8:	4313      	orrs	r3, r2
 80072ba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d11a      	bne.n	8007308 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	791b      	ldrb	r3, [r3, #4]
 80072ec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80072ee:	430b      	orrs	r3, r1
 80072f0:	4313      	orrs	r3, r2
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	0151      	lsls	r1, r2, #5
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	440a      	add	r2, r1
 80072fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007302:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007306:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3714      	adds	r7, #20
 800730e:	46bd      	mov	sp, r7
 8007310:	bc80      	pop	{r7}
 8007312:	4770      	bx	lr

08007314 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	785b      	ldrb	r3, [r3, #1]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d161      	bne.n	80073f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	015a      	lsls	r2, r3, #5
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4413      	add	r3, r2
 8007338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007342:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007346:	d11f      	bne.n	8007388 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	015a      	lsls	r2, r3, #5
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	4413      	add	r3, r2
 8007350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	0151      	lsls	r1, r2, #5
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	440a      	add	r2, r1
 800735e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007362:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007366:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	0151      	lsls	r1, r2, #5
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	440a      	add	r2, r1
 800737e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007382:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007386:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800738e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	f003 030f 	and.w	r3, r3, #15
 8007398:	2101      	movs	r1, #1
 800739a:	fa01 f303 	lsl.w	r3, r1, r3
 800739e:	b29b      	uxth	r3, r3
 80073a0:	43db      	mvns	r3, r3
 80073a2:	68f9      	ldr	r1, [r7, #12]
 80073a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073a8:	4013      	ands	r3, r2
 80073aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b2:	69da      	ldr	r2, [r3, #28]
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	f003 030f 	and.w	r3, r3, #15
 80073bc:	2101      	movs	r1, #1
 80073be:	fa01 f303 	lsl.w	r3, r1, r3
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	43db      	mvns	r3, r3
 80073c6:	68f9      	ldr	r1, [r7, #12]
 80073c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073cc:	4013      	ands	r3, r2
 80073ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	0159      	lsls	r1, r3, #5
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	440b      	add	r3, r1
 80073e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ea:	4619      	mov	r1, r3
 80073ec:	4b35      	ldr	r3, [pc, #212]	; (80074c4 <USB_DeactivateEndpoint+0x1b0>)
 80073ee:	4013      	ands	r3, r2
 80073f0:	600b      	str	r3, [r1, #0]
 80073f2:	e060      	b.n	80074b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	015a      	lsls	r2, r3, #5
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	4413      	add	r3, r2
 80073fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007406:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800740a:	d11f      	bne.n	800744c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4413      	add	r3, r2
 8007414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	0151      	lsls	r1, r2, #5
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	440a      	add	r2, r1
 8007422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007426:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800742a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	015a      	lsls	r2, r3, #5
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	4413      	add	r3, r2
 8007434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68ba      	ldr	r2, [r7, #8]
 800743c:	0151      	lsls	r1, r2, #5
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	440a      	add	r2, r1
 8007442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007446:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800744a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	f003 030f 	and.w	r3, r3, #15
 800745c:	2101      	movs	r1, #1
 800745e:	fa01 f303 	lsl.w	r3, r1, r3
 8007462:	041b      	lsls	r3, r3, #16
 8007464:	43db      	mvns	r3, r3
 8007466:	68f9      	ldr	r1, [r7, #12]
 8007468:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800746c:	4013      	ands	r3, r2
 800746e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007476:	69da      	ldr	r2, [r3, #28]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	f003 030f 	and.w	r3, r3, #15
 8007480:	2101      	movs	r1, #1
 8007482:	fa01 f303 	lsl.w	r3, r1, r3
 8007486:	041b      	lsls	r3, r3, #16
 8007488:	43db      	mvns	r3, r3
 800748a:	68f9      	ldr	r1, [r7, #12]
 800748c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007490:	4013      	ands	r3, r2
 8007492:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	4413      	add	r3, r2
 800749c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	0159      	lsls	r1, r3, #5
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	440b      	add	r3, r1
 80074aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ae:	4619      	mov	r1, r3
 80074b0:	4b05      	ldr	r3, [pc, #20]	; (80074c8 <USB_DeactivateEndpoint+0x1b4>)
 80074b2:	4013      	ands	r3, r2
 80074b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	bc80      	pop	{r7}
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	ec337800 	.word	0xec337800
 80074c8:	eff37800 	.word	0xeff37800

080074cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b08a      	sub	sp, #40	; 0x28
 80074d0:	af02      	add	r7, sp, #8
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	4613      	mov	r3, r2
 80074d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	785b      	ldrb	r3, [r3, #1]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	f040 817a 	bne.w	80077e2 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d132      	bne.n	800755c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	69ba      	ldr	r2, [r7, #24]
 8007506:	0151      	lsls	r1, r2, #5
 8007508:	69fa      	ldr	r2, [r7, #28]
 800750a:	440a      	add	r2, r1
 800750c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007510:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007514:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007518:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	4413      	add	r3, r2
 8007522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	69ba      	ldr	r2, [r7, #24]
 800752a:	0151      	lsls	r1, r2, #5
 800752c:	69fa      	ldr	r2, [r7, #28]
 800752e:	440a      	add	r2, r1
 8007530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007534:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007538:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	015a      	lsls	r2, r3, #5
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	4413      	add	r3, r2
 8007542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	0151      	lsls	r1, r2, #5
 800754c:	69fa      	ldr	r2, [r7, #28]
 800754e:	440a      	add	r2, r1
 8007550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007554:	0cdb      	lsrs	r3, r3, #19
 8007556:	04db      	lsls	r3, r3, #19
 8007558:	6113      	str	r3, [r2, #16]
 800755a:	e092      	b.n	8007682 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	015a      	lsls	r2, r3, #5
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	4413      	add	r3, r2
 8007564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	0151      	lsls	r1, r2, #5
 800756e:	69fa      	ldr	r2, [r7, #28]
 8007570:	440a      	add	r2, r1
 8007572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007576:	0cdb      	lsrs	r3, r3, #19
 8007578:	04db      	lsls	r3, r3, #19
 800757a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	015a      	lsls	r2, r3, #5
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	4413      	add	r3, r2
 8007584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	69ba      	ldr	r2, [r7, #24]
 800758c:	0151      	lsls	r1, r2, #5
 800758e:	69fa      	ldr	r2, [r7, #28]
 8007590:	440a      	add	r2, r1
 8007592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007596:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800759a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800759e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d11a      	bne.n	80075dc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	691a      	ldr	r2, [r3, #16]
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d903      	bls.n	80075ba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	689a      	ldr	r2, [r3, #8]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	0151      	lsls	r1, r2, #5
 80075cc:	69fa      	ldr	r2, [r7, #28]
 80075ce:	440a      	add	r2, r1
 80075d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075d8:	6113      	str	r3, [r2, #16]
 80075da:	e01b      	b.n	8007614 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	6919      	ldr	r1, [r3, #16]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	440b      	add	r3, r1
 80075f4:	1e59      	subs	r1, r3, #1
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80075fe:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007600:	4ba2      	ldr	r3, [pc, #648]	; (800788c <USB_EPStartXfer+0x3c0>)
 8007602:	400b      	ands	r3, r1
 8007604:	69b9      	ldr	r1, [r7, #24]
 8007606:	0148      	lsls	r0, r1, #5
 8007608:	69f9      	ldr	r1, [r7, #28]
 800760a:	4401      	add	r1, r0
 800760c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007610:	4313      	orrs	r3, r2
 8007612:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	69fb      	ldr	r3, [r7, #28]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007620:	691a      	ldr	r2, [r3, #16]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800762a:	69b9      	ldr	r1, [r7, #24]
 800762c:	0148      	lsls	r0, r1, #5
 800762e:	69f9      	ldr	r1, [r7, #28]
 8007630:	4401      	add	r1, r0
 8007632:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007636:	4313      	orrs	r3, r2
 8007638:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	791b      	ldrb	r3, [r3, #4]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d11f      	bne.n	8007682 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	015a      	lsls	r2, r3, #5
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	4413      	add	r3, r2
 800764a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	0151      	lsls	r1, r2, #5
 8007654:	69fa      	ldr	r2, [r7, #28]
 8007656:	440a      	add	r2, r1
 8007658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800765c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007660:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	4413      	add	r3, r2
 800766a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	69ba      	ldr	r2, [r7, #24]
 8007672:	0151      	lsls	r1, r2, #5
 8007674:	69fa      	ldr	r2, [r7, #28]
 8007676:	440a      	add	r2, r1
 8007678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800767c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007680:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007682:	79fb      	ldrb	r3, [r7, #7]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d14b      	bne.n	8007720 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	69db      	ldr	r3, [r3, #28]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d009      	beq.n	80076a4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769c:	461a      	mov	r2, r3
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	69db      	ldr	r3, [r3, #28]
 80076a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	791b      	ldrb	r3, [r3, #4]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d128      	bne.n	80076fe <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d110      	bne.n	80076de <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	69ba      	ldr	r2, [r7, #24]
 80076cc:	0151      	lsls	r1, r2, #5
 80076ce:	69fa      	ldr	r2, [r7, #28]
 80076d0:	440a      	add	r2, r1
 80076d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076da:	6013      	str	r3, [r2, #0]
 80076dc:	e00f      	b.n	80076fe <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	0151      	lsls	r1, r2, #5
 80076f0:	69fa      	ldr	r2, [r7, #28]
 80076f2:	440a      	add	r2, r1
 80076f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	015a      	lsls	r2, r3, #5
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	4413      	add	r3, r2
 8007706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	69ba      	ldr	r2, [r7, #24]
 800770e:	0151      	lsls	r1, r2, #5
 8007710:	69fa      	ldr	r2, [r7, #28]
 8007712:	440a      	add	r2, r1
 8007714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007718:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800771c:	6013      	str	r3, [r2, #0]
 800771e:	e165      	b.n	80079ec <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	4413      	add	r3, r2
 8007728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	69ba      	ldr	r2, [r7, #24]
 8007730:	0151      	lsls	r1, r2, #5
 8007732:	69fa      	ldr	r2, [r7, #28]
 8007734:	440a      	add	r2, r1
 8007736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800773a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800773e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	791b      	ldrb	r3, [r3, #4]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d015      	beq.n	8007774 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 814d 	beq.w	80079ec <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	f003 030f 	and.w	r3, r3, #15
 8007762:	2101      	movs	r1, #1
 8007764:	fa01 f303 	lsl.w	r3, r1, r3
 8007768:	69f9      	ldr	r1, [r7, #28]
 800776a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800776e:	4313      	orrs	r3, r2
 8007770:	634b      	str	r3, [r1, #52]	; 0x34
 8007772:	e13b      	b.n	80079ec <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007780:	2b00      	cmp	r3, #0
 8007782:	d110      	bne.n	80077a6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	4413      	add	r3, r2
 800778c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	69ba      	ldr	r2, [r7, #24]
 8007794:	0151      	lsls	r1, r2, #5
 8007796:	69fa      	ldr	r2, [r7, #28]
 8007798:	440a      	add	r2, r1
 800779a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800779e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077a2:	6013      	str	r3, [r2, #0]
 80077a4:	e00f      	b.n	80077c6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	015a      	lsls	r2, r3, #5
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	69ba      	ldr	r2, [r7, #24]
 80077b6:	0151      	lsls	r1, r2, #5
 80077b8:	69fa      	ldr	r2, [r7, #28]
 80077ba:	440a      	add	r2, r1
 80077bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	68d9      	ldr	r1, [r3, #12]
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	781a      	ldrb	r2, [r3, #0]
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	b298      	uxth	r0, r3
 80077d4:	79fb      	ldrb	r3, [r7, #7]
 80077d6:	9300      	str	r3, [sp, #0]
 80077d8:	4603      	mov	r3, r0
 80077da:	68f8      	ldr	r0, [r7, #12]
 80077dc:	f000 f9b7 	bl	8007b4e <USB_WritePacket>
 80077e0:	e104      	b.n	80079ec <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	015a      	lsls	r2, r3, #5
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	4413      	add	r3, r2
 80077ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	69ba      	ldr	r2, [r7, #24]
 80077f2:	0151      	lsls	r1, r2, #5
 80077f4:	69fa      	ldr	r2, [r7, #28]
 80077f6:	440a      	add	r2, r1
 80077f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077fc:	0cdb      	lsrs	r3, r3, #19
 80077fe:	04db      	lsls	r3, r3, #19
 8007800:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	015a      	lsls	r2, r3, #5
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	4413      	add	r3, r2
 800780a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	69ba      	ldr	r2, [r7, #24]
 8007812:	0151      	lsls	r1, r2, #5
 8007814:	69fa      	ldr	r2, [r7, #28]
 8007816:	440a      	add	r2, r1
 8007818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800781c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007820:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007824:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d131      	bne.n	8007890 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d003      	beq.n	800783c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	689a      	ldr	r2, [r3, #8]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	689a      	ldr	r2, [r3, #8]
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	015a      	lsls	r2, r3, #5
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	4413      	add	r3, r2
 800784c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007850:	691a      	ldr	r2, [r3, #16]
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800785a:	69b9      	ldr	r1, [r7, #24]
 800785c:	0148      	lsls	r0, r1, #5
 800785e:	69f9      	ldr	r1, [r7, #28]
 8007860:	4401      	add	r1, r0
 8007862:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007866:	4313      	orrs	r3, r2
 8007868:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	015a      	lsls	r2, r3, #5
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	4413      	add	r3, r2
 8007872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007876:	691b      	ldr	r3, [r3, #16]
 8007878:	69ba      	ldr	r2, [r7, #24]
 800787a:	0151      	lsls	r1, r2, #5
 800787c:	69fa      	ldr	r2, [r7, #28]
 800787e:	440a      	add	r2, r1
 8007880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007884:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007888:	6113      	str	r3, [r2, #16]
 800788a:	e061      	b.n	8007950 <USB_EPStartXfer+0x484>
 800788c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d123      	bne.n	80078e0 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a4:	691a      	ldr	r2, [r3, #16]
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	689b      	ldr	r3, [r3, #8]
 80078aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078ae:	69b9      	ldr	r1, [r7, #24]
 80078b0:	0148      	lsls	r0, r1, #5
 80078b2:	69f9      	ldr	r1, [r7, #28]
 80078b4:	4401      	add	r1, r0
 80078b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078ba:	4313      	orrs	r3, r2
 80078bc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	015a      	lsls	r2, r3, #5
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	4413      	add	r3, r2
 80078c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	69ba      	ldr	r2, [r7, #24]
 80078ce:	0151      	lsls	r1, r2, #5
 80078d0:	69fa      	ldr	r2, [r7, #28]
 80078d2:	440a      	add	r2, r1
 80078d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078dc:	6113      	str	r3, [r2, #16]
 80078de:	e037      	b.n	8007950 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	691a      	ldr	r2, [r3, #16]
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	4413      	add	r3, r2
 80078ea:	1e5a      	subs	r2, r3, #1
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078f4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	8afa      	ldrh	r2, [r7, #22]
 80078fc:	fb03 f202 	mul.w	r2, r3, r2
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	4413      	add	r3, r2
 800790c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007910:	691a      	ldr	r2, [r3, #16]
 8007912:	8afb      	ldrh	r3, [r7, #22]
 8007914:	04d9      	lsls	r1, r3, #19
 8007916:	4b38      	ldr	r3, [pc, #224]	; (80079f8 <USB_EPStartXfer+0x52c>)
 8007918:	400b      	ands	r3, r1
 800791a:	69b9      	ldr	r1, [r7, #24]
 800791c:	0148      	lsls	r0, r1, #5
 800791e:	69f9      	ldr	r1, [r7, #28]
 8007920:	4401      	add	r1, r0
 8007922:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007926:	4313      	orrs	r3, r2
 8007928:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	015a      	lsls	r2, r3, #5
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	4413      	add	r3, r2
 8007932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007936:	691a      	ldr	r2, [r3, #16]
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	6a1b      	ldr	r3, [r3, #32]
 800793c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007940:	69b9      	ldr	r1, [r7, #24]
 8007942:	0148      	lsls	r0, r1, #5
 8007944:	69f9      	ldr	r1, [r7, #28]
 8007946:	4401      	add	r1, r0
 8007948:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800794c:	4313      	orrs	r3, r2
 800794e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007950:	79fb      	ldrb	r3, [r7, #7]
 8007952:	2b01      	cmp	r3, #1
 8007954:	d10d      	bne.n	8007972 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d009      	beq.n	8007972 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	68d9      	ldr	r1, [r3, #12]
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	015a      	lsls	r2, r3, #5
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	4413      	add	r3, r2
 800796a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796e:	460a      	mov	r2, r1
 8007970:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	791b      	ldrb	r3, [r3, #4]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d128      	bne.n	80079cc <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007986:	2b00      	cmp	r3, #0
 8007988:	d110      	bne.n	80079ac <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	4413      	add	r3, r2
 8007992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	69ba      	ldr	r2, [r7, #24]
 800799a:	0151      	lsls	r1, r2, #5
 800799c:	69fa      	ldr	r2, [r7, #28]
 800799e:	440a      	add	r2, r1
 80079a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	e00f      	b.n	80079cc <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	015a      	lsls	r2, r3, #5
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	0151      	lsls	r1, r2, #5
 80079be:	69fa      	ldr	r2, [r7, #28]
 80079c0:	440a      	add	r2, r1
 80079c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079ca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	69ba      	ldr	r2, [r7, #24]
 80079dc:	0151      	lsls	r1, r2, #5
 80079de:	69fa      	ldr	r2, [r7, #28]
 80079e0:	440a      	add	r2, r1
 80079e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3720      	adds	r7, #32
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	1ff80000 	.word	0x1ff80000

080079fc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b087      	sub	sp, #28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007a06:	2300      	movs	r3, #0
 8007a08:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	785b      	ldrb	r3, [r3, #1]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d14a      	bne.n	8007ab0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a32:	f040 8086 	bne.w	8007b42 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	7812      	ldrb	r2, [r2, #0]
 8007a4a:	0151      	lsls	r1, r2, #5
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	440a      	add	r2, r1
 8007a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a58:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	015a      	lsls	r2, r3, #5
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	683a      	ldr	r2, [r7, #0]
 8007a6c:	7812      	ldrb	r2, [r2, #0]
 8007a6e:	0151      	lsls	r1, r2, #5
 8007a70:	693a      	ldr	r2, [r7, #16]
 8007a72:	440a      	add	r2, r1
 8007a74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3301      	adds	r3, #1
 8007a82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f242 7210 	movw	r2, #10000	; 0x2710
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d902      	bls.n	8007a94 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	75fb      	strb	r3, [r7, #23]
          break;
 8007a92:	e056      	b.n	8007b42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	015a      	lsls	r2, r3, #5
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007aac:	d0e7      	beq.n	8007a7e <USB_EPStopXfer+0x82>
 8007aae:	e048      	b.n	8007b42 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	015a      	lsls	r2, r3, #5
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	4413      	add	r3, r2
 8007aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ac8:	d13b      	bne.n	8007b42 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	683a      	ldr	r2, [r7, #0]
 8007adc:	7812      	ldrb	r2, [r2, #0]
 8007ade:	0151      	lsls	r1, r2, #5
 8007ae0:	693a      	ldr	r2, [r7, #16]
 8007ae2:	440a      	add	r2, r1
 8007ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ae8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007aec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	015a      	lsls	r2, r3, #5
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	4413      	add	r3, r2
 8007af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	7812      	ldrb	r2, [r2, #0]
 8007b02:	0151      	lsls	r1, r2, #5
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	440a      	add	r2, r1
 8007b08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	3301      	adds	r3, #1
 8007b16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d902      	bls.n	8007b28 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	75fb      	strb	r3, [r7, #23]
          break;
 8007b26:	e00c      	b.n	8007b42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	015a      	lsls	r2, r3, #5
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	4413      	add	r3, r2
 8007b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b40:	d0e7      	beq.n	8007b12 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	371c      	adds	r7, #28
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bc80      	pop	{r7}
 8007b4c:	4770      	bx	lr

08007b4e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007b4e:	b480      	push	{r7}
 8007b50:	b089      	sub	sp, #36	; 0x24
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	60f8      	str	r0, [r7, #12]
 8007b56:	60b9      	str	r1, [r7, #8]
 8007b58:	4611      	mov	r1, r2
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	71fb      	strb	r3, [r7, #7]
 8007b60:	4613      	mov	r3, r2
 8007b62:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007b6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d123      	bne.n	8007bbc <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007b74:	88bb      	ldrh	r3, [r7, #4]
 8007b76:	3303      	adds	r3, #3
 8007b78:	089b      	lsrs	r3, r3, #2
 8007b7a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	61bb      	str	r3, [r7, #24]
 8007b80:	e018      	b.n	8007bb4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007b82:	79fb      	ldrb	r3, [r7, #7]
 8007b84:	031a      	lsls	r2, r3, #12
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b8e:	461a      	mov	r2, r3
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	3301      	adds	r3, #1
 8007bac:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	61bb      	str	r3, [r7, #24]
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d3e2      	bcc.n	8007b82 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3724      	adds	r7, #36	; 0x24
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bc80      	pop	{r7}
 8007bc6:	4770      	bx	lr

08007bc8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b08b      	sub	sp, #44	; 0x2c
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007bde:	88fb      	ldrh	r3, [r7, #6]
 8007be0:	089b      	lsrs	r3, r3, #2
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007be6:	88fb      	ldrh	r3, [r7, #6]
 8007be8:	f003 0303 	and.w	r3, r3, #3
 8007bec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007bee:	2300      	movs	r3, #0
 8007bf0:	623b      	str	r3, [r7, #32]
 8007bf2:	e014      	b.n	8007c1e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfe:	601a      	str	r2, [r3, #0]
    pDest++;
 8007c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c02:	3301      	adds	r3, #1
 8007c04:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c08:	3301      	adds	r3, #1
 8007c0a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0e:	3301      	adds	r3, #1
 8007c10:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c14:	3301      	adds	r3, #1
 8007c16:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	623b      	str	r3, [r7, #32]
 8007c1e:	6a3a      	ldr	r2, [r7, #32]
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d3e6      	bcc.n	8007bf4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007c26:	8bfb      	ldrh	r3, [r7, #30]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d01e      	beq.n	8007c6a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c36:	461a      	mov	r2, r3
 8007c38:	f107 0310 	add.w	r3, r7, #16
 8007c3c:	6812      	ldr	r2, [r2, #0]
 8007c3e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	6a3b      	ldr	r3, [r7, #32]
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	00db      	lsls	r3, r3, #3
 8007c48:	fa22 f303 	lsr.w	r3, r2, r3
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c50:	701a      	strb	r2, [r3, #0]
      i++;
 8007c52:	6a3b      	ldr	r3, [r7, #32]
 8007c54:	3301      	adds	r3, #1
 8007c56:	623b      	str	r3, [r7, #32]
      pDest++;
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007c5e:	8bfb      	ldrh	r3, [r7, #30]
 8007c60:	3b01      	subs	r3, #1
 8007c62:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007c64:	8bfb      	ldrh	r3, [r7, #30]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1ea      	bne.n	8007c40 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	372c      	adds	r7, #44	; 0x2c
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bc80      	pop	{r7}
 8007c74:	4770      	bx	lr

08007c76 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b085      	sub	sp, #20
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
 8007c7e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	785b      	ldrb	r3, [r3, #1]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d12c      	bne.n	8007cec <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	015a      	lsls	r2, r3, #5
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	4413      	add	r3, r2
 8007c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	db12      	blt.n	8007cca <USB_EPSetStall+0x54>
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00f      	beq.n	8007cca <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	015a      	lsls	r2, r3, #5
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68ba      	ldr	r2, [r7, #8]
 8007cba:	0151      	lsls	r1, r2, #5
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	440a      	add	r2, r1
 8007cc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007cc8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	015a      	lsls	r2, r3, #5
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68ba      	ldr	r2, [r7, #8]
 8007cda:	0151      	lsls	r1, r2, #5
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	440a      	add	r2, r1
 8007ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ce4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ce8:	6013      	str	r3, [r2, #0]
 8007cea:	e02b      	b.n	8007d44 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	015a      	lsls	r2, r3, #5
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	db12      	blt.n	8007d24 <USB_EPSetStall+0xae>
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00f      	beq.n	8007d24 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	0151      	lsls	r1, r2, #5
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	440a      	add	r2, r1
 8007d1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d22:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	0151      	lsls	r1, r2, #5
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	440a      	add	r2, r1
 8007d3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bc80      	pop	{r7}
 8007d4e:	4770      	bx	lr

08007d50 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	785b      	ldrb	r3, [r3, #1]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d128      	bne.n	8007dbe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	015a      	lsls	r2, r3, #5
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	4413      	add	r3, r2
 8007d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	0151      	lsls	r1, r2, #5
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	440a      	add	r2, r1
 8007d82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d8a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	791b      	ldrb	r3, [r3, #4]
 8007d90:	2b03      	cmp	r3, #3
 8007d92:	d003      	beq.n	8007d9c <USB_EPClearStall+0x4c>
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	791b      	ldrb	r3, [r3, #4]
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d138      	bne.n	8007e0e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	015a      	lsls	r2, r3, #5
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	4413      	add	r3, r2
 8007da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68ba      	ldr	r2, [r7, #8]
 8007dac:	0151      	lsls	r1, r2, #5
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	440a      	add	r2, r1
 8007db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dba:	6013      	str	r3, [r2, #0]
 8007dbc:	e027      	b.n	8007e0e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	015a      	lsls	r2, r3, #5
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	0151      	lsls	r1, r2, #5
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	440a      	add	r2, r1
 8007dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dd8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ddc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	791b      	ldrb	r3, [r3, #4]
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d003      	beq.n	8007dee <USB_EPClearStall+0x9e>
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	791b      	ldrb	r3, [r3, #4]
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d10f      	bne.n	8007e0e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	015a      	lsls	r2, r3, #5
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	0151      	lsls	r1, r2, #5
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	440a      	add	r2, r1
 8007e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e0c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3714      	adds	r7, #20
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bc80      	pop	{r7}
 8007e18:	4770      	bx	lr

08007e1a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b085      	sub	sp, #20
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
 8007e22:	460b      	mov	r3, r1
 8007e24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e38:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007e3c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	78fb      	ldrb	r3, [r7, #3]
 8007e48:	011b      	lsls	r3, r3, #4
 8007e4a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007e4e:	68f9      	ldr	r1, [r7, #12]
 8007e50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e54:	4313      	orrs	r3, r2
 8007e56:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bc80      	pop	{r7}
 8007e62:	4770      	bx	lr

08007e64 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007e7e:	f023 0303 	bic.w	r3, r3, #3
 8007e82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e92:	f023 0302 	bic.w	r3, r3, #2
 8007e96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3714      	adds	r7, #20
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bc80      	pop	{r7}
 8007ea2:	4770      	bx	lr

08007ea4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ebe:	f023 0303 	bic.w	r3, r3, #3
 8007ec2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ed2:	f043 0302 	orr.w	r3, r3, #2
 8007ed6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bc80      	pop	{r7}
 8007ee2:	4770      	bx	lr

08007ee4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	695b      	ldr	r3, [r3, #20]
 8007ef0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	4013      	ands	r3, r2
 8007efa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007efc:	68fb      	ldr	r3, [r7, #12]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bc80      	pop	{r7}
 8007f06:	4770      	bx	lr

08007f08 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f24:	69db      	ldr	r3, [r3, #28]
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	4013      	ands	r3, r2
 8007f2a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	0c1b      	lsrs	r3, r3, #16
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bc80      	pop	{r7}
 8007f38:	4770      	bx	lr

08007f3a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b085      	sub	sp, #20
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f56:	69db      	ldr	r3, [r3, #28]
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	b29b      	uxth	r3, r3
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bc80      	pop	{r7}
 8007f6a:	4770      	bx	lr

08007f6c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	460b      	mov	r3, r1
 8007f76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007f7c:	78fb      	ldrb	r3, [r7, #3]
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f92:	695b      	ldr	r3, [r3, #20]
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	4013      	ands	r3, r2
 8007f98:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f9a:	68bb      	ldr	r3, [r7, #8]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3714      	adds	r7, #20
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bc80      	pop	{r7}
 8007fa4:	4770      	bx	lr

08007fa6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b087      	sub	sp, #28
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
 8007fae:	460b      	mov	r3, r1
 8007fb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007fca:	78fb      	ldrb	r3, [r7, #3]
 8007fcc:	f003 030f 	and.w	r3, r3, #15
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8007fd6:	01db      	lsls	r3, r3, #7
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ff4:	68bb      	ldr	r3, [r7, #8]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	371c      	adds	r7, #28
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bc80      	pop	{r7}
 8007ffe:	4770      	bx	lr

08008000 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	f003 0301 	and.w	r3, r3, #1
}
 8008010:	4618      	mov	r0, r3
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	bc80      	pop	{r7}
 8008018:	4770      	bx	lr

0800801a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800801a:	b480      	push	{r7}
 800801c:	b085      	sub	sp, #20
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008034:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008038:	f023 0307 	bic.w	r3, r3, #7
 800803c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800804c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008050:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	bc80      	pop	{r7}
 800805c:	4770      	bx	lr
	...

08008060 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	460b      	mov	r3, r1
 800806a:	607a      	str	r2, [r7, #4]
 800806c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	333c      	adds	r3, #60	; 0x3c
 8008076:	3304      	adds	r3, #4
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	4a25      	ldr	r2, [pc, #148]	; (8008114 <USB_EP0_OutStart+0xb4>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d90a      	bls.n	800809a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008090:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008094:	d101      	bne.n	800809a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	e037      	b.n	800810a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080a0:	461a      	mov	r2, r3
 80080a2:	2300      	movs	r3, #0
 80080a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080c8:	f043 0318 	orr.w	r3, r3, #24
 80080cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	697a      	ldr	r2, [r7, #20]
 80080d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80080e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80080e2:	7afb      	ldrb	r3, [r7, #11]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d10f      	bne.n	8008108 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ee:	461a      	mov	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	697a      	ldr	r2, [r7, #20]
 80080fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008102:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008106:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	371c      	adds	r7, #28
 800810e:	46bd      	mov	sp, r7
 8008110:	bc80      	pop	{r7}
 8008112:	4770      	bx	lr
 8008114:	4f54300a 	.word	0x4f54300a

08008118 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008120:	2300      	movs	r3, #0
 8008122:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	3301      	adds	r3, #1
 8008128:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	4a12      	ldr	r2, [pc, #72]	; (8008178 <USB_CoreReset+0x60>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d901      	bls.n	8008136 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e01b      	b.n	800816e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	2b00      	cmp	r3, #0
 800813c:	daf2      	bge.n	8008124 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800813e:	2300      	movs	r3, #0
 8008140:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	f043 0201 	orr.w	r2, r3, #1
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3301      	adds	r3, #1
 8008152:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	4a08      	ldr	r2, [pc, #32]	; (8008178 <USB_CoreReset+0x60>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d901      	bls.n	8008160 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800815c:	2303      	movs	r3, #3
 800815e:	e006      	b.n	800816e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	f003 0301 	and.w	r3, r3, #1
 8008168:	2b01      	cmp	r3, #1
 800816a:	d0f0      	beq.n	800814e <USB_CoreReset+0x36>

  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3714      	adds	r7, #20
 8008172:	46bd      	mov	sp, r7
 8008174:	bc80      	pop	{r7}
 8008176:	4770      	bx	lr
 8008178:	00030d40 	.word	0x00030d40

0800817c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	460b      	mov	r3, r1
 8008186:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008188:	2300      	movs	r3, #0
 800818a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	7c1b      	ldrb	r3, [r3, #16]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d115      	bne.n	80081c0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008198:	2202      	movs	r2, #2
 800819a:	2181      	movs	r1, #129	; 0x81
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f001 ff42 	bl	800a026 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80081a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081ac:	2202      	movs	r2, #2
 80081ae:	2101      	movs	r1, #1
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f001 ff38 	bl	800a026 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2201      	movs	r2, #1
 80081ba:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80081be:	e012      	b.n	80081e6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80081c0:	2340      	movs	r3, #64	; 0x40
 80081c2:	2202      	movs	r2, #2
 80081c4:	2181      	movs	r1, #129	; 0x81
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f001 ff2d 	bl	800a026 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80081d2:	2340      	movs	r3, #64	; 0x40
 80081d4:	2202      	movs	r2, #2
 80081d6:	2101      	movs	r1, #1
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f001 ff24 	bl	800a026 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80081e6:	2308      	movs	r3, #8
 80081e8:	2203      	movs	r2, #3
 80081ea:	2182      	movs	r1, #130	; 0x82
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f001 ff1a 	bl	800a026 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80081f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80081fc:	f002 f866 	bl	800a2cc <malloc>
 8008200:	4603      	mov	r3, r0
 8008202:	461a      	mov	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008210:	2b00      	cmp	r3, #0
 8008212:	d102      	bne.n	800821a <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8008214:	2301      	movs	r3, #1
 8008216:	73fb      	strb	r3, [r7, #15]
 8008218:	e026      	b.n	8008268 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008220:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2200      	movs	r2, #0
 8008230:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	2200      	movs	r2, #0
 8008238:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	7c1b      	ldrb	r3, [r3, #16]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d109      	bne.n	8008258 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800824a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800824e:	2101      	movs	r1, #1
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f001 ffd8 	bl	800a206 <USBD_LL_PrepareReceive>
 8008256:	e007      	b.n	8008268 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800825e:	2340      	movs	r3, #64	; 0x40
 8008260:	2101      	movs	r1, #1
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f001 ffcf 	bl	800a206 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008268:	7bfb      	ldrb	r3, [r7, #15]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b084      	sub	sp, #16
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
 800827a:	460b      	mov	r3, r1
 800827c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008282:	2181      	movs	r1, #129	; 0x81
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f001 fef4 	bl	800a072 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008290:	2101      	movs	r1, #1
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f001 feed 	bl	800a072 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80082a0:	2182      	movs	r1, #130	; 0x82
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f001 fee5 	bl	800a072 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00e      	beq.n	80082d6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082c8:	4618      	mov	r0, r3
 80082ca:	f002 f807 	bl	800a2dc <free>
    pdev->pClassData = NULL;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b086      	sub	sp, #24
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80082f2:	2300      	movs	r3, #0
 80082f4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008306:	2b00      	cmp	r3, #0
 8008308:	d039      	beq.n	800837e <USBD_CDC_Setup+0x9e>
 800830a:	2b20      	cmp	r3, #32
 800830c:	d17f      	bne.n	800840e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	88db      	ldrh	r3, [r3, #6]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d029      	beq.n	800836a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	b25b      	sxtb	r3, r3
 800831c:	2b00      	cmp	r3, #0
 800831e:	da11      	bge.n	8008344 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	683a      	ldr	r2, [r7, #0]
 800832a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800832c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800832e:	683a      	ldr	r2, [r7, #0]
 8008330:	88d2      	ldrh	r2, [r2, #6]
 8008332:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008334:	6939      	ldr	r1, [r7, #16]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	88db      	ldrh	r3, [r3, #6]
 800833a:	461a      	mov	r2, r3
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f001 fa42 	bl	80097c6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008342:	e06b      	b.n	800841c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	785a      	ldrb	r2, [r3, #1]
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	88db      	ldrh	r3, [r3, #6]
 8008352:	b2da      	uxtb	r2, r3
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800835a:	6939      	ldr	r1, [r7, #16]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	88db      	ldrh	r3, [r3, #6]
 8008360:	461a      	mov	r2, r3
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f001 fa5d 	bl	8009822 <USBD_CtlPrepareRx>
      break;
 8008368:	e058      	b.n	800841c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	7850      	ldrb	r0, [r2, #1]
 8008376:	2200      	movs	r2, #0
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	4798      	blx	r3
      break;
 800837c:	e04e      	b.n	800841c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	785b      	ldrb	r3, [r3, #1]
 8008382:	2b0b      	cmp	r3, #11
 8008384:	d02e      	beq.n	80083e4 <USBD_CDC_Setup+0x104>
 8008386:	2b0b      	cmp	r3, #11
 8008388:	dc38      	bgt.n	80083fc <USBD_CDC_Setup+0x11c>
 800838a:	2b00      	cmp	r3, #0
 800838c:	d002      	beq.n	8008394 <USBD_CDC_Setup+0xb4>
 800838e:	2b0a      	cmp	r3, #10
 8008390:	d014      	beq.n	80083bc <USBD_CDC_Setup+0xdc>
 8008392:	e033      	b.n	80083fc <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800839a:	2b03      	cmp	r3, #3
 800839c:	d107      	bne.n	80083ae <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800839e:	f107 030c 	add.w	r3, r7, #12
 80083a2:	2202      	movs	r2, #2
 80083a4:	4619      	mov	r1, r3
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 fa0d 	bl	80097c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083ac:	e02e      	b.n	800840c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80083ae:	6839      	ldr	r1, [r7, #0]
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f001 f99e 	bl	80096f2 <USBD_CtlError>
            ret = USBD_FAIL;
 80083b6:	2302      	movs	r3, #2
 80083b8:	75fb      	strb	r3, [r7, #23]
          break;
 80083ba:	e027      	b.n	800840c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083c2:	2b03      	cmp	r3, #3
 80083c4:	d107      	bne.n	80083d6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80083c6:	f107 030f 	add.w	r3, r7, #15
 80083ca:	2201      	movs	r2, #1
 80083cc:	4619      	mov	r1, r3
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f001 f9f9 	bl	80097c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083d4:	e01a      	b.n	800840c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f001 f98a 	bl	80096f2 <USBD_CtlError>
            ret = USBD_FAIL;
 80083de:	2302      	movs	r3, #2
 80083e0:	75fb      	strb	r3, [r7, #23]
          break;
 80083e2:	e013      	b.n	800840c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ea:	2b03      	cmp	r3, #3
 80083ec:	d00d      	beq.n	800840a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80083ee:	6839      	ldr	r1, [r7, #0]
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f001 f97e 	bl	80096f2 <USBD_CtlError>
            ret = USBD_FAIL;
 80083f6:	2302      	movs	r3, #2
 80083f8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80083fa:	e006      	b.n	800840a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f001 f977 	bl	80096f2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008404:	2302      	movs	r3, #2
 8008406:	75fb      	strb	r3, [r7, #23]
          break;
 8008408:	e000      	b.n	800840c <USBD_CDC_Setup+0x12c>
          break;
 800840a:	bf00      	nop
      }
      break;
 800840c:	e006      	b.n	800841c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800840e:	6839      	ldr	r1, [r7, #0]
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f001 f96e 	bl	80096f2 <USBD_CtlError>
      ret = USBD_FAIL;
 8008416:	2302      	movs	r3, #2
 8008418:	75fb      	strb	r3, [r7, #23]
      break;
 800841a:	bf00      	nop
  }

  return ret;
 800841c:	7dfb      	ldrb	r3, [r7, #23]
}
 800841e:	4618      	mov	r0, r3
 8008420:	3718      	adds	r7, #24
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b084      	sub	sp, #16
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
 800842e:	460b      	mov	r3, r1
 8008430:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008438:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008440:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008448:	2b00      	cmp	r3, #0
 800844a:	d03a      	beq.n	80084c2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800844c:	78fa      	ldrb	r2, [r7, #3]
 800844e:	6879      	ldr	r1, [r7, #4]
 8008450:	4613      	mov	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	4413      	add	r3, r2
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	440b      	add	r3, r1
 800845a:	331c      	adds	r3, #28
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d029      	beq.n	80084b6 <USBD_CDC_DataIn+0x90>
 8008462:	78fa      	ldrb	r2, [r7, #3]
 8008464:	6879      	ldr	r1, [r7, #4]
 8008466:	4613      	mov	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	440b      	add	r3, r1
 8008470:	331c      	adds	r3, #28
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	78f9      	ldrb	r1, [r7, #3]
 8008476:	68b8      	ldr	r0, [r7, #8]
 8008478:	460b      	mov	r3, r1
 800847a:	00db      	lsls	r3, r3, #3
 800847c:	440b      	add	r3, r1
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	4403      	add	r3, r0
 8008482:	3344      	adds	r3, #68	; 0x44
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	fbb2 f1f3 	udiv	r1, r2, r3
 800848a:	fb01 f303 	mul.w	r3, r1, r3
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	2b00      	cmp	r3, #0
 8008492:	d110      	bne.n	80084b6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008494:	78fa      	ldrb	r2, [r7, #3]
 8008496:	6879      	ldr	r1, [r7, #4]
 8008498:	4613      	mov	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4413      	add	r3, r2
 800849e:	009b      	lsls	r3, r3, #2
 80084a0:	440b      	add	r3, r1
 80084a2:	331c      	adds	r3, #28
 80084a4:	2200      	movs	r2, #0
 80084a6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80084a8:	78f9      	ldrb	r1, [r7, #3]
 80084aa:	2300      	movs	r3, #0
 80084ac:	2200      	movs	r2, #0
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f001 fe86 	bl	800a1c0 <USBD_LL_Transmit>
 80084b4:	e003      	b.n	80084be <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80084be:	2300      	movs	r3, #0
 80084c0:	e000      	b.n	80084c4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80084c2:	2302      	movs	r3, #2
  }
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	460b      	mov	r3, r1
 80084d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084de:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80084e0:	78fb      	ldrb	r3, [r7, #3]
 80084e2:	4619      	mov	r1, r3
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f001 feb1 	bl	800a24c <USBD_LL_GetRxDataSize>
 80084ea:	4602      	mov	r2, r0
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00d      	beq.n	8008518 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008510:	4611      	mov	r1, r2
 8008512:	4798      	blx	r3

    return USBD_OK;
 8008514:	2300      	movs	r3, #0
 8008516:	e000      	b.n	800851a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008518:	2302      	movs	r3, #2
  }
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b084      	sub	sp, #16
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008530:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008538:	2b00      	cmp	r3, #0
 800853a:	d015      	beq.n	8008568 <USBD_CDC_EP0_RxReady+0x46>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008542:	2bff      	cmp	r3, #255	; 0xff
 8008544:	d010      	beq.n	8008568 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008554:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800855c:	b292      	uxth	r2, r2
 800855e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	22ff      	movs	r2, #255	; 0xff
 8008564:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
	...

08008574 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2243      	movs	r2, #67	; 0x43
 8008580:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008582:	4b03      	ldr	r3, [pc, #12]	; (8008590 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008584:	4618      	mov	r0, r3
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	bc80      	pop	{r7}
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	200000f8 	.word	0x200000f8

08008594 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2243      	movs	r2, #67	; 0x43
 80085a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80085a2:	4b03      	ldr	r3, [pc, #12]	; (80085b0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bc80      	pop	{r7}
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	200000b4 	.word	0x200000b4

080085b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2243      	movs	r2, #67	; 0x43
 80085c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80085c2:	4b03      	ldr	r3, [pc, #12]	; (80085d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bc80      	pop	{r7}
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	2000013c 	.word	0x2000013c

080085d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	220a      	movs	r2, #10
 80085e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80085e2:	4b03      	ldr	r3, [pc, #12]	; (80085f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bc80      	pop	{r7}
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	20000070 	.word	0x20000070

080085f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80085fe:	2302      	movs	r3, #2
 8008600:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d005      	beq.n	8008614 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	683a      	ldr	r2, [r7, #0]
 800860c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008614:	7bfb      	ldrb	r3, [r7, #15]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	bc80      	pop	{r7}
 800861e:	4770      	bx	lr

08008620 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008620:	b480      	push	{r7}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	4613      	mov	r3, r2
 800862c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008634:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	68ba      	ldr	r2, [r7, #8]
 800863a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800863e:	88fa      	ldrh	r2, [r7, #6]
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	371c      	adds	r7, #28
 800864c:	46bd      	mov	sp, r7
 800864e:	bc80      	pop	{r7}
 8008650:	4770      	bx	lr

08008652 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008652:	b480      	push	{r7}
 8008654:	b085      	sub	sp, #20
 8008656:	af00      	add	r7, sp, #0
 8008658:	6078      	str	r0, [r7, #4]
 800865a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008662:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	683a      	ldr	r2, [r7, #0]
 8008668:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3714      	adds	r7, #20
 8008672:	46bd      	mov	sp, r7
 8008674:	bc80      	pop	{r7}
 8008676:	4770      	bx	lr

08008678 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008686:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800868e:	2b00      	cmp	r3, #0
 8008690:	d01c      	beq.n	80086cc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008698:	2b00      	cmp	r3, #0
 800869a:	d115      	bne.n	80086c8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2201      	movs	r2, #1
 80086a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	2181      	movs	r1, #129	; 0x81
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f001 fd7e 	bl	800a1c0 <USBD_LL_Transmit>

      return USBD_OK;
 80086c4:	2300      	movs	r3, #0
 80086c6:	e002      	b.n	80086ce <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e000      	b.n	80086ce <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80086cc:	2302      	movs	r3, #2
  }
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086e4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d017      	beq.n	8008720 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	7c1b      	ldrb	r3, [r3, #16]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d109      	bne.n	800870c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008702:	2101      	movs	r1, #1
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f001 fd7e 	bl	800a206 <USBD_LL_PrepareReceive>
 800870a:	e007      	b.n	800871c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008712:	2340      	movs	r3, #64	; 0x40
 8008714:	2101      	movs	r1, #1
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f001 fd75 	bl	800a206 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	e000      	b.n	8008722 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008720:	2302      	movs	r3, #2
  }
}
 8008722:	4618      	mov	r0, r3
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	60f8      	str	r0, [r7, #12]
 8008732:	60b9      	str	r1, [r7, #8]
 8008734:	4613      	mov	r3, r2
 8008736:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d101      	bne.n	8008742 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800873e:	2302      	movs	r3, #2
 8008740:	e01a      	b.n	8008778 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008748:	2b00      	cmp	r3, #0
 800874a:	d003      	beq.n	8008754 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d003      	beq.n	8008762 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	79fa      	ldrb	r2, [r7, #7]
 800876e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f001 fbf3 	bl	8009f5c <USBD_LL_Init>

  return USBD_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800878a:	2300      	movs	r3, #0
 800878c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d006      	beq.n	80087a2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800879c:	2300      	movs	r3, #0
 800879e:	73fb      	strb	r3, [r7, #15]
 80087a0:	e001      	b.n	80087a6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80087a2:	2302      	movs	r3, #2
 80087a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80087a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bc80      	pop	{r7}
 80087b0:	4770      	bx	lr

080087b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b082      	sub	sp, #8
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f001 fc18 	bl	8009ff0 <USBD_LL_Start>

  return USBD_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b083      	sub	sp, #12
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	bc80      	pop	{r7}
 80087dc:	4770      	bx	lr

080087de <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b084      	sub	sp, #16
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
 80087e6:	460b      	mov	r3, r1
 80087e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80087ea:	2302      	movs	r3, #2
 80087ec:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00c      	beq.n	8008812 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	78fa      	ldrb	r2, [r7, #3]
 8008802:	4611      	mov	r1, r2
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	4798      	blx	r3
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800880e:	2300      	movs	r3, #0
 8008810:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008812:	7bfb      	ldrb	r3, [r7, #15]
}
 8008814:	4618      	mov	r0, r3
 8008816:	3710      	adds	r7, #16
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	460b      	mov	r3, r1
 8008826:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	78fa      	ldrb	r2, [r7, #3]
 8008832:	4611      	mov	r1, r2
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	4798      	blx	r3

  return USBD_OK;
 8008838:	2300      	movs	r3, #0
}
 800883a:	4618      	mov	r0, r3
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b082      	sub	sp, #8
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008852:	6839      	ldr	r1, [r7, #0]
 8008854:	4618      	mov	r0, r3
 8008856:	f000 ff10 	bl	800967a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2201      	movs	r2, #1
 800885e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008868:	461a      	mov	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008876:	f003 031f 	and.w	r3, r3, #31
 800887a:	2b02      	cmp	r3, #2
 800887c:	d016      	beq.n	80088ac <USBD_LL_SetupStage+0x6a>
 800887e:	2b02      	cmp	r3, #2
 8008880:	d81c      	bhi.n	80088bc <USBD_LL_SetupStage+0x7a>
 8008882:	2b00      	cmp	r3, #0
 8008884:	d002      	beq.n	800888c <USBD_LL_SetupStage+0x4a>
 8008886:	2b01      	cmp	r3, #1
 8008888:	d008      	beq.n	800889c <USBD_LL_SetupStage+0x5a>
 800888a:	e017      	b.n	80088bc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008892:	4619      	mov	r1, r3
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 fa03 	bl	8008ca0 <USBD_StdDevReq>
      break;
 800889a:	e01a      	b.n	80088d2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80088a2:	4619      	mov	r1, r3
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fa65 	bl	8008d74 <USBD_StdItfReq>
      break;
 80088aa:	e012      	b.n	80088d2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80088b2:	4619      	mov	r1, r3
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 faa5 	bl	8008e04 <USBD_StdEPReq>
      break;
 80088ba:	e00a      	b.n	80088d2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80088c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	4619      	mov	r1, r3
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f001 fbf0 	bl	800a0b0 <USBD_LL_StallEP>
      break;
 80088d0:	bf00      	nop
  }

  return USBD_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	460b      	mov	r3, r1
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80088ea:	7afb      	ldrb	r3, [r7, #11]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d14b      	bne.n	8008988 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80088f6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088fe:	2b03      	cmp	r3, #3
 8008900:	d134      	bne.n	800896c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	68da      	ldr	r2, [r3, #12]
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	691b      	ldr	r3, [r3, #16]
 800890a:	429a      	cmp	r2, r3
 800890c:	d919      	bls.n	8008942 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	68da      	ldr	r2, [r3, #12]
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	691b      	ldr	r3, [r3, #16]
 8008916:	1ad2      	subs	r2, r2, r3
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	68da      	ldr	r2, [r3, #12]
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008924:	429a      	cmp	r2, r3
 8008926:	d203      	bcs.n	8008930 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800892c:	b29b      	uxth	r3, r3
 800892e:	e002      	b.n	8008936 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008934:	b29b      	uxth	r3, r3
 8008936:	461a      	mov	r2, r3
 8008938:	6879      	ldr	r1, [r7, #4]
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f000 ff8f 	bl	800985e <USBD_CtlContinueRx>
 8008940:	e038      	b.n	80089b4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00a      	beq.n	8008964 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008954:	2b03      	cmp	r3, #3
 8008956:	d105      	bne.n	8008964 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f000 ff8c 	bl	8009882 <USBD_CtlSendStatus>
 800896a:	e023      	b.n	80089b4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008972:	2b05      	cmp	r3, #5
 8008974:	d11e      	bne.n	80089b4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800897e:	2100      	movs	r1, #0
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f001 fb95 	bl	800a0b0 <USBD_LL_StallEP>
 8008986:	e015      	b.n	80089b4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800898e:	699b      	ldr	r3, [r3, #24]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00d      	beq.n	80089b0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800899a:	2b03      	cmp	r3, #3
 800899c:	d108      	bne.n	80089b0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	7afa      	ldrb	r2, [r7, #11]
 80089a8:	4611      	mov	r1, r2
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	4798      	blx	r3
 80089ae:	e001      	b.n	80089b4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80089b0:	2302      	movs	r3, #2
 80089b2:	e000      	b.n	80089b6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3718      	adds	r7, #24
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b086      	sub	sp, #24
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	60f8      	str	r0, [r7, #12]
 80089c6:	460b      	mov	r3, r1
 80089c8:	607a      	str	r2, [r7, #4]
 80089ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80089cc:	7afb      	ldrb	r3, [r7, #11]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d17f      	bne.n	8008ad2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	3314      	adds	r3, #20
 80089d6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d15c      	bne.n	8008a9c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	68da      	ldr	r2, [r3, #12]
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d915      	bls.n	8008a1a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	68da      	ldr	r2, [r3, #12]
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	1ad2      	subs	r2, r2, r3
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	461a      	mov	r2, r3
 8008a04:	6879      	ldr	r1, [r7, #4]
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f000 fef9 	bl	80097fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	2200      	movs	r2, #0
 8008a10:	2100      	movs	r1, #0
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f001 fbf7 	bl	800a206 <USBD_LL_PrepareReceive>
 8008a18:	e04e      	b.n	8008ab8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	6912      	ldr	r2, [r2, #16]
 8008a22:	fbb3 f1f2 	udiv	r1, r3, r2
 8008a26:	fb01 f202 	mul.w	r2, r1, r2
 8008a2a:	1a9b      	subs	r3, r3, r2
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d11c      	bne.n	8008a6a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	689a      	ldr	r2, [r3, #8]
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d316      	bcc.n	8008a6a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	689a      	ldr	r2, [r3, #8]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d20f      	bcs.n	8008a6a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f000 fed5 	bl	80097fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	2200      	movs	r2, #0
 8008a60:	2100      	movs	r1, #0
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f001 fbcf 	bl	800a206 <USBD_LL_PrepareReceive>
 8008a68:	e026      	b.n	8008ab8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00a      	beq.n	8008a8c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008a7c:	2b03      	cmp	r3, #3
 8008a7e:	d105      	bne.n	8008a8c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008a8c:	2180      	movs	r1, #128	; 0x80
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f001 fb0e 	bl	800a0b0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 ff07 	bl	80098a8 <USBD_CtlReceiveStatus>
 8008a9a:	e00d      	b.n	8008ab8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008aa2:	2b04      	cmp	r3, #4
 8008aa4:	d004      	beq.n	8008ab0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d103      	bne.n	8008ab8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008ab0:	2180      	movs	r1, #128	; 0x80
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f001 fafc 	bl	800a0b0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d11d      	bne.n	8008afe <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f7ff fe81 	bl	80087ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008ad0:	e015      	b.n	8008afe <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ad8:	695b      	ldr	r3, [r3, #20]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00d      	beq.n	8008afa <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008ae4:	2b03      	cmp	r3, #3
 8008ae6:	d108      	bne.n	8008afa <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008aee:	695b      	ldr	r3, [r3, #20]
 8008af0:	7afa      	ldrb	r2, [r7, #11]
 8008af2:	4611      	mov	r1, r2
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	4798      	blx	r3
 8008af8:	e001      	b.n	8008afe <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008afa:	2302      	movs	r3, #2
 8008afc:	e000      	b.n	8008b00 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3718      	adds	r7, #24
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008b10:	2340      	movs	r3, #64	; 0x40
 8008b12:	2200      	movs	r2, #0
 8008b14:	2100      	movs	r1, #0
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f001 fa85 	bl	800a026 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2240      	movs	r2, #64	; 0x40
 8008b28:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008b2c:	2340      	movs	r3, #64	; 0x40
 8008b2e:	2200      	movs	r2, #0
 8008b30:	2180      	movs	r1, #128	; 0x80
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f001 fa77 	bl	800a026 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2240      	movs	r2, #64	; 0x40
 8008b42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d009      	beq.n	8008b80 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	6852      	ldr	r2, [r2, #4]
 8008b78:	b2d2      	uxtb	r2, r2
 8008b7a:	4611      	mov	r1, r2
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	4798      	blx	r3
  }

  return USBD_OK;
 8008b80:	2300      	movs	r3, #0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}

08008b8a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b083      	sub	sp, #12
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	460b      	mov	r3, r1
 8008b94:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	78fa      	ldrb	r2, [r7, #3]
 8008b9a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bc80      	pop	{r7}
 8008ba6:	4770      	bx	lr

08008ba8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2204      	movs	r2, #4
 8008bc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bc80      	pop	{r7}
 8008bce:	4770      	bx	lr

08008bd0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bde:	2b04      	cmp	r3, #4
 8008be0:	d105      	bne.n	8008bee <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bc80      	pop	{r7}
 8008bf8:	4770      	bx	lr

08008bfa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b082      	sub	sp, #8
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c08:	2b03      	cmp	r3, #3
 8008c0a:	d10b      	bne.n	8008c24 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c12:	69db      	ldr	r3, [r3, #28]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d005      	beq.n	8008c24 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c1e:	69db      	ldr	r3, [r3, #28]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b083      	sub	sp, #12
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	460b      	mov	r3, r1
 8008c38:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bc80      	pop	{r7}
 8008c44:	4770      	bx	lr

08008c46 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b083      	sub	sp, #12
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
 8008c4e:	460b      	mov	r3, r1
 8008c50:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bc80      	pop	{r7}
 8008c5c:	4770      	bx	lr

08008c5e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b083      	sub	sp, #12
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bc80      	pop	{r7}
 8008c70:	4770      	bx	lr

08008c72 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b082      	sub	sp, #8
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	6852      	ldr	r2, [r2, #4]
 8008c8e:	b2d2      	uxtb	r2, r2
 8008c90:	4611      	mov	r1, r2
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	4798      	blx	r3

  return USBD_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3708      	adds	r7, #8
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008caa:	2300      	movs	r3, #0
 8008cac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cb6:	2b40      	cmp	r3, #64	; 0x40
 8008cb8:	d005      	beq.n	8008cc6 <USBD_StdDevReq+0x26>
 8008cba:	2b40      	cmp	r3, #64	; 0x40
 8008cbc:	d84f      	bhi.n	8008d5e <USBD_StdDevReq+0xbe>
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d009      	beq.n	8008cd6 <USBD_StdDevReq+0x36>
 8008cc2:	2b20      	cmp	r3, #32
 8008cc4:	d14b      	bne.n	8008d5e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	6839      	ldr	r1, [r7, #0]
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	4798      	blx	r3
      break;
 8008cd4:	e048      	b.n	8008d68 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	785b      	ldrb	r3, [r3, #1]
 8008cda:	2b09      	cmp	r3, #9
 8008cdc:	d839      	bhi.n	8008d52 <USBD_StdDevReq+0xb2>
 8008cde:	a201      	add	r2, pc, #4	; (adr r2, 8008ce4 <USBD_StdDevReq+0x44>)
 8008ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce4:	08008d35 	.word	0x08008d35
 8008ce8:	08008d49 	.word	0x08008d49
 8008cec:	08008d53 	.word	0x08008d53
 8008cf0:	08008d3f 	.word	0x08008d3f
 8008cf4:	08008d53 	.word	0x08008d53
 8008cf8:	08008d17 	.word	0x08008d17
 8008cfc:	08008d0d 	.word	0x08008d0d
 8008d00:	08008d53 	.word	0x08008d53
 8008d04:	08008d2b 	.word	0x08008d2b
 8008d08:	08008d21 	.word	0x08008d21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008d0c:	6839      	ldr	r1, [r7, #0]
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f9dc 	bl	80090cc <USBD_GetDescriptor>
          break;
 8008d14:	e022      	b.n	8008d5c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008d16:	6839      	ldr	r1, [r7, #0]
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fb3f 	bl	800939c <USBD_SetAddress>
          break;
 8008d1e:	e01d      	b.n	8008d5c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fb7e 	bl	8009424 <USBD_SetConfig>
          break;
 8008d28:	e018      	b.n	8008d5c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 fc07 	bl	8009540 <USBD_GetConfig>
          break;
 8008d32:	e013      	b.n	8008d5c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008d34:	6839      	ldr	r1, [r7, #0]
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fc37 	bl	80095aa <USBD_GetStatus>
          break;
 8008d3c:	e00e      	b.n	8008d5c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fc65 	bl	8009610 <USBD_SetFeature>
          break;
 8008d46:	e009      	b.n	8008d5c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008d48:	6839      	ldr	r1, [r7, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 fc74 	bl	8009638 <USBD_ClrFeature>
          break;
 8008d50:	e004      	b.n	8008d5c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008d52:	6839      	ldr	r1, [r7, #0]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fccc 	bl	80096f2 <USBD_CtlError>
          break;
 8008d5a:	bf00      	nop
      }
      break;
 8008d5c:	e004      	b.n	8008d68 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fcc6 	bl	80096f2 <USBD_CtlError>
      break;
 8008d66:	bf00      	nop
  }

  return ret;
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop

08008d74 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d8a:	2b40      	cmp	r3, #64	; 0x40
 8008d8c:	d005      	beq.n	8008d9a <USBD_StdItfReq+0x26>
 8008d8e:	2b40      	cmp	r3, #64	; 0x40
 8008d90:	d82e      	bhi.n	8008df0 <USBD_StdItfReq+0x7c>
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d001      	beq.n	8008d9a <USBD_StdItfReq+0x26>
 8008d96:	2b20      	cmp	r3, #32
 8008d98:	d12a      	bne.n	8008df0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008da0:	3b01      	subs	r3, #1
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	d81d      	bhi.n	8008de2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	889b      	ldrh	r3, [r3, #4]
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d813      	bhi.n	8008dd8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	6839      	ldr	r1, [r7, #0]
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	4798      	blx	r3
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	88db      	ldrh	r3, [r3, #6]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d110      	bne.n	8008dec <USBD_StdItfReq+0x78>
 8008dca:	7bfb      	ldrb	r3, [r7, #15]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10d      	bne.n	8008dec <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fd56 	bl	8009882 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008dd6:	e009      	b.n	8008dec <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fc89 	bl	80096f2 <USBD_CtlError>
          break;
 8008de0:	e004      	b.n	8008dec <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fc84 	bl	80096f2 <USBD_CtlError>
          break;
 8008dea:	e000      	b.n	8008dee <USBD_StdItfReq+0x7a>
          break;
 8008dec:	bf00      	nop
      }
      break;
 8008dee:	e004      	b.n	8008dfa <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 fc7d 	bl	80096f2 <USBD_CtlError>
      break;
 8008df8:	bf00      	nop
  }

  return USBD_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	889b      	ldrh	r3, [r3, #4]
 8008e16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e20:	2b40      	cmp	r3, #64	; 0x40
 8008e22:	d007      	beq.n	8008e34 <USBD_StdEPReq+0x30>
 8008e24:	2b40      	cmp	r3, #64	; 0x40
 8008e26:	f200 8146 	bhi.w	80090b6 <USBD_StdEPReq+0x2b2>
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00a      	beq.n	8008e44 <USBD_StdEPReq+0x40>
 8008e2e:	2b20      	cmp	r3, #32
 8008e30:	f040 8141 	bne.w	80090b6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	4798      	blx	r3
      break;
 8008e42:	e13d      	b.n	80090c0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e4c:	2b20      	cmp	r3, #32
 8008e4e:	d10a      	bne.n	8008e66 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	4798      	blx	r3
 8008e5e:	4603      	mov	r3, r0
 8008e60:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008e62:	7bfb      	ldrb	r3, [r7, #15]
 8008e64:	e12d      	b.n	80090c2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	785b      	ldrb	r3, [r3, #1]
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	d007      	beq.n	8008e7e <USBD_StdEPReq+0x7a>
 8008e6e:	2b03      	cmp	r3, #3
 8008e70:	f300 811b 	bgt.w	80090aa <USBD_StdEPReq+0x2a6>
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d072      	beq.n	8008f5e <USBD_StdEPReq+0x15a>
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d03a      	beq.n	8008ef2 <USBD_StdEPReq+0xee>
 8008e7c:	e115      	b.n	80090aa <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	d002      	beq.n	8008e8e <USBD_StdEPReq+0x8a>
 8008e88:	2b03      	cmp	r3, #3
 8008e8a:	d015      	beq.n	8008eb8 <USBD_StdEPReq+0xb4>
 8008e8c:	e02b      	b.n	8008ee6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e8e:	7bbb      	ldrb	r3, [r7, #14]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d00c      	beq.n	8008eae <USBD_StdEPReq+0xaa>
 8008e94:	7bbb      	ldrb	r3, [r7, #14]
 8008e96:	2b80      	cmp	r3, #128	; 0x80
 8008e98:	d009      	beq.n	8008eae <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008e9a:	7bbb      	ldrb	r3, [r7, #14]
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f001 f906 	bl	800a0b0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008ea4:	2180      	movs	r1, #128	; 0x80
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f001 f902 	bl	800a0b0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008eac:	e020      	b.n	8008ef0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008eae:	6839      	ldr	r1, [r7, #0]
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fc1e 	bl	80096f2 <USBD_CtlError>
              break;
 8008eb6:	e01b      	b.n	8008ef0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	885b      	ldrh	r3, [r3, #2]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10e      	bne.n	8008ede <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008ec0:	7bbb      	ldrb	r3, [r7, #14]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00b      	beq.n	8008ede <USBD_StdEPReq+0xda>
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	2b80      	cmp	r3, #128	; 0x80
 8008eca:	d008      	beq.n	8008ede <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	88db      	ldrh	r3, [r3, #6]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d104      	bne.n	8008ede <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008ed4:	7bbb      	ldrb	r3, [r7, #14]
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f001 f8e9 	bl	800a0b0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fccf 	bl	8009882 <USBD_CtlSendStatus>

              break;
 8008ee4:	e004      	b.n	8008ef0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fc02 	bl	80096f2 <USBD_CtlError>
              break;
 8008eee:	bf00      	nop
          }
          break;
 8008ef0:	e0e0      	b.n	80090b4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d002      	beq.n	8008f02 <USBD_StdEPReq+0xfe>
 8008efc:	2b03      	cmp	r3, #3
 8008efe:	d015      	beq.n	8008f2c <USBD_StdEPReq+0x128>
 8008f00:	e026      	b.n	8008f50 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f02:	7bbb      	ldrb	r3, [r7, #14]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00c      	beq.n	8008f22 <USBD_StdEPReq+0x11e>
 8008f08:	7bbb      	ldrb	r3, [r7, #14]
 8008f0a:	2b80      	cmp	r3, #128	; 0x80
 8008f0c:	d009      	beq.n	8008f22 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008f0e:	7bbb      	ldrb	r3, [r7, #14]
 8008f10:	4619      	mov	r1, r3
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f001 f8cc 	bl	800a0b0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008f18:	2180      	movs	r1, #128	; 0x80
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f001 f8c8 	bl	800a0b0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008f20:	e01c      	b.n	8008f5c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fbe4 	bl	80096f2 <USBD_CtlError>
              break;
 8008f2a:	e017      	b.n	8008f5c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	885b      	ldrh	r3, [r3, #2]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d112      	bne.n	8008f5a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008f34:	7bbb      	ldrb	r3, [r7, #14]
 8008f36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d004      	beq.n	8008f48 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	4619      	mov	r1, r3
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f001 f8d3 	bl	800a0ee <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fc9a 	bl	8009882 <USBD_CtlSendStatus>
              }
              break;
 8008f4e:	e004      	b.n	8008f5a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fbcd 	bl	80096f2 <USBD_CtlError>
              break;
 8008f58:	e000      	b.n	8008f5c <USBD_StdEPReq+0x158>
              break;
 8008f5a:	bf00      	nop
          }
          break;
 8008f5c:	e0aa      	b.n	80090b4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d002      	beq.n	8008f6e <USBD_StdEPReq+0x16a>
 8008f68:	2b03      	cmp	r3, #3
 8008f6a:	d032      	beq.n	8008fd2 <USBD_StdEPReq+0x1ce>
 8008f6c:	e097      	b.n	800909e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f6e:	7bbb      	ldrb	r3, [r7, #14]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d007      	beq.n	8008f84 <USBD_StdEPReq+0x180>
 8008f74:	7bbb      	ldrb	r3, [r7, #14]
 8008f76:	2b80      	cmp	r3, #128	; 0x80
 8008f78:	d004      	beq.n	8008f84 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008f7a:	6839      	ldr	r1, [r7, #0]
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fbb8 	bl	80096f2 <USBD_CtlError>
                break;
 8008f82:	e091      	b.n	80090a8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	da0b      	bge.n	8008fa4 <USBD_StdEPReq+0x1a0>
 8008f8c:	7bbb      	ldrb	r3, [r7, #14]
 8008f8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f92:	4613      	mov	r3, r2
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	4413      	add	r3, r2
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	3310      	adds	r3, #16
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	3304      	adds	r3, #4
 8008fa2:	e00b      	b.n	8008fbc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fa4:	7bbb      	ldrb	r3, [r7, #14]
 8008fa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008faa:	4613      	mov	r3, r2
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	4413      	add	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	4413      	add	r3, r2
 8008fba:	3304      	adds	r3, #4
 8008fbc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	2202      	movs	r2, #2
 8008fc8:	4619      	mov	r1, r3
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fbfb 	bl	80097c6 <USBD_CtlSendData>
              break;
 8008fd0:	e06a      	b.n	80090a8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008fd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	da11      	bge.n	8008ffe <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008fda:	7bbb      	ldrb	r3, [r7, #14]
 8008fdc:	f003 020f 	and.w	r2, r3, #15
 8008fe0:	6879      	ldr	r1, [r7, #4]
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	4413      	add	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	440b      	add	r3, r1
 8008fec:	3318      	adds	r3, #24
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d117      	bne.n	8009024 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fb7b 	bl	80096f2 <USBD_CtlError>
                  break;
 8008ffc:	e054      	b.n	80090a8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008ffe:	7bbb      	ldrb	r3, [r7, #14]
 8009000:	f003 020f 	and.w	r2, r3, #15
 8009004:	6879      	ldr	r1, [r7, #4]
 8009006:	4613      	mov	r3, r2
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	4413      	add	r3, r2
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	440b      	add	r3, r1
 8009010:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d104      	bne.n	8009024 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800901a:	6839      	ldr	r1, [r7, #0]
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fb68 	bl	80096f2 <USBD_CtlError>
                  break;
 8009022:	e041      	b.n	80090a8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009024:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009028:	2b00      	cmp	r3, #0
 800902a:	da0b      	bge.n	8009044 <USBD_StdEPReq+0x240>
 800902c:	7bbb      	ldrb	r3, [r7, #14]
 800902e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009032:	4613      	mov	r3, r2
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	4413      	add	r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	3310      	adds	r3, #16
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	4413      	add	r3, r2
 8009040:	3304      	adds	r3, #4
 8009042:	e00b      	b.n	800905c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009044:	7bbb      	ldrb	r3, [r7, #14]
 8009046:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800904a:	4613      	mov	r3, r2
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	4413      	add	r3, r2
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	4413      	add	r3, r2
 800905a:	3304      	adds	r3, #4
 800905c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800905e:	7bbb      	ldrb	r3, [r7, #14]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d002      	beq.n	800906a <USBD_StdEPReq+0x266>
 8009064:	7bbb      	ldrb	r3, [r7, #14]
 8009066:	2b80      	cmp	r3, #128	; 0x80
 8009068:	d103      	bne.n	8009072 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	2200      	movs	r2, #0
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	e00e      	b.n	8009090 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f001 f858 	bl	800a12c <USBD_LL_IsStallEP>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d003      	beq.n	800908a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	2201      	movs	r2, #1
 8009086:	601a      	str	r2, [r3, #0]
 8009088:	e002      	b.n	8009090 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	2200      	movs	r2, #0
 800908e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	2202      	movs	r2, #2
 8009094:	4619      	mov	r1, r3
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fb95 	bl	80097c6 <USBD_CtlSendData>
              break;
 800909c:	e004      	b.n	80090a8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800909e:	6839      	ldr	r1, [r7, #0]
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fb26 	bl	80096f2 <USBD_CtlError>
              break;
 80090a6:	bf00      	nop
          }
          break;
 80090a8:	e004      	b.n	80090b4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80090aa:	6839      	ldr	r1, [r7, #0]
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f000 fb20 	bl	80096f2 <USBD_CtlError>
          break;
 80090b2:	bf00      	nop
      }
      break;
 80090b4:	e004      	b.n	80090c0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80090b6:	6839      	ldr	r1, [r7, #0]
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 fb1a 	bl	80096f2 <USBD_CtlError>
      break;
 80090be:	bf00      	nop
  }

  return ret;
 80090c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3710      	adds	r7, #16
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
	...

080090cc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80090d6:	2300      	movs	r3, #0
 80090d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80090da:	2300      	movs	r3, #0
 80090dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80090de:	2300      	movs	r3, #0
 80090e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	885b      	ldrh	r3, [r3, #2]
 80090e6:	0a1b      	lsrs	r3, r3, #8
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	3b01      	subs	r3, #1
 80090ec:	2b06      	cmp	r3, #6
 80090ee:	f200 8128 	bhi.w	8009342 <USBD_GetDescriptor+0x276>
 80090f2:	a201      	add	r2, pc, #4	; (adr r2, 80090f8 <USBD_GetDescriptor+0x2c>)
 80090f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f8:	08009115 	.word	0x08009115
 80090fc:	0800912d 	.word	0x0800912d
 8009100:	0800916d 	.word	0x0800916d
 8009104:	08009343 	.word	0x08009343
 8009108:	08009343 	.word	0x08009343
 800910c:	080092e3 	.word	0x080092e3
 8009110:	0800930f 	.word	0x0800930f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	7c12      	ldrb	r2, [r2, #16]
 8009120:	f107 0108 	add.w	r1, r7, #8
 8009124:	4610      	mov	r0, r2
 8009126:	4798      	blx	r3
 8009128:	60f8      	str	r0, [r7, #12]
      break;
 800912a:	e112      	b.n	8009352 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	7c1b      	ldrb	r3, [r3, #16]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10d      	bne.n	8009150 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800913a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800913c:	f107 0208 	add.w	r2, r7, #8
 8009140:	4610      	mov	r0, r2
 8009142:	4798      	blx	r3
 8009144:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	3301      	adds	r3, #1
 800914a:	2202      	movs	r2, #2
 800914c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800914e:	e100      	b.n	8009352 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009158:	f107 0208 	add.w	r2, r7, #8
 800915c:	4610      	mov	r0, r2
 800915e:	4798      	blx	r3
 8009160:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3301      	adds	r3, #1
 8009166:	2202      	movs	r2, #2
 8009168:	701a      	strb	r2, [r3, #0]
      break;
 800916a:	e0f2      	b.n	8009352 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	885b      	ldrh	r3, [r3, #2]
 8009170:	b2db      	uxtb	r3, r3
 8009172:	2b05      	cmp	r3, #5
 8009174:	f200 80ac 	bhi.w	80092d0 <USBD_GetDescriptor+0x204>
 8009178:	a201      	add	r2, pc, #4	; (adr r2, 8009180 <USBD_GetDescriptor+0xb4>)
 800917a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800917e:	bf00      	nop
 8009180:	08009199 	.word	0x08009199
 8009184:	080091cd 	.word	0x080091cd
 8009188:	08009201 	.word	0x08009201
 800918c:	08009235 	.word	0x08009235
 8009190:	08009269 	.word	0x08009269
 8009194:	0800929d 	.word	0x0800929d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00b      	beq.n	80091bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	7c12      	ldrb	r2, [r2, #16]
 80091b0:	f107 0108 	add.w	r1, r7, #8
 80091b4:	4610      	mov	r0, r2
 80091b6:	4798      	blx	r3
 80091b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091ba:	e091      	b.n	80092e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fa97 	bl	80096f2 <USBD_CtlError>
            err++;
 80091c4:	7afb      	ldrb	r3, [r7, #11]
 80091c6:	3301      	adds	r3, #1
 80091c8:	72fb      	strb	r3, [r7, #11]
          break;
 80091ca:	e089      	b.n	80092e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091d2:	689b      	ldr	r3, [r3, #8]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00b      	beq.n	80091f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	7c12      	ldrb	r2, [r2, #16]
 80091e4:	f107 0108 	add.w	r1, r7, #8
 80091e8:	4610      	mov	r0, r2
 80091ea:	4798      	blx	r3
 80091ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091ee:	e077      	b.n	80092e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091f0:	6839      	ldr	r1, [r7, #0]
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fa7d 	bl	80096f2 <USBD_CtlError>
            err++;
 80091f8:	7afb      	ldrb	r3, [r7, #11]
 80091fa:	3301      	adds	r3, #1
 80091fc:	72fb      	strb	r3, [r7, #11]
          break;
 80091fe:	e06f      	b.n	80092e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00b      	beq.n	8009224 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	7c12      	ldrb	r2, [r2, #16]
 8009218:	f107 0108 	add.w	r1, r7, #8
 800921c:	4610      	mov	r0, r2
 800921e:	4798      	blx	r3
 8009220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009222:	e05d      	b.n	80092e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fa63 	bl	80096f2 <USBD_CtlError>
            err++;
 800922c:	7afb      	ldrb	r3, [r7, #11]
 800922e:	3301      	adds	r3, #1
 8009230:	72fb      	strb	r3, [r7, #11]
          break;
 8009232:	e055      	b.n	80092e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800923a:	691b      	ldr	r3, [r3, #16]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00b      	beq.n	8009258 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009246:	691b      	ldr	r3, [r3, #16]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	7c12      	ldrb	r2, [r2, #16]
 800924c:	f107 0108 	add.w	r1, r7, #8
 8009250:	4610      	mov	r0, r2
 8009252:	4798      	blx	r3
 8009254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009256:	e043      	b.n	80092e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009258:	6839      	ldr	r1, [r7, #0]
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fa49 	bl	80096f2 <USBD_CtlError>
            err++;
 8009260:	7afb      	ldrb	r3, [r7, #11]
 8009262:	3301      	adds	r3, #1
 8009264:	72fb      	strb	r3, [r7, #11]
          break;
 8009266:	e03b      	b.n	80092e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800926e:	695b      	ldr	r3, [r3, #20]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00b      	beq.n	800928c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800927a:	695b      	ldr	r3, [r3, #20]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	7c12      	ldrb	r2, [r2, #16]
 8009280:	f107 0108 	add.w	r1, r7, #8
 8009284:	4610      	mov	r0, r2
 8009286:	4798      	blx	r3
 8009288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800928a:	e029      	b.n	80092e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800928c:	6839      	ldr	r1, [r7, #0]
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fa2f 	bl	80096f2 <USBD_CtlError>
            err++;
 8009294:	7afb      	ldrb	r3, [r7, #11]
 8009296:	3301      	adds	r3, #1
 8009298:	72fb      	strb	r3, [r7, #11]
          break;
 800929a:	e021      	b.n	80092e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092a2:	699b      	ldr	r3, [r3, #24]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00b      	beq.n	80092c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	7c12      	ldrb	r2, [r2, #16]
 80092b4:	f107 0108 	add.w	r1, r7, #8
 80092b8:	4610      	mov	r0, r2
 80092ba:	4798      	blx	r3
 80092bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80092be:	e00f      	b.n	80092e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80092c0:	6839      	ldr	r1, [r7, #0]
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 fa15 	bl	80096f2 <USBD_CtlError>
            err++;
 80092c8:	7afb      	ldrb	r3, [r7, #11]
 80092ca:	3301      	adds	r3, #1
 80092cc:	72fb      	strb	r3, [r7, #11]
          break;
 80092ce:	e007      	b.n	80092e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80092d0:	6839      	ldr	r1, [r7, #0]
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 fa0d 	bl	80096f2 <USBD_CtlError>
          err++;
 80092d8:	7afb      	ldrb	r3, [r7, #11]
 80092da:	3301      	adds	r3, #1
 80092dc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80092de:	e038      	b.n	8009352 <USBD_GetDescriptor+0x286>
 80092e0:	e037      	b.n	8009352 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	7c1b      	ldrb	r3, [r3, #16]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d109      	bne.n	80092fe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f2:	f107 0208 	add.w	r2, r7, #8
 80092f6:	4610      	mov	r0, r2
 80092f8:	4798      	blx	r3
 80092fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092fc:	e029      	b.n	8009352 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 f9f6 	bl	80096f2 <USBD_CtlError>
        err++;
 8009306:	7afb      	ldrb	r3, [r7, #11]
 8009308:	3301      	adds	r3, #1
 800930a:	72fb      	strb	r3, [r7, #11]
      break;
 800930c:	e021      	b.n	8009352 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	7c1b      	ldrb	r3, [r3, #16]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10d      	bne.n	8009332 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800931c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800931e:	f107 0208 	add.w	r2, r7, #8
 8009322:	4610      	mov	r0, r2
 8009324:	4798      	blx	r3
 8009326:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	3301      	adds	r3, #1
 800932c:	2207      	movs	r2, #7
 800932e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009330:	e00f      	b.n	8009352 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009332:	6839      	ldr	r1, [r7, #0]
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 f9dc 	bl	80096f2 <USBD_CtlError>
        err++;
 800933a:	7afb      	ldrb	r3, [r7, #11]
 800933c:	3301      	adds	r3, #1
 800933e:	72fb      	strb	r3, [r7, #11]
      break;
 8009340:	e007      	b.n	8009352 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009342:	6839      	ldr	r1, [r7, #0]
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 f9d4 	bl	80096f2 <USBD_CtlError>
      err++;
 800934a:	7afb      	ldrb	r3, [r7, #11]
 800934c:	3301      	adds	r3, #1
 800934e:	72fb      	strb	r3, [r7, #11]
      break;
 8009350:	bf00      	nop
  }

  if (err != 0U)
 8009352:	7afb      	ldrb	r3, [r7, #11]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d11c      	bne.n	8009392 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009358:	893b      	ldrh	r3, [r7, #8]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d011      	beq.n	8009382 <USBD_GetDescriptor+0x2b6>
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	88db      	ldrh	r3, [r3, #6]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00d      	beq.n	8009382 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	88da      	ldrh	r2, [r3, #6]
 800936a:	893b      	ldrh	r3, [r7, #8]
 800936c:	4293      	cmp	r3, r2
 800936e:	bf28      	it	cs
 8009370:	4613      	movcs	r3, r2
 8009372:	b29b      	uxth	r3, r3
 8009374:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009376:	893b      	ldrh	r3, [r7, #8]
 8009378:	461a      	mov	r2, r3
 800937a:	68f9      	ldr	r1, [r7, #12]
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 fa22 	bl	80097c6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	88db      	ldrh	r3, [r3, #6]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d104      	bne.n	8009394 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fa79 	bl	8009882 <USBD_CtlSendStatus>
 8009390:	e000      	b.n	8009394 <USBD_GetDescriptor+0x2c8>
    return;
 8009392:	bf00      	nop
    }
  }
}
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop

0800939c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	889b      	ldrh	r3, [r3, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d130      	bne.n	8009410 <USBD_SetAddress+0x74>
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	88db      	ldrh	r3, [r3, #6]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d12c      	bne.n	8009410 <USBD_SetAddress+0x74>
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	885b      	ldrh	r3, [r3, #2]
 80093ba:	2b7f      	cmp	r3, #127	; 0x7f
 80093bc:	d828      	bhi.n	8009410 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	885b      	ldrh	r3, [r3, #2]
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d0:	2b03      	cmp	r3, #3
 80093d2:	d104      	bne.n	80093de <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80093d4:	6839      	ldr	r1, [r7, #0]
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 f98b 	bl	80096f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093dc:	e01d      	b.n	800941a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	7bfa      	ldrb	r2, [r7, #15]
 80093e2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80093e6:	7bfb      	ldrb	r3, [r7, #15]
 80093e8:	4619      	mov	r1, r3
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 fec9 	bl	800a182 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fa46 	bl	8009882 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80093f6:	7bfb      	ldrb	r3, [r7, #15]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d004      	beq.n	8009406 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2202      	movs	r2, #2
 8009400:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009404:	e009      	b.n	800941a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800940e:	e004      	b.n	800941a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009410:	6839      	ldr	r1, [r7, #0]
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f96d 	bl	80096f2 <USBD_CtlError>
  }
}
 8009418:	bf00      	nop
 800941a:	bf00      	nop
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
	...

08009424 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	885b      	ldrh	r3, [r3, #2]
 8009432:	b2da      	uxtb	r2, r3
 8009434:	4b41      	ldr	r3, [pc, #260]	; (800953c <USBD_SetConfig+0x118>)
 8009436:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009438:	4b40      	ldr	r3, [pc, #256]	; (800953c <USBD_SetConfig+0x118>)
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d904      	bls.n	800944a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009440:	6839      	ldr	r1, [r7, #0]
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f955 	bl	80096f2 <USBD_CtlError>
 8009448:	e075      	b.n	8009536 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009450:	2b02      	cmp	r3, #2
 8009452:	d002      	beq.n	800945a <USBD_SetConfig+0x36>
 8009454:	2b03      	cmp	r3, #3
 8009456:	d023      	beq.n	80094a0 <USBD_SetConfig+0x7c>
 8009458:	e062      	b.n	8009520 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800945a:	4b38      	ldr	r3, [pc, #224]	; (800953c <USBD_SetConfig+0x118>)
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d01a      	beq.n	8009498 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009462:	4b36      	ldr	r3, [pc, #216]	; (800953c <USBD_SetConfig+0x118>)
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	461a      	mov	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2203      	movs	r2, #3
 8009470:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009474:	4b31      	ldr	r3, [pc, #196]	; (800953c <USBD_SetConfig+0x118>)
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	4619      	mov	r1, r3
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f7ff f9af 	bl	80087de <USBD_SetClassConfig>
 8009480:	4603      	mov	r3, r0
 8009482:	2b02      	cmp	r3, #2
 8009484:	d104      	bne.n	8009490 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009486:	6839      	ldr	r1, [r7, #0]
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 f932 	bl	80096f2 <USBD_CtlError>
            return;
 800948e:	e052      	b.n	8009536 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f9f6 	bl	8009882 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009496:	e04e      	b.n	8009536 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 f9f2 	bl	8009882 <USBD_CtlSendStatus>
        break;
 800949e:	e04a      	b.n	8009536 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80094a0:	4b26      	ldr	r3, [pc, #152]	; (800953c <USBD_SetConfig+0x118>)
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d112      	bne.n	80094ce <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2202      	movs	r2, #2
 80094ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80094b0:	4b22      	ldr	r3, [pc, #136]	; (800953c <USBD_SetConfig+0x118>)
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	461a      	mov	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80094ba:	4b20      	ldr	r3, [pc, #128]	; (800953c <USBD_SetConfig+0x118>)
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	4619      	mov	r1, r3
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f7ff f9ab 	bl	800881c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f9db 	bl	8009882 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80094cc:	e033      	b.n	8009536 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80094ce:	4b1b      	ldr	r3, [pc, #108]	; (800953c <USBD_SetConfig+0x118>)
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	461a      	mov	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	429a      	cmp	r2, r3
 80094da:	d01d      	beq.n	8009518 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	4619      	mov	r1, r3
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7ff f999 	bl	800881c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80094ea:	4b14      	ldr	r3, [pc, #80]	; (800953c <USBD_SetConfig+0x118>)
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	461a      	mov	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80094f4:	4b11      	ldr	r3, [pc, #68]	; (800953c <USBD_SetConfig+0x118>)
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	4619      	mov	r1, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f7ff f96f 	bl	80087de <USBD_SetClassConfig>
 8009500:	4603      	mov	r3, r0
 8009502:	2b02      	cmp	r3, #2
 8009504:	d104      	bne.n	8009510 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009506:	6839      	ldr	r1, [r7, #0]
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f8f2 	bl	80096f2 <USBD_CtlError>
            return;
 800950e:	e012      	b.n	8009536 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 f9b6 	bl	8009882 <USBD_CtlSendStatus>
        break;
 8009516:	e00e      	b.n	8009536 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f9b2 	bl	8009882 <USBD_CtlSendStatus>
        break;
 800951e:	e00a      	b.n	8009536 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009520:	6839      	ldr	r1, [r7, #0]
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f8e5 	bl	80096f2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009528:	4b04      	ldr	r3, [pc, #16]	; (800953c <USBD_SetConfig+0x118>)
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	4619      	mov	r1, r3
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f7ff f974 	bl	800881c <USBD_ClrClassConfig>
        break;
 8009534:	bf00      	nop
    }
  }
}
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}
 800953c:	20000588 	.word	0x20000588

08009540 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	88db      	ldrh	r3, [r3, #6]
 800954e:	2b01      	cmp	r3, #1
 8009550:	d004      	beq.n	800955c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009552:	6839      	ldr	r1, [r7, #0]
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f8cc 	bl	80096f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800955a:	e022      	b.n	80095a2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009562:	2b02      	cmp	r3, #2
 8009564:	dc02      	bgt.n	800956c <USBD_GetConfig+0x2c>
 8009566:	2b00      	cmp	r3, #0
 8009568:	dc03      	bgt.n	8009572 <USBD_GetConfig+0x32>
 800956a:	e015      	b.n	8009598 <USBD_GetConfig+0x58>
 800956c:	2b03      	cmp	r3, #3
 800956e:	d00b      	beq.n	8009588 <USBD_GetConfig+0x48>
 8009570:	e012      	b.n	8009598 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	3308      	adds	r3, #8
 800957c:	2201      	movs	r2, #1
 800957e:	4619      	mov	r1, r3
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f920 	bl	80097c6 <USBD_CtlSendData>
        break;
 8009586:	e00c      	b.n	80095a2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	3304      	adds	r3, #4
 800958c:	2201      	movs	r2, #1
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f000 f918 	bl	80097c6 <USBD_CtlSendData>
        break;
 8009596:	e004      	b.n	80095a2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009598:	6839      	ldr	r1, [r7, #0]
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f8a9 	bl	80096f2 <USBD_CtlError>
        break;
 80095a0:	bf00      	nop
}
 80095a2:	bf00      	nop
 80095a4:	3708      	adds	r7, #8
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b082      	sub	sp, #8
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
 80095b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095ba:	3b01      	subs	r3, #1
 80095bc:	2b02      	cmp	r3, #2
 80095be:	d81e      	bhi.n	80095fe <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	88db      	ldrh	r3, [r3, #6]
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	d004      	beq.n	80095d2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80095c8:	6839      	ldr	r1, [r7, #0]
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f891 	bl	80096f2 <USBD_CtlError>
        break;
 80095d0:	e01a      	b.n	8009608 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2201      	movs	r2, #1
 80095d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d005      	beq.n	80095ee <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	f043 0202 	orr.w	r2, r3, #2
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	330c      	adds	r3, #12
 80095f2:	2202      	movs	r2, #2
 80095f4:	4619      	mov	r1, r3
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f8e5 	bl	80097c6 <USBD_CtlSendData>
      break;
 80095fc:	e004      	b.n	8009608 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80095fe:	6839      	ldr	r1, [r7, #0]
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 f876 	bl	80096f2 <USBD_CtlError>
      break;
 8009606:	bf00      	nop
  }
}
 8009608:	bf00      	nop
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	885b      	ldrh	r3, [r3, #2]
 800961e:	2b01      	cmp	r3, #1
 8009620:	d106      	bne.n	8009630 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 f929 	bl	8009882 <USBD_CtlSendStatus>
  }
}
 8009630:	bf00      	nop
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009648:	3b01      	subs	r3, #1
 800964a:	2b02      	cmp	r3, #2
 800964c:	d80b      	bhi.n	8009666 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	885b      	ldrh	r3, [r3, #2]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d10c      	bne.n	8009670 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f90f 	bl	8009882 <USBD_CtlSendStatus>
      }
      break;
 8009664:	e004      	b.n	8009670 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009666:	6839      	ldr	r1, [r7, #0]
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 f842 	bl	80096f2 <USBD_CtlError>
      break;
 800966e:	e000      	b.n	8009672 <USBD_ClrFeature+0x3a>
      break;
 8009670:	bf00      	nop
  }
}
 8009672:	bf00      	nop
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800967a:	b480      	push	{r7}
 800967c:	b083      	sub	sp, #12
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	781a      	ldrb	r2, [r3, #0]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	785a      	ldrb	r2, [r3, #1]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	3302      	adds	r3, #2
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	b29a      	uxth	r2, r3
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	3303      	adds	r3, #3
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	021b      	lsls	r3, r3, #8
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	4413      	add	r3, r2
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	3304      	adds	r3, #4
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	3305      	adds	r3, #5
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	b29b      	uxth	r3, r3
 80096c0:	021b      	lsls	r3, r3, #8
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	4413      	add	r3, r2
 80096c6:	b29a      	uxth	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	3306      	adds	r3, #6
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	b29a      	uxth	r2, r3
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	3307      	adds	r3, #7
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	b29b      	uxth	r3, r3
 80096dc:	021b      	lsls	r3, r3, #8
 80096de:	b29b      	uxth	r3, r3
 80096e0:	4413      	add	r3, r2
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	80da      	strh	r2, [r3, #6]

}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bc80      	pop	{r7}
 80096f0:	4770      	bx	lr

080096f2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b082      	sub	sp, #8
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
 80096fa:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80096fc:	2180      	movs	r1, #128	; 0x80
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fcd6 	bl	800a0b0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009704:	2100      	movs	r1, #0
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 fcd2 	bl	800a0b0 <USBD_LL_StallEP>
}
 800970c:	bf00      	nop
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b086      	sub	sp, #24
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009720:	2300      	movs	r3, #0
 8009722:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d032      	beq.n	8009790 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800972a:	68f8      	ldr	r0, [r7, #12]
 800972c:	f000 f834 	bl	8009798 <USBD_GetLen>
 8009730:	4603      	mov	r3, r0
 8009732:	3301      	adds	r3, #1
 8009734:	b29b      	uxth	r3, r3
 8009736:	005b      	lsls	r3, r3, #1
 8009738:	b29a      	uxth	r2, r3
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800973e:	7dfb      	ldrb	r3, [r7, #23]
 8009740:	1c5a      	adds	r2, r3, #1
 8009742:	75fa      	strb	r2, [r7, #23]
 8009744:	461a      	mov	r2, r3
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	4413      	add	r3, r2
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	7812      	ldrb	r2, [r2, #0]
 800974e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009750:	7dfb      	ldrb	r3, [r7, #23]
 8009752:	1c5a      	adds	r2, r3, #1
 8009754:	75fa      	strb	r2, [r7, #23]
 8009756:	461a      	mov	r2, r3
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	4413      	add	r3, r2
 800975c:	2203      	movs	r2, #3
 800975e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009760:	e012      	b.n	8009788 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	1c5a      	adds	r2, r3, #1
 8009766:	60fa      	str	r2, [r7, #12]
 8009768:	7dfa      	ldrb	r2, [r7, #23]
 800976a:	1c51      	adds	r1, r2, #1
 800976c:	75f9      	strb	r1, [r7, #23]
 800976e:	4611      	mov	r1, r2
 8009770:	68ba      	ldr	r2, [r7, #8]
 8009772:	440a      	add	r2, r1
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009778:	7dfb      	ldrb	r3, [r7, #23]
 800977a:	1c5a      	adds	r2, r3, #1
 800977c:	75fa      	strb	r2, [r7, #23]
 800977e:	461a      	mov	r2, r3
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	4413      	add	r3, r2
 8009784:	2200      	movs	r2, #0
 8009786:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d1e8      	bne.n	8009762 <USBD_GetString+0x4e>
    }
  }
}
 8009790:	bf00      	nop
 8009792:	3718      	adds	r7, #24
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80097a0:	2300      	movs	r3, #0
 80097a2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80097a4:	e005      	b.n	80097b2 <USBD_GetLen+0x1a>
  {
    len++;
 80097a6:	7bfb      	ldrb	r3, [r7, #15]
 80097a8:	3301      	adds	r3, #1
 80097aa:	73fb      	strb	r3, [r7, #15]
    buf++;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	3301      	adds	r3, #1
 80097b0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d1f5      	bne.n	80097a6 <USBD_GetLen+0xe>
  }

  return len;
 80097ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bc80      	pop	{r7}
 80097c4:	4770      	bx	lr

080097c6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b084      	sub	sp, #16
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	60f8      	str	r0, [r7, #12]
 80097ce:	60b9      	str	r1, [r7, #8]
 80097d0:	4613      	mov	r3, r2
 80097d2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2202      	movs	r2, #2
 80097d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80097dc:	88fa      	ldrh	r2, [r7, #6]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80097e2:	88fa      	ldrh	r2, [r7, #6]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097e8:	88fb      	ldrh	r3, [r7, #6]
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	2100      	movs	r1, #0
 80097ee:	68f8      	ldr	r0, [r7, #12]
 80097f0:	f000 fce6 	bl	800a1c0 <USBD_LL_Transmit>

  return USBD_OK;
 80097f4:	2300      	movs	r3, #0
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b084      	sub	sp, #16
 8009802:	af00      	add	r7, sp, #0
 8009804:	60f8      	str	r0, [r7, #12]
 8009806:	60b9      	str	r1, [r7, #8]
 8009808:	4613      	mov	r3, r2
 800980a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800980c:	88fb      	ldrh	r3, [r7, #6]
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	2100      	movs	r1, #0
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f000 fcd4 	bl	800a1c0 <USBD_LL_Transmit>

  return USBD_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b084      	sub	sp, #16
 8009826:	af00      	add	r7, sp, #0
 8009828:	60f8      	str	r0, [r7, #12]
 800982a:	60b9      	str	r1, [r7, #8]
 800982c:	4613      	mov	r3, r2
 800982e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2203      	movs	r2, #3
 8009834:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009838:	88fa      	ldrh	r2, [r7, #6]
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009840:	88fa      	ldrh	r2, [r7, #6]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009848:	88fb      	ldrh	r3, [r7, #6]
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	2100      	movs	r1, #0
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f000 fcd9 	bl	800a206 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b084      	sub	sp, #16
 8009862:	af00      	add	r7, sp, #0
 8009864:	60f8      	str	r0, [r7, #12]
 8009866:	60b9      	str	r1, [r7, #8]
 8009868:	4613      	mov	r3, r2
 800986a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800986c:	88fb      	ldrh	r3, [r7, #6]
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	2100      	movs	r1, #0
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f000 fcc7 	bl	800a206 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b082      	sub	sp, #8
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2204      	movs	r2, #4
 800988e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009892:	2300      	movs	r3, #0
 8009894:	2200      	movs	r2, #0
 8009896:	2100      	movs	r1, #0
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 fc91 	bl	800a1c0 <USBD_LL_Transmit>

  return USBD_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3708      	adds	r7, #8
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}

080098a8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2205      	movs	r2, #5
 80098b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098b8:	2300      	movs	r3, #0
 80098ba:	2200      	movs	r2, #0
 80098bc:	2100      	movs	r1, #0
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fca1 	bl	800a206 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3708      	adds	r7, #8
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
	...

080098d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80098d4:	2200      	movs	r2, #0
 80098d6:	4912      	ldr	r1, [pc, #72]	; (8009920 <MX_USB_DEVICE_Init+0x50>)
 80098d8:	4812      	ldr	r0, [pc, #72]	; (8009924 <MX_USB_DEVICE_Init+0x54>)
 80098da:	f7fe ff26 	bl	800872a <USBD_Init>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d001      	beq.n	80098e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80098e4:	f7f8 fdc3 	bl	800246e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80098e8:	490f      	ldr	r1, [pc, #60]	; (8009928 <MX_USB_DEVICE_Init+0x58>)
 80098ea:	480e      	ldr	r0, [pc, #56]	; (8009924 <MX_USB_DEVICE_Init+0x54>)
 80098ec:	f7fe ff48 	bl	8008780 <USBD_RegisterClass>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80098f6:	f7f8 fdba 	bl	800246e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80098fa:	490c      	ldr	r1, [pc, #48]	; (800992c <MX_USB_DEVICE_Init+0x5c>)
 80098fc:	4809      	ldr	r0, [pc, #36]	; (8009924 <MX_USB_DEVICE_Init+0x54>)
 80098fe:	f7fe fe79 	bl	80085f4 <USBD_CDC_RegisterInterface>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009908:	f7f8 fdb1 	bl	800246e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800990c:	4805      	ldr	r0, [pc, #20]	; (8009924 <MX_USB_DEVICE_Init+0x54>)
 800990e:	f7fe ff50 	bl	80087b2 <USBD_Start>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d001      	beq.n	800991c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009918:	f7f8 fda9 	bl	800246e <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800991c:	bf00      	nop
 800991e:	bd80      	pop	{r7, pc}
 8009920:	20000190 	.word	0x20000190
 8009924:	2000058c 	.word	0x2000058c
 8009928:	2000007c 	.word	0x2000007c
 800992c:	20000180 	.word	0x20000180

08009930 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009934:	2200      	movs	r2, #0
 8009936:	4905      	ldr	r1, [pc, #20]	; (800994c <CDC_Init_FS+0x1c>)
 8009938:	4805      	ldr	r0, [pc, #20]	; (8009950 <CDC_Init_FS+0x20>)
 800993a:	f7fe fe71 	bl	8008620 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800993e:	4905      	ldr	r1, [pc, #20]	; (8009954 <CDC_Init_FS+0x24>)
 8009940:	4803      	ldr	r0, [pc, #12]	; (8009950 <CDC_Init_FS+0x20>)
 8009942:	f7fe fe86 	bl	8008652 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009946:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009948:	4618      	mov	r0, r3
 800994a:	bd80      	pop	{r7, pc}
 800994c:	20000c50 	.word	0x20000c50
 8009950:	2000058c 	.word	0x2000058c
 8009954:	20000850 	.word	0x20000850

08009958 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009958:	b480      	push	{r7}
 800995a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800995c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800995e:	4618      	mov	r0, r3
 8009960:	46bd      	mov	sp, r7
 8009962:	bc80      	pop	{r7}
 8009964:	4770      	bx	lr
	...

08009968 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	4603      	mov	r3, r0
 8009970:	6039      	str	r1, [r7, #0]
 8009972:	71fb      	strb	r3, [r7, #7]
 8009974:	4613      	mov	r3, r2
 8009976:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009978:	79fb      	ldrb	r3, [r7, #7]
 800997a:	2b23      	cmp	r3, #35	; 0x23
 800997c:	d84a      	bhi.n	8009a14 <CDC_Control_FS+0xac>
 800997e:	a201      	add	r2, pc, #4	; (adr r2, 8009984 <CDC_Control_FS+0x1c>)
 8009980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009984:	08009a15 	.word	0x08009a15
 8009988:	08009a15 	.word	0x08009a15
 800998c:	08009a15 	.word	0x08009a15
 8009990:	08009a15 	.word	0x08009a15
 8009994:	08009a15 	.word	0x08009a15
 8009998:	08009a15 	.word	0x08009a15
 800999c:	08009a15 	.word	0x08009a15
 80099a0:	08009a15 	.word	0x08009a15
 80099a4:	08009a15 	.word	0x08009a15
 80099a8:	08009a15 	.word	0x08009a15
 80099ac:	08009a15 	.word	0x08009a15
 80099b0:	08009a15 	.word	0x08009a15
 80099b4:	08009a15 	.word	0x08009a15
 80099b8:	08009a15 	.word	0x08009a15
 80099bc:	08009a15 	.word	0x08009a15
 80099c0:	08009a15 	.word	0x08009a15
 80099c4:	08009a15 	.word	0x08009a15
 80099c8:	08009a15 	.word	0x08009a15
 80099cc:	08009a15 	.word	0x08009a15
 80099d0:	08009a15 	.word	0x08009a15
 80099d4:	08009a15 	.word	0x08009a15
 80099d8:	08009a15 	.word	0x08009a15
 80099dc:	08009a15 	.word	0x08009a15
 80099e0:	08009a15 	.word	0x08009a15
 80099e4:	08009a15 	.word	0x08009a15
 80099e8:	08009a15 	.word	0x08009a15
 80099ec:	08009a15 	.word	0x08009a15
 80099f0:	08009a15 	.word	0x08009a15
 80099f4:	08009a15 	.word	0x08009a15
 80099f8:	08009a15 	.word	0x08009a15
 80099fc:	08009a15 	.word	0x08009a15
 8009a00:	08009a15 	.word	0x08009a15
 8009a04:	08009a15 	.word	0x08009a15
 8009a08:	08009a15 	.word	0x08009a15
 8009a0c:	08009a15 	.word	0x08009a15
 8009a10:	08009a15 	.word	0x08009a15
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009a14:	bf00      	nop
  }

  return (USBD_OK);
 8009a16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bc80      	pop	{r7}
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop

08009a24 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009a2e:	6879      	ldr	r1, [r7, #4]
 8009a30:	4805      	ldr	r0, [pc, #20]	; (8009a48 <CDC_Receive_FS+0x24>)
 8009a32:	f7fe fe0e 	bl	8008652 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009a36:	4804      	ldr	r0, [pc, #16]	; (8009a48 <CDC_Receive_FS+0x24>)
 8009a38:	f7fe fe4d 	bl	80086d6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009a3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3708      	adds	r7, #8
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	2000058c 	.word	0x2000058c

08009a4c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	460b      	mov	r3, r1
 8009a56:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009a5c:	4b0d      	ldr	r3, [pc, #52]	; (8009a94 <CDC_Transmit_FS+0x48>)
 8009a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a62:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e00b      	b.n	8009a8a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009a72:	887b      	ldrh	r3, [r7, #2]
 8009a74:	461a      	mov	r2, r3
 8009a76:	6879      	ldr	r1, [r7, #4]
 8009a78:	4806      	ldr	r0, [pc, #24]	; (8009a94 <CDC_Transmit_FS+0x48>)
 8009a7a:	f7fe fdd1 	bl	8008620 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009a7e:	4805      	ldr	r0, [pc, #20]	; (8009a94 <CDC_Transmit_FS+0x48>)
 8009a80:	f7fe fdfa 	bl	8008678 <USBD_CDC_TransmitPacket>
 8009a84:	4603      	mov	r3, r0
 8009a86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3710      	adds	r7, #16
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	2000058c 	.word	0x2000058c

08009a98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	6039      	str	r1, [r7, #0]
 8009aa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	2212      	movs	r2, #18
 8009aa8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009aaa:	4b03      	ldr	r3, [pc, #12]	; (8009ab8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bc80      	pop	{r7}
 8009ab4:	4770      	bx	lr
 8009ab6:	bf00      	nop
 8009ab8:	200001ac 	.word	0x200001ac

08009abc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	6039      	str	r1, [r7, #0]
 8009ac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	2204      	movs	r2, #4
 8009acc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009ace:	4b03      	ldr	r3, [pc, #12]	; (8009adc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bc80      	pop	{r7}
 8009ad8:	4770      	bx	lr
 8009ada:	bf00      	nop
 8009adc:	200001c0 	.word	0x200001c0

08009ae0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	6039      	str	r1, [r7, #0]
 8009aea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009aec:	79fb      	ldrb	r3, [r7, #7]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d105      	bne.n	8009afe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009af2:	683a      	ldr	r2, [r7, #0]
 8009af4:	4907      	ldr	r1, [pc, #28]	; (8009b14 <USBD_FS_ProductStrDescriptor+0x34>)
 8009af6:	4808      	ldr	r0, [pc, #32]	; (8009b18 <USBD_FS_ProductStrDescriptor+0x38>)
 8009af8:	f7ff fe0c 	bl	8009714 <USBD_GetString>
 8009afc:	e004      	b.n	8009b08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	4904      	ldr	r1, [pc, #16]	; (8009b14 <USBD_FS_ProductStrDescriptor+0x34>)
 8009b02:	4805      	ldr	r0, [pc, #20]	; (8009b18 <USBD_FS_ProductStrDescriptor+0x38>)
 8009b04:	f7ff fe06 	bl	8009714 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b08:	4b02      	ldr	r3, [pc, #8]	; (8009b14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	20001050 	.word	0x20001050
 8009b18:	0800d024 	.word	0x0800d024

08009b1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	4603      	mov	r3, r0
 8009b24:	6039      	str	r1, [r7, #0]
 8009b26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b28:	683a      	ldr	r2, [r7, #0]
 8009b2a:	4904      	ldr	r1, [pc, #16]	; (8009b3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009b2c:	4804      	ldr	r0, [pc, #16]	; (8009b40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009b2e:	f7ff fdf1 	bl	8009714 <USBD_GetString>
  return USBD_StrDesc;
 8009b32:	4b02      	ldr	r3, [pc, #8]	; (8009b3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	20001050 	.word	0x20001050
 8009b40:	0800d03c 	.word	0x0800d03c

08009b44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	6039      	str	r1, [r7, #0]
 8009b4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	221a      	movs	r2, #26
 8009b54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b56:	f000 f843 	bl	8009be0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009b5a:	4b02      	ldr	r3, [pc, #8]	; (8009b64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}
 8009b64:	200001c4 	.word	0x200001c4

08009b68 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	4603      	mov	r3, r0
 8009b70:	6039      	str	r1, [r7, #0]
 8009b72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009b74:	79fb      	ldrb	r3, [r7, #7]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d105      	bne.n	8009b86 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b7a:	683a      	ldr	r2, [r7, #0]
 8009b7c:	4907      	ldr	r1, [pc, #28]	; (8009b9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b7e:	4808      	ldr	r0, [pc, #32]	; (8009ba0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b80:	f7ff fdc8 	bl	8009714 <USBD_GetString>
 8009b84:	e004      	b.n	8009b90 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b86:	683a      	ldr	r2, [r7, #0]
 8009b88:	4904      	ldr	r1, [pc, #16]	; (8009b9c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b8a:	4805      	ldr	r0, [pc, #20]	; (8009ba0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b8c:	f7ff fdc2 	bl	8009714 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b90:	4b02      	ldr	r3, [pc, #8]	; (8009b9c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	20001050 	.word	0x20001050
 8009ba0:	0800d050 	.word	0x0800d050

08009ba4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	4603      	mov	r3, r0
 8009bac:	6039      	str	r1, [r7, #0]
 8009bae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bb0:	79fb      	ldrb	r3, [r7, #7]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d105      	bne.n	8009bc2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009bb6:	683a      	ldr	r2, [r7, #0]
 8009bb8:	4907      	ldr	r1, [pc, #28]	; (8009bd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009bba:	4808      	ldr	r0, [pc, #32]	; (8009bdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009bbc:	f7ff fdaa 	bl	8009714 <USBD_GetString>
 8009bc0:	e004      	b.n	8009bcc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009bc2:	683a      	ldr	r2, [r7, #0]
 8009bc4:	4904      	ldr	r1, [pc, #16]	; (8009bd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009bc6:	4805      	ldr	r0, [pc, #20]	; (8009bdc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009bc8:	f7ff fda4 	bl	8009714 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bcc:	4b02      	ldr	r3, [pc, #8]	; (8009bd8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20001050 	.word	0x20001050
 8009bdc:	0800d05c 	.word	0x0800d05c

08009be0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009be6:	4b0f      	ldr	r3, [pc, #60]	; (8009c24 <Get_SerialNum+0x44>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009bec:	4b0e      	ldr	r3, [pc, #56]	; (8009c28 <Get_SerialNum+0x48>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009bf2:	4b0e      	ldr	r3, [pc, #56]	; (8009c2c <Get_SerialNum+0x4c>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d009      	beq.n	8009c1a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009c06:	2208      	movs	r2, #8
 8009c08:	4909      	ldr	r1, [pc, #36]	; (8009c30 <Get_SerialNum+0x50>)
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f000 f814 	bl	8009c38 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009c10:	2204      	movs	r2, #4
 8009c12:	4908      	ldr	r1, [pc, #32]	; (8009c34 <Get_SerialNum+0x54>)
 8009c14:	68b8      	ldr	r0, [r7, #8]
 8009c16:	f000 f80f 	bl	8009c38 <IntToUnicode>
  }
}
 8009c1a:	bf00      	nop
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	1fff7a10 	.word	0x1fff7a10
 8009c28:	1fff7a14 	.word	0x1fff7a14
 8009c2c:	1fff7a18 	.word	0x1fff7a18
 8009c30:	200001c6 	.word	0x200001c6
 8009c34:	200001d6 	.word	0x200001d6

08009c38 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b087      	sub	sp, #28
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	4613      	mov	r3, r2
 8009c44:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009c46:	2300      	movs	r3, #0
 8009c48:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	75fb      	strb	r3, [r7, #23]
 8009c4e:	e027      	b.n	8009ca0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	0f1b      	lsrs	r3, r3, #28
 8009c54:	2b09      	cmp	r3, #9
 8009c56:	d80b      	bhi.n	8009c70 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	0f1b      	lsrs	r3, r3, #28
 8009c5c:	b2da      	uxtb	r2, r3
 8009c5e:	7dfb      	ldrb	r3, [r7, #23]
 8009c60:	005b      	lsls	r3, r3, #1
 8009c62:	4619      	mov	r1, r3
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	440b      	add	r3, r1
 8009c68:	3230      	adds	r2, #48	; 0x30
 8009c6a:	b2d2      	uxtb	r2, r2
 8009c6c:	701a      	strb	r2, [r3, #0]
 8009c6e:	e00a      	b.n	8009c86 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	0f1b      	lsrs	r3, r3, #28
 8009c74:	b2da      	uxtb	r2, r3
 8009c76:	7dfb      	ldrb	r3, [r7, #23]
 8009c78:	005b      	lsls	r3, r3, #1
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	440b      	add	r3, r1
 8009c80:	3237      	adds	r2, #55	; 0x37
 8009c82:	b2d2      	uxtb	r2, r2
 8009c84:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	011b      	lsls	r3, r3, #4
 8009c8a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009c8c:	7dfb      	ldrb	r3, [r7, #23]
 8009c8e:	005b      	lsls	r3, r3, #1
 8009c90:	3301      	adds	r3, #1
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	4413      	add	r3, r2
 8009c96:	2200      	movs	r2, #0
 8009c98:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009c9a:	7dfb      	ldrb	r3, [r7, #23]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	75fb      	strb	r3, [r7, #23]
 8009ca0:	7dfa      	ldrb	r2, [r7, #23]
 8009ca2:	79fb      	ldrb	r3, [r7, #7]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d3d3      	bcc.n	8009c50 <IntToUnicode+0x18>
  }
}
 8009ca8:	bf00      	nop
 8009caa:	bf00      	nop
 8009cac:	371c      	adds	r7, #28
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bc80      	pop	{r7}
 8009cb2:	4770      	bx	lr

08009cb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b08a      	sub	sp, #40	; 0x28
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009cbc:	f107 0314 	add.w	r3, r7, #20
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	605a      	str	r2, [r3, #4]
 8009cc6:	609a      	str	r2, [r3, #8]
 8009cc8:	60da      	str	r2, [r3, #12]
 8009cca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009cd4:	d147      	bne.n	8009d66 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	613b      	str	r3, [r7, #16]
 8009cda:	4b25      	ldr	r3, [pc, #148]	; (8009d70 <HAL_PCD_MspInit+0xbc>)
 8009cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cde:	4a24      	ldr	r2, [pc, #144]	; (8009d70 <HAL_PCD_MspInit+0xbc>)
 8009ce0:	f043 0301 	orr.w	r3, r3, #1
 8009ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8009ce6:	4b22      	ldr	r3, [pc, #136]	; (8009d70 <HAL_PCD_MspInit+0xbc>)
 8009ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cea:	f003 0301 	and.w	r3, r3, #1
 8009cee:	613b      	str	r3, [r7, #16]
 8009cf0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009cf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d00:	f107 0314 	add.w	r3, r7, #20
 8009d04:	4619      	mov	r1, r3
 8009d06:	481b      	ldr	r0, [pc, #108]	; (8009d74 <HAL_PCD_MspInit+0xc0>)
 8009d08:	f7f9 fd2e 	bl	8003768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009d0c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d12:	2302      	movs	r3, #2
 8009d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d16:	2300      	movs	r3, #0
 8009d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d1a:	2303      	movs	r3, #3
 8009d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009d1e:	230a      	movs	r3, #10
 8009d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d22:	f107 0314 	add.w	r3, r7, #20
 8009d26:	4619      	mov	r1, r3
 8009d28:	4812      	ldr	r0, [pc, #72]	; (8009d74 <HAL_PCD_MspInit+0xc0>)
 8009d2a:	f7f9 fd1d 	bl	8003768 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009d2e:	4b10      	ldr	r3, [pc, #64]	; (8009d70 <HAL_PCD_MspInit+0xbc>)
 8009d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d32:	4a0f      	ldr	r2, [pc, #60]	; (8009d70 <HAL_PCD_MspInit+0xbc>)
 8009d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d38:	6353      	str	r3, [r2, #52]	; 0x34
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	60fb      	str	r3, [r7, #12]
 8009d3e:	4b0c      	ldr	r3, [pc, #48]	; (8009d70 <HAL_PCD_MspInit+0xbc>)
 8009d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d42:	4a0b      	ldr	r2, [pc, #44]	; (8009d70 <HAL_PCD_MspInit+0xbc>)
 8009d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d48:	6453      	str	r3, [r2, #68]	; 0x44
 8009d4a:	4b09      	ldr	r3, [pc, #36]	; (8009d70 <HAL_PCD_MspInit+0xbc>)
 8009d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d52:	60fb      	str	r3, [r7, #12]
 8009d54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009d56:	2200      	movs	r2, #0
 8009d58:	2100      	movs	r1, #0
 8009d5a:	2043      	movs	r0, #67	; 0x43
 8009d5c:	f7f9 fccd 	bl	80036fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009d60:	2043      	movs	r0, #67	; 0x43
 8009d62:	f7f9 fce6 	bl	8003732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009d66:	bf00      	nop
 8009d68:	3728      	adds	r7, #40	; 0x28
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
 8009d6e:	bf00      	nop
 8009d70:	40023800 	.word	0x40023800
 8009d74:	40020000 	.word	0x40020000

08009d78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	4610      	mov	r0, r2
 8009d90:	f7fe fd57 	bl	8008842 <USBD_LL_SetupStage>
}
 8009d94:	bf00      	nop
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	460b      	mov	r3, r1
 8009da6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8009dae:	78fa      	ldrb	r2, [r7, #3]
 8009db0:	6879      	ldr	r1, [r7, #4]
 8009db2:	4613      	mov	r3, r2
 8009db4:	00db      	lsls	r3, r3, #3
 8009db6:	4413      	add	r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	440b      	add	r3, r1
 8009dbc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	78fb      	ldrb	r3, [r7, #3]
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	f7fe fd89 	bl	80088dc <USBD_LL_DataOutStage>
}
 8009dca:	bf00      	nop
 8009dcc:	3708      	adds	r7, #8
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b082      	sub	sp, #8
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
 8009dda:	460b      	mov	r3, r1
 8009ddc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 8009de4:	78fa      	ldrb	r2, [r7, #3]
 8009de6:	6879      	ldr	r1, [r7, #4]
 8009de8:	4613      	mov	r3, r2
 8009dea:	00db      	lsls	r3, r3, #3
 8009dec:	4413      	add	r3, r2
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	440b      	add	r3, r1
 8009df2:	3348      	adds	r3, #72	; 0x48
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	78fb      	ldrb	r3, [r7, #3]
 8009df8:	4619      	mov	r1, r3
 8009dfa:	f7fe fde0 	bl	80089be <USBD_LL_DataInStage>
}
 8009dfe:	bf00      	nop
 8009e00:	3708      	adds	r7, #8
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b082      	sub	sp, #8
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009e14:	4618      	mov	r0, r3
 8009e16:	f7fe fef0 	bl	8008bfa <USBD_LL_SOF>
}
 8009e1a:	bf00      	nop
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b084      	sub	sp, #16
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d102      	bne.n	8009e3c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009e36:	2300      	movs	r3, #0
 8009e38:	73fb      	strb	r3, [r7, #15]
 8009e3a:	e008      	b.n	8009e4e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	691b      	ldr	r3, [r3, #16]
 8009e40:	2b02      	cmp	r3, #2
 8009e42:	d102      	bne.n	8009e4a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009e44:	2301      	movs	r3, #1
 8009e46:	73fb      	strb	r3, [r7, #15]
 8009e48:	e001      	b.n	8009e4e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009e4a:	f7f8 fb10 	bl	800246e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009e54:	7bfa      	ldrb	r2, [r7, #15]
 8009e56:	4611      	mov	r1, r2
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7fe fe96 	bl	8008b8a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7fe fe4f 	bl	8008b08 <USBD_LL_Reset>
}
 8009e6a:	bf00      	nop
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
	...

08009e74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fe fe90 	bl	8008ba8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	6812      	ldr	r2, [r2, #0]
 8009e96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009e9a:	f043 0301 	orr.w	r3, r3, #1
 8009e9e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a1b      	ldr	r3, [r3, #32]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d005      	beq.n	8009eb4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ea8:	4b04      	ldr	r3, [pc, #16]	; (8009ebc <HAL_PCD_SuspendCallback+0x48>)
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	4a03      	ldr	r2, [pc, #12]	; (8009ebc <HAL_PCD_SuspendCallback+0x48>)
 8009eae:	f043 0306 	orr.w	r3, r3, #6
 8009eb2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009eb4:	bf00      	nop
 8009eb6:	3708      	adds	r7, #8
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	e000ed00 	.word	0xe000ed00

08009ec0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fe fe7e 	bl	8008bd0 <USBD_LL_Resume>
}
 8009ed4:	bf00      	nop
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	460b      	mov	r3, r1
 8009ee6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009eee:	78fa      	ldrb	r2, [r7, #3]
 8009ef0:	4611      	mov	r1, r2
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	f7fe fea7 	bl	8008c46 <USBD_LL_IsoOUTIncomplete>
}
 8009ef8:	bf00      	nop
 8009efa:	3708      	adds	r7, #8
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b082      	sub	sp, #8
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	460b      	mov	r3, r1
 8009f0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009f12:	78fa      	ldrb	r2, [r7, #3]
 8009f14:	4611      	mov	r1, r2
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7fe fe89 	bl	8008c2e <USBD_LL_IsoINIncomplete>
}
 8009f1c:	bf00      	nop
 8009f1e:	3708      	adds	r7, #8
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b082      	sub	sp, #8
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fe fe93 	bl	8008c5e <USBD_LL_DevConnected>
}
 8009f38:	bf00      	nop
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fe fe8f 	bl	8008c72 <USBD_LL_DevDisconnected>
}
 8009f54:	bf00      	nop
 8009f56:	3708      	adds	r7, #8
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d139      	bne.n	8009fe0 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009f6c:	4a1f      	ldr	r2, [pc, #124]	; (8009fec <USBD_LL_Init+0x90>)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	4a1d      	ldr	r2, [pc, #116]	; (8009fec <USBD_LL_Init+0x90>)
 8009f78:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009f7c:	4b1b      	ldr	r3, [pc, #108]	; (8009fec <USBD_LL_Init+0x90>)
 8009f7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009f82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009f84:	4b19      	ldr	r3, [pc, #100]	; (8009fec <USBD_LL_Init+0x90>)
 8009f86:	2204      	movs	r2, #4
 8009f88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009f8a:	4b18      	ldr	r3, [pc, #96]	; (8009fec <USBD_LL_Init+0x90>)
 8009f8c:	2202      	movs	r2, #2
 8009f8e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009f90:	4b16      	ldr	r3, [pc, #88]	; (8009fec <USBD_LL_Init+0x90>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009f96:	4b15      	ldr	r3, [pc, #84]	; (8009fec <USBD_LL_Init+0x90>)
 8009f98:	2202      	movs	r2, #2
 8009f9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009f9c:	4b13      	ldr	r3, [pc, #76]	; (8009fec <USBD_LL_Init+0x90>)
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009fa2:	4b12      	ldr	r3, [pc, #72]	; (8009fec <USBD_LL_Init+0x90>)
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009fa8:	4b10      	ldr	r3, [pc, #64]	; (8009fec <USBD_LL_Init+0x90>)
 8009faa:	2201      	movs	r2, #1
 8009fac:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009fae:	4b0f      	ldr	r3, [pc, #60]	; (8009fec <USBD_LL_Init+0x90>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009fb4:	480d      	ldr	r0, [pc, #52]	; (8009fec <USBD_LL_Init+0x90>)
 8009fb6:	f7f9 fda6 	bl	8003b06 <HAL_PCD_Init>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d001      	beq.n	8009fc4 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 8009fc0:	f7f8 fa55 	bl	800246e <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009fc4:	2180      	movs	r1, #128	; 0x80
 8009fc6:	4809      	ldr	r0, [pc, #36]	; (8009fec <USBD_LL_Init+0x90>)
 8009fc8:	f7fa ffbe 	bl	8004f48 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009fcc:	2240      	movs	r2, #64	; 0x40
 8009fce:	2100      	movs	r1, #0
 8009fd0:	4806      	ldr	r0, [pc, #24]	; (8009fec <USBD_LL_Init+0x90>)
 8009fd2:	f7fa ff73 	bl	8004ebc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009fd6:	2280      	movs	r2, #128	; 0x80
 8009fd8:	2101      	movs	r1, #1
 8009fda:	4804      	ldr	r0, [pc, #16]	; (8009fec <USBD_LL_Init+0x90>)
 8009fdc:	f7fa ff6e 	bl	8004ebc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3708      	adds	r7, #8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	20001250 	.word	0x20001250

08009ff0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a006:	4618      	mov	r0, r3
 800a008:	f7f9 fe9a 	bl	8003d40 <HAL_PCD_Start>
 800a00c:	4603      	mov	r3, r0
 800a00e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a010:	7bfb      	ldrb	r3, [r7, #15]
 800a012:	4618      	mov	r0, r3
 800a014:	f000 f92e 	bl	800a274 <USBD_Get_USB_Status>
 800a018:	4603      	mov	r3, r0
 800a01a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a01c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b084      	sub	sp, #16
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
 800a02e:	4608      	mov	r0, r1
 800a030:	4611      	mov	r1, r2
 800a032:	461a      	mov	r2, r3
 800a034:	4603      	mov	r3, r0
 800a036:	70fb      	strb	r3, [r7, #3]
 800a038:	460b      	mov	r3, r1
 800a03a:	70bb      	strb	r3, [r7, #2]
 800a03c:	4613      	mov	r3, r2
 800a03e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a040:	2300      	movs	r3, #0
 800a042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a044:	2300      	movs	r3, #0
 800a046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a04e:	78bb      	ldrb	r3, [r7, #2]
 800a050:	883a      	ldrh	r2, [r7, #0]
 800a052:	78f9      	ldrb	r1, [r7, #3]
 800a054:	f7fa fb4c 	bl	80046f0 <HAL_PCD_EP_Open>
 800a058:	4603      	mov	r3, r0
 800a05a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a05c:	7bfb      	ldrb	r3, [r7, #15]
 800a05e:	4618      	mov	r0, r3
 800a060:	f000 f908 	bl	800a274 <USBD_Get_USB_Status>
 800a064:	4603      	mov	r3, r0
 800a066:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a068:	7bbb      	ldrb	r3, [r7, #14]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b084      	sub	sp, #16
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
 800a07a:	460b      	mov	r3, r1
 800a07c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a082:	2300      	movs	r3, #0
 800a084:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a08c:	78fa      	ldrb	r2, [r7, #3]
 800a08e:	4611      	mov	r1, r2
 800a090:	4618      	mov	r0, r3
 800a092:	f7fa fb95 	bl	80047c0 <HAL_PCD_EP_Close>
 800a096:	4603      	mov	r3, r0
 800a098:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a09a:	7bfb      	ldrb	r3, [r7, #15]
 800a09c:	4618      	mov	r0, r3
 800a09e:	f000 f8e9 	bl	800a274 <USBD_Get_USB_Status>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0ca:	78fa      	ldrb	r2, [r7, #3]
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fa fc4e 	bl	8004970 <HAL_PCD_EP_SetStall>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0d8:	7bfb      	ldrb	r3, [r7, #15]
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f000 f8ca 	bl	800a274 <USBD_Get_USB_Status>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3710      	adds	r7, #16
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}

0800a0ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b084      	sub	sp, #16
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0fe:	2300      	movs	r3, #0
 800a100:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a108:	78fa      	ldrb	r2, [r7, #3]
 800a10a:	4611      	mov	r1, r2
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7fa fc93 	bl	8004a38 <HAL_PCD_EP_ClrStall>
 800a112:	4603      	mov	r3, r0
 800a114:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a116:	7bfb      	ldrb	r3, [r7, #15]
 800a118:	4618      	mov	r0, r3
 800a11a:	f000 f8ab 	bl	800a274 <USBD_Get_USB_Status>
 800a11e:	4603      	mov	r3, r0
 800a120:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a122:	7bbb      	ldrb	r3, [r7, #14]
}
 800a124:	4618      	mov	r0, r3
 800a126:	3710      	adds	r7, #16
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
 800a134:	460b      	mov	r3, r1
 800a136:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a13e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a140:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a144:	2b00      	cmp	r3, #0
 800a146:	da0b      	bge.n	800a160 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a148:	78fb      	ldrb	r3, [r7, #3]
 800a14a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a14e:	68f9      	ldr	r1, [r7, #12]
 800a150:	4613      	mov	r3, r2
 800a152:	00db      	lsls	r3, r3, #3
 800a154:	4413      	add	r3, r2
 800a156:	009b      	lsls	r3, r3, #2
 800a158:	440b      	add	r3, r1
 800a15a:	333e      	adds	r3, #62	; 0x3e
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	e00b      	b.n	800a178 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a160:	78fb      	ldrb	r3, [r7, #3]
 800a162:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a166:	68f9      	ldr	r1, [r7, #12]
 800a168:	4613      	mov	r3, r2
 800a16a:	00db      	lsls	r3, r3, #3
 800a16c:	4413      	add	r3, r2
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	440b      	add	r3, r1
 800a172:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a176:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3714      	adds	r7, #20
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bc80      	pop	{r7}
 800a180:	4770      	bx	lr

0800a182 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a182:	b580      	push	{r7, lr}
 800a184:	b084      	sub	sp, #16
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
 800a18a:	460b      	mov	r3, r1
 800a18c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a18e:	2300      	movs	r3, #0
 800a190:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a19c:	78fa      	ldrb	r2, [r7, #3]
 800a19e:	4611      	mov	r1, r2
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f7fa fa80 	bl	80046a6 <HAL_PCD_SetAddress>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1aa:	7bfb      	ldrb	r3, [r7, #15]
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f000 f861 	bl	800a274 <USBD_Get_USB_Status>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3710      	adds	r7, #16
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	607a      	str	r2, [r7, #4]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	72fb      	strb	r3, [r7, #11]
 800a1d0:	4613      	mov	r3, r2
 800a1d2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a1e2:	893b      	ldrh	r3, [r7, #8]
 800a1e4:	7af9      	ldrb	r1, [r7, #11]
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	f7fa fb87 	bl	80048fa <HAL_PCD_EP_Transmit>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1f0:	7dfb      	ldrb	r3, [r7, #23]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 f83e 	bl	800a274 <USBD_Get_USB_Status>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1fc:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3718      	adds	r7, #24
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b086      	sub	sp, #24
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	60f8      	str	r0, [r7, #12]
 800a20e:	607a      	str	r2, [r7, #4]
 800a210:	461a      	mov	r2, r3
 800a212:	460b      	mov	r3, r1
 800a214:	72fb      	strb	r3, [r7, #11]
 800a216:	4613      	mov	r3, r2
 800a218:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a21a:	2300      	movs	r3, #0
 800a21c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a21e:	2300      	movs	r3, #0
 800a220:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a228:	893b      	ldrh	r3, [r7, #8]
 800a22a:	7af9      	ldrb	r1, [r7, #11]
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	f7fa fb11 	bl	8004854 <HAL_PCD_EP_Receive>
 800a232:	4603      	mov	r3, r0
 800a234:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a236:	7dfb      	ldrb	r3, [r7, #23]
 800a238:	4618      	mov	r0, r3
 800a23a:	f000 f81b 	bl	800a274 <USBD_Get_USB_Status>
 800a23e:	4603      	mov	r3, r0
 800a240:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a242:	7dbb      	ldrb	r3, [r7, #22]
}
 800a244:	4618      	mov	r0, r3
 800a246:	3718      	adds	r7, #24
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	460b      	mov	r3, r1
 800a256:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a25e:	78fa      	ldrb	r2, [r7, #3]
 800a260:	4611      	mov	r1, r2
 800a262:	4618      	mov	r0, r3
 800a264:	f7fa fb32 	bl	80048cc <HAL_PCD_EP_GetRxCount>
 800a268:	4603      	mov	r3, r0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3708      	adds	r7, #8
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
	...

0800a274 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	4603      	mov	r3, r0
 800a27c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a27e:	2300      	movs	r3, #0
 800a280:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a282:	79fb      	ldrb	r3, [r7, #7]
 800a284:	2b03      	cmp	r3, #3
 800a286:	d817      	bhi.n	800a2b8 <USBD_Get_USB_Status+0x44>
 800a288:	a201      	add	r2, pc, #4	; (adr r2, 800a290 <USBD_Get_USB_Status+0x1c>)
 800a28a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a28e:	bf00      	nop
 800a290:	0800a2a1 	.word	0x0800a2a1
 800a294:	0800a2a7 	.word	0x0800a2a7
 800a298:	0800a2ad 	.word	0x0800a2ad
 800a29c:	0800a2b3 	.word	0x0800a2b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a4:	e00b      	b.n	800a2be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a2a6:	2302      	movs	r3, #2
 800a2a8:	73fb      	strb	r3, [r7, #15]
    break;
 800a2aa:	e008      	b.n	800a2be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a2b0:	e005      	b.n	800a2be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	73fb      	strb	r3, [r7, #15]
    break;
 800a2b6:	e002      	b.n	800a2be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	73fb      	strb	r3, [r7, #15]
    break;
 800a2bc:	bf00      	nop
  }
  return usb_status;
 800a2be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3714      	adds	r7, #20
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bc80      	pop	{r7}
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop

0800a2cc <malloc>:
 800a2cc:	4b02      	ldr	r3, [pc, #8]	; (800a2d8 <malloc+0xc>)
 800a2ce:	4601      	mov	r1, r0
 800a2d0:	6818      	ldr	r0, [r3, #0]
 800a2d2:	f000 b82b 	b.w	800a32c <_malloc_r>
 800a2d6:	bf00      	nop
 800a2d8:	20000238 	.word	0x20000238

0800a2dc <free>:
 800a2dc:	4b02      	ldr	r3, [pc, #8]	; (800a2e8 <free+0xc>)
 800a2de:	4601      	mov	r1, r0
 800a2e0:	6818      	ldr	r0, [r3, #0]
 800a2e2:	f001 bd1d 	b.w	800bd20 <_free_r>
 800a2e6:	bf00      	nop
 800a2e8:	20000238 	.word	0x20000238

0800a2ec <sbrk_aligned>:
 800a2ec:	b570      	push	{r4, r5, r6, lr}
 800a2ee:	4e0e      	ldr	r6, [pc, #56]	; (800a328 <sbrk_aligned+0x3c>)
 800a2f0:	460c      	mov	r4, r1
 800a2f2:	6831      	ldr	r1, [r6, #0]
 800a2f4:	4605      	mov	r5, r0
 800a2f6:	b911      	cbnz	r1, 800a2fe <sbrk_aligned+0x12>
 800a2f8:	f000 fe48 	bl	800af8c <_sbrk_r>
 800a2fc:	6030      	str	r0, [r6, #0]
 800a2fe:	4621      	mov	r1, r4
 800a300:	4628      	mov	r0, r5
 800a302:	f000 fe43 	bl	800af8c <_sbrk_r>
 800a306:	1c43      	adds	r3, r0, #1
 800a308:	d00a      	beq.n	800a320 <sbrk_aligned+0x34>
 800a30a:	1cc4      	adds	r4, r0, #3
 800a30c:	f024 0403 	bic.w	r4, r4, #3
 800a310:	42a0      	cmp	r0, r4
 800a312:	d007      	beq.n	800a324 <sbrk_aligned+0x38>
 800a314:	1a21      	subs	r1, r4, r0
 800a316:	4628      	mov	r0, r5
 800a318:	f000 fe38 	bl	800af8c <_sbrk_r>
 800a31c:	3001      	adds	r0, #1
 800a31e:	d101      	bne.n	800a324 <sbrk_aligned+0x38>
 800a320:	f04f 34ff 	mov.w	r4, #4294967295
 800a324:	4620      	mov	r0, r4
 800a326:	bd70      	pop	{r4, r5, r6, pc}
 800a328:	20001758 	.word	0x20001758

0800a32c <_malloc_r>:
 800a32c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a330:	1ccd      	adds	r5, r1, #3
 800a332:	f025 0503 	bic.w	r5, r5, #3
 800a336:	3508      	adds	r5, #8
 800a338:	2d0c      	cmp	r5, #12
 800a33a:	bf38      	it	cc
 800a33c:	250c      	movcc	r5, #12
 800a33e:	2d00      	cmp	r5, #0
 800a340:	4607      	mov	r7, r0
 800a342:	db01      	blt.n	800a348 <_malloc_r+0x1c>
 800a344:	42a9      	cmp	r1, r5
 800a346:	d905      	bls.n	800a354 <_malloc_r+0x28>
 800a348:	230c      	movs	r3, #12
 800a34a:	2600      	movs	r6, #0
 800a34c:	603b      	str	r3, [r7, #0]
 800a34e:	4630      	mov	r0, r6
 800a350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a354:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a428 <_malloc_r+0xfc>
 800a358:	f000 f868 	bl	800a42c <__malloc_lock>
 800a35c:	f8d8 3000 	ldr.w	r3, [r8]
 800a360:	461c      	mov	r4, r3
 800a362:	bb5c      	cbnz	r4, 800a3bc <_malloc_r+0x90>
 800a364:	4629      	mov	r1, r5
 800a366:	4638      	mov	r0, r7
 800a368:	f7ff ffc0 	bl	800a2ec <sbrk_aligned>
 800a36c:	1c43      	adds	r3, r0, #1
 800a36e:	4604      	mov	r4, r0
 800a370:	d155      	bne.n	800a41e <_malloc_r+0xf2>
 800a372:	f8d8 4000 	ldr.w	r4, [r8]
 800a376:	4626      	mov	r6, r4
 800a378:	2e00      	cmp	r6, #0
 800a37a:	d145      	bne.n	800a408 <_malloc_r+0xdc>
 800a37c:	2c00      	cmp	r4, #0
 800a37e:	d048      	beq.n	800a412 <_malloc_r+0xe6>
 800a380:	6823      	ldr	r3, [r4, #0]
 800a382:	4631      	mov	r1, r6
 800a384:	4638      	mov	r0, r7
 800a386:	eb04 0903 	add.w	r9, r4, r3
 800a38a:	f000 fdff 	bl	800af8c <_sbrk_r>
 800a38e:	4581      	cmp	r9, r0
 800a390:	d13f      	bne.n	800a412 <_malloc_r+0xe6>
 800a392:	6821      	ldr	r1, [r4, #0]
 800a394:	4638      	mov	r0, r7
 800a396:	1a6d      	subs	r5, r5, r1
 800a398:	4629      	mov	r1, r5
 800a39a:	f7ff ffa7 	bl	800a2ec <sbrk_aligned>
 800a39e:	3001      	adds	r0, #1
 800a3a0:	d037      	beq.n	800a412 <_malloc_r+0xe6>
 800a3a2:	6823      	ldr	r3, [r4, #0]
 800a3a4:	442b      	add	r3, r5
 800a3a6:	6023      	str	r3, [r4, #0]
 800a3a8:	f8d8 3000 	ldr.w	r3, [r8]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d038      	beq.n	800a422 <_malloc_r+0xf6>
 800a3b0:	685a      	ldr	r2, [r3, #4]
 800a3b2:	42a2      	cmp	r2, r4
 800a3b4:	d12b      	bne.n	800a40e <_malloc_r+0xe2>
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	605a      	str	r2, [r3, #4]
 800a3ba:	e00f      	b.n	800a3dc <_malloc_r+0xb0>
 800a3bc:	6822      	ldr	r2, [r4, #0]
 800a3be:	1b52      	subs	r2, r2, r5
 800a3c0:	d41f      	bmi.n	800a402 <_malloc_r+0xd6>
 800a3c2:	2a0b      	cmp	r2, #11
 800a3c4:	d917      	bls.n	800a3f6 <_malloc_r+0xca>
 800a3c6:	1961      	adds	r1, r4, r5
 800a3c8:	42a3      	cmp	r3, r4
 800a3ca:	6025      	str	r5, [r4, #0]
 800a3cc:	bf18      	it	ne
 800a3ce:	6059      	strne	r1, [r3, #4]
 800a3d0:	6863      	ldr	r3, [r4, #4]
 800a3d2:	bf08      	it	eq
 800a3d4:	f8c8 1000 	streq.w	r1, [r8]
 800a3d8:	5162      	str	r2, [r4, r5]
 800a3da:	604b      	str	r3, [r1, #4]
 800a3dc:	4638      	mov	r0, r7
 800a3de:	f104 060b 	add.w	r6, r4, #11
 800a3e2:	f000 f829 	bl	800a438 <__malloc_unlock>
 800a3e6:	f026 0607 	bic.w	r6, r6, #7
 800a3ea:	1d23      	adds	r3, r4, #4
 800a3ec:	1af2      	subs	r2, r6, r3
 800a3ee:	d0ae      	beq.n	800a34e <_malloc_r+0x22>
 800a3f0:	1b9b      	subs	r3, r3, r6
 800a3f2:	50a3      	str	r3, [r4, r2]
 800a3f4:	e7ab      	b.n	800a34e <_malloc_r+0x22>
 800a3f6:	42a3      	cmp	r3, r4
 800a3f8:	6862      	ldr	r2, [r4, #4]
 800a3fa:	d1dd      	bne.n	800a3b8 <_malloc_r+0x8c>
 800a3fc:	f8c8 2000 	str.w	r2, [r8]
 800a400:	e7ec      	b.n	800a3dc <_malloc_r+0xb0>
 800a402:	4623      	mov	r3, r4
 800a404:	6864      	ldr	r4, [r4, #4]
 800a406:	e7ac      	b.n	800a362 <_malloc_r+0x36>
 800a408:	4634      	mov	r4, r6
 800a40a:	6876      	ldr	r6, [r6, #4]
 800a40c:	e7b4      	b.n	800a378 <_malloc_r+0x4c>
 800a40e:	4613      	mov	r3, r2
 800a410:	e7cc      	b.n	800a3ac <_malloc_r+0x80>
 800a412:	230c      	movs	r3, #12
 800a414:	4638      	mov	r0, r7
 800a416:	603b      	str	r3, [r7, #0]
 800a418:	f000 f80e 	bl	800a438 <__malloc_unlock>
 800a41c:	e797      	b.n	800a34e <_malloc_r+0x22>
 800a41e:	6025      	str	r5, [r4, #0]
 800a420:	e7dc      	b.n	800a3dc <_malloc_r+0xb0>
 800a422:	605b      	str	r3, [r3, #4]
 800a424:	deff      	udf	#255	; 0xff
 800a426:	bf00      	nop
 800a428:	20001754 	.word	0x20001754

0800a42c <__malloc_lock>:
 800a42c:	4801      	ldr	r0, [pc, #4]	; (800a434 <__malloc_lock+0x8>)
 800a42e:	f000 bdfa 	b.w	800b026 <__retarget_lock_acquire_recursive>
 800a432:	bf00      	nop
 800a434:	2000189c 	.word	0x2000189c

0800a438 <__malloc_unlock>:
 800a438:	4801      	ldr	r0, [pc, #4]	; (800a440 <__malloc_unlock+0x8>)
 800a43a:	f000 bdf5 	b.w	800b028 <__retarget_lock_release_recursive>
 800a43e:	bf00      	nop
 800a440:	2000189c 	.word	0x2000189c

0800a444 <__cvt>:
 800a444:	2b00      	cmp	r3, #0
 800a446:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a44a:	461f      	mov	r7, r3
 800a44c:	bfbb      	ittet	lt
 800a44e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800a452:	461f      	movlt	r7, r3
 800a454:	2300      	movge	r3, #0
 800a456:	232d      	movlt	r3, #45	; 0x2d
 800a458:	b088      	sub	sp, #32
 800a45a:	4614      	mov	r4, r2
 800a45c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a45e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a460:	7013      	strb	r3, [r2, #0]
 800a462:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a464:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800a468:	f023 0820 	bic.w	r8, r3, #32
 800a46c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a470:	d005      	beq.n	800a47e <__cvt+0x3a>
 800a472:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a476:	d100      	bne.n	800a47a <__cvt+0x36>
 800a478:	3501      	adds	r5, #1
 800a47a:	2302      	movs	r3, #2
 800a47c:	e000      	b.n	800a480 <__cvt+0x3c>
 800a47e:	2303      	movs	r3, #3
 800a480:	aa07      	add	r2, sp, #28
 800a482:	9204      	str	r2, [sp, #16]
 800a484:	aa06      	add	r2, sp, #24
 800a486:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a48a:	e9cd 3500 	strd	r3, r5, [sp]
 800a48e:	4622      	mov	r2, r4
 800a490:	463b      	mov	r3, r7
 800a492:	f000 fe61 	bl	800b158 <_dtoa_r>
 800a496:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a49a:	4606      	mov	r6, r0
 800a49c:	d102      	bne.n	800a4a4 <__cvt+0x60>
 800a49e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4a0:	07db      	lsls	r3, r3, #31
 800a4a2:	d522      	bpl.n	800a4ea <__cvt+0xa6>
 800a4a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4a8:	eb06 0905 	add.w	r9, r6, r5
 800a4ac:	d110      	bne.n	800a4d0 <__cvt+0x8c>
 800a4ae:	7833      	ldrb	r3, [r6, #0]
 800a4b0:	2b30      	cmp	r3, #48	; 0x30
 800a4b2:	d10a      	bne.n	800a4ca <__cvt+0x86>
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	4639      	mov	r1, r7
 800a4bc:	f7f6 fab0 	bl	8000a20 <__aeabi_dcmpeq>
 800a4c0:	b918      	cbnz	r0, 800a4ca <__cvt+0x86>
 800a4c2:	f1c5 0501 	rsb	r5, r5, #1
 800a4c6:	f8ca 5000 	str.w	r5, [sl]
 800a4ca:	f8da 3000 	ldr.w	r3, [sl]
 800a4ce:	4499      	add	r9, r3
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	4639      	mov	r1, r7
 800a4d8:	f7f6 faa2 	bl	8000a20 <__aeabi_dcmpeq>
 800a4dc:	b108      	cbz	r0, 800a4e2 <__cvt+0x9e>
 800a4de:	f8cd 901c 	str.w	r9, [sp, #28]
 800a4e2:	2230      	movs	r2, #48	; 0x30
 800a4e4:	9b07      	ldr	r3, [sp, #28]
 800a4e6:	454b      	cmp	r3, r9
 800a4e8:	d307      	bcc.n	800a4fa <__cvt+0xb6>
 800a4ea:	4630      	mov	r0, r6
 800a4ec:	9b07      	ldr	r3, [sp, #28]
 800a4ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a4f0:	1b9b      	subs	r3, r3, r6
 800a4f2:	6013      	str	r3, [r2, #0]
 800a4f4:	b008      	add	sp, #32
 800a4f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4fa:	1c59      	adds	r1, r3, #1
 800a4fc:	9107      	str	r1, [sp, #28]
 800a4fe:	701a      	strb	r2, [r3, #0]
 800a500:	e7f0      	b.n	800a4e4 <__cvt+0xa0>

0800a502 <__exponent>:
 800a502:	4603      	mov	r3, r0
 800a504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a506:	2900      	cmp	r1, #0
 800a508:	f803 2b02 	strb.w	r2, [r3], #2
 800a50c:	bfb6      	itet	lt
 800a50e:	222d      	movlt	r2, #45	; 0x2d
 800a510:	222b      	movge	r2, #43	; 0x2b
 800a512:	4249      	neglt	r1, r1
 800a514:	2909      	cmp	r1, #9
 800a516:	7042      	strb	r2, [r0, #1]
 800a518:	dd2a      	ble.n	800a570 <__exponent+0x6e>
 800a51a:	f10d 0207 	add.w	r2, sp, #7
 800a51e:	4617      	mov	r7, r2
 800a520:	260a      	movs	r6, #10
 800a522:	fb91 f5f6 	sdiv	r5, r1, r6
 800a526:	4694      	mov	ip, r2
 800a528:	fb06 1415 	mls	r4, r6, r5, r1
 800a52c:	3430      	adds	r4, #48	; 0x30
 800a52e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a532:	460c      	mov	r4, r1
 800a534:	2c63      	cmp	r4, #99	; 0x63
 800a536:	4629      	mov	r1, r5
 800a538:	f102 32ff 	add.w	r2, r2, #4294967295
 800a53c:	dcf1      	bgt.n	800a522 <__exponent+0x20>
 800a53e:	3130      	adds	r1, #48	; 0x30
 800a540:	f1ac 0402 	sub.w	r4, ip, #2
 800a544:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a548:	4622      	mov	r2, r4
 800a54a:	1c41      	adds	r1, r0, #1
 800a54c:	42ba      	cmp	r2, r7
 800a54e:	d30a      	bcc.n	800a566 <__exponent+0x64>
 800a550:	f10d 0209 	add.w	r2, sp, #9
 800a554:	eba2 020c 	sub.w	r2, r2, ip
 800a558:	42bc      	cmp	r4, r7
 800a55a:	bf88      	it	hi
 800a55c:	2200      	movhi	r2, #0
 800a55e:	4413      	add	r3, r2
 800a560:	1a18      	subs	r0, r3, r0
 800a562:	b003      	add	sp, #12
 800a564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a566:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a56a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a56e:	e7ed      	b.n	800a54c <__exponent+0x4a>
 800a570:	2330      	movs	r3, #48	; 0x30
 800a572:	3130      	adds	r1, #48	; 0x30
 800a574:	7083      	strb	r3, [r0, #2]
 800a576:	70c1      	strb	r1, [r0, #3]
 800a578:	1d03      	adds	r3, r0, #4
 800a57a:	e7f1      	b.n	800a560 <__exponent+0x5e>

0800a57c <_printf_float>:
 800a57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a580:	b091      	sub	sp, #68	; 0x44
 800a582:	460c      	mov	r4, r1
 800a584:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800a588:	4616      	mov	r6, r2
 800a58a:	461f      	mov	r7, r3
 800a58c:	4605      	mov	r5, r0
 800a58e:	f000 fcc5 	bl	800af1c <_localeconv_r>
 800a592:	6803      	ldr	r3, [r0, #0]
 800a594:	4618      	mov	r0, r3
 800a596:	9309      	str	r3, [sp, #36]	; 0x24
 800a598:	f7f5 fe16 	bl	80001c8 <strlen>
 800a59c:	2300      	movs	r3, #0
 800a59e:	930e      	str	r3, [sp, #56]	; 0x38
 800a5a0:	f8d8 3000 	ldr.w	r3, [r8]
 800a5a4:	900a      	str	r0, [sp, #40]	; 0x28
 800a5a6:	3307      	adds	r3, #7
 800a5a8:	f023 0307 	bic.w	r3, r3, #7
 800a5ac:	f103 0208 	add.w	r2, r3, #8
 800a5b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a5b4:	f8d4 b000 	ldr.w	fp, [r4]
 800a5b8:	f8c8 2000 	str.w	r2, [r8]
 800a5bc:	e9d3 a800 	ldrd	sl, r8, [r3]
 800a5c0:	4652      	mov	r2, sl
 800a5c2:	4643      	mov	r3, r8
 800a5c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a5c8:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800a5cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a5d2:	4650      	mov	r0, sl
 800a5d4:	4b9c      	ldr	r3, [pc, #624]	; (800a848 <_printf_float+0x2cc>)
 800a5d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5d8:	f7f6 fa54 	bl	8000a84 <__aeabi_dcmpun>
 800a5dc:	bb70      	cbnz	r0, 800a63c <_printf_float+0xc0>
 800a5de:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e2:	4650      	mov	r0, sl
 800a5e4:	4b98      	ldr	r3, [pc, #608]	; (800a848 <_printf_float+0x2cc>)
 800a5e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5e8:	f7f6 fa2e 	bl	8000a48 <__aeabi_dcmple>
 800a5ec:	bb30      	cbnz	r0, 800a63c <_printf_float+0xc0>
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	4650      	mov	r0, sl
 800a5f4:	4641      	mov	r1, r8
 800a5f6:	f7f6 fa1d 	bl	8000a34 <__aeabi_dcmplt>
 800a5fa:	b110      	cbz	r0, 800a602 <_printf_float+0x86>
 800a5fc:	232d      	movs	r3, #45	; 0x2d
 800a5fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a602:	4a92      	ldr	r2, [pc, #584]	; (800a84c <_printf_float+0x2d0>)
 800a604:	4b92      	ldr	r3, [pc, #584]	; (800a850 <_printf_float+0x2d4>)
 800a606:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a60a:	bf94      	ite	ls
 800a60c:	4690      	movls	r8, r2
 800a60e:	4698      	movhi	r8, r3
 800a610:	2303      	movs	r3, #3
 800a612:	f04f 0a00 	mov.w	sl, #0
 800a616:	6123      	str	r3, [r4, #16]
 800a618:	f02b 0304 	bic.w	r3, fp, #4
 800a61c:	6023      	str	r3, [r4, #0]
 800a61e:	4633      	mov	r3, r6
 800a620:	4621      	mov	r1, r4
 800a622:	4628      	mov	r0, r5
 800a624:	9700      	str	r7, [sp, #0]
 800a626:	aa0f      	add	r2, sp, #60	; 0x3c
 800a628:	f000 f9d6 	bl	800a9d8 <_printf_common>
 800a62c:	3001      	adds	r0, #1
 800a62e:	f040 8090 	bne.w	800a752 <_printf_float+0x1d6>
 800a632:	f04f 30ff 	mov.w	r0, #4294967295
 800a636:	b011      	add	sp, #68	; 0x44
 800a638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a63c:	4652      	mov	r2, sl
 800a63e:	4643      	mov	r3, r8
 800a640:	4650      	mov	r0, sl
 800a642:	4641      	mov	r1, r8
 800a644:	f7f6 fa1e 	bl	8000a84 <__aeabi_dcmpun>
 800a648:	b148      	cbz	r0, 800a65e <_printf_float+0xe2>
 800a64a:	f1b8 0f00 	cmp.w	r8, #0
 800a64e:	bfb8      	it	lt
 800a650:	232d      	movlt	r3, #45	; 0x2d
 800a652:	4a80      	ldr	r2, [pc, #512]	; (800a854 <_printf_float+0x2d8>)
 800a654:	bfb8      	it	lt
 800a656:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a65a:	4b7f      	ldr	r3, [pc, #508]	; (800a858 <_printf_float+0x2dc>)
 800a65c:	e7d3      	b.n	800a606 <_printf_float+0x8a>
 800a65e:	6863      	ldr	r3, [r4, #4]
 800a660:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a664:	1c5a      	adds	r2, r3, #1
 800a666:	d142      	bne.n	800a6ee <_printf_float+0x172>
 800a668:	2306      	movs	r3, #6
 800a66a:	6063      	str	r3, [r4, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	9206      	str	r2, [sp, #24]
 800a670:	aa0e      	add	r2, sp, #56	; 0x38
 800a672:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800a676:	aa0d      	add	r2, sp, #52	; 0x34
 800a678:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800a67c:	9203      	str	r2, [sp, #12]
 800a67e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a682:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a686:	6023      	str	r3, [r4, #0]
 800a688:	6863      	ldr	r3, [r4, #4]
 800a68a:	4652      	mov	r2, sl
 800a68c:	9300      	str	r3, [sp, #0]
 800a68e:	4628      	mov	r0, r5
 800a690:	4643      	mov	r3, r8
 800a692:	910b      	str	r1, [sp, #44]	; 0x2c
 800a694:	f7ff fed6 	bl	800a444 <__cvt>
 800a698:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a69a:	4680      	mov	r8, r0
 800a69c:	2947      	cmp	r1, #71	; 0x47
 800a69e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a6a0:	d108      	bne.n	800a6b4 <_printf_float+0x138>
 800a6a2:	1cc8      	adds	r0, r1, #3
 800a6a4:	db02      	blt.n	800a6ac <_printf_float+0x130>
 800a6a6:	6863      	ldr	r3, [r4, #4]
 800a6a8:	4299      	cmp	r1, r3
 800a6aa:	dd40      	ble.n	800a72e <_printf_float+0x1b2>
 800a6ac:	f1a9 0902 	sub.w	r9, r9, #2
 800a6b0:	fa5f f989 	uxtb.w	r9, r9
 800a6b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a6b8:	d81f      	bhi.n	800a6fa <_printf_float+0x17e>
 800a6ba:	464a      	mov	r2, r9
 800a6bc:	3901      	subs	r1, #1
 800a6be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a6c2:	910d      	str	r1, [sp, #52]	; 0x34
 800a6c4:	f7ff ff1d 	bl	800a502 <__exponent>
 800a6c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6ca:	4682      	mov	sl, r0
 800a6cc:	1813      	adds	r3, r2, r0
 800a6ce:	2a01      	cmp	r2, #1
 800a6d0:	6123      	str	r3, [r4, #16]
 800a6d2:	dc02      	bgt.n	800a6da <_printf_float+0x15e>
 800a6d4:	6822      	ldr	r2, [r4, #0]
 800a6d6:	07d2      	lsls	r2, r2, #31
 800a6d8:	d501      	bpl.n	800a6de <_printf_float+0x162>
 800a6da:	3301      	adds	r3, #1
 800a6dc:	6123      	str	r3, [r4, #16]
 800a6de:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d09b      	beq.n	800a61e <_printf_float+0xa2>
 800a6e6:	232d      	movs	r3, #45	; 0x2d
 800a6e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6ec:	e797      	b.n	800a61e <_printf_float+0xa2>
 800a6ee:	2947      	cmp	r1, #71	; 0x47
 800a6f0:	d1bc      	bne.n	800a66c <_printf_float+0xf0>
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d1ba      	bne.n	800a66c <_printf_float+0xf0>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e7b7      	b.n	800a66a <_printf_float+0xee>
 800a6fa:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a6fe:	d118      	bne.n	800a732 <_printf_float+0x1b6>
 800a700:	2900      	cmp	r1, #0
 800a702:	6863      	ldr	r3, [r4, #4]
 800a704:	dd0b      	ble.n	800a71e <_printf_float+0x1a2>
 800a706:	6121      	str	r1, [r4, #16]
 800a708:	b913      	cbnz	r3, 800a710 <_printf_float+0x194>
 800a70a:	6822      	ldr	r2, [r4, #0]
 800a70c:	07d0      	lsls	r0, r2, #31
 800a70e:	d502      	bpl.n	800a716 <_printf_float+0x19a>
 800a710:	3301      	adds	r3, #1
 800a712:	440b      	add	r3, r1
 800a714:	6123      	str	r3, [r4, #16]
 800a716:	f04f 0a00 	mov.w	sl, #0
 800a71a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a71c:	e7df      	b.n	800a6de <_printf_float+0x162>
 800a71e:	b913      	cbnz	r3, 800a726 <_printf_float+0x1aa>
 800a720:	6822      	ldr	r2, [r4, #0]
 800a722:	07d2      	lsls	r2, r2, #31
 800a724:	d501      	bpl.n	800a72a <_printf_float+0x1ae>
 800a726:	3302      	adds	r3, #2
 800a728:	e7f4      	b.n	800a714 <_printf_float+0x198>
 800a72a:	2301      	movs	r3, #1
 800a72c:	e7f2      	b.n	800a714 <_printf_float+0x198>
 800a72e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a732:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a734:	4299      	cmp	r1, r3
 800a736:	db05      	blt.n	800a744 <_printf_float+0x1c8>
 800a738:	6823      	ldr	r3, [r4, #0]
 800a73a:	6121      	str	r1, [r4, #16]
 800a73c:	07d8      	lsls	r0, r3, #31
 800a73e:	d5ea      	bpl.n	800a716 <_printf_float+0x19a>
 800a740:	1c4b      	adds	r3, r1, #1
 800a742:	e7e7      	b.n	800a714 <_printf_float+0x198>
 800a744:	2900      	cmp	r1, #0
 800a746:	bfcc      	ite	gt
 800a748:	2201      	movgt	r2, #1
 800a74a:	f1c1 0202 	rsble	r2, r1, #2
 800a74e:	4413      	add	r3, r2
 800a750:	e7e0      	b.n	800a714 <_printf_float+0x198>
 800a752:	6823      	ldr	r3, [r4, #0]
 800a754:	055a      	lsls	r2, r3, #21
 800a756:	d407      	bmi.n	800a768 <_printf_float+0x1ec>
 800a758:	6923      	ldr	r3, [r4, #16]
 800a75a:	4642      	mov	r2, r8
 800a75c:	4631      	mov	r1, r6
 800a75e:	4628      	mov	r0, r5
 800a760:	47b8      	blx	r7
 800a762:	3001      	adds	r0, #1
 800a764:	d12b      	bne.n	800a7be <_printf_float+0x242>
 800a766:	e764      	b.n	800a632 <_printf_float+0xb6>
 800a768:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a76c:	f240 80dd 	bls.w	800a92a <_printf_float+0x3ae>
 800a770:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a774:	2200      	movs	r2, #0
 800a776:	2300      	movs	r3, #0
 800a778:	f7f6 f952 	bl	8000a20 <__aeabi_dcmpeq>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	d033      	beq.n	800a7e8 <_printf_float+0x26c>
 800a780:	2301      	movs	r3, #1
 800a782:	4631      	mov	r1, r6
 800a784:	4628      	mov	r0, r5
 800a786:	4a35      	ldr	r2, [pc, #212]	; (800a85c <_printf_float+0x2e0>)
 800a788:	47b8      	blx	r7
 800a78a:	3001      	adds	r0, #1
 800a78c:	f43f af51 	beq.w	800a632 <_printf_float+0xb6>
 800a790:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a794:	429a      	cmp	r2, r3
 800a796:	db02      	blt.n	800a79e <_printf_float+0x222>
 800a798:	6823      	ldr	r3, [r4, #0]
 800a79a:	07d8      	lsls	r0, r3, #31
 800a79c:	d50f      	bpl.n	800a7be <_printf_float+0x242>
 800a79e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7a2:	4631      	mov	r1, r6
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	47b8      	blx	r7
 800a7a8:	3001      	adds	r0, #1
 800a7aa:	f43f af42 	beq.w	800a632 <_printf_float+0xb6>
 800a7ae:	f04f 0800 	mov.w	r8, #0
 800a7b2:	f104 091a 	add.w	r9, r4, #26
 800a7b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7b8:	3b01      	subs	r3, #1
 800a7ba:	4543      	cmp	r3, r8
 800a7bc:	dc09      	bgt.n	800a7d2 <_printf_float+0x256>
 800a7be:	6823      	ldr	r3, [r4, #0]
 800a7c0:	079b      	lsls	r3, r3, #30
 800a7c2:	f100 8104 	bmi.w	800a9ce <_printf_float+0x452>
 800a7c6:	68e0      	ldr	r0, [r4, #12]
 800a7c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7ca:	4298      	cmp	r0, r3
 800a7cc:	bfb8      	it	lt
 800a7ce:	4618      	movlt	r0, r3
 800a7d0:	e731      	b.n	800a636 <_printf_float+0xba>
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	464a      	mov	r2, r9
 800a7d6:	4631      	mov	r1, r6
 800a7d8:	4628      	mov	r0, r5
 800a7da:	47b8      	blx	r7
 800a7dc:	3001      	adds	r0, #1
 800a7de:	f43f af28 	beq.w	800a632 <_printf_float+0xb6>
 800a7e2:	f108 0801 	add.w	r8, r8, #1
 800a7e6:	e7e6      	b.n	800a7b6 <_printf_float+0x23a>
 800a7e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	dc38      	bgt.n	800a860 <_printf_float+0x2e4>
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	4631      	mov	r1, r6
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	4a19      	ldr	r2, [pc, #100]	; (800a85c <_printf_float+0x2e0>)
 800a7f6:	47b8      	blx	r7
 800a7f8:	3001      	adds	r0, #1
 800a7fa:	f43f af1a 	beq.w	800a632 <_printf_float+0xb6>
 800a7fe:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800a802:	4313      	orrs	r3, r2
 800a804:	d102      	bne.n	800a80c <_printf_float+0x290>
 800a806:	6823      	ldr	r3, [r4, #0]
 800a808:	07d9      	lsls	r1, r3, #31
 800a80a:	d5d8      	bpl.n	800a7be <_printf_float+0x242>
 800a80c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a810:	4631      	mov	r1, r6
 800a812:	4628      	mov	r0, r5
 800a814:	47b8      	blx	r7
 800a816:	3001      	adds	r0, #1
 800a818:	f43f af0b 	beq.w	800a632 <_printf_float+0xb6>
 800a81c:	f04f 0900 	mov.w	r9, #0
 800a820:	f104 0a1a 	add.w	sl, r4, #26
 800a824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a826:	425b      	negs	r3, r3
 800a828:	454b      	cmp	r3, r9
 800a82a:	dc01      	bgt.n	800a830 <_printf_float+0x2b4>
 800a82c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a82e:	e794      	b.n	800a75a <_printf_float+0x1de>
 800a830:	2301      	movs	r3, #1
 800a832:	4652      	mov	r2, sl
 800a834:	4631      	mov	r1, r6
 800a836:	4628      	mov	r0, r5
 800a838:	47b8      	blx	r7
 800a83a:	3001      	adds	r0, #1
 800a83c:	f43f aef9 	beq.w	800a632 <_printf_float+0xb6>
 800a840:	f109 0901 	add.w	r9, r9, #1
 800a844:	e7ee      	b.n	800a824 <_printf_float+0x2a8>
 800a846:	bf00      	nop
 800a848:	7fefffff 	.word	0x7fefffff
 800a84c:	0800d47c 	.word	0x0800d47c
 800a850:	0800d480 	.word	0x0800d480
 800a854:	0800d484 	.word	0x0800d484
 800a858:	0800d488 	.word	0x0800d488
 800a85c:	0800d48c 	.word	0x0800d48c
 800a860:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a862:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a864:	429a      	cmp	r2, r3
 800a866:	bfa8      	it	ge
 800a868:	461a      	movge	r2, r3
 800a86a:	2a00      	cmp	r2, #0
 800a86c:	4691      	mov	r9, r2
 800a86e:	dc37      	bgt.n	800a8e0 <_printf_float+0x364>
 800a870:	f04f 0b00 	mov.w	fp, #0
 800a874:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a878:	f104 021a 	add.w	r2, r4, #26
 800a87c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a880:	ebaa 0309 	sub.w	r3, sl, r9
 800a884:	455b      	cmp	r3, fp
 800a886:	dc33      	bgt.n	800a8f0 <_printf_float+0x374>
 800a888:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a88c:	429a      	cmp	r2, r3
 800a88e:	db3b      	blt.n	800a908 <_printf_float+0x38c>
 800a890:	6823      	ldr	r3, [r4, #0]
 800a892:	07da      	lsls	r2, r3, #31
 800a894:	d438      	bmi.n	800a908 <_printf_float+0x38c>
 800a896:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800a89a:	eba2 0903 	sub.w	r9, r2, r3
 800a89e:	eba2 020a 	sub.w	r2, r2, sl
 800a8a2:	4591      	cmp	r9, r2
 800a8a4:	bfa8      	it	ge
 800a8a6:	4691      	movge	r9, r2
 800a8a8:	f1b9 0f00 	cmp.w	r9, #0
 800a8ac:	dc34      	bgt.n	800a918 <_printf_float+0x39c>
 800a8ae:	f04f 0800 	mov.w	r8, #0
 800a8b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8b6:	f104 0a1a 	add.w	sl, r4, #26
 800a8ba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a8be:	1a9b      	subs	r3, r3, r2
 800a8c0:	eba3 0309 	sub.w	r3, r3, r9
 800a8c4:	4543      	cmp	r3, r8
 800a8c6:	f77f af7a 	ble.w	800a7be <_printf_float+0x242>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	4652      	mov	r2, sl
 800a8ce:	4631      	mov	r1, r6
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	47b8      	blx	r7
 800a8d4:	3001      	adds	r0, #1
 800a8d6:	f43f aeac 	beq.w	800a632 <_printf_float+0xb6>
 800a8da:	f108 0801 	add.w	r8, r8, #1
 800a8de:	e7ec      	b.n	800a8ba <_printf_float+0x33e>
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	4631      	mov	r1, r6
 800a8e4:	4642      	mov	r2, r8
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	47b8      	blx	r7
 800a8ea:	3001      	adds	r0, #1
 800a8ec:	d1c0      	bne.n	800a870 <_printf_float+0x2f4>
 800a8ee:	e6a0      	b.n	800a632 <_printf_float+0xb6>
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	4631      	mov	r1, r6
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	920b      	str	r2, [sp, #44]	; 0x2c
 800a8f8:	47b8      	blx	r7
 800a8fa:	3001      	adds	r0, #1
 800a8fc:	f43f ae99 	beq.w	800a632 <_printf_float+0xb6>
 800a900:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a902:	f10b 0b01 	add.w	fp, fp, #1
 800a906:	e7b9      	b.n	800a87c <_printf_float+0x300>
 800a908:	4631      	mov	r1, r6
 800a90a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a90e:	4628      	mov	r0, r5
 800a910:	47b8      	blx	r7
 800a912:	3001      	adds	r0, #1
 800a914:	d1bf      	bne.n	800a896 <_printf_float+0x31a>
 800a916:	e68c      	b.n	800a632 <_printf_float+0xb6>
 800a918:	464b      	mov	r3, r9
 800a91a:	4631      	mov	r1, r6
 800a91c:	4628      	mov	r0, r5
 800a91e:	eb08 020a 	add.w	r2, r8, sl
 800a922:	47b8      	blx	r7
 800a924:	3001      	adds	r0, #1
 800a926:	d1c2      	bne.n	800a8ae <_printf_float+0x332>
 800a928:	e683      	b.n	800a632 <_printf_float+0xb6>
 800a92a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a92c:	2a01      	cmp	r2, #1
 800a92e:	dc01      	bgt.n	800a934 <_printf_float+0x3b8>
 800a930:	07db      	lsls	r3, r3, #31
 800a932:	d539      	bpl.n	800a9a8 <_printf_float+0x42c>
 800a934:	2301      	movs	r3, #1
 800a936:	4642      	mov	r2, r8
 800a938:	4631      	mov	r1, r6
 800a93a:	4628      	mov	r0, r5
 800a93c:	47b8      	blx	r7
 800a93e:	3001      	adds	r0, #1
 800a940:	f43f ae77 	beq.w	800a632 <_printf_float+0xb6>
 800a944:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a948:	4631      	mov	r1, r6
 800a94a:	4628      	mov	r0, r5
 800a94c:	47b8      	blx	r7
 800a94e:	3001      	adds	r0, #1
 800a950:	f43f ae6f 	beq.w	800a632 <_printf_float+0xb6>
 800a954:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a958:	2200      	movs	r2, #0
 800a95a:	2300      	movs	r3, #0
 800a95c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800a960:	f7f6 f85e 	bl	8000a20 <__aeabi_dcmpeq>
 800a964:	b9d8      	cbnz	r0, 800a99e <_printf_float+0x422>
 800a966:	f109 33ff 	add.w	r3, r9, #4294967295
 800a96a:	f108 0201 	add.w	r2, r8, #1
 800a96e:	4631      	mov	r1, r6
 800a970:	4628      	mov	r0, r5
 800a972:	47b8      	blx	r7
 800a974:	3001      	adds	r0, #1
 800a976:	d10e      	bne.n	800a996 <_printf_float+0x41a>
 800a978:	e65b      	b.n	800a632 <_printf_float+0xb6>
 800a97a:	2301      	movs	r3, #1
 800a97c:	464a      	mov	r2, r9
 800a97e:	4631      	mov	r1, r6
 800a980:	4628      	mov	r0, r5
 800a982:	47b8      	blx	r7
 800a984:	3001      	adds	r0, #1
 800a986:	f43f ae54 	beq.w	800a632 <_printf_float+0xb6>
 800a98a:	f108 0801 	add.w	r8, r8, #1
 800a98e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a990:	3b01      	subs	r3, #1
 800a992:	4543      	cmp	r3, r8
 800a994:	dcf1      	bgt.n	800a97a <_printf_float+0x3fe>
 800a996:	4653      	mov	r3, sl
 800a998:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a99c:	e6de      	b.n	800a75c <_printf_float+0x1e0>
 800a99e:	f04f 0800 	mov.w	r8, #0
 800a9a2:	f104 091a 	add.w	r9, r4, #26
 800a9a6:	e7f2      	b.n	800a98e <_printf_float+0x412>
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	4642      	mov	r2, r8
 800a9ac:	e7df      	b.n	800a96e <_printf_float+0x3f2>
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	464a      	mov	r2, r9
 800a9b2:	4631      	mov	r1, r6
 800a9b4:	4628      	mov	r0, r5
 800a9b6:	47b8      	blx	r7
 800a9b8:	3001      	adds	r0, #1
 800a9ba:	f43f ae3a 	beq.w	800a632 <_printf_float+0xb6>
 800a9be:	f108 0801 	add.w	r8, r8, #1
 800a9c2:	68e3      	ldr	r3, [r4, #12]
 800a9c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a9c6:	1a5b      	subs	r3, r3, r1
 800a9c8:	4543      	cmp	r3, r8
 800a9ca:	dcf0      	bgt.n	800a9ae <_printf_float+0x432>
 800a9cc:	e6fb      	b.n	800a7c6 <_printf_float+0x24a>
 800a9ce:	f04f 0800 	mov.w	r8, #0
 800a9d2:	f104 0919 	add.w	r9, r4, #25
 800a9d6:	e7f4      	b.n	800a9c2 <_printf_float+0x446>

0800a9d8 <_printf_common>:
 800a9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9dc:	4616      	mov	r6, r2
 800a9de:	4699      	mov	r9, r3
 800a9e0:	688a      	ldr	r2, [r1, #8]
 800a9e2:	690b      	ldr	r3, [r1, #16]
 800a9e4:	4607      	mov	r7, r0
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	bfb8      	it	lt
 800a9ea:	4613      	movlt	r3, r2
 800a9ec:	6033      	str	r3, [r6, #0]
 800a9ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9f8:	b10a      	cbz	r2, 800a9fe <_printf_common+0x26>
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	6033      	str	r3, [r6, #0]
 800a9fe:	6823      	ldr	r3, [r4, #0]
 800aa00:	0699      	lsls	r1, r3, #26
 800aa02:	bf42      	ittt	mi
 800aa04:	6833      	ldrmi	r3, [r6, #0]
 800aa06:	3302      	addmi	r3, #2
 800aa08:	6033      	strmi	r3, [r6, #0]
 800aa0a:	6825      	ldr	r5, [r4, #0]
 800aa0c:	f015 0506 	ands.w	r5, r5, #6
 800aa10:	d106      	bne.n	800aa20 <_printf_common+0x48>
 800aa12:	f104 0a19 	add.w	sl, r4, #25
 800aa16:	68e3      	ldr	r3, [r4, #12]
 800aa18:	6832      	ldr	r2, [r6, #0]
 800aa1a:	1a9b      	subs	r3, r3, r2
 800aa1c:	42ab      	cmp	r3, r5
 800aa1e:	dc2b      	bgt.n	800aa78 <_printf_common+0xa0>
 800aa20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa24:	1e13      	subs	r3, r2, #0
 800aa26:	6822      	ldr	r2, [r4, #0]
 800aa28:	bf18      	it	ne
 800aa2a:	2301      	movne	r3, #1
 800aa2c:	0692      	lsls	r2, r2, #26
 800aa2e:	d430      	bmi.n	800aa92 <_printf_common+0xba>
 800aa30:	4649      	mov	r1, r9
 800aa32:	4638      	mov	r0, r7
 800aa34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa38:	47c0      	blx	r8
 800aa3a:	3001      	adds	r0, #1
 800aa3c:	d023      	beq.n	800aa86 <_printf_common+0xae>
 800aa3e:	6823      	ldr	r3, [r4, #0]
 800aa40:	6922      	ldr	r2, [r4, #16]
 800aa42:	f003 0306 	and.w	r3, r3, #6
 800aa46:	2b04      	cmp	r3, #4
 800aa48:	bf14      	ite	ne
 800aa4a:	2500      	movne	r5, #0
 800aa4c:	6833      	ldreq	r3, [r6, #0]
 800aa4e:	f04f 0600 	mov.w	r6, #0
 800aa52:	bf08      	it	eq
 800aa54:	68e5      	ldreq	r5, [r4, #12]
 800aa56:	f104 041a 	add.w	r4, r4, #26
 800aa5a:	bf08      	it	eq
 800aa5c:	1aed      	subeq	r5, r5, r3
 800aa5e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800aa62:	bf08      	it	eq
 800aa64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	bfc4      	itt	gt
 800aa6c:	1a9b      	subgt	r3, r3, r2
 800aa6e:	18ed      	addgt	r5, r5, r3
 800aa70:	42b5      	cmp	r5, r6
 800aa72:	d11a      	bne.n	800aaaa <_printf_common+0xd2>
 800aa74:	2000      	movs	r0, #0
 800aa76:	e008      	b.n	800aa8a <_printf_common+0xb2>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	4652      	mov	r2, sl
 800aa7c:	4649      	mov	r1, r9
 800aa7e:	4638      	mov	r0, r7
 800aa80:	47c0      	blx	r8
 800aa82:	3001      	adds	r0, #1
 800aa84:	d103      	bne.n	800aa8e <_printf_common+0xb6>
 800aa86:	f04f 30ff 	mov.w	r0, #4294967295
 800aa8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa8e:	3501      	adds	r5, #1
 800aa90:	e7c1      	b.n	800aa16 <_printf_common+0x3e>
 800aa92:	2030      	movs	r0, #48	; 0x30
 800aa94:	18e1      	adds	r1, r4, r3
 800aa96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa9a:	1c5a      	adds	r2, r3, #1
 800aa9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aaa0:	4422      	add	r2, r4
 800aaa2:	3302      	adds	r3, #2
 800aaa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aaa8:	e7c2      	b.n	800aa30 <_printf_common+0x58>
 800aaaa:	2301      	movs	r3, #1
 800aaac:	4622      	mov	r2, r4
 800aaae:	4649      	mov	r1, r9
 800aab0:	4638      	mov	r0, r7
 800aab2:	47c0      	blx	r8
 800aab4:	3001      	adds	r0, #1
 800aab6:	d0e6      	beq.n	800aa86 <_printf_common+0xae>
 800aab8:	3601      	adds	r6, #1
 800aaba:	e7d9      	b.n	800aa70 <_printf_common+0x98>

0800aabc <_printf_i>:
 800aabc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aac0:	7e0f      	ldrb	r7, [r1, #24]
 800aac2:	4691      	mov	r9, r2
 800aac4:	2f78      	cmp	r7, #120	; 0x78
 800aac6:	4680      	mov	r8, r0
 800aac8:	460c      	mov	r4, r1
 800aaca:	469a      	mov	sl, r3
 800aacc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aace:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aad2:	d807      	bhi.n	800aae4 <_printf_i+0x28>
 800aad4:	2f62      	cmp	r7, #98	; 0x62
 800aad6:	d80a      	bhi.n	800aaee <_printf_i+0x32>
 800aad8:	2f00      	cmp	r7, #0
 800aada:	f000 80d5 	beq.w	800ac88 <_printf_i+0x1cc>
 800aade:	2f58      	cmp	r7, #88	; 0x58
 800aae0:	f000 80c1 	beq.w	800ac66 <_printf_i+0x1aa>
 800aae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aae8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aaec:	e03a      	b.n	800ab64 <_printf_i+0xa8>
 800aaee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aaf2:	2b15      	cmp	r3, #21
 800aaf4:	d8f6      	bhi.n	800aae4 <_printf_i+0x28>
 800aaf6:	a101      	add	r1, pc, #4	; (adr r1, 800aafc <_printf_i+0x40>)
 800aaf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aafc:	0800ab55 	.word	0x0800ab55
 800ab00:	0800ab69 	.word	0x0800ab69
 800ab04:	0800aae5 	.word	0x0800aae5
 800ab08:	0800aae5 	.word	0x0800aae5
 800ab0c:	0800aae5 	.word	0x0800aae5
 800ab10:	0800aae5 	.word	0x0800aae5
 800ab14:	0800ab69 	.word	0x0800ab69
 800ab18:	0800aae5 	.word	0x0800aae5
 800ab1c:	0800aae5 	.word	0x0800aae5
 800ab20:	0800aae5 	.word	0x0800aae5
 800ab24:	0800aae5 	.word	0x0800aae5
 800ab28:	0800ac6f 	.word	0x0800ac6f
 800ab2c:	0800ab95 	.word	0x0800ab95
 800ab30:	0800ac29 	.word	0x0800ac29
 800ab34:	0800aae5 	.word	0x0800aae5
 800ab38:	0800aae5 	.word	0x0800aae5
 800ab3c:	0800ac91 	.word	0x0800ac91
 800ab40:	0800aae5 	.word	0x0800aae5
 800ab44:	0800ab95 	.word	0x0800ab95
 800ab48:	0800aae5 	.word	0x0800aae5
 800ab4c:	0800aae5 	.word	0x0800aae5
 800ab50:	0800ac31 	.word	0x0800ac31
 800ab54:	682b      	ldr	r3, [r5, #0]
 800ab56:	1d1a      	adds	r2, r3, #4
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	602a      	str	r2, [r5, #0]
 800ab5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab64:	2301      	movs	r3, #1
 800ab66:	e0a0      	b.n	800acaa <_printf_i+0x1ee>
 800ab68:	6820      	ldr	r0, [r4, #0]
 800ab6a:	682b      	ldr	r3, [r5, #0]
 800ab6c:	0607      	lsls	r7, r0, #24
 800ab6e:	f103 0104 	add.w	r1, r3, #4
 800ab72:	6029      	str	r1, [r5, #0]
 800ab74:	d501      	bpl.n	800ab7a <_printf_i+0xbe>
 800ab76:	681e      	ldr	r6, [r3, #0]
 800ab78:	e003      	b.n	800ab82 <_printf_i+0xc6>
 800ab7a:	0646      	lsls	r6, r0, #25
 800ab7c:	d5fb      	bpl.n	800ab76 <_printf_i+0xba>
 800ab7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ab82:	2e00      	cmp	r6, #0
 800ab84:	da03      	bge.n	800ab8e <_printf_i+0xd2>
 800ab86:	232d      	movs	r3, #45	; 0x2d
 800ab88:	4276      	negs	r6, r6
 800ab8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab8e:	230a      	movs	r3, #10
 800ab90:	4859      	ldr	r0, [pc, #356]	; (800acf8 <_printf_i+0x23c>)
 800ab92:	e012      	b.n	800abba <_printf_i+0xfe>
 800ab94:	682b      	ldr	r3, [r5, #0]
 800ab96:	6820      	ldr	r0, [r4, #0]
 800ab98:	1d19      	adds	r1, r3, #4
 800ab9a:	6029      	str	r1, [r5, #0]
 800ab9c:	0605      	lsls	r5, r0, #24
 800ab9e:	d501      	bpl.n	800aba4 <_printf_i+0xe8>
 800aba0:	681e      	ldr	r6, [r3, #0]
 800aba2:	e002      	b.n	800abaa <_printf_i+0xee>
 800aba4:	0641      	lsls	r1, r0, #25
 800aba6:	d5fb      	bpl.n	800aba0 <_printf_i+0xe4>
 800aba8:	881e      	ldrh	r6, [r3, #0]
 800abaa:	2f6f      	cmp	r7, #111	; 0x6f
 800abac:	bf0c      	ite	eq
 800abae:	2308      	moveq	r3, #8
 800abb0:	230a      	movne	r3, #10
 800abb2:	4851      	ldr	r0, [pc, #324]	; (800acf8 <_printf_i+0x23c>)
 800abb4:	2100      	movs	r1, #0
 800abb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abba:	6865      	ldr	r5, [r4, #4]
 800abbc:	2d00      	cmp	r5, #0
 800abbe:	bfa8      	it	ge
 800abc0:	6821      	ldrge	r1, [r4, #0]
 800abc2:	60a5      	str	r5, [r4, #8]
 800abc4:	bfa4      	itt	ge
 800abc6:	f021 0104 	bicge.w	r1, r1, #4
 800abca:	6021      	strge	r1, [r4, #0]
 800abcc:	b90e      	cbnz	r6, 800abd2 <_printf_i+0x116>
 800abce:	2d00      	cmp	r5, #0
 800abd0:	d04b      	beq.n	800ac6a <_printf_i+0x1ae>
 800abd2:	4615      	mov	r5, r2
 800abd4:	fbb6 f1f3 	udiv	r1, r6, r3
 800abd8:	fb03 6711 	mls	r7, r3, r1, r6
 800abdc:	5dc7      	ldrb	r7, [r0, r7]
 800abde:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800abe2:	4637      	mov	r7, r6
 800abe4:	42bb      	cmp	r3, r7
 800abe6:	460e      	mov	r6, r1
 800abe8:	d9f4      	bls.n	800abd4 <_printf_i+0x118>
 800abea:	2b08      	cmp	r3, #8
 800abec:	d10b      	bne.n	800ac06 <_printf_i+0x14a>
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	07de      	lsls	r6, r3, #31
 800abf2:	d508      	bpl.n	800ac06 <_printf_i+0x14a>
 800abf4:	6923      	ldr	r3, [r4, #16]
 800abf6:	6861      	ldr	r1, [r4, #4]
 800abf8:	4299      	cmp	r1, r3
 800abfa:	bfde      	ittt	le
 800abfc:	2330      	movle	r3, #48	; 0x30
 800abfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac02:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ac06:	1b52      	subs	r2, r2, r5
 800ac08:	6122      	str	r2, [r4, #16]
 800ac0a:	464b      	mov	r3, r9
 800ac0c:	4621      	mov	r1, r4
 800ac0e:	4640      	mov	r0, r8
 800ac10:	f8cd a000 	str.w	sl, [sp]
 800ac14:	aa03      	add	r2, sp, #12
 800ac16:	f7ff fedf 	bl	800a9d8 <_printf_common>
 800ac1a:	3001      	adds	r0, #1
 800ac1c:	d14a      	bne.n	800acb4 <_printf_i+0x1f8>
 800ac1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac22:	b004      	add	sp, #16
 800ac24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac28:	6823      	ldr	r3, [r4, #0]
 800ac2a:	f043 0320 	orr.w	r3, r3, #32
 800ac2e:	6023      	str	r3, [r4, #0]
 800ac30:	2778      	movs	r7, #120	; 0x78
 800ac32:	4832      	ldr	r0, [pc, #200]	; (800acfc <_printf_i+0x240>)
 800ac34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ac38:	6823      	ldr	r3, [r4, #0]
 800ac3a:	6829      	ldr	r1, [r5, #0]
 800ac3c:	061f      	lsls	r7, r3, #24
 800ac3e:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac42:	d402      	bmi.n	800ac4a <_printf_i+0x18e>
 800ac44:	065f      	lsls	r7, r3, #25
 800ac46:	bf48      	it	mi
 800ac48:	b2b6      	uxthmi	r6, r6
 800ac4a:	07df      	lsls	r7, r3, #31
 800ac4c:	bf48      	it	mi
 800ac4e:	f043 0320 	orrmi.w	r3, r3, #32
 800ac52:	6029      	str	r1, [r5, #0]
 800ac54:	bf48      	it	mi
 800ac56:	6023      	strmi	r3, [r4, #0]
 800ac58:	b91e      	cbnz	r6, 800ac62 <_printf_i+0x1a6>
 800ac5a:	6823      	ldr	r3, [r4, #0]
 800ac5c:	f023 0320 	bic.w	r3, r3, #32
 800ac60:	6023      	str	r3, [r4, #0]
 800ac62:	2310      	movs	r3, #16
 800ac64:	e7a6      	b.n	800abb4 <_printf_i+0xf8>
 800ac66:	4824      	ldr	r0, [pc, #144]	; (800acf8 <_printf_i+0x23c>)
 800ac68:	e7e4      	b.n	800ac34 <_printf_i+0x178>
 800ac6a:	4615      	mov	r5, r2
 800ac6c:	e7bd      	b.n	800abea <_printf_i+0x12e>
 800ac6e:	682b      	ldr	r3, [r5, #0]
 800ac70:	6826      	ldr	r6, [r4, #0]
 800ac72:	1d18      	adds	r0, r3, #4
 800ac74:	6961      	ldr	r1, [r4, #20]
 800ac76:	6028      	str	r0, [r5, #0]
 800ac78:	0635      	lsls	r5, r6, #24
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	d501      	bpl.n	800ac82 <_printf_i+0x1c6>
 800ac7e:	6019      	str	r1, [r3, #0]
 800ac80:	e002      	b.n	800ac88 <_printf_i+0x1cc>
 800ac82:	0670      	lsls	r0, r6, #25
 800ac84:	d5fb      	bpl.n	800ac7e <_printf_i+0x1c2>
 800ac86:	8019      	strh	r1, [r3, #0]
 800ac88:	2300      	movs	r3, #0
 800ac8a:	4615      	mov	r5, r2
 800ac8c:	6123      	str	r3, [r4, #16]
 800ac8e:	e7bc      	b.n	800ac0a <_printf_i+0x14e>
 800ac90:	682b      	ldr	r3, [r5, #0]
 800ac92:	2100      	movs	r1, #0
 800ac94:	1d1a      	adds	r2, r3, #4
 800ac96:	602a      	str	r2, [r5, #0]
 800ac98:	681d      	ldr	r5, [r3, #0]
 800ac9a:	6862      	ldr	r2, [r4, #4]
 800ac9c:	4628      	mov	r0, r5
 800ac9e:	f000 f9c4 	bl	800b02a <memchr>
 800aca2:	b108      	cbz	r0, 800aca8 <_printf_i+0x1ec>
 800aca4:	1b40      	subs	r0, r0, r5
 800aca6:	6060      	str	r0, [r4, #4]
 800aca8:	6863      	ldr	r3, [r4, #4]
 800acaa:	6123      	str	r3, [r4, #16]
 800acac:	2300      	movs	r3, #0
 800acae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acb2:	e7aa      	b.n	800ac0a <_printf_i+0x14e>
 800acb4:	462a      	mov	r2, r5
 800acb6:	4649      	mov	r1, r9
 800acb8:	4640      	mov	r0, r8
 800acba:	6923      	ldr	r3, [r4, #16]
 800acbc:	47d0      	blx	sl
 800acbe:	3001      	adds	r0, #1
 800acc0:	d0ad      	beq.n	800ac1e <_printf_i+0x162>
 800acc2:	6823      	ldr	r3, [r4, #0]
 800acc4:	079b      	lsls	r3, r3, #30
 800acc6:	d413      	bmi.n	800acf0 <_printf_i+0x234>
 800acc8:	68e0      	ldr	r0, [r4, #12]
 800acca:	9b03      	ldr	r3, [sp, #12]
 800accc:	4298      	cmp	r0, r3
 800acce:	bfb8      	it	lt
 800acd0:	4618      	movlt	r0, r3
 800acd2:	e7a6      	b.n	800ac22 <_printf_i+0x166>
 800acd4:	2301      	movs	r3, #1
 800acd6:	4632      	mov	r2, r6
 800acd8:	4649      	mov	r1, r9
 800acda:	4640      	mov	r0, r8
 800acdc:	47d0      	blx	sl
 800acde:	3001      	adds	r0, #1
 800ace0:	d09d      	beq.n	800ac1e <_printf_i+0x162>
 800ace2:	3501      	adds	r5, #1
 800ace4:	68e3      	ldr	r3, [r4, #12]
 800ace6:	9903      	ldr	r1, [sp, #12]
 800ace8:	1a5b      	subs	r3, r3, r1
 800acea:	42ab      	cmp	r3, r5
 800acec:	dcf2      	bgt.n	800acd4 <_printf_i+0x218>
 800acee:	e7eb      	b.n	800acc8 <_printf_i+0x20c>
 800acf0:	2500      	movs	r5, #0
 800acf2:	f104 0619 	add.w	r6, r4, #25
 800acf6:	e7f5      	b.n	800ace4 <_printf_i+0x228>
 800acf8:	0800d48e 	.word	0x0800d48e
 800acfc:	0800d49f 	.word	0x0800d49f

0800ad00 <std>:
 800ad00:	2300      	movs	r3, #0
 800ad02:	b510      	push	{r4, lr}
 800ad04:	4604      	mov	r4, r0
 800ad06:	e9c0 3300 	strd	r3, r3, [r0]
 800ad0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad0e:	6083      	str	r3, [r0, #8]
 800ad10:	8181      	strh	r1, [r0, #12]
 800ad12:	6643      	str	r3, [r0, #100]	; 0x64
 800ad14:	81c2      	strh	r2, [r0, #14]
 800ad16:	6183      	str	r3, [r0, #24]
 800ad18:	4619      	mov	r1, r3
 800ad1a:	2208      	movs	r2, #8
 800ad1c:	305c      	adds	r0, #92	; 0x5c
 800ad1e:	f000 f8f4 	bl	800af0a <memset>
 800ad22:	4b0d      	ldr	r3, [pc, #52]	; (800ad58 <std+0x58>)
 800ad24:	6224      	str	r4, [r4, #32]
 800ad26:	6263      	str	r3, [r4, #36]	; 0x24
 800ad28:	4b0c      	ldr	r3, [pc, #48]	; (800ad5c <std+0x5c>)
 800ad2a:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad2c:	4b0c      	ldr	r3, [pc, #48]	; (800ad60 <std+0x60>)
 800ad2e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad30:	4b0c      	ldr	r3, [pc, #48]	; (800ad64 <std+0x64>)
 800ad32:	6323      	str	r3, [r4, #48]	; 0x30
 800ad34:	4b0c      	ldr	r3, [pc, #48]	; (800ad68 <std+0x68>)
 800ad36:	429c      	cmp	r4, r3
 800ad38:	d006      	beq.n	800ad48 <std+0x48>
 800ad3a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ad3e:	4294      	cmp	r4, r2
 800ad40:	d002      	beq.n	800ad48 <std+0x48>
 800ad42:	33d0      	adds	r3, #208	; 0xd0
 800ad44:	429c      	cmp	r4, r3
 800ad46:	d105      	bne.n	800ad54 <std+0x54>
 800ad48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad50:	f000 b968 	b.w	800b024 <__retarget_lock_init_recursive>
 800ad54:	bd10      	pop	{r4, pc}
 800ad56:	bf00      	nop
 800ad58:	0800ae85 	.word	0x0800ae85
 800ad5c:	0800aea7 	.word	0x0800aea7
 800ad60:	0800aedf 	.word	0x0800aedf
 800ad64:	0800af03 	.word	0x0800af03
 800ad68:	2000175c 	.word	0x2000175c

0800ad6c <stdio_exit_handler>:
 800ad6c:	4a02      	ldr	r2, [pc, #8]	; (800ad78 <stdio_exit_handler+0xc>)
 800ad6e:	4903      	ldr	r1, [pc, #12]	; (800ad7c <stdio_exit_handler+0x10>)
 800ad70:	4803      	ldr	r0, [pc, #12]	; (800ad80 <stdio_exit_handler+0x14>)
 800ad72:	f000 b869 	b.w	800ae48 <_fwalk_sglue>
 800ad76:	bf00      	nop
 800ad78:	200001e0 	.word	0x200001e0
 800ad7c:	0800c5a5 	.word	0x0800c5a5
 800ad80:	200001ec 	.word	0x200001ec

0800ad84 <cleanup_stdio>:
 800ad84:	6841      	ldr	r1, [r0, #4]
 800ad86:	4b0c      	ldr	r3, [pc, #48]	; (800adb8 <cleanup_stdio+0x34>)
 800ad88:	b510      	push	{r4, lr}
 800ad8a:	4299      	cmp	r1, r3
 800ad8c:	4604      	mov	r4, r0
 800ad8e:	d001      	beq.n	800ad94 <cleanup_stdio+0x10>
 800ad90:	f001 fc08 	bl	800c5a4 <_fflush_r>
 800ad94:	68a1      	ldr	r1, [r4, #8]
 800ad96:	4b09      	ldr	r3, [pc, #36]	; (800adbc <cleanup_stdio+0x38>)
 800ad98:	4299      	cmp	r1, r3
 800ad9a:	d002      	beq.n	800ada2 <cleanup_stdio+0x1e>
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f001 fc01 	bl	800c5a4 <_fflush_r>
 800ada2:	68e1      	ldr	r1, [r4, #12]
 800ada4:	4b06      	ldr	r3, [pc, #24]	; (800adc0 <cleanup_stdio+0x3c>)
 800ada6:	4299      	cmp	r1, r3
 800ada8:	d004      	beq.n	800adb4 <cleanup_stdio+0x30>
 800adaa:	4620      	mov	r0, r4
 800adac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adb0:	f001 bbf8 	b.w	800c5a4 <_fflush_r>
 800adb4:	bd10      	pop	{r4, pc}
 800adb6:	bf00      	nop
 800adb8:	2000175c 	.word	0x2000175c
 800adbc:	200017c4 	.word	0x200017c4
 800adc0:	2000182c 	.word	0x2000182c

0800adc4 <global_stdio_init.part.0>:
 800adc4:	b510      	push	{r4, lr}
 800adc6:	4b0b      	ldr	r3, [pc, #44]	; (800adf4 <global_stdio_init.part.0+0x30>)
 800adc8:	4c0b      	ldr	r4, [pc, #44]	; (800adf8 <global_stdio_init.part.0+0x34>)
 800adca:	4a0c      	ldr	r2, [pc, #48]	; (800adfc <global_stdio_init.part.0+0x38>)
 800adcc:	4620      	mov	r0, r4
 800adce:	601a      	str	r2, [r3, #0]
 800add0:	2104      	movs	r1, #4
 800add2:	2200      	movs	r2, #0
 800add4:	f7ff ff94 	bl	800ad00 <std>
 800add8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800addc:	2201      	movs	r2, #1
 800adde:	2109      	movs	r1, #9
 800ade0:	f7ff ff8e 	bl	800ad00 <std>
 800ade4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ade8:	2202      	movs	r2, #2
 800adea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adee:	2112      	movs	r1, #18
 800adf0:	f7ff bf86 	b.w	800ad00 <std>
 800adf4:	20001894 	.word	0x20001894
 800adf8:	2000175c 	.word	0x2000175c
 800adfc:	0800ad6d 	.word	0x0800ad6d

0800ae00 <__sfp_lock_acquire>:
 800ae00:	4801      	ldr	r0, [pc, #4]	; (800ae08 <__sfp_lock_acquire+0x8>)
 800ae02:	f000 b910 	b.w	800b026 <__retarget_lock_acquire_recursive>
 800ae06:	bf00      	nop
 800ae08:	2000189d 	.word	0x2000189d

0800ae0c <__sfp_lock_release>:
 800ae0c:	4801      	ldr	r0, [pc, #4]	; (800ae14 <__sfp_lock_release+0x8>)
 800ae0e:	f000 b90b 	b.w	800b028 <__retarget_lock_release_recursive>
 800ae12:	bf00      	nop
 800ae14:	2000189d 	.word	0x2000189d

0800ae18 <__sinit>:
 800ae18:	b510      	push	{r4, lr}
 800ae1a:	4604      	mov	r4, r0
 800ae1c:	f7ff fff0 	bl	800ae00 <__sfp_lock_acquire>
 800ae20:	6a23      	ldr	r3, [r4, #32]
 800ae22:	b11b      	cbz	r3, 800ae2c <__sinit+0x14>
 800ae24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae28:	f7ff bff0 	b.w	800ae0c <__sfp_lock_release>
 800ae2c:	4b04      	ldr	r3, [pc, #16]	; (800ae40 <__sinit+0x28>)
 800ae2e:	6223      	str	r3, [r4, #32]
 800ae30:	4b04      	ldr	r3, [pc, #16]	; (800ae44 <__sinit+0x2c>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d1f5      	bne.n	800ae24 <__sinit+0xc>
 800ae38:	f7ff ffc4 	bl	800adc4 <global_stdio_init.part.0>
 800ae3c:	e7f2      	b.n	800ae24 <__sinit+0xc>
 800ae3e:	bf00      	nop
 800ae40:	0800ad85 	.word	0x0800ad85
 800ae44:	20001894 	.word	0x20001894

0800ae48 <_fwalk_sglue>:
 800ae48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae4c:	4607      	mov	r7, r0
 800ae4e:	4688      	mov	r8, r1
 800ae50:	4614      	mov	r4, r2
 800ae52:	2600      	movs	r6, #0
 800ae54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae58:	f1b9 0901 	subs.w	r9, r9, #1
 800ae5c:	d505      	bpl.n	800ae6a <_fwalk_sglue+0x22>
 800ae5e:	6824      	ldr	r4, [r4, #0]
 800ae60:	2c00      	cmp	r4, #0
 800ae62:	d1f7      	bne.n	800ae54 <_fwalk_sglue+0xc>
 800ae64:	4630      	mov	r0, r6
 800ae66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae6a:	89ab      	ldrh	r3, [r5, #12]
 800ae6c:	2b01      	cmp	r3, #1
 800ae6e:	d907      	bls.n	800ae80 <_fwalk_sglue+0x38>
 800ae70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae74:	3301      	adds	r3, #1
 800ae76:	d003      	beq.n	800ae80 <_fwalk_sglue+0x38>
 800ae78:	4629      	mov	r1, r5
 800ae7a:	4638      	mov	r0, r7
 800ae7c:	47c0      	blx	r8
 800ae7e:	4306      	orrs	r6, r0
 800ae80:	3568      	adds	r5, #104	; 0x68
 800ae82:	e7e9      	b.n	800ae58 <_fwalk_sglue+0x10>

0800ae84 <__sread>:
 800ae84:	b510      	push	{r4, lr}
 800ae86:	460c      	mov	r4, r1
 800ae88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae8c:	f000 f86c 	bl	800af68 <_read_r>
 800ae90:	2800      	cmp	r0, #0
 800ae92:	bfab      	itete	ge
 800ae94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ae96:	89a3      	ldrhlt	r3, [r4, #12]
 800ae98:	181b      	addge	r3, r3, r0
 800ae9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ae9e:	bfac      	ite	ge
 800aea0:	6563      	strge	r3, [r4, #84]	; 0x54
 800aea2:	81a3      	strhlt	r3, [r4, #12]
 800aea4:	bd10      	pop	{r4, pc}

0800aea6 <__swrite>:
 800aea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeaa:	461f      	mov	r7, r3
 800aeac:	898b      	ldrh	r3, [r1, #12]
 800aeae:	4605      	mov	r5, r0
 800aeb0:	05db      	lsls	r3, r3, #23
 800aeb2:	460c      	mov	r4, r1
 800aeb4:	4616      	mov	r6, r2
 800aeb6:	d505      	bpl.n	800aec4 <__swrite+0x1e>
 800aeb8:	2302      	movs	r3, #2
 800aeba:	2200      	movs	r2, #0
 800aebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aec0:	f000 f840 	bl	800af44 <_lseek_r>
 800aec4:	89a3      	ldrh	r3, [r4, #12]
 800aec6:	4632      	mov	r2, r6
 800aec8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aecc:	81a3      	strh	r3, [r4, #12]
 800aece:	4628      	mov	r0, r5
 800aed0:	463b      	mov	r3, r7
 800aed2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeda:	f000 b867 	b.w	800afac <_write_r>

0800aede <__sseek>:
 800aede:	b510      	push	{r4, lr}
 800aee0:	460c      	mov	r4, r1
 800aee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aee6:	f000 f82d 	bl	800af44 <_lseek_r>
 800aeea:	1c43      	adds	r3, r0, #1
 800aeec:	89a3      	ldrh	r3, [r4, #12]
 800aeee:	bf15      	itete	ne
 800aef0:	6560      	strne	r0, [r4, #84]	; 0x54
 800aef2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aef6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aefa:	81a3      	strheq	r3, [r4, #12]
 800aefc:	bf18      	it	ne
 800aefe:	81a3      	strhne	r3, [r4, #12]
 800af00:	bd10      	pop	{r4, pc}

0800af02 <__sclose>:
 800af02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af06:	f000 b80d 	b.w	800af24 <_close_r>

0800af0a <memset>:
 800af0a:	4603      	mov	r3, r0
 800af0c:	4402      	add	r2, r0
 800af0e:	4293      	cmp	r3, r2
 800af10:	d100      	bne.n	800af14 <memset+0xa>
 800af12:	4770      	bx	lr
 800af14:	f803 1b01 	strb.w	r1, [r3], #1
 800af18:	e7f9      	b.n	800af0e <memset+0x4>
	...

0800af1c <_localeconv_r>:
 800af1c:	4800      	ldr	r0, [pc, #0]	; (800af20 <_localeconv_r+0x4>)
 800af1e:	4770      	bx	lr
 800af20:	2000032c 	.word	0x2000032c

0800af24 <_close_r>:
 800af24:	b538      	push	{r3, r4, r5, lr}
 800af26:	2300      	movs	r3, #0
 800af28:	4d05      	ldr	r5, [pc, #20]	; (800af40 <_close_r+0x1c>)
 800af2a:	4604      	mov	r4, r0
 800af2c:	4608      	mov	r0, r1
 800af2e:	602b      	str	r3, [r5, #0]
 800af30:	f7f7 fbfa 	bl	8002728 <_close>
 800af34:	1c43      	adds	r3, r0, #1
 800af36:	d102      	bne.n	800af3e <_close_r+0x1a>
 800af38:	682b      	ldr	r3, [r5, #0]
 800af3a:	b103      	cbz	r3, 800af3e <_close_r+0x1a>
 800af3c:	6023      	str	r3, [r4, #0]
 800af3e:	bd38      	pop	{r3, r4, r5, pc}
 800af40:	20001898 	.word	0x20001898

0800af44 <_lseek_r>:
 800af44:	b538      	push	{r3, r4, r5, lr}
 800af46:	4604      	mov	r4, r0
 800af48:	4608      	mov	r0, r1
 800af4a:	4611      	mov	r1, r2
 800af4c:	2200      	movs	r2, #0
 800af4e:	4d05      	ldr	r5, [pc, #20]	; (800af64 <_lseek_r+0x20>)
 800af50:	602a      	str	r2, [r5, #0]
 800af52:	461a      	mov	r2, r3
 800af54:	f7f7 fc0c 	bl	8002770 <_lseek>
 800af58:	1c43      	adds	r3, r0, #1
 800af5a:	d102      	bne.n	800af62 <_lseek_r+0x1e>
 800af5c:	682b      	ldr	r3, [r5, #0]
 800af5e:	b103      	cbz	r3, 800af62 <_lseek_r+0x1e>
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	bd38      	pop	{r3, r4, r5, pc}
 800af64:	20001898 	.word	0x20001898

0800af68 <_read_r>:
 800af68:	b538      	push	{r3, r4, r5, lr}
 800af6a:	4604      	mov	r4, r0
 800af6c:	4608      	mov	r0, r1
 800af6e:	4611      	mov	r1, r2
 800af70:	2200      	movs	r2, #0
 800af72:	4d05      	ldr	r5, [pc, #20]	; (800af88 <_read_r+0x20>)
 800af74:	602a      	str	r2, [r5, #0]
 800af76:	461a      	mov	r2, r3
 800af78:	f7f7 fb9d 	bl	80026b6 <_read>
 800af7c:	1c43      	adds	r3, r0, #1
 800af7e:	d102      	bne.n	800af86 <_read_r+0x1e>
 800af80:	682b      	ldr	r3, [r5, #0]
 800af82:	b103      	cbz	r3, 800af86 <_read_r+0x1e>
 800af84:	6023      	str	r3, [r4, #0]
 800af86:	bd38      	pop	{r3, r4, r5, pc}
 800af88:	20001898 	.word	0x20001898

0800af8c <_sbrk_r>:
 800af8c:	b538      	push	{r3, r4, r5, lr}
 800af8e:	2300      	movs	r3, #0
 800af90:	4d05      	ldr	r5, [pc, #20]	; (800afa8 <_sbrk_r+0x1c>)
 800af92:	4604      	mov	r4, r0
 800af94:	4608      	mov	r0, r1
 800af96:	602b      	str	r3, [r5, #0]
 800af98:	f7f7 fbf6 	bl	8002788 <_sbrk>
 800af9c:	1c43      	adds	r3, r0, #1
 800af9e:	d102      	bne.n	800afa6 <_sbrk_r+0x1a>
 800afa0:	682b      	ldr	r3, [r5, #0]
 800afa2:	b103      	cbz	r3, 800afa6 <_sbrk_r+0x1a>
 800afa4:	6023      	str	r3, [r4, #0]
 800afa6:	bd38      	pop	{r3, r4, r5, pc}
 800afa8:	20001898 	.word	0x20001898

0800afac <_write_r>:
 800afac:	b538      	push	{r3, r4, r5, lr}
 800afae:	4604      	mov	r4, r0
 800afb0:	4608      	mov	r0, r1
 800afb2:	4611      	mov	r1, r2
 800afb4:	2200      	movs	r2, #0
 800afb6:	4d05      	ldr	r5, [pc, #20]	; (800afcc <_write_r+0x20>)
 800afb8:	602a      	str	r2, [r5, #0]
 800afba:	461a      	mov	r2, r3
 800afbc:	f7f7 fb98 	bl	80026f0 <_write>
 800afc0:	1c43      	adds	r3, r0, #1
 800afc2:	d102      	bne.n	800afca <_write_r+0x1e>
 800afc4:	682b      	ldr	r3, [r5, #0]
 800afc6:	b103      	cbz	r3, 800afca <_write_r+0x1e>
 800afc8:	6023      	str	r3, [r4, #0]
 800afca:	bd38      	pop	{r3, r4, r5, pc}
 800afcc:	20001898 	.word	0x20001898

0800afd0 <__errno>:
 800afd0:	4b01      	ldr	r3, [pc, #4]	; (800afd8 <__errno+0x8>)
 800afd2:	6818      	ldr	r0, [r3, #0]
 800afd4:	4770      	bx	lr
 800afd6:	bf00      	nop
 800afd8:	20000238 	.word	0x20000238

0800afdc <__libc_init_array>:
 800afdc:	b570      	push	{r4, r5, r6, lr}
 800afde:	2600      	movs	r6, #0
 800afe0:	4d0c      	ldr	r5, [pc, #48]	; (800b014 <__libc_init_array+0x38>)
 800afe2:	4c0d      	ldr	r4, [pc, #52]	; (800b018 <__libc_init_array+0x3c>)
 800afe4:	1b64      	subs	r4, r4, r5
 800afe6:	10a4      	asrs	r4, r4, #2
 800afe8:	42a6      	cmp	r6, r4
 800afea:	d109      	bne.n	800b000 <__libc_init_array+0x24>
 800afec:	f002 f806 	bl	800cffc <_init>
 800aff0:	2600      	movs	r6, #0
 800aff2:	4d0a      	ldr	r5, [pc, #40]	; (800b01c <__libc_init_array+0x40>)
 800aff4:	4c0a      	ldr	r4, [pc, #40]	; (800b020 <__libc_init_array+0x44>)
 800aff6:	1b64      	subs	r4, r4, r5
 800aff8:	10a4      	asrs	r4, r4, #2
 800affa:	42a6      	cmp	r6, r4
 800affc:	d105      	bne.n	800b00a <__libc_init_array+0x2e>
 800affe:	bd70      	pop	{r4, r5, r6, pc}
 800b000:	f855 3b04 	ldr.w	r3, [r5], #4
 800b004:	4798      	blx	r3
 800b006:	3601      	adds	r6, #1
 800b008:	e7ee      	b.n	800afe8 <__libc_init_array+0xc>
 800b00a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b00e:	4798      	blx	r3
 800b010:	3601      	adds	r6, #1
 800b012:	e7f2      	b.n	800affa <__libc_init_array+0x1e>
 800b014:	0800d7f4 	.word	0x0800d7f4
 800b018:	0800d7f4 	.word	0x0800d7f4
 800b01c:	0800d7f4 	.word	0x0800d7f4
 800b020:	0800d7f8 	.word	0x0800d7f8

0800b024 <__retarget_lock_init_recursive>:
 800b024:	4770      	bx	lr

0800b026 <__retarget_lock_acquire_recursive>:
 800b026:	4770      	bx	lr

0800b028 <__retarget_lock_release_recursive>:
 800b028:	4770      	bx	lr

0800b02a <memchr>:
 800b02a:	4603      	mov	r3, r0
 800b02c:	b510      	push	{r4, lr}
 800b02e:	b2c9      	uxtb	r1, r1
 800b030:	4402      	add	r2, r0
 800b032:	4293      	cmp	r3, r2
 800b034:	4618      	mov	r0, r3
 800b036:	d101      	bne.n	800b03c <memchr+0x12>
 800b038:	2000      	movs	r0, #0
 800b03a:	e003      	b.n	800b044 <memchr+0x1a>
 800b03c:	7804      	ldrb	r4, [r0, #0]
 800b03e:	3301      	adds	r3, #1
 800b040:	428c      	cmp	r4, r1
 800b042:	d1f6      	bne.n	800b032 <memchr+0x8>
 800b044:	bd10      	pop	{r4, pc}

0800b046 <quorem>:
 800b046:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b04a:	6903      	ldr	r3, [r0, #16]
 800b04c:	690c      	ldr	r4, [r1, #16]
 800b04e:	4607      	mov	r7, r0
 800b050:	42a3      	cmp	r3, r4
 800b052:	db7f      	blt.n	800b154 <quorem+0x10e>
 800b054:	3c01      	subs	r4, #1
 800b056:	f100 0514 	add.w	r5, r0, #20
 800b05a:	f101 0814 	add.w	r8, r1, #20
 800b05e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b062:	9301      	str	r3, [sp, #4]
 800b064:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b068:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b06c:	3301      	adds	r3, #1
 800b06e:	429a      	cmp	r2, r3
 800b070:	fbb2 f6f3 	udiv	r6, r2, r3
 800b074:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b078:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b07c:	d331      	bcc.n	800b0e2 <quorem+0x9c>
 800b07e:	f04f 0e00 	mov.w	lr, #0
 800b082:	4640      	mov	r0, r8
 800b084:	46ac      	mov	ip, r5
 800b086:	46f2      	mov	sl, lr
 800b088:	f850 2b04 	ldr.w	r2, [r0], #4
 800b08c:	b293      	uxth	r3, r2
 800b08e:	fb06 e303 	mla	r3, r6, r3, lr
 800b092:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b096:	0c1a      	lsrs	r2, r3, #16
 800b098:	b29b      	uxth	r3, r3
 800b09a:	fb06 220e 	mla	r2, r6, lr, r2
 800b09e:	ebaa 0303 	sub.w	r3, sl, r3
 800b0a2:	f8dc a000 	ldr.w	sl, [ip]
 800b0a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b0aa:	fa1f fa8a 	uxth.w	sl, sl
 800b0ae:	4453      	add	r3, sl
 800b0b0:	f8dc a000 	ldr.w	sl, [ip]
 800b0b4:	b292      	uxth	r2, r2
 800b0b6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b0ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0c4:	4581      	cmp	r9, r0
 800b0c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b0ca:	f84c 3b04 	str.w	r3, [ip], #4
 800b0ce:	d2db      	bcs.n	800b088 <quorem+0x42>
 800b0d0:	f855 300b 	ldr.w	r3, [r5, fp]
 800b0d4:	b92b      	cbnz	r3, 800b0e2 <quorem+0x9c>
 800b0d6:	9b01      	ldr	r3, [sp, #4]
 800b0d8:	3b04      	subs	r3, #4
 800b0da:	429d      	cmp	r5, r3
 800b0dc:	461a      	mov	r2, r3
 800b0de:	d32d      	bcc.n	800b13c <quorem+0xf6>
 800b0e0:	613c      	str	r4, [r7, #16]
 800b0e2:	4638      	mov	r0, r7
 800b0e4:	f001 f8de 	bl	800c2a4 <__mcmp>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	db23      	blt.n	800b134 <quorem+0xee>
 800b0ec:	4629      	mov	r1, r5
 800b0ee:	2000      	movs	r0, #0
 800b0f0:	3601      	adds	r6, #1
 800b0f2:	f858 2b04 	ldr.w	r2, [r8], #4
 800b0f6:	f8d1 c000 	ldr.w	ip, [r1]
 800b0fa:	b293      	uxth	r3, r2
 800b0fc:	1ac3      	subs	r3, r0, r3
 800b0fe:	0c12      	lsrs	r2, r2, #16
 800b100:	fa1f f08c 	uxth.w	r0, ip
 800b104:	4403      	add	r3, r0
 800b106:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b10a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b10e:	b29b      	uxth	r3, r3
 800b110:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b114:	45c1      	cmp	r9, r8
 800b116:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b11a:	f841 3b04 	str.w	r3, [r1], #4
 800b11e:	d2e8      	bcs.n	800b0f2 <quorem+0xac>
 800b120:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b124:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b128:	b922      	cbnz	r2, 800b134 <quorem+0xee>
 800b12a:	3b04      	subs	r3, #4
 800b12c:	429d      	cmp	r5, r3
 800b12e:	461a      	mov	r2, r3
 800b130:	d30a      	bcc.n	800b148 <quorem+0x102>
 800b132:	613c      	str	r4, [r7, #16]
 800b134:	4630      	mov	r0, r6
 800b136:	b003      	add	sp, #12
 800b138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b13c:	6812      	ldr	r2, [r2, #0]
 800b13e:	3b04      	subs	r3, #4
 800b140:	2a00      	cmp	r2, #0
 800b142:	d1cd      	bne.n	800b0e0 <quorem+0x9a>
 800b144:	3c01      	subs	r4, #1
 800b146:	e7c8      	b.n	800b0da <quorem+0x94>
 800b148:	6812      	ldr	r2, [r2, #0]
 800b14a:	3b04      	subs	r3, #4
 800b14c:	2a00      	cmp	r2, #0
 800b14e:	d1f0      	bne.n	800b132 <quorem+0xec>
 800b150:	3c01      	subs	r4, #1
 800b152:	e7eb      	b.n	800b12c <quorem+0xe6>
 800b154:	2000      	movs	r0, #0
 800b156:	e7ee      	b.n	800b136 <quorem+0xf0>

0800b158 <_dtoa_r>:
 800b158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b15c:	4616      	mov	r6, r2
 800b15e:	461f      	mov	r7, r3
 800b160:	69c4      	ldr	r4, [r0, #28]
 800b162:	b099      	sub	sp, #100	; 0x64
 800b164:	4605      	mov	r5, r0
 800b166:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b16a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b16e:	b974      	cbnz	r4, 800b18e <_dtoa_r+0x36>
 800b170:	2010      	movs	r0, #16
 800b172:	f7ff f8ab 	bl	800a2cc <malloc>
 800b176:	4602      	mov	r2, r0
 800b178:	61e8      	str	r0, [r5, #28]
 800b17a:	b920      	cbnz	r0, 800b186 <_dtoa_r+0x2e>
 800b17c:	21ef      	movs	r1, #239	; 0xef
 800b17e:	4bac      	ldr	r3, [pc, #688]	; (800b430 <_dtoa_r+0x2d8>)
 800b180:	48ac      	ldr	r0, [pc, #688]	; (800b434 <_dtoa_r+0x2dc>)
 800b182:	f001 fa45 	bl	800c610 <__assert_func>
 800b186:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b18a:	6004      	str	r4, [r0, #0]
 800b18c:	60c4      	str	r4, [r0, #12]
 800b18e:	69eb      	ldr	r3, [r5, #28]
 800b190:	6819      	ldr	r1, [r3, #0]
 800b192:	b151      	cbz	r1, 800b1aa <_dtoa_r+0x52>
 800b194:	685a      	ldr	r2, [r3, #4]
 800b196:	2301      	movs	r3, #1
 800b198:	4093      	lsls	r3, r2
 800b19a:	604a      	str	r2, [r1, #4]
 800b19c:	608b      	str	r3, [r1, #8]
 800b19e:	4628      	mov	r0, r5
 800b1a0:	f000 fe46 	bl	800be30 <_Bfree>
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	69eb      	ldr	r3, [r5, #28]
 800b1a8:	601a      	str	r2, [r3, #0]
 800b1aa:	1e3b      	subs	r3, r7, #0
 800b1ac:	bfaf      	iteee	ge
 800b1ae:	2300      	movge	r3, #0
 800b1b0:	2201      	movlt	r2, #1
 800b1b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b1b6:	9305      	strlt	r3, [sp, #20]
 800b1b8:	bfa8      	it	ge
 800b1ba:	f8c8 3000 	strge.w	r3, [r8]
 800b1be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b1c2:	4b9d      	ldr	r3, [pc, #628]	; (800b438 <_dtoa_r+0x2e0>)
 800b1c4:	bfb8      	it	lt
 800b1c6:	f8c8 2000 	strlt.w	r2, [r8]
 800b1ca:	ea33 0309 	bics.w	r3, r3, r9
 800b1ce:	d119      	bne.n	800b204 <_dtoa_r+0xac>
 800b1d0:	f242 730f 	movw	r3, #9999	; 0x270f
 800b1d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b1d6:	6013      	str	r3, [r2, #0]
 800b1d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1dc:	4333      	orrs	r3, r6
 800b1de:	f000 8589 	beq.w	800bcf4 <_dtoa_r+0xb9c>
 800b1e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b1e4:	b953      	cbnz	r3, 800b1fc <_dtoa_r+0xa4>
 800b1e6:	4b95      	ldr	r3, [pc, #596]	; (800b43c <_dtoa_r+0x2e4>)
 800b1e8:	e023      	b.n	800b232 <_dtoa_r+0xda>
 800b1ea:	4b95      	ldr	r3, [pc, #596]	; (800b440 <_dtoa_r+0x2e8>)
 800b1ec:	9303      	str	r3, [sp, #12]
 800b1ee:	3308      	adds	r3, #8
 800b1f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b1f2:	6013      	str	r3, [r2, #0]
 800b1f4:	9803      	ldr	r0, [sp, #12]
 800b1f6:	b019      	add	sp, #100	; 0x64
 800b1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1fc:	4b8f      	ldr	r3, [pc, #572]	; (800b43c <_dtoa_r+0x2e4>)
 800b1fe:	9303      	str	r3, [sp, #12]
 800b200:	3303      	adds	r3, #3
 800b202:	e7f5      	b.n	800b1f0 <_dtoa_r+0x98>
 800b204:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b208:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b20c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b210:	2200      	movs	r2, #0
 800b212:	2300      	movs	r3, #0
 800b214:	f7f5 fc04 	bl	8000a20 <__aeabi_dcmpeq>
 800b218:	4680      	mov	r8, r0
 800b21a:	b160      	cbz	r0, 800b236 <_dtoa_r+0xde>
 800b21c:	2301      	movs	r3, #1
 800b21e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b220:	6013      	str	r3, [r2, #0]
 800b222:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b224:	2b00      	cmp	r3, #0
 800b226:	f000 8562 	beq.w	800bcee <_dtoa_r+0xb96>
 800b22a:	4b86      	ldr	r3, [pc, #536]	; (800b444 <_dtoa_r+0x2ec>)
 800b22c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b22e:	6013      	str	r3, [r2, #0]
 800b230:	3b01      	subs	r3, #1
 800b232:	9303      	str	r3, [sp, #12]
 800b234:	e7de      	b.n	800b1f4 <_dtoa_r+0x9c>
 800b236:	ab16      	add	r3, sp, #88	; 0x58
 800b238:	9301      	str	r3, [sp, #4]
 800b23a:	ab17      	add	r3, sp, #92	; 0x5c
 800b23c:	9300      	str	r3, [sp, #0]
 800b23e:	4628      	mov	r0, r5
 800b240:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b244:	f001 f8d6 	bl	800c3f4 <__d2b>
 800b248:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b24c:	4682      	mov	sl, r0
 800b24e:	2c00      	cmp	r4, #0
 800b250:	d07e      	beq.n	800b350 <_dtoa_r+0x1f8>
 800b252:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b256:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b258:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b25c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b260:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b264:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b268:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b26c:	4619      	mov	r1, r3
 800b26e:	2200      	movs	r2, #0
 800b270:	4b75      	ldr	r3, [pc, #468]	; (800b448 <_dtoa_r+0x2f0>)
 800b272:	f7f4 ffb5 	bl	80001e0 <__aeabi_dsub>
 800b276:	a368      	add	r3, pc, #416	; (adr r3, 800b418 <_dtoa_r+0x2c0>)
 800b278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27c:	f7f5 f968 	bl	8000550 <__aeabi_dmul>
 800b280:	a367      	add	r3, pc, #412	; (adr r3, 800b420 <_dtoa_r+0x2c8>)
 800b282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b286:	f7f4 ffad 	bl	80001e4 <__adddf3>
 800b28a:	4606      	mov	r6, r0
 800b28c:	4620      	mov	r0, r4
 800b28e:	460f      	mov	r7, r1
 800b290:	f7f5 f8f4 	bl	800047c <__aeabi_i2d>
 800b294:	a364      	add	r3, pc, #400	; (adr r3, 800b428 <_dtoa_r+0x2d0>)
 800b296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29a:	f7f5 f959 	bl	8000550 <__aeabi_dmul>
 800b29e:	4602      	mov	r2, r0
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	4630      	mov	r0, r6
 800b2a4:	4639      	mov	r1, r7
 800b2a6:	f7f4 ff9d 	bl	80001e4 <__adddf3>
 800b2aa:	4606      	mov	r6, r0
 800b2ac:	460f      	mov	r7, r1
 800b2ae:	f7f5 fbff 	bl	8000ab0 <__aeabi_d2iz>
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	4683      	mov	fp, r0
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	4639      	mov	r1, r7
 800b2bc:	f7f5 fbba 	bl	8000a34 <__aeabi_dcmplt>
 800b2c0:	b148      	cbz	r0, 800b2d6 <_dtoa_r+0x17e>
 800b2c2:	4658      	mov	r0, fp
 800b2c4:	f7f5 f8da 	bl	800047c <__aeabi_i2d>
 800b2c8:	4632      	mov	r2, r6
 800b2ca:	463b      	mov	r3, r7
 800b2cc:	f7f5 fba8 	bl	8000a20 <__aeabi_dcmpeq>
 800b2d0:	b908      	cbnz	r0, 800b2d6 <_dtoa_r+0x17e>
 800b2d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b2d6:	f1bb 0f16 	cmp.w	fp, #22
 800b2da:	d857      	bhi.n	800b38c <_dtoa_r+0x234>
 800b2dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b2e0:	4b5a      	ldr	r3, [pc, #360]	; (800b44c <_dtoa_r+0x2f4>)
 800b2e2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ea:	f7f5 fba3 	bl	8000a34 <__aeabi_dcmplt>
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	d04e      	beq.n	800b390 <_dtoa_r+0x238>
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b2f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b2fc:	1b1b      	subs	r3, r3, r4
 800b2fe:	1e5a      	subs	r2, r3, #1
 800b300:	bf46      	itte	mi
 800b302:	f1c3 0901 	rsbmi	r9, r3, #1
 800b306:	2300      	movmi	r3, #0
 800b308:	f04f 0900 	movpl.w	r9, #0
 800b30c:	9209      	str	r2, [sp, #36]	; 0x24
 800b30e:	bf48      	it	mi
 800b310:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b312:	f1bb 0f00 	cmp.w	fp, #0
 800b316:	db3d      	blt.n	800b394 <_dtoa_r+0x23c>
 800b318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b31a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800b31e:	445b      	add	r3, fp
 800b320:	9309      	str	r3, [sp, #36]	; 0x24
 800b322:	2300      	movs	r3, #0
 800b324:	930a      	str	r3, [sp, #40]	; 0x28
 800b326:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b328:	2b09      	cmp	r3, #9
 800b32a:	d867      	bhi.n	800b3fc <_dtoa_r+0x2a4>
 800b32c:	2b05      	cmp	r3, #5
 800b32e:	bfc4      	itt	gt
 800b330:	3b04      	subgt	r3, #4
 800b332:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b334:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b336:	bfc8      	it	gt
 800b338:	2400      	movgt	r4, #0
 800b33a:	f1a3 0302 	sub.w	r3, r3, #2
 800b33e:	bfd8      	it	le
 800b340:	2401      	movle	r4, #1
 800b342:	2b03      	cmp	r3, #3
 800b344:	f200 8086 	bhi.w	800b454 <_dtoa_r+0x2fc>
 800b348:	e8df f003 	tbb	[pc, r3]
 800b34c:	5637392c 	.word	0x5637392c
 800b350:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b354:	441c      	add	r4, r3
 800b356:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b35a:	2b20      	cmp	r3, #32
 800b35c:	bfc1      	itttt	gt
 800b35e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b362:	fa09 f903 	lslgt.w	r9, r9, r3
 800b366:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800b36a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b36e:	bfd6      	itet	le
 800b370:	f1c3 0320 	rsble	r3, r3, #32
 800b374:	ea49 0003 	orrgt.w	r0, r9, r3
 800b378:	fa06 f003 	lslle.w	r0, r6, r3
 800b37c:	f7f5 f86e 	bl	800045c <__aeabi_ui2d>
 800b380:	2201      	movs	r2, #1
 800b382:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b386:	3c01      	subs	r4, #1
 800b388:	9213      	str	r2, [sp, #76]	; 0x4c
 800b38a:	e76f      	b.n	800b26c <_dtoa_r+0x114>
 800b38c:	2301      	movs	r3, #1
 800b38e:	e7b3      	b.n	800b2f8 <_dtoa_r+0x1a0>
 800b390:	900f      	str	r0, [sp, #60]	; 0x3c
 800b392:	e7b2      	b.n	800b2fa <_dtoa_r+0x1a2>
 800b394:	f1cb 0300 	rsb	r3, fp, #0
 800b398:	930a      	str	r3, [sp, #40]	; 0x28
 800b39a:	2300      	movs	r3, #0
 800b39c:	eba9 090b 	sub.w	r9, r9, fp
 800b3a0:	930e      	str	r3, [sp, #56]	; 0x38
 800b3a2:	e7c0      	b.n	800b326 <_dtoa_r+0x1ce>
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	dc55      	bgt.n	800b45a <_dtoa_r+0x302>
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	9306      	str	r3, [sp, #24]
 800b3b4:	9308      	str	r3, [sp, #32]
 800b3b6:	9223      	str	r2, [sp, #140]	; 0x8c
 800b3b8:	e00b      	b.n	800b3d2 <_dtoa_r+0x27a>
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	e7f3      	b.n	800b3a6 <_dtoa_r+0x24e>
 800b3be:	2300      	movs	r3, #0
 800b3c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b3c4:	445b      	add	r3, fp
 800b3c6:	9306      	str	r3, [sp, #24]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	9308      	str	r3, [sp, #32]
 800b3ce:	bfb8      	it	lt
 800b3d0:	2301      	movlt	r3, #1
 800b3d2:	2100      	movs	r1, #0
 800b3d4:	2204      	movs	r2, #4
 800b3d6:	69e8      	ldr	r0, [r5, #28]
 800b3d8:	f102 0614 	add.w	r6, r2, #20
 800b3dc:	429e      	cmp	r6, r3
 800b3de:	d940      	bls.n	800b462 <_dtoa_r+0x30a>
 800b3e0:	6041      	str	r1, [r0, #4]
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	f000 fce4 	bl	800bdb0 <_Balloc>
 800b3e8:	9003      	str	r0, [sp, #12]
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	d13c      	bne.n	800b468 <_dtoa_r+0x310>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	f240 11af 	movw	r1, #431	; 0x1af
 800b3f4:	4b16      	ldr	r3, [pc, #88]	; (800b450 <_dtoa_r+0x2f8>)
 800b3f6:	e6c3      	b.n	800b180 <_dtoa_r+0x28>
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e7e1      	b.n	800b3c0 <_dtoa_r+0x268>
 800b3fc:	2401      	movs	r4, #1
 800b3fe:	2300      	movs	r3, #0
 800b400:	940b      	str	r4, [sp, #44]	; 0x2c
 800b402:	9322      	str	r3, [sp, #136]	; 0x88
 800b404:	f04f 33ff 	mov.w	r3, #4294967295
 800b408:	2200      	movs	r2, #0
 800b40a:	9306      	str	r3, [sp, #24]
 800b40c:	9308      	str	r3, [sp, #32]
 800b40e:	2312      	movs	r3, #18
 800b410:	e7d1      	b.n	800b3b6 <_dtoa_r+0x25e>
 800b412:	bf00      	nop
 800b414:	f3af 8000 	nop.w
 800b418:	636f4361 	.word	0x636f4361
 800b41c:	3fd287a7 	.word	0x3fd287a7
 800b420:	8b60c8b3 	.word	0x8b60c8b3
 800b424:	3fc68a28 	.word	0x3fc68a28
 800b428:	509f79fb 	.word	0x509f79fb
 800b42c:	3fd34413 	.word	0x3fd34413
 800b430:	0800d4bd 	.word	0x0800d4bd
 800b434:	0800d4d4 	.word	0x0800d4d4
 800b438:	7ff00000 	.word	0x7ff00000
 800b43c:	0800d4b9 	.word	0x0800d4b9
 800b440:	0800d4b0 	.word	0x0800d4b0
 800b444:	0800d48d 	.word	0x0800d48d
 800b448:	3ff80000 	.word	0x3ff80000
 800b44c:	0800d5c0 	.word	0x0800d5c0
 800b450:	0800d52c 	.word	0x0800d52c
 800b454:	2301      	movs	r3, #1
 800b456:	930b      	str	r3, [sp, #44]	; 0x2c
 800b458:	e7d4      	b.n	800b404 <_dtoa_r+0x2ac>
 800b45a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b45c:	9306      	str	r3, [sp, #24]
 800b45e:	9308      	str	r3, [sp, #32]
 800b460:	e7b7      	b.n	800b3d2 <_dtoa_r+0x27a>
 800b462:	3101      	adds	r1, #1
 800b464:	0052      	lsls	r2, r2, #1
 800b466:	e7b7      	b.n	800b3d8 <_dtoa_r+0x280>
 800b468:	69eb      	ldr	r3, [r5, #28]
 800b46a:	9a03      	ldr	r2, [sp, #12]
 800b46c:	601a      	str	r2, [r3, #0]
 800b46e:	9b08      	ldr	r3, [sp, #32]
 800b470:	2b0e      	cmp	r3, #14
 800b472:	f200 80a8 	bhi.w	800b5c6 <_dtoa_r+0x46e>
 800b476:	2c00      	cmp	r4, #0
 800b478:	f000 80a5 	beq.w	800b5c6 <_dtoa_r+0x46e>
 800b47c:	f1bb 0f00 	cmp.w	fp, #0
 800b480:	dd34      	ble.n	800b4ec <_dtoa_r+0x394>
 800b482:	4b9a      	ldr	r3, [pc, #616]	; (800b6ec <_dtoa_r+0x594>)
 800b484:	f00b 020f 	and.w	r2, fp, #15
 800b488:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b48c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b490:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b494:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b498:	ea4f 142b 	mov.w	r4, fp, asr #4
 800b49c:	d016      	beq.n	800b4cc <_dtoa_r+0x374>
 800b49e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b4a2:	4b93      	ldr	r3, [pc, #588]	; (800b6f0 <_dtoa_r+0x598>)
 800b4a4:	2703      	movs	r7, #3
 800b4a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b4aa:	f7f5 f97b 	bl	80007a4 <__aeabi_ddiv>
 800b4ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4b2:	f004 040f 	and.w	r4, r4, #15
 800b4b6:	4e8e      	ldr	r6, [pc, #568]	; (800b6f0 <_dtoa_r+0x598>)
 800b4b8:	b954      	cbnz	r4, 800b4d0 <_dtoa_r+0x378>
 800b4ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b4be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4c2:	f7f5 f96f 	bl	80007a4 <__aeabi_ddiv>
 800b4c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4ca:	e029      	b.n	800b520 <_dtoa_r+0x3c8>
 800b4cc:	2702      	movs	r7, #2
 800b4ce:	e7f2      	b.n	800b4b6 <_dtoa_r+0x35e>
 800b4d0:	07e1      	lsls	r1, r4, #31
 800b4d2:	d508      	bpl.n	800b4e6 <_dtoa_r+0x38e>
 800b4d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b4d8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b4dc:	f7f5 f838 	bl	8000550 <__aeabi_dmul>
 800b4e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b4e4:	3701      	adds	r7, #1
 800b4e6:	1064      	asrs	r4, r4, #1
 800b4e8:	3608      	adds	r6, #8
 800b4ea:	e7e5      	b.n	800b4b8 <_dtoa_r+0x360>
 800b4ec:	f000 80a5 	beq.w	800b63a <_dtoa_r+0x4e2>
 800b4f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b4f4:	f1cb 0400 	rsb	r4, fp, #0
 800b4f8:	4b7c      	ldr	r3, [pc, #496]	; (800b6ec <_dtoa_r+0x594>)
 800b4fa:	f004 020f 	and.w	r2, r4, #15
 800b4fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b506:	f7f5 f823 	bl	8000550 <__aeabi_dmul>
 800b50a:	2702      	movs	r7, #2
 800b50c:	2300      	movs	r3, #0
 800b50e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b512:	4e77      	ldr	r6, [pc, #476]	; (800b6f0 <_dtoa_r+0x598>)
 800b514:	1124      	asrs	r4, r4, #4
 800b516:	2c00      	cmp	r4, #0
 800b518:	f040 8084 	bne.w	800b624 <_dtoa_r+0x4cc>
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d1d2      	bne.n	800b4c6 <_dtoa_r+0x36e>
 800b520:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b524:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b528:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	f000 8087 	beq.w	800b63e <_dtoa_r+0x4e6>
 800b530:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b534:	2200      	movs	r2, #0
 800b536:	4b6f      	ldr	r3, [pc, #444]	; (800b6f4 <_dtoa_r+0x59c>)
 800b538:	f7f5 fa7c 	bl	8000a34 <__aeabi_dcmplt>
 800b53c:	2800      	cmp	r0, #0
 800b53e:	d07e      	beq.n	800b63e <_dtoa_r+0x4e6>
 800b540:	9b08      	ldr	r3, [sp, #32]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d07b      	beq.n	800b63e <_dtoa_r+0x4e6>
 800b546:	9b06      	ldr	r3, [sp, #24]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	dd38      	ble.n	800b5be <_dtoa_r+0x466>
 800b54c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b550:	2200      	movs	r2, #0
 800b552:	4b69      	ldr	r3, [pc, #420]	; (800b6f8 <_dtoa_r+0x5a0>)
 800b554:	f7f4 fffc 	bl	8000550 <__aeabi_dmul>
 800b558:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b55c:	9c06      	ldr	r4, [sp, #24]
 800b55e:	f10b 38ff 	add.w	r8, fp, #4294967295
 800b562:	3701      	adds	r7, #1
 800b564:	4638      	mov	r0, r7
 800b566:	f7f4 ff89 	bl	800047c <__aeabi_i2d>
 800b56a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b56e:	f7f4 ffef 	bl	8000550 <__aeabi_dmul>
 800b572:	2200      	movs	r2, #0
 800b574:	4b61      	ldr	r3, [pc, #388]	; (800b6fc <_dtoa_r+0x5a4>)
 800b576:	f7f4 fe35 	bl	80001e4 <__adddf3>
 800b57a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b57e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b582:	9611      	str	r6, [sp, #68]	; 0x44
 800b584:	2c00      	cmp	r4, #0
 800b586:	d15d      	bne.n	800b644 <_dtoa_r+0x4ec>
 800b588:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b58c:	2200      	movs	r2, #0
 800b58e:	4b5c      	ldr	r3, [pc, #368]	; (800b700 <_dtoa_r+0x5a8>)
 800b590:	f7f4 fe26 	bl	80001e0 <__aeabi_dsub>
 800b594:	4602      	mov	r2, r0
 800b596:	460b      	mov	r3, r1
 800b598:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b59c:	4633      	mov	r3, r6
 800b59e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b5a0:	f7f5 fa66 	bl	8000a70 <__aeabi_dcmpgt>
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	f040 8295 	bne.w	800bad4 <_dtoa_r+0x97c>
 800b5aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b5b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b5b4:	f7f5 fa3e 	bl	8000a34 <__aeabi_dcmplt>
 800b5b8:	2800      	cmp	r0, #0
 800b5ba:	f040 8289 	bne.w	800bad0 <_dtoa_r+0x978>
 800b5be:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b5c2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b5c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	f2c0 8151 	blt.w	800b870 <_dtoa_r+0x718>
 800b5ce:	f1bb 0f0e 	cmp.w	fp, #14
 800b5d2:	f300 814d 	bgt.w	800b870 <_dtoa_r+0x718>
 800b5d6:	4b45      	ldr	r3, [pc, #276]	; (800b6ec <_dtoa_r+0x594>)
 800b5d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b5dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b5e0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b5e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	f280 80da 	bge.w	800b7a0 <_dtoa_r+0x648>
 800b5ec:	9b08      	ldr	r3, [sp, #32]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	f300 80d6 	bgt.w	800b7a0 <_dtoa_r+0x648>
 800b5f4:	f040 826b 	bne.w	800bace <_dtoa_r+0x976>
 800b5f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	4b40      	ldr	r3, [pc, #256]	; (800b700 <_dtoa_r+0x5a8>)
 800b600:	f7f4 ffa6 	bl	8000550 <__aeabi_dmul>
 800b604:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b608:	f7f5 fa28 	bl	8000a5c <__aeabi_dcmpge>
 800b60c:	9c08      	ldr	r4, [sp, #32]
 800b60e:	4626      	mov	r6, r4
 800b610:	2800      	cmp	r0, #0
 800b612:	f040 8241 	bne.w	800ba98 <_dtoa_r+0x940>
 800b616:	2331      	movs	r3, #49	; 0x31
 800b618:	9f03      	ldr	r7, [sp, #12]
 800b61a:	f10b 0b01 	add.w	fp, fp, #1
 800b61e:	f807 3b01 	strb.w	r3, [r7], #1
 800b622:	e23d      	b.n	800baa0 <_dtoa_r+0x948>
 800b624:	07e2      	lsls	r2, r4, #31
 800b626:	d505      	bpl.n	800b634 <_dtoa_r+0x4dc>
 800b628:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b62c:	f7f4 ff90 	bl	8000550 <__aeabi_dmul>
 800b630:	2301      	movs	r3, #1
 800b632:	3701      	adds	r7, #1
 800b634:	1064      	asrs	r4, r4, #1
 800b636:	3608      	adds	r6, #8
 800b638:	e76d      	b.n	800b516 <_dtoa_r+0x3be>
 800b63a:	2702      	movs	r7, #2
 800b63c:	e770      	b.n	800b520 <_dtoa_r+0x3c8>
 800b63e:	46d8      	mov	r8, fp
 800b640:	9c08      	ldr	r4, [sp, #32]
 800b642:	e78f      	b.n	800b564 <_dtoa_r+0x40c>
 800b644:	9903      	ldr	r1, [sp, #12]
 800b646:	4b29      	ldr	r3, [pc, #164]	; (800b6ec <_dtoa_r+0x594>)
 800b648:	4421      	add	r1, r4
 800b64a:	9112      	str	r1, [sp, #72]	; 0x48
 800b64c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b64e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b652:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b656:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b65a:	2900      	cmp	r1, #0
 800b65c:	d054      	beq.n	800b708 <_dtoa_r+0x5b0>
 800b65e:	2000      	movs	r0, #0
 800b660:	4928      	ldr	r1, [pc, #160]	; (800b704 <_dtoa_r+0x5ac>)
 800b662:	f7f5 f89f 	bl	80007a4 <__aeabi_ddiv>
 800b666:	463b      	mov	r3, r7
 800b668:	4632      	mov	r2, r6
 800b66a:	f7f4 fdb9 	bl	80001e0 <__aeabi_dsub>
 800b66e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b672:	9f03      	ldr	r7, [sp, #12]
 800b674:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b678:	f7f5 fa1a 	bl	8000ab0 <__aeabi_d2iz>
 800b67c:	4604      	mov	r4, r0
 800b67e:	f7f4 fefd 	bl	800047c <__aeabi_i2d>
 800b682:	4602      	mov	r2, r0
 800b684:	460b      	mov	r3, r1
 800b686:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b68a:	f7f4 fda9 	bl	80001e0 <__aeabi_dsub>
 800b68e:	4602      	mov	r2, r0
 800b690:	460b      	mov	r3, r1
 800b692:	3430      	adds	r4, #48	; 0x30
 800b694:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b698:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b69c:	f807 4b01 	strb.w	r4, [r7], #1
 800b6a0:	f7f5 f9c8 	bl	8000a34 <__aeabi_dcmplt>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	d173      	bne.n	800b790 <_dtoa_r+0x638>
 800b6a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6ac:	2000      	movs	r0, #0
 800b6ae:	4911      	ldr	r1, [pc, #68]	; (800b6f4 <_dtoa_r+0x59c>)
 800b6b0:	f7f4 fd96 	bl	80001e0 <__aeabi_dsub>
 800b6b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b6b8:	f7f5 f9bc 	bl	8000a34 <__aeabi_dcmplt>
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	f040 80b6 	bne.w	800b82e <_dtoa_r+0x6d6>
 800b6c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6c4:	429f      	cmp	r7, r3
 800b6c6:	f43f af7a 	beq.w	800b5be <_dtoa_r+0x466>
 800b6ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	4b09      	ldr	r3, [pc, #36]	; (800b6f8 <_dtoa_r+0x5a0>)
 800b6d2:	f7f4 ff3d 	bl	8000550 <__aeabi_dmul>
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b6dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6e0:	4b05      	ldr	r3, [pc, #20]	; (800b6f8 <_dtoa_r+0x5a0>)
 800b6e2:	f7f4 ff35 	bl	8000550 <__aeabi_dmul>
 800b6e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6ea:	e7c3      	b.n	800b674 <_dtoa_r+0x51c>
 800b6ec:	0800d5c0 	.word	0x0800d5c0
 800b6f0:	0800d598 	.word	0x0800d598
 800b6f4:	3ff00000 	.word	0x3ff00000
 800b6f8:	40240000 	.word	0x40240000
 800b6fc:	401c0000 	.word	0x401c0000
 800b700:	40140000 	.word	0x40140000
 800b704:	3fe00000 	.word	0x3fe00000
 800b708:	4630      	mov	r0, r6
 800b70a:	4639      	mov	r1, r7
 800b70c:	f7f4 ff20 	bl	8000550 <__aeabi_dmul>
 800b710:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b712:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b716:	9c03      	ldr	r4, [sp, #12]
 800b718:	9314      	str	r3, [sp, #80]	; 0x50
 800b71a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b71e:	f7f5 f9c7 	bl	8000ab0 <__aeabi_d2iz>
 800b722:	9015      	str	r0, [sp, #84]	; 0x54
 800b724:	f7f4 feaa 	bl	800047c <__aeabi_i2d>
 800b728:	4602      	mov	r2, r0
 800b72a:	460b      	mov	r3, r1
 800b72c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b730:	f7f4 fd56 	bl	80001e0 <__aeabi_dsub>
 800b734:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b736:	4606      	mov	r6, r0
 800b738:	3330      	adds	r3, #48	; 0x30
 800b73a:	f804 3b01 	strb.w	r3, [r4], #1
 800b73e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b740:	460f      	mov	r7, r1
 800b742:	429c      	cmp	r4, r3
 800b744:	f04f 0200 	mov.w	r2, #0
 800b748:	d124      	bne.n	800b794 <_dtoa_r+0x63c>
 800b74a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b74e:	4baf      	ldr	r3, [pc, #700]	; (800ba0c <_dtoa_r+0x8b4>)
 800b750:	f7f4 fd48 	bl	80001e4 <__adddf3>
 800b754:	4602      	mov	r2, r0
 800b756:	460b      	mov	r3, r1
 800b758:	4630      	mov	r0, r6
 800b75a:	4639      	mov	r1, r7
 800b75c:	f7f5 f988 	bl	8000a70 <__aeabi_dcmpgt>
 800b760:	2800      	cmp	r0, #0
 800b762:	d163      	bne.n	800b82c <_dtoa_r+0x6d4>
 800b764:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b768:	2000      	movs	r0, #0
 800b76a:	49a8      	ldr	r1, [pc, #672]	; (800ba0c <_dtoa_r+0x8b4>)
 800b76c:	f7f4 fd38 	bl	80001e0 <__aeabi_dsub>
 800b770:	4602      	mov	r2, r0
 800b772:	460b      	mov	r3, r1
 800b774:	4630      	mov	r0, r6
 800b776:	4639      	mov	r1, r7
 800b778:	f7f5 f95c 	bl	8000a34 <__aeabi_dcmplt>
 800b77c:	2800      	cmp	r0, #0
 800b77e:	f43f af1e 	beq.w	800b5be <_dtoa_r+0x466>
 800b782:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b784:	1e7b      	subs	r3, r7, #1
 800b786:	9314      	str	r3, [sp, #80]	; 0x50
 800b788:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b78c:	2b30      	cmp	r3, #48	; 0x30
 800b78e:	d0f8      	beq.n	800b782 <_dtoa_r+0x62a>
 800b790:	46c3      	mov	fp, r8
 800b792:	e03b      	b.n	800b80c <_dtoa_r+0x6b4>
 800b794:	4b9e      	ldr	r3, [pc, #632]	; (800ba10 <_dtoa_r+0x8b8>)
 800b796:	f7f4 fedb 	bl	8000550 <__aeabi_dmul>
 800b79a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b79e:	e7bc      	b.n	800b71a <_dtoa_r+0x5c2>
 800b7a0:	9f03      	ldr	r7, [sp, #12]
 800b7a2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b7a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7aa:	4640      	mov	r0, r8
 800b7ac:	4649      	mov	r1, r9
 800b7ae:	f7f4 fff9 	bl	80007a4 <__aeabi_ddiv>
 800b7b2:	f7f5 f97d 	bl	8000ab0 <__aeabi_d2iz>
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	f7f4 fe60 	bl	800047c <__aeabi_i2d>
 800b7bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7c0:	f7f4 fec6 	bl	8000550 <__aeabi_dmul>
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	4640      	mov	r0, r8
 800b7ca:	4649      	mov	r1, r9
 800b7cc:	f7f4 fd08 	bl	80001e0 <__aeabi_dsub>
 800b7d0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b7d4:	f807 6b01 	strb.w	r6, [r7], #1
 800b7d8:	9e03      	ldr	r6, [sp, #12]
 800b7da:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b7de:	1bbe      	subs	r6, r7, r6
 800b7e0:	45b4      	cmp	ip, r6
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	460b      	mov	r3, r1
 800b7e6:	d136      	bne.n	800b856 <_dtoa_r+0x6fe>
 800b7e8:	f7f4 fcfc 	bl	80001e4 <__adddf3>
 800b7ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7f0:	4680      	mov	r8, r0
 800b7f2:	4689      	mov	r9, r1
 800b7f4:	f7f5 f93c 	bl	8000a70 <__aeabi_dcmpgt>
 800b7f8:	bb58      	cbnz	r0, 800b852 <_dtoa_r+0x6fa>
 800b7fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7fe:	4640      	mov	r0, r8
 800b800:	4649      	mov	r1, r9
 800b802:	f7f5 f90d 	bl	8000a20 <__aeabi_dcmpeq>
 800b806:	b108      	cbz	r0, 800b80c <_dtoa_r+0x6b4>
 800b808:	07e3      	lsls	r3, r4, #31
 800b80a:	d422      	bmi.n	800b852 <_dtoa_r+0x6fa>
 800b80c:	4651      	mov	r1, sl
 800b80e:	4628      	mov	r0, r5
 800b810:	f000 fb0e 	bl	800be30 <_Bfree>
 800b814:	2300      	movs	r3, #0
 800b816:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b818:	703b      	strb	r3, [r7, #0]
 800b81a:	f10b 0301 	add.w	r3, fp, #1
 800b81e:	6013      	str	r3, [r2, #0]
 800b820:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b822:	2b00      	cmp	r3, #0
 800b824:	f43f ace6 	beq.w	800b1f4 <_dtoa_r+0x9c>
 800b828:	601f      	str	r7, [r3, #0]
 800b82a:	e4e3      	b.n	800b1f4 <_dtoa_r+0x9c>
 800b82c:	4627      	mov	r7, r4
 800b82e:	463b      	mov	r3, r7
 800b830:	461f      	mov	r7, r3
 800b832:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b836:	2a39      	cmp	r2, #57	; 0x39
 800b838:	d107      	bne.n	800b84a <_dtoa_r+0x6f2>
 800b83a:	9a03      	ldr	r2, [sp, #12]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d1f7      	bne.n	800b830 <_dtoa_r+0x6d8>
 800b840:	2230      	movs	r2, #48	; 0x30
 800b842:	9903      	ldr	r1, [sp, #12]
 800b844:	f108 0801 	add.w	r8, r8, #1
 800b848:	700a      	strb	r2, [r1, #0]
 800b84a:	781a      	ldrb	r2, [r3, #0]
 800b84c:	3201      	adds	r2, #1
 800b84e:	701a      	strb	r2, [r3, #0]
 800b850:	e79e      	b.n	800b790 <_dtoa_r+0x638>
 800b852:	46d8      	mov	r8, fp
 800b854:	e7eb      	b.n	800b82e <_dtoa_r+0x6d6>
 800b856:	2200      	movs	r2, #0
 800b858:	4b6d      	ldr	r3, [pc, #436]	; (800ba10 <_dtoa_r+0x8b8>)
 800b85a:	f7f4 fe79 	bl	8000550 <__aeabi_dmul>
 800b85e:	2200      	movs	r2, #0
 800b860:	2300      	movs	r3, #0
 800b862:	4680      	mov	r8, r0
 800b864:	4689      	mov	r9, r1
 800b866:	f7f5 f8db 	bl	8000a20 <__aeabi_dcmpeq>
 800b86a:	2800      	cmp	r0, #0
 800b86c:	d09b      	beq.n	800b7a6 <_dtoa_r+0x64e>
 800b86e:	e7cd      	b.n	800b80c <_dtoa_r+0x6b4>
 800b870:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b872:	2a00      	cmp	r2, #0
 800b874:	f000 80c4 	beq.w	800ba00 <_dtoa_r+0x8a8>
 800b878:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b87a:	2a01      	cmp	r2, #1
 800b87c:	f300 80a8 	bgt.w	800b9d0 <_dtoa_r+0x878>
 800b880:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b882:	2a00      	cmp	r2, #0
 800b884:	f000 80a0 	beq.w	800b9c8 <_dtoa_r+0x870>
 800b888:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b88c:	464f      	mov	r7, r9
 800b88e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b892:	2101      	movs	r1, #1
 800b894:	441a      	add	r2, r3
 800b896:	4628      	mov	r0, r5
 800b898:	4499      	add	r9, r3
 800b89a:	9209      	str	r2, [sp, #36]	; 0x24
 800b89c:	f000 fb7e 	bl	800bf9c <__i2b>
 800b8a0:	4606      	mov	r6, r0
 800b8a2:	b15f      	cbz	r7, 800b8bc <_dtoa_r+0x764>
 800b8a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	dd08      	ble.n	800b8bc <_dtoa_r+0x764>
 800b8aa:	42bb      	cmp	r3, r7
 800b8ac:	bfa8      	it	ge
 800b8ae:	463b      	movge	r3, r7
 800b8b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8b2:	eba9 0903 	sub.w	r9, r9, r3
 800b8b6:	1aff      	subs	r7, r7, r3
 800b8b8:	1ad3      	subs	r3, r2, r3
 800b8ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b8bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8be:	b1f3      	cbz	r3, 800b8fe <_dtoa_r+0x7a6>
 800b8c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f000 80a0 	beq.w	800ba08 <_dtoa_r+0x8b0>
 800b8c8:	2c00      	cmp	r4, #0
 800b8ca:	dd10      	ble.n	800b8ee <_dtoa_r+0x796>
 800b8cc:	4631      	mov	r1, r6
 800b8ce:	4622      	mov	r2, r4
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	f000 fc21 	bl	800c118 <__pow5mult>
 800b8d6:	4652      	mov	r2, sl
 800b8d8:	4601      	mov	r1, r0
 800b8da:	4606      	mov	r6, r0
 800b8dc:	4628      	mov	r0, r5
 800b8de:	f000 fb73 	bl	800bfc8 <__multiply>
 800b8e2:	4680      	mov	r8, r0
 800b8e4:	4651      	mov	r1, sl
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	f000 faa2 	bl	800be30 <_Bfree>
 800b8ec:	46c2      	mov	sl, r8
 800b8ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8f0:	1b1a      	subs	r2, r3, r4
 800b8f2:	d004      	beq.n	800b8fe <_dtoa_r+0x7a6>
 800b8f4:	4651      	mov	r1, sl
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	f000 fc0e 	bl	800c118 <__pow5mult>
 800b8fc:	4682      	mov	sl, r0
 800b8fe:	2101      	movs	r1, #1
 800b900:	4628      	mov	r0, r5
 800b902:	f000 fb4b 	bl	800bf9c <__i2b>
 800b906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b908:	4604      	mov	r4, r0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	f340 8082 	ble.w	800ba14 <_dtoa_r+0x8bc>
 800b910:	461a      	mov	r2, r3
 800b912:	4601      	mov	r1, r0
 800b914:	4628      	mov	r0, r5
 800b916:	f000 fbff 	bl	800c118 <__pow5mult>
 800b91a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b91c:	4604      	mov	r4, r0
 800b91e:	2b01      	cmp	r3, #1
 800b920:	dd7b      	ble.n	800ba1a <_dtoa_r+0x8c2>
 800b922:	f04f 0800 	mov.w	r8, #0
 800b926:	6923      	ldr	r3, [r4, #16]
 800b928:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b92c:	6918      	ldr	r0, [r3, #16]
 800b92e:	f000 fae7 	bl	800bf00 <__hi0bits>
 800b932:	f1c0 0020 	rsb	r0, r0, #32
 800b936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b938:	4418      	add	r0, r3
 800b93a:	f010 001f 	ands.w	r0, r0, #31
 800b93e:	f000 8092 	beq.w	800ba66 <_dtoa_r+0x90e>
 800b942:	f1c0 0320 	rsb	r3, r0, #32
 800b946:	2b04      	cmp	r3, #4
 800b948:	f340 8085 	ble.w	800ba56 <_dtoa_r+0x8fe>
 800b94c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b94e:	f1c0 001c 	rsb	r0, r0, #28
 800b952:	4403      	add	r3, r0
 800b954:	4481      	add	r9, r0
 800b956:	4407      	add	r7, r0
 800b958:	9309      	str	r3, [sp, #36]	; 0x24
 800b95a:	f1b9 0f00 	cmp.w	r9, #0
 800b95e:	dd05      	ble.n	800b96c <_dtoa_r+0x814>
 800b960:	4651      	mov	r1, sl
 800b962:	464a      	mov	r2, r9
 800b964:	4628      	mov	r0, r5
 800b966:	f000 fc31 	bl	800c1cc <__lshift>
 800b96a:	4682      	mov	sl, r0
 800b96c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b96e:	2b00      	cmp	r3, #0
 800b970:	dd05      	ble.n	800b97e <_dtoa_r+0x826>
 800b972:	4621      	mov	r1, r4
 800b974:	461a      	mov	r2, r3
 800b976:	4628      	mov	r0, r5
 800b978:	f000 fc28 	bl	800c1cc <__lshift>
 800b97c:	4604      	mov	r4, r0
 800b97e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b980:	2b00      	cmp	r3, #0
 800b982:	d072      	beq.n	800ba6a <_dtoa_r+0x912>
 800b984:	4621      	mov	r1, r4
 800b986:	4650      	mov	r0, sl
 800b988:	f000 fc8c 	bl	800c2a4 <__mcmp>
 800b98c:	2800      	cmp	r0, #0
 800b98e:	da6c      	bge.n	800ba6a <_dtoa_r+0x912>
 800b990:	2300      	movs	r3, #0
 800b992:	4651      	mov	r1, sl
 800b994:	220a      	movs	r2, #10
 800b996:	4628      	mov	r0, r5
 800b998:	f000 fa6c 	bl	800be74 <__multadd>
 800b99c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b99e:	4682      	mov	sl, r0
 800b9a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	f000 81ac 	beq.w	800bd02 <_dtoa_r+0xbaa>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	4631      	mov	r1, r6
 800b9ae:	220a      	movs	r2, #10
 800b9b0:	4628      	mov	r0, r5
 800b9b2:	f000 fa5f 	bl	800be74 <__multadd>
 800b9b6:	9b06      	ldr	r3, [sp, #24]
 800b9b8:	4606      	mov	r6, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	f300 8093 	bgt.w	800bae6 <_dtoa_r+0x98e>
 800b9c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b9c2:	2b02      	cmp	r3, #2
 800b9c4:	dc59      	bgt.n	800ba7a <_dtoa_r+0x922>
 800b9c6:	e08e      	b.n	800bae6 <_dtoa_r+0x98e>
 800b9c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b9ca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b9ce:	e75d      	b.n	800b88c <_dtoa_r+0x734>
 800b9d0:	9b08      	ldr	r3, [sp, #32]
 800b9d2:	1e5c      	subs	r4, r3, #1
 800b9d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9d6:	42a3      	cmp	r3, r4
 800b9d8:	bfbf      	itttt	lt
 800b9da:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b9dc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800b9de:	1ae3      	sublt	r3, r4, r3
 800b9e0:	18d2      	addlt	r2, r2, r3
 800b9e2:	bfa8      	it	ge
 800b9e4:	1b1c      	subge	r4, r3, r4
 800b9e6:	9b08      	ldr	r3, [sp, #32]
 800b9e8:	bfbe      	ittt	lt
 800b9ea:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b9ec:	920e      	strlt	r2, [sp, #56]	; 0x38
 800b9ee:	2400      	movlt	r4, #0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	bfb5      	itete	lt
 800b9f4:	eba9 0703 	sublt.w	r7, r9, r3
 800b9f8:	464f      	movge	r7, r9
 800b9fa:	2300      	movlt	r3, #0
 800b9fc:	9b08      	ldrge	r3, [sp, #32]
 800b9fe:	e747      	b.n	800b890 <_dtoa_r+0x738>
 800ba00:	464f      	mov	r7, r9
 800ba02:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ba04:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ba06:	e74c      	b.n	800b8a2 <_dtoa_r+0x74a>
 800ba08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba0a:	e773      	b.n	800b8f4 <_dtoa_r+0x79c>
 800ba0c:	3fe00000 	.word	0x3fe00000
 800ba10:	40240000 	.word	0x40240000
 800ba14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	dc18      	bgt.n	800ba4c <_dtoa_r+0x8f4>
 800ba1a:	9b04      	ldr	r3, [sp, #16]
 800ba1c:	b9b3      	cbnz	r3, 800ba4c <_dtoa_r+0x8f4>
 800ba1e:	9b05      	ldr	r3, [sp, #20]
 800ba20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ba24:	b993      	cbnz	r3, 800ba4c <_dtoa_r+0x8f4>
 800ba26:	9b05      	ldr	r3, [sp, #20]
 800ba28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ba2c:	0d1b      	lsrs	r3, r3, #20
 800ba2e:	051b      	lsls	r3, r3, #20
 800ba30:	b17b      	cbz	r3, 800ba52 <_dtoa_r+0x8fa>
 800ba32:	f04f 0801 	mov.w	r8, #1
 800ba36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba38:	f109 0901 	add.w	r9, r9, #1
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	f47f af6f 	bne.w	800b926 <_dtoa_r+0x7ce>
 800ba48:	2001      	movs	r0, #1
 800ba4a:	e774      	b.n	800b936 <_dtoa_r+0x7de>
 800ba4c:	f04f 0800 	mov.w	r8, #0
 800ba50:	e7f6      	b.n	800ba40 <_dtoa_r+0x8e8>
 800ba52:	4698      	mov	r8, r3
 800ba54:	e7f4      	b.n	800ba40 <_dtoa_r+0x8e8>
 800ba56:	d080      	beq.n	800b95a <_dtoa_r+0x802>
 800ba58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba5a:	331c      	adds	r3, #28
 800ba5c:	441a      	add	r2, r3
 800ba5e:	4499      	add	r9, r3
 800ba60:	441f      	add	r7, r3
 800ba62:	9209      	str	r2, [sp, #36]	; 0x24
 800ba64:	e779      	b.n	800b95a <_dtoa_r+0x802>
 800ba66:	4603      	mov	r3, r0
 800ba68:	e7f6      	b.n	800ba58 <_dtoa_r+0x900>
 800ba6a:	9b08      	ldr	r3, [sp, #32]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	dc34      	bgt.n	800bada <_dtoa_r+0x982>
 800ba70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba72:	2b02      	cmp	r3, #2
 800ba74:	dd31      	ble.n	800bada <_dtoa_r+0x982>
 800ba76:	9b08      	ldr	r3, [sp, #32]
 800ba78:	9306      	str	r3, [sp, #24]
 800ba7a:	9b06      	ldr	r3, [sp, #24]
 800ba7c:	b963      	cbnz	r3, 800ba98 <_dtoa_r+0x940>
 800ba7e:	4621      	mov	r1, r4
 800ba80:	2205      	movs	r2, #5
 800ba82:	4628      	mov	r0, r5
 800ba84:	f000 f9f6 	bl	800be74 <__multadd>
 800ba88:	4601      	mov	r1, r0
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	4650      	mov	r0, sl
 800ba8e:	f000 fc09 	bl	800c2a4 <__mcmp>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	f73f adbf 	bgt.w	800b616 <_dtoa_r+0x4be>
 800ba98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ba9a:	9f03      	ldr	r7, [sp, #12]
 800ba9c:	ea6f 0b03 	mvn.w	fp, r3
 800baa0:	f04f 0800 	mov.w	r8, #0
 800baa4:	4621      	mov	r1, r4
 800baa6:	4628      	mov	r0, r5
 800baa8:	f000 f9c2 	bl	800be30 <_Bfree>
 800baac:	2e00      	cmp	r6, #0
 800baae:	f43f aead 	beq.w	800b80c <_dtoa_r+0x6b4>
 800bab2:	f1b8 0f00 	cmp.w	r8, #0
 800bab6:	d005      	beq.n	800bac4 <_dtoa_r+0x96c>
 800bab8:	45b0      	cmp	r8, r6
 800baba:	d003      	beq.n	800bac4 <_dtoa_r+0x96c>
 800babc:	4641      	mov	r1, r8
 800babe:	4628      	mov	r0, r5
 800bac0:	f000 f9b6 	bl	800be30 <_Bfree>
 800bac4:	4631      	mov	r1, r6
 800bac6:	4628      	mov	r0, r5
 800bac8:	f000 f9b2 	bl	800be30 <_Bfree>
 800bacc:	e69e      	b.n	800b80c <_dtoa_r+0x6b4>
 800bace:	2400      	movs	r4, #0
 800bad0:	4626      	mov	r6, r4
 800bad2:	e7e1      	b.n	800ba98 <_dtoa_r+0x940>
 800bad4:	46c3      	mov	fp, r8
 800bad6:	4626      	mov	r6, r4
 800bad8:	e59d      	b.n	800b616 <_dtoa_r+0x4be>
 800bada:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800badc:	2b00      	cmp	r3, #0
 800bade:	f000 80c8 	beq.w	800bc72 <_dtoa_r+0xb1a>
 800bae2:	9b08      	ldr	r3, [sp, #32]
 800bae4:	9306      	str	r3, [sp, #24]
 800bae6:	2f00      	cmp	r7, #0
 800bae8:	dd05      	ble.n	800baf6 <_dtoa_r+0x99e>
 800baea:	4631      	mov	r1, r6
 800baec:	463a      	mov	r2, r7
 800baee:	4628      	mov	r0, r5
 800baf0:	f000 fb6c 	bl	800c1cc <__lshift>
 800baf4:	4606      	mov	r6, r0
 800baf6:	f1b8 0f00 	cmp.w	r8, #0
 800bafa:	d05b      	beq.n	800bbb4 <_dtoa_r+0xa5c>
 800bafc:	4628      	mov	r0, r5
 800bafe:	6871      	ldr	r1, [r6, #4]
 800bb00:	f000 f956 	bl	800bdb0 <_Balloc>
 800bb04:	4607      	mov	r7, r0
 800bb06:	b928      	cbnz	r0, 800bb14 <_dtoa_r+0x9bc>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bb0e:	4b81      	ldr	r3, [pc, #516]	; (800bd14 <_dtoa_r+0xbbc>)
 800bb10:	f7ff bb36 	b.w	800b180 <_dtoa_r+0x28>
 800bb14:	6932      	ldr	r2, [r6, #16]
 800bb16:	f106 010c 	add.w	r1, r6, #12
 800bb1a:	3202      	adds	r2, #2
 800bb1c:	0092      	lsls	r2, r2, #2
 800bb1e:	300c      	adds	r0, #12
 800bb20:	f000 fd68 	bl	800c5f4 <memcpy>
 800bb24:	2201      	movs	r2, #1
 800bb26:	4639      	mov	r1, r7
 800bb28:	4628      	mov	r0, r5
 800bb2a:	f000 fb4f 	bl	800c1cc <__lshift>
 800bb2e:	46b0      	mov	r8, r6
 800bb30:	4606      	mov	r6, r0
 800bb32:	9b03      	ldr	r3, [sp, #12]
 800bb34:	9a03      	ldr	r2, [sp, #12]
 800bb36:	3301      	adds	r3, #1
 800bb38:	9308      	str	r3, [sp, #32]
 800bb3a:	9b06      	ldr	r3, [sp, #24]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb40:	9b04      	ldr	r3, [sp, #16]
 800bb42:	f003 0301 	and.w	r3, r3, #1
 800bb46:	930a      	str	r3, [sp, #40]	; 0x28
 800bb48:	9b08      	ldr	r3, [sp, #32]
 800bb4a:	4621      	mov	r1, r4
 800bb4c:	3b01      	subs	r3, #1
 800bb4e:	4650      	mov	r0, sl
 800bb50:	9304      	str	r3, [sp, #16]
 800bb52:	f7ff fa78 	bl	800b046 <quorem>
 800bb56:	4641      	mov	r1, r8
 800bb58:	9006      	str	r0, [sp, #24]
 800bb5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bb5e:	4650      	mov	r0, sl
 800bb60:	f000 fba0 	bl	800c2a4 <__mcmp>
 800bb64:	4632      	mov	r2, r6
 800bb66:	9009      	str	r0, [sp, #36]	; 0x24
 800bb68:	4621      	mov	r1, r4
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	f000 fbb6 	bl	800c2dc <__mdiff>
 800bb70:	68c2      	ldr	r2, [r0, #12]
 800bb72:	4607      	mov	r7, r0
 800bb74:	bb02      	cbnz	r2, 800bbb8 <_dtoa_r+0xa60>
 800bb76:	4601      	mov	r1, r0
 800bb78:	4650      	mov	r0, sl
 800bb7a:	f000 fb93 	bl	800c2a4 <__mcmp>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	4639      	mov	r1, r7
 800bb82:	4628      	mov	r0, r5
 800bb84:	920c      	str	r2, [sp, #48]	; 0x30
 800bb86:	f000 f953 	bl	800be30 <_Bfree>
 800bb8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bb8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb8e:	9f08      	ldr	r7, [sp, #32]
 800bb90:	ea43 0102 	orr.w	r1, r3, r2
 800bb94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb96:	4319      	orrs	r1, r3
 800bb98:	d110      	bne.n	800bbbc <_dtoa_r+0xa64>
 800bb9a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bb9e:	d029      	beq.n	800bbf4 <_dtoa_r+0xa9c>
 800bba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	dd02      	ble.n	800bbac <_dtoa_r+0xa54>
 800bba6:	9b06      	ldr	r3, [sp, #24]
 800bba8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800bbac:	9b04      	ldr	r3, [sp, #16]
 800bbae:	f883 9000 	strb.w	r9, [r3]
 800bbb2:	e777      	b.n	800baa4 <_dtoa_r+0x94c>
 800bbb4:	4630      	mov	r0, r6
 800bbb6:	e7ba      	b.n	800bb2e <_dtoa_r+0x9d6>
 800bbb8:	2201      	movs	r2, #1
 800bbba:	e7e1      	b.n	800bb80 <_dtoa_r+0xa28>
 800bbbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	db04      	blt.n	800bbcc <_dtoa_r+0xa74>
 800bbc2:	9922      	ldr	r1, [sp, #136]	; 0x88
 800bbc4:	430b      	orrs	r3, r1
 800bbc6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bbc8:	430b      	orrs	r3, r1
 800bbca:	d120      	bne.n	800bc0e <_dtoa_r+0xab6>
 800bbcc:	2a00      	cmp	r2, #0
 800bbce:	dded      	ble.n	800bbac <_dtoa_r+0xa54>
 800bbd0:	4651      	mov	r1, sl
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	f000 faf9 	bl	800c1cc <__lshift>
 800bbda:	4621      	mov	r1, r4
 800bbdc:	4682      	mov	sl, r0
 800bbde:	f000 fb61 	bl	800c2a4 <__mcmp>
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	dc03      	bgt.n	800bbee <_dtoa_r+0xa96>
 800bbe6:	d1e1      	bne.n	800bbac <_dtoa_r+0xa54>
 800bbe8:	f019 0f01 	tst.w	r9, #1
 800bbec:	d0de      	beq.n	800bbac <_dtoa_r+0xa54>
 800bbee:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bbf2:	d1d8      	bne.n	800bba6 <_dtoa_r+0xa4e>
 800bbf4:	2339      	movs	r3, #57	; 0x39
 800bbf6:	9a04      	ldr	r2, [sp, #16]
 800bbf8:	7013      	strb	r3, [r2, #0]
 800bbfa:	463b      	mov	r3, r7
 800bbfc:	461f      	mov	r7, r3
 800bbfe:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800bc02:	3b01      	subs	r3, #1
 800bc04:	2a39      	cmp	r2, #57	; 0x39
 800bc06:	d06b      	beq.n	800bce0 <_dtoa_r+0xb88>
 800bc08:	3201      	adds	r2, #1
 800bc0a:	701a      	strb	r2, [r3, #0]
 800bc0c:	e74a      	b.n	800baa4 <_dtoa_r+0x94c>
 800bc0e:	2a00      	cmp	r2, #0
 800bc10:	dd07      	ble.n	800bc22 <_dtoa_r+0xaca>
 800bc12:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800bc16:	d0ed      	beq.n	800bbf4 <_dtoa_r+0xa9c>
 800bc18:	9a04      	ldr	r2, [sp, #16]
 800bc1a:	f109 0301 	add.w	r3, r9, #1
 800bc1e:	7013      	strb	r3, [r2, #0]
 800bc20:	e740      	b.n	800baa4 <_dtoa_r+0x94c>
 800bc22:	9b08      	ldr	r3, [sp, #32]
 800bc24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc26:	f803 9c01 	strb.w	r9, [r3, #-1]
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d042      	beq.n	800bcb4 <_dtoa_r+0xb5c>
 800bc2e:	4651      	mov	r1, sl
 800bc30:	2300      	movs	r3, #0
 800bc32:	220a      	movs	r2, #10
 800bc34:	4628      	mov	r0, r5
 800bc36:	f000 f91d 	bl	800be74 <__multadd>
 800bc3a:	45b0      	cmp	r8, r6
 800bc3c:	4682      	mov	sl, r0
 800bc3e:	f04f 0300 	mov.w	r3, #0
 800bc42:	f04f 020a 	mov.w	r2, #10
 800bc46:	4641      	mov	r1, r8
 800bc48:	4628      	mov	r0, r5
 800bc4a:	d107      	bne.n	800bc5c <_dtoa_r+0xb04>
 800bc4c:	f000 f912 	bl	800be74 <__multadd>
 800bc50:	4680      	mov	r8, r0
 800bc52:	4606      	mov	r6, r0
 800bc54:	9b08      	ldr	r3, [sp, #32]
 800bc56:	3301      	adds	r3, #1
 800bc58:	9308      	str	r3, [sp, #32]
 800bc5a:	e775      	b.n	800bb48 <_dtoa_r+0x9f0>
 800bc5c:	f000 f90a 	bl	800be74 <__multadd>
 800bc60:	4631      	mov	r1, r6
 800bc62:	4680      	mov	r8, r0
 800bc64:	2300      	movs	r3, #0
 800bc66:	220a      	movs	r2, #10
 800bc68:	4628      	mov	r0, r5
 800bc6a:	f000 f903 	bl	800be74 <__multadd>
 800bc6e:	4606      	mov	r6, r0
 800bc70:	e7f0      	b.n	800bc54 <_dtoa_r+0xafc>
 800bc72:	9b08      	ldr	r3, [sp, #32]
 800bc74:	9306      	str	r3, [sp, #24]
 800bc76:	9f03      	ldr	r7, [sp, #12]
 800bc78:	4621      	mov	r1, r4
 800bc7a:	4650      	mov	r0, sl
 800bc7c:	f7ff f9e3 	bl	800b046 <quorem>
 800bc80:	9b03      	ldr	r3, [sp, #12]
 800bc82:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800bc86:	f807 9b01 	strb.w	r9, [r7], #1
 800bc8a:	1afa      	subs	r2, r7, r3
 800bc8c:	9b06      	ldr	r3, [sp, #24]
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	dd07      	ble.n	800bca2 <_dtoa_r+0xb4a>
 800bc92:	4651      	mov	r1, sl
 800bc94:	2300      	movs	r3, #0
 800bc96:	220a      	movs	r2, #10
 800bc98:	4628      	mov	r0, r5
 800bc9a:	f000 f8eb 	bl	800be74 <__multadd>
 800bc9e:	4682      	mov	sl, r0
 800bca0:	e7ea      	b.n	800bc78 <_dtoa_r+0xb20>
 800bca2:	9b06      	ldr	r3, [sp, #24]
 800bca4:	f04f 0800 	mov.w	r8, #0
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	bfcc      	ite	gt
 800bcac:	461f      	movgt	r7, r3
 800bcae:	2701      	movle	r7, #1
 800bcb0:	9b03      	ldr	r3, [sp, #12]
 800bcb2:	441f      	add	r7, r3
 800bcb4:	4651      	mov	r1, sl
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	4628      	mov	r0, r5
 800bcba:	f000 fa87 	bl	800c1cc <__lshift>
 800bcbe:	4621      	mov	r1, r4
 800bcc0:	4682      	mov	sl, r0
 800bcc2:	f000 faef 	bl	800c2a4 <__mcmp>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	dc97      	bgt.n	800bbfa <_dtoa_r+0xaa2>
 800bcca:	d102      	bne.n	800bcd2 <_dtoa_r+0xb7a>
 800bccc:	f019 0f01 	tst.w	r9, #1
 800bcd0:	d193      	bne.n	800bbfa <_dtoa_r+0xaa2>
 800bcd2:	463b      	mov	r3, r7
 800bcd4:	461f      	mov	r7, r3
 800bcd6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcda:	2a30      	cmp	r2, #48	; 0x30
 800bcdc:	d0fa      	beq.n	800bcd4 <_dtoa_r+0xb7c>
 800bcde:	e6e1      	b.n	800baa4 <_dtoa_r+0x94c>
 800bce0:	9a03      	ldr	r2, [sp, #12]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d18a      	bne.n	800bbfc <_dtoa_r+0xaa4>
 800bce6:	2331      	movs	r3, #49	; 0x31
 800bce8:	f10b 0b01 	add.w	fp, fp, #1
 800bcec:	e797      	b.n	800bc1e <_dtoa_r+0xac6>
 800bcee:	4b0a      	ldr	r3, [pc, #40]	; (800bd18 <_dtoa_r+0xbc0>)
 800bcf0:	f7ff ba9f 	b.w	800b232 <_dtoa_r+0xda>
 800bcf4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	f47f aa77 	bne.w	800b1ea <_dtoa_r+0x92>
 800bcfc:	4b07      	ldr	r3, [pc, #28]	; (800bd1c <_dtoa_r+0xbc4>)
 800bcfe:	f7ff ba98 	b.w	800b232 <_dtoa_r+0xda>
 800bd02:	9b06      	ldr	r3, [sp, #24]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	dcb6      	bgt.n	800bc76 <_dtoa_r+0xb1e>
 800bd08:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd0a:	2b02      	cmp	r3, #2
 800bd0c:	f73f aeb5 	bgt.w	800ba7a <_dtoa_r+0x922>
 800bd10:	e7b1      	b.n	800bc76 <_dtoa_r+0xb1e>
 800bd12:	bf00      	nop
 800bd14:	0800d52c 	.word	0x0800d52c
 800bd18:	0800d48c 	.word	0x0800d48c
 800bd1c:	0800d4b0 	.word	0x0800d4b0

0800bd20 <_free_r>:
 800bd20:	b538      	push	{r3, r4, r5, lr}
 800bd22:	4605      	mov	r5, r0
 800bd24:	2900      	cmp	r1, #0
 800bd26:	d040      	beq.n	800bdaa <_free_r+0x8a>
 800bd28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd2c:	1f0c      	subs	r4, r1, #4
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	bfb8      	it	lt
 800bd32:	18e4      	addlt	r4, r4, r3
 800bd34:	f7fe fb7a 	bl	800a42c <__malloc_lock>
 800bd38:	4a1c      	ldr	r2, [pc, #112]	; (800bdac <_free_r+0x8c>)
 800bd3a:	6813      	ldr	r3, [r2, #0]
 800bd3c:	b933      	cbnz	r3, 800bd4c <_free_r+0x2c>
 800bd3e:	6063      	str	r3, [r4, #4]
 800bd40:	6014      	str	r4, [r2, #0]
 800bd42:	4628      	mov	r0, r5
 800bd44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd48:	f7fe bb76 	b.w	800a438 <__malloc_unlock>
 800bd4c:	42a3      	cmp	r3, r4
 800bd4e:	d908      	bls.n	800bd62 <_free_r+0x42>
 800bd50:	6820      	ldr	r0, [r4, #0]
 800bd52:	1821      	adds	r1, r4, r0
 800bd54:	428b      	cmp	r3, r1
 800bd56:	bf01      	itttt	eq
 800bd58:	6819      	ldreq	r1, [r3, #0]
 800bd5a:	685b      	ldreq	r3, [r3, #4]
 800bd5c:	1809      	addeq	r1, r1, r0
 800bd5e:	6021      	streq	r1, [r4, #0]
 800bd60:	e7ed      	b.n	800bd3e <_free_r+0x1e>
 800bd62:	461a      	mov	r2, r3
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	b10b      	cbz	r3, 800bd6c <_free_r+0x4c>
 800bd68:	42a3      	cmp	r3, r4
 800bd6a:	d9fa      	bls.n	800bd62 <_free_r+0x42>
 800bd6c:	6811      	ldr	r1, [r2, #0]
 800bd6e:	1850      	adds	r0, r2, r1
 800bd70:	42a0      	cmp	r0, r4
 800bd72:	d10b      	bne.n	800bd8c <_free_r+0x6c>
 800bd74:	6820      	ldr	r0, [r4, #0]
 800bd76:	4401      	add	r1, r0
 800bd78:	1850      	adds	r0, r2, r1
 800bd7a:	4283      	cmp	r3, r0
 800bd7c:	6011      	str	r1, [r2, #0]
 800bd7e:	d1e0      	bne.n	800bd42 <_free_r+0x22>
 800bd80:	6818      	ldr	r0, [r3, #0]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	4408      	add	r0, r1
 800bd86:	6010      	str	r0, [r2, #0]
 800bd88:	6053      	str	r3, [r2, #4]
 800bd8a:	e7da      	b.n	800bd42 <_free_r+0x22>
 800bd8c:	d902      	bls.n	800bd94 <_free_r+0x74>
 800bd8e:	230c      	movs	r3, #12
 800bd90:	602b      	str	r3, [r5, #0]
 800bd92:	e7d6      	b.n	800bd42 <_free_r+0x22>
 800bd94:	6820      	ldr	r0, [r4, #0]
 800bd96:	1821      	adds	r1, r4, r0
 800bd98:	428b      	cmp	r3, r1
 800bd9a:	bf01      	itttt	eq
 800bd9c:	6819      	ldreq	r1, [r3, #0]
 800bd9e:	685b      	ldreq	r3, [r3, #4]
 800bda0:	1809      	addeq	r1, r1, r0
 800bda2:	6021      	streq	r1, [r4, #0]
 800bda4:	6063      	str	r3, [r4, #4]
 800bda6:	6054      	str	r4, [r2, #4]
 800bda8:	e7cb      	b.n	800bd42 <_free_r+0x22>
 800bdaa:	bd38      	pop	{r3, r4, r5, pc}
 800bdac:	20001754 	.word	0x20001754

0800bdb0 <_Balloc>:
 800bdb0:	b570      	push	{r4, r5, r6, lr}
 800bdb2:	69c6      	ldr	r6, [r0, #28]
 800bdb4:	4604      	mov	r4, r0
 800bdb6:	460d      	mov	r5, r1
 800bdb8:	b976      	cbnz	r6, 800bdd8 <_Balloc+0x28>
 800bdba:	2010      	movs	r0, #16
 800bdbc:	f7fe fa86 	bl	800a2cc <malloc>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	61e0      	str	r0, [r4, #28]
 800bdc4:	b920      	cbnz	r0, 800bdd0 <_Balloc+0x20>
 800bdc6:	216b      	movs	r1, #107	; 0x6b
 800bdc8:	4b17      	ldr	r3, [pc, #92]	; (800be28 <_Balloc+0x78>)
 800bdca:	4818      	ldr	r0, [pc, #96]	; (800be2c <_Balloc+0x7c>)
 800bdcc:	f000 fc20 	bl	800c610 <__assert_func>
 800bdd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bdd4:	6006      	str	r6, [r0, #0]
 800bdd6:	60c6      	str	r6, [r0, #12]
 800bdd8:	69e6      	ldr	r6, [r4, #28]
 800bdda:	68f3      	ldr	r3, [r6, #12]
 800bddc:	b183      	cbz	r3, 800be00 <_Balloc+0x50>
 800bdde:	69e3      	ldr	r3, [r4, #28]
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bde6:	b9b8      	cbnz	r0, 800be18 <_Balloc+0x68>
 800bde8:	2101      	movs	r1, #1
 800bdea:	fa01 f605 	lsl.w	r6, r1, r5
 800bdee:	1d72      	adds	r2, r6, #5
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	0092      	lsls	r2, r2, #2
 800bdf4:	f000 fc2a 	bl	800c64c <_calloc_r>
 800bdf8:	b160      	cbz	r0, 800be14 <_Balloc+0x64>
 800bdfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bdfe:	e00e      	b.n	800be1e <_Balloc+0x6e>
 800be00:	2221      	movs	r2, #33	; 0x21
 800be02:	2104      	movs	r1, #4
 800be04:	4620      	mov	r0, r4
 800be06:	f000 fc21 	bl	800c64c <_calloc_r>
 800be0a:	69e3      	ldr	r3, [r4, #28]
 800be0c:	60f0      	str	r0, [r6, #12]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d1e4      	bne.n	800bdde <_Balloc+0x2e>
 800be14:	2000      	movs	r0, #0
 800be16:	bd70      	pop	{r4, r5, r6, pc}
 800be18:	6802      	ldr	r2, [r0, #0]
 800be1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be1e:	2300      	movs	r3, #0
 800be20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be24:	e7f7      	b.n	800be16 <_Balloc+0x66>
 800be26:	bf00      	nop
 800be28:	0800d4bd 	.word	0x0800d4bd
 800be2c:	0800d53d 	.word	0x0800d53d

0800be30 <_Bfree>:
 800be30:	b570      	push	{r4, r5, r6, lr}
 800be32:	69c6      	ldr	r6, [r0, #28]
 800be34:	4605      	mov	r5, r0
 800be36:	460c      	mov	r4, r1
 800be38:	b976      	cbnz	r6, 800be58 <_Bfree+0x28>
 800be3a:	2010      	movs	r0, #16
 800be3c:	f7fe fa46 	bl	800a2cc <malloc>
 800be40:	4602      	mov	r2, r0
 800be42:	61e8      	str	r0, [r5, #28]
 800be44:	b920      	cbnz	r0, 800be50 <_Bfree+0x20>
 800be46:	218f      	movs	r1, #143	; 0x8f
 800be48:	4b08      	ldr	r3, [pc, #32]	; (800be6c <_Bfree+0x3c>)
 800be4a:	4809      	ldr	r0, [pc, #36]	; (800be70 <_Bfree+0x40>)
 800be4c:	f000 fbe0 	bl	800c610 <__assert_func>
 800be50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be54:	6006      	str	r6, [r0, #0]
 800be56:	60c6      	str	r6, [r0, #12]
 800be58:	b13c      	cbz	r4, 800be6a <_Bfree+0x3a>
 800be5a:	69eb      	ldr	r3, [r5, #28]
 800be5c:	6862      	ldr	r2, [r4, #4]
 800be5e:	68db      	ldr	r3, [r3, #12]
 800be60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800be64:	6021      	str	r1, [r4, #0]
 800be66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800be6a:	bd70      	pop	{r4, r5, r6, pc}
 800be6c:	0800d4bd 	.word	0x0800d4bd
 800be70:	0800d53d 	.word	0x0800d53d

0800be74 <__multadd>:
 800be74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be78:	4607      	mov	r7, r0
 800be7a:	460c      	mov	r4, r1
 800be7c:	461e      	mov	r6, r3
 800be7e:	2000      	movs	r0, #0
 800be80:	690d      	ldr	r5, [r1, #16]
 800be82:	f101 0c14 	add.w	ip, r1, #20
 800be86:	f8dc 3000 	ldr.w	r3, [ip]
 800be8a:	3001      	adds	r0, #1
 800be8c:	b299      	uxth	r1, r3
 800be8e:	fb02 6101 	mla	r1, r2, r1, r6
 800be92:	0c1e      	lsrs	r6, r3, #16
 800be94:	0c0b      	lsrs	r3, r1, #16
 800be96:	fb02 3306 	mla	r3, r2, r6, r3
 800be9a:	b289      	uxth	r1, r1
 800be9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bea0:	4285      	cmp	r5, r0
 800bea2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bea6:	f84c 1b04 	str.w	r1, [ip], #4
 800beaa:	dcec      	bgt.n	800be86 <__multadd+0x12>
 800beac:	b30e      	cbz	r6, 800bef2 <__multadd+0x7e>
 800beae:	68a3      	ldr	r3, [r4, #8]
 800beb0:	42ab      	cmp	r3, r5
 800beb2:	dc19      	bgt.n	800bee8 <__multadd+0x74>
 800beb4:	6861      	ldr	r1, [r4, #4]
 800beb6:	4638      	mov	r0, r7
 800beb8:	3101      	adds	r1, #1
 800beba:	f7ff ff79 	bl	800bdb0 <_Balloc>
 800bebe:	4680      	mov	r8, r0
 800bec0:	b928      	cbnz	r0, 800bece <__multadd+0x5a>
 800bec2:	4602      	mov	r2, r0
 800bec4:	21ba      	movs	r1, #186	; 0xba
 800bec6:	4b0c      	ldr	r3, [pc, #48]	; (800bef8 <__multadd+0x84>)
 800bec8:	480c      	ldr	r0, [pc, #48]	; (800befc <__multadd+0x88>)
 800beca:	f000 fba1 	bl	800c610 <__assert_func>
 800bece:	6922      	ldr	r2, [r4, #16]
 800bed0:	f104 010c 	add.w	r1, r4, #12
 800bed4:	3202      	adds	r2, #2
 800bed6:	0092      	lsls	r2, r2, #2
 800bed8:	300c      	adds	r0, #12
 800beda:	f000 fb8b 	bl	800c5f4 <memcpy>
 800bede:	4621      	mov	r1, r4
 800bee0:	4638      	mov	r0, r7
 800bee2:	f7ff ffa5 	bl	800be30 <_Bfree>
 800bee6:	4644      	mov	r4, r8
 800bee8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800beec:	3501      	adds	r5, #1
 800beee:	615e      	str	r6, [r3, #20]
 800bef0:	6125      	str	r5, [r4, #16]
 800bef2:	4620      	mov	r0, r4
 800bef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bef8:	0800d52c 	.word	0x0800d52c
 800befc:	0800d53d 	.word	0x0800d53d

0800bf00 <__hi0bits>:
 800bf00:	0c02      	lsrs	r2, r0, #16
 800bf02:	0412      	lsls	r2, r2, #16
 800bf04:	4603      	mov	r3, r0
 800bf06:	b9ca      	cbnz	r2, 800bf3c <__hi0bits+0x3c>
 800bf08:	0403      	lsls	r3, r0, #16
 800bf0a:	2010      	movs	r0, #16
 800bf0c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bf10:	bf04      	itt	eq
 800bf12:	021b      	lsleq	r3, r3, #8
 800bf14:	3008      	addeq	r0, #8
 800bf16:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bf1a:	bf04      	itt	eq
 800bf1c:	011b      	lsleq	r3, r3, #4
 800bf1e:	3004      	addeq	r0, #4
 800bf20:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bf24:	bf04      	itt	eq
 800bf26:	009b      	lsleq	r3, r3, #2
 800bf28:	3002      	addeq	r0, #2
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	db05      	blt.n	800bf3a <__hi0bits+0x3a>
 800bf2e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800bf32:	f100 0001 	add.w	r0, r0, #1
 800bf36:	bf08      	it	eq
 800bf38:	2020      	moveq	r0, #32
 800bf3a:	4770      	bx	lr
 800bf3c:	2000      	movs	r0, #0
 800bf3e:	e7e5      	b.n	800bf0c <__hi0bits+0xc>

0800bf40 <__lo0bits>:
 800bf40:	6803      	ldr	r3, [r0, #0]
 800bf42:	4602      	mov	r2, r0
 800bf44:	f013 0007 	ands.w	r0, r3, #7
 800bf48:	d00b      	beq.n	800bf62 <__lo0bits+0x22>
 800bf4a:	07d9      	lsls	r1, r3, #31
 800bf4c:	d421      	bmi.n	800bf92 <__lo0bits+0x52>
 800bf4e:	0798      	lsls	r0, r3, #30
 800bf50:	bf49      	itett	mi
 800bf52:	085b      	lsrmi	r3, r3, #1
 800bf54:	089b      	lsrpl	r3, r3, #2
 800bf56:	2001      	movmi	r0, #1
 800bf58:	6013      	strmi	r3, [r2, #0]
 800bf5a:	bf5c      	itt	pl
 800bf5c:	2002      	movpl	r0, #2
 800bf5e:	6013      	strpl	r3, [r2, #0]
 800bf60:	4770      	bx	lr
 800bf62:	b299      	uxth	r1, r3
 800bf64:	b909      	cbnz	r1, 800bf6a <__lo0bits+0x2a>
 800bf66:	2010      	movs	r0, #16
 800bf68:	0c1b      	lsrs	r3, r3, #16
 800bf6a:	b2d9      	uxtb	r1, r3
 800bf6c:	b909      	cbnz	r1, 800bf72 <__lo0bits+0x32>
 800bf6e:	3008      	adds	r0, #8
 800bf70:	0a1b      	lsrs	r3, r3, #8
 800bf72:	0719      	lsls	r1, r3, #28
 800bf74:	bf04      	itt	eq
 800bf76:	091b      	lsreq	r3, r3, #4
 800bf78:	3004      	addeq	r0, #4
 800bf7a:	0799      	lsls	r1, r3, #30
 800bf7c:	bf04      	itt	eq
 800bf7e:	089b      	lsreq	r3, r3, #2
 800bf80:	3002      	addeq	r0, #2
 800bf82:	07d9      	lsls	r1, r3, #31
 800bf84:	d403      	bmi.n	800bf8e <__lo0bits+0x4e>
 800bf86:	085b      	lsrs	r3, r3, #1
 800bf88:	f100 0001 	add.w	r0, r0, #1
 800bf8c:	d003      	beq.n	800bf96 <__lo0bits+0x56>
 800bf8e:	6013      	str	r3, [r2, #0]
 800bf90:	4770      	bx	lr
 800bf92:	2000      	movs	r0, #0
 800bf94:	4770      	bx	lr
 800bf96:	2020      	movs	r0, #32
 800bf98:	4770      	bx	lr
	...

0800bf9c <__i2b>:
 800bf9c:	b510      	push	{r4, lr}
 800bf9e:	460c      	mov	r4, r1
 800bfa0:	2101      	movs	r1, #1
 800bfa2:	f7ff ff05 	bl	800bdb0 <_Balloc>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	b928      	cbnz	r0, 800bfb6 <__i2b+0x1a>
 800bfaa:	f240 1145 	movw	r1, #325	; 0x145
 800bfae:	4b04      	ldr	r3, [pc, #16]	; (800bfc0 <__i2b+0x24>)
 800bfb0:	4804      	ldr	r0, [pc, #16]	; (800bfc4 <__i2b+0x28>)
 800bfb2:	f000 fb2d 	bl	800c610 <__assert_func>
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	6144      	str	r4, [r0, #20]
 800bfba:	6103      	str	r3, [r0, #16]
 800bfbc:	bd10      	pop	{r4, pc}
 800bfbe:	bf00      	nop
 800bfc0:	0800d52c 	.word	0x0800d52c
 800bfc4:	0800d53d 	.word	0x0800d53d

0800bfc8 <__multiply>:
 800bfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfcc:	4691      	mov	r9, r2
 800bfce:	690a      	ldr	r2, [r1, #16]
 800bfd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bfd4:	460c      	mov	r4, r1
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	bfbe      	ittt	lt
 800bfda:	460b      	movlt	r3, r1
 800bfdc:	464c      	movlt	r4, r9
 800bfde:	4699      	movlt	r9, r3
 800bfe0:	6927      	ldr	r7, [r4, #16]
 800bfe2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bfe6:	68a3      	ldr	r3, [r4, #8]
 800bfe8:	6861      	ldr	r1, [r4, #4]
 800bfea:	eb07 060a 	add.w	r6, r7, sl
 800bfee:	42b3      	cmp	r3, r6
 800bff0:	b085      	sub	sp, #20
 800bff2:	bfb8      	it	lt
 800bff4:	3101      	addlt	r1, #1
 800bff6:	f7ff fedb 	bl	800bdb0 <_Balloc>
 800bffa:	b930      	cbnz	r0, 800c00a <__multiply+0x42>
 800bffc:	4602      	mov	r2, r0
 800bffe:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c002:	4b43      	ldr	r3, [pc, #268]	; (800c110 <__multiply+0x148>)
 800c004:	4843      	ldr	r0, [pc, #268]	; (800c114 <__multiply+0x14c>)
 800c006:	f000 fb03 	bl	800c610 <__assert_func>
 800c00a:	f100 0514 	add.w	r5, r0, #20
 800c00e:	462b      	mov	r3, r5
 800c010:	2200      	movs	r2, #0
 800c012:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c016:	4543      	cmp	r3, r8
 800c018:	d321      	bcc.n	800c05e <__multiply+0x96>
 800c01a:	f104 0314 	add.w	r3, r4, #20
 800c01e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c022:	f109 0314 	add.w	r3, r9, #20
 800c026:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c02a:	9202      	str	r2, [sp, #8]
 800c02c:	1b3a      	subs	r2, r7, r4
 800c02e:	3a15      	subs	r2, #21
 800c030:	f022 0203 	bic.w	r2, r2, #3
 800c034:	3204      	adds	r2, #4
 800c036:	f104 0115 	add.w	r1, r4, #21
 800c03a:	428f      	cmp	r7, r1
 800c03c:	bf38      	it	cc
 800c03e:	2204      	movcc	r2, #4
 800c040:	9201      	str	r2, [sp, #4]
 800c042:	9a02      	ldr	r2, [sp, #8]
 800c044:	9303      	str	r3, [sp, #12]
 800c046:	429a      	cmp	r2, r3
 800c048:	d80c      	bhi.n	800c064 <__multiply+0x9c>
 800c04a:	2e00      	cmp	r6, #0
 800c04c:	dd03      	ble.n	800c056 <__multiply+0x8e>
 800c04e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c052:	2b00      	cmp	r3, #0
 800c054:	d05a      	beq.n	800c10c <__multiply+0x144>
 800c056:	6106      	str	r6, [r0, #16]
 800c058:	b005      	add	sp, #20
 800c05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c05e:	f843 2b04 	str.w	r2, [r3], #4
 800c062:	e7d8      	b.n	800c016 <__multiply+0x4e>
 800c064:	f8b3 a000 	ldrh.w	sl, [r3]
 800c068:	f1ba 0f00 	cmp.w	sl, #0
 800c06c:	d023      	beq.n	800c0b6 <__multiply+0xee>
 800c06e:	46a9      	mov	r9, r5
 800c070:	f04f 0c00 	mov.w	ip, #0
 800c074:	f104 0e14 	add.w	lr, r4, #20
 800c078:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c07c:	f8d9 1000 	ldr.w	r1, [r9]
 800c080:	fa1f fb82 	uxth.w	fp, r2
 800c084:	b289      	uxth	r1, r1
 800c086:	fb0a 110b 	mla	r1, sl, fp, r1
 800c08a:	4461      	add	r1, ip
 800c08c:	f8d9 c000 	ldr.w	ip, [r9]
 800c090:	0c12      	lsrs	r2, r2, #16
 800c092:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c096:	fb0a c202 	mla	r2, sl, r2, ip
 800c09a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c09e:	b289      	uxth	r1, r1
 800c0a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c0a4:	4577      	cmp	r7, lr
 800c0a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c0aa:	f849 1b04 	str.w	r1, [r9], #4
 800c0ae:	d8e3      	bhi.n	800c078 <__multiply+0xb0>
 800c0b0:	9a01      	ldr	r2, [sp, #4]
 800c0b2:	f845 c002 	str.w	ip, [r5, r2]
 800c0b6:	9a03      	ldr	r2, [sp, #12]
 800c0b8:	3304      	adds	r3, #4
 800c0ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c0be:	f1b9 0f00 	cmp.w	r9, #0
 800c0c2:	d021      	beq.n	800c108 <__multiply+0x140>
 800c0c4:	46ae      	mov	lr, r5
 800c0c6:	f04f 0a00 	mov.w	sl, #0
 800c0ca:	6829      	ldr	r1, [r5, #0]
 800c0cc:	f104 0c14 	add.w	ip, r4, #20
 800c0d0:	f8bc b000 	ldrh.w	fp, [ip]
 800c0d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c0d8:	b289      	uxth	r1, r1
 800c0da:	fb09 220b 	mla	r2, r9, fp, r2
 800c0de:	4452      	add	r2, sl
 800c0e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c0e4:	f84e 1b04 	str.w	r1, [lr], #4
 800c0e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c0ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c0f0:	f8be 1000 	ldrh.w	r1, [lr]
 800c0f4:	4567      	cmp	r7, ip
 800c0f6:	fb09 110a 	mla	r1, r9, sl, r1
 800c0fa:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c0fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c102:	d8e5      	bhi.n	800c0d0 <__multiply+0x108>
 800c104:	9a01      	ldr	r2, [sp, #4]
 800c106:	50a9      	str	r1, [r5, r2]
 800c108:	3504      	adds	r5, #4
 800c10a:	e79a      	b.n	800c042 <__multiply+0x7a>
 800c10c:	3e01      	subs	r6, #1
 800c10e:	e79c      	b.n	800c04a <__multiply+0x82>
 800c110:	0800d52c 	.word	0x0800d52c
 800c114:	0800d53d 	.word	0x0800d53d

0800c118 <__pow5mult>:
 800c118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c11c:	4615      	mov	r5, r2
 800c11e:	f012 0203 	ands.w	r2, r2, #3
 800c122:	4606      	mov	r6, r0
 800c124:	460f      	mov	r7, r1
 800c126:	d007      	beq.n	800c138 <__pow5mult+0x20>
 800c128:	4c25      	ldr	r4, [pc, #148]	; (800c1c0 <__pow5mult+0xa8>)
 800c12a:	3a01      	subs	r2, #1
 800c12c:	2300      	movs	r3, #0
 800c12e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c132:	f7ff fe9f 	bl	800be74 <__multadd>
 800c136:	4607      	mov	r7, r0
 800c138:	10ad      	asrs	r5, r5, #2
 800c13a:	d03d      	beq.n	800c1b8 <__pow5mult+0xa0>
 800c13c:	69f4      	ldr	r4, [r6, #28]
 800c13e:	b97c      	cbnz	r4, 800c160 <__pow5mult+0x48>
 800c140:	2010      	movs	r0, #16
 800c142:	f7fe f8c3 	bl	800a2cc <malloc>
 800c146:	4602      	mov	r2, r0
 800c148:	61f0      	str	r0, [r6, #28]
 800c14a:	b928      	cbnz	r0, 800c158 <__pow5mult+0x40>
 800c14c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c150:	4b1c      	ldr	r3, [pc, #112]	; (800c1c4 <__pow5mult+0xac>)
 800c152:	481d      	ldr	r0, [pc, #116]	; (800c1c8 <__pow5mult+0xb0>)
 800c154:	f000 fa5c 	bl	800c610 <__assert_func>
 800c158:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c15c:	6004      	str	r4, [r0, #0]
 800c15e:	60c4      	str	r4, [r0, #12]
 800c160:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c164:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c168:	b94c      	cbnz	r4, 800c17e <__pow5mult+0x66>
 800c16a:	f240 2171 	movw	r1, #625	; 0x271
 800c16e:	4630      	mov	r0, r6
 800c170:	f7ff ff14 	bl	800bf9c <__i2b>
 800c174:	2300      	movs	r3, #0
 800c176:	4604      	mov	r4, r0
 800c178:	f8c8 0008 	str.w	r0, [r8, #8]
 800c17c:	6003      	str	r3, [r0, #0]
 800c17e:	f04f 0900 	mov.w	r9, #0
 800c182:	07eb      	lsls	r3, r5, #31
 800c184:	d50a      	bpl.n	800c19c <__pow5mult+0x84>
 800c186:	4639      	mov	r1, r7
 800c188:	4622      	mov	r2, r4
 800c18a:	4630      	mov	r0, r6
 800c18c:	f7ff ff1c 	bl	800bfc8 <__multiply>
 800c190:	4680      	mov	r8, r0
 800c192:	4639      	mov	r1, r7
 800c194:	4630      	mov	r0, r6
 800c196:	f7ff fe4b 	bl	800be30 <_Bfree>
 800c19a:	4647      	mov	r7, r8
 800c19c:	106d      	asrs	r5, r5, #1
 800c19e:	d00b      	beq.n	800c1b8 <__pow5mult+0xa0>
 800c1a0:	6820      	ldr	r0, [r4, #0]
 800c1a2:	b938      	cbnz	r0, 800c1b4 <__pow5mult+0x9c>
 800c1a4:	4622      	mov	r2, r4
 800c1a6:	4621      	mov	r1, r4
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	f7ff ff0d 	bl	800bfc8 <__multiply>
 800c1ae:	6020      	str	r0, [r4, #0]
 800c1b0:	f8c0 9000 	str.w	r9, [r0]
 800c1b4:	4604      	mov	r4, r0
 800c1b6:	e7e4      	b.n	800c182 <__pow5mult+0x6a>
 800c1b8:	4638      	mov	r0, r7
 800c1ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1be:	bf00      	nop
 800c1c0:	0800d688 	.word	0x0800d688
 800c1c4:	0800d4bd 	.word	0x0800d4bd
 800c1c8:	0800d53d 	.word	0x0800d53d

0800c1cc <__lshift>:
 800c1cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1d0:	460c      	mov	r4, r1
 800c1d2:	4607      	mov	r7, r0
 800c1d4:	4691      	mov	r9, r2
 800c1d6:	6923      	ldr	r3, [r4, #16]
 800c1d8:	6849      	ldr	r1, [r1, #4]
 800c1da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c1de:	68a3      	ldr	r3, [r4, #8]
 800c1e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c1e4:	f108 0601 	add.w	r6, r8, #1
 800c1e8:	42b3      	cmp	r3, r6
 800c1ea:	db0b      	blt.n	800c204 <__lshift+0x38>
 800c1ec:	4638      	mov	r0, r7
 800c1ee:	f7ff fddf 	bl	800bdb0 <_Balloc>
 800c1f2:	4605      	mov	r5, r0
 800c1f4:	b948      	cbnz	r0, 800c20a <__lshift+0x3e>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c1fc:	4b27      	ldr	r3, [pc, #156]	; (800c29c <__lshift+0xd0>)
 800c1fe:	4828      	ldr	r0, [pc, #160]	; (800c2a0 <__lshift+0xd4>)
 800c200:	f000 fa06 	bl	800c610 <__assert_func>
 800c204:	3101      	adds	r1, #1
 800c206:	005b      	lsls	r3, r3, #1
 800c208:	e7ee      	b.n	800c1e8 <__lshift+0x1c>
 800c20a:	2300      	movs	r3, #0
 800c20c:	f100 0114 	add.w	r1, r0, #20
 800c210:	f100 0210 	add.w	r2, r0, #16
 800c214:	4618      	mov	r0, r3
 800c216:	4553      	cmp	r3, sl
 800c218:	db33      	blt.n	800c282 <__lshift+0xb6>
 800c21a:	6920      	ldr	r0, [r4, #16]
 800c21c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c220:	f104 0314 	add.w	r3, r4, #20
 800c224:	f019 091f 	ands.w	r9, r9, #31
 800c228:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c22c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c230:	d02b      	beq.n	800c28a <__lshift+0xbe>
 800c232:	468a      	mov	sl, r1
 800c234:	2200      	movs	r2, #0
 800c236:	f1c9 0e20 	rsb	lr, r9, #32
 800c23a:	6818      	ldr	r0, [r3, #0]
 800c23c:	fa00 f009 	lsl.w	r0, r0, r9
 800c240:	4310      	orrs	r0, r2
 800c242:	f84a 0b04 	str.w	r0, [sl], #4
 800c246:	f853 2b04 	ldr.w	r2, [r3], #4
 800c24a:	459c      	cmp	ip, r3
 800c24c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c250:	d8f3      	bhi.n	800c23a <__lshift+0x6e>
 800c252:	ebac 0304 	sub.w	r3, ip, r4
 800c256:	3b15      	subs	r3, #21
 800c258:	f023 0303 	bic.w	r3, r3, #3
 800c25c:	3304      	adds	r3, #4
 800c25e:	f104 0015 	add.w	r0, r4, #21
 800c262:	4584      	cmp	ip, r0
 800c264:	bf38      	it	cc
 800c266:	2304      	movcc	r3, #4
 800c268:	50ca      	str	r2, [r1, r3]
 800c26a:	b10a      	cbz	r2, 800c270 <__lshift+0xa4>
 800c26c:	f108 0602 	add.w	r6, r8, #2
 800c270:	3e01      	subs	r6, #1
 800c272:	4638      	mov	r0, r7
 800c274:	4621      	mov	r1, r4
 800c276:	612e      	str	r6, [r5, #16]
 800c278:	f7ff fdda 	bl	800be30 <_Bfree>
 800c27c:	4628      	mov	r0, r5
 800c27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c282:	f842 0f04 	str.w	r0, [r2, #4]!
 800c286:	3301      	adds	r3, #1
 800c288:	e7c5      	b.n	800c216 <__lshift+0x4a>
 800c28a:	3904      	subs	r1, #4
 800c28c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c290:	459c      	cmp	ip, r3
 800c292:	f841 2f04 	str.w	r2, [r1, #4]!
 800c296:	d8f9      	bhi.n	800c28c <__lshift+0xc0>
 800c298:	e7ea      	b.n	800c270 <__lshift+0xa4>
 800c29a:	bf00      	nop
 800c29c:	0800d52c 	.word	0x0800d52c
 800c2a0:	0800d53d 	.word	0x0800d53d

0800c2a4 <__mcmp>:
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	690a      	ldr	r2, [r1, #16]
 800c2a8:	6900      	ldr	r0, [r0, #16]
 800c2aa:	b530      	push	{r4, r5, lr}
 800c2ac:	1a80      	subs	r0, r0, r2
 800c2ae:	d10d      	bne.n	800c2cc <__mcmp+0x28>
 800c2b0:	3314      	adds	r3, #20
 800c2b2:	3114      	adds	r1, #20
 800c2b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c2b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c2bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c2c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c2c4:	4295      	cmp	r5, r2
 800c2c6:	d002      	beq.n	800c2ce <__mcmp+0x2a>
 800c2c8:	d304      	bcc.n	800c2d4 <__mcmp+0x30>
 800c2ca:	2001      	movs	r0, #1
 800c2cc:	bd30      	pop	{r4, r5, pc}
 800c2ce:	42a3      	cmp	r3, r4
 800c2d0:	d3f4      	bcc.n	800c2bc <__mcmp+0x18>
 800c2d2:	e7fb      	b.n	800c2cc <__mcmp+0x28>
 800c2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d8:	e7f8      	b.n	800c2cc <__mcmp+0x28>
	...

0800c2dc <__mdiff>:
 800c2dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2e0:	460d      	mov	r5, r1
 800c2e2:	4607      	mov	r7, r0
 800c2e4:	4611      	mov	r1, r2
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	4614      	mov	r4, r2
 800c2ea:	f7ff ffdb 	bl	800c2a4 <__mcmp>
 800c2ee:	1e06      	subs	r6, r0, #0
 800c2f0:	d111      	bne.n	800c316 <__mdiff+0x3a>
 800c2f2:	4631      	mov	r1, r6
 800c2f4:	4638      	mov	r0, r7
 800c2f6:	f7ff fd5b 	bl	800bdb0 <_Balloc>
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	b928      	cbnz	r0, 800c30a <__mdiff+0x2e>
 800c2fe:	f240 2137 	movw	r1, #567	; 0x237
 800c302:	4b3a      	ldr	r3, [pc, #232]	; (800c3ec <__mdiff+0x110>)
 800c304:	483a      	ldr	r0, [pc, #232]	; (800c3f0 <__mdiff+0x114>)
 800c306:	f000 f983 	bl	800c610 <__assert_func>
 800c30a:	2301      	movs	r3, #1
 800c30c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c310:	4610      	mov	r0, r2
 800c312:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c316:	bfa4      	itt	ge
 800c318:	4623      	movge	r3, r4
 800c31a:	462c      	movge	r4, r5
 800c31c:	4638      	mov	r0, r7
 800c31e:	6861      	ldr	r1, [r4, #4]
 800c320:	bfa6      	itte	ge
 800c322:	461d      	movge	r5, r3
 800c324:	2600      	movge	r6, #0
 800c326:	2601      	movlt	r6, #1
 800c328:	f7ff fd42 	bl	800bdb0 <_Balloc>
 800c32c:	4602      	mov	r2, r0
 800c32e:	b918      	cbnz	r0, 800c338 <__mdiff+0x5c>
 800c330:	f240 2145 	movw	r1, #581	; 0x245
 800c334:	4b2d      	ldr	r3, [pc, #180]	; (800c3ec <__mdiff+0x110>)
 800c336:	e7e5      	b.n	800c304 <__mdiff+0x28>
 800c338:	f102 0814 	add.w	r8, r2, #20
 800c33c:	46c2      	mov	sl, r8
 800c33e:	f04f 0c00 	mov.w	ip, #0
 800c342:	6927      	ldr	r7, [r4, #16]
 800c344:	60c6      	str	r6, [r0, #12]
 800c346:	692e      	ldr	r6, [r5, #16]
 800c348:	f104 0014 	add.w	r0, r4, #20
 800c34c:	f105 0914 	add.w	r9, r5, #20
 800c350:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800c354:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c358:	3410      	adds	r4, #16
 800c35a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c35e:	f859 3b04 	ldr.w	r3, [r9], #4
 800c362:	fa1f f18b 	uxth.w	r1, fp
 800c366:	4461      	add	r1, ip
 800c368:	fa1f fc83 	uxth.w	ip, r3
 800c36c:	0c1b      	lsrs	r3, r3, #16
 800c36e:	eba1 010c 	sub.w	r1, r1, ip
 800c372:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c376:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c37a:	b289      	uxth	r1, r1
 800c37c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800c380:	454e      	cmp	r6, r9
 800c382:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c386:	f84a 1b04 	str.w	r1, [sl], #4
 800c38a:	d8e6      	bhi.n	800c35a <__mdiff+0x7e>
 800c38c:	1b73      	subs	r3, r6, r5
 800c38e:	3b15      	subs	r3, #21
 800c390:	f023 0303 	bic.w	r3, r3, #3
 800c394:	3515      	adds	r5, #21
 800c396:	3304      	adds	r3, #4
 800c398:	42ae      	cmp	r6, r5
 800c39a:	bf38      	it	cc
 800c39c:	2304      	movcc	r3, #4
 800c39e:	4418      	add	r0, r3
 800c3a0:	4443      	add	r3, r8
 800c3a2:	461e      	mov	r6, r3
 800c3a4:	4605      	mov	r5, r0
 800c3a6:	4575      	cmp	r5, lr
 800c3a8:	d30e      	bcc.n	800c3c8 <__mdiff+0xec>
 800c3aa:	f10e 0103 	add.w	r1, lr, #3
 800c3ae:	1a09      	subs	r1, r1, r0
 800c3b0:	f021 0103 	bic.w	r1, r1, #3
 800c3b4:	3803      	subs	r0, #3
 800c3b6:	4586      	cmp	lr, r0
 800c3b8:	bf38      	it	cc
 800c3ba:	2100      	movcc	r1, #0
 800c3bc:	440b      	add	r3, r1
 800c3be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c3c2:	b189      	cbz	r1, 800c3e8 <__mdiff+0x10c>
 800c3c4:	6117      	str	r7, [r2, #16]
 800c3c6:	e7a3      	b.n	800c310 <__mdiff+0x34>
 800c3c8:	f855 8b04 	ldr.w	r8, [r5], #4
 800c3cc:	fa1f f188 	uxth.w	r1, r8
 800c3d0:	4461      	add	r1, ip
 800c3d2:	140c      	asrs	r4, r1, #16
 800c3d4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c3d8:	b289      	uxth	r1, r1
 800c3da:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c3de:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800c3e2:	f846 1b04 	str.w	r1, [r6], #4
 800c3e6:	e7de      	b.n	800c3a6 <__mdiff+0xca>
 800c3e8:	3f01      	subs	r7, #1
 800c3ea:	e7e8      	b.n	800c3be <__mdiff+0xe2>
 800c3ec:	0800d52c 	.word	0x0800d52c
 800c3f0:	0800d53d 	.word	0x0800d53d

0800c3f4 <__d2b>:
 800c3f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3f6:	2101      	movs	r1, #1
 800c3f8:	4617      	mov	r7, r2
 800c3fa:	461c      	mov	r4, r3
 800c3fc:	9e08      	ldr	r6, [sp, #32]
 800c3fe:	f7ff fcd7 	bl	800bdb0 <_Balloc>
 800c402:	4605      	mov	r5, r0
 800c404:	b930      	cbnz	r0, 800c414 <__d2b+0x20>
 800c406:	4602      	mov	r2, r0
 800c408:	f240 310f 	movw	r1, #783	; 0x30f
 800c40c:	4b22      	ldr	r3, [pc, #136]	; (800c498 <__d2b+0xa4>)
 800c40e:	4823      	ldr	r0, [pc, #140]	; (800c49c <__d2b+0xa8>)
 800c410:	f000 f8fe 	bl	800c610 <__assert_func>
 800c414:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c418:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800c41c:	bb24      	cbnz	r4, 800c468 <__d2b+0x74>
 800c41e:	2f00      	cmp	r7, #0
 800c420:	9301      	str	r3, [sp, #4]
 800c422:	d026      	beq.n	800c472 <__d2b+0x7e>
 800c424:	4668      	mov	r0, sp
 800c426:	9700      	str	r7, [sp, #0]
 800c428:	f7ff fd8a 	bl	800bf40 <__lo0bits>
 800c42c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c430:	b1e8      	cbz	r0, 800c46e <__d2b+0x7a>
 800c432:	f1c0 0320 	rsb	r3, r0, #32
 800c436:	fa02 f303 	lsl.w	r3, r2, r3
 800c43a:	430b      	orrs	r3, r1
 800c43c:	40c2      	lsrs	r2, r0
 800c43e:	616b      	str	r3, [r5, #20]
 800c440:	9201      	str	r2, [sp, #4]
 800c442:	9b01      	ldr	r3, [sp, #4]
 800c444:	2b00      	cmp	r3, #0
 800c446:	bf14      	ite	ne
 800c448:	2102      	movne	r1, #2
 800c44a:	2101      	moveq	r1, #1
 800c44c:	61ab      	str	r3, [r5, #24]
 800c44e:	6129      	str	r1, [r5, #16]
 800c450:	b1bc      	cbz	r4, 800c482 <__d2b+0x8e>
 800c452:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c456:	4404      	add	r4, r0
 800c458:	6034      	str	r4, [r6, #0]
 800c45a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c460:	6018      	str	r0, [r3, #0]
 800c462:	4628      	mov	r0, r5
 800c464:	b003      	add	sp, #12
 800c466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c468:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c46c:	e7d7      	b.n	800c41e <__d2b+0x2a>
 800c46e:	6169      	str	r1, [r5, #20]
 800c470:	e7e7      	b.n	800c442 <__d2b+0x4e>
 800c472:	a801      	add	r0, sp, #4
 800c474:	f7ff fd64 	bl	800bf40 <__lo0bits>
 800c478:	9b01      	ldr	r3, [sp, #4]
 800c47a:	2101      	movs	r1, #1
 800c47c:	616b      	str	r3, [r5, #20]
 800c47e:	3020      	adds	r0, #32
 800c480:	e7e5      	b.n	800c44e <__d2b+0x5a>
 800c482:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c486:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800c48a:	6030      	str	r0, [r6, #0]
 800c48c:	6918      	ldr	r0, [r3, #16]
 800c48e:	f7ff fd37 	bl	800bf00 <__hi0bits>
 800c492:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c496:	e7e2      	b.n	800c45e <__d2b+0x6a>
 800c498:	0800d52c 	.word	0x0800d52c
 800c49c:	0800d53d 	.word	0x0800d53d

0800c4a0 <__sflush_r>:
 800c4a0:	898a      	ldrh	r2, [r1, #12]
 800c4a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4a4:	4605      	mov	r5, r0
 800c4a6:	0710      	lsls	r0, r2, #28
 800c4a8:	460c      	mov	r4, r1
 800c4aa:	d457      	bmi.n	800c55c <__sflush_r+0xbc>
 800c4ac:	684b      	ldr	r3, [r1, #4]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	dc04      	bgt.n	800c4bc <__sflush_r+0x1c>
 800c4b2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	dc01      	bgt.n	800c4bc <__sflush_r+0x1c>
 800c4b8:	2000      	movs	r0, #0
 800c4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4be:	2e00      	cmp	r6, #0
 800c4c0:	d0fa      	beq.n	800c4b8 <__sflush_r+0x18>
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c4c8:	682f      	ldr	r7, [r5, #0]
 800c4ca:	6a21      	ldr	r1, [r4, #32]
 800c4cc:	602b      	str	r3, [r5, #0]
 800c4ce:	d032      	beq.n	800c536 <__sflush_r+0x96>
 800c4d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c4d2:	89a3      	ldrh	r3, [r4, #12]
 800c4d4:	075a      	lsls	r2, r3, #29
 800c4d6:	d505      	bpl.n	800c4e4 <__sflush_r+0x44>
 800c4d8:	6863      	ldr	r3, [r4, #4]
 800c4da:	1ac0      	subs	r0, r0, r3
 800c4dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c4de:	b10b      	cbz	r3, 800c4e4 <__sflush_r+0x44>
 800c4e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c4e2:	1ac0      	subs	r0, r0, r3
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4ea:	4628      	mov	r0, r5
 800c4ec:	6a21      	ldr	r1, [r4, #32]
 800c4ee:	47b0      	blx	r6
 800c4f0:	1c43      	adds	r3, r0, #1
 800c4f2:	89a3      	ldrh	r3, [r4, #12]
 800c4f4:	d106      	bne.n	800c504 <__sflush_r+0x64>
 800c4f6:	6829      	ldr	r1, [r5, #0]
 800c4f8:	291d      	cmp	r1, #29
 800c4fa:	d82b      	bhi.n	800c554 <__sflush_r+0xb4>
 800c4fc:	4a28      	ldr	r2, [pc, #160]	; (800c5a0 <__sflush_r+0x100>)
 800c4fe:	410a      	asrs	r2, r1
 800c500:	07d6      	lsls	r6, r2, #31
 800c502:	d427      	bmi.n	800c554 <__sflush_r+0xb4>
 800c504:	2200      	movs	r2, #0
 800c506:	6062      	str	r2, [r4, #4]
 800c508:	6922      	ldr	r2, [r4, #16]
 800c50a:	04d9      	lsls	r1, r3, #19
 800c50c:	6022      	str	r2, [r4, #0]
 800c50e:	d504      	bpl.n	800c51a <__sflush_r+0x7a>
 800c510:	1c42      	adds	r2, r0, #1
 800c512:	d101      	bne.n	800c518 <__sflush_r+0x78>
 800c514:	682b      	ldr	r3, [r5, #0]
 800c516:	b903      	cbnz	r3, 800c51a <__sflush_r+0x7a>
 800c518:	6560      	str	r0, [r4, #84]	; 0x54
 800c51a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c51c:	602f      	str	r7, [r5, #0]
 800c51e:	2900      	cmp	r1, #0
 800c520:	d0ca      	beq.n	800c4b8 <__sflush_r+0x18>
 800c522:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c526:	4299      	cmp	r1, r3
 800c528:	d002      	beq.n	800c530 <__sflush_r+0x90>
 800c52a:	4628      	mov	r0, r5
 800c52c:	f7ff fbf8 	bl	800bd20 <_free_r>
 800c530:	2000      	movs	r0, #0
 800c532:	6360      	str	r0, [r4, #52]	; 0x34
 800c534:	e7c1      	b.n	800c4ba <__sflush_r+0x1a>
 800c536:	2301      	movs	r3, #1
 800c538:	4628      	mov	r0, r5
 800c53a:	47b0      	blx	r6
 800c53c:	1c41      	adds	r1, r0, #1
 800c53e:	d1c8      	bne.n	800c4d2 <__sflush_r+0x32>
 800c540:	682b      	ldr	r3, [r5, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d0c5      	beq.n	800c4d2 <__sflush_r+0x32>
 800c546:	2b1d      	cmp	r3, #29
 800c548:	d001      	beq.n	800c54e <__sflush_r+0xae>
 800c54a:	2b16      	cmp	r3, #22
 800c54c:	d101      	bne.n	800c552 <__sflush_r+0xb2>
 800c54e:	602f      	str	r7, [r5, #0]
 800c550:	e7b2      	b.n	800c4b8 <__sflush_r+0x18>
 800c552:	89a3      	ldrh	r3, [r4, #12]
 800c554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c558:	81a3      	strh	r3, [r4, #12]
 800c55a:	e7ae      	b.n	800c4ba <__sflush_r+0x1a>
 800c55c:	690f      	ldr	r7, [r1, #16]
 800c55e:	2f00      	cmp	r7, #0
 800c560:	d0aa      	beq.n	800c4b8 <__sflush_r+0x18>
 800c562:	0793      	lsls	r3, r2, #30
 800c564:	bf18      	it	ne
 800c566:	2300      	movne	r3, #0
 800c568:	680e      	ldr	r6, [r1, #0]
 800c56a:	bf08      	it	eq
 800c56c:	694b      	ldreq	r3, [r1, #20]
 800c56e:	1bf6      	subs	r6, r6, r7
 800c570:	600f      	str	r7, [r1, #0]
 800c572:	608b      	str	r3, [r1, #8]
 800c574:	2e00      	cmp	r6, #0
 800c576:	dd9f      	ble.n	800c4b8 <__sflush_r+0x18>
 800c578:	4633      	mov	r3, r6
 800c57a:	463a      	mov	r2, r7
 800c57c:	4628      	mov	r0, r5
 800c57e:	6a21      	ldr	r1, [r4, #32]
 800c580:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c584:	47e0      	blx	ip
 800c586:	2800      	cmp	r0, #0
 800c588:	dc06      	bgt.n	800c598 <__sflush_r+0xf8>
 800c58a:	89a3      	ldrh	r3, [r4, #12]
 800c58c:	f04f 30ff 	mov.w	r0, #4294967295
 800c590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c594:	81a3      	strh	r3, [r4, #12]
 800c596:	e790      	b.n	800c4ba <__sflush_r+0x1a>
 800c598:	4407      	add	r7, r0
 800c59a:	1a36      	subs	r6, r6, r0
 800c59c:	e7ea      	b.n	800c574 <__sflush_r+0xd4>
 800c59e:	bf00      	nop
 800c5a0:	dfbffffe 	.word	0xdfbffffe

0800c5a4 <_fflush_r>:
 800c5a4:	b538      	push	{r3, r4, r5, lr}
 800c5a6:	690b      	ldr	r3, [r1, #16]
 800c5a8:	4605      	mov	r5, r0
 800c5aa:	460c      	mov	r4, r1
 800c5ac:	b913      	cbnz	r3, 800c5b4 <_fflush_r+0x10>
 800c5ae:	2500      	movs	r5, #0
 800c5b0:	4628      	mov	r0, r5
 800c5b2:	bd38      	pop	{r3, r4, r5, pc}
 800c5b4:	b118      	cbz	r0, 800c5be <_fflush_r+0x1a>
 800c5b6:	6a03      	ldr	r3, [r0, #32]
 800c5b8:	b90b      	cbnz	r3, 800c5be <_fflush_r+0x1a>
 800c5ba:	f7fe fc2d 	bl	800ae18 <__sinit>
 800c5be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d0f3      	beq.n	800c5ae <_fflush_r+0xa>
 800c5c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c5c8:	07d0      	lsls	r0, r2, #31
 800c5ca:	d404      	bmi.n	800c5d6 <_fflush_r+0x32>
 800c5cc:	0599      	lsls	r1, r3, #22
 800c5ce:	d402      	bmi.n	800c5d6 <_fflush_r+0x32>
 800c5d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5d2:	f7fe fd28 	bl	800b026 <__retarget_lock_acquire_recursive>
 800c5d6:	4628      	mov	r0, r5
 800c5d8:	4621      	mov	r1, r4
 800c5da:	f7ff ff61 	bl	800c4a0 <__sflush_r>
 800c5de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5e0:	4605      	mov	r5, r0
 800c5e2:	07da      	lsls	r2, r3, #31
 800c5e4:	d4e4      	bmi.n	800c5b0 <_fflush_r+0xc>
 800c5e6:	89a3      	ldrh	r3, [r4, #12]
 800c5e8:	059b      	lsls	r3, r3, #22
 800c5ea:	d4e1      	bmi.n	800c5b0 <_fflush_r+0xc>
 800c5ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5ee:	f7fe fd1b 	bl	800b028 <__retarget_lock_release_recursive>
 800c5f2:	e7dd      	b.n	800c5b0 <_fflush_r+0xc>

0800c5f4 <memcpy>:
 800c5f4:	440a      	add	r2, r1
 800c5f6:	4291      	cmp	r1, r2
 800c5f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5fc:	d100      	bne.n	800c600 <memcpy+0xc>
 800c5fe:	4770      	bx	lr
 800c600:	b510      	push	{r4, lr}
 800c602:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c606:	4291      	cmp	r1, r2
 800c608:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c60c:	d1f9      	bne.n	800c602 <memcpy+0xe>
 800c60e:	bd10      	pop	{r4, pc}

0800c610 <__assert_func>:
 800c610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c612:	4614      	mov	r4, r2
 800c614:	461a      	mov	r2, r3
 800c616:	4b09      	ldr	r3, [pc, #36]	; (800c63c <__assert_func+0x2c>)
 800c618:	4605      	mov	r5, r0
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	68d8      	ldr	r0, [r3, #12]
 800c61e:	b14c      	cbz	r4, 800c634 <__assert_func+0x24>
 800c620:	4b07      	ldr	r3, [pc, #28]	; (800c640 <__assert_func+0x30>)
 800c622:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c626:	9100      	str	r1, [sp, #0]
 800c628:	462b      	mov	r3, r5
 800c62a:	4906      	ldr	r1, [pc, #24]	; (800c644 <__assert_func+0x34>)
 800c62c:	f000 f842 	bl	800c6b4 <fiprintf>
 800c630:	f000 f852 	bl	800c6d8 <abort>
 800c634:	4b04      	ldr	r3, [pc, #16]	; (800c648 <__assert_func+0x38>)
 800c636:	461c      	mov	r4, r3
 800c638:	e7f3      	b.n	800c622 <__assert_func+0x12>
 800c63a:	bf00      	nop
 800c63c:	20000238 	.word	0x20000238
 800c640:	0800d69e 	.word	0x0800d69e
 800c644:	0800d6ab 	.word	0x0800d6ab
 800c648:	0800d6d9 	.word	0x0800d6d9

0800c64c <_calloc_r>:
 800c64c:	b570      	push	{r4, r5, r6, lr}
 800c64e:	fba1 5402 	umull	r5, r4, r1, r2
 800c652:	b934      	cbnz	r4, 800c662 <_calloc_r+0x16>
 800c654:	4629      	mov	r1, r5
 800c656:	f7fd fe69 	bl	800a32c <_malloc_r>
 800c65a:	4606      	mov	r6, r0
 800c65c:	b928      	cbnz	r0, 800c66a <_calloc_r+0x1e>
 800c65e:	4630      	mov	r0, r6
 800c660:	bd70      	pop	{r4, r5, r6, pc}
 800c662:	220c      	movs	r2, #12
 800c664:	2600      	movs	r6, #0
 800c666:	6002      	str	r2, [r0, #0]
 800c668:	e7f9      	b.n	800c65e <_calloc_r+0x12>
 800c66a:	462a      	mov	r2, r5
 800c66c:	4621      	mov	r1, r4
 800c66e:	f7fe fc4c 	bl	800af0a <memset>
 800c672:	e7f4      	b.n	800c65e <_calloc_r+0x12>

0800c674 <__ascii_mbtowc>:
 800c674:	b082      	sub	sp, #8
 800c676:	b901      	cbnz	r1, 800c67a <__ascii_mbtowc+0x6>
 800c678:	a901      	add	r1, sp, #4
 800c67a:	b142      	cbz	r2, 800c68e <__ascii_mbtowc+0x1a>
 800c67c:	b14b      	cbz	r3, 800c692 <__ascii_mbtowc+0x1e>
 800c67e:	7813      	ldrb	r3, [r2, #0]
 800c680:	600b      	str	r3, [r1, #0]
 800c682:	7812      	ldrb	r2, [r2, #0]
 800c684:	1e10      	subs	r0, r2, #0
 800c686:	bf18      	it	ne
 800c688:	2001      	movne	r0, #1
 800c68a:	b002      	add	sp, #8
 800c68c:	4770      	bx	lr
 800c68e:	4610      	mov	r0, r2
 800c690:	e7fb      	b.n	800c68a <__ascii_mbtowc+0x16>
 800c692:	f06f 0001 	mvn.w	r0, #1
 800c696:	e7f8      	b.n	800c68a <__ascii_mbtowc+0x16>

0800c698 <__ascii_wctomb>:
 800c698:	4603      	mov	r3, r0
 800c69a:	4608      	mov	r0, r1
 800c69c:	b141      	cbz	r1, 800c6b0 <__ascii_wctomb+0x18>
 800c69e:	2aff      	cmp	r2, #255	; 0xff
 800c6a0:	d904      	bls.n	800c6ac <__ascii_wctomb+0x14>
 800c6a2:	228a      	movs	r2, #138	; 0x8a
 800c6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6a8:	601a      	str	r2, [r3, #0]
 800c6aa:	4770      	bx	lr
 800c6ac:	2001      	movs	r0, #1
 800c6ae:	700a      	strb	r2, [r1, #0]
 800c6b0:	4770      	bx	lr
	...

0800c6b4 <fiprintf>:
 800c6b4:	b40e      	push	{r1, r2, r3}
 800c6b6:	b503      	push	{r0, r1, lr}
 800c6b8:	4601      	mov	r1, r0
 800c6ba:	ab03      	add	r3, sp, #12
 800c6bc:	4805      	ldr	r0, [pc, #20]	; (800c6d4 <fiprintf+0x20>)
 800c6be:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6c2:	6800      	ldr	r0, [r0, #0]
 800c6c4:	9301      	str	r3, [sp, #4]
 800c6c6:	f000 f835 	bl	800c734 <_vfiprintf_r>
 800c6ca:	b002      	add	sp, #8
 800c6cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6d0:	b003      	add	sp, #12
 800c6d2:	4770      	bx	lr
 800c6d4:	20000238 	.word	0x20000238

0800c6d8 <abort>:
 800c6d8:	2006      	movs	r0, #6
 800c6da:	b508      	push	{r3, lr}
 800c6dc:	f000 fa02 	bl	800cae4 <raise>
 800c6e0:	2001      	movs	r0, #1
 800c6e2:	f7f5 ffde 	bl	80026a2 <_exit>

0800c6e6 <__sfputc_r>:
 800c6e6:	6893      	ldr	r3, [r2, #8]
 800c6e8:	b410      	push	{r4}
 800c6ea:	3b01      	subs	r3, #1
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	6093      	str	r3, [r2, #8]
 800c6f0:	da07      	bge.n	800c702 <__sfputc_r+0x1c>
 800c6f2:	6994      	ldr	r4, [r2, #24]
 800c6f4:	42a3      	cmp	r3, r4
 800c6f6:	db01      	blt.n	800c6fc <__sfputc_r+0x16>
 800c6f8:	290a      	cmp	r1, #10
 800c6fa:	d102      	bne.n	800c702 <__sfputc_r+0x1c>
 800c6fc:	bc10      	pop	{r4}
 800c6fe:	f000 b933 	b.w	800c968 <__swbuf_r>
 800c702:	6813      	ldr	r3, [r2, #0]
 800c704:	1c58      	adds	r0, r3, #1
 800c706:	6010      	str	r0, [r2, #0]
 800c708:	7019      	strb	r1, [r3, #0]
 800c70a:	4608      	mov	r0, r1
 800c70c:	bc10      	pop	{r4}
 800c70e:	4770      	bx	lr

0800c710 <__sfputs_r>:
 800c710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c712:	4606      	mov	r6, r0
 800c714:	460f      	mov	r7, r1
 800c716:	4614      	mov	r4, r2
 800c718:	18d5      	adds	r5, r2, r3
 800c71a:	42ac      	cmp	r4, r5
 800c71c:	d101      	bne.n	800c722 <__sfputs_r+0x12>
 800c71e:	2000      	movs	r0, #0
 800c720:	e007      	b.n	800c732 <__sfputs_r+0x22>
 800c722:	463a      	mov	r2, r7
 800c724:	4630      	mov	r0, r6
 800c726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c72a:	f7ff ffdc 	bl	800c6e6 <__sfputc_r>
 800c72e:	1c43      	adds	r3, r0, #1
 800c730:	d1f3      	bne.n	800c71a <__sfputs_r+0xa>
 800c732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c734 <_vfiprintf_r>:
 800c734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c738:	460d      	mov	r5, r1
 800c73a:	4614      	mov	r4, r2
 800c73c:	4698      	mov	r8, r3
 800c73e:	4606      	mov	r6, r0
 800c740:	b09d      	sub	sp, #116	; 0x74
 800c742:	b118      	cbz	r0, 800c74c <_vfiprintf_r+0x18>
 800c744:	6a03      	ldr	r3, [r0, #32]
 800c746:	b90b      	cbnz	r3, 800c74c <_vfiprintf_r+0x18>
 800c748:	f7fe fb66 	bl	800ae18 <__sinit>
 800c74c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c74e:	07d9      	lsls	r1, r3, #31
 800c750:	d405      	bmi.n	800c75e <_vfiprintf_r+0x2a>
 800c752:	89ab      	ldrh	r3, [r5, #12]
 800c754:	059a      	lsls	r2, r3, #22
 800c756:	d402      	bmi.n	800c75e <_vfiprintf_r+0x2a>
 800c758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c75a:	f7fe fc64 	bl	800b026 <__retarget_lock_acquire_recursive>
 800c75e:	89ab      	ldrh	r3, [r5, #12]
 800c760:	071b      	lsls	r3, r3, #28
 800c762:	d501      	bpl.n	800c768 <_vfiprintf_r+0x34>
 800c764:	692b      	ldr	r3, [r5, #16]
 800c766:	b99b      	cbnz	r3, 800c790 <_vfiprintf_r+0x5c>
 800c768:	4629      	mov	r1, r5
 800c76a:	4630      	mov	r0, r6
 800c76c:	f000 f93a 	bl	800c9e4 <__swsetup_r>
 800c770:	b170      	cbz	r0, 800c790 <_vfiprintf_r+0x5c>
 800c772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c774:	07dc      	lsls	r4, r3, #31
 800c776:	d504      	bpl.n	800c782 <_vfiprintf_r+0x4e>
 800c778:	f04f 30ff 	mov.w	r0, #4294967295
 800c77c:	b01d      	add	sp, #116	; 0x74
 800c77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c782:	89ab      	ldrh	r3, [r5, #12]
 800c784:	0598      	lsls	r0, r3, #22
 800c786:	d4f7      	bmi.n	800c778 <_vfiprintf_r+0x44>
 800c788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c78a:	f7fe fc4d 	bl	800b028 <__retarget_lock_release_recursive>
 800c78e:	e7f3      	b.n	800c778 <_vfiprintf_r+0x44>
 800c790:	2300      	movs	r3, #0
 800c792:	9309      	str	r3, [sp, #36]	; 0x24
 800c794:	2320      	movs	r3, #32
 800c796:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c79a:	2330      	movs	r3, #48	; 0x30
 800c79c:	f04f 0901 	mov.w	r9, #1
 800c7a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800c954 <_vfiprintf_r+0x220>
 800c7a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7ac:	4623      	mov	r3, r4
 800c7ae:	469a      	mov	sl, r3
 800c7b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7b4:	b10a      	cbz	r2, 800c7ba <_vfiprintf_r+0x86>
 800c7b6:	2a25      	cmp	r2, #37	; 0x25
 800c7b8:	d1f9      	bne.n	800c7ae <_vfiprintf_r+0x7a>
 800c7ba:	ebba 0b04 	subs.w	fp, sl, r4
 800c7be:	d00b      	beq.n	800c7d8 <_vfiprintf_r+0xa4>
 800c7c0:	465b      	mov	r3, fp
 800c7c2:	4622      	mov	r2, r4
 800c7c4:	4629      	mov	r1, r5
 800c7c6:	4630      	mov	r0, r6
 800c7c8:	f7ff ffa2 	bl	800c710 <__sfputs_r>
 800c7cc:	3001      	adds	r0, #1
 800c7ce:	f000 80a9 	beq.w	800c924 <_vfiprintf_r+0x1f0>
 800c7d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7d4:	445a      	add	r2, fp
 800c7d6:	9209      	str	r2, [sp, #36]	; 0x24
 800c7d8:	f89a 3000 	ldrb.w	r3, [sl]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	f000 80a1 	beq.w	800c924 <_vfiprintf_r+0x1f0>
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c7e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7ec:	f10a 0a01 	add.w	sl, sl, #1
 800c7f0:	9304      	str	r3, [sp, #16]
 800c7f2:	9307      	str	r3, [sp, #28]
 800c7f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7f8:	931a      	str	r3, [sp, #104]	; 0x68
 800c7fa:	4654      	mov	r4, sl
 800c7fc:	2205      	movs	r2, #5
 800c7fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c802:	4854      	ldr	r0, [pc, #336]	; (800c954 <_vfiprintf_r+0x220>)
 800c804:	f7fe fc11 	bl	800b02a <memchr>
 800c808:	9a04      	ldr	r2, [sp, #16]
 800c80a:	b9d8      	cbnz	r0, 800c844 <_vfiprintf_r+0x110>
 800c80c:	06d1      	lsls	r1, r2, #27
 800c80e:	bf44      	itt	mi
 800c810:	2320      	movmi	r3, #32
 800c812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c816:	0713      	lsls	r3, r2, #28
 800c818:	bf44      	itt	mi
 800c81a:	232b      	movmi	r3, #43	; 0x2b
 800c81c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c820:	f89a 3000 	ldrb.w	r3, [sl]
 800c824:	2b2a      	cmp	r3, #42	; 0x2a
 800c826:	d015      	beq.n	800c854 <_vfiprintf_r+0x120>
 800c828:	4654      	mov	r4, sl
 800c82a:	2000      	movs	r0, #0
 800c82c:	f04f 0c0a 	mov.w	ip, #10
 800c830:	9a07      	ldr	r2, [sp, #28]
 800c832:	4621      	mov	r1, r4
 800c834:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c838:	3b30      	subs	r3, #48	; 0x30
 800c83a:	2b09      	cmp	r3, #9
 800c83c:	d94d      	bls.n	800c8da <_vfiprintf_r+0x1a6>
 800c83e:	b1b0      	cbz	r0, 800c86e <_vfiprintf_r+0x13a>
 800c840:	9207      	str	r2, [sp, #28]
 800c842:	e014      	b.n	800c86e <_vfiprintf_r+0x13a>
 800c844:	eba0 0308 	sub.w	r3, r0, r8
 800c848:	fa09 f303 	lsl.w	r3, r9, r3
 800c84c:	4313      	orrs	r3, r2
 800c84e:	46a2      	mov	sl, r4
 800c850:	9304      	str	r3, [sp, #16]
 800c852:	e7d2      	b.n	800c7fa <_vfiprintf_r+0xc6>
 800c854:	9b03      	ldr	r3, [sp, #12]
 800c856:	1d19      	adds	r1, r3, #4
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	9103      	str	r1, [sp, #12]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	bfbb      	ittet	lt
 800c860:	425b      	neglt	r3, r3
 800c862:	f042 0202 	orrlt.w	r2, r2, #2
 800c866:	9307      	strge	r3, [sp, #28]
 800c868:	9307      	strlt	r3, [sp, #28]
 800c86a:	bfb8      	it	lt
 800c86c:	9204      	strlt	r2, [sp, #16]
 800c86e:	7823      	ldrb	r3, [r4, #0]
 800c870:	2b2e      	cmp	r3, #46	; 0x2e
 800c872:	d10c      	bne.n	800c88e <_vfiprintf_r+0x15a>
 800c874:	7863      	ldrb	r3, [r4, #1]
 800c876:	2b2a      	cmp	r3, #42	; 0x2a
 800c878:	d134      	bne.n	800c8e4 <_vfiprintf_r+0x1b0>
 800c87a:	9b03      	ldr	r3, [sp, #12]
 800c87c:	3402      	adds	r4, #2
 800c87e:	1d1a      	adds	r2, r3, #4
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	9203      	str	r2, [sp, #12]
 800c884:	2b00      	cmp	r3, #0
 800c886:	bfb8      	it	lt
 800c888:	f04f 33ff 	movlt.w	r3, #4294967295
 800c88c:	9305      	str	r3, [sp, #20]
 800c88e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c958 <_vfiprintf_r+0x224>
 800c892:	2203      	movs	r2, #3
 800c894:	4650      	mov	r0, sl
 800c896:	7821      	ldrb	r1, [r4, #0]
 800c898:	f7fe fbc7 	bl	800b02a <memchr>
 800c89c:	b138      	cbz	r0, 800c8ae <_vfiprintf_r+0x17a>
 800c89e:	2240      	movs	r2, #64	; 0x40
 800c8a0:	9b04      	ldr	r3, [sp, #16]
 800c8a2:	eba0 000a 	sub.w	r0, r0, sl
 800c8a6:	4082      	lsls	r2, r0
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	3401      	adds	r4, #1
 800c8ac:	9304      	str	r3, [sp, #16]
 800c8ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8b2:	2206      	movs	r2, #6
 800c8b4:	4829      	ldr	r0, [pc, #164]	; (800c95c <_vfiprintf_r+0x228>)
 800c8b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8ba:	f7fe fbb6 	bl	800b02a <memchr>
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	d03f      	beq.n	800c942 <_vfiprintf_r+0x20e>
 800c8c2:	4b27      	ldr	r3, [pc, #156]	; (800c960 <_vfiprintf_r+0x22c>)
 800c8c4:	bb1b      	cbnz	r3, 800c90e <_vfiprintf_r+0x1da>
 800c8c6:	9b03      	ldr	r3, [sp, #12]
 800c8c8:	3307      	adds	r3, #7
 800c8ca:	f023 0307 	bic.w	r3, r3, #7
 800c8ce:	3308      	adds	r3, #8
 800c8d0:	9303      	str	r3, [sp, #12]
 800c8d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8d4:	443b      	add	r3, r7
 800c8d6:	9309      	str	r3, [sp, #36]	; 0x24
 800c8d8:	e768      	b.n	800c7ac <_vfiprintf_r+0x78>
 800c8da:	460c      	mov	r4, r1
 800c8dc:	2001      	movs	r0, #1
 800c8de:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8e2:	e7a6      	b.n	800c832 <_vfiprintf_r+0xfe>
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	f04f 0c0a 	mov.w	ip, #10
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	3401      	adds	r4, #1
 800c8ee:	9305      	str	r3, [sp, #20]
 800c8f0:	4620      	mov	r0, r4
 800c8f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8f6:	3a30      	subs	r2, #48	; 0x30
 800c8f8:	2a09      	cmp	r2, #9
 800c8fa:	d903      	bls.n	800c904 <_vfiprintf_r+0x1d0>
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d0c6      	beq.n	800c88e <_vfiprintf_r+0x15a>
 800c900:	9105      	str	r1, [sp, #20]
 800c902:	e7c4      	b.n	800c88e <_vfiprintf_r+0x15a>
 800c904:	4604      	mov	r4, r0
 800c906:	2301      	movs	r3, #1
 800c908:	fb0c 2101 	mla	r1, ip, r1, r2
 800c90c:	e7f0      	b.n	800c8f0 <_vfiprintf_r+0x1bc>
 800c90e:	ab03      	add	r3, sp, #12
 800c910:	9300      	str	r3, [sp, #0]
 800c912:	462a      	mov	r2, r5
 800c914:	4630      	mov	r0, r6
 800c916:	4b13      	ldr	r3, [pc, #76]	; (800c964 <_vfiprintf_r+0x230>)
 800c918:	a904      	add	r1, sp, #16
 800c91a:	f7fd fe2f 	bl	800a57c <_printf_float>
 800c91e:	4607      	mov	r7, r0
 800c920:	1c78      	adds	r0, r7, #1
 800c922:	d1d6      	bne.n	800c8d2 <_vfiprintf_r+0x19e>
 800c924:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c926:	07d9      	lsls	r1, r3, #31
 800c928:	d405      	bmi.n	800c936 <_vfiprintf_r+0x202>
 800c92a:	89ab      	ldrh	r3, [r5, #12]
 800c92c:	059a      	lsls	r2, r3, #22
 800c92e:	d402      	bmi.n	800c936 <_vfiprintf_r+0x202>
 800c930:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c932:	f7fe fb79 	bl	800b028 <__retarget_lock_release_recursive>
 800c936:	89ab      	ldrh	r3, [r5, #12]
 800c938:	065b      	lsls	r3, r3, #25
 800c93a:	f53f af1d 	bmi.w	800c778 <_vfiprintf_r+0x44>
 800c93e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c940:	e71c      	b.n	800c77c <_vfiprintf_r+0x48>
 800c942:	ab03      	add	r3, sp, #12
 800c944:	9300      	str	r3, [sp, #0]
 800c946:	462a      	mov	r2, r5
 800c948:	4630      	mov	r0, r6
 800c94a:	4b06      	ldr	r3, [pc, #24]	; (800c964 <_vfiprintf_r+0x230>)
 800c94c:	a904      	add	r1, sp, #16
 800c94e:	f7fe f8b5 	bl	800aabc <_printf_i>
 800c952:	e7e4      	b.n	800c91e <_vfiprintf_r+0x1ea>
 800c954:	0800d7db 	.word	0x0800d7db
 800c958:	0800d7e1 	.word	0x0800d7e1
 800c95c:	0800d7e5 	.word	0x0800d7e5
 800c960:	0800a57d 	.word	0x0800a57d
 800c964:	0800c711 	.word	0x0800c711

0800c968 <__swbuf_r>:
 800c968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c96a:	460e      	mov	r6, r1
 800c96c:	4614      	mov	r4, r2
 800c96e:	4605      	mov	r5, r0
 800c970:	b118      	cbz	r0, 800c97a <__swbuf_r+0x12>
 800c972:	6a03      	ldr	r3, [r0, #32]
 800c974:	b90b      	cbnz	r3, 800c97a <__swbuf_r+0x12>
 800c976:	f7fe fa4f 	bl	800ae18 <__sinit>
 800c97a:	69a3      	ldr	r3, [r4, #24]
 800c97c:	60a3      	str	r3, [r4, #8]
 800c97e:	89a3      	ldrh	r3, [r4, #12]
 800c980:	071a      	lsls	r2, r3, #28
 800c982:	d525      	bpl.n	800c9d0 <__swbuf_r+0x68>
 800c984:	6923      	ldr	r3, [r4, #16]
 800c986:	b31b      	cbz	r3, 800c9d0 <__swbuf_r+0x68>
 800c988:	6823      	ldr	r3, [r4, #0]
 800c98a:	6922      	ldr	r2, [r4, #16]
 800c98c:	b2f6      	uxtb	r6, r6
 800c98e:	1a98      	subs	r0, r3, r2
 800c990:	6963      	ldr	r3, [r4, #20]
 800c992:	4637      	mov	r7, r6
 800c994:	4283      	cmp	r3, r0
 800c996:	dc04      	bgt.n	800c9a2 <__swbuf_r+0x3a>
 800c998:	4621      	mov	r1, r4
 800c99a:	4628      	mov	r0, r5
 800c99c:	f7ff fe02 	bl	800c5a4 <_fflush_r>
 800c9a0:	b9e0      	cbnz	r0, 800c9dc <__swbuf_r+0x74>
 800c9a2:	68a3      	ldr	r3, [r4, #8]
 800c9a4:	3b01      	subs	r3, #1
 800c9a6:	60a3      	str	r3, [r4, #8]
 800c9a8:	6823      	ldr	r3, [r4, #0]
 800c9aa:	1c5a      	adds	r2, r3, #1
 800c9ac:	6022      	str	r2, [r4, #0]
 800c9ae:	701e      	strb	r6, [r3, #0]
 800c9b0:	6962      	ldr	r2, [r4, #20]
 800c9b2:	1c43      	adds	r3, r0, #1
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d004      	beq.n	800c9c2 <__swbuf_r+0x5a>
 800c9b8:	89a3      	ldrh	r3, [r4, #12]
 800c9ba:	07db      	lsls	r3, r3, #31
 800c9bc:	d506      	bpl.n	800c9cc <__swbuf_r+0x64>
 800c9be:	2e0a      	cmp	r6, #10
 800c9c0:	d104      	bne.n	800c9cc <__swbuf_r+0x64>
 800c9c2:	4621      	mov	r1, r4
 800c9c4:	4628      	mov	r0, r5
 800c9c6:	f7ff fded 	bl	800c5a4 <_fflush_r>
 800c9ca:	b938      	cbnz	r0, 800c9dc <__swbuf_r+0x74>
 800c9cc:	4638      	mov	r0, r7
 800c9ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9d0:	4621      	mov	r1, r4
 800c9d2:	4628      	mov	r0, r5
 800c9d4:	f000 f806 	bl	800c9e4 <__swsetup_r>
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	d0d5      	beq.n	800c988 <__swbuf_r+0x20>
 800c9dc:	f04f 37ff 	mov.w	r7, #4294967295
 800c9e0:	e7f4      	b.n	800c9cc <__swbuf_r+0x64>
	...

0800c9e4 <__swsetup_r>:
 800c9e4:	b538      	push	{r3, r4, r5, lr}
 800c9e6:	4b2a      	ldr	r3, [pc, #168]	; (800ca90 <__swsetup_r+0xac>)
 800c9e8:	4605      	mov	r5, r0
 800c9ea:	6818      	ldr	r0, [r3, #0]
 800c9ec:	460c      	mov	r4, r1
 800c9ee:	b118      	cbz	r0, 800c9f8 <__swsetup_r+0x14>
 800c9f0:	6a03      	ldr	r3, [r0, #32]
 800c9f2:	b90b      	cbnz	r3, 800c9f8 <__swsetup_r+0x14>
 800c9f4:	f7fe fa10 	bl	800ae18 <__sinit>
 800c9f8:	89a3      	ldrh	r3, [r4, #12]
 800c9fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9fe:	0718      	lsls	r0, r3, #28
 800ca00:	d422      	bmi.n	800ca48 <__swsetup_r+0x64>
 800ca02:	06d9      	lsls	r1, r3, #27
 800ca04:	d407      	bmi.n	800ca16 <__swsetup_r+0x32>
 800ca06:	2309      	movs	r3, #9
 800ca08:	602b      	str	r3, [r5, #0]
 800ca0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ca12:	81a3      	strh	r3, [r4, #12]
 800ca14:	e034      	b.n	800ca80 <__swsetup_r+0x9c>
 800ca16:	0758      	lsls	r0, r3, #29
 800ca18:	d512      	bpl.n	800ca40 <__swsetup_r+0x5c>
 800ca1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca1c:	b141      	cbz	r1, 800ca30 <__swsetup_r+0x4c>
 800ca1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca22:	4299      	cmp	r1, r3
 800ca24:	d002      	beq.n	800ca2c <__swsetup_r+0x48>
 800ca26:	4628      	mov	r0, r5
 800ca28:	f7ff f97a 	bl	800bd20 <_free_r>
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	6363      	str	r3, [r4, #52]	; 0x34
 800ca30:	89a3      	ldrh	r3, [r4, #12]
 800ca32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca36:	81a3      	strh	r3, [r4, #12]
 800ca38:	2300      	movs	r3, #0
 800ca3a:	6063      	str	r3, [r4, #4]
 800ca3c:	6923      	ldr	r3, [r4, #16]
 800ca3e:	6023      	str	r3, [r4, #0]
 800ca40:	89a3      	ldrh	r3, [r4, #12]
 800ca42:	f043 0308 	orr.w	r3, r3, #8
 800ca46:	81a3      	strh	r3, [r4, #12]
 800ca48:	6923      	ldr	r3, [r4, #16]
 800ca4a:	b94b      	cbnz	r3, 800ca60 <__swsetup_r+0x7c>
 800ca4c:	89a3      	ldrh	r3, [r4, #12]
 800ca4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca56:	d003      	beq.n	800ca60 <__swsetup_r+0x7c>
 800ca58:	4621      	mov	r1, r4
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	f000 f883 	bl	800cb66 <__smakebuf_r>
 800ca60:	89a0      	ldrh	r0, [r4, #12]
 800ca62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca66:	f010 0301 	ands.w	r3, r0, #1
 800ca6a:	d00a      	beq.n	800ca82 <__swsetup_r+0x9e>
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	60a3      	str	r3, [r4, #8]
 800ca70:	6963      	ldr	r3, [r4, #20]
 800ca72:	425b      	negs	r3, r3
 800ca74:	61a3      	str	r3, [r4, #24]
 800ca76:	6923      	ldr	r3, [r4, #16]
 800ca78:	b943      	cbnz	r3, 800ca8c <__swsetup_r+0xa8>
 800ca7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca7e:	d1c4      	bne.n	800ca0a <__swsetup_r+0x26>
 800ca80:	bd38      	pop	{r3, r4, r5, pc}
 800ca82:	0781      	lsls	r1, r0, #30
 800ca84:	bf58      	it	pl
 800ca86:	6963      	ldrpl	r3, [r4, #20]
 800ca88:	60a3      	str	r3, [r4, #8]
 800ca8a:	e7f4      	b.n	800ca76 <__swsetup_r+0x92>
 800ca8c:	2000      	movs	r0, #0
 800ca8e:	e7f7      	b.n	800ca80 <__swsetup_r+0x9c>
 800ca90:	20000238 	.word	0x20000238

0800ca94 <_raise_r>:
 800ca94:	291f      	cmp	r1, #31
 800ca96:	b538      	push	{r3, r4, r5, lr}
 800ca98:	4604      	mov	r4, r0
 800ca9a:	460d      	mov	r5, r1
 800ca9c:	d904      	bls.n	800caa8 <_raise_r+0x14>
 800ca9e:	2316      	movs	r3, #22
 800caa0:	6003      	str	r3, [r0, #0]
 800caa2:	f04f 30ff 	mov.w	r0, #4294967295
 800caa6:	bd38      	pop	{r3, r4, r5, pc}
 800caa8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800caaa:	b112      	cbz	r2, 800cab2 <_raise_r+0x1e>
 800caac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cab0:	b94b      	cbnz	r3, 800cac6 <_raise_r+0x32>
 800cab2:	4620      	mov	r0, r4
 800cab4:	f000 f830 	bl	800cb18 <_getpid_r>
 800cab8:	462a      	mov	r2, r5
 800caba:	4601      	mov	r1, r0
 800cabc:	4620      	mov	r0, r4
 800cabe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cac2:	f000 b817 	b.w	800caf4 <_kill_r>
 800cac6:	2b01      	cmp	r3, #1
 800cac8:	d00a      	beq.n	800cae0 <_raise_r+0x4c>
 800caca:	1c59      	adds	r1, r3, #1
 800cacc:	d103      	bne.n	800cad6 <_raise_r+0x42>
 800cace:	2316      	movs	r3, #22
 800cad0:	6003      	str	r3, [r0, #0]
 800cad2:	2001      	movs	r0, #1
 800cad4:	e7e7      	b.n	800caa6 <_raise_r+0x12>
 800cad6:	2400      	movs	r4, #0
 800cad8:	4628      	mov	r0, r5
 800cada:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cade:	4798      	blx	r3
 800cae0:	2000      	movs	r0, #0
 800cae2:	e7e0      	b.n	800caa6 <_raise_r+0x12>

0800cae4 <raise>:
 800cae4:	4b02      	ldr	r3, [pc, #8]	; (800caf0 <raise+0xc>)
 800cae6:	4601      	mov	r1, r0
 800cae8:	6818      	ldr	r0, [r3, #0]
 800caea:	f7ff bfd3 	b.w	800ca94 <_raise_r>
 800caee:	bf00      	nop
 800caf0:	20000238 	.word	0x20000238

0800caf4 <_kill_r>:
 800caf4:	b538      	push	{r3, r4, r5, lr}
 800caf6:	2300      	movs	r3, #0
 800caf8:	4d06      	ldr	r5, [pc, #24]	; (800cb14 <_kill_r+0x20>)
 800cafa:	4604      	mov	r4, r0
 800cafc:	4608      	mov	r0, r1
 800cafe:	4611      	mov	r1, r2
 800cb00:	602b      	str	r3, [r5, #0]
 800cb02:	f7f5 fdbe 	bl	8002682 <_kill>
 800cb06:	1c43      	adds	r3, r0, #1
 800cb08:	d102      	bne.n	800cb10 <_kill_r+0x1c>
 800cb0a:	682b      	ldr	r3, [r5, #0]
 800cb0c:	b103      	cbz	r3, 800cb10 <_kill_r+0x1c>
 800cb0e:	6023      	str	r3, [r4, #0]
 800cb10:	bd38      	pop	{r3, r4, r5, pc}
 800cb12:	bf00      	nop
 800cb14:	20001898 	.word	0x20001898

0800cb18 <_getpid_r>:
 800cb18:	f7f5 bdac 	b.w	8002674 <_getpid>

0800cb1c <__swhatbuf_r>:
 800cb1c:	b570      	push	{r4, r5, r6, lr}
 800cb1e:	460c      	mov	r4, r1
 800cb20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb24:	4615      	mov	r5, r2
 800cb26:	2900      	cmp	r1, #0
 800cb28:	461e      	mov	r6, r3
 800cb2a:	b096      	sub	sp, #88	; 0x58
 800cb2c:	da0c      	bge.n	800cb48 <__swhatbuf_r+0x2c>
 800cb2e:	89a3      	ldrh	r3, [r4, #12]
 800cb30:	2100      	movs	r1, #0
 800cb32:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cb36:	bf0c      	ite	eq
 800cb38:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cb3c:	2340      	movne	r3, #64	; 0x40
 800cb3e:	2000      	movs	r0, #0
 800cb40:	6031      	str	r1, [r6, #0]
 800cb42:	602b      	str	r3, [r5, #0]
 800cb44:	b016      	add	sp, #88	; 0x58
 800cb46:	bd70      	pop	{r4, r5, r6, pc}
 800cb48:	466a      	mov	r2, sp
 800cb4a:	f000 f849 	bl	800cbe0 <_fstat_r>
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	dbed      	blt.n	800cb2e <__swhatbuf_r+0x12>
 800cb52:	9901      	ldr	r1, [sp, #4]
 800cb54:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cb58:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cb5c:	4259      	negs	r1, r3
 800cb5e:	4159      	adcs	r1, r3
 800cb60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb64:	e7eb      	b.n	800cb3e <__swhatbuf_r+0x22>

0800cb66 <__smakebuf_r>:
 800cb66:	898b      	ldrh	r3, [r1, #12]
 800cb68:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb6a:	079d      	lsls	r5, r3, #30
 800cb6c:	4606      	mov	r6, r0
 800cb6e:	460c      	mov	r4, r1
 800cb70:	d507      	bpl.n	800cb82 <__smakebuf_r+0x1c>
 800cb72:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cb76:	6023      	str	r3, [r4, #0]
 800cb78:	6123      	str	r3, [r4, #16]
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	6163      	str	r3, [r4, #20]
 800cb7e:	b002      	add	sp, #8
 800cb80:	bd70      	pop	{r4, r5, r6, pc}
 800cb82:	466a      	mov	r2, sp
 800cb84:	ab01      	add	r3, sp, #4
 800cb86:	f7ff ffc9 	bl	800cb1c <__swhatbuf_r>
 800cb8a:	9900      	ldr	r1, [sp, #0]
 800cb8c:	4605      	mov	r5, r0
 800cb8e:	4630      	mov	r0, r6
 800cb90:	f7fd fbcc 	bl	800a32c <_malloc_r>
 800cb94:	b948      	cbnz	r0, 800cbaa <__smakebuf_r+0x44>
 800cb96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb9a:	059a      	lsls	r2, r3, #22
 800cb9c:	d4ef      	bmi.n	800cb7e <__smakebuf_r+0x18>
 800cb9e:	f023 0303 	bic.w	r3, r3, #3
 800cba2:	f043 0302 	orr.w	r3, r3, #2
 800cba6:	81a3      	strh	r3, [r4, #12]
 800cba8:	e7e3      	b.n	800cb72 <__smakebuf_r+0xc>
 800cbaa:	89a3      	ldrh	r3, [r4, #12]
 800cbac:	6020      	str	r0, [r4, #0]
 800cbae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbb2:	81a3      	strh	r3, [r4, #12]
 800cbb4:	9b00      	ldr	r3, [sp, #0]
 800cbb6:	6120      	str	r0, [r4, #16]
 800cbb8:	6163      	str	r3, [r4, #20]
 800cbba:	9b01      	ldr	r3, [sp, #4]
 800cbbc:	b15b      	cbz	r3, 800cbd6 <__smakebuf_r+0x70>
 800cbbe:	4630      	mov	r0, r6
 800cbc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbc4:	f000 f81e 	bl	800cc04 <_isatty_r>
 800cbc8:	b128      	cbz	r0, 800cbd6 <__smakebuf_r+0x70>
 800cbca:	89a3      	ldrh	r3, [r4, #12]
 800cbcc:	f023 0303 	bic.w	r3, r3, #3
 800cbd0:	f043 0301 	orr.w	r3, r3, #1
 800cbd4:	81a3      	strh	r3, [r4, #12]
 800cbd6:	89a3      	ldrh	r3, [r4, #12]
 800cbd8:	431d      	orrs	r5, r3
 800cbda:	81a5      	strh	r5, [r4, #12]
 800cbdc:	e7cf      	b.n	800cb7e <__smakebuf_r+0x18>
	...

0800cbe0 <_fstat_r>:
 800cbe0:	b538      	push	{r3, r4, r5, lr}
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	4d06      	ldr	r5, [pc, #24]	; (800cc00 <_fstat_r+0x20>)
 800cbe6:	4604      	mov	r4, r0
 800cbe8:	4608      	mov	r0, r1
 800cbea:	4611      	mov	r1, r2
 800cbec:	602b      	str	r3, [r5, #0]
 800cbee:	f7f5 fda6 	bl	800273e <_fstat>
 800cbf2:	1c43      	adds	r3, r0, #1
 800cbf4:	d102      	bne.n	800cbfc <_fstat_r+0x1c>
 800cbf6:	682b      	ldr	r3, [r5, #0]
 800cbf8:	b103      	cbz	r3, 800cbfc <_fstat_r+0x1c>
 800cbfa:	6023      	str	r3, [r4, #0]
 800cbfc:	bd38      	pop	{r3, r4, r5, pc}
 800cbfe:	bf00      	nop
 800cc00:	20001898 	.word	0x20001898

0800cc04 <_isatty_r>:
 800cc04:	b538      	push	{r3, r4, r5, lr}
 800cc06:	2300      	movs	r3, #0
 800cc08:	4d05      	ldr	r5, [pc, #20]	; (800cc20 <_isatty_r+0x1c>)
 800cc0a:	4604      	mov	r4, r0
 800cc0c:	4608      	mov	r0, r1
 800cc0e:	602b      	str	r3, [r5, #0]
 800cc10:	f7f5 fda4 	bl	800275c <_isatty>
 800cc14:	1c43      	adds	r3, r0, #1
 800cc16:	d102      	bne.n	800cc1e <_isatty_r+0x1a>
 800cc18:	682b      	ldr	r3, [r5, #0]
 800cc1a:	b103      	cbz	r3, 800cc1e <_isatty_r+0x1a>
 800cc1c:	6023      	str	r3, [r4, #0]
 800cc1e:	bd38      	pop	{r3, r4, r5, pc}
 800cc20:	20001898 	.word	0x20001898

0800cc24 <log>:
 800cc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc26:	4604      	mov	r4, r0
 800cc28:	460d      	mov	r5, r1
 800cc2a:	f000 f835 	bl	800cc98 <__ieee754_log>
 800cc2e:	4622      	mov	r2, r4
 800cc30:	4606      	mov	r6, r0
 800cc32:	460f      	mov	r7, r1
 800cc34:	462b      	mov	r3, r5
 800cc36:	4620      	mov	r0, r4
 800cc38:	4629      	mov	r1, r5
 800cc3a:	f7f3 ff23 	bl	8000a84 <__aeabi_dcmpun>
 800cc3e:	b998      	cbnz	r0, 800cc68 <log+0x44>
 800cc40:	2200      	movs	r2, #0
 800cc42:	2300      	movs	r3, #0
 800cc44:	4620      	mov	r0, r4
 800cc46:	4629      	mov	r1, r5
 800cc48:	f7f3 ff12 	bl	8000a70 <__aeabi_dcmpgt>
 800cc4c:	b960      	cbnz	r0, 800cc68 <log+0x44>
 800cc4e:	2200      	movs	r2, #0
 800cc50:	2300      	movs	r3, #0
 800cc52:	4620      	mov	r0, r4
 800cc54:	4629      	mov	r1, r5
 800cc56:	f7f3 fee3 	bl	8000a20 <__aeabi_dcmpeq>
 800cc5a:	b140      	cbz	r0, 800cc6e <log+0x4a>
 800cc5c:	f7fe f9b8 	bl	800afd0 <__errno>
 800cc60:	2322      	movs	r3, #34	; 0x22
 800cc62:	2600      	movs	r6, #0
 800cc64:	4f06      	ldr	r7, [pc, #24]	; (800cc80 <log+0x5c>)
 800cc66:	6003      	str	r3, [r0, #0]
 800cc68:	4630      	mov	r0, r6
 800cc6a:	4639      	mov	r1, r7
 800cc6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc6e:	f7fe f9af 	bl	800afd0 <__errno>
 800cc72:	2321      	movs	r3, #33	; 0x21
 800cc74:	6003      	str	r3, [r0, #0]
 800cc76:	4803      	ldr	r0, [pc, #12]	; (800cc84 <log+0x60>)
 800cc78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cc7c:	f000 b804 	b.w	800cc88 <nan>
 800cc80:	fff00000 	.word	0xfff00000
 800cc84:	0800d6d9 	.word	0x0800d6d9

0800cc88 <nan>:
 800cc88:	2000      	movs	r0, #0
 800cc8a:	4901      	ldr	r1, [pc, #4]	; (800cc90 <nan+0x8>)
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	7ff80000 	.word	0x7ff80000
 800cc94:	00000000 	.word	0x00000000

0800cc98 <__ieee754_log>:
 800cc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc9c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800cca0:	4602      	mov	r2, r0
 800cca2:	460b      	mov	r3, r1
 800cca4:	460d      	mov	r5, r1
 800cca6:	b087      	sub	sp, #28
 800cca8:	da24      	bge.n	800ccf4 <__ieee754_log+0x5c>
 800ccaa:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800ccae:	4304      	orrs	r4, r0
 800ccb0:	d108      	bne.n	800ccc4 <__ieee754_log+0x2c>
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	2000      	movs	r0, #0
 800ccb8:	49cb      	ldr	r1, [pc, #812]	; (800cfe8 <__ieee754_log+0x350>)
 800ccba:	f7f3 fd73 	bl	80007a4 <__aeabi_ddiv>
 800ccbe:	b007      	add	sp, #28
 800ccc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccc4:	2900      	cmp	r1, #0
 800ccc6:	da04      	bge.n	800ccd2 <__ieee754_log+0x3a>
 800ccc8:	f7f3 fa8a 	bl	80001e0 <__aeabi_dsub>
 800cccc:	2200      	movs	r2, #0
 800ccce:	2300      	movs	r3, #0
 800ccd0:	e7f3      	b.n	800ccba <__ieee754_log+0x22>
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	4bc5      	ldr	r3, [pc, #788]	; (800cfec <__ieee754_log+0x354>)
 800ccd6:	f7f3 fc3b 	bl	8000550 <__aeabi_dmul>
 800ccda:	460b      	mov	r3, r1
 800ccdc:	460d      	mov	r5, r1
 800ccde:	4602      	mov	r2, r0
 800cce0:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800cce4:	48c2      	ldr	r0, [pc, #776]	; (800cff0 <__ieee754_log+0x358>)
 800cce6:	4285      	cmp	r5, r0
 800cce8:	dd06      	ble.n	800ccf8 <__ieee754_log+0x60>
 800ccea:	4610      	mov	r0, r2
 800ccec:	4619      	mov	r1, r3
 800ccee:	f7f3 fa79 	bl	80001e4 <__adddf3>
 800ccf2:	e7e4      	b.n	800ccbe <__ieee754_log+0x26>
 800ccf4:	2100      	movs	r1, #0
 800ccf6:	e7f5      	b.n	800cce4 <__ieee754_log+0x4c>
 800ccf8:	152c      	asrs	r4, r5, #20
 800ccfa:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ccfe:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800cd02:	440c      	add	r4, r1
 800cd04:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800cd08:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800cd0c:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
 800cd10:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
 800cd14:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800cd18:	ea41 0305 	orr.w	r3, r1, r5
 800cd1c:	4610      	mov	r0, r2
 800cd1e:	4619      	mov	r1, r3
 800cd20:	2200      	movs	r2, #0
 800cd22:	4bb4      	ldr	r3, [pc, #720]	; (800cff4 <__ieee754_log+0x35c>)
 800cd24:	f7f3 fa5c 	bl	80001e0 <__aeabi_dsub>
 800cd28:	1cab      	adds	r3, r5, #2
 800cd2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd2e:	2b02      	cmp	r3, #2
 800cd30:	4682      	mov	sl, r0
 800cd32:	468b      	mov	fp, r1
 800cd34:	f04f 0200 	mov.w	r2, #0
 800cd38:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800cd3c:	dc53      	bgt.n	800cde6 <__ieee754_log+0x14e>
 800cd3e:	2300      	movs	r3, #0
 800cd40:	f7f3 fe6e 	bl	8000a20 <__aeabi_dcmpeq>
 800cd44:	b1d0      	cbz	r0, 800cd7c <__ieee754_log+0xe4>
 800cd46:	2c00      	cmp	r4, #0
 800cd48:	f000 8122 	beq.w	800cf90 <__ieee754_log+0x2f8>
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	f7f3 fb95 	bl	800047c <__aeabi_i2d>
 800cd52:	a391      	add	r3, pc, #580	; (adr r3, 800cf98 <__ieee754_log+0x300>)
 800cd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd58:	4606      	mov	r6, r0
 800cd5a:	460f      	mov	r7, r1
 800cd5c:	f7f3 fbf8 	bl	8000550 <__aeabi_dmul>
 800cd60:	a38f      	add	r3, pc, #572	; (adr r3, 800cfa0 <__ieee754_log+0x308>)
 800cd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd66:	4604      	mov	r4, r0
 800cd68:	460d      	mov	r5, r1
 800cd6a:	4630      	mov	r0, r6
 800cd6c:	4639      	mov	r1, r7
 800cd6e:	f7f3 fbef 	bl	8000550 <__aeabi_dmul>
 800cd72:	4602      	mov	r2, r0
 800cd74:	460b      	mov	r3, r1
 800cd76:	4620      	mov	r0, r4
 800cd78:	4629      	mov	r1, r5
 800cd7a:	e7b8      	b.n	800ccee <__ieee754_log+0x56>
 800cd7c:	a38a      	add	r3, pc, #552	; (adr r3, 800cfa8 <__ieee754_log+0x310>)
 800cd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd82:	4650      	mov	r0, sl
 800cd84:	4659      	mov	r1, fp
 800cd86:	f7f3 fbe3 	bl	8000550 <__aeabi_dmul>
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	460b      	mov	r3, r1
 800cd8e:	2000      	movs	r0, #0
 800cd90:	4999      	ldr	r1, [pc, #612]	; (800cff8 <__ieee754_log+0x360>)
 800cd92:	f7f3 fa25 	bl	80001e0 <__aeabi_dsub>
 800cd96:	4652      	mov	r2, sl
 800cd98:	4606      	mov	r6, r0
 800cd9a:	460f      	mov	r7, r1
 800cd9c:	465b      	mov	r3, fp
 800cd9e:	4650      	mov	r0, sl
 800cda0:	4659      	mov	r1, fp
 800cda2:	f7f3 fbd5 	bl	8000550 <__aeabi_dmul>
 800cda6:	4602      	mov	r2, r0
 800cda8:	460b      	mov	r3, r1
 800cdaa:	4630      	mov	r0, r6
 800cdac:	4639      	mov	r1, r7
 800cdae:	f7f3 fbcf 	bl	8000550 <__aeabi_dmul>
 800cdb2:	4606      	mov	r6, r0
 800cdb4:	460f      	mov	r7, r1
 800cdb6:	b914      	cbnz	r4, 800cdbe <__ieee754_log+0x126>
 800cdb8:	4632      	mov	r2, r6
 800cdba:	463b      	mov	r3, r7
 800cdbc:	e0a2      	b.n	800cf04 <__ieee754_log+0x26c>
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	f7f3 fb5c 	bl	800047c <__aeabi_i2d>
 800cdc4:	a374      	add	r3, pc, #464	; (adr r3, 800cf98 <__ieee754_log+0x300>)
 800cdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdca:	4680      	mov	r8, r0
 800cdcc:	4689      	mov	r9, r1
 800cdce:	f7f3 fbbf 	bl	8000550 <__aeabi_dmul>
 800cdd2:	a373      	add	r3, pc, #460	; (adr r3, 800cfa0 <__ieee754_log+0x308>)
 800cdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd8:	4604      	mov	r4, r0
 800cdda:	460d      	mov	r5, r1
 800cddc:	4640      	mov	r0, r8
 800cdde:	4649      	mov	r1, r9
 800cde0:	f7f3 fbb6 	bl	8000550 <__aeabi_dmul>
 800cde4:	e0a7      	b.n	800cf36 <__ieee754_log+0x29e>
 800cde6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cdea:	f7f3 f9fb 	bl	80001e4 <__adddf3>
 800cdee:	4602      	mov	r2, r0
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	4650      	mov	r0, sl
 800cdf4:	4659      	mov	r1, fp
 800cdf6:	f7f3 fcd5 	bl	80007a4 <__aeabi_ddiv>
 800cdfa:	e9cd 0100 	strd	r0, r1, [sp]
 800cdfe:	4620      	mov	r0, r4
 800ce00:	f7f3 fb3c 	bl	800047c <__aeabi_i2d>
 800ce04:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce0c:	4610      	mov	r0, r2
 800ce0e:	4619      	mov	r1, r3
 800ce10:	f7f3 fb9e 	bl	8000550 <__aeabi_dmul>
 800ce14:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800ce18:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800ce1c:	4602      	mov	r2, r0
 800ce1e:	9305      	str	r3, [sp, #20]
 800ce20:	460b      	mov	r3, r1
 800ce22:	4606      	mov	r6, r0
 800ce24:	460f      	mov	r7, r1
 800ce26:	f7f3 fb93 	bl	8000550 <__aeabi_dmul>
 800ce2a:	a361      	add	r3, pc, #388	; (adr r3, 800cfb0 <__ieee754_log+0x318>)
 800ce2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce30:	4680      	mov	r8, r0
 800ce32:	4689      	mov	r9, r1
 800ce34:	f7f3 fb8c 	bl	8000550 <__aeabi_dmul>
 800ce38:	a35f      	add	r3, pc, #380	; (adr r3, 800cfb8 <__ieee754_log+0x320>)
 800ce3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce3e:	f7f3 f9d1 	bl	80001e4 <__adddf3>
 800ce42:	4642      	mov	r2, r8
 800ce44:	464b      	mov	r3, r9
 800ce46:	f7f3 fb83 	bl	8000550 <__aeabi_dmul>
 800ce4a:	a35d      	add	r3, pc, #372	; (adr r3, 800cfc0 <__ieee754_log+0x328>)
 800ce4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce50:	f7f3 f9c8 	bl	80001e4 <__adddf3>
 800ce54:	4642      	mov	r2, r8
 800ce56:	464b      	mov	r3, r9
 800ce58:	f7f3 fb7a 	bl	8000550 <__aeabi_dmul>
 800ce5c:	a35a      	add	r3, pc, #360	; (adr r3, 800cfc8 <__ieee754_log+0x330>)
 800ce5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce62:	f7f3 f9bf 	bl	80001e4 <__adddf3>
 800ce66:	4632      	mov	r2, r6
 800ce68:	463b      	mov	r3, r7
 800ce6a:	f7f3 fb71 	bl	8000550 <__aeabi_dmul>
 800ce6e:	a358      	add	r3, pc, #352	; (adr r3, 800cfd0 <__ieee754_log+0x338>)
 800ce70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce74:	4606      	mov	r6, r0
 800ce76:	460f      	mov	r7, r1
 800ce78:	4640      	mov	r0, r8
 800ce7a:	4649      	mov	r1, r9
 800ce7c:	f7f3 fb68 	bl	8000550 <__aeabi_dmul>
 800ce80:	a355      	add	r3, pc, #340	; (adr r3, 800cfd8 <__ieee754_log+0x340>)
 800ce82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce86:	f7f3 f9ad 	bl	80001e4 <__adddf3>
 800ce8a:	4642      	mov	r2, r8
 800ce8c:	464b      	mov	r3, r9
 800ce8e:	f7f3 fb5f 	bl	8000550 <__aeabi_dmul>
 800ce92:	a353      	add	r3, pc, #332	; (adr r3, 800cfe0 <__ieee754_log+0x348>)
 800ce94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce98:	f7f3 f9a4 	bl	80001e4 <__adddf3>
 800ce9c:	4642      	mov	r2, r8
 800ce9e:	464b      	mov	r3, r9
 800cea0:	f7f3 fb56 	bl	8000550 <__aeabi_dmul>
 800cea4:	460b      	mov	r3, r1
 800cea6:	4602      	mov	r2, r0
 800cea8:	4639      	mov	r1, r7
 800ceaa:	4630      	mov	r0, r6
 800ceac:	f7f3 f99a 	bl	80001e4 <__adddf3>
 800ceb0:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800ceb4:	9b05      	ldr	r3, [sp, #20]
 800ceb6:	3551      	adds	r5, #81	; 0x51
 800ceb8:	431d      	orrs	r5, r3
 800ceba:	2d00      	cmp	r5, #0
 800cebc:	4680      	mov	r8, r0
 800cebe:	4689      	mov	r9, r1
 800cec0:	dd48      	ble.n	800cf54 <__ieee754_log+0x2bc>
 800cec2:	2200      	movs	r2, #0
 800cec4:	4b4c      	ldr	r3, [pc, #304]	; (800cff8 <__ieee754_log+0x360>)
 800cec6:	4650      	mov	r0, sl
 800cec8:	4659      	mov	r1, fp
 800ceca:	f7f3 fb41 	bl	8000550 <__aeabi_dmul>
 800cece:	4652      	mov	r2, sl
 800ced0:	465b      	mov	r3, fp
 800ced2:	f7f3 fb3d 	bl	8000550 <__aeabi_dmul>
 800ced6:	4602      	mov	r2, r0
 800ced8:	460b      	mov	r3, r1
 800ceda:	4606      	mov	r6, r0
 800cedc:	460f      	mov	r7, r1
 800cede:	4640      	mov	r0, r8
 800cee0:	4649      	mov	r1, r9
 800cee2:	f7f3 f97f 	bl	80001e4 <__adddf3>
 800cee6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ceea:	f7f3 fb31 	bl	8000550 <__aeabi_dmul>
 800ceee:	4680      	mov	r8, r0
 800cef0:	4689      	mov	r9, r1
 800cef2:	b964      	cbnz	r4, 800cf0e <__ieee754_log+0x276>
 800cef4:	4602      	mov	r2, r0
 800cef6:	460b      	mov	r3, r1
 800cef8:	4630      	mov	r0, r6
 800cefa:	4639      	mov	r1, r7
 800cefc:	f7f3 f970 	bl	80001e0 <__aeabi_dsub>
 800cf00:	4602      	mov	r2, r0
 800cf02:	460b      	mov	r3, r1
 800cf04:	4650      	mov	r0, sl
 800cf06:	4659      	mov	r1, fp
 800cf08:	f7f3 f96a 	bl	80001e0 <__aeabi_dsub>
 800cf0c:	e6d7      	b.n	800ccbe <__ieee754_log+0x26>
 800cf0e:	a322      	add	r3, pc, #136	; (adr r3, 800cf98 <__ieee754_log+0x300>)
 800cf10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf18:	f7f3 fb1a 	bl	8000550 <__aeabi_dmul>
 800cf1c:	a320      	add	r3, pc, #128	; (adr r3, 800cfa0 <__ieee754_log+0x308>)
 800cf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf22:	4604      	mov	r4, r0
 800cf24:	460d      	mov	r5, r1
 800cf26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf2a:	f7f3 fb11 	bl	8000550 <__aeabi_dmul>
 800cf2e:	4642      	mov	r2, r8
 800cf30:	464b      	mov	r3, r9
 800cf32:	f7f3 f957 	bl	80001e4 <__adddf3>
 800cf36:	4602      	mov	r2, r0
 800cf38:	460b      	mov	r3, r1
 800cf3a:	4630      	mov	r0, r6
 800cf3c:	4639      	mov	r1, r7
 800cf3e:	f7f3 f94f 	bl	80001e0 <__aeabi_dsub>
 800cf42:	4652      	mov	r2, sl
 800cf44:	465b      	mov	r3, fp
 800cf46:	f7f3 f94b 	bl	80001e0 <__aeabi_dsub>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	4620      	mov	r0, r4
 800cf50:	4629      	mov	r1, r5
 800cf52:	e7d9      	b.n	800cf08 <__ieee754_log+0x270>
 800cf54:	4602      	mov	r2, r0
 800cf56:	460b      	mov	r3, r1
 800cf58:	4650      	mov	r0, sl
 800cf5a:	4659      	mov	r1, fp
 800cf5c:	f7f3 f940 	bl	80001e0 <__aeabi_dsub>
 800cf60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf64:	f7f3 faf4 	bl	8000550 <__aeabi_dmul>
 800cf68:	4606      	mov	r6, r0
 800cf6a:	460f      	mov	r7, r1
 800cf6c:	2c00      	cmp	r4, #0
 800cf6e:	f43f af23 	beq.w	800cdb8 <__ieee754_log+0x120>
 800cf72:	a309      	add	r3, pc, #36	; (adr r3, 800cf98 <__ieee754_log+0x300>)
 800cf74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf7c:	f7f3 fae8 	bl	8000550 <__aeabi_dmul>
 800cf80:	a307      	add	r3, pc, #28	; (adr r3, 800cfa0 <__ieee754_log+0x308>)
 800cf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf86:	4604      	mov	r4, r0
 800cf88:	460d      	mov	r5, r1
 800cf8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf8e:	e727      	b.n	800cde0 <__ieee754_log+0x148>
 800cf90:	2000      	movs	r0, #0
 800cf92:	2100      	movs	r1, #0
 800cf94:	e693      	b.n	800ccbe <__ieee754_log+0x26>
 800cf96:	bf00      	nop
 800cf98:	fee00000 	.word	0xfee00000
 800cf9c:	3fe62e42 	.word	0x3fe62e42
 800cfa0:	35793c76 	.word	0x35793c76
 800cfa4:	3dea39ef 	.word	0x3dea39ef
 800cfa8:	55555555 	.word	0x55555555
 800cfac:	3fd55555 	.word	0x3fd55555
 800cfb0:	df3e5244 	.word	0xdf3e5244
 800cfb4:	3fc2f112 	.word	0x3fc2f112
 800cfb8:	96cb03de 	.word	0x96cb03de
 800cfbc:	3fc74664 	.word	0x3fc74664
 800cfc0:	94229359 	.word	0x94229359
 800cfc4:	3fd24924 	.word	0x3fd24924
 800cfc8:	55555593 	.word	0x55555593
 800cfcc:	3fe55555 	.word	0x3fe55555
 800cfd0:	d078c69f 	.word	0xd078c69f
 800cfd4:	3fc39a09 	.word	0x3fc39a09
 800cfd8:	1d8e78af 	.word	0x1d8e78af
 800cfdc:	3fcc71c5 	.word	0x3fcc71c5
 800cfe0:	9997fa04 	.word	0x9997fa04
 800cfe4:	3fd99999 	.word	0x3fd99999
 800cfe8:	c3500000 	.word	0xc3500000
 800cfec:	43500000 	.word	0x43500000
 800cff0:	7fefffff 	.word	0x7fefffff
 800cff4:	3ff00000 	.word	0x3ff00000
 800cff8:	3fe00000 	.word	0x3fe00000

0800cffc <_init>:
 800cffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cffe:	bf00      	nop
 800d000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d002:	bc08      	pop	{r3}
 800d004:	469e      	mov	lr, r3
 800d006:	4770      	bx	lr

0800d008 <_fini>:
 800d008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d00a:	bf00      	nop
 800d00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d00e:	bc08      	pop	{r3}
 800d010:	469e      	mov	lr, r3
 800d012:	4770      	bx	lr
