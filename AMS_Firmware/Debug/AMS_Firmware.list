
AMS_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008afc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  08008c88  08008c88  00018c88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800945c  0800945c  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  0800945c  0800945c  0001945c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009464  08009464  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009464  08009464  00019464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009468  08009468  00019468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000238  20000000  0800946c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000800  20000238  080096a4  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a38  080096a4  00020a38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020261  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f35  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003300  00000000  00000000  000331d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  000364e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dca  00000000  00000000  000376e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020db2  00000000  00000000  000384b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015c8d  00000000  00000000  00059264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000beef0  00000000  00000000  0006eef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c94  00000000  00000000  0012dde4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00133a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000238 	.word	0x20000238
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008c6c 	.word	0x08008c6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000023c 	.word	0x2000023c
 80001c4:	08008c6c 	.word	0x08008c6c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b972 	b.w	8000e3c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	460d      	mov	r5, r1
 8000b78:	4604      	mov	r4, r0
 8000b7a:	468e      	mov	lr, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14c      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4694      	mov	ip, r2
 8000b84:	d967      	bls.n	8000c56 <__udivmoddi4+0xe6>
 8000b86:	fab2 f382 	clz	r3, r2
 8000b8a:	b153      	cbz	r3, 8000ba2 <__udivmoddi4+0x32>
 8000b8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b90:	f1c3 0220 	rsb	r2, r3, #32
 8000b94:	fa01 fe03 	lsl.w	lr, r1, r3
 8000b98:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9c:	ea42 0e0e 	orr.w	lr, r2, lr
 8000ba0:	409c      	lsls	r4, r3
 8000ba2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba6:	fbbe f1f7 	udiv	r1, lr, r7
 8000baa:	fa1f f58c 	uxth.w	r5, ip
 8000bae:	fb07 ee11 	mls	lr, r7, r1, lr
 8000bb2:	fb01 f005 	mul.w	r0, r1, r5
 8000bb6:	0c22      	lsrs	r2, r4, #16
 8000bb8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000bbc:	4290      	cmp	r0, r2
 8000bbe:	d90a      	bls.n	8000bd6 <__udivmoddi4+0x66>
 8000bc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc4:	f101 3eff 	add.w	lr, r1, #4294967295
 8000bc8:	f080 8119 	bcs.w	8000dfe <__udivmoddi4+0x28e>
 8000bcc:	4290      	cmp	r0, r2
 8000bce:	f240 8116 	bls.w	8000dfe <__udivmoddi4+0x28e>
 8000bd2:	3902      	subs	r1, #2
 8000bd4:	4462      	add	r2, ip
 8000bd6:	1a12      	subs	r2, r2, r0
 8000bd8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bdc:	fb07 2210 	mls	r2, r7, r0, r2
 8000be0:	fb00 f505 	mul.w	r5, r0, r5
 8000be4:	b2a4      	uxth	r4, r4
 8000be6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bea:	42a5      	cmp	r5, r4
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x94>
 8000bee:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf6:	f080 8104 	bcs.w	8000e02 <__udivmoddi4+0x292>
 8000bfa:	42a5      	cmp	r5, r4
 8000bfc:	f240 8101 	bls.w	8000e02 <__udivmoddi4+0x292>
 8000c00:	4464      	add	r4, ip
 8000c02:	3802      	subs	r0, #2
 8000c04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c08:	2100      	movs	r1, #0
 8000c0a:	1b64      	subs	r4, r4, r5
 8000c0c:	b11e      	cbz	r6, 8000c16 <__udivmoddi4+0xa6>
 8000c0e:	40dc      	lsrs	r4, r3
 8000c10:	2300      	movs	r3, #0
 8000c12:	e9c6 4300 	strd	r4, r3, [r6]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0xc0>
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	f000 80ea 	beq.w	8000df8 <__udivmoddi4+0x288>
 8000c24:	2100      	movs	r1, #0
 8000c26:	e9c6 0500 	strd	r0, r5, [r6]
 8000c2a:	4608      	mov	r0, r1
 8000c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c30:	fab3 f183 	clz	r1, r3
 8000c34:	2900      	cmp	r1, #0
 8000c36:	d148      	bne.n	8000cca <__udivmoddi4+0x15a>
 8000c38:	42ab      	cmp	r3, r5
 8000c3a:	d302      	bcc.n	8000c42 <__udivmoddi4+0xd2>
 8000c3c:	4282      	cmp	r2, r0
 8000c3e:	f200 80f8 	bhi.w	8000e32 <__udivmoddi4+0x2c2>
 8000c42:	1a84      	subs	r4, r0, r2
 8000c44:	eb65 0203 	sbc.w	r2, r5, r3
 8000c48:	2001      	movs	r0, #1
 8000c4a:	4696      	mov	lr, r2
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	d0e2      	beq.n	8000c16 <__udivmoddi4+0xa6>
 8000c50:	e9c6 4e00 	strd	r4, lr, [r6]
 8000c54:	e7df      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c56:	b902      	cbnz	r2, 8000c5a <__udivmoddi4+0xea>
 8000c58:	deff      	udf	#255	; 0xff
 8000c5a:	fab2 f382 	clz	r3, r2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f040 808e 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c64:	1a88      	subs	r0, r1, r2
 8000c66:	2101      	movs	r1, #1
 8000c68:	0c17      	lsrs	r7, r2, #16
 8000c6a:	fa1f fe82 	uxth.w	lr, r2
 8000c6e:	fbb0 f5f7 	udiv	r5, r0, r7
 8000c72:	fb07 0015 	mls	r0, r7, r5, r0
 8000c76:	0c22      	lsrs	r2, r4, #16
 8000c78:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c7c:	fb0e f005 	mul.w	r0, lr, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x126>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c8c:	d202      	bcs.n	8000c94 <__udivmoddi4+0x124>
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	f200 80cc 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c94:	4645      	mov	r5, r8
 8000c96:	1a12      	subs	r2, r2, r0
 8000c98:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c9c:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ca4:	b2a4      	uxth	r4, r4
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x150>
 8000cae:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x14e>
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	f200 80b4 	bhi.w	8000e26 <__udivmoddi4+0x2b6>
 8000cbe:	4610      	mov	r0, r2
 8000cc0:	eba4 040e 	sub.w	r4, r4, lr
 8000cc4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cc8:	e7a0      	b.n	8000c0c <__udivmoddi4+0x9c>
 8000cca:	f1c1 0720 	rsb	r7, r1, #32
 8000cce:	408b      	lsls	r3, r1
 8000cd0:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cd4:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cd8:	fa25 fa07 	lsr.w	sl, r5, r7
 8000cdc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ce0:	fbba f8f9 	udiv	r8, sl, r9
 8000ce4:	408d      	lsls	r5, r1
 8000ce6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cea:	fb09 aa18 	mls	sl, r9, r8, sl
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	432b      	orrs	r3, r5
 8000cf4:	fa00 f501 	lsl.w	r5, r0, r1
 8000cf8:	fb08 f00e 	mul.w	r0, r8, lr
 8000cfc:	0c1c      	lsrs	r4, r3, #16
 8000cfe:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d02:	42a0      	cmp	r0, r4
 8000d04:	fa02 f201 	lsl.w	r2, r2, r1
 8000d08:	d90b      	bls.n	8000d22 <__udivmoddi4+0x1b2>
 8000d0a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d12:	f080 8086 	bcs.w	8000e22 <__udivmoddi4+0x2b2>
 8000d16:	42a0      	cmp	r0, r4
 8000d18:	f240 8083 	bls.w	8000e22 <__udivmoddi4+0x2b2>
 8000d1c:	f1a8 0802 	sub.w	r8, r8, #2
 8000d20:	4464      	add	r4, ip
 8000d22:	1a24      	subs	r4, r4, r0
 8000d24:	b298      	uxth	r0, r3
 8000d26:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d2a:	fb09 4413 	mls	r4, r9, r3, r4
 8000d2e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d32:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x1dc>
 8000d3a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d42:	d26a      	bcs.n	8000e1a <__udivmoddi4+0x2aa>
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d968      	bls.n	8000e1a <__udivmoddi4+0x2aa>
 8000d48:	3b02      	subs	r3, #2
 8000d4a:	4464      	add	r4, ip
 8000d4c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d50:	fba0 9302 	umull	r9, r3, r0, r2
 8000d54:	eba4 040e 	sub.w	r4, r4, lr
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	46c8      	mov	r8, r9
 8000d5c:	469e      	mov	lr, r3
 8000d5e:	d354      	bcc.n	8000e0a <__udivmoddi4+0x29a>
 8000d60:	d051      	beq.n	8000e06 <__udivmoddi4+0x296>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d067      	beq.n	8000e36 <__udivmoddi4+0x2c6>
 8000d66:	ebb5 0308 	subs.w	r3, r5, r8
 8000d6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d6e:	40cb      	lsrs	r3, r1
 8000d70:	fa04 f707 	lsl.w	r7, r4, r7
 8000d74:	431f      	orrs	r7, r3
 8000d76:	40cc      	lsrs	r4, r1
 8000d78:	e9c6 7400 	strd	r7, r4, [r6]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e74a      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0020 	rsb	r0, r3, #32
 8000d88:	40c1      	lsrs	r1, r0
 8000d8a:	409d      	lsls	r5, r3
 8000d8c:	fa24 f000 	lsr.w	r0, r4, r0
 8000d90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d94:	4328      	orrs	r0, r5
 8000d96:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d9a:	fb07 1115 	mls	r1, r7, r5, r1
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	0c02      	lsrs	r2, r0, #16
 8000da4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000da8:	fb05 f10e 	mul.w	r1, r5, lr
 8000dac:	4291      	cmp	r1, r2
 8000dae:	fa04 f403 	lsl.w	r4, r4, r3
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x256>
 8000db4:	eb1c 0202 	adds.w	r2, ip, r2
 8000db8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dbc:	d22f      	bcs.n	8000e1e <__udivmoddi4+0x2ae>
 8000dbe:	4291      	cmp	r1, r2
 8000dc0:	d92d      	bls.n	8000e1e <__udivmoddi4+0x2ae>
 8000dc2:	3d02      	subs	r5, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a52      	subs	r2, r2, r1
 8000dc8:	fbb2 f1f7 	udiv	r1, r2, r7
 8000dcc:	fb07 2211 	mls	r2, r7, r1, r2
 8000dd0:	b280      	uxth	r0, r0
 8000dd2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000dd6:	fb01 f20e 	mul.w	r2, r1, lr
 8000dda:	4282      	cmp	r2, r0
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x280>
 8000dde:	eb1c 0000 	adds.w	r0, ip, r0
 8000de2:	f101 38ff 	add.w	r8, r1, #4294967295
 8000de6:	d216      	bcs.n	8000e16 <__udivmoddi4+0x2a6>
 8000de8:	4282      	cmp	r2, r0
 8000dea:	d914      	bls.n	8000e16 <__udivmoddi4+0x2a6>
 8000dec:	3902      	subs	r1, #2
 8000dee:	4460      	add	r0, ip
 8000df0:	1a80      	subs	r0, r0, r2
 8000df2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000df6:	e73a      	b.n	8000c6e <__udivmoddi4+0xfe>
 8000df8:	4631      	mov	r1, r6
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e70b      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000dfe:	4671      	mov	r1, lr
 8000e00:	e6e9      	b.n	8000bd6 <__udivmoddi4+0x66>
 8000e02:	4610      	mov	r0, r2
 8000e04:	e6fe      	b.n	8000c04 <__udivmoddi4+0x94>
 8000e06:	454d      	cmp	r5, r9
 8000e08:	d2ab      	bcs.n	8000d62 <__udivmoddi4+0x1f2>
 8000e0a:	ebb9 0802 	subs.w	r8, r9, r2
 8000e0e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000e12:	3801      	subs	r0, #1
 8000e14:	e7a5      	b.n	8000d62 <__udivmoddi4+0x1f2>
 8000e16:	4641      	mov	r1, r8
 8000e18:	e7ea      	b.n	8000df0 <__udivmoddi4+0x280>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	e796      	b.n	8000d4c <__udivmoddi4+0x1dc>
 8000e1e:	4645      	mov	r5, r8
 8000e20:	e7d1      	b.n	8000dc6 <__udivmoddi4+0x256>
 8000e22:	46d0      	mov	r8, sl
 8000e24:	e77d      	b.n	8000d22 <__udivmoddi4+0x1b2>
 8000e26:	4464      	add	r4, ip
 8000e28:	3802      	subs	r0, #2
 8000e2a:	e749      	b.n	8000cc0 <__udivmoddi4+0x150>
 8000e2c:	3d02      	subs	r5, #2
 8000e2e:	4462      	add	r2, ip
 8000e30:	e731      	b.n	8000c96 <__udivmoddi4+0x126>
 8000e32:	4608      	mov	r0, r1
 8000e34:	e70a      	b.n	8000c4c <__udivmoddi4+0xdc>
 8000e36:	4631      	mov	r1, r6
 8000e38:	e6ed      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <spi_write_array>:
 * @param len length of the data array
 * @param data pointer to the data array
 */

static inline void spi_write_array(uint8_t len, uint8_t data[])
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi3, data, len, HAL_MAX_DELAY);
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
 8000e54:	6839      	ldr	r1, [r7, #0]
 8000e56:	4803      	ldr	r0, [pc, #12]	; (8000e64 <spi_write_array+0x24>)
 8000e58:	f003 fc1d 	bl	8004696 <HAL_SPI_Transmit>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000340 	.word	0x20000340

08000e68 <spi_write_read>:
 * @param tx_len length of the data array to be transmitted
 * @param rx_data pointer to the data array to be received
 * @param rx_len length of the data array to be received
 */
static inline void spi_write_read(uint8_t tx_Data[], uint8_t tx_len, uint8_t *rx_data, uint8_t rx_len)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	461a      	mov	r2, r3
 8000e74:	460b      	mov	r3, r1
 8000e76:	72fb      	strb	r3, [r7, #11]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	72bb      	strb	r3, [r7, #10]
  HAL_SPI_Transmit(&hspi3, tx_Data, tx_len, HAL_MAX_DELAY);
 8000e7c:	7afb      	ldrb	r3, [r7, #11]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
 8000e84:	68f9      	ldr	r1, [r7, #12]
 8000e86:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <spi_write_read+0x3c>)
 8000e88:	f003 fc05 	bl	8004696 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3, rx_data, rx_len, HAL_MAX_DELAY);
 8000e8c:	7abb      	ldrb	r3, [r7, #10]
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	f04f 33ff 	mov.w	r3, #4294967295
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <spi_write_read+0x3c>)
 8000e98:	f003 fd40 	bl	800491c <HAL_SPI_Receive>

}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000340 	.word	0x20000340

08000ea8 <LTC6811_initialize>:
uint8_t wakeup = 0x00;

/*@brief Initializes all command variables
 */
void LTC6811_initialize()
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af02      	add	r7, sp, #8
  set_adc(MD_NORMAL, DCP_DISABLED, CELL_CH_ALL, AUX_CH_ALL, CHST_SC);
 8000eae:	2301      	movs	r3, #1
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f000 f81f 	bl	8000efc <set_adc>
  //set_selftest(MD_NORMAL, ST_1);
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <wakeup_idle>:

void wakeup_idle()
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ece:	4808      	ldr	r0, [pc, #32]	; (8000ef0 <wakeup_idle+0x2c>)
 8000ed0:	f002 fe04 	bl	8003adc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4906      	ldr	r1, [pc, #24]	; (8000ef4 <wakeup_idle+0x30>)
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <wakeup_idle+0x34>)
 8000edc:	f003 fbdb 	bl	8004696 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee6:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <wakeup_idle+0x2c>)
 8000ee8:	f002 fdf8 	bl	8003adc <HAL_GPIO_WritePin>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	2000025a 	.word	0x2000025a
 8000ef8:	20000340 	.word	0x20000340

08000efc <set_adc>:
			|-----------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|
			|ADCV:	    |   0   |   1   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CH[2] | CH[1] | CH[0] |
			|ADAX:	    |   1   |   0   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CHG[2]| CHG[1]| CHG[0]|
 ******************************************************************************************************************/
void set_adc(uint8_t MD, uint8_t DCP, uint8_t CH, uint8_t CHG, uint8_t CHST)
{
 8000efc:	b490      	push	{r4, r7}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4604      	mov	r4, r0
 8000f04:	4608      	mov	r0, r1
 8000f06:	4611      	mov	r1, r2
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4623      	mov	r3, r4
 8000f0c:	71fb      	strb	r3, [r7, #7]
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71bb      	strb	r3, [r7, #6]
 8000f12:	460b      	mov	r3, r1
 8000f14:	717b      	strb	r3, [r7, #5]
 8000f16:	4613      	mov	r3, r2
 8000f18:	713b      	strb	r3, [r7, #4]
  uint8_t md_bits;

  md_bits = (MD & 0x02) >> 1;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	105b      	asrs	r3, r3, #1
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]
  ADCV[0] = md_bits | 0x02;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <set_adc+0x94>)
 8000f30:	701a      	strb	r2, [r3, #0]
  md_bits = (MD & 0x01) << 7;
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	01db      	lsls	r3, r3, #7
 8000f36:	73fb      	strb	r3, [r7, #15]
  ADCV[1] = md_bits | 0x60 | (DCP << 4) | CH;
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	797b      	ldrb	r3, [r7, #5]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <set_adc+0x94>)
 8000f52:	705a      	strb	r2, [r3, #1]

  md_bits = (MD & 0x02) >> 1;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	105b      	asrs	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
  ADAX[0] = md_bits | 0x04;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <set_adc+0x98>)
 8000f6a:	701a      	strb	r2, [r3, #0]
  md_bits = (MD & 0x01) << 7;
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	01db      	lsls	r3, r3, #7
 8000f70:	73fb      	strb	r3, [r7, #15]
  ADAX[1] = md_bits | 0x60 | CHG;
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	793b      	ldrb	r3, [r7, #4]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <set_adc+0x98>)
 8000f82:	705a      	strb	r2, [r3, #1]
  md_bits = (MD & 0x02) >> 1;
  ADSTAT[0] = md_bits | 0x04;
  md_bits = (MD & 0x01) << 7;
  ADSTAT[1] = md_bits | 0x68 | CHST;
  */
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc90      	pop	{r4, r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000254 	.word	0x20000254
 8000f94:	20000258 	.word	0x20000258

08000f98 <LTC6811_adcv>:
 | CH     | Determines which cell channels are converted |
 | DCP    | Determines if Discharge is Permitted	     |

***********************************************************************************************/
void LTC6811_adcv()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;
	//1
	cmd[0] = ADCV[0];
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <LTC6811_adcv+0x74>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADCV[1];
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <LTC6811_adcv+0x74>)
 8000fa6:	785b      	ldrb	r3, [r3, #1]
 8000fa8:	707b      	strb	r3, [r7, #1]
	//2
	temp_pec = pec15_calc(2, ADCV);
 8000faa:	4918      	ldr	r1, [pc, #96]	; (800100c <LTC6811_adcv+0x74>)
 8000fac:	2002      	movs	r0, #2
 8000fae:	f000 fb0b 	bl	80015c8 <pec15_calc>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	70fb      	strb	r3, [r7, #3]
	//3
	wakeup_idle();
 8000fc6:	f7ff ff7d 	bl	8000ec4 <wakeup_idle>
	//4
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd0:	480f      	ldr	r0, [pc, #60]	; (8001010 <LTC6811_adcv+0x78>)
 8000fd2:	f002 fd83 	bl	8003adc <HAL_GPIO_WritePin>
	spi_write_array(4, cmd);
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	2004      	movs	r0, #4
 8000fdc:	f7ff ff30 	bl	8000e40 <spi_write_array>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fe6:	480a      	ldr	r0, [pc, #40]	; (8001010 <LTC6811_adcv+0x78>)
 8000fe8:	f002 fd78 	bl	8003adc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000fec:	2301      	movs	r3, #1
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4908      	ldr	r1, [pc, #32]	; (8001014 <LTC6811_adcv+0x7c>)
 8000ff2:	4809      	ldr	r0, [pc, #36]	; (8001018 <LTC6811_adcv+0x80>)
 8000ff4:	f003 fb4f 	bl	8004696 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4905      	ldr	r1, [pc, #20]	; (8001014 <LTC6811_adcv+0x7c>)
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <LTC6811_adcv+0x80>)
 8001000:	f003 fb49 	bl	8004696 <HAL_SPI_Transmit>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000254 	.word	0x20000254
 8001010:	40020000 	.word	0x40020000
 8001014:	2000025a 	.word	0x2000025a
 8001018:	20000340 	.word	0x20000340

0800101c <LTC6811_adax>:
 | MD     | Determines the filter corner of the ADC      |
 | CHG    | Determines which GPIO channels are converted |

*********************************************************************************************************/
void LTC6811_adax()
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;

	//1
	cmd[0] = ADAX[0];
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <LTC6811_adax+0x74>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADAX[1];
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <LTC6811_adax+0x74>)
 800102a:	785b      	ldrb	r3, [r3, #1]
 800102c:	707b      	strb	r3, [r7, #1]
	//2
	temp_pec = pec15_calc(2, ADAX);
 800102e:	4918      	ldr	r1, [pc, #96]	; (8001090 <LTC6811_adax+0x74>)
 8001030:	2002      	movs	r0, #2
 8001032:	f000 fac9 	bl	80015c8 <pec15_calc>
 8001036:	4603      	mov	r3, r0
 8001038:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	b29b      	uxth	r3, r3
 8001040:	b2db      	uxtb	r3, r3
 8001042:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	70fb      	strb	r3, [r7, #3]
	//3
	wakeup_idle();
 800104a:	f7ff ff3b 	bl	8000ec4 <wakeup_idle>
	//4
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001054:	480f      	ldr	r0, [pc, #60]	; (8001094 <LTC6811_adax+0x78>)
 8001056:	f002 fd41 	bl	8003adc <HAL_GPIO_WritePin>
	spi_write_array(4, cmd);
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	2004      	movs	r0, #4
 8001060:	f7ff feee 	bl	8000e40 <spi_write_array>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800106a:	480a      	ldr	r0, [pc, #40]	; (8001094 <LTC6811_adax+0x78>)
 800106c:	f002 fd36 	bl	8003adc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8001070:	2301      	movs	r3, #1
 8001072:	2201      	movs	r2, #1
 8001074:	4908      	ldr	r1, [pc, #32]	; (8001098 <LTC6811_adax+0x7c>)
 8001076:	4809      	ldr	r0, [pc, #36]	; (800109c <LTC6811_adax+0x80>)
 8001078:	f003 fb0d 	bl	8004696 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 800107c:	2301      	movs	r3, #1
 800107e:	2201      	movs	r2, #1
 8001080:	4905      	ldr	r1, [pc, #20]	; (8001098 <LTC6811_adax+0x7c>)
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <LTC6811_adax+0x80>)
 8001084:	f003 fb07 	bl	8004696 <HAL_SPI_Transmit>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000258 	.word	0x20000258
 8001094:	40020000 	.word	0x40020000
 8001098:	2000025a 	.word	0x2000025a
 800109c:	20000340 	.word	0x20000340

080010a0 <LTC6811_wrcfg>:


void LTC6811_wrcfg(uint8_t nIC, uint8_t config [][6])

{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 80010ac:	2306      	movs	r3, #6
 80010ae:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * nIC);
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	3304      	adds	r3, #4
 80010b8:	74fb      	strb	r3, [r7, #19]

	uint16_t temp_pec;
	uint8_t current_ic;
	uint8_t WRCFG_index = 4;
 80010ba:	2304      	movs	r3, #4
 80010bc:	75bb      	strb	r3, [r7, #22]
	uint8_t *WRCFG;


	WRCFG = (uint8_t *)malloc(CMD_LEN * sizeof(uint8_t));
 80010be:	7cfb      	ldrb	r3, [r7, #19]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f004 ff29 	bl	8005f18 <malloc>
 80010c6:	4603      	mov	r3, r0
 80010c8:	60fb      	str	r3, [r7, #12]

	for(current_ic = 0; current_ic < nIC; current_ic++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	75fb      	strb	r3, [r7, #23]
 80010ce:	e03f      	b.n	8001150 <LTC6811_wrcfg+0xb0>
	{
		for(uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	757b      	strb	r3, [r7, #21]
 80010d4:	e013      	b.n	80010fe <LTC6811_wrcfg+0x5e>
		{
			WRCFG[WRCFG_index] = config[current_ic][current_byte];
 80010d6:	7dfa      	ldrb	r2, [r7, #23]
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	461a      	mov	r2, r3
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	1899      	adds	r1, r3, r2
 80010e6:	7d7a      	ldrb	r2, [r7, #21]
 80010e8:	7dbb      	ldrb	r3, [r7, #22]
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	4403      	add	r3, r0
 80010ee:	5c8a      	ldrb	r2, [r1, r2]
 80010f0:	701a      	strb	r2, [r3, #0]
			WRCFG_index++;
 80010f2:	7dbb      	ldrb	r3, [r7, #22]
 80010f4:	3301      	adds	r3, #1
 80010f6:	75bb      	strb	r3, [r7, #22]
		for(uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80010f8:	7d7b      	ldrb	r3, [r7, #21]
 80010fa:	3301      	adds	r3, #1
 80010fc:	757b      	strb	r3, [r7, #21]
 80010fe:	7d7a      	ldrb	r2, [r7, #21]
 8001100:	7d3b      	ldrb	r3, [r7, #20]
 8001102:	429a      	cmp	r2, r3
 8001104:	d3e7      	bcc.n	80010d6 <LTC6811_wrcfg+0x36>
		}

		temp_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic][0]);
 8001106:	7dfa      	ldrb	r2, [r7, #23]
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	461a      	mov	r2, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	4413      	add	r3, r2
 8001116:	461a      	mov	r2, r3
 8001118:	7d3b      	ldrb	r3, [r7, #20]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fa53 	bl	80015c8 <pec15_calc>
 8001122:	4603      	mov	r3, r0
 8001124:	817b      	strh	r3, [r7, #10]
		WRCFG[WRCFG_index] = (uint8_t)(temp_pec >> 8);
 8001126:	897b      	ldrh	r3, [r7, #10]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b299      	uxth	r1, r3
 800112c:	7dbb      	ldrb	r3, [r7, #22]
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	b2ca      	uxtb	r2, r1
 8001134:	701a      	strb	r2, [r3, #0]
		WRCFG[WRCFG_index + 1] = (uint8_t)temp_pec;
 8001136:	7dbb      	ldrb	r3, [r7, #22]
 8001138:	3301      	adds	r3, #1
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	4413      	add	r3, r2
 800113e:	897a      	ldrh	r2, [r7, #10]
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	701a      	strb	r2, [r3, #0]
		WRCFG_index += 2;
 8001144:	7dbb      	ldrb	r3, [r7, #22]
 8001146:	3302      	adds	r3, #2
 8001148:	75bb      	strb	r3, [r7, #22]
	for(current_ic = 0; current_ic < nIC; current_ic++)
 800114a:	7dfb      	ldrb	r3, [r7, #23]
 800114c:	3301      	adds	r3, #1
 800114e:	75fb      	strb	r3, [r7, #23]
 8001150:	7dfa      	ldrb	r2, [r7, #23]
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	429a      	cmp	r2, r3
 8001156:	d3bb      	bcc.n	80010d0 <LTC6811_wrcfg+0x30>
	}

	wakeup_idle();
 8001158:	f7ff feb4 	bl	8000ec4 <wakeup_idle>

	for(current_ic = 0; current_ic < nIC; current_ic++)
 800115c:	2300      	movs	r3, #0
 800115e:	75fb      	strb	r3, [r7, #23]
 8001160:	e045      	b.n	80011ee <LTC6811_wrcfg+0x14e>
	{
	    WRCFG[0] = 0x80 + (current_ic << 3); //Setting address
 8001162:	7dfb      	ldrb	r3, [r7, #23]
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	3b80      	subs	r3, #128	; 0x80
 800116a:	b2da      	uxtb	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	701a      	strb	r2, [r3, #0]
	    WRCFG[1] = 0x01;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3301      	adds	r3, #1
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
	    temp_pec = pec15_calc(2, WRCFG);
 8001178:	68f9      	ldr	r1, [r7, #12]
 800117a:	2002      	movs	r0, #2
 800117c:	f000 fa24 	bl	80015c8 <pec15_calc>
 8001180:	4603      	mov	r3, r0
 8001182:	817b      	strh	r3, [r7, #10]
	    WRCFG[2] = (uint8_t)(temp_pec >> 8);
 8001184:	897b      	ldrh	r3, [r7, #10]
 8001186:	0a1b      	lsrs	r3, r3, #8
 8001188:	b29a      	uxth	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	3302      	adds	r3, #2
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	701a      	strb	r2, [r3, #0]
	    WRCFG[3] = (uint8_t)(temp_pec);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3303      	adds	r3, #3
 8001196:	897a      	ldrh	r2, [r7, #10]
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a2:	4817      	ldr	r0, [pc, #92]	; (8001200 <LTC6811_wrcfg+0x160>)
 80011a4:	f002 fc9a 	bl	8003adc <HAL_GPIO_WritePin>
		spi_write_array(4, WRCFG);
 80011a8:	68f9      	ldr	r1, [r7, #12]
 80011aa:	2004      	movs	r0, #4
 80011ac:	f7ff fe48 	bl	8000e40 <spi_write_array>
		spi_write_array(8, &WRCFG[4 + (8 * current_ic)]);
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	3304      	adds	r3, #4
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	2008      	movs	r0, #8
 80011c0:	f7ff fe3e 	bl	8000e40 <spi_write_array>
		HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ca:	480d      	ldr	r0, [pc, #52]	; (8001200 <LTC6811_wrcfg+0x160>)
 80011cc:	f002 fc86 	bl	8003adc <HAL_GPIO_WritePin>


		HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 80011d0:	2301      	movs	r3, #1
 80011d2:	2201      	movs	r2, #1
 80011d4:	490b      	ldr	r1, [pc, #44]	; (8001204 <LTC6811_wrcfg+0x164>)
 80011d6:	480c      	ldr	r0, [pc, #48]	; (8001208 <LTC6811_wrcfg+0x168>)
 80011d8:	f003 fa5d 	bl	8004696 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 80011dc:	2301      	movs	r3, #1
 80011de:	2201      	movs	r2, #1
 80011e0:	4908      	ldr	r1, [pc, #32]	; (8001204 <LTC6811_wrcfg+0x164>)
 80011e2:	4809      	ldr	r0, [pc, #36]	; (8001208 <LTC6811_wrcfg+0x168>)
 80011e4:	f003 fa57 	bl	8004696 <HAL_SPI_Transmit>
	for(current_ic = 0; current_ic < nIC; current_ic++)
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	3301      	adds	r3, #1
 80011ec:	75fb      	strb	r3, [r7, #23]
 80011ee:	7dfa      	ldrb	r2, [r7, #23]
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d3b5      	bcc.n	8001162 <LTC6811_wrcfg+0xc2>

	}
}
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40020000 	.word	0x40020000
 8001204:	2000025a 	.word	0x2000025a
 8001208:	20000340 	.word	0x20000340

0800120c <LTC6811_rdcv>:
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
}
*/

uint8_t LTC6811_rdcv(uint8_t reg, uint8_t nIC, uint16_t cell_codes[][12])
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	603a      	str	r2, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
 8001218:	460b      	mov	r3, r1
 800121a:	71bb      	strb	r3, [r7, #6]
	const uint8_t NUM_RX_BYT = 8;
 800121c:	2308      	movs	r3, #8
 800121e:	76bb      	strb	r3, [r7, #26]
	const uint8_t BYT_IN_REG = 6;
 8001220:	2306      	movs	r3, #6
 8001222:	767b      	strb	r3, [r7, #25]
	const uint8_t CELL_IN_REG = 3;
 8001224:	2303      	movs	r3, #3
 8001226:	763b      	strb	r3, [r7, #24]

	uint8_t pec_error = 0; //pec Error wenn -1
 8001228:	2300      	movs	r3, #0
 800122a:	77fb      	strb	r3, [r7, #31]
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	77bb      	strb	r3, [r7, #30]
	uint8_t *cell_data;
	cell_data = (uint8_t *)malloc((NUM_RX_BYT * nIC) * sizeof(uint8_t));
 8001230:	7ebb      	ldrb	r3, [r7, #26]
 8001232:	79ba      	ldrb	r2, [r7, #6]
 8001234:	fb02 f303 	mul.w	r3, r2, r3
 8001238:	4618      	mov	r0, r3
 800123a:	f004 fe6d 	bl	8005f18 <malloc>
 800123e:	4603      	mov	r3, r0
 8001240:	617b      	str	r3, [r7, #20]

	for(uint8_t cell_reg = 1; cell_reg < 5; cell_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001242:	2301      	movs	r3, #1
 8001244:	777b      	strb	r3, [r7, #29]
 8001246:	e068      	b.n	800131a <LTC6811_rdcv+0x10e>
	{
		data_counter = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	77bb      	strb	r3, [r7, #30]
		LTC6811_rdcv_reg(cell_reg, nIC, cell_data);
 800124c:	79b9      	ldrb	r1, [r7, #6]
 800124e:	7f7b      	ldrb	r3, [r7, #29]
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f86c 	bl	8001330 <LTC6811_rdcv_reg>

		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 8001258:	2300      	movs	r3, #0
 800125a:	773b      	strb	r3, [r7, #28]
 800125c:	e056      	b.n	800130c <LTC6811_rdcv+0x100>
		{
			 // current_ic is used as an IC counter
			for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 800125e:	2300      	movs	r3, #0
 8001260:	76fb      	strb	r3, [r7, #27]
 8001262:	e026      	b.n	80012b2 <LTC6811_rdcv+0xa6>
			{
				uint16_t parsed_cell = cell_data[data_counter] | (cell_data[data_counter + 1] << 8);
 8001264:	7fbb      	ldrb	r3, [r7, #30]
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4413      	add	r3, r2
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b21a      	sxth	r2, r3
 800126e:	7fbb      	ldrb	r3, [r7, #30]
 8001270:	3301      	adds	r3, #1
 8001272:	6979      	ldr	r1, [r7, #20]
 8001274:	440b      	add	r3, r1
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b21b      	sxth	r3, r3
 800127c:	4313      	orrs	r3, r2
 800127e:	b21b      	sxth	r3, r3
 8001280:	81fb      	strh	r3, [r7, #14]
				cell_codes[current_ic][current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8001282:	7f3a      	ldrb	r2, [r7, #28]
 8001284:	4613      	mov	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4413      	add	r3, r2
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	461a      	mov	r2, r3
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	4413      	add	r3, r2
 8001292:	7ef9      	ldrb	r1, [r7, #27]
 8001294:	7f7a      	ldrb	r2, [r7, #29]
 8001296:	3a01      	subs	r2, #1
 8001298:	7e38      	ldrb	r0, [r7, #24]
 800129a:	fb00 f202 	mul.w	r2, r0, r2
 800129e:	440a      	add	r2, r1
 80012a0:	89f9      	ldrh	r1, [r7, #14]
 80012a2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter = data_counter + 2;
 80012a6:	7fbb      	ldrb	r3, [r7, #30]
 80012a8:	3302      	adds	r3, #2
 80012aa:	77bb      	strb	r3, [r7, #30]
			for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 80012ac:	7efb      	ldrb	r3, [r7, #27]
 80012ae:	3301      	adds	r3, #1
 80012b0:	76fb      	strb	r3, [r7, #27]
 80012b2:	7efa      	ldrb	r2, [r7, #27]
 80012b4:	7e3b      	ldrb	r3, [r7, #24]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d3d4      	bcc.n	8001264 <LTC6811_rdcv+0x58>
			}
			received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter + 1];
 80012ba:	7fbb      	ldrb	r3, [r7, #30]
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	4413      	add	r3, r2
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	021b      	lsls	r3, r3, #8
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	7fbb      	ldrb	r3, [r7, #30]
 80012ca:	3301      	adds	r3, #1
 80012cc:	6979      	ldr	r1, [r7, #20]
 80012ce:	440b      	add	r3, r1
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	4413      	add	r3, r2
 80012d6:	827b      	strh	r3, [r7, #18]
			data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 80012d8:	7f3b      	ldrb	r3, [r7, #28]
 80012da:	7eba      	ldrb	r2, [r7, #26]
 80012dc:	fb02 f303 	mul.w	r3, r2, r3
 80012e0:	461a      	mov	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	441a      	add	r2, r3
 80012e6:	7e7b      	ldrb	r3, [r7, #25]
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f96c 	bl	80015c8 <pec15_calc>
 80012f0:	4603      	mov	r3, r0
 80012f2:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 80012f4:	8a7a      	ldrh	r2, [r7, #18]
 80012f6:	8a3b      	ldrh	r3, [r7, #16]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d001      	beq.n	8001300 <LTC6811_rdcv+0xf4>
			{
			  pec_error = -1;
 80012fc:	23ff      	movs	r3, #255	; 0xff
 80012fe:	77fb      	strb	r3, [r7, #31]
			}
			data_counter = data_counter + 2;
 8001300:	7fbb      	ldrb	r3, [r7, #30]
 8001302:	3302      	adds	r3, #2
 8001304:	77bb      	strb	r3, [r7, #30]
		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 8001306:	7f3b      	ldrb	r3, [r7, #28]
 8001308:	3301      	adds	r3, #1
 800130a:	773b      	strb	r3, [r7, #28]
 800130c:	7f3a      	ldrb	r2, [r7, #28]
 800130e:	79bb      	ldrb	r3, [r7, #6]
 8001310:	429a      	cmp	r2, r3
 8001312:	d3a4      	bcc.n	800125e <LTC6811_rdcv+0x52>
	for(uint8_t cell_reg = 1; cell_reg < 5; cell_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001314:	7f7b      	ldrb	r3, [r7, #29]
 8001316:	3301      	adds	r3, #1
 8001318:	777b      	strb	r3, [r7, #29]
 800131a:	7f7b      	ldrb	r3, [r7, #29]
 800131c:	2b04      	cmp	r3, #4
 800131e:	d993      	bls.n	8001248 <LTC6811_rdcv+0x3c>
		}
	}

	free(cell_data);
 8001320:	6978      	ldr	r0, [r7, #20]
 8001322:	f004 fe01 	bl	8005f28 <free>
	return(pec_error);
 8001326:	7ffb      	ldrb	r3, [r7, #31]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3720      	adds	r7, #32
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <LTC6811_rdcv_reg>:

void LTC6811_rdcv_reg(uint8_t reg, uint8_t nIC, uint8_t *data)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	603a      	str	r2, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
 800133c:	460b      	mov	r3, r1
 800133e:	71bb      	strb	r3, [r7, #6]
	uint8_t RDCV[4];
	uint16_t temp_pec;

	switch(reg){
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	3b01      	subs	r3, #1
 8001344:	2b03      	cmp	r3, #3
 8001346:	d817      	bhi.n	8001378 <LTC6811_rdcv_reg+0x48>
 8001348:	a201      	add	r2, pc, #4	; (adr r2, 8001350 <LTC6811_rdcv_reg+0x20>)
 800134a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800134e:	bf00      	nop
 8001350:	08001361 	.word	0x08001361
 8001354:	08001367 	.word	0x08001367
 8001358:	0800136d 	.word	0x0800136d
 800135c:	08001373 	.word	0x08001373
		case 1: RDCV[1] = 0x04; break;
 8001360:	2304      	movs	r3, #4
 8001362:	727b      	strb	r3, [r7, #9]
 8001364:	e008      	b.n	8001378 <LTC6811_rdcv_reg+0x48>
		case 2: RDCV[1] = 0x06; break;
 8001366:	2306      	movs	r3, #6
 8001368:	727b      	strb	r3, [r7, #9]
 800136a:	e005      	b.n	8001378 <LTC6811_rdcv_reg+0x48>
		case 3: RDCV[1] = 0x08; break;
 800136c:	2308      	movs	r3, #8
 800136e:	727b      	strb	r3, [r7, #9]
 8001370:	e002      	b.n	8001378 <LTC6811_rdcv_reg+0x48>
		case 4: RDCV[1] = 0x0a; break;
 8001372:	230a      	movs	r3, #10
 8001374:	727b      	strb	r3, [r7, #9]
 8001376:	bf00      	nop
	}

	wakeup_idle();
 8001378:	f7ff fda4 	bl	8000ec4 <wakeup_idle>

    //Register A-D = reg 1-4
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 800137c:	2300      	movs	r3, #0
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	e02f      	b.n	80013e2 <LTC6811_rdcv_reg+0xb2>
    {
    	RDCV[0] = 0x80 + (current_ic << 3);
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	b2db      	uxtb	r3, r3
 8001388:	3b80      	subs	r3, #128	; 0x80
 800138a:	b2db      	uxtb	r3, r3
 800138c:	723b      	strb	r3, [r7, #8]
        temp_pec = pec15_calc(2, RDCV);
 800138e:	f107 0308 	add.w	r3, r7, #8
 8001392:	4619      	mov	r1, r3
 8001394:	2002      	movs	r0, #2
 8001396:	f000 f917 	bl	80015c8 <pec15_calc>
 800139a:	4603      	mov	r3, r0
 800139c:	81bb      	strh	r3, [r7, #12]
        RDCV[2] = (uint8_t)(temp_pec >> 8);
 800139e:	89bb      	ldrh	r3, [r7, #12]
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	72bb      	strb	r3, [r7, #10]
        RDCV[3] = (uint8_t)(temp_pec);
 80013a8:	89bb      	ldrh	r3, [r7, #12]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80013ae:	2200      	movs	r2, #0
 80013b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b4:	480f      	ldr	r0, [pc, #60]	; (80013f4 <LTC6811_rdcv_reg+0xc4>)
 80013b6:	f002 fb91 	bl	8003adc <HAL_GPIO_WritePin>
        spi_write_read(RDCV, 4, &data[current_ic * 8], 8);
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	461a      	mov	r2, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	441a      	add	r2, r3
 80013c4:	f107 0008 	add.w	r0, r7, #8
 80013c8:	2308      	movs	r3, #8
 80013ca:	2104      	movs	r1, #4
 80013cc:	f7ff fd4c 	bl	8000e68 <spi_write_read>
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80013d0:	2201      	movs	r2, #1
 80013d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013d6:	4807      	ldr	r0, [pc, #28]	; (80013f4 <LTC6811_rdcv_reg+0xc4>)
 80013d8:	f002 fb80 	bl	8003adc <HAL_GPIO_WritePin>
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	3301      	adds	r3, #1
 80013e0:	73fb      	strb	r3, [r7, #15]
 80013e2:	7bfa      	ldrb	r2, [r7, #15]
 80013e4:	79bb      	ldrb	r3, [r7, #6]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d3cb      	bcc.n	8001382 <LTC6811_rdcv_reg+0x52>
    }
}
 80013ea:	bf00      	nop
 80013ec:	bf00      	nop
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40020000 	.word	0x40020000

080013f8 <LTC6811_rdaux>:

int8_t LTC6811_rdaux(uint8_t reg, uint8_t nIC, uint16_t aux_codes[][6])
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	603a      	str	r2, [r7, #0]
 8001402:	71fb      	strb	r3, [r7, #7]
 8001404:	460b      	mov	r3, r1
 8001406:	71bb      	strb	r3, [r7, #6]
	const uint8_t NUM_RX_BYT = 8;
 8001408:	2308      	movs	r3, #8
 800140a:	76bb      	strb	r3, [r7, #26]
	const uint8_t BYT_IN_REG = 6;
 800140c:	2306      	movs	r3, #6
 800140e:	767b      	strb	r3, [r7, #25]
	const uint8_t AUX_IN_REG = 3;
 8001410:	2303      	movs	r3, #3
 8001412:	763b      	strb	r3, [r7, #24]

	uint8_t pec_error = 0; //pec Error wenn -1
 8001414:	2300      	movs	r3, #0
 8001416:	77fb      	strb	r3, [r7, #31]
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	77bb      	strb	r3, [r7, #30]
	uint8_t *aux_data;

	aux_data = (uint8_t *)malloc((NUM_RX_BYT * nIC) * sizeof(uint8_t));
 800141c:	7ebb      	ldrb	r3, [r7, #26]
 800141e:	79ba      	ldrb	r2, [r7, #6]
 8001420:	fb02 f303 	mul.w	r3, r2, r3
 8001424:	4618      	mov	r0, r3
 8001426:	f004 fd77 	bl	8005f18 <malloc>
 800142a:	4603      	mov	r3, r0
 800142c:	617b      	str	r3, [r7, #20]

	for(uint8_t aux_reg = 1; aux_reg < AUX_IN_REG; aux_reg++)	//executes once for each of the LTC6804 cell voltage registers
 800142e:	2301      	movs	r3, #1
 8001430:	777b      	strb	r3, [r7, #29]
 8001432:	e068      	b.n	8001506 <LTC6811_rdaux+0x10e>
	{
		data_counter = 0;
 8001434:	2300      	movs	r3, #0
 8001436:	77bb      	strb	r3, [r7, #30]
		LTC6811_rdaux_reg(aux_reg, nIC, aux_data);
 8001438:	79b9      	ldrb	r1, [r7, #6]
 800143a:	7f7b      	ldrb	r3, [r7, #29]
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f86e 	bl	8001520 <LTC6811_rdaux_reg>

		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 8001444:	2300      	movs	r3, #0
 8001446:	773b      	strb	r3, [r7, #28]
 8001448:	e056      	b.n	80014f8 <LTC6811_rdaux+0x100>
		{
			 // current_ic is used as an IC counter
			for(uint8_t current_cell = 0; current_cell < AUX_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 800144a:	2300      	movs	r3, #0
 800144c:	76fb      	strb	r3, [r7, #27]
 800144e:	e026      	b.n	800149e <LTC6811_rdaux+0xa6>
			{
				uint16_t parsed_cell = aux_data[data_counter] | (aux_data[data_counter + 1] << 8);
 8001450:	7fbb      	ldrb	r3, [r7, #30]
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	4413      	add	r3, r2
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b21a      	sxth	r2, r3
 800145a:	7fbb      	ldrb	r3, [r7, #30]
 800145c:	3301      	adds	r3, #1
 800145e:	6979      	ldr	r1, [r7, #20]
 8001460:	440b      	add	r3, r1
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	b21b      	sxth	r3, r3
 8001468:	4313      	orrs	r3, r2
 800146a:	b21b      	sxth	r3, r3
 800146c:	81fb      	strh	r3, [r7, #14]
				aux_codes[current_ic][current_cell + ((aux_reg - 1) * AUX_IN_REG)] = parsed_cell;
 800146e:	7f3a      	ldrb	r2, [r7, #28]
 8001470:	4613      	mov	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	461a      	mov	r2, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	4413      	add	r3, r2
 800147e:	7ef9      	ldrb	r1, [r7, #27]
 8001480:	7f7a      	ldrb	r2, [r7, #29]
 8001482:	3a01      	subs	r2, #1
 8001484:	7e38      	ldrb	r0, [r7, #24]
 8001486:	fb00 f202 	mul.w	r2, r0, r2
 800148a:	440a      	add	r2, r1
 800148c:	89f9      	ldrh	r1, [r7, #14]
 800148e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter += 2;
 8001492:	7fbb      	ldrb	r3, [r7, #30]
 8001494:	3302      	adds	r3, #2
 8001496:	77bb      	strb	r3, [r7, #30]
			for(uint8_t current_cell = 0; current_cell < AUX_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 8001498:	7efb      	ldrb	r3, [r7, #27]
 800149a:	3301      	adds	r3, #1
 800149c:	76fb      	strb	r3, [r7, #27]
 800149e:	7efa      	ldrb	r2, [r7, #27]
 80014a0:	7e3b      	ldrb	r3, [r7, #24]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d3d4      	bcc.n	8001450 <LTC6811_rdaux+0x58>
			}
			received_pec = (aux_data[data_counter] << 8) + aux_data[data_counter + 1];
 80014a6:	7fbb      	ldrb	r3, [r7, #30]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	4413      	add	r3, r2
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	7fbb      	ldrb	r3, [r7, #30]
 80014b6:	3301      	adds	r3, #1
 80014b8:	6979      	ldr	r1, [r7, #20]
 80014ba:	440b      	add	r3, r1
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	b29b      	uxth	r3, r3
 80014c0:	4413      	add	r3, r2
 80014c2:	827b      	strh	r3, [r7, #18]
			data_pec = pec15_calc(BYT_IN_REG, &aux_data[current_ic * NUM_RX_BYT]);
 80014c4:	7f3b      	ldrb	r3, [r7, #28]
 80014c6:	7eba      	ldrb	r2, [r7, #26]
 80014c8:	fb02 f303 	mul.w	r3, r2, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	441a      	add	r2, r3
 80014d2:	7e7b      	ldrb	r3, [r7, #25]
 80014d4:	4611      	mov	r1, r2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f876 	bl	80015c8 <pec15_calc>
 80014dc:	4603      	mov	r3, r0
 80014de:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 80014e0:	8a7a      	ldrh	r2, [r7, #18]
 80014e2:	8a3b      	ldrh	r3, [r7, #16]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d001      	beq.n	80014ec <LTC6811_rdaux+0xf4>
			{
			  pec_error = -1;
 80014e8:	23ff      	movs	r3, #255	; 0xff
 80014ea:	77fb      	strb	r3, [r7, #31]
			}
			data_counter += 2;
 80014ec:	7fbb      	ldrb	r3, [r7, #30]
 80014ee:	3302      	adds	r3, #2
 80014f0:	77bb      	strb	r3, [r7, #30]
		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 80014f2:	7f3b      	ldrb	r3, [r7, #28]
 80014f4:	3301      	adds	r3, #1
 80014f6:	773b      	strb	r3, [r7, #28]
 80014f8:	7f3a      	ldrb	r2, [r7, #28]
 80014fa:	79bb      	ldrb	r3, [r7, #6]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d3a4      	bcc.n	800144a <LTC6811_rdaux+0x52>
	for(uint8_t aux_reg = 1; aux_reg < AUX_IN_REG; aux_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001500:	7f7b      	ldrb	r3, [r7, #29]
 8001502:	3301      	adds	r3, #1
 8001504:	777b      	strb	r3, [r7, #29]
 8001506:	7f7a      	ldrb	r2, [r7, #29]
 8001508:	7e3b      	ldrb	r3, [r7, #24]
 800150a:	429a      	cmp	r2, r3
 800150c:	d392      	bcc.n	8001434 <LTC6811_rdaux+0x3c>
		}
	}

	free(aux_data);
 800150e:	6978      	ldr	r0, [r7, #20]
 8001510:	f004 fd0a 	bl	8005f28 <free>
	return(pec_error);
 8001514:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3720      	adds	r7, #32
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <LTC6811_rdaux_reg>:

void LTC6811_rdaux_reg(uint8_t reg, uint8_t nIC, uint8_t *data)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	603a      	str	r2, [r7, #0]
 800152a:	71fb      	strb	r3, [r7, #7]
 800152c:	460b      	mov	r3, r1
 800152e:	71bb      	strb	r3, [r7, #6]
	uint8_t RDAUX[4];
	uint16_t temp_pec;

	switch(reg){
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d002      	beq.n	800153c <LTC6811_rdaux_reg+0x1c>
 8001536:	2b02      	cmp	r3, #2
 8001538:	d003      	beq.n	8001542 <LTC6811_rdaux_reg+0x22>
 800153a:	e005      	b.n	8001548 <LTC6811_rdaux_reg+0x28>
		case 1: RDAUX[1] = 0xC; break;
 800153c:	230c      	movs	r3, #12
 800153e:	727b      	strb	r3, [r7, #9]
 8001540:	e002      	b.n	8001548 <LTC6811_rdaux_reg+0x28>
		case 2: RDAUX[1] = 0xE; break;
 8001542:	230e      	movs	r3, #14
 8001544:	727b      	strb	r3, [r7, #9]
 8001546:	bf00      	nop
	}

	wakeup_idle();
 8001548:	f7ff fcbc 	bl	8000ec4 <wakeup_idle>

    //Register A-D = reg 1-4
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e02f      	b.n	80015b2 <LTC6811_rdaux_reg+0x92>
    {
    	RDAUX[0] = 0x80 + (current_ic << 3);
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	3b80      	subs	r3, #128	; 0x80
 800155a:	b2db      	uxtb	r3, r3
 800155c:	723b      	strb	r3, [r7, #8]
        temp_pec = pec15_calc(2, RDAUX);
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	4619      	mov	r1, r3
 8001564:	2002      	movs	r0, #2
 8001566:	f000 f82f 	bl	80015c8 <pec15_calc>
 800156a:	4603      	mov	r3, r0
 800156c:	81bb      	strh	r3, [r7, #12]
        RDAUX[2] = (uint8_t)(temp_pec >> 8);
 800156e:	89bb      	ldrh	r3, [r7, #12]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	b29b      	uxth	r3, r3
 8001574:	b2db      	uxtb	r3, r3
 8001576:	72bb      	strb	r3, [r7, #10]
        RDAUX[3] = (uint8_t)(temp_pec);
 8001578:	89bb      	ldrh	r3, [r7, #12]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001584:	480f      	ldr	r0, [pc, #60]	; (80015c4 <LTC6811_rdaux_reg+0xa4>)
 8001586:	f002 faa9 	bl	8003adc <HAL_GPIO_WritePin>
        spi_write_read(RDAUX, 4, &data[current_ic * 8], 8);
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	461a      	mov	r2, r3
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	441a      	add	r2, r3
 8001594:	f107 0008 	add.w	r0, r7, #8
 8001598:	2308      	movs	r3, #8
 800159a:	2104      	movs	r1, #4
 800159c:	f7ff fc64 	bl	8000e68 <spi_write_read>
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80015a0:	2201      	movs	r2, #1
 80015a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015a6:	4807      	ldr	r0, [pc, #28]	; (80015c4 <LTC6811_rdaux_reg+0xa4>)
 80015a8:	f002 fa98 	bl	8003adc <HAL_GPIO_WritePin>
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 80015ac:	7bfb      	ldrb	r3, [r7, #15]
 80015ae:	3301      	adds	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	79bb      	ldrb	r3, [r7, #6]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d3cb      	bcc.n	8001552 <LTC6811_rdaux_reg+0x32>
    }
}
 80015ba:	bf00      	nop
 80015bc:	bf00      	nop
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40020000 	.word	0x40020000

080015c8 <pec15_calc>:
}
*/

//char *data uint8_t *data , uint8_t len
uint16_t pec15_calc(uint8_t len, uint8_t *data)
 {
 80015c8:	b480      	push	{r7}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
 uint16_t remainder, address;

 remainder = 16;//PEC seed
 80015d4:	2310      	movs	r3, #16
 80015d6:	82fb      	strh	r3, [r7, #22]
 for (int i = 0; i < len; i++)
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	e018      	b.n	8001610 <pec15_calc+0x48>
 {
 address = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 80015de:	8afb      	ldrh	r3, [r7, #22]
 80015e0:	09db      	lsrs	r3, r3, #7
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	6839      	ldr	r1, [r7, #0]
 80015e8:	440b      	add	r3, r1
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	4053      	eors	r3, r2
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	81fb      	strh	r3, [r7, #14]
 remainder = (remainder << 8 ) ^ pec15Table[address];
 80015f6:	8afb      	ldrh	r3, [r7, #22]
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	89fb      	ldrh	r3, [r7, #14]
 80015fe:	490a      	ldr	r1, [pc, #40]	; (8001628 <pec15_calc+0x60>)
 8001600:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001604:	b29b      	uxth	r3, r3
 8001606:	4053      	eors	r3, r2
 8001608:	82fb      	strh	r3, [r7, #22]
 for (int i = 0; i < len; i++)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	3301      	adds	r3, #1
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	429a      	cmp	r2, r3
 8001616:	dbe2      	blt.n	80015de <pec15_calc+0x16>
 }
 return (remainder*2);//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 8001618:	8afb      	ldrh	r3, [r7, #22]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	b29b      	uxth	r3, r3
 }
 800161e:	4618      	mov	r0, r3
 8001620:	371c      	adds	r7, #28
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	08008cdc 	.word	0x08008cdc

0800162c <HAL_TIM_PeriodElapsedCallback>:
/* 1 ms interrupt
 * HLCK 96 MHz
 * APB1 48 MHz
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]


	can_cnt++;
 8001634:	4b17      	ldr	r3, [pc, #92]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	3301      	adds	r3, #1
 800163a:	b2da      	uxtb	r2, r3
 800163c:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800163e:	701a      	strb	r2, [r3, #0]

	if (can_cnt == (last10 + 10))
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	461a      	mov	r2, r3
 8001646:	4b14      	ldr	r3, [pc, #80]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	330a      	adds	r3, #10
 800164c:	429a      	cmp	r2, r3
 800164e:	d105      	bne.n	800165c <HAL_TIM_PeriodElapsedCallback+0x30>
		{
			CAN_100();				//CAN Messages transmitted with 100 Hz
 8001650:	f000 fb4a 	bl	8001ce8 <CAN_100>
			last10 = can_cnt;
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001656:	781a      	ldrb	r2, [r3, #0]
 8001658:	4b0f      	ldr	r3, [pc, #60]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800165a:	701a      	strb	r2, [r3, #0]
		}

	if (can_cnt == 100)
 800165c:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b64      	cmp	r3, #100	; 0x64
 8001662:	d113      	bne.n	800168c <HAL_TIM_PeriodElapsedCallback+0x60>
		{
			CAN_10(AMS2_databytes[8]);				//CAN Messages transmitted with 10 Hz
 8001664:	4b0d      	ldr	r3, [pc, #52]	; (800169c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fb63 	bl	8001d34 <CAN_10>
			can_cnt = 0;
 800166e:	4b09      	ldr	r3, [pc, #36]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
			last10 = 0;
 8001674:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOA, WDI_Pin);		// toggle watchdog
 800167a:	2110      	movs	r1, #16
 800167c:	4808      	ldr	r0, [pc, #32]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800167e:	f002 fa45 	bl	8003b0c <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOC, LED_GN_Pin);	// toggle LED
 8001682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001686:	4807      	ldr	r0, [pc, #28]	; (80016a4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001688:	f002 fa40 	bl	8003b0c <HAL_GPIO_TogglePin>
		}
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200002c0 	.word	0x200002c0
 8001698:	200002c1 	.word	0x200002c1
 800169c:	200002a0 	.word	0x200002a0
 80016a0:	40020000 	.word	0x40020000
 80016a4:	40020800 	.word	0x40020800

080016a8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
   {
 80016a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016aa:	b089      	sub	sp, #36	; 0x24
 80016ac:	af06      	add	r7, sp, #24
 80016ae:	6078      	str	r0, [r7, #4]
    CAN_RX(hcan1);
 80016b0:	4e08      	ldr	r6, [pc, #32]	; (80016d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80016b2:	466d      	mov	r5, sp
 80016b4:	f106 0410 	add.w	r4, r6, #16
 80016b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80016c4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016c8:	f000 fae0 	bl	8001c8c <CAN_RX>
   }
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d4:	200002e8 	.word	0x200002e8

080016d8 <BMS_init>:


void BMS_init()
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	LTC6811_initialize();
 80016dc:	f7ff fbe4 	bl	8000ea8 <LTC6811_initialize>
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <BMS>:

void BMS()		// Battery Management System function for main loop.
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
	uint8_t pec = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	713b      	strb	r3, [r7, #4]
	static uint8_t selTemp = 0;
	uint16_t VOV = MAX_VOLTAGE/16;					// Formeln aus Datenblatt S.65
 80016ee:	f640 1385 	movw	r3, #2437	; 0x985
 80016f2:	807b      	strh	r3, [r7, #2]
	uint16_t VUV = (MIN_VOLTAGE/16)-1;
 80016f4:	f240 7352 	movw	r3, #1874	; 0x752
 80016f8:	803b      	strh	r3, [r7, #0]


	for (uint8_t i = 0; i < NUM_STACK; i++)
 80016fa:	2300      	movs	r3, #0
 80016fc:	71fb      	strb	r3, [r7, #7]
 80016fe:	e0b2      	b.n	8001866 <BMS+0x182>
		cfg[i][5] = 0x00 | (OV_flag[i]>>8);
		*/

		//Balancing without flags

		cfg[i][0] = 0x3C | ((selTemp << 6) & 0xC0);		//cfg : Databytes in config register of the LTC6811
 8001700:	4b7e      	ldr	r3, [pc, #504]	; (80018fc <BMS+0x218>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	019b      	lsls	r3, r3, #6
 8001706:	b25b      	sxtb	r3, r3
 8001708:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 800170c:	b25b      	sxtb	r3, r3
 800170e:	79fa      	ldrb	r2, [r7, #7]
 8001710:	b2d8      	uxtb	r0, r3
 8001712:	497b      	ldr	r1, [pc, #492]	; (8001900 <BMS+0x21c>)
 8001714:	4613      	mov	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4413      	add	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	440b      	add	r3, r1
 800171e:	4602      	mov	r2, r0
 8001720:	701a      	strb	r2, [r3, #0]
		cfg[i][1] = 0x00;
 8001722:	79fa      	ldrb	r2, [r7, #7]
 8001724:	4976      	ldr	r1, [pc, #472]	; (8001900 <BMS+0x21c>)
 8001726:	4613      	mov	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4413      	add	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	440b      	add	r3, r1
 8001730:	3301      	adds	r3, #1
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
		cfg[i][2] = 0x00;
 8001736:	79fa      	ldrb	r2, [r7, #7]
 8001738:	4971      	ldr	r1, [pc, #452]	; (8001900 <BMS+0x21c>)
 800173a:	4613      	mov	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4413      	add	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	440b      	add	r3, r1
 8001744:	3302      	adds	r3, #2
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
		cfg[i][3] = 0x00;
 800174a:	79fa      	ldrb	r2, [r7, #7]
 800174c:	496c      	ldr	r1, [pc, #432]	; (8001900 <BMS+0x21c>)
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	440b      	add	r3, r1
 8001758:	3303      	adds	r3, #3
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
		cfg[i][4] = 0x00;
 800175e:	79fa      	ldrb	r2, [r7, #7]
 8001760:	4967      	ldr	r1, [pc, #412]	; (8001900 <BMS+0x21c>)
 8001762:	4613      	mov	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	440b      	add	r3, r1
 800176c:	3304      	adds	r3, #4
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
		cfg[i][5] = 0x00;
 8001772:	79fa      	ldrb	r2, [r7, #7]
 8001774:	4962      	ldr	r1, [pc, #392]	; (8001900 <BMS+0x21c>)
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	440b      	add	r3, r1
 8001780:	3305      	adds	r3, #5
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]

		if(balancing)
 8001786:	4b5f      	ldr	r3, [pc, #380]	; (8001904 <BMS+0x220>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d068      	beq.n	8001860 <BMS+0x17c>
		{
			if(selTemp < 3)
 800178e:	4b5b      	ldr	r3, [pc, #364]	; (80018fc <BMS+0x218>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d864      	bhi.n	8001860 <BMS+0x17c>
			{
				for(uint8_t j = 0; j < 8; j++)
 8001796:	2300      	movs	r3, #0
 8001798:	71bb      	strb	r3, [r7, #6]
 800179a:	e02b      	b.n	80017f4 <BMS+0x110>
				{
					if(cellVoltages[i * NUM_STACK + j] - MAX_VOLTAGE > balanceMargin)cfg[i][4] |= 1 << j;
 800179c:	79fa      	ldrb	r2, [r7, #7]
 800179e:	79bb      	ldrb	r3, [r7, #6]
 80017a0:	4413      	add	r3, r2
 80017a2:	4a59      	ldr	r2, [pc, #356]	; (8001908 <BMS+0x224>)
 80017a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017a8:	f5a3 4318 	sub.w	r3, r3, #38912	; 0x9800
 80017ac:	3b58      	subs	r3, #88	; 0x58
 80017ae:	4a57      	ldr	r2, [pc, #348]	; (800190c <BMS+0x228>)
 80017b0:	8812      	ldrh	r2, [r2, #0]
 80017b2:	4293      	cmp	r3, r2
 80017b4:	dd1b      	ble.n	80017ee <BMS+0x10a>
 80017b6:	79fa      	ldrb	r2, [r7, #7]
 80017b8:	4951      	ldr	r1, [pc, #324]	; (8001900 <BMS+0x21c>)
 80017ba:	4613      	mov	r3, r2
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	440b      	add	r3, r1
 80017c4:	3304      	adds	r3, #4
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	b25a      	sxtb	r2, r3
 80017ca:	79bb      	ldrb	r3, [r7, #6]
 80017cc:	2101      	movs	r1, #1
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	b25b      	sxtb	r3, r3
 80017d4:	4313      	orrs	r3, r2
 80017d6:	b25b      	sxtb	r3, r3
 80017d8:	79fa      	ldrb	r2, [r7, #7]
 80017da:	b2d8      	uxtb	r0, r3
 80017dc:	4948      	ldr	r1, [pc, #288]	; (8001900 <BMS+0x21c>)
 80017de:	4613      	mov	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4413      	add	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	440b      	add	r3, r1
 80017e8:	3304      	adds	r3, #4
 80017ea:	4602      	mov	r2, r0
 80017ec:	701a      	strb	r2, [r3, #0]
				for(uint8_t j = 0; j < 8; j++)
 80017ee:	79bb      	ldrb	r3, [r7, #6]
 80017f0:	3301      	adds	r3, #1
 80017f2:	71bb      	strb	r3, [r7, #6]
 80017f4:	79bb      	ldrb	r3, [r7, #6]
 80017f6:	2b07      	cmp	r3, #7
 80017f8:	d9d0      	bls.n	800179c <BMS+0xb8>
				}
				for(uint8_t j = 0; j < 3; j++)
 80017fa:	2300      	movs	r3, #0
 80017fc:	717b      	strb	r3, [r7, #5]
 80017fe:	e02c      	b.n	800185a <BMS+0x176>
				{
					if(cellVoltages[i * NUM_STACK + j + 8] - MAX_VOLTAGE > balanceMargin)cfg[i][5] |= 1 << j;
 8001800:	79fa      	ldrb	r2, [r7, #7]
 8001802:	797b      	ldrb	r3, [r7, #5]
 8001804:	4413      	add	r3, r2
 8001806:	3308      	adds	r3, #8
 8001808:	4a3f      	ldr	r2, [pc, #252]	; (8001908 <BMS+0x224>)
 800180a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800180e:	f5a3 4318 	sub.w	r3, r3, #38912	; 0x9800
 8001812:	3b58      	subs	r3, #88	; 0x58
 8001814:	4a3d      	ldr	r2, [pc, #244]	; (800190c <BMS+0x228>)
 8001816:	8812      	ldrh	r2, [r2, #0]
 8001818:	4293      	cmp	r3, r2
 800181a:	dd1b      	ble.n	8001854 <BMS+0x170>
 800181c:	79fa      	ldrb	r2, [r7, #7]
 800181e:	4938      	ldr	r1, [pc, #224]	; (8001900 <BMS+0x21c>)
 8001820:	4613      	mov	r3, r2
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4413      	add	r3, r2
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	440b      	add	r3, r1
 800182a:	3305      	adds	r3, #5
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	b25a      	sxtb	r2, r3
 8001830:	797b      	ldrb	r3, [r7, #5]
 8001832:	2101      	movs	r1, #1
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	b25b      	sxtb	r3, r3
 800183a:	4313      	orrs	r3, r2
 800183c:	b25b      	sxtb	r3, r3
 800183e:	79fa      	ldrb	r2, [r7, #7]
 8001840:	b2d8      	uxtb	r0, r3
 8001842:	492f      	ldr	r1, [pc, #188]	; (8001900 <BMS+0x21c>)
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	440b      	add	r3, r1
 800184e:	3305      	adds	r3, #5
 8001850:	4602      	mov	r2, r0
 8001852:	701a      	strb	r2, [r3, #0]
				for(uint8_t j = 0; j < 3; j++)
 8001854:	797b      	ldrb	r3, [r7, #5]
 8001856:	3301      	adds	r3, #1
 8001858:	717b      	strb	r3, [r7, #5]
 800185a:	797b      	ldrb	r3, [r7, #5]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d9cf      	bls.n	8001800 <BMS+0x11c>
	for (uint8_t i = 0; i < NUM_STACK; i++)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	3301      	adds	r3, #1
 8001864:	71fb      	strb	r3, [r7, #7]
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	2b00      	cmp	r3, #0
 800186a:	f43f af49 	beq.w	8001700 <BMS+0x1c>
	/*
	LTC6811_clrstat();
	HAL_Delay(3);
*/

	LTC6811_wrcfg(NUM_STACK, (uint8_t(*)[6])cfg);		// Write config
 800186e:	4924      	ldr	r1, [pc, #144]	; (8001900 <BMS+0x21c>)
 8001870:	2001      	movs	r0, #1
 8001872:	f7ff fc15 	bl	80010a0 <LTC6811_wrcfg>
	HAL_Delay(3);
 8001876:	2003      	movs	r0, #3
 8001878:	f001 f8e8 	bl	8002a4c <HAL_Delay>

	//wakeup_idle();									// read config
	//LTC6811_rdcfg();
	//HAL_Delay(3);

	LTC6811_adcv();										// measure voltages
 800187c:	f7ff fb8c 	bl	8000f98 <LTC6811_adcv>
	HAL_Delay(3);
 8001880:	2003      	movs	r0, #3
 8001882:	f001 f8e3 	bl	8002a4c <HAL_Delay>

	pec += LTC6811_rdcv(0, NUM_STACK, (uint16_t(*)[12])cellVoltages);	//read voltages
 8001886:	4a20      	ldr	r2, [pc, #128]	; (8001908 <BMS+0x224>)
 8001888:	2101      	movs	r1, #1
 800188a:	2000      	movs	r0, #0
 800188c:	f7ff fcbe 	bl	800120c <LTC6811_rdcv>
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	793b      	ldrb	r3, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	713b      	strb	r3, [r7, #4]
	HAL_Delay(3);
 800189a:	2003      	movs	r0, #3
 800189c:	f001 f8d6 	bl	8002a4c <HAL_Delay>

	LTC6811_adax();										// measure 3 celltemp
 80018a0:	f7ff fbbc 	bl	800101c <LTC6811_adax>
	HAL_Delay(3);
 80018a4:	2003      	movs	r0, #3
 80018a6:	f001 f8d1 	bl	8002a4c <HAL_Delay>

	pec += LTC6811_rdaux(0, NUM_STACK, (uint16_t(*)[6])slaveGPIOs);	// read celltemp
 80018aa:	4a19      	ldr	r2, [pc, #100]	; (8001910 <BMS+0x22c>)
 80018ac:	2101      	movs	r1, #1
 80018ae:	2000      	movs	r0, #0
 80018b0:	f7ff fda2 	bl	80013f8 <LTC6811_rdaux>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	793b      	ldrb	r3, [r7, #4]
 80018ba:	4413      	add	r3, r2
 80018bc:	713b      	strb	r3, [r7, #4]
	HAL_Delay(3);
 80018be:	2003      	movs	r0, #3
 80018c0:	f001 f8c4 	bl	8002a4c <HAL_Delay>
	/*
	pec += LTC6811_rdstatb(NUM_STACK, OV_flag, UV_flag, r_statb);
	HAL_Delay(3);
*/

	convertVoltage();
 80018c4:	f000 f828 	bl	8001918 <convertVoltage>

	convertTemperature(selTemp);
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <BMS+0x218>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 f933 	bl	8001b38 <convertTemperature>

	wakeup_idle();
	LTC6811_rdstat();
*/

	if (selTemp < 3)		// Variable for cycling the multiplexers for temp measurement.
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <BMS+0x218>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d806      	bhi.n	80018e8 <BMS+0x204>
		selTemp++;
 80018da:	4b08      	ldr	r3, [pc, #32]	; (80018fc <BMS+0x218>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	3301      	adds	r3, #1
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <BMS+0x218>)
 80018e4:	701a      	strb	r2, [r3, #0]
 80018e6:	e002      	b.n	80018ee <BMS+0x20a>
	else
		selTemp = 0;
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <BMS+0x218>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]

	HAL_Delay(10);
 80018ee:	200a      	movs	r0, #10
 80018f0:	f001 f8ac 	bl	8002a4c <HAL_Delay>

}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	200002c2 	.word	0x200002c2
 8001900:	20000274 	.word	0x20000274
 8001904:	20000000 	.word	0x20000000
 8001908:	2000025c 	.word	0x2000025c
 800190c:	20000002 	.word	0x20000002
 8001910:	2000027c 	.word	0x2000027c
 8001914:	00000000 	.word	0x00000000

08001918 <convertVoltage>:

void convertVoltage()		//convert and sort Voltages
{
 8001918:	b590      	push	{r4, r7, lr}
 800191a:	b09d      	sub	sp, #116	; 0x74
 800191c:	af02      	add	r7, sp, #8
	double voltage[NUM_CELLS];
	uint16_t cell_max = cellVoltages[0];
 800191e:	4b54      	ldr	r3, [pc, #336]	; (8001a70 <convertVoltage+0x158>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	uint16_t cell_min = cellVoltages[0];
 8001926:	4b52      	ldr	r3, [pc, #328]	; (8001a70 <convertVoltage+0x158>)
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

	for(uint8_t k = 0; k < NUM_STACK; k++)
 800192e:	2300      	movs	r3, #0
 8001930:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8001934:	e08e      	b.n	8001a54 <convertVoltage+0x13c>
	{

		for(uint8_t i = 0; i < 12; i++)
 8001936:	2300      	movs	r3, #0
 8001938:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 800193c:	e080      	b.n	8001a40 <convertVoltage+0x128>
		{
			if(cellVoltages[i + k * 12] > cell_max) cell_max = cellVoltages[i + k * 12];
 800193e:	f897 1062 	ldrb.w	r1, [r7, #98]	; 0x62
 8001942:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8001946:	4613      	mov	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	4a47      	ldr	r2, [pc, #284]	; (8001a70 <convertVoltage+0x158>)
 8001952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001956:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800195a:	429a      	cmp	r2, r3
 800195c:	d20e      	bcs.n	800197c <convertVoltage+0x64>
 800195e:	f897 1062 	ldrb.w	r1, [r7, #98]	; 0x62
 8001962:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8001966:	4613      	mov	r3, r2
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	4a3f      	ldr	r2, [pc, #252]	; (8001a70 <convertVoltage+0x158>)
 8001972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001976:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800197a:	e01d      	b.n	80019b8 <convertVoltage+0xa0>
			else if(cellVoltages[i + k * 12] < cell_min) cell_min = cellVoltages[i + k * 12];
 800197c:	f897 1062 	ldrb.w	r1, [r7, #98]	; 0x62
 8001980:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8001984:	4613      	mov	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	4a38      	ldr	r2, [pc, #224]	; (8001a70 <convertVoltage+0x158>)
 8001990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001994:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8001998:	429a      	cmp	r2, r3
 800199a:	d90d      	bls.n	80019b8 <convertVoltage+0xa0>
 800199c:	f897 1062 	ldrb.w	r1, [r7, #98]	; 0x62
 80019a0:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 80019a4:	4613      	mov	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	4a30      	ldr	r2, [pc, #192]	; (8001a70 <convertVoltage+0x158>)
 80019b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

			voltage[i + k * 12] = (double)cellVoltages[i + k * 12]/10000;
 80019b8:	f897 1062 	ldrb.w	r1, [r7, #98]	; 0x62
 80019bc:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 80019c0:	4613      	mov	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	4413      	add	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	440b      	add	r3, r1
 80019ca:	4a29      	ldr	r2, [pc, #164]	; (8001a70 <convertVoltage+0x158>)
 80019cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fd43 	bl	800045c <__aeabi_ui2d>
 80019d6:	f897 4062 	ldrb.w	r4, [r7, #98]	; 0x62
 80019da:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 80019de:	4613      	mov	r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	4413      	add	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	441c      	add	r4, r3
 80019e8:	a31f      	add	r3, pc, #124	; (adr r3, 8001a68 <convertVoltage+0x150>)
 80019ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ee:	f7fe fed9 	bl	80007a4 <__aeabi_ddiv>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	00e1      	lsls	r1, r4, #3
 80019f8:	3168      	adds	r1, #104	; 0x68
 80019fa:	4439      	add	r1, r7
 80019fc:	3968      	subs	r1, #104	; 0x68
 80019fe:	e9c1 2300 	strd	r2, r3, [r1]
			printf(" Stack %d Cell %d = %.4f V \r\n", k, i, voltage[i + k * 12]);
 8001a02:	f897 0063 	ldrb.w	r0, [r7, #99]	; 0x63
 8001a06:	f897 4062 	ldrb.w	r4, [r7, #98]	; 0x62
 8001a0a:	f897 1062 	ldrb.w	r1, [r7, #98]	; 0x62
 8001a0e:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	00db      	lsls	r3, r3, #3
 8001a1e:	3368      	adds	r3, #104	; 0x68
 8001a20:	443b      	add	r3, r7
 8001a22:	3b68      	subs	r3, #104	; 0x68
 8001a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a28:	e9cd 2300 	strd	r2, r3, [sp]
 8001a2c:	4622      	mov	r2, r4
 8001a2e:	4601      	mov	r1, r0
 8001a30:	4810      	ldr	r0, [pc, #64]	; (8001a74 <convertVoltage+0x15c>)
 8001a32:	f005 f84d 	bl	8006ad0 <iprintf>
		for(uint8_t i = 0; i < 12; i++)
 8001a36:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 8001a40:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001a44:	2b0b      	cmp	r3, #11
 8001a46:	f67f af7a 	bls.w	800193e <convertVoltage+0x26>
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001a4a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001a4e:	3301      	adds	r3, #1
 8001a50:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8001a54:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f43f af6c 	beq.w	8001936 <convertVoltage+0x1e>
		}
	}

}
 8001a5e:	bf00      	nop
 8001a60:	bf00      	nop
 8001a62:	376c      	adds	r7, #108	; 0x6c
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd90      	pop	{r4, r7, pc}
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	40c38800 	.word	0x40c38800
 8001a70:	2000025c 	.word	0x2000025c
 8001a74:	08008c88 	.word	0x08008c88

08001a78 <calculateTemperature>:
	return(1/((1/298.15)-(log(10000/convert_R)/3435)) - 273.15);

}
*/
uint16_t calculateTemperature(uint16_t voltageCode, uint16_t referenceCode)		//convert temp
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	460a      	mov	r2, r1
 8001a82:	80fb      	strh	r3, [r7, #6]
 8001a84:	4613      	mov	r3, r2
 8001a86:	80bb      	strh	r3, [r7, #4]
	uint32_t convert_R = (voltageCode * 100000)/(referenceCode - voltageCode);
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	4a29      	ldr	r2, [pc, #164]	; (8001b30 <calculateTemperature+0xb8>)
 8001a8c:	fb03 f202 	mul.w	r2, r3, r2
 8001a90:	88b9      	ldrh	r1, [r7, #4]
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	1acb      	subs	r3, r1, r3
 8001a96:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a9a:	60fb      	str	r3, [r7, #12]
	return 1.0 / ((1.0 / 298.15) - (log(10000.0 / convert_R) / 3435.0)) - 273.15;
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f7fe fcdd 	bl	800045c <__aeabi_ui2d>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	a11a      	add	r1, pc, #104	; (adr r1, 8001b10 <calculateTemperature+0x98>)
 8001aa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001aac:	f7fe fe7a 	bl	80007a4 <__aeabi_ddiv>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f006 feee 	bl	8008898 <log>
 8001abc:	a316      	add	r3, pc, #88	; (adr r3, 8001b18 <calculateTemperature+0xa0>)
 8001abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac2:	f7fe fe6f 	bl	80007a4 <__aeabi_ddiv>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	a115      	add	r1, pc, #84	; (adr r1, 8001b20 <calculateTemperature+0xa8>)
 8001acc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ad0:	f7fe fb86 	bl	80001e0 <__aeabi_dsub>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	f04f 0000 	mov.w	r0, #0
 8001adc:	4915      	ldr	r1, [pc, #84]	; (8001b34 <calculateTemperature+0xbc>)
 8001ade:	f7fe fe61 	bl	80007a4 <__aeabi_ddiv>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	a30f      	add	r3, pc, #60	; (adr r3, 8001b28 <calculateTemperature+0xb0>)
 8001aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af0:	f7fe fb76 	bl	80001e0 <__aeabi_dsub>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f7ff f800 	bl	8000b00 <__aeabi_d2uiz>
 8001b00:	4603      	mov	r3, r0
 8001b02:	b29b      	uxth	r3, r3

}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	f3af 8000 	nop.w
 8001b10:	00000000 	.word	0x00000000
 8001b14:	40c38800 	.word	0x40c38800
 8001b18:	00000000 	.word	0x00000000
 8001b1c:	40aad600 	.word	0x40aad600
 8001b20:	dcb5db83 	.word	0xdcb5db83
 8001b24:	3f6b79e1 	.word	0x3f6b79e1
 8001b28:	66666666 	.word	0x66666666
 8001b2c:	40711266 	.word	0x40711266
 8001b30:	000186a0 	.word	0x000186a0
 8001b34:	3ff00000 	.word	0x3ff00000

08001b38 <convertTemperature>:

void convertTemperature(uint8_t selTemp)		// sort temp
{
 8001b38:	b5b0      	push	{r4, r5, r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
*/

	//min und max Werte noch finden


	uint8_t indexOffset[12] = {9, 4, 11, 7, 6, 1, 0, 3, 10, 2, 5, 8};
 8001b42:	4a34      	ldr	r2, [pc, #208]	; (8001c14 <convertTemperature+0xdc>)
 8001b44:	f107 0308 	add.w	r3, r7, #8
 8001b48:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b4a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	75fb      	strb	r3, [r7, #23]
 8001b52:	e037      	b.n	8001bc4 <convertTemperature+0x8c>
	{
			for(uint8_t j = 0; j < 3; j++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	75bb      	strb	r3, [r7, #22]
 8001b58:	e02e      	b.n	8001bb8 <convertTemperature+0x80>
			{
				temperature[k * NUM_CELLS_STACK + indexOffset[j + selTemp * 3]] = calculateTemperature(slaveGPIOs[j + k * 6], slaveGPIOs[5 + k * NUM_GPIO_STACK]);
 8001b5a:	7db9      	ldrb	r1, [r7, #22]
 8001b5c:	7dfa      	ldrb	r2, [r7, #23]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	440b      	add	r3, r1
 8001b68:	4a2b      	ldr	r2, [pc, #172]	; (8001c18 <convertTemperature+0xe0>)
 8001b6a:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8001b6e:	7dfa      	ldrb	r2, [r7, #23]
 8001b70:	4613      	mov	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	3305      	adds	r3, #5
 8001b7a:	4a27      	ldr	r2, [pc, #156]	; (8001c18 <convertTemperature+0xe0>)
 8001b7c:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8001b80:	7dfa      	ldrb	r2, [r7, #23]
 8001b82:	4613      	mov	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	461c      	mov	r4, r3
 8001b8c:	7db9      	ldrb	r1, [r7, #22]
 8001b8e:	79fa      	ldrb	r2, [r7, #7]
 8001b90:	4613      	mov	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	4413      	add	r3, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	3318      	adds	r3, #24
 8001b9a:	443b      	add	r3, r7
 8001b9c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001ba0:	441c      	add	r4, r3
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	f7ff ff68 	bl	8001a78 <calculateTemperature>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461a      	mov	r2, r3
 8001bac:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <convertTemperature+0xe4>)
 8001bae:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			for(uint8_t j = 0; j < 3; j++)
 8001bb2:	7dbb      	ldrb	r3, [r7, #22]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	75bb      	strb	r3, [r7, #22]
 8001bb8:	7dbb      	ldrb	r3, [r7, #22]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d9cd      	bls.n	8001b5a <convertTemperature+0x22>
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001bbe:	7dfb      	ldrb	r3, [r7, #23]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	75fb      	strb	r3, [r7, #23]
 8001bc4:	7dfb      	ldrb	r3, [r7, #23]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0c4      	beq.n	8001b54 <convertTemperature+0x1c>
			}
	}

	if(selTemp == 3)
 8001bca:	79fb      	ldrb	r3, [r7, #7]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d11d      	bne.n	8001c0c <convertTemperature+0xd4>
	{
		for(uint8_t k = 0; k < NUM_STACK; k++)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	757b      	strb	r3, [r7, #21]
 8001bd4:	e017      	b.n	8001c06 <convertTemperature+0xce>
		{
			for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	753b      	strb	r3, [r7, #20]
 8001bda:	e00e      	b.n	8001bfa <convertTemperature+0xc2>
			{
				printf(" Stack %d Temperature %d = %d degC \r\n", k, i, temperature[k * NUM_STACK + i]);
 8001bdc:	7d79      	ldrb	r1, [r7, #21]
 8001bde:	7d38      	ldrb	r0, [r7, #20]
 8001be0:	7d7a      	ldrb	r2, [r7, #21]
 8001be2:	7d3b      	ldrb	r3, [r7, #20]
 8001be4:	4413      	add	r3, r2
 8001be6:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <convertTemperature+0xe4>)
 8001be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bec:	4602      	mov	r2, r0
 8001bee:	480c      	ldr	r0, [pc, #48]	; (8001c20 <convertTemperature+0xe8>)
 8001bf0:	f004 ff6e 	bl	8006ad0 <iprintf>
			for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001bf4:	7d3b      	ldrb	r3, [r7, #20]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	753b      	strb	r3, [r7, #20]
 8001bfa:	7d3b      	ldrb	r3, [r7, #20]
 8001bfc:	2b0b      	cmp	r3, #11
 8001bfe:	d9ed      	bls.n	8001bdc <convertTemperature+0xa4>
		for(uint8_t k = 0; k < NUM_STACK; k++)
 8001c00:	7d7b      	ldrb	r3, [r7, #21]
 8001c02:	3301      	adds	r3, #1
 8001c04:	757b      	strb	r3, [r7, #21]
 8001c06:	7d7b      	ldrb	r3, [r7, #21]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0e4      	beq.n	8001bd6 <convertTemperature+0x9e>
				printf(" Stack %d Temperature %d = %.4f degC \r\n", k, 8, calc_temp[k][11]);
		}
	}
	*/

}
 8001c0c:	bf00      	nop
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bdb0      	pop	{r4, r5, r7, pc}
 8001c14:	08008cd0 	.word	0x08008cd0
 8001c18:	2000027c 	.word	0x2000027c
 8001c1c:	20000288 	.word	0x20000288
 8001c20:	08008ca8 	.word	0x08008ca8

08001c24 <CAN_TX>:

uint32_t RxFifo;

	// transmit CAN Message
void CAN_TX(CAN_HandleTypeDef hcan, CAN_TxHeaderTypeDef TxHeader, uint8_t* TxData)
{
 8001c24:	b084      	sub	sp, #16
 8001c26:	b5b0      	push	{r4, r5, r7, lr}
 8001c28:	b090      	sub	sp, #64	; 0x40
 8001c2a:	af0e      	add	r7, sp, #56	; 0x38
 8001c2c:	f107 0418 	add.w	r4, r7, #24
 8001c30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t TxMailbox;
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001c3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c3c:	f107 0018 	add.w	r0, r7, #24
 8001c40:	f001 f867 	bl	8002d12 <HAL_CAN_AddTxMessage>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d018      	beq.n	8001c7c <CAN_TX+0x58>
	{
		CAN_TX(hcan, TxHeader, TxData);		//retry when failed
 8001c4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c4c:	930c      	str	r3, [sp, #48]	; 0x30
 8001c4e:	ad06      	add	r5, sp, #24
 8001c50:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001c54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c60:	466d      	mov	r5, sp
 8001c62:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001c66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c72:	f107 0318 	add.w	r3, r7, #24
 8001c76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c78:	f7ff ffd4 	bl	8001c24 <CAN_TX>
	}
}
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001c86:	b004      	add	sp, #16
 8001c88:	4770      	bx	lr
	...

08001c8c <CAN_RX>:

	// receive CAN Message
void CAN_RX(CAN_HandleTypeDef hcan)
{
 8001c8c:	b084      	sub	sp, #16
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b08a      	sub	sp, #40	; 0x28
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8001c98:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];


	if (HAL_CAN_GetRxMessage(&hcan, RxFifo, &RxHeader, RxData) != HAL_OK)
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <CAN_RX+0x50>)
 8001c9e:	6819      	ldr	r1, [r3, #0]
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	f107 020c 	add.w	r2, r7, #12
 8001ca6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001caa:	f001 f901 	bl	8002eb0 <HAL_CAN_GetRxMessage>
	{

	}

	if( RxHeader.StdId == 0x500)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001cb4:	d10b      	bne.n	8001cce <CAN_RX+0x42>
	{

		DIC0_databytes[8] = RxData[8];
 8001cb6:	7b3a      	ldrb	r2, [r7, #12]
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <CAN_RX+0x54>)
 8001cba:	721a      	strb	r2, [r3, #8]

		AIR_Logic(DIC0_databytes[0], AMS3_databytes[0], DIC0_databytes[1]);
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <CAN_RX+0x54>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4a08      	ldr	r2, [pc, #32]	; (8001ce4 <CAN_RX+0x58>)
 8001cc2:	7811      	ldrb	r1, [r2, #0]
 8001cc4:	4a06      	ldr	r2, [pc, #24]	; (8001ce0 <CAN_RX+0x54>)
 8001cc6:	7852      	ldrb	r2, [r2, #1]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 f9db 	bl	8002084 <AIR_Logic>

	}

	// hier kann man weitere Nachrichten zum Empfangen hinzufügen

}
 8001cce:	bf00      	nop
 8001cd0:	3728      	adds	r7, #40	; 0x28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cd8:	b004      	add	sp, #16
 8001cda:	4770      	bx	lr
 8001cdc:	200002e4 	.word	0x200002e4
 8001ce0:	200002dc 	.word	0x200002dc
 8001ce4:	200002cc 	.word	0x200002cc

08001ce8 <CAN_100>:




void CAN_100()		// CAN Messages transmitted with 100 Hz
{
 8001ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cea:	b08f      	sub	sp, #60	; 0x3c
 8001cec:	af0e      	add	r7, sp, #56	; 0x38

	CAN_TX(hcan1, AMS0_header, AMS0_databytes);
 8001cee:	4e0e      	ldr	r6, [pc, #56]	; (8001d28 <CAN_100+0x40>)
 8001cf0:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <CAN_100+0x44>)
 8001cf2:	930c      	str	r3, [sp, #48]	; 0x30
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <CAN_100+0x48>)
 8001cf6:	ac06      	add	r4, sp, #24
 8001cf8:	461d      	mov	r5, r3
 8001cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cfe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d02:	e884 0003 	stmia.w	r4, {r0, r1}
 8001d06:	466d      	mov	r5, sp
 8001d08:	f106 0410 	add.w	r4, r6, #16
 8001d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d14:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d18:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001d1c:	f7ff ff82 	bl	8001c24 <CAN_TX>
}
 8001d20:	bf00      	nop
 8001d22:	3704      	adds	r7, #4
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d28:	200002e8 	.word	0x200002e8
 8001d2c:	200002c4 	.word	0x200002c4
 8001d30:	20000004 	.word	0x20000004

08001d34 <CAN_10>:

void CAN_10(uint8_t bms_data[])		// CAN Messages transmitted with 10 Hz
{
 8001d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d36:	b091      	sub	sp, #68	; 0x44
 8001d38:	af0e      	add	r7, sp, #56	; 0x38
 8001d3a:	6078      	str	r0, [r7, #4]
	CAN_TX(hcan1, AMS1_header, AMS1_databytes);
 8001d3c:	4e27      	ldr	r6, [pc, #156]	; (8001ddc <CAN_10+0xa8>)
 8001d3e:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <CAN_10+0xac>)
 8001d40:	930c      	str	r3, [sp, #48]	; 0x30
 8001d42:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <CAN_10+0xb0>)
 8001d44:	ac06      	add	r4, sp, #24
 8001d46:	461d      	mov	r5, r3
 8001d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d4c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d50:	e884 0003 	stmia.w	r4, {r0, r1}
 8001d54:	466d      	mov	r5, sp
 8001d56:	f106 0410 	add.w	r4, r6, #16
 8001d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d62:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d66:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001d6a:	f7ff ff5b 	bl	8001c24 <CAN_TX>
	CAN_TX(hcan1, AMS2_header, bms_data);
 8001d6e:	4e1b      	ldr	r6, [pc, #108]	; (8001ddc <CAN_10+0xa8>)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	930c      	str	r3, [sp, #48]	; 0x30
 8001d74:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <CAN_10+0xb4>)
 8001d76:	ac06      	add	r4, sp, #24
 8001d78:	461d      	mov	r5, r3
 8001d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d7e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d82:	e884 0003 	stmia.w	r4, {r0, r1}
 8001d86:	466d      	mov	r5, sp
 8001d88:	f106 0410 	add.w	r4, r6, #16
 8001d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d94:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d98:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001d9c:	f7ff ff42 	bl	8001c24 <CAN_TX>
	CAN_TX(hcan1, AMS3_header, AMS3_databytes);
 8001da0:	4e0e      	ldr	r6, [pc, #56]	; (8001ddc <CAN_10+0xa8>)
 8001da2:	4b12      	ldr	r3, [pc, #72]	; (8001dec <CAN_10+0xb8>)
 8001da4:	930c      	str	r3, [sp, #48]	; 0x30
 8001da6:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <CAN_10+0xbc>)
 8001da8:	ac06      	add	r4, sp, #24
 8001daa:	461d      	mov	r5, r3
 8001dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001db4:	e884 0003 	stmia.w	r4, {r0, r1}
 8001db8:	466d      	mov	r5, sp
 8001dba:	f106 0410 	add.w	r4, r6, #16
 8001dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001dca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001dce:	f7ff ff29 	bl	8001c24 <CAN_TX>
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200002e8 	.word	0x200002e8
 8001de0:	200002d4 	.word	0x200002d4
 8001de4:	2000001c 	.word	0x2000001c
 8001de8:	20000034 	.word	0x20000034
 8001dec:	200002cc 	.word	0x200002cc
 8001df0:	2000004c 	.word	0x2000004c

08001df4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */
AMS3_databytes[0]=0;
 8001df8:	4b28      	ldr	r3, [pc, #160]	; (8001e9c <MX_CAN1_Init+0xa8>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
AMS3_databytes[1]=0;
 8001dfe:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <MX_CAN1_Init+0xa8>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	705a      	strb	r2, [r3, #1]
AMS3_databytes[2]=0;
 8001e04:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <MX_CAN1_Init+0xa8>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	709a      	strb	r2, [r3, #2]
AMS3_databytes[3]=0;
 8001e0a:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <MX_CAN1_Init+0xa8>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	70da      	strb	r2, [r3, #3]
AMS3_databytes[4]=0;
 8001e10:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <MX_CAN1_Init+0xa8>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	711a      	strb	r2, [r3, #4]
AMS3_databytes[5]=0;
 8001e16:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <MX_CAN1_Init+0xa8>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	715a      	strb	r2, [r3, #5]
AMS3_databytes[6]=0;
 8001e1c:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <MX_CAN1_Init+0xa8>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	719a      	strb	r2, [r3, #6]
AMS3_databytes[7]=0;
 8001e22:	4b1e      	ldr	r3, [pc, #120]	; (8001e9c <MX_CAN1_Init+0xa8>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	71da      	strb	r2, [r3, #7]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001e28:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <MX_CAN1_Init+0xac>)
 8001e2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ea4 <MX_CAN1_Init+0xb0>)
 8001e2c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <MX_CAN1_Init+0xac>)
 8001e30:	2204      	movs	r2, #4
 8001e32:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001e34:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <MX_CAN1_Init+0xac>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e3a:	4b19      	ldr	r3, [pc, #100]	; (8001ea0 <MX_CAN1_Init+0xac>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001e40:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <MX_CAN1_Init+0xac>)
 8001e42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e46:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <MX_CAN1_Init+0xac>)
 8001e4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e4e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <MX_CAN1_Init+0xac>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001e56:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <MX_CAN1_Init+0xac>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001e5c:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <MX_CAN1_Init+0xac>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <MX_CAN1_Init+0xac>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001e68:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <MX_CAN1_Init+0xac>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <MX_CAN1_Init+0xac>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001e74:	480a      	ldr	r0, [pc, #40]	; (8001ea0 <MX_CAN1_Init+0xac>)
 8001e76:	f000 fe0d 	bl	8002a94 <HAL_CAN_Init>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_CAN1_Init+0x90>
  {
    Error_Handler();
 8001e80:	f000 fa71 	bl	8002366 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001e84:	2102      	movs	r1, #2
 8001e86:	4806      	ldr	r0, [pc, #24]	; (8001ea0 <MX_CAN1_Init+0xac>)
 8001e88:	f001 f933 	bl	80030f2 <HAL_CAN_ActivateNotification>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_CAN1_Init+0xa2>
    {
  	  Error_Handler();
 8001e92:	f000 fa68 	bl	8002366 <Error_Handler>
    }
  /* USER CODE END CAN1_Init 2 */

}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200002cc 	.word	0x200002cc
 8001ea0:	200002e8 	.word	0x200002e8
 8001ea4:	40006400 	.word	0x40006400

08001ea8 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001eac:	4b17      	ldr	r3, [pc, #92]	; (8001f0c <MX_CAN2_Init+0x64>)
 8001eae:	4a18      	ldr	r2, [pc, #96]	; (8001f10 <MX_CAN2_Init+0x68>)
 8001eb0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 8001eb2:	4b16      	ldr	r3, [pc, #88]	; (8001f0c <MX_CAN2_Init+0x64>)
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001eb8:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <MX_CAN2_Init+0x64>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001ebe:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <MX_CAN2_Init+0x64>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <MX_CAN2_Init+0x64>)
 8001ec6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eca:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <MX_CAN2_Init+0x64>)
 8001ece:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ed2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001ed4:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <MX_CAN2_Init+0x64>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <MX_CAN2_Init+0x64>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	; (8001f0c <MX_CAN2_Init+0x64>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <MX_CAN2_Init+0x64>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <MX_CAN2_Init+0x64>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <MX_CAN2_Init+0x64>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001ef8:	4804      	ldr	r0, [pc, #16]	; (8001f0c <MX_CAN2_Init+0x64>)
 8001efa:	f000 fdcb 	bl	8002a94 <HAL_CAN_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001f04:	f000 fa2f 	bl	8002366 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000310 	.word	0x20000310
 8001f10:	40006800 	.word	0x40006800

08001f14 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08c      	sub	sp, #48	; 0x30
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1c:	f107 031c 	add.w	r3, r7, #28
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a4f      	ldr	r2, [pc, #316]	; (8002070 <HAL_CAN_MspInit+0x15c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d146      	bne.n	8001fc4 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001f36:	4b4f      	ldr	r3, [pc, #316]	; (8002074 <HAL_CAN_MspInit+0x160>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	4a4d      	ldr	r2, [pc, #308]	; (8002074 <HAL_CAN_MspInit+0x160>)
 8001f3e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001f40:	4b4c      	ldr	r3, [pc, #304]	; (8002074 <HAL_CAN_MspInit+0x160>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d10d      	bne.n	8001f64 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61bb      	str	r3, [r7, #24]
 8001f4c:	4b4a      	ldr	r3, [pc, #296]	; (8002078 <HAL_CAN_MspInit+0x164>)
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	4a49      	ldr	r2, [pc, #292]	; (8002078 <HAL_CAN_MspInit+0x164>)
 8001f52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f56:	6413      	str	r3, [r2, #64]	; 0x40
 8001f58:	4b47      	ldr	r3, [pc, #284]	; (8002078 <HAL_CAN_MspInit+0x164>)
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f60:	61bb      	str	r3, [r7, #24]
 8001f62:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
 8001f68:	4b43      	ldr	r3, [pc, #268]	; (8002078 <HAL_CAN_MspInit+0x164>)
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	4a42      	ldr	r2, [pc, #264]	; (8002078 <HAL_CAN_MspInit+0x164>)
 8001f6e:	f043 0302 	orr.w	r3, r3, #2
 8001f72:	6313      	str	r3, [r2, #48]	; 0x30
 8001f74:	4b40      	ldr	r3, [pc, #256]	; (8002078 <HAL_CAN_MspInit+0x164>)
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f86:	2302      	movs	r3, #2
 8001f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001f92:	2309      	movs	r3, #9
 8001f94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f96:	f107 031c 	add.w	r3, r7, #28
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4837      	ldr	r0, [pc, #220]	; (800207c <HAL_CAN_MspInit+0x168>)
 8001f9e:	f001 fbff 	bl	80037a0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	2013      	movs	r0, #19
 8001fa8:	f001 fbc3 	bl	8003732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001fac:	2013      	movs	r0, #19
 8001fae:	f001 fbdc 	bl	800376a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2014      	movs	r0, #20
 8001fb8:	f001 fbbb 	bl	8003732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001fbc:	2014      	movs	r0, #20
 8001fbe:	f001 fbd4 	bl	800376a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001fc2:	e050      	b.n	8002066 <HAL_CAN_MspInit+0x152>
  else if(canHandle->Instance==CAN2)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a2d      	ldr	r2, [pc, #180]	; (8002080 <HAL_CAN_MspInit+0x16c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d14b      	bne.n	8002066 <HAL_CAN_MspInit+0x152>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	4b29      	ldr	r3, [pc, #164]	; (8002078 <HAL_CAN_MspInit+0x164>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	4a28      	ldr	r2, [pc, #160]	; (8002078 <HAL_CAN_MspInit+0x164>)
 8001fd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fde:	4b26      	ldr	r3, [pc, #152]	; (8002078 <HAL_CAN_MspInit+0x164>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001fea:	4b22      	ldr	r3, [pc, #136]	; (8002074 <HAL_CAN_MspInit+0x160>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	4a20      	ldr	r2, [pc, #128]	; (8002074 <HAL_CAN_MspInit+0x160>)
 8001ff2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001ff4:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <HAL_CAN_MspInit+0x160>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d10d      	bne.n	8002018 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	4b1d      	ldr	r3, [pc, #116]	; (8002078 <HAL_CAN_MspInit+0x164>)
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	4a1c      	ldr	r2, [pc, #112]	; (8002078 <HAL_CAN_MspInit+0x164>)
 8002006:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800200a:	6413      	str	r3, [r2, #64]	; 0x40
 800200c:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <HAL_CAN_MspInit+0x164>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	4b16      	ldr	r3, [pc, #88]	; (8002078 <HAL_CAN_MspInit+0x164>)
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	4a15      	ldr	r2, [pc, #84]	; (8002078 <HAL_CAN_MspInit+0x164>)
 8002022:	f043 0302 	orr.w	r3, r3, #2
 8002026:	6313      	str	r3, [r2, #48]	; 0x30
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <HAL_CAN_MspInit+0x164>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002034:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002042:	2303      	movs	r3, #3
 8002044:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002046:	2309      	movs	r3, #9
 8002048:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204a:	f107 031c 	add.w	r3, r7, #28
 800204e:	4619      	mov	r1, r3
 8002050:	480a      	ldr	r0, [pc, #40]	; (800207c <HAL_CAN_MspInit+0x168>)
 8002052:	f001 fba5 	bl	80037a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	2040      	movs	r0, #64	; 0x40
 800205c:	f001 fb69 	bl	8003732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002060:	2040      	movs	r0, #64	; 0x40
 8002062:	f001 fb82 	bl	800376a <HAL_NVIC_EnableIRQ>
}
 8002066:	bf00      	nop
 8002068:	3730      	adds	r7, #48	; 0x30
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40006400 	.word	0x40006400
 8002074:	20000338 	.word	0x20000338
 8002078:	40023800 	.word	0x40023800
 800207c:	40020400 	.word	0x40020400
 8002080:	40006800 	.word	0x40006800

08002084 <AIR_Logic>:
	// returns 0 if open
	return HAL_GPIO_ReadPin(GPIOC,AIR_N_INT_Pin);
}

void AIR_Logic(uint8_t ts_on, uint8_t ts_ready, uint8_t ts_start)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
 800208e:	460b      	mov	r3, r1
 8002090:	71bb      	strb	r3, [r7, #6]
 8002092:	4613      	mov	r3, r2
 8002094:	717b      	strb	r3, [r7, #5]

	 if (error == 0)
 8002096:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <AIR_Logic+0x4c>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d113      	bne.n	80020c6 <AIR_Logic+0x42>
	 {
		 if (ts_on>= 1)
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d007      	beq.n	80020b4 <AIR_Logic+0x30>
		 {

			 HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_SET);
 80020a4:	2201      	movs	r2, #1
 80020a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020aa:	480a      	ldr	r0, [pc, #40]	; (80020d4 <AIR_Logic+0x50>)
 80020ac:	f001 fd16 	bl	8003adc <HAL_GPIO_WritePin>
			 ts_ready = 1;
 80020b0:	2301      	movs	r3, #1
 80020b2:	71bb      	strb	r3, [r7, #6]

		 }

		 if (ts_start>= 1)
 80020b4:	797b      	ldrb	r3, [r7, #5]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <AIR_Logic+0x42>
		 {
			 HAL_GPIO_WritePin(GPIOC,AIR_P_SW_Pin, GPIO_PIN_SET);
 80020ba:	2201      	movs	r2, #1
 80020bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020c0:	4805      	ldr	r0, [pc, #20]	; (80020d8 <AIR_Logic+0x54>)
 80020c2:	f001 fd0b 	bl	8003adc <HAL_GPIO_WritePin>
		 }
	}
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	2000033c 	.word	0x2000033c
 80020d4:	40020400 	.word	0x40020400
 80020d8:	40020800 	.word	0x40020800

080020dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	609a      	str	r2, [r3, #8]
 80020ee:	60da      	str	r2, [r3, #12]
 80020f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	4b5e      	ldr	r3, [pc, #376]	; (8002270 <MX_GPIO_Init+0x194>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a5d      	ldr	r2, [pc, #372]	; (8002270 <MX_GPIO_Init+0x194>)
 80020fc:	f043 0304 	orr.w	r3, r3, #4
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b5b      	ldr	r3, [pc, #364]	; (8002270 <MX_GPIO_Init+0x194>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	4b57      	ldr	r3, [pc, #348]	; (8002270 <MX_GPIO_Init+0x194>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a56      	ldr	r2, [pc, #344]	; (8002270 <MX_GPIO_Init+0x194>)
 8002118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b54      	ldr	r3, [pc, #336]	; (8002270 <MX_GPIO_Init+0x194>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	4b50      	ldr	r3, [pc, #320]	; (8002270 <MX_GPIO_Init+0x194>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a4f      	ldr	r2, [pc, #316]	; (8002270 <MX_GPIO_Init+0x194>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b4d      	ldr	r3, [pc, #308]	; (8002270 <MX_GPIO_Init+0x194>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	4b49      	ldr	r3, [pc, #292]	; (8002270 <MX_GPIO_Init+0x194>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a48      	ldr	r2, [pc, #288]	; (8002270 <MX_GPIO_Init+0x194>)
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b46      	ldr	r3, [pc, #280]	; (8002270 <MX_GPIO_Init+0x194>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	603b      	str	r3, [r7, #0]
 8002166:	4b42      	ldr	r3, [pc, #264]	; (8002270 <MX_GPIO_Init+0x194>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a41      	ldr	r2, [pc, #260]	; (8002270 <MX_GPIO_Init+0x194>)
 800216c:	f043 0308 	orr.w	r3, r3, #8
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b3f      	ldr	r3, [pc, #252]	; (8002270 <MX_GPIO_Init+0x194>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GN_Pin|LED_YW_Pin|LED_RD_Pin|AIR_P_SW_Pin, GPIO_PIN_RESET);
 800217e:	2200      	movs	r2, #0
 8002180:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8002184:	483b      	ldr	r0, [pc, #236]	; (8002274 <MX_GPIO_Init+0x198>)
 8002186:	f001 fca9 	bl	8003adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WDI_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 800218a:	2200      	movs	r2, #0
 800218c:	f248 0110 	movw	r1, #32784	; 0x8010
 8002190:	4839      	ldr	r0, [pc, #228]	; (8002278 <MX_GPIO_Init+0x19c>)
 8002192:	f001 fca3 	bl	8003adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SC_OPEN_GPIO_Port, SC_OPEN_Pin, GPIO_PIN_SET);
 8002196:	2201      	movs	r2, #1
 8002198:	2180      	movs	r1, #128	; 0x80
 800219a:	4837      	ldr	r0, [pc, #220]	; (8002278 <MX_GPIO_Init+0x19c>)
 800219c:	f001 fc9e 	bl	8003adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_RESET);
 80021a0:	2200      	movs	r2, #0
 80021a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021a6:	4835      	ldr	r0, [pc, #212]	; (800227c <MX_GPIO_Init+0x1a0>)
 80021a8:	f001 fc98 	bl	8003adc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_GN_Pin|LED_YW_Pin|LED_RD_Pin|AIR_P_SW_Pin;
 80021ac:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80021b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b2:	2301      	movs	r3, #1
 80021b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ba:	2300      	movs	r3, #0
 80021bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021be:	f107 0314 	add.w	r3, r7, #20
 80021c2:	4619      	mov	r1, r3
 80021c4:	482b      	ldr	r0, [pc, #172]	; (8002274 <MX_GPIO_Init+0x198>)
 80021c6:	f001 faeb 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = V_VEHI_Pin|V_ACCU_Pin|SC_CLOSING_Pin|SC_STATE_Pin
 80021ca:	23f3      	movs	r3, #243	; 0xf3
 80021cc:	617b      	str	r3, [r7, #20]
                          |AIR_N_ACT_Pin|AIR_N_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	4825      	ldr	r0, [pc, #148]	; (8002274 <MX_GPIO_Init+0x198>)
 80021de:	f001 fadf 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_STATE_Pin|IMD_SAFE_Pin|SC_OPENING_Pin;
 80021e2:	2368      	movs	r3, #104	; 0x68
 80021e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	4820      	ldr	r0, [pc, #128]	; (8002278 <MX_GPIO_Init+0x19c>)
 80021f6:	f001 fad3 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WDI_Pin|SC_OPEN_Pin|SPI3_CS_Pin;
 80021fa:	f248 0390 	movw	r3, #32912	; 0x8090
 80021fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002200:	2301      	movs	r3, #1
 8002202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002208:	2300      	movs	r3, #0
 800220a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220c:	f107 0314 	add.w	r3, r7, #20
 8002210:	4619      	mov	r1, r3
 8002212:	4819      	ldr	r0, [pc, #100]	; (8002278 <MX_GPIO_Init+0x19c>)
 8002214:	f001 fac4 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_ACTIVATE_Pin;
 8002218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800221c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800221e:	2301      	movs	r3, #1
 8002220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TS_ACTIVATE_GPIO_Port, &GPIO_InitStruct);
 800222a:	f107 0314 	add.w	r3, r7, #20
 800222e:	4619      	mov	r1, r3
 8002230:	4812      	ldr	r0, [pc, #72]	; (800227c <MX_GPIO_Init+0x1a0>)
 8002232:	f001 fab5 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DANGER_V_Pin|AIR_P_ACT_Pin|AIR_P_INT_Pin;
 8002236:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 800223a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800223c:	2300      	movs	r3, #0
 800223e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	4619      	mov	r1, r3
 800224a:	480c      	ldr	r0, [pc, #48]	; (800227c <MX_GPIO_Init+0x1a0>)
 800224c:	f001 faa8 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PCHRG_ACT_Pin;
 8002250:	2304      	movs	r3, #4
 8002252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002254:	2300      	movs	r3, #0
 8002256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PCHRG_ACT_GPIO_Port, &GPIO_InitStruct);
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	4619      	mov	r1, r3
 8002262:	4807      	ldr	r0, [pc, #28]	; (8002280 <MX_GPIO_Init+0x1a4>)
 8002264:	f001 fa9c 	bl	80037a0 <HAL_GPIO_Init>

}
 8002268:	bf00      	nop
 800226a:	3728      	adds	r7, #40	; 0x28
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40023800 	.word	0x40023800
 8002274:	40020800 	.word	0x40020800
 8002278:	40020000 	.word	0x40020000
 800227c:	40020400 	.word	0x40020400
 8002280:	40020c00 	.word	0x40020c00

08002284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002288:	f000 fb72 	bl	8002970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800228c:	f000 f824 	bl	80022d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002290:	f7ff ff24 	bl	80020dc <MX_GPIO_Init>
  MX_SPI3_Init();
 8002294:	f000 f86c 	bl	8002370 <MX_SPI3_Init>
  MX_TIM2_Init();
 8002298:	f000 fa4a 	bl	8002730 <MX_TIM2_Init>
  MX_CAN1_Init();
 800229c:	f7ff fdaa 	bl	8001df4 <MX_CAN1_Init>
  MX_CAN2_Init();
 80022a0:	f7ff fe02 	bl	8001ea8 <MX_CAN2_Init>
  MX_USB_OTG_FS_PCD_Init();
 80022a4:	f000 fab6 	bl	8002814 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  // Start timer
  HAL_TIM_Base_Start_IT(&htim2);
 80022a8:	4809      	ldr	r0, [pc, #36]	; (80022d0 <main+0x4c>)
 80022aa:	f002 ff29 	bl	8005100 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan1);
 80022ae:	4809      	ldr	r0, [pc, #36]	; (80022d4 <main+0x50>)
 80022b0:	f000 fceb 	bl	8002c8a <HAL_CAN_Start>
  BMS_init();
 80022b4:	f7ff fa10 	bl	80016d8 <BMS_init>





    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80022b8:	2102      	movs	r1, #2
 80022ba:	4806      	ldr	r0, [pc, #24]	; (80022d4 <main+0x50>)
 80022bc:	f000 ff19 	bl	80030f2 <HAL_CAN_ActivateNotification>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <main+0x46>
    {
  	  Error_Handler();
 80022c6:	f000 f84e 	bl	8002366 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 BMS();
 80022ca:	f7ff fa0b 	bl	80016e4 <BMS>
 80022ce:	e7fc      	b.n	80022ca <main+0x46>
 80022d0:	2000039c 	.word	0x2000039c
 80022d4:	200002e8 	.word	0x200002e8

080022d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b092      	sub	sp, #72	; 0x48
 80022dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022de:	f107 0318 	add.w	r3, r7, #24
 80022e2:	2230      	movs	r2, #48	; 0x30
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f004 fc47 	bl	8006b7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
 80022f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022fa:	2302      	movs	r3, #2
 80022fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022fe:	2301      	movs	r3, #1
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002302:	2310      	movs	r3, #16
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002306:	2302      	movs	r3, #2
 8002308:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800230a:	2300      	movs	r3, #0
 800230c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 800230e:	2308      	movs	r3, #8
 8002310:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002312:	23c0      	movs	r3, #192	; 0xc0
 8002314:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002316:	2304      	movs	r3, #4
 8002318:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800231a:	2308      	movs	r3, #8
 800231c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800231e:	f107 0318 	add.w	r3, r7, #24
 8002322:	4618      	mov	r0, r3
 8002324:	f001 fd28 	bl	8003d78 <HAL_RCC_OscConfig>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800232e:	f000 f81a 	bl	8002366 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002332:	230f      	movs	r3, #15
 8002334:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002336:	2302      	movs	r3, #2
 8002338:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800233e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002342:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002348:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	2103      	movs	r1, #3
 800234e:	4618      	mov	r0, r3
 8002350:	f001 ff66 	bl	8004220 <HAL_RCC_ClockConfig>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800235a:	f000 f804 	bl	8002366 <Error_Handler>
  }
}
 800235e:	bf00      	nop
 8002360:	3748      	adds	r7, #72	; 0x48
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800236a:	b672      	cpsid	i
}
 800236c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800236e:	e7fe      	b.n	800236e <Error_Handler+0x8>

08002370 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002374:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <MX_SPI3_Init+0x64>)
 8002376:	4a18      	ldr	r2, [pc, #96]	; (80023d8 <MX_SPI3_Init+0x68>)
 8002378:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800237a:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <MX_SPI3_Init+0x64>)
 800237c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002380:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002382:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <MX_SPI3_Init+0x64>)
 8002384:	2200      	movs	r2, #0
 8002386:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <MX_SPI3_Init+0x64>)
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <MX_SPI3_Init+0x64>)
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002394:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <MX_SPI3_Init+0x64>)
 8002396:	2200      	movs	r2, #0
 8002398:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <MX_SPI3_Init+0x64>)
 800239c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80023a2:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <MX_SPI3_Init+0x64>)
 80023a4:	2220      	movs	r2, #32
 80023a6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023a8:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <MX_SPI3_Init+0x64>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <MX_SPI3_Init+0x64>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023b4:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <MX_SPI3_Init+0x64>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <MX_SPI3_Init+0x64>)
 80023bc:	220a      	movs	r2, #10
 80023be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80023c0:	4804      	ldr	r0, [pc, #16]	; (80023d4 <MX_SPI3_Init+0x64>)
 80023c2:	f002 f8df 	bl	8004584 <HAL_SPI_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80023cc:	f7ff ffcb 	bl	8002366 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000340 	.word	0x20000340
 80023d8:	40003c00 	.word	0x40003c00

080023dc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a19      	ldr	r2, [pc, #100]	; (8002460 <HAL_SPI_MspInit+0x84>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d12c      	bne.n	8002458 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	4b18      	ldr	r3, [pc, #96]	; (8002464 <HAL_SPI_MspInit+0x88>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	4a17      	ldr	r2, [pc, #92]	; (8002464 <HAL_SPI_MspInit+0x88>)
 8002408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800240c:	6413      	str	r3, [r2, #64]	; 0x40
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <HAL_SPI_MspInit+0x88>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	4b11      	ldr	r3, [pc, #68]	; (8002464 <HAL_SPI_MspInit+0x88>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a10      	ldr	r2, [pc, #64]	; (8002464 <HAL_SPI_MspInit+0x88>)
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <HAL_SPI_MspInit+0x88>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f003 0304 	and.w	r3, r3, #4
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002436:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800243a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243c:	2302      	movs	r3, #2
 800243e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002444:	2303      	movs	r3, #3
 8002446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002448:	2306      	movs	r3, #6
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	4619      	mov	r1, r3
 8002452:	4805      	ldr	r0, [pc, #20]	; (8002468 <HAL_SPI_MspInit+0x8c>)
 8002454:	f001 f9a4 	bl	80037a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002458:	bf00      	nop
 800245a:	3728      	adds	r7, #40	; 0x28
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40003c00 	.word	0x40003c00
 8002464:	40023800 	.word	0x40023800
 8002468:	40020800 	.word	0x40020800

0800246c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
 8002476:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <HAL_MspInit+0x48>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	4a0e      	ldr	r2, [pc, #56]	; (80024b4 <HAL_MspInit+0x48>)
 800247c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002480:	6453      	str	r3, [r2, #68]	; 0x44
 8002482:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <HAL_MspInit+0x48>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800248a:	607b      	str	r3, [r7, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	603b      	str	r3, [r7, #0]
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <HAL_MspInit+0x48>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	4a07      	ldr	r2, [pc, #28]	; (80024b4 <HAL_MspInit+0x48>)
 8002498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249c:	6413      	str	r3, [r2, #64]	; 0x40
 800249e:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_MspInit+0x48>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a6:	603b      	str	r3, [r7, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr
 80024b4:	40023800 	.word	0x40023800

080024b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024bc:	e7fe      	b.n	80024bc <NMI_Handler+0x4>

080024be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024c2:	e7fe      	b.n	80024c2 <HardFault_Handler+0x4>

080024c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c8:	e7fe      	b.n	80024c8 <MemManage_Handler+0x4>

080024ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ca:	b480      	push	{r7}
 80024cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ce:	e7fe      	b.n	80024ce <BusFault_Handler+0x4>

080024d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024d4:	e7fe      	b.n	80024d4 <UsageFault_Handler+0x4>

080024d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024d6:	b480      	push	{r7}
 80024d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr

080024e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr

080024ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ee:	b480      	push	{r7}
 80024f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bc80      	pop	{r7}
 80024f8:	4770      	bx	lr

080024fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024fe:	f000 fa89 	bl	8002a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <CAN1_TX_IRQHandler+0x10>)
 800250e:	f000 fe15 	bl	800313c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	200002e8 	.word	0x200002e8

0800251c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <CAN1_RX0_IRQHandler+0x10>)
 8002522:	f000 fe0b 	bl	800313c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	200002e8 	.word	0x200002e8

08002530 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <TIM2_IRQHandler+0x10>)
 8002536:	f002 fe51 	bl	80051dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	2000039c 	.word	0x2000039c

08002544 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002548:	4802      	ldr	r0, [pc, #8]	; (8002554 <CAN2_RX0_IRQHandler+0x10>)
 800254a:	f000 fdf7 	bl	800313c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000310 	.word	0x20000310

08002558 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8002562:	4b0e      	ldr	r3, [pc, #56]	; (800259c <ITM_SendChar+0x44>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a0d      	ldr	r2, [pc, #52]	; (800259c <ITM_SendChar+0x44>)
 8002568:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800256c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800256e:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <ITM_SendChar+0x48>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a0b      	ldr	r2, [pc, #44]	; (80025a0 <ITM_SendChar+0x48>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800257a:	bf00      	nop
 800257c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f8      	beq.n	800257c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800258a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	6013      	str	r3, [r2, #0]
}
 8002592:	bf00      	nop
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr
 800259c:	e000edfc 	.word	0xe000edfc
 80025a0:	e0000e00 	.word	0xe0000e00

080025a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return 1;
 80025a8:	2301      	movs	r3, #1
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr

080025b2 <_kill>:

int _kill(int pid, int sig)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025bc:	f004 fb40 	bl	8006c40 <__errno>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2216      	movs	r2, #22
 80025c4:	601a      	str	r2, [r3, #0]
  return -1;
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <_exit>:

void _exit (int status)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025da:	f04f 31ff 	mov.w	r1, #4294967295
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7ff ffe7 	bl	80025b2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025e4:	e7fe      	b.n	80025e4 <_exit+0x12>

080025e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	e00a      	b.n	800260e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025f8:	f3af 8000 	nop.w
 80025fc:	4601      	mov	r1, r0
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	60ba      	str	r2, [r7, #8]
 8002604:	b2ca      	uxtb	r2, r1
 8002606:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	3301      	adds	r3, #1
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	429a      	cmp	r2, r3
 8002614:	dbf0      	blt.n	80025f8 <_read+0x12>
  }

  return len;
 8002616:	687b      	ldr	r3, [r7, #4]
}
 8002618:	4618      	mov	r0, r3
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	e009      	b.n	8002646 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++); //Diese Zeile kann gelöscht werden wenn kein printf über SWV mehr gewollt ist
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	60ba      	str	r2, [r7, #8]
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff ff8c 	bl	8002558 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	3301      	adds	r3, #1
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	429a      	cmp	r2, r3
 800264c:	dbf1      	blt.n	8002632 <_write+0x12>
  }
  return len;
 800264e:	687b      	ldr	r3, [r7, #4]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <_close>:

int _close(int file)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002660:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002664:	4618      	mov	r0, r3
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	bc80      	pop	{r7}
 800266c:	4770      	bx	lr

0800266e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800267e:	605a      	str	r2, [r3, #4]
  return 0;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <_isatty>:

int _isatty(int file)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002694:	2301      	movs	r3, #1
}
 8002696:	4618      	mov	r0, r3
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026c0:	4a14      	ldr	r2, [pc, #80]	; (8002714 <_sbrk+0x5c>)
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <_sbrk+0x60>)
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026cc:	4b13      	ldr	r3, [pc, #76]	; (800271c <_sbrk+0x64>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <_sbrk+0x64>)
 80026d6:	4a12      	ldr	r2, [pc, #72]	; (8002720 <_sbrk+0x68>)
 80026d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <_sbrk+0x64>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d207      	bcs.n	80026f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026e8:	f004 faaa 	bl	8006c40 <__errno>
 80026ec:	4603      	mov	r3, r0
 80026ee:	220c      	movs	r2, #12
 80026f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026f2:	f04f 33ff 	mov.w	r3, #4294967295
 80026f6:	e009      	b.n	800270c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026f8:	4b08      	ldr	r3, [pc, #32]	; (800271c <_sbrk+0x64>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026fe:	4b07      	ldr	r3, [pc, #28]	; (800271c <_sbrk+0x64>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4413      	add	r3, r2
 8002706:	4a05      	ldr	r2, [pc, #20]	; (800271c <_sbrk+0x64>)
 8002708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800270a:	68fb      	ldr	r3, [r7, #12]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	2000c000 	.word	0x2000c000
 8002718:	00000400 	.word	0x00000400
 800271c:	20000398 	.word	0x20000398
 8002720:	20000a38 	.word	0x20000a38

08002724 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002736:	f107 0308 	add.w	r3, r7, #8
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]
 8002740:	609a      	str	r2, [r3, #8]
 8002742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002744:	463b      	mov	r3, r7
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800274c:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <MX_TIM2_Init+0x94>)
 800274e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002752:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8002754:	4b1b      	ldr	r3, [pc, #108]	; (80027c4 <MX_TIM2_Init+0x94>)
 8002756:	222f      	movs	r2, #47	; 0x2f
 8002758:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275a:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <MX_TIM2_Init+0x94>)
 800275c:	2200      	movs	r2, #0
 800275e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002760:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <MX_TIM2_Init+0x94>)
 8002762:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002766:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002768:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <MX_TIM2_Init+0x94>)
 800276a:	2200      	movs	r2, #0
 800276c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800276e:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <MX_TIM2_Init+0x94>)
 8002770:	2200      	movs	r2, #0
 8002772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002774:	4813      	ldr	r0, [pc, #76]	; (80027c4 <MX_TIM2_Init+0x94>)
 8002776:	f002 fc74 	bl	8005062 <HAL_TIM_Base_Init>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002780:	f7ff fdf1 	bl	8002366 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002788:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800278a:	f107 0308 	add.w	r3, r7, #8
 800278e:	4619      	mov	r1, r3
 8002790:	480c      	ldr	r0, [pc, #48]	; (80027c4 <MX_TIM2_Init+0x94>)
 8002792:	f002 fe2b 	bl	80053ec <HAL_TIM_ConfigClockSource>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800279c:	f7ff fde3 	bl	8002366 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027a0:	2300      	movs	r3, #0
 80027a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027a4:	2300      	movs	r3, #0
 80027a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027a8:	463b      	mov	r3, r7
 80027aa:	4619      	mov	r1, r3
 80027ac:	4805      	ldr	r0, [pc, #20]	; (80027c4 <MX_TIM2_Init+0x94>)
 80027ae:	f003 f83d 	bl	800582c <HAL_TIMEx_MasterConfigSynchronization>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80027b8:	f7ff fdd5 	bl	8002366 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80027bc:	bf00      	nop
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	2000039c 	.word	0x2000039c

080027c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d8:	d115      	bne.n	8002806 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <HAL_TIM_Base_MspInit+0x48>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	4a0b      	ldr	r2, [pc, #44]	; (8002810 <HAL_TIM_Base_MspInit+0x48>)
 80027e4:	f043 0301 	orr.w	r3, r3, #1
 80027e8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <HAL_TIM_Base_MspInit+0x48>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2100      	movs	r1, #0
 80027fa:	201c      	movs	r0, #28
 80027fc:	f000 ff99 	bl	8003732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002800:	201c      	movs	r0, #28
 8002802:	f000 ffb2 	bl	800376a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002806:	bf00      	nop
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40023800 	.word	0x40023800

08002814 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002818:	4b12      	ldr	r3, [pc, #72]	; (8002864 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800281a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800281e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002820:	4b10      	ldr	r3, [pc, #64]	; (8002864 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002822:	2204      	movs	r2, #4
 8002824:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002826:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002828:	2202      	movs	r2, #2
 800282a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800282c:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800282e:	2200      	movs	r2, #0
 8002830:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002832:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002834:	2202      	movs	r2, #2
 8002836:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002838:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800283a:	2200      	movs	r2, #0
 800283c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800283e:	4b09      	ldr	r3, [pc, #36]	; (8002864 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002840:	2200      	movs	r2, #0
 8002842:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002844:	4b07      	ldr	r3, [pc, #28]	; (8002864 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002846:	2201      	movs	r2, #1
 8002848:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800284c:	2200      	movs	r2, #0
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002850:	4804      	ldr	r0, [pc, #16]	; (8002864 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002852:	f001 f974 	bl	8003b3e <HAL_PCD_Init>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 800285c:	f7ff fd83 	bl	8002366 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002860:	bf00      	nop
 8002862:	bd80      	pop	{r7, pc}
 8002864:	200003e4 	.word	0x200003e4

08002868 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	; 0x28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002888:	d13f      	bne.n	800290a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	4b21      	ldr	r3, [pc, #132]	; (8002914 <HAL_PCD_MspInit+0xac>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a20      	ldr	r2, [pc, #128]	; (8002914 <HAL_PCD_MspInit+0xac>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b1e      	ldr	r3, [pc, #120]	; (8002914 <HAL_PCD_MspInit+0xac>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b4:	f107 0314 	add.w	r3, r7, #20
 80028b8:	4619      	mov	r1, r3
 80028ba:	4817      	ldr	r0, [pc, #92]	; (8002918 <HAL_PCD_MspInit+0xb0>)
 80028bc:	f000 ff70 	bl	80037a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80028c0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80028c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c6:	2302      	movs	r3, #2
 80028c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ce:	2303      	movs	r3, #3
 80028d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80028d2:	230a      	movs	r3, #10
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d6:	f107 0314 	add.w	r3, r7, #20
 80028da:	4619      	mov	r1, r3
 80028dc:	480e      	ldr	r0, [pc, #56]	; (8002918 <HAL_PCD_MspInit+0xb0>)
 80028de:	f000 ff5f 	bl	80037a0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80028e2:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <HAL_PCD_MspInit+0xac>)
 80028e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e6:	4a0b      	ldr	r2, [pc, #44]	; (8002914 <HAL_PCD_MspInit+0xac>)
 80028e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028ec:	6353      	str	r3, [r2, #52]	; 0x34
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <HAL_PCD_MspInit+0xac>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	4a07      	ldr	r2, [pc, #28]	; (8002914 <HAL_PCD_MspInit+0xac>)
 80028f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028fc:	6453      	str	r3, [r2, #68]	; 0x44
 80028fe:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_PCD_MspInit+0xac>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800290a:	bf00      	nop
 800290c:	3728      	adds	r7, #40	; 0x28
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800
 8002918:	40020000 	.word	0x40020000

0800291c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800291c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002954 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8002920:	f7ff ff00 	bl	8002724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002924:	480c      	ldr	r0, [pc, #48]	; (8002958 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002926:	490d      	ldr	r1, [pc, #52]	; (800295c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002928:	4a0d      	ldr	r2, [pc, #52]	; (8002960 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800292a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800292c:	e002      	b.n	8002934 <LoopCopyDataInit>

0800292e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800292e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002932:	3304      	adds	r3, #4

08002934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002938:	d3f9      	bcc.n	800292e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800293a:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800293c:	4c0a      	ldr	r4, [pc, #40]	; (8002968 <LoopFillZerobss+0x22>)
  movs r3, #0
 800293e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002940:	e001      	b.n	8002946 <LoopFillZerobss>

08002942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002944:	3204      	adds	r2, #4

08002946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002948:	d3fb      	bcc.n	8002942 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800294a:	f004 f97f 	bl	8006c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800294e:	f7ff fc99 	bl	8002284 <main>
  bx  lr    
 8002952:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002954:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800295c:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8002960:	0800946c 	.word	0x0800946c
  ldr r2, =_sbss
 8002964:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8002968:	20000a38 	.word	0x20000a38

0800296c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800296c:	e7fe      	b.n	800296c <ADC_IRQHandler>
	...

08002970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002974:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <HAL_Init+0x40>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0d      	ldr	r2, [pc, #52]	; (80029b0 <HAL_Init+0x40>)
 800297a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800297e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_Init+0x40>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a0a      	ldr	r2, [pc, #40]	; (80029b0 <HAL_Init+0x40>)
 8002986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800298a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800298c:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <HAL_Init+0x40>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a07      	ldr	r2, [pc, #28]	; (80029b0 <HAL_Init+0x40>)
 8002992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002998:	2003      	movs	r0, #3
 800299a:	f000 febf 	bl	800371c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800299e:	200f      	movs	r0, #15
 80029a0:	f000 f808 	bl	80029b4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80029a4:	f7ff fd62 	bl	800246c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40023c00 	.word	0x40023c00

080029b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029bc:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <HAL_InitTick+0x54>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <HAL_InitTick+0x58>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	4619      	mov	r1, r3
 80029c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fed7 	bl	8003786 <HAL_SYSTICK_Config>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e00e      	b.n	8002a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b0f      	cmp	r3, #15
 80029e6:	d80a      	bhi.n	80029fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029e8:	2200      	movs	r2, #0
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295
 80029f0:	f000 fe9f 	bl	8003732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029f4:	4a06      	ldr	r2, [pc, #24]	; (8002a10 <HAL_InitTick+0x5c>)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e000      	b.n	8002a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000064 	.word	0x20000064
 8002a0c:	2000006c 	.word	0x2000006c
 8002a10:	20000068 	.word	0x20000068

08002a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a18:	4b05      	ldr	r3, [pc, #20]	; (8002a30 <HAL_IncTick+0x1c>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_IncTick+0x20>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4413      	add	r3, r2
 8002a24:	4a03      	ldr	r2, [pc, #12]	; (8002a34 <HAL_IncTick+0x20>)
 8002a26:	6013      	str	r3, [r2, #0]
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	2000006c 	.word	0x2000006c
 8002a34:	200008e8 	.word	0x200008e8

08002a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a3c:	4b02      	ldr	r3, [pc, #8]	; (8002a48 <HAL_GetTick+0x10>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	200008e8 	.word	0x200008e8

08002a4c <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a54:	f7ff fff0 	bl	8002a38 <HAL_GetTick>
 8002a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a64:	d005      	beq.n	8002a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <HAL_Delay+0x44>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4413      	add	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a72:	bf00      	nop
 8002a74:	f7ff ffe0 	bl	8002a38 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d8f7      	bhi.n	8002a74 <HAL_Delay+0x28>
  {
  }
}
 8002a84:	bf00      	nop
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	2000006c 	.word	0x2000006c

08002a94 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e0ed      	b.n	8002c82 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff fa2e 	bl	8001f14 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ac8:	f7ff ffb6 	bl	8002a38 <HAL_GetTick>
 8002acc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ace:	e012      	b.n	8002af6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ad0:	f7ff ffb2 	bl	8002a38 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b0a      	cmp	r3, #10
 8002adc:	d90b      	bls.n	8002af6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2205      	movs	r2, #5
 8002aee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e0c5      	b.n	8002c82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0e5      	beq.n	8002ad0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0202 	bic.w	r2, r2, #2
 8002b12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b14:	f7ff ff90 	bl	8002a38 <HAL_GetTick>
 8002b18:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b1a:	e012      	b.n	8002b42 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b1c:	f7ff ff8c 	bl	8002a38 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b0a      	cmp	r3, #10
 8002b28:	d90b      	bls.n	8002b42 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2205      	movs	r2, #5
 8002b3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e09f      	b.n	8002c82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1e5      	bne.n	8002b1c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	7e1b      	ldrb	r3, [r3, #24]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d108      	bne.n	8002b6a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	e007      	b.n	8002b7a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	7e5b      	ldrb	r3, [r3, #25]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d108      	bne.n	8002b94 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	e007      	b.n	8002ba4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ba2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	7e9b      	ldrb	r3, [r3, #26]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d108      	bne.n	8002bbe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0220 	orr.w	r2, r2, #32
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e007      	b.n	8002bce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0220 	bic.w	r2, r2, #32
 8002bcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	7edb      	ldrb	r3, [r3, #27]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d108      	bne.n	8002be8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0210 	bic.w	r2, r2, #16
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	e007      	b.n	8002bf8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0210 	orr.w	r2, r2, #16
 8002bf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	7f1b      	ldrb	r3, [r3, #28]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d108      	bne.n	8002c12 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0208 	orr.w	r2, r2, #8
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	e007      	b.n	8002c22 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0208 	bic.w	r2, r2, #8
 8002c20:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	7f5b      	ldrb	r3, [r3, #29]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d108      	bne.n	8002c3c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0204 	orr.w	r2, r2, #4
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	e007      	b.n	8002c4c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0204 	bic.w	r2, r2, #4
 8002c4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	431a      	orrs	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	ea42 0103 	orr.w	r1, r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	1e5a      	subs	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b084      	sub	sp, #16
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d12e      	bne.n	8002cfc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f022 0201 	bic.w	r2, r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cb6:	f7ff febf 	bl	8002a38 <HAL_GetTick>
 8002cba:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002cbc:	e012      	b.n	8002ce4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cbe:	f7ff febb 	bl	8002a38 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b0a      	cmp	r3, #10
 8002cca:	d90b      	bls.n	8002ce4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2205      	movs	r2, #5
 8002cdc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e012      	b.n	8002d0a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1e5      	bne.n	8002cbe <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	e006      	b.n	8002d0a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
  }
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b089      	sub	sp, #36	; 0x24
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d26:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d30:	7ffb      	ldrb	r3, [r7, #31]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d003      	beq.n	8002d3e <HAL_CAN_AddTxMessage+0x2c>
 8002d36:	7ffb      	ldrb	r3, [r7, #31]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	f040 80ad 	bne.w	8002e98 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10a      	bne.n	8002d5e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d105      	bne.n	8002d5e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8095 	beq.w	8002e88 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	0e1b      	lsrs	r3, r3, #24
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002d68:	2201      	movs	r2, #1
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10d      	bne.n	8002d96 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002d84:	68f9      	ldr	r1, [r7, #12]
 8002d86:	6809      	ldr	r1, [r1, #0]
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	3318      	adds	r3, #24
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	440b      	add	r3, r1
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	e00f      	b.n	8002db6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002da0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002da6:	68f9      	ldr	r1, [r7, #12]
 8002da8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002daa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	3318      	adds	r3, #24
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	440b      	add	r3, r1
 8002db4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6819      	ldr	r1, [r3, #0]
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	3318      	adds	r3, #24
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	440b      	add	r3, r1
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	7d1b      	ldrb	r3, [r3, #20]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d111      	bne.n	8002df6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	3318      	adds	r3, #24
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	4413      	add	r3, r2
 8002dde:	3304      	adds	r3, #4
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	6811      	ldr	r1, [r2, #0]
 8002de6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	3318      	adds	r3, #24
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	440b      	add	r3, r1
 8002df2:	3304      	adds	r3, #4
 8002df4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3307      	adds	r3, #7
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	061a      	lsls	r2, r3, #24
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3306      	adds	r3, #6
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	041b      	lsls	r3, r3, #16
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3305      	adds	r3, #5
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	4313      	orrs	r3, r2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	3204      	adds	r2, #4
 8002e16:	7812      	ldrb	r2, [r2, #0]
 8002e18:	4610      	mov	r0, r2
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	6811      	ldr	r1, [r2, #0]
 8002e1e:	ea43 0200 	orr.w	r2, r3, r0
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	440b      	add	r3, r1
 8002e28:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002e2c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3303      	adds	r3, #3
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	061a      	lsls	r2, r3, #24
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3302      	adds	r3, #2
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	041b      	lsls	r3, r3, #16
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3301      	adds	r3, #1
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	021b      	lsls	r3, r3, #8
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	7812      	ldrb	r2, [r2, #0]
 8002e4e:	4610      	mov	r0, r2
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	6811      	ldr	r1, [r2, #0]
 8002e54:	ea43 0200 	orr.w	r2, r3, r0
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	440b      	add	r3, r1
 8002e5e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002e62:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	3318      	adds	r3, #24
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	4413      	add	r3, r2
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	6811      	ldr	r1, [r2, #0]
 8002e76:	f043 0201 	orr.w	r2, r3, #1
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	3318      	adds	r3, #24
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	440b      	add	r3, r1
 8002e82:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002e84:	2300      	movs	r3, #0
 8002e86:	e00e      	b.n	8002ea6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e006      	b.n	8002ea6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
  }
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3724      	adds	r7, #36	; 0x24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ec4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ec6:	7dfb      	ldrb	r3, [r7, #23]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d003      	beq.n	8002ed4 <HAL_CAN_GetRxMessage+0x24>
 8002ecc:	7dfb      	ldrb	r3, [r7, #23]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	f040 8103 	bne.w	80030da <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10e      	bne.n	8002ef8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d116      	bne.n	8002f16 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0f7      	b.n	80030e8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d107      	bne.n	8002f16 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e0e8      	b.n	80030e8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	331b      	adds	r3, #27
 8002f1e:	011b      	lsls	r3, r3, #4
 8002f20:	4413      	add	r3, r2
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0204 	and.w	r2, r3, #4
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10c      	bne.n	8002f4e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	331b      	adds	r3, #27
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	4413      	add	r3, r2
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	0d5b      	lsrs	r3, r3, #21
 8002f44:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	e00b      	b.n	8002f66 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	331b      	adds	r3, #27
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	4413      	add	r3, r2
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	08db      	lsrs	r3, r3, #3
 8002f5e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	331b      	adds	r3, #27
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	4413      	add	r3, r2
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0202 	and.w	r2, r3, #2
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	331b      	adds	r3, #27
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	4413      	add	r3, r2
 8002f88:	3304      	adds	r3, #4
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2208      	movs	r2, #8
 8002f98:	611a      	str	r2, [r3, #16]
 8002f9a:	e00b      	b.n	8002fb4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	331b      	adds	r3, #27
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3304      	adds	r3, #4
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 020f 	and.w	r2, r3, #15
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	331b      	adds	r3, #27
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	331b      	adds	r3, #27
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3304      	adds	r3, #4
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	0c1b      	lsrs	r3, r3, #16
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	011b      	lsls	r3, r3, #4
 8003002:	4413      	add	r3, r2
 8003004:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	0a1a      	lsrs	r2, r3, #8
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	3301      	adds	r3, #1
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	011b      	lsls	r3, r3, #4
 800301c:	4413      	add	r3, r2
 800301e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	0c1a      	lsrs	r2, r3, #16
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	3302      	adds	r3, #2
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	4413      	add	r3, r2
 8003038:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	0e1a      	lsrs	r2, r3, #24
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	3303      	adds	r3, #3
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	4413      	add	r3, r2
 8003052:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	3304      	adds	r3, #4
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	4413      	add	r3, r2
 800306a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	0a1a      	lsrs	r2, r3, #8
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	3305      	adds	r3, #5
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	4413      	add	r3, r2
 8003084:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	0c1a      	lsrs	r2, r3, #16
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	3306      	adds	r3, #6
 8003090:	b2d2      	uxtb	r2, r2
 8003092:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	4413      	add	r3, r2
 800309e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	0e1a      	lsrs	r2, r3, #24
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	3307      	adds	r3, #7
 80030aa:	b2d2      	uxtb	r2, r2
 80030ac:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d108      	bne.n	80030c6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0220 	orr.w	r2, r2, #32
 80030c2:	60da      	str	r2, [r3, #12]
 80030c4:	e007      	b.n	80030d6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0220 	orr.w	r2, r2, #32
 80030d4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	e006      	b.n	80030e8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
  }
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bc80      	pop	{r7}
 80030f0:	4770      	bx	lr

080030f2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80030f2:	b480      	push	{r7}
 80030f4:	b085      	sub	sp, #20
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003102:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d002      	beq.n	8003110 <HAL_CAN_ActivateNotification+0x1e>
 800310a:	7bfb      	ldrb	r3, [r7, #15]
 800310c:	2b02      	cmp	r3, #2
 800310e:	d109      	bne.n	8003124 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6959      	ldr	r1, [r3, #20]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	e006      	b.n	8003132 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
  }
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08a      	sub	sp, #40	; 0x28
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003144:	2300      	movs	r3, #0
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d07c      	beq.n	800327c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d023      	beq.n	80031d4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2201      	movs	r2, #1
 8003192:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f983 	bl	80034aa <HAL_CAN_TxMailbox0CompleteCallback>
 80031a4:	e016      	b.n	80031d4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d004      	beq.n	80031ba <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
 80031b8:	e00c      	b.n	80031d4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d004      	beq.n	80031ce <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80031ca:	627b      	str	r3, [r7, #36]	; 0x24
 80031cc:	e002      	b.n	80031d4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f986 	bl	80034e0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d024      	beq.n	8003228 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f962 	bl	80034bc <HAL_CAN_TxMailbox1CompleteCallback>
 80031f8:	e016      	b.n	8003228 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003200:	2b00      	cmp	r3, #0
 8003202:	d004      	beq.n	800320e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
 800320c:	e00c      	b.n	8003228 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003214:	2b00      	cmp	r3, #0
 8003216:	d004      	beq.n	8003222 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800321e:	627b      	str	r3, [r7, #36]	; 0x24
 8003220:	e002      	b.n	8003228 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f965 	bl	80034f2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d024      	beq.n	800327c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800323a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f941 	bl	80034ce <HAL_CAN_TxMailbox2CompleteCallback>
 800324c:	e016      	b.n	800327c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d004      	beq.n	8003262 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800325e:	627b      	str	r3, [r7, #36]	; 0x24
 8003260:	e00c      	b.n	800327c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d004      	beq.n	8003276 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800326c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
 8003274:	e002      	b.n	800327c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f944 	bl	8003504 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00c      	beq.n	80032a0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f003 0310 	and.w	r3, r3, #16
 800328c:	2b00      	cmp	r3, #0
 800328e:	d007      	beq.n	80032a0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003296:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2210      	movs	r2, #16
 800329e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00b      	beq.n	80032c2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d006      	beq.n	80032c2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2208      	movs	r2, #8
 80032ba:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f92a 	bl	8003516 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d009      	beq.n	80032e0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7fe f9e4 	bl	80016a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00c      	beq.n	8003304 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d007      	beq.n	8003304 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2210      	movs	r2, #16
 8003302:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003304:	6a3b      	ldr	r3, [r7, #32]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00b      	beq.n	8003326 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b00      	cmp	r3, #0
 8003316:	d006      	beq.n	8003326 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2208      	movs	r2, #8
 800331e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f90a 	bl	800353a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	f003 0310 	and.w	r3, r3, #16
 800332c:	2b00      	cmp	r3, #0
 800332e:	d009      	beq.n	8003344 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f8f2 	bl	8003528 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00b      	beq.n	8003366 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	2b00      	cmp	r3, #0
 8003356:	d006      	beq.n	8003366 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2210      	movs	r2, #16
 800335e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f8f3 	bl	800354c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00b      	beq.n	8003388 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d006      	beq.n	8003388 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2208      	movs	r2, #8
 8003380:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f8eb 	bl	800355e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d07b      	beq.n	800348a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d072      	beq.n	8003482 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d008      	beq.n	80033b8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d008      	beq.n	80033d4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	f043 0302 	orr.w	r3, r3, #2
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d008      	beq.n	80033f0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	f043 0304 	orr.w	r3, r3, #4
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d043      	beq.n	8003482 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003400:	2b00      	cmp	r3, #0
 8003402:	d03e      	beq.n	8003482 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800340a:	2b60      	cmp	r3, #96	; 0x60
 800340c:	d02b      	beq.n	8003466 <HAL_CAN_IRQHandler+0x32a>
 800340e:	2b60      	cmp	r3, #96	; 0x60
 8003410:	d82e      	bhi.n	8003470 <HAL_CAN_IRQHandler+0x334>
 8003412:	2b50      	cmp	r3, #80	; 0x50
 8003414:	d022      	beq.n	800345c <HAL_CAN_IRQHandler+0x320>
 8003416:	2b50      	cmp	r3, #80	; 0x50
 8003418:	d82a      	bhi.n	8003470 <HAL_CAN_IRQHandler+0x334>
 800341a:	2b40      	cmp	r3, #64	; 0x40
 800341c:	d019      	beq.n	8003452 <HAL_CAN_IRQHandler+0x316>
 800341e:	2b40      	cmp	r3, #64	; 0x40
 8003420:	d826      	bhi.n	8003470 <HAL_CAN_IRQHandler+0x334>
 8003422:	2b30      	cmp	r3, #48	; 0x30
 8003424:	d010      	beq.n	8003448 <HAL_CAN_IRQHandler+0x30c>
 8003426:	2b30      	cmp	r3, #48	; 0x30
 8003428:	d822      	bhi.n	8003470 <HAL_CAN_IRQHandler+0x334>
 800342a:	2b10      	cmp	r3, #16
 800342c:	d002      	beq.n	8003434 <HAL_CAN_IRQHandler+0x2f8>
 800342e:	2b20      	cmp	r3, #32
 8003430:	d005      	beq.n	800343e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003432:	e01d      	b.n	8003470 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	f043 0308 	orr.w	r3, r3, #8
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800343c:	e019      	b.n	8003472 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	f043 0310 	orr.w	r3, r3, #16
 8003444:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003446:	e014      	b.n	8003472 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	f043 0320 	orr.w	r3, r3, #32
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003450:	e00f      	b.n	8003472 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003458:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800345a:	e00a      	b.n	8003472 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003464:	e005      	b.n	8003472 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800346e:	e000      	b.n	8003472 <HAL_CAN_IRQHandler+0x336>
            break;
 8003470:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699a      	ldr	r2, [r3, #24]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003480:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2204      	movs	r2, #4
 8003488:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f867 	bl	8003570 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80034a2:	bf00      	nop
 80034a4:	3728      	adds	r7, #40	; 0x28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bc80      	pop	{r7}
 80034ba:	4770      	bx	lr

080034bc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr

080034ce <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	bc80      	pop	{r7}
 80034de:	4770      	bx	lr

080034e0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr

080034f2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr

08003516 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr

0800353a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr

0800355e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr
	...

08003584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003594:	4b0c      	ldr	r3, [pc, #48]	; (80035c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035a0:	4013      	ands	r3, r2
 80035a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035b6:	4a04      	ldr	r2, [pc, #16]	; (80035c8 <__NVIC_SetPriorityGrouping+0x44>)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	60d3      	str	r3, [r2, #12]
}
 80035bc:	bf00      	nop
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035d0:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <__NVIC_GetPriorityGrouping+0x18>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	0a1b      	lsrs	r3, r3, #8
 80035d6:	f003 0307 	and.w	r3, r3, #7
}
 80035da:	4618      	mov	r0, r3
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	db0b      	blt.n	8003612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	f003 021f 	and.w	r2, r3, #31
 8003600:	4906      	ldr	r1, [pc, #24]	; (800361c <__NVIC_EnableIRQ+0x34>)
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	2001      	movs	r0, #1
 800360a:	fa00 f202 	lsl.w	r2, r0, r2
 800360e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	e000e100 	.word	0xe000e100

08003620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	6039      	str	r1, [r7, #0]
 800362a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800362c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003630:	2b00      	cmp	r3, #0
 8003632:	db0a      	blt.n	800364a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	b2da      	uxtb	r2, r3
 8003638:	490c      	ldr	r1, [pc, #48]	; (800366c <__NVIC_SetPriority+0x4c>)
 800363a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363e:	0112      	lsls	r2, r2, #4
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	440b      	add	r3, r1
 8003644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003648:	e00a      	b.n	8003660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	b2da      	uxtb	r2, r3
 800364e:	4908      	ldr	r1, [pc, #32]	; (8003670 <__NVIC_SetPriority+0x50>)
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	3b04      	subs	r3, #4
 8003658:	0112      	lsls	r2, r2, #4
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	440b      	add	r3, r1
 800365e:	761a      	strb	r2, [r3, #24]
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	bc80      	pop	{r7}
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	e000e100 	.word	0xe000e100
 8003670:	e000ed00 	.word	0xe000ed00

08003674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003674:	b480      	push	{r7}
 8003676:	b089      	sub	sp, #36	; 0x24
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f1c3 0307 	rsb	r3, r3, #7
 800368e:	2b04      	cmp	r3, #4
 8003690:	bf28      	it	cs
 8003692:	2304      	movcs	r3, #4
 8003694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	3304      	adds	r3, #4
 800369a:	2b06      	cmp	r3, #6
 800369c:	d902      	bls.n	80036a4 <NVIC_EncodePriority+0x30>
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	3b03      	subs	r3, #3
 80036a2:	e000      	b.n	80036a6 <NVIC_EncodePriority+0x32>
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a8:	f04f 32ff 	mov.w	r2, #4294967295
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43da      	mvns	r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	401a      	ands	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036bc:	f04f 31ff 	mov.w	r1, #4294967295
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	fa01 f303 	lsl.w	r3, r1, r3
 80036c6:	43d9      	mvns	r1, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036cc:	4313      	orrs	r3, r2
         );
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3724      	adds	r7, #36	; 0x24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr

080036d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036e8:	d301      	bcc.n	80036ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ea:	2301      	movs	r3, #1
 80036ec:	e00f      	b.n	800370e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ee:	4a0a      	ldr	r2, [pc, #40]	; (8003718 <SysTick_Config+0x40>)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036f6:	210f      	movs	r1, #15
 80036f8:	f04f 30ff 	mov.w	r0, #4294967295
 80036fc:	f7ff ff90 	bl	8003620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <SysTick_Config+0x40>)
 8003702:	2200      	movs	r2, #0
 8003704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003706:	4b04      	ldr	r3, [pc, #16]	; (8003718 <SysTick_Config+0x40>)
 8003708:	2207      	movs	r2, #7
 800370a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	e000e010 	.word	0xe000e010

0800371c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff ff2d 	bl	8003584 <__NVIC_SetPriorityGrouping>
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003732:	b580      	push	{r7, lr}
 8003734:	b086      	sub	sp, #24
 8003736:	af00      	add	r7, sp, #0
 8003738:	4603      	mov	r3, r0
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
 800373e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003744:	f7ff ff42 	bl	80035cc <__NVIC_GetPriorityGrouping>
 8003748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	6978      	ldr	r0, [r7, #20]
 8003750:	f7ff ff90 	bl	8003674 <NVIC_EncodePriority>
 8003754:	4602      	mov	r2, r0
 8003756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800375a:	4611      	mov	r1, r2
 800375c:	4618      	mov	r0, r3
 800375e:	f7ff ff5f 	bl	8003620 <__NVIC_SetPriority>
}
 8003762:	bf00      	nop
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b082      	sub	sp, #8
 800376e:	af00      	add	r7, sp, #0
 8003770:	4603      	mov	r3, r0
 8003772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff ff35 	bl	80035e8 <__NVIC_EnableIRQ>
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b082      	sub	sp, #8
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff ffa2 	bl	80036d8 <SysTick_Config>
 8003794:	4603      	mov	r3, r0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3708      	adds	r7, #8
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037ae:	e16f      	b.n	8003a90 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	2101      	movs	r1, #1
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	fa01 f303 	lsl.w	r3, r1, r3
 80037bc:	4013      	ands	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 8161 	beq.w	8003a8a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d005      	beq.n	80037e0 <HAL_GPIO_Init+0x40>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d130      	bne.n	8003842 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	2203      	movs	r2, #3
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43db      	mvns	r3, r3
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4013      	ands	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003816:	2201      	movs	r2, #1
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4013      	ands	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	091b      	lsrs	r3, r3, #4
 800382c:	f003 0201 	and.w	r2, r3, #1
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b03      	cmp	r3, #3
 800384c:	d017      	beq.n	800387e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	2203      	movs	r2, #3
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4013      	ands	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4313      	orrs	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d123      	bne.n	80038d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	08da      	lsrs	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3208      	adds	r2, #8
 8003892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003896:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	220f      	movs	r2, #15
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43db      	mvns	r3, r3
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4013      	ands	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	691a      	ldr	r2, [r3, #16]
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	08da      	lsrs	r2, r3, #3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3208      	adds	r2, #8
 80038cc:	6939      	ldr	r1, [r7, #16]
 80038ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	2203      	movs	r2, #3
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	43db      	mvns	r3, r3
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	4013      	ands	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f003 0203 	and.w	r2, r3, #3
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 80bb 	beq.w	8003a8a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003914:	2300      	movs	r3, #0
 8003916:	60bb      	str	r3, [r7, #8]
 8003918:	4b64      	ldr	r3, [pc, #400]	; (8003aac <HAL_GPIO_Init+0x30c>)
 800391a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391c:	4a63      	ldr	r2, [pc, #396]	; (8003aac <HAL_GPIO_Init+0x30c>)
 800391e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003922:	6453      	str	r3, [r2, #68]	; 0x44
 8003924:	4b61      	ldr	r3, [pc, #388]	; (8003aac <HAL_GPIO_Init+0x30c>)
 8003926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003930:	4a5f      	ldr	r2, [pc, #380]	; (8003ab0 <HAL_GPIO_Init+0x310>)
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	089b      	lsrs	r3, r3, #2
 8003936:	3302      	adds	r3, #2
 8003938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	220f      	movs	r2, #15
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	43db      	mvns	r3, r3
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4013      	ands	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a57      	ldr	r2, [pc, #348]	; (8003ab4 <HAL_GPIO_Init+0x314>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d031      	beq.n	80039c0 <HAL_GPIO_Init+0x220>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a56      	ldr	r2, [pc, #344]	; (8003ab8 <HAL_GPIO_Init+0x318>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d02b      	beq.n	80039bc <HAL_GPIO_Init+0x21c>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a55      	ldr	r2, [pc, #340]	; (8003abc <HAL_GPIO_Init+0x31c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d025      	beq.n	80039b8 <HAL_GPIO_Init+0x218>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a54      	ldr	r2, [pc, #336]	; (8003ac0 <HAL_GPIO_Init+0x320>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d01f      	beq.n	80039b4 <HAL_GPIO_Init+0x214>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a53      	ldr	r2, [pc, #332]	; (8003ac4 <HAL_GPIO_Init+0x324>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d019      	beq.n	80039b0 <HAL_GPIO_Init+0x210>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a52      	ldr	r2, [pc, #328]	; (8003ac8 <HAL_GPIO_Init+0x328>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d013      	beq.n	80039ac <HAL_GPIO_Init+0x20c>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a51      	ldr	r2, [pc, #324]	; (8003acc <HAL_GPIO_Init+0x32c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d00d      	beq.n	80039a8 <HAL_GPIO_Init+0x208>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a50      	ldr	r2, [pc, #320]	; (8003ad0 <HAL_GPIO_Init+0x330>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d007      	beq.n	80039a4 <HAL_GPIO_Init+0x204>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a4f      	ldr	r2, [pc, #316]	; (8003ad4 <HAL_GPIO_Init+0x334>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d101      	bne.n	80039a0 <HAL_GPIO_Init+0x200>
 800399c:	2308      	movs	r3, #8
 800399e:	e010      	b.n	80039c2 <HAL_GPIO_Init+0x222>
 80039a0:	2309      	movs	r3, #9
 80039a2:	e00e      	b.n	80039c2 <HAL_GPIO_Init+0x222>
 80039a4:	2307      	movs	r3, #7
 80039a6:	e00c      	b.n	80039c2 <HAL_GPIO_Init+0x222>
 80039a8:	2306      	movs	r3, #6
 80039aa:	e00a      	b.n	80039c2 <HAL_GPIO_Init+0x222>
 80039ac:	2305      	movs	r3, #5
 80039ae:	e008      	b.n	80039c2 <HAL_GPIO_Init+0x222>
 80039b0:	2304      	movs	r3, #4
 80039b2:	e006      	b.n	80039c2 <HAL_GPIO_Init+0x222>
 80039b4:	2303      	movs	r3, #3
 80039b6:	e004      	b.n	80039c2 <HAL_GPIO_Init+0x222>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e002      	b.n	80039c2 <HAL_GPIO_Init+0x222>
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <HAL_GPIO_Init+0x222>
 80039c0:	2300      	movs	r3, #0
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	f002 0203 	and.w	r2, r2, #3
 80039c8:	0092      	lsls	r2, r2, #2
 80039ca:	4093      	lsls	r3, r2
 80039cc:	461a      	mov	r2, r3
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039d4:	4936      	ldr	r1, [pc, #216]	; (8003ab0 <HAL_GPIO_Init+0x310>)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	089b      	lsrs	r3, r3, #2
 80039da:	3302      	adds	r3, #2
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039e2:	4b3d      	ldr	r3, [pc, #244]	; (8003ad8 <HAL_GPIO_Init+0x338>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	43db      	mvns	r3, r3
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4013      	ands	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a06:	4a34      	ldr	r2, [pc, #208]	; (8003ad8 <HAL_GPIO_Init+0x338>)
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a0c:	4b32      	ldr	r3, [pc, #200]	; (8003ad8 <HAL_GPIO_Init+0x338>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	43db      	mvns	r3, r3
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a30:	4a29      	ldr	r2, [pc, #164]	; (8003ad8 <HAL_GPIO_Init+0x338>)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a36:	4b28      	ldr	r3, [pc, #160]	; (8003ad8 <HAL_GPIO_Init+0x338>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	43db      	mvns	r3, r3
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	4013      	ands	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a5a:	4a1f      	ldr	r2, [pc, #124]	; (8003ad8 <HAL_GPIO_Init+0x338>)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a60:	4b1d      	ldr	r3, [pc, #116]	; (8003ad8 <HAL_GPIO_Init+0x338>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a84:	4a14      	ldr	r2, [pc, #80]	; (8003ad8 <HAL_GPIO_Init+0x338>)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	fa22 f303 	lsr.w	r3, r2, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f47f ae88 	bne.w	80037b0 <HAL_GPIO_Init+0x10>
  }
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	40013800 	.word	0x40013800
 8003ab4:	40020000 	.word	0x40020000
 8003ab8:	40020400 	.word	0x40020400
 8003abc:	40020800 	.word	0x40020800
 8003ac0:	40020c00 	.word	0x40020c00
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40021400 	.word	0x40021400
 8003acc:	40021800 	.word	0x40021800
 8003ad0:	40021c00 	.word	0x40021c00
 8003ad4:	40022000 	.word	0x40022000
 8003ad8:	40013c00 	.word	0x40013c00

08003adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	807b      	strh	r3, [r7, #2]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003aec:	787b      	ldrb	r3, [r7, #1]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003af2:	887a      	ldrh	r2, [r7, #2]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003af8:	e003      	b.n	8003b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003afa:	887b      	ldrh	r3, [r7, #2]
 8003afc:	041a      	lsls	r2, r3, #16
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	619a      	str	r2, [r3, #24]
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr

08003b0c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b1e:	887a      	ldrh	r2, [r7, #2]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4013      	ands	r3, r2
 8003b24:	041a      	lsls	r2, r3, #16
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	43d9      	mvns	r1, r3
 8003b2a:	887b      	ldrh	r3, [r7, #2]
 8003b2c:	400b      	ands	r3, r1
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	619a      	str	r2, [r3, #24]
}
 8003b34:	bf00      	nop
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr

08003b3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b40:	b08f      	sub	sp, #60	; 0x3c
 8003b42:	af0a      	add	r7, sp, #40	; 0x28
 8003b44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e10f      	b.n	8003d70 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d106      	bne.n	8003b70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7fe fe7c 	bl	8002868 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2203      	movs	r2, #3
 8003b74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d102      	bne.n	8003b8a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f001 ff2f 	bl	80059f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	603b      	str	r3, [r7, #0]
 8003b9a:	687e      	ldr	r6, [r7, #4]
 8003b9c:	466d      	mov	r5, sp
 8003b9e:	f106 0410 	add.w	r4, r6, #16
 8003ba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ba4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ba6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ba8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003baa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bae:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bb2:	1d33      	adds	r3, r6, #4
 8003bb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bb6:	6838      	ldr	r0, [r7, #0]
 8003bb8:	f001 fec4 	bl	8005944 <USB_CoreInit>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d005      	beq.n	8003bce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e0d0      	b.n	8003d70 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f001 ff1c 	bl	8005a12 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bda:	2300      	movs	r3, #0
 8003bdc:	73fb      	strb	r3, [r7, #15]
 8003bde:	e04a      	b.n	8003c76 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003be0:	7bfa      	ldrb	r2, [r7, #15]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4413      	add	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	333d      	adds	r3, #61	; 0x3d
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003bf4:	7bfa      	ldrb	r2, [r7, #15]
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	333c      	adds	r3, #60	; 0x3c
 8003c04:	7bfa      	ldrb	r2, [r7, #15]
 8003c06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c08:	7bfa      	ldrb	r2, [r7, #15]
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	b298      	uxth	r0, r3
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	3356      	adds	r3, #86	; 0x56
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c20:	7bfa      	ldrb	r2, [r7, #15]
 8003c22:	6879      	ldr	r1, [r7, #4]
 8003c24:	4613      	mov	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	3340      	adds	r3, #64	; 0x40
 8003c30:	2200      	movs	r2, #0
 8003c32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c34:	7bfa      	ldrb	r2, [r7, #15]
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	3344      	adds	r3, #68	; 0x44
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c48:	7bfa      	ldrb	r2, [r7, #15]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	3348      	adds	r3, #72	; 0x48
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c5c:	7bfa      	ldrb	r2, [r7, #15]
 8003c5e:	6879      	ldr	r1, [r7, #4]
 8003c60:	4613      	mov	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	4413      	add	r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	334c      	adds	r3, #76	; 0x4c
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	3301      	adds	r3, #1
 8003c74:	73fb      	strb	r3, [r7, #15]
 8003c76:	7bfa      	ldrb	r2, [r7, #15]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d3af      	bcc.n	8003be0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c80:	2300      	movs	r3, #0
 8003c82:	73fb      	strb	r3, [r7, #15]
 8003c84:	e044      	b.n	8003d10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c86:	7bfa      	ldrb	r2, [r7, #15]
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003c98:	2200      	movs	r2, #0
 8003c9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c9c:	7bfa      	ldrb	r2, [r7, #15]
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003cae:	7bfa      	ldrb	r2, [r7, #15]
 8003cb0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cb2:	7bfa      	ldrb	r2, [r7, #15]
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4413      	add	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003cc8:	7bfa      	ldrb	r2, [r7, #15]
 8003cca:	6879      	ldr	r1, [r7, #4]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	4413      	add	r3, r2
 8003cd2:	009b      	lsls	r3, r3, #2
 8003cd4:	440b      	add	r3, r1
 8003cd6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003cde:	7bfa      	ldrb	r2, [r7, #15]
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4413      	add	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	440b      	add	r3, r1
 8003cec:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003cf4:	7bfa      	ldrb	r2, [r7, #15]
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	4413      	add	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	73fb      	strb	r3, [r7, #15]
 8003d10:	7bfa      	ldrb	r2, [r7, #15]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d3b5      	bcc.n	8003c86 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	687e      	ldr	r6, [r7, #4]
 8003d22:	466d      	mov	r5, sp
 8003d24:	f106 0410 	add.w	r4, r6, #16
 8003d28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d34:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d38:	1d33      	adds	r3, r6, #4
 8003d3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d3c:	6838      	ldr	r0, [r7, #0]
 8003d3e:	f001 feb5 	bl	8005aac <USB_DevInit>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d005      	beq.n	8003d54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e00d      	b.n	8003d70 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f002 f875 	bl	8005e58 <USB_DevDisconnect>

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	; 0x28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e23b      	b.n	8004202 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d050      	beq.n	8003e38 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d96:	4b9e      	ldr	r3, [pc, #632]	; (8004010 <HAL_RCC_OscConfig+0x298>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d00c      	beq.n	8003dbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003da2:	4b9b      	ldr	r3, [pc, #620]	; (8004010 <HAL_RCC_OscConfig+0x298>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d112      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dae:	4b98      	ldr	r3, [pc, #608]	; (8004010 <HAL_RCC_OscConfig+0x298>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dba:	d10b      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dbc:	4b94      	ldr	r3, [pc, #592]	; (8004010 <HAL_RCC_OscConfig+0x298>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d036      	beq.n	8003e36 <HAL_RCC_OscConfig+0xbe>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d132      	bne.n	8003e36 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e216      	b.n	8004202 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	4b8e      	ldr	r3, [pc, #568]	; (8004014 <HAL_RCC_OscConfig+0x29c>)
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d013      	beq.n	8003e0e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de6:	f7fe fe27 	bl	8002a38 <HAL_GetTick>
 8003dea:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dee:	f7fe fe23 	bl	8002a38 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b64      	cmp	r3, #100	; 0x64
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e200      	b.n	8004202 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e00:	4b83      	ldr	r3, [pc, #524]	; (8004010 <HAL_RCC_OscConfig+0x298>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0f0      	beq.n	8003dee <HAL_RCC_OscConfig+0x76>
 8003e0c:	e014      	b.n	8003e38 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0e:	f7fe fe13 	bl	8002a38 <HAL_GetTick>
 8003e12:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e16:	f7fe fe0f 	bl	8002a38 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b64      	cmp	r3, #100	; 0x64
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e1ec      	b.n	8004202 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e28:	4b79      	ldr	r3, [pc, #484]	; (8004010 <HAL_RCC_OscConfig+0x298>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f0      	bne.n	8003e16 <HAL_RCC_OscConfig+0x9e>
 8003e34:	e000      	b.n	8003e38 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e36:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d077      	beq.n	8003f34 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e44:	4b72      	ldr	r3, [pc, #456]	; (8004010 <HAL_RCC_OscConfig+0x298>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 030c 	and.w	r3, r3, #12
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00b      	beq.n	8003e68 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e50:	4b6f      	ldr	r3, [pc, #444]	; (8004010 <HAL_RCC_OscConfig+0x298>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d126      	bne.n	8003eaa <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e5c:	4b6c      	ldr	r3, [pc, #432]	; (8004010 <HAL_RCC_OscConfig+0x298>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d120      	bne.n	8003eaa <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e68:	4b69      	ldr	r3, [pc, #420]	; (8004010 <HAL_RCC_OscConfig+0x298>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <HAL_RCC_OscConfig+0x108>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e1c0      	b.n	8004202 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e80:	4b63      	ldr	r3, [pc, #396]	; (8004010 <HAL_RCC_OscConfig+0x298>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	21f8      	movs	r1, #248	; 0xf8
 8003e8e:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e90:	69b9      	ldr	r1, [r7, #24]
 8003e92:	fa91 f1a1 	rbit	r1, r1
 8003e96:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e98:	6979      	ldr	r1, [r7, #20]
 8003e9a:	fab1 f181 	clz	r1, r1
 8003e9e:	b2c9      	uxtb	r1, r1
 8003ea0:	408b      	lsls	r3, r1
 8003ea2:	495b      	ldr	r1, [pc, #364]	; (8004010 <HAL_RCC_OscConfig+0x298>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea8:	e044      	b.n	8003f34 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d02a      	beq.n	8003f08 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb2:	4b59      	ldr	r3, [pc, #356]	; (8004018 <HAL_RCC_OscConfig+0x2a0>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb8:	f7fe fdbe 	bl	8002a38 <HAL_GetTick>
 8003ebc:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec0:	f7fe fdba 	bl	8002a38 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	6a3b      	ldr	r3, [r7, #32]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e197      	b.n	8004202 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed2:	4b4f      	ldr	r3, [pc, #316]	; (8004010 <HAL_RCC_OscConfig+0x298>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ede:	4b4c      	ldr	r3, [pc, #304]	; (8004010 <HAL_RCC_OscConfig+0x298>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	21f8      	movs	r1, #248	; 0xf8
 8003eec:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eee:	6939      	ldr	r1, [r7, #16]
 8003ef0:	fa91 f1a1 	rbit	r1, r1
 8003ef4:	60f9      	str	r1, [r7, #12]
  return result;
 8003ef6:	68f9      	ldr	r1, [r7, #12]
 8003ef8:	fab1 f181 	clz	r1, r1
 8003efc:	b2c9      	uxtb	r1, r1
 8003efe:	408b      	lsls	r3, r1
 8003f00:	4943      	ldr	r1, [pc, #268]	; (8004010 <HAL_RCC_OscConfig+0x298>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	600b      	str	r3, [r1, #0]
 8003f06:	e015      	b.n	8003f34 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f08:	4b43      	ldr	r3, [pc, #268]	; (8004018 <HAL_RCC_OscConfig+0x2a0>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0e:	f7fe fd93 	bl	8002a38 <HAL_GetTick>
 8003f12:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f16:	f7fe fd8f 	bl	8002a38 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e16c      	b.n	8004202 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f28:	4b39      	ldr	r3, [pc, #228]	; (8004010 <HAL_RCC_OscConfig+0x298>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f0      	bne.n	8003f16 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d030      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d016      	beq.n	8003f76 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f48:	4b34      	ldr	r3, [pc, #208]	; (800401c <HAL_RCC_OscConfig+0x2a4>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f4e:	f7fe fd73 	bl	8002a38 <HAL_GetTick>
 8003f52:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f56:	f7fe fd6f 	bl	8002a38 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e14c      	b.n	8004202 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f68:	4b29      	ldr	r3, [pc, #164]	; (8004010 <HAL_RCC_OscConfig+0x298>)
 8003f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d0f0      	beq.n	8003f56 <HAL_RCC_OscConfig+0x1de>
 8003f74:	e015      	b.n	8003fa2 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f76:	4b29      	ldr	r3, [pc, #164]	; (800401c <HAL_RCC_OscConfig+0x2a4>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f7c:	f7fe fd5c 	bl	8002a38 <HAL_GetTick>
 8003f80:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f84:	f7fe fd58 	bl	8002a38 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	6a3b      	ldr	r3, [r7, #32]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e135      	b.n	8004202 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f96:	4b1e      	ldr	r3, [pc, #120]	; (8004010 <HAL_RCC_OscConfig+0x298>)
 8003f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1f0      	bne.n	8003f84 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f000 8087 	beq.w	80040be <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fb6:	4b16      	ldr	r3, [pc, #88]	; (8004010 <HAL_RCC_OscConfig+0x298>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d110      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	60bb      	str	r3, [r7, #8]
 8003fc6:	4b12      	ldr	r3, [pc, #72]	; (8004010 <HAL_RCC_OscConfig+0x298>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	4a11      	ldr	r2, [pc, #68]	; (8004010 <HAL_RCC_OscConfig+0x298>)
 8003fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd2:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <HAL_RCC_OscConfig+0x298>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fda:	60bb      	str	r3, [r7, #8]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003fe4:	4b0e      	ldr	r3, [pc, #56]	; (8004020 <HAL_RCC_OscConfig+0x2a8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a0d      	ldr	r2, [pc, #52]	; (8004020 <HAL_RCC_OscConfig+0x2a8>)
 8003fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fee:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <HAL_RCC_OscConfig+0x2a8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d122      	bne.n	8004042 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ffc:	4b08      	ldr	r3, [pc, #32]	; (8004020 <HAL_RCC_OscConfig+0x2a8>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a07      	ldr	r2, [pc, #28]	; (8004020 <HAL_RCC_OscConfig+0x2a8>)
 8004002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004006:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004008:	f7fe fd16 	bl	8002a38 <HAL_GetTick>
 800400c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800400e:	e012      	b.n	8004036 <HAL_RCC_OscConfig+0x2be>
 8004010:	40023800 	.word	0x40023800
 8004014:	40023802 	.word	0x40023802
 8004018:	42470000 	.word	0x42470000
 800401c:	42470e80 	.word	0x42470e80
 8004020:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004024:	f7fe fd08 	bl	8002a38 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	6a3b      	ldr	r3, [r7, #32]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e0e5      	b.n	8004202 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004036:	4b75      	ldr	r3, [pc, #468]	; (800420c <HAL_RCC_OscConfig+0x494>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0f0      	beq.n	8004024 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	4b72      	ldr	r3, [pc, #456]	; (8004210 <HAL_RCC_OscConfig+0x498>)
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d015      	beq.n	8004080 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004054:	f7fe fcf0 	bl	8002a38 <HAL_GetTick>
 8004058:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405a:	e00a      	b.n	8004072 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800405c:	f7fe fcec 	bl	8002a38 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	f241 3288 	movw	r2, #5000	; 0x1388
 800406a:	4293      	cmp	r3, r2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e0c7      	b.n	8004202 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004072:	4b68      	ldr	r3, [pc, #416]	; (8004214 <HAL_RCC_OscConfig+0x49c>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0ee      	beq.n	800405c <HAL_RCC_OscConfig+0x2e4>
 800407e:	e014      	b.n	80040aa <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004080:	f7fe fcda 	bl	8002a38 <HAL_GetTick>
 8004084:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004086:	e00a      	b.n	800409e <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004088:	f7fe fcd6 	bl	8002a38 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	f241 3288 	movw	r2, #5000	; 0x1388
 8004096:	4293      	cmp	r3, r2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e0b1      	b.n	8004202 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800409e:	4b5d      	ldr	r3, [pc, #372]	; (8004214 <HAL_RCC_OscConfig+0x49c>)
 80040a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1ee      	bne.n	8004088 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d105      	bne.n	80040be <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b2:	4b58      	ldr	r3, [pc, #352]	; (8004214 <HAL_RCC_OscConfig+0x49c>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	4a57      	ldr	r2, [pc, #348]	; (8004214 <HAL_RCC_OscConfig+0x49c>)
 80040b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 809c 	beq.w	8004200 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040c8:	4b52      	ldr	r3, [pc, #328]	; (8004214 <HAL_RCC_OscConfig+0x49c>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 030c 	and.w	r3, r3, #12
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d061      	beq.n	8004198 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d146      	bne.n	800416a <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040dc:	4b4e      	ldr	r3, [pc, #312]	; (8004218 <HAL_RCC_OscConfig+0x4a0>)
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e2:	f7fe fca9 	bl	8002a38 <HAL_GetTick>
 80040e6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ea:	f7fe fca5 	bl	8002a38 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b64      	cmp	r3, #100	; 0x64
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e082      	b.n	8004202 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fc:	4b45      	ldr	r3, [pc, #276]	; (8004214 <HAL_RCC_OscConfig+0x49c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1f0      	bne.n	80040ea <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004108:	4b42      	ldr	r3, [pc, #264]	; (8004214 <HAL_RCC_OscConfig+0x49c>)
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	4b43      	ldr	r3, [pc, #268]	; (800421c <HAL_RCC_OscConfig+0x4a4>)
 800410e:	4013      	ands	r3, r2
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	69d1      	ldr	r1, [r2, #28]
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6a12      	ldr	r2, [r2, #32]
 8004118:	4311      	orrs	r1, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800411e:	0192      	lsls	r2, r2, #6
 8004120:	4311      	orrs	r1, r2
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004126:	0612      	lsls	r2, r2, #24
 8004128:	4311      	orrs	r1, r2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800412e:	0852      	lsrs	r2, r2, #1
 8004130:	3a01      	subs	r2, #1
 8004132:	0412      	lsls	r2, r2, #16
 8004134:	430a      	orrs	r2, r1
 8004136:	4937      	ldr	r1, [pc, #220]	; (8004214 <HAL_RCC_OscConfig+0x49c>)
 8004138:	4313      	orrs	r3, r2
 800413a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800413c:	4b36      	ldr	r3, [pc, #216]	; (8004218 <HAL_RCC_OscConfig+0x4a0>)
 800413e:	2201      	movs	r2, #1
 8004140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004142:	f7fe fc79 	bl	8002a38 <HAL_GetTick>
 8004146:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800414a:	f7fe fc75 	bl	8002a38 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b64      	cmp	r3, #100	; 0x64
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e052      	b.n	8004202 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415c:	4b2d      	ldr	r3, [pc, #180]	; (8004214 <HAL_RCC_OscConfig+0x49c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0f0      	beq.n	800414a <HAL_RCC_OscConfig+0x3d2>
 8004168:	e04a      	b.n	8004200 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416a:	4b2b      	ldr	r3, [pc, #172]	; (8004218 <HAL_RCC_OscConfig+0x4a0>)
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004170:	f7fe fc62 	bl	8002a38 <HAL_GetTick>
 8004174:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004178:	f7fe fc5e 	bl	8002a38 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b64      	cmp	r3, #100	; 0x64
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e03b      	b.n	8004202 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418a:	4b22      	ldr	r3, [pc, #136]	; (8004214 <HAL_RCC_OscConfig+0x49c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0x400>
 8004196:	e033      	b.n	8004200 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e02e      	b.n	8004202 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80041a4:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <HAL_RCC_OscConfig+0x49c>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d121      	bne.n	80041fc <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d11a      	bne.n	80041fc <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041cc:	4013      	ands	r3, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041d2:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d111      	bne.n	80041fc <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	085b      	lsrs	r3, r3, #1
 80041e4:	3b01      	subs	r3, #1
 80041e6:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d107      	bne.n	80041fc <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f6:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e000      	b.n	8004202 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3728      	adds	r7, #40	; 0x28
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	40007000 	.word	0x40007000
 8004210:	40023870 	.word	0x40023870
 8004214:	40023800 	.word	0x40023800
 8004218:	42470060 	.word	0x42470060
 800421c:	f0bc8000 	.word	0xf0bc8000

08004220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0d2      	b.n	80043da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004234:	4b6b      	ldr	r3, [pc, #428]	; (80043e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 030f 	and.w	r3, r3, #15
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d90c      	bls.n	800425c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004242:	4b68      	ldr	r3, [pc, #416]	; (80043e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800424a:	4b66      	ldr	r3, [pc, #408]	; (80043e4 <HAL_RCC_ClockConfig+0x1c4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d001      	beq.n	800425c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e0be      	b.n	80043da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d020      	beq.n	80042aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004274:	4b5c      	ldr	r3, [pc, #368]	; (80043e8 <HAL_RCC_ClockConfig+0x1c8>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	4a5b      	ldr	r2, [pc, #364]	; (80043e8 <HAL_RCC_ClockConfig+0x1c8>)
 800427a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800427e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800428c:	4b56      	ldr	r3, [pc, #344]	; (80043e8 <HAL_RCC_ClockConfig+0x1c8>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	4a55      	ldr	r2, [pc, #340]	; (80043e8 <HAL_RCC_ClockConfig+0x1c8>)
 8004292:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004296:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004298:	4b53      	ldr	r3, [pc, #332]	; (80043e8 <HAL_RCC_ClockConfig+0x1c8>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	4950      	ldr	r1, [pc, #320]	; (80043e8 <HAL_RCC_ClockConfig+0x1c8>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d040      	beq.n	8004338 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d107      	bne.n	80042ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042be:	4b4a      	ldr	r3, [pc, #296]	; (80043e8 <HAL_RCC_ClockConfig+0x1c8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d115      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e085      	b.n	80043da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d107      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d6:	4b44      	ldr	r3, [pc, #272]	; (80043e8 <HAL_RCC_ClockConfig+0x1c8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d109      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e079      	b.n	80043da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e6:	4b40      	ldr	r3, [pc, #256]	; (80043e8 <HAL_RCC_ClockConfig+0x1c8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e071      	b.n	80043da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042f6:	4b3c      	ldr	r3, [pc, #240]	; (80043e8 <HAL_RCC_ClockConfig+0x1c8>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f023 0203 	bic.w	r2, r3, #3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	4939      	ldr	r1, [pc, #228]	; (80043e8 <HAL_RCC_ClockConfig+0x1c8>)
 8004304:	4313      	orrs	r3, r2
 8004306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004308:	f7fe fb96 	bl	8002a38 <HAL_GetTick>
 800430c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800430e:	e00a      	b.n	8004326 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004310:	f7fe fb92 	bl	8002a38 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	f241 3288 	movw	r2, #5000	; 0x1388
 800431e:	4293      	cmp	r3, r2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e059      	b.n	80043da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004326:	4b30      	ldr	r3, [pc, #192]	; (80043e8 <HAL_RCC_ClockConfig+0x1c8>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 020c 	and.w	r2, r3, #12
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	429a      	cmp	r2, r3
 8004336:	d1eb      	bne.n	8004310 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004338:	4b2a      	ldr	r3, [pc, #168]	; (80043e4 <HAL_RCC_ClockConfig+0x1c4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d20c      	bcs.n	8004360 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004346:	4b27      	ldr	r3, [pc, #156]	; (80043e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800434e:	4b25      	ldr	r3, [pc, #148]	; (80043e4 <HAL_RCC_ClockConfig+0x1c4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d001      	beq.n	8004360 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e03c      	b.n	80043da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800436c:	4b1e      	ldr	r3, [pc, #120]	; (80043e8 <HAL_RCC_ClockConfig+0x1c8>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	491b      	ldr	r1, [pc, #108]	; (80043e8 <HAL_RCC_ClockConfig+0x1c8>)
 800437a:	4313      	orrs	r3, r2
 800437c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d009      	beq.n	800439e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800438a:	4b17      	ldr	r3, [pc, #92]	; (80043e8 <HAL_RCC_ClockConfig+0x1c8>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4913      	ldr	r1, [pc, #76]	; (80043e8 <HAL_RCC_ClockConfig+0x1c8>)
 800439a:	4313      	orrs	r3, r2
 800439c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800439e:	f000 f82b 	bl	80043f8 <HAL_RCC_GetSysClockFreq>
 80043a2:	4601      	mov	r1, r0
 80043a4:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <HAL_RCC_ClockConfig+0x1c8>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043ac:	22f0      	movs	r2, #240	; 0xf0
 80043ae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	fa92 f2a2 	rbit	r2, r2
 80043b6:	60fa      	str	r2, [r7, #12]
  return result;
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	fab2 f282 	clz	r2, r2
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	40d3      	lsrs	r3, r2
 80043c2:	4a0a      	ldr	r2, [pc, #40]	; (80043ec <HAL_RCC_ClockConfig+0x1cc>)
 80043c4:	5cd3      	ldrb	r3, [r2, r3]
 80043c6:	fa21 f303 	lsr.w	r3, r1, r3
 80043ca:	4a09      	ldr	r2, [pc, #36]	; (80043f0 <HAL_RCC_ClockConfig+0x1d0>)
 80043cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043ce:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <HAL_RCC_ClockConfig+0x1d4>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fe faee 	bl	80029b4 <HAL_InitTick>

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40023c00 	.word	0x40023c00
 80043e8:	40023800 	.word	0x40023800
 80043ec:	080090dc 	.word	0x080090dc
 80043f0:	20000064 	.word	0x20000064
 80043f4:	20000068 	.word	0x20000068

080043f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043fc:	b090      	sub	sp, #64	; 0x40
 80043fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	637b      	str	r3, [r7, #52]	; 0x34
 8004404:	2300      	movs	r3, #0
 8004406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004408:	2300      	movs	r3, #0
 800440a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004410:	4b59      	ldr	r3, [pc, #356]	; (8004578 <HAL_RCC_GetSysClockFreq+0x180>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 030c 	and.w	r3, r3, #12
 8004418:	2b08      	cmp	r3, #8
 800441a:	d00d      	beq.n	8004438 <HAL_RCC_GetSysClockFreq+0x40>
 800441c:	2b08      	cmp	r3, #8
 800441e:	f200 80a2 	bhi.w	8004566 <HAL_RCC_GetSysClockFreq+0x16e>
 8004422:	2b00      	cmp	r3, #0
 8004424:	d002      	beq.n	800442c <HAL_RCC_GetSysClockFreq+0x34>
 8004426:	2b04      	cmp	r3, #4
 8004428:	d003      	beq.n	8004432 <HAL_RCC_GetSysClockFreq+0x3a>
 800442a:	e09c      	b.n	8004566 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800442c:	4b53      	ldr	r3, [pc, #332]	; (800457c <HAL_RCC_GetSysClockFreq+0x184>)
 800442e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004430:	e09c      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004432:	4b53      	ldr	r3, [pc, #332]	; (8004580 <HAL_RCC_GetSysClockFreq+0x188>)
 8004434:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004436:	e099      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004438:	4b4f      	ldr	r3, [pc, #316]	; (8004578 <HAL_RCC_GetSysClockFreq+0x180>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004440:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004442:	4b4d      	ldr	r3, [pc, #308]	; (8004578 <HAL_RCC_GetSysClockFreq+0x180>)
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d027      	beq.n	800449e <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800444e:	4b4a      	ldr	r3, [pc, #296]	; (8004578 <HAL_RCC_GetSysClockFreq+0x180>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	099b      	lsrs	r3, r3, #6
 8004454:	2200      	movs	r2, #0
 8004456:	623b      	str	r3, [r7, #32]
 8004458:	627a      	str	r2, [r7, #36]	; 0x24
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004460:	2100      	movs	r1, #0
 8004462:	4b47      	ldr	r3, [pc, #284]	; (8004580 <HAL_RCC_GetSysClockFreq+0x188>)
 8004464:	fb03 f201 	mul.w	r2, r3, r1
 8004468:	2300      	movs	r3, #0
 800446a:	fb00 f303 	mul.w	r3, r0, r3
 800446e:	4413      	add	r3, r2
 8004470:	4a43      	ldr	r2, [pc, #268]	; (8004580 <HAL_RCC_GetSysClockFreq+0x188>)
 8004472:	fba0 2102 	umull	r2, r1, r0, r2
 8004476:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004478:	62ba      	str	r2, [r7, #40]	; 0x28
 800447a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800447c:	4413      	add	r3, r2
 800447e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004482:	2200      	movs	r2, #0
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	61fa      	str	r2, [r7, #28]
 8004488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800448c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004490:	f7fc fb56 	bl	8000b40 <__aeabi_uldivmod>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4613      	mov	r3, r2
 800449a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800449c:	e055      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800449e:	4b36      	ldr	r3, [pc, #216]	; (8004578 <HAL_RCC_GetSysClockFreq+0x180>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	099b      	lsrs	r3, r3, #6
 80044a4:	2200      	movs	r2, #0
 80044a6:	613b      	str	r3, [r7, #16]
 80044a8:	617a      	str	r2, [r7, #20]
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80044b0:	f04f 0b00 	mov.w	fp, #0
 80044b4:	4652      	mov	r2, sl
 80044b6:	465b      	mov	r3, fp
 80044b8:	f04f 0000 	mov.w	r0, #0
 80044bc:	f04f 0100 	mov.w	r1, #0
 80044c0:	0159      	lsls	r1, r3, #5
 80044c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044c6:	0150      	lsls	r0, r2, #5
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	ebb2 080a 	subs.w	r8, r2, sl
 80044d0:	eb63 090b 	sbc.w	r9, r3, fp
 80044d4:	f04f 0200 	mov.w	r2, #0
 80044d8:	f04f 0300 	mov.w	r3, #0
 80044dc:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80044e0:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80044e4:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80044e8:	ebb2 0408 	subs.w	r4, r2, r8
 80044ec:	eb63 0509 	sbc.w	r5, r3, r9
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	f04f 0300 	mov.w	r3, #0
 80044f8:	00eb      	lsls	r3, r5, #3
 80044fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044fe:	00e2      	lsls	r2, r4, #3
 8004500:	4614      	mov	r4, r2
 8004502:	461d      	mov	r5, r3
 8004504:	eb14 030a 	adds.w	r3, r4, sl
 8004508:	603b      	str	r3, [r7, #0]
 800450a:	eb45 030b 	adc.w	r3, r5, fp
 800450e:	607b      	str	r3, [r7, #4]
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	e9d7 4500 	ldrd	r4, r5, [r7]
 800451c:	4629      	mov	r1, r5
 800451e:	028b      	lsls	r3, r1, #10
 8004520:	4620      	mov	r0, r4
 8004522:	4629      	mov	r1, r5
 8004524:	4604      	mov	r4, r0
 8004526:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800452a:	4601      	mov	r1, r0
 800452c:	028a      	lsls	r2, r1, #10
 800452e:	4610      	mov	r0, r2
 8004530:	4619      	mov	r1, r3
 8004532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004534:	2200      	movs	r2, #0
 8004536:	60bb      	str	r3, [r7, #8]
 8004538:	60fa      	str	r2, [r7, #12]
 800453a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800453e:	f7fc faff 	bl	8000b40 <__aeabi_uldivmod>
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	4613      	mov	r3, r2
 8004548:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800454a:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <HAL_RCC_GetSysClockFreq+0x180>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	0c1b      	lsrs	r3, r3, #16
 8004550:	f003 0303 	and.w	r3, r3, #3
 8004554:	3301      	adds	r3, #1
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800455a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004562:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004564:	e002      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004566:	4b05      	ldr	r3, [pc, #20]	; (800457c <HAL_RCC_GetSysClockFreq+0x184>)
 8004568:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800456a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800456c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800456e:	4618      	mov	r0, r3
 8004570:	3740      	adds	r7, #64	; 0x40
 8004572:	46bd      	mov	sp, r7
 8004574:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004578:	40023800 	.word	0x40023800
 800457c:	00f42400 	.word	0x00f42400
 8004580:	017d7840 	.word	0x017d7840

08004584 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e07b      	b.n	800468e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	2b00      	cmp	r3, #0
 800459c:	d108      	bne.n	80045b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045a6:	d009      	beq.n	80045bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	61da      	str	r2, [r3, #28]
 80045ae:	e005      	b.n	80045bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fd ff00 	bl	80023dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2202      	movs	r2, #2
 80045e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69db      	ldr	r3, [r3, #28]
 8004632:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004640:	ea42 0103 	orr.w	r1, r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004648:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	0c1b      	lsrs	r3, r3, #16
 800465a:	f003 0104 	and.w	r1, r3, #4
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	f003 0210 	and.w	r2, r3, #16
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69da      	ldr	r2, [r3, #28]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800467c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b088      	sub	sp, #32
 800469a:	af00      	add	r7, sp, #0
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	603b      	str	r3, [r7, #0]
 80046a2:	4613      	mov	r3, r2
 80046a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_SPI_Transmit+0x22>
 80046b4:	2302      	movs	r3, #2
 80046b6:	e12d      	b.n	8004914 <HAL_SPI_Transmit+0x27e>
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046c0:	f7fe f9ba 	bl	8002a38 <HAL_GetTick>
 80046c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80046c6:	88fb      	ldrh	r3, [r7, #6]
 80046c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d002      	beq.n	80046dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80046d6:	2302      	movs	r3, #2
 80046d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80046da:	e116      	b.n	800490a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d002      	beq.n	80046e8 <HAL_SPI_Transmit+0x52>
 80046e2:	88fb      	ldrh	r3, [r7, #6]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d102      	bne.n	80046ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80046ec:	e10d      	b.n	800490a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2203      	movs	r2, #3
 80046f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	88fa      	ldrh	r2, [r7, #6]
 8004706:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	88fa      	ldrh	r2, [r7, #6]
 800470c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004734:	d10f      	bne.n	8004756 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004744:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004754:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004760:	2b40      	cmp	r3, #64	; 0x40
 8004762:	d007      	beq.n	8004774 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004772:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800477c:	d14f      	bne.n	800481e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <HAL_SPI_Transmit+0xf6>
 8004786:	8afb      	ldrh	r3, [r7, #22]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d142      	bne.n	8004812 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	881a      	ldrh	r2, [r3, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	1c9a      	adds	r2, r3, #2
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80047b0:	e02f      	b.n	8004812 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f003 0302 	and.w	r3, r3, #2
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d112      	bne.n	80047e6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c4:	881a      	ldrh	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d0:	1c9a      	adds	r2, r3, #2
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047da:	b29b      	uxth	r3, r3
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80047e4:	e015      	b.n	8004812 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047e6:	f7fe f927 	bl	8002a38 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d803      	bhi.n	80047fe <HAL_SPI_Transmit+0x168>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fc:	d102      	bne.n	8004804 <HAL_SPI_Transmit+0x16e>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d106      	bne.n	8004812 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004810:	e07b      	b.n	800490a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1ca      	bne.n	80047b2 <HAL_SPI_Transmit+0x11c>
 800481c:	e050      	b.n	80048c0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_SPI_Transmit+0x196>
 8004826:	8afb      	ldrh	r3, [r7, #22]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d144      	bne.n	80048b6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	330c      	adds	r3, #12
 8004836:	7812      	ldrb	r2, [r2, #0]
 8004838:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004848:	b29b      	uxth	r3, r3
 800484a:	3b01      	subs	r3, #1
 800484c:	b29a      	uxth	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004852:	e030      	b.n	80048b6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b02      	cmp	r3, #2
 8004860:	d113      	bne.n	800488a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	330c      	adds	r3, #12
 800486c:	7812      	ldrb	r2, [r2, #0]
 800486e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	86da      	strh	r2, [r3, #54]	; 0x36
 8004888:	e015      	b.n	80048b6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800488a:	f7fe f8d5 	bl	8002a38 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d803      	bhi.n	80048a2 <HAL_SPI_Transmit+0x20c>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a0:	d102      	bne.n	80048a8 <HAL_SPI_Transmit+0x212>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d106      	bne.n	80048b6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80048b4:	e029      	b.n	800490a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1c9      	bne.n	8004854 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	6839      	ldr	r1, [r7, #0]
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 fbae 	bl	8005026 <SPI_EndRxTxTransaction>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10a      	bne.n	80048f4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048de:	2300      	movs	r3, #0
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	613b      	str	r3, [r7, #16]
 80048f2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	77fb      	strb	r3, [r7, #31]
 8004900:	e003      	b.n	800490a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004912:	7ffb      	ldrb	r3, [r7, #31]
}
 8004914:	4618      	mov	r0, r3
 8004916:	3720      	adds	r7, #32
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b088      	sub	sp, #32
 8004920:	af02      	add	r7, sp, #8
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	603b      	str	r3, [r7, #0]
 8004928:	4613      	mov	r3, r2
 800492a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b01      	cmp	r3, #1
 800493a:	d002      	beq.n	8004942 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800493c:	2302      	movs	r3, #2
 800493e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004940:	e0fb      	b.n	8004b3a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800494a:	d112      	bne.n	8004972 <HAL_SPI_Receive+0x56>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10e      	bne.n	8004972 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2204      	movs	r2, #4
 8004958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800495c:	88fa      	ldrh	r2, [r7, #6]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	4613      	mov	r3, r2
 8004964:	68ba      	ldr	r2, [r7, #8]
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f8ef 	bl	8004b4c <HAL_SPI_TransmitReceive>
 800496e:	4603      	mov	r3, r0
 8004970:	e0e8      	b.n	8004b44 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004978:	2b01      	cmp	r3, #1
 800497a:	d101      	bne.n	8004980 <HAL_SPI_Receive+0x64>
 800497c:	2302      	movs	r3, #2
 800497e:	e0e1      	b.n	8004b44 <HAL_SPI_Receive+0x228>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004988:	f7fe f856 	bl	8002a38 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d002      	beq.n	800499a <HAL_SPI_Receive+0x7e>
 8004994:	88fb      	ldrh	r3, [r7, #6]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d102      	bne.n	80049a0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800499e:	e0cc      	b.n	8004b3a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2204      	movs	r2, #4
 80049a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	88fa      	ldrh	r2, [r7, #6]
 80049b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	88fa      	ldrh	r2, [r7, #6]
 80049be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049e6:	d10f      	bne.n	8004a08 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a06:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a12:	2b40      	cmp	r3, #64	; 0x40
 8004a14:	d007      	beq.n	8004a26 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a24:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d16a      	bne.n	8004b04 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a2e:	e032      	b.n	8004a96 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d115      	bne.n	8004a6a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f103 020c 	add.w	r2, r3, #12
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4a:	7812      	ldrb	r2, [r2, #0]
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a68:	e015      	b.n	8004a96 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a6a:	f7fd ffe5 	bl	8002a38 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d803      	bhi.n	8004a82 <HAL_SPI_Receive+0x166>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a80:	d102      	bne.n	8004a88 <HAL_SPI_Receive+0x16c>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d106      	bne.n	8004a96 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004a94:	e051      	b.n	8004b3a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1c7      	bne.n	8004a30 <HAL_SPI_Receive+0x114>
 8004aa0:	e035      	b.n	8004b0e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d113      	bne.n	8004ad8 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aba:	b292      	uxth	r2, r2
 8004abc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac2:	1c9a      	adds	r2, r3, #2
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ad6:	e015      	b.n	8004b04 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ad8:	f7fd ffae 	bl	8002a38 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d803      	bhi.n	8004af0 <HAL_SPI_Receive+0x1d4>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aee:	d102      	bne.n	8004af6 <HAL_SPI_Receive+0x1da>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004b02:	e01a      	b.n	8004b3a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1c9      	bne.n	8004aa2 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	6839      	ldr	r1, [r7, #0]
 8004b12:	68f8      	ldr	r0, [r7, #12]
 8004b14:	f000 fa52 	bl	8004fbc <SPI_EndRxTransaction>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2220      	movs	r2, #32
 8004b22:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	75fb      	strb	r3, [r7, #23]
 8004b30:	e003      	b.n	8004b3a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08c      	sub	sp, #48	; 0x30
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d101      	bne.n	8004b72 <HAL_SPI_TransmitReceive+0x26>
 8004b6e:	2302      	movs	r3, #2
 8004b70:	e198      	b.n	8004ea4 <HAL_SPI_TransmitReceive+0x358>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b7a:	f7fd ff5d 	bl	8002a38 <HAL_GetTick>
 8004b7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004b90:	887b      	ldrh	r3, [r7, #2]
 8004b92:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d00f      	beq.n	8004bbc <HAL_SPI_TransmitReceive+0x70>
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ba2:	d107      	bne.n	8004bb4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d103      	bne.n	8004bb4 <HAL_SPI_TransmitReceive+0x68>
 8004bac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d003      	beq.n	8004bbc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004bba:	e16d      	b.n	8004e98 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d005      	beq.n	8004bce <HAL_SPI_TransmitReceive+0x82>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <HAL_SPI_TransmitReceive+0x82>
 8004bc8:	887b      	ldrh	r3, [r7, #2]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d103      	bne.n	8004bd6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004bd4:	e160      	b.n	8004e98 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d003      	beq.n	8004bea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2205      	movs	r2, #5
 8004be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	887a      	ldrh	r2, [r7, #2]
 8004bfa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	887a      	ldrh	r2, [r7, #2]
 8004c00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	887a      	ldrh	r2, [r7, #2]
 8004c0c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	887a      	ldrh	r2, [r7, #2]
 8004c12:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2a:	2b40      	cmp	r3, #64	; 0x40
 8004c2c:	d007      	beq.n	8004c3e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c46:	d17c      	bne.n	8004d42 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <HAL_SPI_TransmitReceive+0x10a>
 8004c50:	8b7b      	ldrh	r3, [r7, #26]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d16a      	bne.n	8004d2c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5a:	881a      	ldrh	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c66:	1c9a      	adds	r2, r3, #2
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c7a:	e057      	b.n	8004d2c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d11b      	bne.n	8004cc2 <HAL_SPI_TransmitReceive+0x176>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d016      	beq.n	8004cc2 <HAL_SPI_TransmitReceive+0x176>
 8004c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d113      	bne.n	8004cc2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9e:	881a      	ldrh	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	1c9a      	adds	r2, r3, #2
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d119      	bne.n	8004d04 <HAL_SPI_TransmitReceive+0x1b8>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d014      	beq.n	8004d04 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68da      	ldr	r2, [r3, #12]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	b292      	uxth	r2, r2
 8004ce6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	1c9a      	adds	r2, r3, #2
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d00:	2301      	movs	r3, #1
 8004d02:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d04:	f7fd fe98 	bl	8002a38 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d80b      	bhi.n	8004d2c <HAL_SPI_TransmitReceive+0x1e0>
 8004d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d1a:	d007      	beq.n	8004d2c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004d2a:	e0b5      	b.n	8004e98 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1a2      	bne.n	8004c7c <HAL_SPI_TransmitReceive+0x130>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d19d      	bne.n	8004c7c <HAL_SPI_TransmitReceive+0x130>
 8004d40:	e080      	b.n	8004e44 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <HAL_SPI_TransmitReceive+0x204>
 8004d4a:	8b7b      	ldrh	r3, [r7, #26]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d16f      	bne.n	8004e30 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	330c      	adds	r3, #12
 8004d5a:	7812      	ldrb	r2, [r2, #0]
 8004d5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d76:	e05b      	b.n	8004e30 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 0302 	and.w	r3, r3, #2
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d11c      	bne.n	8004dc0 <HAL_SPI_TransmitReceive+0x274>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d017      	beq.n	8004dc0 <HAL_SPI_TransmitReceive+0x274>
 8004d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d114      	bne.n	8004dc0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	330c      	adds	r3, #12
 8004da0:	7812      	ldrb	r2, [r2, #0]
 8004da2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d119      	bne.n	8004e02 <HAL_SPI_TransmitReceive+0x2b6>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d014      	beq.n	8004e02 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e02:	f7fd fe19 	bl	8002a38 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d803      	bhi.n	8004e1a <HAL_SPI_TransmitReceive+0x2ce>
 8004e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e18:	d102      	bne.n	8004e20 <HAL_SPI_TransmitReceive+0x2d4>
 8004e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d107      	bne.n	8004e30 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004e2e:	e033      	b.n	8004e98 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d19e      	bne.n	8004d78 <HAL_SPI_TransmitReceive+0x22c>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d199      	bne.n	8004d78 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 f8ec 	bl	8005026 <SPI_EndRxTxTransaction>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d006      	beq.n	8004e62 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004e60:	e01a      	b.n	8004e98 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10a      	bne.n	8004e80 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e8e:	e003      	b.n	8004e98 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ea0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3730      	adds	r7, #48	; 0x30
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ebc:	f7fd fdbc 	bl	8002a38 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec4:	1a9b      	subs	r3, r3, r2
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	4413      	add	r3, r2
 8004eca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ecc:	f7fd fdb4 	bl	8002a38 <HAL_GetTick>
 8004ed0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ed2:	4b39      	ldr	r3, [pc, #228]	; (8004fb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	015b      	lsls	r3, r3, #5
 8004ed8:	0d1b      	lsrs	r3, r3, #20
 8004eda:	69fa      	ldr	r2, [r7, #28]
 8004edc:	fb02 f303 	mul.w	r3, r2, r3
 8004ee0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ee2:	e054      	b.n	8004f8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eea:	d050      	beq.n	8004f8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004eec:	f7fd fda4 	bl	8002a38 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	69fa      	ldr	r2, [r7, #28]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d902      	bls.n	8004f02 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d13d      	bne.n	8004f7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f1a:	d111      	bne.n	8004f40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f24:	d004      	beq.n	8004f30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f2e:	d107      	bne.n	8004f40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f48:	d10f      	bne.n	8004f6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e017      	b.n	8004fae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	4013      	ands	r3, r2
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	bf0c      	ite	eq
 8004f9e:	2301      	moveq	r3, #1
 8004fa0:	2300      	movne	r3, #0
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d19b      	bne.n	8004ee4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3720      	adds	r7, #32
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000064 	.word	0x20000064

08004fbc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af02      	add	r7, sp, #8
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fd0:	d111      	bne.n	8004ff6 <SPI_EndRxTransaction+0x3a>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fda:	d004      	beq.n	8004fe6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fe4:	d107      	bne.n	8004ff6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ff4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	2180      	movs	r1, #128	; 0x80
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f7ff ff53 	bl	8004eac <SPI_WaitFlagStateUntilTimeout>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d007      	beq.n	800501c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005010:	f043 0220 	orr.w	r2, r3, #32
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e000      	b.n	800501e <SPI_EndRxTransaction+0x62>
  }
  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b086      	sub	sp, #24
 800502a:	af02      	add	r7, sp, #8
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2200      	movs	r2, #0
 800503a:	2180      	movs	r1, #128	; 0x80
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f7ff ff35 	bl	8004eac <SPI_WaitFlagStateUntilTimeout>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d007      	beq.n	8005058 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504c:	f043 0220 	orr.w	r2, r3, #32
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e000      	b.n	800505a <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b082      	sub	sp, #8
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e041      	b.n	80050f8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507a:	b2db      	uxtb	r3, r3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d106      	bne.n	800508e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7fd fb9d 	bl	80027c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2202      	movs	r2, #2
 8005092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3304      	adds	r3, #4
 800509e:	4619      	mov	r1, r3
 80050a0:	4610      	mov	r0, r2
 80050a2:	f000 fa8f 	bl	80055c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b01      	cmp	r3, #1
 8005112:	d001      	beq.n	8005118 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e04e      	b.n	80051b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0201 	orr.w	r2, r2, #1
 800512e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a22      	ldr	r2, [pc, #136]	; (80051c0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d022      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x80>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005142:	d01d      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x80>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a1e      	ldr	r2, [pc, #120]	; (80051c4 <HAL_TIM_Base_Start_IT+0xc4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d018      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x80>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a1d      	ldr	r2, [pc, #116]	; (80051c8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d013      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x80>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a1b      	ldr	r2, [pc, #108]	; (80051cc <HAL_TIM_Base_Start_IT+0xcc>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00e      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x80>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a1a      	ldr	r2, [pc, #104]	; (80051d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d009      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x80>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a18      	ldr	r2, [pc, #96]	; (80051d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d004      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0x80>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a17      	ldr	r2, [pc, #92]	; (80051d8 <HAL_TIM_Base_Start_IT+0xd8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d111      	bne.n	80051a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b06      	cmp	r3, #6
 8005190:	d010      	beq.n	80051b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0201 	orr.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a2:	e007      	b.n	80051b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0201 	orr.w	r2, r2, #1
 80051b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bc80      	pop	{r7}
 80051be:	4770      	bx	lr
 80051c0:	40010000 	.word	0x40010000
 80051c4:	40000400 	.word	0x40000400
 80051c8:	40000800 	.word	0x40000800
 80051cc:	40000c00 	.word	0x40000c00
 80051d0:	40010400 	.word	0x40010400
 80051d4:	40014000 	.word	0x40014000
 80051d8:	40001800 	.word	0x40001800

080051dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b082      	sub	sp, #8
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d122      	bne.n	8005238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d11b      	bne.n	8005238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0202 	mvn.w	r2, #2
 8005208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	f003 0303 	and.w	r3, r3, #3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f9b4 	bl	800558c <HAL_TIM_IC_CaptureCallback>
 8005224:	e005      	b.n	8005232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f9a7 	bl	800557a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f9b6 	bl	800559e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b04      	cmp	r3, #4
 8005244:	d122      	bne.n	800528c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b04      	cmp	r3, #4
 8005252:	d11b      	bne.n	800528c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f06f 0204 	mvn.w	r2, #4
 800525c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2202      	movs	r2, #2
 8005262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f98a 	bl	800558c <HAL_TIM_IC_CaptureCallback>
 8005278:	e005      	b.n	8005286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 f97d 	bl	800557a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f98c 	bl	800559e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b08      	cmp	r3, #8
 8005298:	d122      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d11b      	bne.n	80052e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f06f 0208 	mvn.w	r2, #8
 80052b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2204      	movs	r2, #4
 80052b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	f003 0303 	and.w	r3, r3, #3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d003      	beq.n	80052ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f960 	bl	800558c <HAL_TIM_IC_CaptureCallback>
 80052cc:	e005      	b.n	80052da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 f953 	bl	800557a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f962 	bl	800559e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	f003 0310 	and.w	r3, r3, #16
 80052ea:	2b10      	cmp	r3, #16
 80052ec:	d122      	bne.n	8005334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f003 0310 	and.w	r3, r3, #16
 80052f8:	2b10      	cmp	r3, #16
 80052fa:	d11b      	bne.n	8005334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f06f 0210 	mvn.w	r2, #16
 8005304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2208      	movs	r2, #8
 800530a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f936 	bl	800558c <HAL_TIM_IC_CaptureCallback>
 8005320:	e005      	b.n	800532e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f929 	bl	800557a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f938 	bl	800559e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b01      	cmp	r3, #1
 8005340:	d10e      	bne.n	8005360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b01      	cmp	r3, #1
 800534e:	d107      	bne.n	8005360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0201 	mvn.w	r2, #1
 8005358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fc f966 	bl	800162c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536a:	2b80      	cmp	r3, #128	; 0x80
 800536c:	d10e      	bne.n	800538c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005378:	2b80      	cmp	r3, #128	; 0x80
 800537a:	d107      	bne.n	800538c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 fad3 	bl	8005932 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005396:	2b40      	cmp	r3, #64	; 0x40
 8005398:	d10e      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a4:	2b40      	cmp	r3, #64	; 0x40
 80053a6:	d107      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f8fc 	bl	80055b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b20      	cmp	r3, #32
 80053c4:	d10e      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0320 	and.w	r3, r3, #32
 80053d0:	2b20      	cmp	r3, #32
 80053d2:	d107      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0220 	mvn.w	r2, #32
 80053dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fa9e 	bl	8005920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053e4:	bf00      	nop
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053f6:	2300      	movs	r3, #0
 80053f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_TIM_ConfigClockSource+0x1c>
 8005404:	2302      	movs	r3, #2
 8005406:	e0b4      	b.n	8005572 <HAL_TIM_ConfigClockSource+0x186>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800542e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005440:	d03e      	beq.n	80054c0 <HAL_TIM_ConfigClockSource+0xd4>
 8005442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005446:	f200 8087 	bhi.w	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 800544a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800544e:	f000 8086 	beq.w	800555e <HAL_TIM_ConfigClockSource+0x172>
 8005452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005456:	d87f      	bhi.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 8005458:	2b70      	cmp	r3, #112	; 0x70
 800545a:	d01a      	beq.n	8005492 <HAL_TIM_ConfigClockSource+0xa6>
 800545c:	2b70      	cmp	r3, #112	; 0x70
 800545e:	d87b      	bhi.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 8005460:	2b60      	cmp	r3, #96	; 0x60
 8005462:	d050      	beq.n	8005506 <HAL_TIM_ConfigClockSource+0x11a>
 8005464:	2b60      	cmp	r3, #96	; 0x60
 8005466:	d877      	bhi.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 8005468:	2b50      	cmp	r3, #80	; 0x50
 800546a:	d03c      	beq.n	80054e6 <HAL_TIM_ConfigClockSource+0xfa>
 800546c:	2b50      	cmp	r3, #80	; 0x50
 800546e:	d873      	bhi.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 8005470:	2b40      	cmp	r3, #64	; 0x40
 8005472:	d058      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0x13a>
 8005474:	2b40      	cmp	r3, #64	; 0x40
 8005476:	d86f      	bhi.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 8005478:	2b30      	cmp	r3, #48	; 0x30
 800547a:	d064      	beq.n	8005546 <HAL_TIM_ConfigClockSource+0x15a>
 800547c:	2b30      	cmp	r3, #48	; 0x30
 800547e:	d86b      	bhi.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 8005480:	2b20      	cmp	r3, #32
 8005482:	d060      	beq.n	8005546 <HAL_TIM_ConfigClockSource+0x15a>
 8005484:	2b20      	cmp	r3, #32
 8005486:	d867      	bhi.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
 8005488:	2b00      	cmp	r3, #0
 800548a:	d05c      	beq.n	8005546 <HAL_TIM_ConfigClockSource+0x15a>
 800548c:	2b10      	cmp	r3, #16
 800548e:	d05a      	beq.n	8005546 <HAL_TIM_ConfigClockSource+0x15a>
 8005490:	e062      	b.n	8005558 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054a2:	f000 f9a4 	bl	80057ee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	609a      	str	r2, [r3, #8]
      break;
 80054be:	e04f      	b.n	8005560 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054d0:	f000 f98d 	bl	80057ee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689a      	ldr	r2, [r3, #8]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054e2:	609a      	str	r2, [r3, #8]
      break;
 80054e4:	e03c      	b.n	8005560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054f2:	461a      	mov	r2, r3
 80054f4:	f000 f904 	bl	8005700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2150      	movs	r1, #80	; 0x50
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 f95b 	bl	80057ba <TIM_ITRx_SetConfig>
      break;
 8005504:	e02c      	b.n	8005560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005512:	461a      	mov	r2, r3
 8005514:	f000 f922 	bl	800575c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2160      	movs	r1, #96	; 0x60
 800551e:	4618      	mov	r0, r3
 8005520:	f000 f94b 	bl	80057ba <TIM_ITRx_SetConfig>
      break;
 8005524:	e01c      	b.n	8005560 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005532:	461a      	mov	r2, r3
 8005534:	f000 f8e4 	bl	8005700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2140      	movs	r1, #64	; 0x40
 800553e:	4618      	mov	r0, r3
 8005540:	f000 f93b 	bl	80057ba <TIM_ITRx_SetConfig>
      break;
 8005544:	e00c      	b.n	8005560 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4619      	mov	r1, r3
 8005550:	4610      	mov	r0, r2
 8005552:	f000 f932 	bl	80057ba <TIM_ITRx_SetConfig>
      break;
 8005556:	e003      	b.n	8005560 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	73fb      	strb	r3, [r7, #15]
      break;
 800555c:	e000      	b.n	8005560 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800555e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005570:	7bfb      	ldrb	r3, [r7, #15]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	bc80      	pop	{r7}
 800558a:	4770      	bx	lr

0800558c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	bc80      	pop	{r7}
 800559c:	4770      	bx	lr

0800559e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800559e:	b480      	push	{r7}
 80055a0:	b083      	sub	sp, #12
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr

080055b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	bc80      	pop	{r7}
 80055c0:	4770      	bx	lr
	...

080055c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a3f      	ldr	r2, [pc, #252]	; (80056d4 <TIM_Base_SetConfig+0x110>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d013      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e2:	d00f      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a3c      	ldr	r2, [pc, #240]	; (80056d8 <TIM_Base_SetConfig+0x114>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00b      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a3b      	ldr	r2, [pc, #236]	; (80056dc <TIM_Base_SetConfig+0x118>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d007      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a3a      	ldr	r2, [pc, #232]	; (80056e0 <TIM_Base_SetConfig+0x11c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a39      	ldr	r2, [pc, #228]	; (80056e4 <TIM_Base_SetConfig+0x120>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d108      	bne.n	8005616 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a2e      	ldr	r2, [pc, #184]	; (80056d4 <TIM_Base_SetConfig+0x110>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d02b      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005624:	d027      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a2b      	ldr	r2, [pc, #172]	; (80056d8 <TIM_Base_SetConfig+0x114>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d023      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a2a      	ldr	r2, [pc, #168]	; (80056dc <TIM_Base_SetConfig+0x118>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d01f      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a29      	ldr	r2, [pc, #164]	; (80056e0 <TIM_Base_SetConfig+0x11c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d01b      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a28      	ldr	r2, [pc, #160]	; (80056e4 <TIM_Base_SetConfig+0x120>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d017      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a27      	ldr	r2, [pc, #156]	; (80056e8 <TIM_Base_SetConfig+0x124>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d013      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a26      	ldr	r2, [pc, #152]	; (80056ec <TIM_Base_SetConfig+0x128>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d00f      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a25      	ldr	r2, [pc, #148]	; (80056f0 <TIM_Base_SetConfig+0x12c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d00b      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a24      	ldr	r2, [pc, #144]	; (80056f4 <TIM_Base_SetConfig+0x130>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d007      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a23      	ldr	r2, [pc, #140]	; (80056f8 <TIM_Base_SetConfig+0x134>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d003      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a22      	ldr	r2, [pc, #136]	; (80056fc <TIM_Base_SetConfig+0x138>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d108      	bne.n	8005688 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800567c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4313      	orrs	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a09      	ldr	r2, [pc, #36]	; (80056d4 <TIM_Base_SetConfig+0x110>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_Base_SetConfig+0xf8>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a0b      	ldr	r2, [pc, #44]	; (80056e4 <TIM_Base_SetConfig+0x120>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d103      	bne.n	80056c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	615a      	str	r2, [r3, #20]
}
 80056ca:	bf00      	nop
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bc80      	pop	{r7}
 80056d2:	4770      	bx	lr
 80056d4:	40010000 	.word	0x40010000
 80056d8:	40000400 	.word	0x40000400
 80056dc:	40000800 	.word	0x40000800
 80056e0:	40000c00 	.word	0x40000c00
 80056e4:	40010400 	.word	0x40010400
 80056e8:	40014000 	.word	0x40014000
 80056ec:	40014400 	.word	0x40014400
 80056f0:	40014800 	.word	0x40014800
 80056f4:	40001800 	.word	0x40001800
 80056f8:	40001c00 	.word	0x40001c00
 80056fc:	40002000 	.word	0x40002000

08005700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	f023 0201 	bic.w	r2, r3, #1
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800572a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	4313      	orrs	r3, r2
 8005734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f023 030a 	bic.w	r3, r3, #10
 800573c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4313      	orrs	r3, r2
 8005744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	621a      	str	r2, [r3, #32]
}
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr

0800575c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	f023 0210 	bic.w	r2, r3, #16
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	031b      	lsls	r3, r3, #12
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	4313      	orrs	r3, r2
 8005790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005798:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	011b      	lsls	r3, r3, #4
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	621a      	str	r2, [r3, #32]
}
 80057b0:	bf00      	nop
 80057b2:	371c      	adds	r7, #28
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bc80      	pop	{r7}
 80057b8:	4770      	bx	lr

080057ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b085      	sub	sp, #20
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f043 0307 	orr.w	r3, r3, #7
 80057dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	609a      	str	r2, [r3, #8]
}
 80057e4:	bf00      	nop
 80057e6:	3714      	adds	r7, #20
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bc80      	pop	{r7}
 80057ec:	4770      	bx	lr

080057ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b087      	sub	sp, #28
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	607a      	str	r2, [r7, #4]
 80057fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005808:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	021a      	lsls	r2, r3, #8
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	431a      	orrs	r2, r3
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	4313      	orrs	r3, r2
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	609a      	str	r2, [r3, #8]
}
 8005822:	bf00      	nop
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr

0800582c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005840:	2302      	movs	r3, #2
 8005842:	e05a      	b.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a20      	ldr	r2, [pc, #128]	; (8005904 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d022      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005890:	d01d      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a1c      	ldr	r2, [pc, #112]	; (8005908 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d018      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a1a      	ldr	r2, [pc, #104]	; (800590c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d013      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a19      	ldr	r2, [pc, #100]	; (8005910 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d00e      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a17      	ldr	r2, [pc, #92]	; (8005914 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d009      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a16      	ldr	r2, [pc, #88]	; (8005918 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d004      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a14      	ldr	r2, [pc, #80]	; (800591c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d10c      	bne.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	4313      	orrs	r3, r2
 80058de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	bc80      	pop	{r7}
 8005902:	4770      	bx	lr
 8005904:	40010000 	.word	0x40010000
 8005908:	40000400 	.word	0x40000400
 800590c:	40000800 	.word	0x40000800
 8005910:	40000c00 	.word	0x40000c00
 8005914:	40010400 	.word	0x40010400
 8005918:	40014000 	.word	0x40014000
 800591c:	40001800 	.word	0x40001800

08005920 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	bc80      	pop	{r7}
 8005930:	4770      	bx	lr

08005932 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005932:	b480      	push	{r7}
 8005934:	b083      	sub	sp, #12
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800593a:	bf00      	nop
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr

08005944 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005944:	b084      	sub	sp, #16
 8005946:	b580      	push	{r7, lr}
 8005948:	b084      	sub	sp, #16
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
 800594e:	f107 001c 	add.w	r0, r7, #28
 8005952:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	2b01      	cmp	r3, #1
 800595a:	d122      	bne.n	80059a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005970:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005986:	2b01      	cmp	r3, #1
 8005988:	d105      	bne.n	8005996 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fa8c 	bl	8005eb4 <USB_CoreReset>
 800599c:	4603      	mov	r3, r0
 800599e:	73fb      	strb	r3, [r7, #15]
 80059a0:	e010      	b.n	80059c4 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fa80 	bl	8005eb4 <USB_CoreReset>
 80059b4:	4603      	mov	r3, r0
 80059b6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d10b      	bne.n	80059e2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f043 0206 	orr.w	r2, r3, #6
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f043 0220 	orr.w	r2, r3, #32
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3710      	adds	r7, #16
 80059e8:	46bd      	mov	sp, r7
 80059ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059ee:	b004      	add	sp, #16
 80059f0:	4770      	bx	lr

080059f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b083      	sub	sp, #12
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f023 0201 	bic.w	r2, r3, #1
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bc80      	pop	{r7}
 8005a10:	4770      	bx	lr

08005a12 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b084      	sub	sp, #16
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a2e:	78fb      	ldrb	r3, [r7, #3]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d115      	bne.n	8005a60 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a40:	2001      	movs	r0, #1
 8005a42:	f7fd f803 	bl	8002a4c <HAL_Delay>
      ms++;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fa23 	bl	8005e98 <USB_GetMode>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d01e      	beq.n	8005a96 <USB_SetCurrentMode+0x84>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2b31      	cmp	r3, #49	; 0x31
 8005a5c:	d9f0      	bls.n	8005a40 <USB_SetCurrentMode+0x2e>
 8005a5e:	e01a      	b.n	8005a96 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a60:	78fb      	ldrb	r3, [r7, #3]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d115      	bne.n	8005a92 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a72:	2001      	movs	r0, #1
 8005a74:	f7fc ffea 	bl	8002a4c <HAL_Delay>
      ms++;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fa0a 	bl	8005e98 <USB_GetMode>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d005      	beq.n	8005a96 <USB_SetCurrentMode+0x84>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b31      	cmp	r3, #49	; 0x31
 8005a8e:	d9f0      	bls.n	8005a72 <USB_SetCurrentMode+0x60>
 8005a90:	e001      	b.n	8005a96 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e005      	b.n	8005aa2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2b32      	cmp	r3, #50	; 0x32
 8005a9a:	d101      	bne.n	8005aa0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e000      	b.n	8005aa2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
	...

08005aac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005aac:	b084      	sub	sp, #16
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b086      	sub	sp, #24
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005aba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	613b      	str	r3, [r7, #16]
 8005aca:	e009      	b.n	8005ae0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	3340      	adds	r3, #64	; 0x40
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	3301      	adds	r3, #1
 8005ade:	613b      	str	r3, [r7, #16]
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	2b0e      	cmp	r3, #14
 8005ae4:	d9f2      	bls.n	8005acc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d11c      	bne.n	8005b26 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005afa:	f043 0302 	orr.w	r3, r3, #2
 8005afe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b10:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	639a      	str	r2, [r3, #56]	; 0x38
 8005b24:	e00b      	b.n	8005b3e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b36:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b44:	461a      	mov	r2, r3
 8005b46:	2300      	movs	r3, #0
 8005b48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d10c      	bne.n	8005b6a <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d104      	bne.n	8005b60 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b56:	2100      	movs	r1, #0
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f965 	bl	8005e28 <USB_SetDevSpeed>
 8005b5e:	e008      	b.n	8005b72 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b60:	2101      	movs	r1, #1
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f960 	bl	8005e28 <USB_SetDevSpeed>
 8005b68:	e003      	b.n	8005b72 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b6a:	2103      	movs	r1, #3
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f95b 	bl	8005e28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b72:	2110      	movs	r1, #16
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f8f3 	bl	8005d60 <USB_FlushTxFifo>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 f91f 	bl	8005dc8 <USB_FlushRxFifo>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	2300      	movs	r3, #0
 8005baa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bb8:	2300      	movs	r3, #0
 8005bba:	613b      	str	r3, [r7, #16]
 8005bbc:	e043      	b.n	8005c46 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bd4:	d118      	bne.n	8005c08 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10a      	bne.n	8005bf2 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be8:	461a      	mov	r2, r3
 8005bea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bee:	6013      	str	r3, [r2, #0]
 8005bf0:	e013      	b.n	8005c1a <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c04:	6013      	str	r3, [r2, #0]
 8005c06:	e008      	b.n	8005c1a <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c14:	461a      	mov	r2, r3
 8005c16:	2300      	movs	r3, #0
 8005c18:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c26:	461a      	mov	r2, r3
 8005c28:	2300      	movs	r3, #0
 8005c2a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c38:	461a      	mov	r2, r3
 8005c3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	3301      	adds	r3, #1
 8005c44:	613b      	str	r3, [r7, #16]
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d3b7      	bcc.n	8005bbe <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c4e:	2300      	movs	r3, #0
 8005c50:	613b      	str	r3, [r7, #16]
 8005c52:	e043      	b.n	8005cdc <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c6a:	d118      	bne.n	8005c9e <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10a      	bne.n	8005c88 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7e:	461a      	mov	r2, r3
 8005c80:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c84:	6013      	str	r3, [r2, #0]
 8005c86:	e013      	b.n	8005cb0 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c94:	461a      	mov	r2, r3
 8005c96:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c9a:	6013      	str	r3, [r2, #0]
 8005c9c:	e008      	b.n	8005cb0 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005caa:	461a      	mov	r2, r3
 8005cac:	2300      	movs	r3, #0
 8005cae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	613b      	str	r3, [r7, #16]
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d3b7      	bcc.n	8005c54 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cf6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d04:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d105      	bne.n	8005d18 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	699b      	ldr	r3, [r3, #24]
 8005d10:	f043 0210 	orr.w	r2, r3, #16
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	699a      	ldr	r2, [r3, #24]
 8005d1c:	4b0f      	ldr	r3, [pc, #60]	; (8005d5c <USB_DevInit+0x2b0>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d005      	beq.n	8005d36 <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	f043 0208 	orr.w	r2, r3, #8
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d107      	bne.n	8005d4c <USB_DevInit+0x2a0>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d44:	f043 0304 	orr.w	r3, r3, #4
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3718      	adds	r7, #24
 8005d52:	46bd      	mov	sp, r7
 8005d54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d58:	b004      	add	sp, #16
 8005d5a:	4770      	bx	lr
 8005d5c:	803c3800 	.word	0x803c3800

08005d60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3301      	adds	r3, #1
 8005d72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4a13      	ldr	r2, [pc, #76]	; (8005dc4 <USB_FlushTxFifo+0x64>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d901      	bls.n	8005d80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e01b      	b.n	8005db8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	daf2      	bge.n	8005d6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	019b      	lsls	r3, r3, #6
 8005d90:	f043 0220 	orr.w	r2, r3, #32
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4a08      	ldr	r2, [pc, #32]	; (8005dc4 <USB_FlushTxFifo+0x64>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d901      	bls.n	8005daa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e006      	b.n	8005db8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f003 0320 	and.w	r3, r3, #32
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	d0f0      	beq.n	8005d98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bc80      	pop	{r7}
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	00030d40 	.word	0x00030d40

08005dc8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4a11      	ldr	r2, [pc, #68]	; (8005e24 <USB_FlushRxFifo+0x5c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d901      	bls.n	8005de6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e018      	b.n	8005e18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	daf2      	bge.n	8005dd4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005dee:	2300      	movs	r3, #0
 8005df0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2210      	movs	r2, #16
 8005df6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	4a08      	ldr	r2, [pc, #32]	; (8005e24 <USB_FlushRxFifo+0x5c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d901      	bls.n	8005e0a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e006      	b.n	8005e18 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f003 0310 	and.w	r3, r3, #16
 8005e12:	2b10      	cmp	r3, #16
 8005e14:	d0f0      	beq.n	8005df8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bc80      	pop	{r7}
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	00030d40 	.word	0x00030d40

08005e28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	460b      	mov	r3, r1
 8005e32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	68f9      	ldr	r1, [r7, #12]
 8005e44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bc80      	pop	{r7}
 8005e56:	4770      	bx	lr

08005e58 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e72:	f023 0303 	bic.w	r3, r3, #3
 8005e76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e86:	f043 0302 	orr.w	r3, r3, #2
 8005e8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr

08005e98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	f003 0301 	and.w	r3, r3, #1
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bc80      	pop	{r7}
 8005eb0:	4770      	bx	lr
	...

08005eb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	4a12      	ldr	r2, [pc, #72]	; (8005f14 <USB_CoreReset+0x60>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d901      	bls.n	8005ed2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e01b      	b.n	8005f0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	daf2      	bge.n	8005ec0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	f043 0201 	orr.w	r2, r3, #1
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	3301      	adds	r3, #1
 8005eee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4a08      	ldr	r2, [pc, #32]	; (8005f14 <USB_CoreReset+0x60>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d901      	bls.n	8005efc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e006      	b.n	8005f0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d0f0      	beq.n	8005eea <USB_CoreReset+0x36>

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bc80      	pop	{r7}
 8005f12:	4770      	bx	lr
 8005f14:	00030d40 	.word	0x00030d40

08005f18 <malloc>:
 8005f18:	4b02      	ldr	r3, [pc, #8]	; (8005f24 <malloc+0xc>)
 8005f1a:	4601      	mov	r1, r0
 8005f1c:	6818      	ldr	r0, [r3, #0]
 8005f1e:	f000 b82b 	b.w	8005f78 <_malloc_r>
 8005f22:	bf00      	nop
 8005f24:	200000c8 	.word	0x200000c8

08005f28 <free>:
 8005f28:	4b02      	ldr	r3, [pc, #8]	; (8005f34 <free+0xc>)
 8005f2a:	4601      	mov	r1, r0
 8005f2c:	6818      	ldr	r0, [r3, #0]
 8005f2e:	f001 bd2f 	b.w	8007990 <_free_r>
 8005f32:	bf00      	nop
 8005f34:	200000c8 	.word	0x200000c8

08005f38 <sbrk_aligned>:
 8005f38:	b570      	push	{r4, r5, r6, lr}
 8005f3a:	4e0e      	ldr	r6, [pc, #56]	; (8005f74 <sbrk_aligned+0x3c>)
 8005f3c:	460c      	mov	r4, r1
 8005f3e:	6831      	ldr	r1, [r6, #0]
 8005f40:	4605      	mov	r5, r0
 8005f42:	b911      	cbnz	r1, 8005f4a <sbrk_aligned+0x12>
 8005f44:	f000 fe5a 	bl	8006bfc <_sbrk_r>
 8005f48:	6030      	str	r0, [r6, #0]
 8005f4a:	4621      	mov	r1, r4
 8005f4c:	4628      	mov	r0, r5
 8005f4e:	f000 fe55 	bl	8006bfc <_sbrk_r>
 8005f52:	1c43      	adds	r3, r0, #1
 8005f54:	d00a      	beq.n	8005f6c <sbrk_aligned+0x34>
 8005f56:	1cc4      	adds	r4, r0, #3
 8005f58:	f024 0403 	bic.w	r4, r4, #3
 8005f5c:	42a0      	cmp	r0, r4
 8005f5e:	d007      	beq.n	8005f70 <sbrk_aligned+0x38>
 8005f60:	1a21      	subs	r1, r4, r0
 8005f62:	4628      	mov	r0, r5
 8005f64:	f000 fe4a 	bl	8006bfc <_sbrk_r>
 8005f68:	3001      	adds	r0, #1
 8005f6a:	d101      	bne.n	8005f70 <sbrk_aligned+0x38>
 8005f6c:	f04f 34ff 	mov.w	r4, #4294967295
 8005f70:	4620      	mov	r0, r4
 8005f72:	bd70      	pop	{r4, r5, r6, pc}
 8005f74:	200008f0 	.word	0x200008f0

08005f78 <_malloc_r>:
 8005f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f7c:	1ccd      	adds	r5, r1, #3
 8005f7e:	f025 0503 	bic.w	r5, r5, #3
 8005f82:	3508      	adds	r5, #8
 8005f84:	2d0c      	cmp	r5, #12
 8005f86:	bf38      	it	cc
 8005f88:	250c      	movcc	r5, #12
 8005f8a:	2d00      	cmp	r5, #0
 8005f8c:	4607      	mov	r7, r0
 8005f8e:	db01      	blt.n	8005f94 <_malloc_r+0x1c>
 8005f90:	42a9      	cmp	r1, r5
 8005f92:	d905      	bls.n	8005fa0 <_malloc_r+0x28>
 8005f94:	230c      	movs	r3, #12
 8005f96:	2600      	movs	r6, #0
 8005f98:	603b      	str	r3, [r7, #0]
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005fa0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006074 <_malloc_r+0xfc>
 8005fa4:	f000 f868 	bl	8006078 <__malloc_lock>
 8005fa8:	f8d8 3000 	ldr.w	r3, [r8]
 8005fac:	461c      	mov	r4, r3
 8005fae:	bb5c      	cbnz	r4, 8006008 <_malloc_r+0x90>
 8005fb0:	4629      	mov	r1, r5
 8005fb2:	4638      	mov	r0, r7
 8005fb4:	f7ff ffc0 	bl	8005f38 <sbrk_aligned>
 8005fb8:	1c43      	adds	r3, r0, #1
 8005fba:	4604      	mov	r4, r0
 8005fbc:	d155      	bne.n	800606a <_malloc_r+0xf2>
 8005fbe:	f8d8 4000 	ldr.w	r4, [r8]
 8005fc2:	4626      	mov	r6, r4
 8005fc4:	2e00      	cmp	r6, #0
 8005fc6:	d145      	bne.n	8006054 <_malloc_r+0xdc>
 8005fc8:	2c00      	cmp	r4, #0
 8005fca:	d048      	beq.n	800605e <_malloc_r+0xe6>
 8005fcc:	6823      	ldr	r3, [r4, #0]
 8005fce:	4631      	mov	r1, r6
 8005fd0:	4638      	mov	r0, r7
 8005fd2:	eb04 0903 	add.w	r9, r4, r3
 8005fd6:	f000 fe11 	bl	8006bfc <_sbrk_r>
 8005fda:	4581      	cmp	r9, r0
 8005fdc:	d13f      	bne.n	800605e <_malloc_r+0xe6>
 8005fde:	6821      	ldr	r1, [r4, #0]
 8005fe0:	4638      	mov	r0, r7
 8005fe2:	1a6d      	subs	r5, r5, r1
 8005fe4:	4629      	mov	r1, r5
 8005fe6:	f7ff ffa7 	bl	8005f38 <sbrk_aligned>
 8005fea:	3001      	adds	r0, #1
 8005fec:	d037      	beq.n	800605e <_malloc_r+0xe6>
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	442b      	add	r3, r5
 8005ff2:	6023      	str	r3, [r4, #0]
 8005ff4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d038      	beq.n	800606e <_malloc_r+0xf6>
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	42a2      	cmp	r2, r4
 8006000:	d12b      	bne.n	800605a <_malloc_r+0xe2>
 8006002:	2200      	movs	r2, #0
 8006004:	605a      	str	r2, [r3, #4]
 8006006:	e00f      	b.n	8006028 <_malloc_r+0xb0>
 8006008:	6822      	ldr	r2, [r4, #0]
 800600a:	1b52      	subs	r2, r2, r5
 800600c:	d41f      	bmi.n	800604e <_malloc_r+0xd6>
 800600e:	2a0b      	cmp	r2, #11
 8006010:	d917      	bls.n	8006042 <_malloc_r+0xca>
 8006012:	1961      	adds	r1, r4, r5
 8006014:	42a3      	cmp	r3, r4
 8006016:	6025      	str	r5, [r4, #0]
 8006018:	bf18      	it	ne
 800601a:	6059      	strne	r1, [r3, #4]
 800601c:	6863      	ldr	r3, [r4, #4]
 800601e:	bf08      	it	eq
 8006020:	f8c8 1000 	streq.w	r1, [r8]
 8006024:	5162      	str	r2, [r4, r5]
 8006026:	604b      	str	r3, [r1, #4]
 8006028:	4638      	mov	r0, r7
 800602a:	f104 060b 	add.w	r6, r4, #11
 800602e:	f000 f829 	bl	8006084 <__malloc_unlock>
 8006032:	f026 0607 	bic.w	r6, r6, #7
 8006036:	1d23      	adds	r3, r4, #4
 8006038:	1af2      	subs	r2, r6, r3
 800603a:	d0ae      	beq.n	8005f9a <_malloc_r+0x22>
 800603c:	1b9b      	subs	r3, r3, r6
 800603e:	50a3      	str	r3, [r4, r2]
 8006040:	e7ab      	b.n	8005f9a <_malloc_r+0x22>
 8006042:	42a3      	cmp	r3, r4
 8006044:	6862      	ldr	r2, [r4, #4]
 8006046:	d1dd      	bne.n	8006004 <_malloc_r+0x8c>
 8006048:	f8c8 2000 	str.w	r2, [r8]
 800604c:	e7ec      	b.n	8006028 <_malloc_r+0xb0>
 800604e:	4623      	mov	r3, r4
 8006050:	6864      	ldr	r4, [r4, #4]
 8006052:	e7ac      	b.n	8005fae <_malloc_r+0x36>
 8006054:	4634      	mov	r4, r6
 8006056:	6876      	ldr	r6, [r6, #4]
 8006058:	e7b4      	b.n	8005fc4 <_malloc_r+0x4c>
 800605a:	4613      	mov	r3, r2
 800605c:	e7cc      	b.n	8005ff8 <_malloc_r+0x80>
 800605e:	230c      	movs	r3, #12
 8006060:	4638      	mov	r0, r7
 8006062:	603b      	str	r3, [r7, #0]
 8006064:	f000 f80e 	bl	8006084 <__malloc_unlock>
 8006068:	e797      	b.n	8005f9a <_malloc_r+0x22>
 800606a:	6025      	str	r5, [r4, #0]
 800606c:	e7dc      	b.n	8006028 <_malloc_r+0xb0>
 800606e:	605b      	str	r3, [r3, #4]
 8006070:	deff      	udf	#255	; 0xff
 8006072:	bf00      	nop
 8006074:	200008ec 	.word	0x200008ec

08006078 <__malloc_lock>:
 8006078:	4801      	ldr	r0, [pc, #4]	; (8006080 <__malloc_lock+0x8>)
 800607a:	f000 be0c 	b.w	8006c96 <__retarget_lock_acquire_recursive>
 800607e:	bf00      	nop
 8006080:	20000a34 	.word	0x20000a34

08006084 <__malloc_unlock>:
 8006084:	4801      	ldr	r0, [pc, #4]	; (800608c <__malloc_unlock+0x8>)
 8006086:	f000 be07 	b.w	8006c98 <__retarget_lock_release_recursive>
 800608a:	bf00      	nop
 800608c:	20000a34 	.word	0x20000a34

08006090 <__cvt>:
 8006090:	2b00      	cmp	r3, #0
 8006092:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006096:	461f      	mov	r7, r3
 8006098:	bfbb      	ittet	lt
 800609a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800609e:	461f      	movlt	r7, r3
 80060a0:	2300      	movge	r3, #0
 80060a2:	232d      	movlt	r3, #45	; 0x2d
 80060a4:	b088      	sub	sp, #32
 80060a6:	4614      	mov	r4, r2
 80060a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80060ac:	7013      	strb	r3, [r2, #0]
 80060ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80060b4:	f023 0820 	bic.w	r8, r3, #32
 80060b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060bc:	d005      	beq.n	80060ca <__cvt+0x3a>
 80060be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80060c2:	d100      	bne.n	80060c6 <__cvt+0x36>
 80060c4:	3501      	adds	r5, #1
 80060c6:	2302      	movs	r3, #2
 80060c8:	e000      	b.n	80060cc <__cvt+0x3c>
 80060ca:	2303      	movs	r3, #3
 80060cc:	aa07      	add	r2, sp, #28
 80060ce:	9204      	str	r2, [sp, #16]
 80060d0:	aa06      	add	r2, sp, #24
 80060d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80060d6:	e9cd 3500 	strd	r3, r5, [sp]
 80060da:	4622      	mov	r2, r4
 80060dc:	463b      	mov	r3, r7
 80060de:	f000 fe73 	bl	8006dc8 <_dtoa_r>
 80060e2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80060e6:	4606      	mov	r6, r0
 80060e8:	d102      	bne.n	80060f0 <__cvt+0x60>
 80060ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80060ec:	07db      	lsls	r3, r3, #31
 80060ee:	d522      	bpl.n	8006136 <__cvt+0xa6>
 80060f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060f4:	eb06 0905 	add.w	r9, r6, r5
 80060f8:	d110      	bne.n	800611c <__cvt+0x8c>
 80060fa:	7833      	ldrb	r3, [r6, #0]
 80060fc:	2b30      	cmp	r3, #48	; 0x30
 80060fe:	d10a      	bne.n	8006116 <__cvt+0x86>
 8006100:	2200      	movs	r2, #0
 8006102:	2300      	movs	r3, #0
 8006104:	4620      	mov	r0, r4
 8006106:	4639      	mov	r1, r7
 8006108:	f7fa fc8a 	bl	8000a20 <__aeabi_dcmpeq>
 800610c:	b918      	cbnz	r0, 8006116 <__cvt+0x86>
 800610e:	f1c5 0501 	rsb	r5, r5, #1
 8006112:	f8ca 5000 	str.w	r5, [sl]
 8006116:	f8da 3000 	ldr.w	r3, [sl]
 800611a:	4499      	add	r9, r3
 800611c:	2200      	movs	r2, #0
 800611e:	2300      	movs	r3, #0
 8006120:	4620      	mov	r0, r4
 8006122:	4639      	mov	r1, r7
 8006124:	f7fa fc7c 	bl	8000a20 <__aeabi_dcmpeq>
 8006128:	b108      	cbz	r0, 800612e <__cvt+0x9e>
 800612a:	f8cd 901c 	str.w	r9, [sp, #28]
 800612e:	2230      	movs	r2, #48	; 0x30
 8006130:	9b07      	ldr	r3, [sp, #28]
 8006132:	454b      	cmp	r3, r9
 8006134:	d307      	bcc.n	8006146 <__cvt+0xb6>
 8006136:	4630      	mov	r0, r6
 8006138:	9b07      	ldr	r3, [sp, #28]
 800613a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800613c:	1b9b      	subs	r3, r3, r6
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	b008      	add	sp, #32
 8006142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006146:	1c59      	adds	r1, r3, #1
 8006148:	9107      	str	r1, [sp, #28]
 800614a:	701a      	strb	r2, [r3, #0]
 800614c:	e7f0      	b.n	8006130 <__cvt+0xa0>

0800614e <__exponent>:
 800614e:	4603      	mov	r3, r0
 8006150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006152:	2900      	cmp	r1, #0
 8006154:	f803 2b02 	strb.w	r2, [r3], #2
 8006158:	bfb6      	itet	lt
 800615a:	222d      	movlt	r2, #45	; 0x2d
 800615c:	222b      	movge	r2, #43	; 0x2b
 800615e:	4249      	neglt	r1, r1
 8006160:	2909      	cmp	r1, #9
 8006162:	7042      	strb	r2, [r0, #1]
 8006164:	dd2a      	ble.n	80061bc <__exponent+0x6e>
 8006166:	f10d 0207 	add.w	r2, sp, #7
 800616a:	4617      	mov	r7, r2
 800616c:	260a      	movs	r6, #10
 800616e:	fb91 f5f6 	sdiv	r5, r1, r6
 8006172:	4694      	mov	ip, r2
 8006174:	fb06 1415 	mls	r4, r6, r5, r1
 8006178:	3430      	adds	r4, #48	; 0x30
 800617a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800617e:	460c      	mov	r4, r1
 8006180:	2c63      	cmp	r4, #99	; 0x63
 8006182:	4629      	mov	r1, r5
 8006184:	f102 32ff 	add.w	r2, r2, #4294967295
 8006188:	dcf1      	bgt.n	800616e <__exponent+0x20>
 800618a:	3130      	adds	r1, #48	; 0x30
 800618c:	f1ac 0402 	sub.w	r4, ip, #2
 8006190:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006194:	4622      	mov	r2, r4
 8006196:	1c41      	adds	r1, r0, #1
 8006198:	42ba      	cmp	r2, r7
 800619a:	d30a      	bcc.n	80061b2 <__exponent+0x64>
 800619c:	f10d 0209 	add.w	r2, sp, #9
 80061a0:	eba2 020c 	sub.w	r2, r2, ip
 80061a4:	42bc      	cmp	r4, r7
 80061a6:	bf88      	it	hi
 80061a8:	2200      	movhi	r2, #0
 80061aa:	4413      	add	r3, r2
 80061ac:	1a18      	subs	r0, r3, r0
 80061ae:	b003      	add	sp, #12
 80061b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061b2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80061b6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80061ba:	e7ed      	b.n	8006198 <__exponent+0x4a>
 80061bc:	2330      	movs	r3, #48	; 0x30
 80061be:	3130      	adds	r1, #48	; 0x30
 80061c0:	7083      	strb	r3, [r0, #2]
 80061c2:	70c1      	strb	r1, [r0, #3]
 80061c4:	1d03      	adds	r3, r0, #4
 80061c6:	e7f1      	b.n	80061ac <__exponent+0x5e>

080061c8 <_printf_float>:
 80061c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061cc:	b091      	sub	sp, #68	; 0x44
 80061ce:	460c      	mov	r4, r1
 80061d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80061d4:	4616      	mov	r6, r2
 80061d6:	461f      	mov	r7, r3
 80061d8:	4605      	mov	r5, r0
 80061da:	f000 fcd7 	bl	8006b8c <_localeconv_r>
 80061de:	6803      	ldr	r3, [r0, #0]
 80061e0:	4618      	mov	r0, r3
 80061e2:	9309      	str	r3, [sp, #36]	; 0x24
 80061e4:	f7f9 fff0 	bl	80001c8 <strlen>
 80061e8:	2300      	movs	r3, #0
 80061ea:	930e      	str	r3, [sp, #56]	; 0x38
 80061ec:	f8d8 3000 	ldr.w	r3, [r8]
 80061f0:	900a      	str	r0, [sp, #40]	; 0x28
 80061f2:	3307      	adds	r3, #7
 80061f4:	f023 0307 	bic.w	r3, r3, #7
 80061f8:	f103 0208 	add.w	r2, r3, #8
 80061fc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006200:	f8d4 b000 	ldr.w	fp, [r4]
 8006204:	f8c8 2000 	str.w	r2, [r8]
 8006208:	e9d3 a800 	ldrd	sl, r8, [r3]
 800620c:	4652      	mov	r2, sl
 800620e:	4643      	mov	r3, r8
 8006210:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006214:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8006218:	930b      	str	r3, [sp, #44]	; 0x2c
 800621a:	f04f 32ff 	mov.w	r2, #4294967295
 800621e:	4650      	mov	r0, sl
 8006220:	4b9c      	ldr	r3, [pc, #624]	; (8006494 <_printf_float+0x2cc>)
 8006222:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006224:	f7fa fc2e 	bl	8000a84 <__aeabi_dcmpun>
 8006228:	bb70      	cbnz	r0, 8006288 <_printf_float+0xc0>
 800622a:	f04f 32ff 	mov.w	r2, #4294967295
 800622e:	4650      	mov	r0, sl
 8006230:	4b98      	ldr	r3, [pc, #608]	; (8006494 <_printf_float+0x2cc>)
 8006232:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006234:	f7fa fc08 	bl	8000a48 <__aeabi_dcmple>
 8006238:	bb30      	cbnz	r0, 8006288 <_printf_float+0xc0>
 800623a:	2200      	movs	r2, #0
 800623c:	2300      	movs	r3, #0
 800623e:	4650      	mov	r0, sl
 8006240:	4641      	mov	r1, r8
 8006242:	f7fa fbf7 	bl	8000a34 <__aeabi_dcmplt>
 8006246:	b110      	cbz	r0, 800624e <_printf_float+0x86>
 8006248:	232d      	movs	r3, #45	; 0x2d
 800624a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800624e:	4a92      	ldr	r2, [pc, #584]	; (8006498 <_printf_float+0x2d0>)
 8006250:	4b92      	ldr	r3, [pc, #584]	; (800649c <_printf_float+0x2d4>)
 8006252:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006256:	bf94      	ite	ls
 8006258:	4690      	movls	r8, r2
 800625a:	4698      	movhi	r8, r3
 800625c:	2303      	movs	r3, #3
 800625e:	f04f 0a00 	mov.w	sl, #0
 8006262:	6123      	str	r3, [r4, #16]
 8006264:	f02b 0304 	bic.w	r3, fp, #4
 8006268:	6023      	str	r3, [r4, #0]
 800626a:	4633      	mov	r3, r6
 800626c:	4621      	mov	r1, r4
 800626e:	4628      	mov	r0, r5
 8006270:	9700      	str	r7, [sp, #0]
 8006272:	aa0f      	add	r2, sp, #60	; 0x3c
 8006274:	f000 f9d6 	bl	8006624 <_printf_common>
 8006278:	3001      	adds	r0, #1
 800627a:	f040 8090 	bne.w	800639e <_printf_float+0x1d6>
 800627e:	f04f 30ff 	mov.w	r0, #4294967295
 8006282:	b011      	add	sp, #68	; 0x44
 8006284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006288:	4652      	mov	r2, sl
 800628a:	4643      	mov	r3, r8
 800628c:	4650      	mov	r0, sl
 800628e:	4641      	mov	r1, r8
 8006290:	f7fa fbf8 	bl	8000a84 <__aeabi_dcmpun>
 8006294:	b148      	cbz	r0, 80062aa <_printf_float+0xe2>
 8006296:	f1b8 0f00 	cmp.w	r8, #0
 800629a:	bfb8      	it	lt
 800629c:	232d      	movlt	r3, #45	; 0x2d
 800629e:	4a80      	ldr	r2, [pc, #512]	; (80064a0 <_printf_float+0x2d8>)
 80062a0:	bfb8      	it	lt
 80062a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80062a6:	4b7f      	ldr	r3, [pc, #508]	; (80064a4 <_printf_float+0x2dc>)
 80062a8:	e7d3      	b.n	8006252 <_printf_float+0x8a>
 80062aa:	6863      	ldr	r3, [r4, #4]
 80062ac:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80062b0:	1c5a      	adds	r2, r3, #1
 80062b2:	d142      	bne.n	800633a <_printf_float+0x172>
 80062b4:	2306      	movs	r3, #6
 80062b6:	6063      	str	r3, [r4, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	9206      	str	r2, [sp, #24]
 80062bc:	aa0e      	add	r2, sp, #56	; 0x38
 80062be:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80062c2:	aa0d      	add	r2, sp, #52	; 0x34
 80062c4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80062c8:	9203      	str	r2, [sp, #12]
 80062ca:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80062ce:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80062d2:	6023      	str	r3, [r4, #0]
 80062d4:	6863      	ldr	r3, [r4, #4]
 80062d6:	4652      	mov	r2, sl
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	4628      	mov	r0, r5
 80062dc:	4643      	mov	r3, r8
 80062de:	910b      	str	r1, [sp, #44]	; 0x2c
 80062e0:	f7ff fed6 	bl	8006090 <__cvt>
 80062e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062e6:	4680      	mov	r8, r0
 80062e8:	2947      	cmp	r1, #71	; 0x47
 80062ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 80062ec:	d108      	bne.n	8006300 <_printf_float+0x138>
 80062ee:	1cc8      	adds	r0, r1, #3
 80062f0:	db02      	blt.n	80062f8 <_printf_float+0x130>
 80062f2:	6863      	ldr	r3, [r4, #4]
 80062f4:	4299      	cmp	r1, r3
 80062f6:	dd40      	ble.n	800637a <_printf_float+0x1b2>
 80062f8:	f1a9 0902 	sub.w	r9, r9, #2
 80062fc:	fa5f f989 	uxtb.w	r9, r9
 8006300:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006304:	d81f      	bhi.n	8006346 <_printf_float+0x17e>
 8006306:	464a      	mov	r2, r9
 8006308:	3901      	subs	r1, #1
 800630a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800630e:	910d      	str	r1, [sp, #52]	; 0x34
 8006310:	f7ff ff1d 	bl	800614e <__exponent>
 8006314:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006316:	4682      	mov	sl, r0
 8006318:	1813      	adds	r3, r2, r0
 800631a:	2a01      	cmp	r2, #1
 800631c:	6123      	str	r3, [r4, #16]
 800631e:	dc02      	bgt.n	8006326 <_printf_float+0x15e>
 8006320:	6822      	ldr	r2, [r4, #0]
 8006322:	07d2      	lsls	r2, r2, #31
 8006324:	d501      	bpl.n	800632a <_printf_float+0x162>
 8006326:	3301      	adds	r3, #1
 8006328:	6123      	str	r3, [r4, #16]
 800632a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800632e:	2b00      	cmp	r3, #0
 8006330:	d09b      	beq.n	800626a <_printf_float+0xa2>
 8006332:	232d      	movs	r3, #45	; 0x2d
 8006334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006338:	e797      	b.n	800626a <_printf_float+0xa2>
 800633a:	2947      	cmp	r1, #71	; 0x47
 800633c:	d1bc      	bne.n	80062b8 <_printf_float+0xf0>
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1ba      	bne.n	80062b8 <_printf_float+0xf0>
 8006342:	2301      	movs	r3, #1
 8006344:	e7b7      	b.n	80062b6 <_printf_float+0xee>
 8006346:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800634a:	d118      	bne.n	800637e <_printf_float+0x1b6>
 800634c:	2900      	cmp	r1, #0
 800634e:	6863      	ldr	r3, [r4, #4]
 8006350:	dd0b      	ble.n	800636a <_printf_float+0x1a2>
 8006352:	6121      	str	r1, [r4, #16]
 8006354:	b913      	cbnz	r3, 800635c <_printf_float+0x194>
 8006356:	6822      	ldr	r2, [r4, #0]
 8006358:	07d0      	lsls	r0, r2, #31
 800635a:	d502      	bpl.n	8006362 <_printf_float+0x19a>
 800635c:	3301      	adds	r3, #1
 800635e:	440b      	add	r3, r1
 8006360:	6123      	str	r3, [r4, #16]
 8006362:	f04f 0a00 	mov.w	sl, #0
 8006366:	65a1      	str	r1, [r4, #88]	; 0x58
 8006368:	e7df      	b.n	800632a <_printf_float+0x162>
 800636a:	b913      	cbnz	r3, 8006372 <_printf_float+0x1aa>
 800636c:	6822      	ldr	r2, [r4, #0]
 800636e:	07d2      	lsls	r2, r2, #31
 8006370:	d501      	bpl.n	8006376 <_printf_float+0x1ae>
 8006372:	3302      	adds	r3, #2
 8006374:	e7f4      	b.n	8006360 <_printf_float+0x198>
 8006376:	2301      	movs	r3, #1
 8006378:	e7f2      	b.n	8006360 <_printf_float+0x198>
 800637a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800637e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006380:	4299      	cmp	r1, r3
 8006382:	db05      	blt.n	8006390 <_printf_float+0x1c8>
 8006384:	6823      	ldr	r3, [r4, #0]
 8006386:	6121      	str	r1, [r4, #16]
 8006388:	07d8      	lsls	r0, r3, #31
 800638a:	d5ea      	bpl.n	8006362 <_printf_float+0x19a>
 800638c:	1c4b      	adds	r3, r1, #1
 800638e:	e7e7      	b.n	8006360 <_printf_float+0x198>
 8006390:	2900      	cmp	r1, #0
 8006392:	bfcc      	ite	gt
 8006394:	2201      	movgt	r2, #1
 8006396:	f1c1 0202 	rsble	r2, r1, #2
 800639a:	4413      	add	r3, r2
 800639c:	e7e0      	b.n	8006360 <_printf_float+0x198>
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	055a      	lsls	r2, r3, #21
 80063a2:	d407      	bmi.n	80063b4 <_printf_float+0x1ec>
 80063a4:	6923      	ldr	r3, [r4, #16]
 80063a6:	4642      	mov	r2, r8
 80063a8:	4631      	mov	r1, r6
 80063aa:	4628      	mov	r0, r5
 80063ac:	47b8      	blx	r7
 80063ae:	3001      	adds	r0, #1
 80063b0:	d12b      	bne.n	800640a <_printf_float+0x242>
 80063b2:	e764      	b.n	800627e <_printf_float+0xb6>
 80063b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80063b8:	f240 80dd 	bls.w	8006576 <_printf_float+0x3ae>
 80063bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80063c0:	2200      	movs	r2, #0
 80063c2:	2300      	movs	r3, #0
 80063c4:	f7fa fb2c 	bl	8000a20 <__aeabi_dcmpeq>
 80063c8:	2800      	cmp	r0, #0
 80063ca:	d033      	beq.n	8006434 <_printf_float+0x26c>
 80063cc:	2301      	movs	r3, #1
 80063ce:	4631      	mov	r1, r6
 80063d0:	4628      	mov	r0, r5
 80063d2:	4a35      	ldr	r2, [pc, #212]	; (80064a8 <_printf_float+0x2e0>)
 80063d4:	47b8      	blx	r7
 80063d6:	3001      	adds	r0, #1
 80063d8:	f43f af51 	beq.w	800627e <_printf_float+0xb6>
 80063dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80063e0:	429a      	cmp	r2, r3
 80063e2:	db02      	blt.n	80063ea <_printf_float+0x222>
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	07d8      	lsls	r0, r3, #31
 80063e8:	d50f      	bpl.n	800640a <_printf_float+0x242>
 80063ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063ee:	4631      	mov	r1, r6
 80063f0:	4628      	mov	r0, r5
 80063f2:	47b8      	blx	r7
 80063f4:	3001      	adds	r0, #1
 80063f6:	f43f af42 	beq.w	800627e <_printf_float+0xb6>
 80063fa:	f04f 0800 	mov.w	r8, #0
 80063fe:	f104 091a 	add.w	r9, r4, #26
 8006402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006404:	3b01      	subs	r3, #1
 8006406:	4543      	cmp	r3, r8
 8006408:	dc09      	bgt.n	800641e <_printf_float+0x256>
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	079b      	lsls	r3, r3, #30
 800640e:	f100 8104 	bmi.w	800661a <_printf_float+0x452>
 8006412:	68e0      	ldr	r0, [r4, #12]
 8006414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006416:	4298      	cmp	r0, r3
 8006418:	bfb8      	it	lt
 800641a:	4618      	movlt	r0, r3
 800641c:	e731      	b.n	8006282 <_printf_float+0xba>
 800641e:	2301      	movs	r3, #1
 8006420:	464a      	mov	r2, r9
 8006422:	4631      	mov	r1, r6
 8006424:	4628      	mov	r0, r5
 8006426:	47b8      	blx	r7
 8006428:	3001      	adds	r0, #1
 800642a:	f43f af28 	beq.w	800627e <_printf_float+0xb6>
 800642e:	f108 0801 	add.w	r8, r8, #1
 8006432:	e7e6      	b.n	8006402 <_printf_float+0x23a>
 8006434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006436:	2b00      	cmp	r3, #0
 8006438:	dc38      	bgt.n	80064ac <_printf_float+0x2e4>
 800643a:	2301      	movs	r3, #1
 800643c:	4631      	mov	r1, r6
 800643e:	4628      	mov	r0, r5
 8006440:	4a19      	ldr	r2, [pc, #100]	; (80064a8 <_printf_float+0x2e0>)
 8006442:	47b8      	blx	r7
 8006444:	3001      	adds	r0, #1
 8006446:	f43f af1a 	beq.w	800627e <_printf_float+0xb6>
 800644a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800644e:	4313      	orrs	r3, r2
 8006450:	d102      	bne.n	8006458 <_printf_float+0x290>
 8006452:	6823      	ldr	r3, [r4, #0]
 8006454:	07d9      	lsls	r1, r3, #31
 8006456:	d5d8      	bpl.n	800640a <_printf_float+0x242>
 8006458:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800645c:	4631      	mov	r1, r6
 800645e:	4628      	mov	r0, r5
 8006460:	47b8      	blx	r7
 8006462:	3001      	adds	r0, #1
 8006464:	f43f af0b 	beq.w	800627e <_printf_float+0xb6>
 8006468:	f04f 0900 	mov.w	r9, #0
 800646c:	f104 0a1a 	add.w	sl, r4, #26
 8006470:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006472:	425b      	negs	r3, r3
 8006474:	454b      	cmp	r3, r9
 8006476:	dc01      	bgt.n	800647c <_printf_float+0x2b4>
 8006478:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800647a:	e794      	b.n	80063a6 <_printf_float+0x1de>
 800647c:	2301      	movs	r3, #1
 800647e:	4652      	mov	r2, sl
 8006480:	4631      	mov	r1, r6
 8006482:	4628      	mov	r0, r5
 8006484:	47b8      	blx	r7
 8006486:	3001      	adds	r0, #1
 8006488:	f43f aef9 	beq.w	800627e <_printf_float+0xb6>
 800648c:	f109 0901 	add.w	r9, r9, #1
 8006490:	e7ee      	b.n	8006470 <_printf_float+0x2a8>
 8006492:	bf00      	nop
 8006494:	7fefffff 	.word	0x7fefffff
 8006498:	080090ec 	.word	0x080090ec
 800649c:	080090f0 	.word	0x080090f0
 80064a0:	080090f4 	.word	0x080090f4
 80064a4:	080090f8 	.word	0x080090f8
 80064a8:	080090fc 	.word	0x080090fc
 80064ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064b0:	429a      	cmp	r2, r3
 80064b2:	bfa8      	it	ge
 80064b4:	461a      	movge	r2, r3
 80064b6:	2a00      	cmp	r2, #0
 80064b8:	4691      	mov	r9, r2
 80064ba:	dc37      	bgt.n	800652c <_printf_float+0x364>
 80064bc:	f04f 0b00 	mov.w	fp, #0
 80064c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064c4:	f104 021a 	add.w	r2, r4, #26
 80064c8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80064cc:	ebaa 0309 	sub.w	r3, sl, r9
 80064d0:	455b      	cmp	r3, fp
 80064d2:	dc33      	bgt.n	800653c <_printf_float+0x374>
 80064d4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80064d8:	429a      	cmp	r2, r3
 80064da:	db3b      	blt.n	8006554 <_printf_float+0x38c>
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	07da      	lsls	r2, r3, #31
 80064e0:	d438      	bmi.n	8006554 <_printf_float+0x38c>
 80064e2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80064e6:	eba2 0903 	sub.w	r9, r2, r3
 80064ea:	eba2 020a 	sub.w	r2, r2, sl
 80064ee:	4591      	cmp	r9, r2
 80064f0:	bfa8      	it	ge
 80064f2:	4691      	movge	r9, r2
 80064f4:	f1b9 0f00 	cmp.w	r9, #0
 80064f8:	dc34      	bgt.n	8006564 <_printf_float+0x39c>
 80064fa:	f04f 0800 	mov.w	r8, #0
 80064fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006502:	f104 0a1a 	add.w	sl, r4, #26
 8006506:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800650a:	1a9b      	subs	r3, r3, r2
 800650c:	eba3 0309 	sub.w	r3, r3, r9
 8006510:	4543      	cmp	r3, r8
 8006512:	f77f af7a 	ble.w	800640a <_printf_float+0x242>
 8006516:	2301      	movs	r3, #1
 8006518:	4652      	mov	r2, sl
 800651a:	4631      	mov	r1, r6
 800651c:	4628      	mov	r0, r5
 800651e:	47b8      	blx	r7
 8006520:	3001      	adds	r0, #1
 8006522:	f43f aeac 	beq.w	800627e <_printf_float+0xb6>
 8006526:	f108 0801 	add.w	r8, r8, #1
 800652a:	e7ec      	b.n	8006506 <_printf_float+0x33e>
 800652c:	4613      	mov	r3, r2
 800652e:	4631      	mov	r1, r6
 8006530:	4642      	mov	r2, r8
 8006532:	4628      	mov	r0, r5
 8006534:	47b8      	blx	r7
 8006536:	3001      	adds	r0, #1
 8006538:	d1c0      	bne.n	80064bc <_printf_float+0x2f4>
 800653a:	e6a0      	b.n	800627e <_printf_float+0xb6>
 800653c:	2301      	movs	r3, #1
 800653e:	4631      	mov	r1, r6
 8006540:	4628      	mov	r0, r5
 8006542:	920b      	str	r2, [sp, #44]	; 0x2c
 8006544:	47b8      	blx	r7
 8006546:	3001      	adds	r0, #1
 8006548:	f43f ae99 	beq.w	800627e <_printf_float+0xb6>
 800654c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800654e:	f10b 0b01 	add.w	fp, fp, #1
 8006552:	e7b9      	b.n	80064c8 <_printf_float+0x300>
 8006554:	4631      	mov	r1, r6
 8006556:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800655a:	4628      	mov	r0, r5
 800655c:	47b8      	blx	r7
 800655e:	3001      	adds	r0, #1
 8006560:	d1bf      	bne.n	80064e2 <_printf_float+0x31a>
 8006562:	e68c      	b.n	800627e <_printf_float+0xb6>
 8006564:	464b      	mov	r3, r9
 8006566:	4631      	mov	r1, r6
 8006568:	4628      	mov	r0, r5
 800656a:	eb08 020a 	add.w	r2, r8, sl
 800656e:	47b8      	blx	r7
 8006570:	3001      	adds	r0, #1
 8006572:	d1c2      	bne.n	80064fa <_printf_float+0x332>
 8006574:	e683      	b.n	800627e <_printf_float+0xb6>
 8006576:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006578:	2a01      	cmp	r2, #1
 800657a:	dc01      	bgt.n	8006580 <_printf_float+0x3b8>
 800657c:	07db      	lsls	r3, r3, #31
 800657e:	d539      	bpl.n	80065f4 <_printf_float+0x42c>
 8006580:	2301      	movs	r3, #1
 8006582:	4642      	mov	r2, r8
 8006584:	4631      	mov	r1, r6
 8006586:	4628      	mov	r0, r5
 8006588:	47b8      	blx	r7
 800658a:	3001      	adds	r0, #1
 800658c:	f43f ae77 	beq.w	800627e <_printf_float+0xb6>
 8006590:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006594:	4631      	mov	r1, r6
 8006596:	4628      	mov	r0, r5
 8006598:	47b8      	blx	r7
 800659a:	3001      	adds	r0, #1
 800659c:	f43f ae6f 	beq.w	800627e <_printf_float+0xb6>
 80065a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065a4:	2200      	movs	r2, #0
 80065a6:	2300      	movs	r3, #0
 80065a8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80065ac:	f7fa fa38 	bl	8000a20 <__aeabi_dcmpeq>
 80065b0:	b9d8      	cbnz	r0, 80065ea <_printf_float+0x422>
 80065b2:	f109 33ff 	add.w	r3, r9, #4294967295
 80065b6:	f108 0201 	add.w	r2, r8, #1
 80065ba:	4631      	mov	r1, r6
 80065bc:	4628      	mov	r0, r5
 80065be:	47b8      	blx	r7
 80065c0:	3001      	adds	r0, #1
 80065c2:	d10e      	bne.n	80065e2 <_printf_float+0x41a>
 80065c4:	e65b      	b.n	800627e <_printf_float+0xb6>
 80065c6:	2301      	movs	r3, #1
 80065c8:	464a      	mov	r2, r9
 80065ca:	4631      	mov	r1, r6
 80065cc:	4628      	mov	r0, r5
 80065ce:	47b8      	blx	r7
 80065d0:	3001      	adds	r0, #1
 80065d2:	f43f ae54 	beq.w	800627e <_printf_float+0xb6>
 80065d6:	f108 0801 	add.w	r8, r8, #1
 80065da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065dc:	3b01      	subs	r3, #1
 80065de:	4543      	cmp	r3, r8
 80065e0:	dcf1      	bgt.n	80065c6 <_printf_float+0x3fe>
 80065e2:	4653      	mov	r3, sl
 80065e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80065e8:	e6de      	b.n	80063a8 <_printf_float+0x1e0>
 80065ea:	f04f 0800 	mov.w	r8, #0
 80065ee:	f104 091a 	add.w	r9, r4, #26
 80065f2:	e7f2      	b.n	80065da <_printf_float+0x412>
 80065f4:	2301      	movs	r3, #1
 80065f6:	4642      	mov	r2, r8
 80065f8:	e7df      	b.n	80065ba <_printf_float+0x3f2>
 80065fa:	2301      	movs	r3, #1
 80065fc:	464a      	mov	r2, r9
 80065fe:	4631      	mov	r1, r6
 8006600:	4628      	mov	r0, r5
 8006602:	47b8      	blx	r7
 8006604:	3001      	adds	r0, #1
 8006606:	f43f ae3a 	beq.w	800627e <_printf_float+0xb6>
 800660a:	f108 0801 	add.w	r8, r8, #1
 800660e:	68e3      	ldr	r3, [r4, #12]
 8006610:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006612:	1a5b      	subs	r3, r3, r1
 8006614:	4543      	cmp	r3, r8
 8006616:	dcf0      	bgt.n	80065fa <_printf_float+0x432>
 8006618:	e6fb      	b.n	8006412 <_printf_float+0x24a>
 800661a:	f04f 0800 	mov.w	r8, #0
 800661e:	f104 0919 	add.w	r9, r4, #25
 8006622:	e7f4      	b.n	800660e <_printf_float+0x446>

08006624 <_printf_common>:
 8006624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006628:	4616      	mov	r6, r2
 800662a:	4699      	mov	r9, r3
 800662c:	688a      	ldr	r2, [r1, #8]
 800662e:	690b      	ldr	r3, [r1, #16]
 8006630:	4607      	mov	r7, r0
 8006632:	4293      	cmp	r3, r2
 8006634:	bfb8      	it	lt
 8006636:	4613      	movlt	r3, r2
 8006638:	6033      	str	r3, [r6, #0]
 800663a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800663e:	460c      	mov	r4, r1
 8006640:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006644:	b10a      	cbz	r2, 800664a <_printf_common+0x26>
 8006646:	3301      	adds	r3, #1
 8006648:	6033      	str	r3, [r6, #0]
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	0699      	lsls	r1, r3, #26
 800664e:	bf42      	ittt	mi
 8006650:	6833      	ldrmi	r3, [r6, #0]
 8006652:	3302      	addmi	r3, #2
 8006654:	6033      	strmi	r3, [r6, #0]
 8006656:	6825      	ldr	r5, [r4, #0]
 8006658:	f015 0506 	ands.w	r5, r5, #6
 800665c:	d106      	bne.n	800666c <_printf_common+0x48>
 800665e:	f104 0a19 	add.w	sl, r4, #25
 8006662:	68e3      	ldr	r3, [r4, #12]
 8006664:	6832      	ldr	r2, [r6, #0]
 8006666:	1a9b      	subs	r3, r3, r2
 8006668:	42ab      	cmp	r3, r5
 800666a:	dc2b      	bgt.n	80066c4 <_printf_common+0xa0>
 800666c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006670:	1e13      	subs	r3, r2, #0
 8006672:	6822      	ldr	r2, [r4, #0]
 8006674:	bf18      	it	ne
 8006676:	2301      	movne	r3, #1
 8006678:	0692      	lsls	r2, r2, #26
 800667a:	d430      	bmi.n	80066de <_printf_common+0xba>
 800667c:	4649      	mov	r1, r9
 800667e:	4638      	mov	r0, r7
 8006680:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006684:	47c0      	blx	r8
 8006686:	3001      	adds	r0, #1
 8006688:	d023      	beq.n	80066d2 <_printf_common+0xae>
 800668a:	6823      	ldr	r3, [r4, #0]
 800668c:	6922      	ldr	r2, [r4, #16]
 800668e:	f003 0306 	and.w	r3, r3, #6
 8006692:	2b04      	cmp	r3, #4
 8006694:	bf14      	ite	ne
 8006696:	2500      	movne	r5, #0
 8006698:	6833      	ldreq	r3, [r6, #0]
 800669a:	f04f 0600 	mov.w	r6, #0
 800669e:	bf08      	it	eq
 80066a0:	68e5      	ldreq	r5, [r4, #12]
 80066a2:	f104 041a 	add.w	r4, r4, #26
 80066a6:	bf08      	it	eq
 80066a8:	1aed      	subeq	r5, r5, r3
 80066aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80066ae:	bf08      	it	eq
 80066b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066b4:	4293      	cmp	r3, r2
 80066b6:	bfc4      	itt	gt
 80066b8:	1a9b      	subgt	r3, r3, r2
 80066ba:	18ed      	addgt	r5, r5, r3
 80066bc:	42b5      	cmp	r5, r6
 80066be:	d11a      	bne.n	80066f6 <_printf_common+0xd2>
 80066c0:	2000      	movs	r0, #0
 80066c2:	e008      	b.n	80066d6 <_printf_common+0xb2>
 80066c4:	2301      	movs	r3, #1
 80066c6:	4652      	mov	r2, sl
 80066c8:	4649      	mov	r1, r9
 80066ca:	4638      	mov	r0, r7
 80066cc:	47c0      	blx	r8
 80066ce:	3001      	adds	r0, #1
 80066d0:	d103      	bne.n	80066da <_printf_common+0xb6>
 80066d2:	f04f 30ff 	mov.w	r0, #4294967295
 80066d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066da:	3501      	adds	r5, #1
 80066dc:	e7c1      	b.n	8006662 <_printf_common+0x3e>
 80066de:	2030      	movs	r0, #48	; 0x30
 80066e0:	18e1      	adds	r1, r4, r3
 80066e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066e6:	1c5a      	adds	r2, r3, #1
 80066e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066ec:	4422      	add	r2, r4
 80066ee:	3302      	adds	r3, #2
 80066f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066f4:	e7c2      	b.n	800667c <_printf_common+0x58>
 80066f6:	2301      	movs	r3, #1
 80066f8:	4622      	mov	r2, r4
 80066fa:	4649      	mov	r1, r9
 80066fc:	4638      	mov	r0, r7
 80066fe:	47c0      	blx	r8
 8006700:	3001      	adds	r0, #1
 8006702:	d0e6      	beq.n	80066d2 <_printf_common+0xae>
 8006704:	3601      	adds	r6, #1
 8006706:	e7d9      	b.n	80066bc <_printf_common+0x98>

08006708 <_printf_i>:
 8006708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800670c:	7e0f      	ldrb	r7, [r1, #24]
 800670e:	4691      	mov	r9, r2
 8006710:	2f78      	cmp	r7, #120	; 0x78
 8006712:	4680      	mov	r8, r0
 8006714:	460c      	mov	r4, r1
 8006716:	469a      	mov	sl, r3
 8006718:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800671a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800671e:	d807      	bhi.n	8006730 <_printf_i+0x28>
 8006720:	2f62      	cmp	r7, #98	; 0x62
 8006722:	d80a      	bhi.n	800673a <_printf_i+0x32>
 8006724:	2f00      	cmp	r7, #0
 8006726:	f000 80d5 	beq.w	80068d4 <_printf_i+0x1cc>
 800672a:	2f58      	cmp	r7, #88	; 0x58
 800672c:	f000 80c1 	beq.w	80068b2 <_printf_i+0x1aa>
 8006730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006734:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006738:	e03a      	b.n	80067b0 <_printf_i+0xa8>
 800673a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800673e:	2b15      	cmp	r3, #21
 8006740:	d8f6      	bhi.n	8006730 <_printf_i+0x28>
 8006742:	a101      	add	r1, pc, #4	; (adr r1, 8006748 <_printf_i+0x40>)
 8006744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006748:	080067a1 	.word	0x080067a1
 800674c:	080067b5 	.word	0x080067b5
 8006750:	08006731 	.word	0x08006731
 8006754:	08006731 	.word	0x08006731
 8006758:	08006731 	.word	0x08006731
 800675c:	08006731 	.word	0x08006731
 8006760:	080067b5 	.word	0x080067b5
 8006764:	08006731 	.word	0x08006731
 8006768:	08006731 	.word	0x08006731
 800676c:	08006731 	.word	0x08006731
 8006770:	08006731 	.word	0x08006731
 8006774:	080068bb 	.word	0x080068bb
 8006778:	080067e1 	.word	0x080067e1
 800677c:	08006875 	.word	0x08006875
 8006780:	08006731 	.word	0x08006731
 8006784:	08006731 	.word	0x08006731
 8006788:	080068dd 	.word	0x080068dd
 800678c:	08006731 	.word	0x08006731
 8006790:	080067e1 	.word	0x080067e1
 8006794:	08006731 	.word	0x08006731
 8006798:	08006731 	.word	0x08006731
 800679c:	0800687d 	.word	0x0800687d
 80067a0:	682b      	ldr	r3, [r5, #0]
 80067a2:	1d1a      	adds	r2, r3, #4
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	602a      	str	r2, [r5, #0]
 80067a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067b0:	2301      	movs	r3, #1
 80067b2:	e0a0      	b.n	80068f6 <_printf_i+0x1ee>
 80067b4:	6820      	ldr	r0, [r4, #0]
 80067b6:	682b      	ldr	r3, [r5, #0]
 80067b8:	0607      	lsls	r7, r0, #24
 80067ba:	f103 0104 	add.w	r1, r3, #4
 80067be:	6029      	str	r1, [r5, #0]
 80067c0:	d501      	bpl.n	80067c6 <_printf_i+0xbe>
 80067c2:	681e      	ldr	r6, [r3, #0]
 80067c4:	e003      	b.n	80067ce <_printf_i+0xc6>
 80067c6:	0646      	lsls	r6, r0, #25
 80067c8:	d5fb      	bpl.n	80067c2 <_printf_i+0xba>
 80067ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80067ce:	2e00      	cmp	r6, #0
 80067d0:	da03      	bge.n	80067da <_printf_i+0xd2>
 80067d2:	232d      	movs	r3, #45	; 0x2d
 80067d4:	4276      	negs	r6, r6
 80067d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067da:	230a      	movs	r3, #10
 80067dc:	4859      	ldr	r0, [pc, #356]	; (8006944 <_printf_i+0x23c>)
 80067de:	e012      	b.n	8006806 <_printf_i+0xfe>
 80067e0:	682b      	ldr	r3, [r5, #0]
 80067e2:	6820      	ldr	r0, [r4, #0]
 80067e4:	1d19      	adds	r1, r3, #4
 80067e6:	6029      	str	r1, [r5, #0]
 80067e8:	0605      	lsls	r5, r0, #24
 80067ea:	d501      	bpl.n	80067f0 <_printf_i+0xe8>
 80067ec:	681e      	ldr	r6, [r3, #0]
 80067ee:	e002      	b.n	80067f6 <_printf_i+0xee>
 80067f0:	0641      	lsls	r1, r0, #25
 80067f2:	d5fb      	bpl.n	80067ec <_printf_i+0xe4>
 80067f4:	881e      	ldrh	r6, [r3, #0]
 80067f6:	2f6f      	cmp	r7, #111	; 0x6f
 80067f8:	bf0c      	ite	eq
 80067fa:	2308      	moveq	r3, #8
 80067fc:	230a      	movne	r3, #10
 80067fe:	4851      	ldr	r0, [pc, #324]	; (8006944 <_printf_i+0x23c>)
 8006800:	2100      	movs	r1, #0
 8006802:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006806:	6865      	ldr	r5, [r4, #4]
 8006808:	2d00      	cmp	r5, #0
 800680a:	bfa8      	it	ge
 800680c:	6821      	ldrge	r1, [r4, #0]
 800680e:	60a5      	str	r5, [r4, #8]
 8006810:	bfa4      	itt	ge
 8006812:	f021 0104 	bicge.w	r1, r1, #4
 8006816:	6021      	strge	r1, [r4, #0]
 8006818:	b90e      	cbnz	r6, 800681e <_printf_i+0x116>
 800681a:	2d00      	cmp	r5, #0
 800681c:	d04b      	beq.n	80068b6 <_printf_i+0x1ae>
 800681e:	4615      	mov	r5, r2
 8006820:	fbb6 f1f3 	udiv	r1, r6, r3
 8006824:	fb03 6711 	mls	r7, r3, r1, r6
 8006828:	5dc7      	ldrb	r7, [r0, r7]
 800682a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800682e:	4637      	mov	r7, r6
 8006830:	42bb      	cmp	r3, r7
 8006832:	460e      	mov	r6, r1
 8006834:	d9f4      	bls.n	8006820 <_printf_i+0x118>
 8006836:	2b08      	cmp	r3, #8
 8006838:	d10b      	bne.n	8006852 <_printf_i+0x14a>
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	07de      	lsls	r6, r3, #31
 800683e:	d508      	bpl.n	8006852 <_printf_i+0x14a>
 8006840:	6923      	ldr	r3, [r4, #16]
 8006842:	6861      	ldr	r1, [r4, #4]
 8006844:	4299      	cmp	r1, r3
 8006846:	bfde      	ittt	le
 8006848:	2330      	movle	r3, #48	; 0x30
 800684a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800684e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006852:	1b52      	subs	r2, r2, r5
 8006854:	6122      	str	r2, [r4, #16]
 8006856:	464b      	mov	r3, r9
 8006858:	4621      	mov	r1, r4
 800685a:	4640      	mov	r0, r8
 800685c:	f8cd a000 	str.w	sl, [sp]
 8006860:	aa03      	add	r2, sp, #12
 8006862:	f7ff fedf 	bl	8006624 <_printf_common>
 8006866:	3001      	adds	r0, #1
 8006868:	d14a      	bne.n	8006900 <_printf_i+0x1f8>
 800686a:	f04f 30ff 	mov.w	r0, #4294967295
 800686e:	b004      	add	sp, #16
 8006870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	f043 0320 	orr.w	r3, r3, #32
 800687a:	6023      	str	r3, [r4, #0]
 800687c:	2778      	movs	r7, #120	; 0x78
 800687e:	4832      	ldr	r0, [pc, #200]	; (8006948 <_printf_i+0x240>)
 8006880:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	6829      	ldr	r1, [r5, #0]
 8006888:	061f      	lsls	r7, r3, #24
 800688a:	f851 6b04 	ldr.w	r6, [r1], #4
 800688e:	d402      	bmi.n	8006896 <_printf_i+0x18e>
 8006890:	065f      	lsls	r7, r3, #25
 8006892:	bf48      	it	mi
 8006894:	b2b6      	uxthmi	r6, r6
 8006896:	07df      	lsls	r7, r3, #31
 8006898:	bf48      	it	mi
 800689a:	f043 0320 	orrmi.w	r3, r3, #32
 800689e:	6029      	str	r1, [r5, #0]
 80068a0:	bf48      	it	mi
 80068a2:	6023      	strmi	r3, [r4, #0]
 80068a4:	b91e      	cbnz	r6, 80068ae <_printf_i+0x1a6>
 80068a6:	6823      	ldr	r3, [r4, #0]
 80068a8:	f023 0320 	bic.w	r3, r3, #32
 80068ac:	6023      	str	r3, [r4, #0]
 80068ae:	2310      	movs	r3, #16
 80068b0:	e7a6      	b.n	8006800 <_printf_i+0xf8>
 80068b2:	4824      	ldr	r0, [pc, #144]	; (8006944 <_printf_i+0x23c>)
 80068b4:	e7e4      	b.n	8006880 <_printf_i+0x178>
 80068b6:	4615      	mov	r5, r2
 80068b8:	e7bd      	b.n	8006836 <_printf_i+0x12e>
 80068ba:	682b      	ldr	r3, [r5, #0]
 80068bc:	6826      	ldr	r6, [r4, #0]
 80068be:	1d18      	adds	r0, r3, #4
 80068c0:	6961      	ldr	r1, [r4, #20]
 80068c2:	6028      	str	r0, [r5, #0]
 80068c4:	0635      	lsls	r5, r6, #24
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	d501      	bpl.n	80068ce <_printf_i+0x1c6>
 80068ca:	6019      	str	r1, [r3, #0]
 80068cc:	e002      	b.n	80068d4 <_printf_i+0x1cc>
 80068ce:	0670      	lsls	r0, r6, #25
 80068d0:	d5fb      	bpl.n	80068ca <_printf_i+0x1c2>
 80068d2:	8019      	strh	r1, [r3, #0]
 80068d4:	2300      	movs	r3, #0
 80068d6:	4615      	mov	r5, r2
 80068d8:	6123      	str	r3, [r4, #16]
 80068da:	e7bc      	b.n	8006856 <_printf_i+0x14e>
 80068dc:	682b      	ldr	r3, [r5, #0]
 80068de:	2100      	movs	r1, #0
 80068e0:	1d1a      	adds	r2, r3, #4
 80068e2:	602a      	str	r2, [r5, #0]
 80068e4:	681d      	ldr	r5, [r3, #0]
 80068e6:	6862      	ldr	r2, [r4, #4]
 80068e8:	4628      	mov	r0, r5
 80068ea:	f000 f9d6 	bl	8006c9a <memchr>
 80068ee:	b108      	cbz	r0, 80068f4 <_printf_i+0x1ec>
 80068f0:	1b40      	subs	r0, r0, r5
 80068f2:	6060      	str	r0, [r4, #4]
 80068f4:	6863      	ldr	r3, [r4, #4]
 80068f6:	6123      	str	r3, [r4, #16]
 80068f8:	2300      	movs	r3, #0
 80068fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068fe:	e7aa      	b.n	8006856 <_printf_i+0x14e>
 8006900:	462a      	mov	r2, r5
 8006902:	4649      	mov	r1, r9
 8006904:	4640      	mov	r0, r8
 8006906:	6923      	ldr	r3, [r4, #16]
 8006908:	47d0      	blx	sl
 800690a:	3001      	adds	r0, #1
 800690c:	d0ad      	beq.n	800686a <_printf_i+0x162>
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	079b      	lsls	r3, r3, #30
 8006912:	d413      	bmi.n	800693c <_printf_i+0x234>
 8006914:	68e0      	ldr	r0, [r4, #12]
 8006916:	9b03      	ldr	r3, [sp, #12]
 8006918:	4298      	cmp	r0, r3
 800691a:	bfb8      	it	lt
 800691c:	4618      	movlt	r0, r3
 800691e:	e7a6      	b.n	800686e <_printf_i+0x166>
 8006920:	2301      	movs	r3, #1
 8006922:	4632      	mov	r2, r6
 8006924:	4649      	mov	r1, r9
 8006926:	4640      	mov	r0, r8
 8006928:	47d0      	blx	sl
 800692a:	3001      	adds	r0, #1
 800692c:	d09d      	beq.n	800686a <_printf_i+0x162>
 800692e:	3501      	adds	r5, #1
 8006930:	68e3      	ldr	r3, [r4, #12]
 8006932:	9903      	ldr	r1, [sp, #12]
 8006934:	1a5b      	subs	r3, r3, r1
 8006936:	42ab      	cmp	r3, r5
 8006938:	dcf2      	bgt.n	8006920 <_printf_i+0x218>
 800693a:	e7eb      	b.n	8006914 <_printf_i+0x20c>
 800693c:	2500      	movs	r5, #0
 800693e:	f104 0619 	add.w	r6, r4, #25
 8006942:	e7f5      	b.n	8006930 <_printf_i+0x228>
 8006944:	080090fe 	.word	0x080090fe
 8006948:	0800910f 	.word	0x0800910f

0800694c <std>:
 800694c:	2300      	movs	r3, #0
 800694e:	b510      	push	{r4, lr}
 8006950:	4604      	mov	r4, r0
 8006952:	e9c0 3300 	strd	r3, r3, [r0]
 8006956:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800695a:	6083      	str	r3, [r0, #8]
 800695c:	8181      	strh	r1, [r0, #12]
 800695e:	6643      	str	r3, [r0, #100]	; 0x64
 8006960:	81c2      	strh	r2, [r0, #14]
 8006962:	6183      	str	r3, [r0, #24]
 8006964:	4619      	mov	r1, r3
 8006966:	2208      	movs	r2, #8
 8006968:	305c      	adds	r0, #92	; 0x5c
 800696a:	f000 f906 	bl	8006b7a <memset>
 800696e:	4b0d      	ldr	r3, [pc, #52]	; (80069a4 <std+0x58>)
 8006970:	6224      	str	r4, [r4, #32]
 8006972:	6263      	str	r3, [r4, #36]	; 0x24
 8006974:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <std+0x5c>)
 8006976:	62a3      	str	r3, [r4, #40]	; 0x28
 8006978:	4b0c      	ldr	r3, [pc, #48]	; (80069ac <std+0x60>)
 800697a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800697c:	4b0c      	ldr	r3, [pc, #48]	; (80069b0 <std+0x64>)
 800697e:	6323      	str	r3, [r4, #48]	; 0x30
 8006980:	4b0c      	ldr	r3, [pc, #48]	; (80069b4 <std+0x68>)
 8006982:	429c      	cmp	r4, r3
 8006984:	d006      	beq.n	8006994 <std+0x48>
 8006986:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800698a:	4294      	cmp	r4, r2
 800698c:	d002      	beq.n	8006994 <std+0x48>
 800698e:	33d0      	adds	r3, #208	; 0xd0
 8006990:	429c      	cmp	r4, r3
 8006992:	d105      	bne.n	80069a0 <std+0x54>
 8006994:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800699c:	f000 b97a 	b.w	8006c94 <__retarget_lock_init_recursive>
 80069a0:	bd10      	pop	{r4, pc}
 80069a2:	bf00      	nop
 80069a4:	08006af5 	.word	0x08006af5
 80069a8:	08006b17 	.word	0x08006b17
 80069ac:	08006b4f 	.word	0x08006b4f
 80069b0:	08006b73 	.word	0x08006b73
 80069b4:	200008f4 	.word	0x200008f4

080069b8 <stdio_exit_handler>:
 80069b8:	4a02      	ldr	r2, [pc, #8]	; (80069c4 <stdio_exit_handler+0xc>)
 80069ba:	4903      	ldr	r1, [pc, #12]	; (80069c8 <stdio_exit_handler+0x10>)
 80069bc:	4803      	ldr	r0, [pc, #12]	; (80069cc <stdio_exit_handler+0x14>)
 80069be:	f000 b869 	b.w	8006a94 <_fwalk_sglue>
 80069c2:	bf00      	nop
 80069c4:	20000070 	.word	0x20000070
 80069c8:	08008499 	.word	0x08008499
 80069cc:	2000007c 	.word	0x2000007c

080069d0 <cleanup_stdio>:
 80069d0:	6841      	ldr	r1, [r0, #4]
 80069d2:	4b0c      	ldr	r3, [pc, #48]	; (8006a04 <cleanup_stdio+0x34>)
 80069d4:	b510      	push	{r4, lr}
 80069d6:	4299      	cmp	r1, r3
 80069d8:	4604      	mov	r4, r0
 80069da:	d001      	beq.n	80069e0 <cleanup_stdio+0x10>
 80069dc:	f001 fd5c 	bl	8008498 <_fflush_r>
 80069e0:	68a1      	ldr	r1, [r4, #8]
 80069e2:	4b09      	ldr	r3, [pc, #36]	; (8006a08 <cleanup_stdio+0x38>)
 80069e4:	4299      	cmp	r1, r3
 80069e6:	d002      	beq.n	80069ee <cleanup_stdio+0x1e>
 80069e8:	4620      	mov	r0, r4
 80069ea:	f001 fd55 	bl	8008498 <_fflush_r>
 80069ee:	68e1      	ldr	r1, [r4, #12]
 80069f0:	4b06      	ldr	r3, [pc, #24]	; (8006a0c <cleanup_stdio+0x3c>)
 80069f2:	4299      	cmp	r1, r3
 80069f4:	d004      	beq.n	8006a00 <cleanup_stdio+0x30>
 80069f6:	4620      	mov	r0, r4
 80069f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069fc:	f001 bd4c 	b.w	8008498 <_fflush_r>
 8006a00:	bd10      	pop	{r4, pc}
 8006a02:	bf00      	nop
 8006a04:	200008f4 	.word	0x200008f4
 8006a08:	2000095c 	.word	0x2000095c
 8006a0c:	200009c4 	.word	0x200009c4

08006a10 <global_stdio_init.part.0>:
 8006a10:	b510      	push	{r4, lr}
 8006a12:	4b0b      	ldr	r3, [pc, #44]	; (8006a40 <global_stdio_init.part.0+0x30>)
 8006a14:	4c0b      	ldr	r4, [pc, #44]	; (8006a44 <global_stdio_init.part.0+0x34>)
 8006a16:	4a0c      	ldr	r2, [pc, #48]	; (8006a48 <global_stdio_init.part.0+0x38>)
 8006a18:	4620      	mov	r0, r4
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	2104      	movs	r1, #4
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f7ff ff94 	bl	800694c <std>
 8006a24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006a28:	2201      	movs	r2, #1
 8006a2a:	2109      	movs	r1, #9
 8006a2c:	f7ff ff8e 	bl	800694c <std>
 8006a30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006a34:	2202      	movs	r2, #2
 8006a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a3a:	2112      	movs	r1, #18
 8006a3c:	f7ff bf86 	b.w	800694c <std>
 8006a40:	20000a2c 	.word	0x20000a2c
 8006a44:	200008f4 	.word	0x200008f4
 8006a48:	080069b9 	.word	0x080069b9

08006a4c <__sfp_lock_acquire>:
 8006a4c:	4801      	ldr	r0, [pc, #4]	; (8006a54 <__sfp_lock_acquire+0x8>)
 8006a4e:	f000 b922 	b.w	8006c96 <__retarget_lock_acquire_recursive>
 8006a52:	bf00      	nop
 8006a54:	20000a35 	.word	0x20000a35

08006a58 <__sfp_lock_release>:
 8006a58:	4801      	ldr	r0, [pc, #4]	; (8006a60 <__sfp_lock_release+0x8>)
 8006a5a:	f000 b91d 	b.w	8006c98 <__retarget_lock_release_recursive>
 8006a5e:	bf00      	nop
 8006a60:	20000a35 	.word	0x20000a35

08006a64 <__sinit>:
 8006a64:	b510      	push	{r4, lr}
 8006a66:	4604      	mov	r4, r0
 8006a68:	f7ff fff0 	bl	8006a4c <__sfp_lock_acquire>
 8006a6c:	6a23      	ldr	r3, [r4, #32]
 8006a6e:	b11b      	cbz	r3, 8006a78 <__sinit+0x14>
 8006a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a74:	f7ff bff0 	b.w	8006a58 <__sfp_lock_release>
 8006a78:	4b04      	ldr	r3, [pc, #16]	; (8006a8c <__sinit+0x28>)
 8006a7a:	6223      	str	r3, [r4, #32]
 8006a7c:	4b04      	ldr	r3, [pc, #16]	; (8006a90 <__sinit+0x2c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1f5      	bne.n	8006a70 <__sinit+0xc>
 8006a84:	f7ff ffc4 	bl	8006a10 <global_stdio_init.part.0>
 8006a88:	e7f2      	b.n	8006a70 <__sinit+0xc>
 8006a8a:	bf00      	nop
 8006a8c:	080069d1 	.word	0x080069d1
 8006a90:	20000a2c 	.word	0x20000a2c

08006a94 <_fwalk_sglue>:
 8006a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a98:	4607      	mov	r7, r0
 8006a9a:	4688      	mov	r8, r1
 8006a9c:	4614      	mov	r4, r2
 8006a9e:	2600      	movs	r6, #0
 8006aa0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006aa4:	f1b9 0901 	subs.w	r9, r9, #1
 8006aa8:	d505      	bpl.n	8006ab6 <_fwalk_sglue+0x22>
 8006aaa:	6824      	ldr	r4, [r4, #0]
 8006aac:	2c00      	cmp	r4, #0
 8006aae:	d1f7      	bne.n	8006aa0 <_fwalk_sglue+0xc>
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ab6:	89ab      	ldrh	r3, [r5, #12]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d907      	bls.n	8006acc <_fwalk_sglue+0x38>
 8006abc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	d003      	beq.n	8006acc <_fwalk_sglue+0x38>
 8006ac4:	4629      	mov	r1, r5
 8006ac6:	4638      	mov	r0, r7
 8006ac8:	47c0      	blx	r8
 8006aca:	4306      	orrs	r6, r0
 8006acc:	3568      	adds	r5, #104	; 0x68
 8006ace:	e7e9      	b.n	8006aa4 <_fwalk_sglue+0x10>

08006ad0 <iprintf>:
 8006ad0:	b40f      	push	{r0, r1, r2, r3}
 8006ad2:	b507      	push	{r0, r1, r2, lr}
 8006ad4:	4906      	ldr	r1, [pc, #24]	; (8006af0 <iprintf+0x20>)
 8006ad6:	ab04      	add	r3, sp, #16
 8006ad8:	6808      	ldr	r0, [r1, #0]
 8006ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ade:	6881      	ldr	r1, [r0, #8]
 8006ae0:	9301      	str	r3, [sp, #4]
 8006ae2:	f001 fb3d 	bl	8008160 <_vfiprintf_r>
 8006ae6:	b003      	add	sp, #12
 8006ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006aec:	b004      	add	sp, #16
 8006aee:	4770      	bx	lr
 8006af0:	200000c8 	.word	0x200000c8

08006af4 <__sread>:
 8006af4:	b510      	push	{r4, lr}
 8006af6:	460c      	mov	r4, r1
 8006af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006afc:	f000 f86c 	bl	8006bd8 <_read_r>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	bfab      	itete	ge
 8006b04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b06:	89a3      	ldrhlt	r3, [r4, #12]
 8006b08:	181b      	addge	r3, r3, r0
 8006b0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b0e:	bfac      	ite	ge
 8006b10:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b12:	81a3      	strhlt	r3, [r4, #12]
 8006b14:	bd10      	pop	{r4, pc}

08006b16 <__swrite>:
 8006b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b1a:	461f      	mov	r7, r3
 8006b1c:	898b      	ldrh	r3, [r1, #12]
 8006b1e:	4605      	mov	r5, r0
 8006b20:	05db      	lsls	r3, r3, #23
 8006b22:	460c      	mov	r4, r1
 8006b24:	4616      	mov	r6, r2
 8006b26:	d505      	bpl.n	8006b34 <__swrite+0x1e>
 8006b28:	2302      	movs	r3, #2
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b30:	f000 f840 	bl	8006bb4 <_lseek_r>
 8006b34:	89a3      	ldrh	r3, [r4, #12]
 8006b36:	4632      	mov	r2, r6
 8006b38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b3c:	81a3      	strh	r3, [r4, #12]
 8006b3e:	4628      	mov	r0, r5
 8006b40:	463b      	mov	r3, r7
 8006b42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b4a:	f000 b867 	b.w	8006c1c <_write_r>

08006b4e <__sseek>:
 8006b4e:	b510      	push	{r4, lr}
 8006b50:	460c      	mov	r4, r1
 8006b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b56:	f000 f82d 	bl	8006bb4 <_lseek_r>
 8006b5a:	1c43      	adds	r3, r0, #1
 8006b5c:	89a3      	ldrh	r3, [r4, #12]
 8006b5e:	bf15      	itete	ne
 8006b60:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b6a:	81a3      	strheq	r3, [r4, #12]
 8006b6c:	bf18      	it	ne
 8006b6e:	81a3      	strhne	r3, [r4, #12]
 8006b70:	bd10      	pop	{r4, pc}

08006b72 <__sclose>:
 8006b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b76:	f000 b80d 	b.w	8006b94 <_close_r>

08006b7a <memset>:
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	4402      	add	r2, r0
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d100      	bne.n	8006b84 <memset+0xa>
 8006b82:	4770      	bx	lr
 8006b84:	f803 1b01 	strb.w	r1, [r3], #1
 8006b88:	e7f9      	b.n	8006b7e <memset+0x4>
	...

08006b8c <_localeconv_r>:
 8006b8c:	4800      	ldr	r0, [pc, #0]	; (8006b90 <_localeconv_r+0x4>)
 8006b8e:	4770      	bx	lr
 8006b90:	200001bc 	.word	0x200001bc

08006b94 <_close_r>:
 8006b94:	b538      	push	{r3, r4, r5, lr}
 8006b96:	2300      	movs	r3, #0
 8006b98:	4d05      	ldr	r5, [pc, #20]	; (8006bb0 <_close_r+0x1c>)
 8006b9a:	4604      	mov	r4, r0
 8006b9c:	4608      	mov	r0, r1
 8006b9e:	602b      	str	r3, [r5, #0]
 8006ba0:	f7fb fd5a 	bl	8002658 <_close>
 8006ba4:	1c43      	adds	r3, r0, #1
 8006ba6:	d102      	bne.n	8006bae <_close_r+0x1a>
 8006ba8:	682b      	ldr	r3, [r5, #0]
 8006baa:	b103      	cbz	r3, 8006bae <_close_r+0x1a>
 8006bac:	6023      	str	r3, [r4, #0]
 8006bae:	bd38      	pop	{r3, r4, r5, pc}
 8006bb0:	20000a30 	.word	0x20000a30

08006bb4 <_lseek_r>:
 8006bb4:	b538      	push	{r3, r4, r5, lr}
 8006bb6:	4604      	mov	r4, r0
 8006bb8:	4608      	mov	r0, r1
 8006bba:	4611      	mov	r1, r2
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	4d05      	ldr	r5, [pc, #20]	; (8006bd4 <_lseek_r+0x20>)
 8006bc0:	602a      	str	r2, [r5, #0]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f7fb fd6c 	bl	80026a0 <_lseek>
 8006bc8:	1c43      	adds	r3, r0, #1
 8006bca:	d102      	bne.n	8006bd2 <_lseek_r+0x1e>
 8006bcc:	682b      	ldr	r3, [r5, #0]
 8006bce:	b103      	cbz	r3, 8006bd2 <_lseek_r+0x1e>
 8006bd0:	6023      	str	r3, [r4, #0]
 8006bd2:	bd38      	pop	{r3, r4, r5, pc}
 8006bd4:	20000a30 	.word	0x20000a30

08006bd8 <_read_r>:
 8006bd8:	b538      	push	{r3, r4, r5, lr}
 8006bda:	4604      	mov	r4, r0
 8006bdc:	4608      	mov	r0, r1
 8006bde:	4611      	mov	r1, r2
 8006be0:	2200      	movs	r2, #0
 8006be2:	4d05      	ldr	r5, [pc, #20]	; (8006bf8 <_read_r+0x20>)
 8006be4:	602a      	str	r2, [r5, #0]
 8006be6:	461a      	mov	r2, r3
 8006be8:	f7fb fcfd 	bl	80025e6 <_read>
 8006bec:	1c43      	adds	r3, r0, #1
 8006bee:	d102      	bne.n	8006bf6 <_read_r+0x1e>
 8006bf0:	682b      	ldr	r3, [r5, #0]
 8006bf2:	b103      	cbz	r3, 8006bf6 <_read_r+0x1e>
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	bd38      	pop	{r3, r4, r5, pc}
 8006bf8:	20000a30 	.word	0x20000a30

08006bfc <_sbrk_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	2300      	movs	r3, #0
 8006c00:	4d05      	ldr	r5, [pc, #20]	; (8006c18 <_sbrk_r+0x1c>)
 8006c02:	4604      	mov	r4, r0
 8006c04:	4608      	mov	r0, r1
 8006c06:	602b      	str	r3, [r5, #0]
 8006c08:	f7fb fd56 	bl	80026b8 <_sbrk>
 8006c0c:	1c43      	adds	r3, r0, #1
 8006c0e:	d102      	bne.n	8006c16 <_sbrk_r+0x1a>
 8006c10:	682b      	ldr	r3, [r5, #0]
 8006c12:	b103      	cbz	r3, 8006c16 <_sbrk_r+0x1a>
 8006c14:	6023      	str	r3, [r4, #0]
 8006c16:	bd38      	pop	{r3, r4, r5, pc}
 8006c18:	20000a30 	.word	0x20000a30

08006c1c <_write_r>:
 8006c1c:	b538      	push	{r3, r4, r5, lr}
 8006c1e:	4604      	mov	r4, r0
 8006c20:	4608      	mov	r0, r1
 8006c22:	4611      	mov	r1, r2
 8006c24:	2200      	movs	r2, #0
 8006c26:	4d05      	ldr	r5, [pc, #20]	; (8006c3c <_write_r+0x20>)
 8006c28:	602a      	str	r2, [r5, #0]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	f7fb fcf8 	bl	8002620 <_write>
 8006c30:	1c43      	adds	r3, r0, #1
 8006c32:	d102      	bne.n	8006c3a <_write_r+0x1e>
 8006c34:	682b      	ldr	r3, [r5, #0]
 8006c36:	b103      	cbz	r3, 8006c3a <_write_r+0x1e>
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	bd38      	pop	{r3, r4, r5, pc}
 8006c3c:	20000a30 	.word	0x20000a30

08006c40 <__errno>:
 8006c40:	4b01      	ldr	r3, [pc, #4]	; (8006c48 <__errno+0x8>)
 8006c42:	6818      	ldr	r0, [r3, #0]
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	200000c8 	.word	0x200000c8

08006c4c <__libc_init_array>:
 8006c4c:	b570      	push	{r4, r5, r6, lr}
 8006c4e:	2600      	movs	r6, #0
 8006c50:	4d0c      	ldr	r5, [pc, #48]	; (8006c84 <__libc_init_array+0x38>)
 8006c52:	4c0d      	ldr	r4, [pc, #52]	; (8006c88 <__libc_init_array+0x3c>)
 8006c54:	1b64      	subs	r4, r4, r5
 8006c56:	10a4      	asrs	r4, r4, #2
 8006c58:	42a6      	cmp	r6, r4
 8006c5a:	d109      	bne.n	8006c70 <__libc_init_array+0x24>
 8006c5c:	f002 f806 	bl	8008c6c <_init>
 8006c60:	2600      	movs	r6, #0
 8006c62:	4d0a      	ldr	r5, [pc, #40]	; (8006c8c <__libc_init_array+0x40>)
 8006c64:	4c0a      	ldr	r4, [pc, #40]	; (8006c90 <__libc_init_array+0x44>)
 8006c66:	1b64      	subs	r4, r4, r5
 8006c68:	10a4      	asrs	r4, r4, #2
 8006c6a:	42a6      	cmp	r6, r4
 8006c6c:	d105      	bne.n	8006c7a <__libc_init_array+0x2e>
 8006c6e:	bd70      	pop	{r4, r5, r6, pc}
 8006c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c74:	4798      	blx	r3
 8006c76:	3601      	adds	r6, #1
 8006c78:	e7ee      	b.n	8006c58 <__libc_init_array+0xc>
 8006c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c7e:	4798      	blx	r3
 8006c80:	3601      	adds	r6, #1
 8006c82:	e7f2      	b.n	8006c6a <__libc_init_array+0x1e>
 8006c84:	08009464 	.word	0x08009464
 8006c88:	08009464 	.word	0x08009464
 8006c8c:	08009464 	.word	0x08009464
 8006c90:	08009468 	.word	0x08009468

08006c94 <__retarget_lock_init_recursive>:
 8006c94:	4770      	bx	lr

08006c96 <__retarget_lock_acquire_recursive>:
 8006c96:	4770      	bx	lr

08006c98 <__retarget_lock_release_recursive>:
 8006c98:	4770      	bx	lr

08006c9a <memchr>:
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	b510      	push	{r4, lr}
 8006c9e:	b2c9      	uxtb	r1, r1
 8006ca0:	4402      	add	r2, r0
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	d101      	bne.n	8006cac <memchr+0x12>
 8006ca8:	2000      	movs	r0, #0
 8006caa:	e003      	b.n	8006cb4 <memchr+0x1a>
 8006cac:	7804      	ldrb	r4, [r0, #0]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	428c      	cmp	r4, r1
 8006cb2:	d1f6      	bne.n	8006ca2 <memchr+0x8>
 8006cb4:	bd10      	pop	{r4, pc}

08006cb6 <quorem>:
 8006cb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cba:	6903      	ldr	r3, [r0, #16]
 8006cbc:	690c      	ldr	r4, [r1, #16]
 8006cbe:	4607      	mov	r7, r0
 8006cc0:	42a3      	cmp	r3, r4
 8006cc2:	db7f      	blt.n	8006dc4 <quorem+0x10e>
 8006cc4:	3c01      	subs	r4, #1
 8006cc6:	f100 0514 	add.w	r5, r0, #20
 8006cca:	f101 0814 	add.w	r8, r1, #20
 8006cce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cd2:	9301      	str	r3, [sp, #4]
 8006cd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006cd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ce4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ce8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006cec:	d331      	bcc.n	8006d52 <quorem+0x9c>
 8006cee:	f04f 0e00 	mov.w	lr, #0
 8006cf2:	4640      	mov	r0, r8
 8006cf4:	46ac      	mov	ip, r5
 8006cf6:	46f2      	mov	sl, lr
 8006cf8:	f850 2b04 	ldr.w	r2, [r0], #4
 8006cfc:	b293      	uxth	r3, r2
 8006cfe:	fb06 e303 	mla	r3, r6, r3, lr
 8006d02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d06:	0c1a      	lsrs	r2, r3, #16
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	fb06 220e 	mla	r2, r6, lr, r2
 8006d0e:	ebaa 0303 	sub.w	r3, sl, r3
 8006d12:	f8dc a000 	ldr.w	sl, [ip]
 8006d16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d1a:	fa1f fa8a 	uxth.w	sl, sl
 8006d1e:	4453      	add	r3, sl
 8006d20:	f8dc a000 	ldr.w	sl, [ip]
 8006d24:	b292      	uxth	r2, r2
 8006d26:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006d2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d2e:	b29b      	uxth	r3, r3
 8006d30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d34:	4581      	cmp	r9, r0
 8006d36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006d3a:	f84c 3b04 	str.w	r3, [ip], #4
 8006d3e:	d2db      	bcs.n	8006cf8 <quorem+0x42>
 8006d40:	f855 300b 	ldr.w	r3, [r5, fp]
 8006d44:	b92b      	cbnz	r3, 8006d52 <quorem+0x9c>
 8006d46:	9b01      	ldr	r3, [sp, #4]
 8006d48:	3b04      	subs	r3, #4
 8006d4a:	429d      	cmp	r5, r3
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	d32d      	bcc.n	8006dac <quorem+0xf6>
 8006d50:	613c      	str	r4, [r7, #16]
 8006d52:	4638      	mov	r0, r7
 8006d54:	f001 f8de 	bl	8007f14 <__mcmp>
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	db23      	blt.n	8006da4 <quorem+0xee>
 8006d5c:	4629      	mov	r1, r5
 8006d5e:	2000      	movs	r0, #0
 8006d60:	3601      	adds	r6, #1
 8006d62:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d66:	f8d1 c000 	ldr.w	ip, [r1]
 8006d6a:	b293      	uxth	r3, r2
 8006d6c:	1ac3      	subs	r3, r0, r3
 8006d6e:	0c12      	lsrs	r2, r2, #16
 8006d70:	fa1f f08c 	uxth.w	r0, ip
 8006d74:	4403      	add	r3, r0
 8006d76:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006d7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d84:	45c1      	cmp	r9, r8
 8006d86:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006d8a:	f841 3b04 	str.w	r3, [r1], #4
 8006d8e:	d2e8      	bcs.n	8006d62 <quorem+0xac>
 8006d90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d98:	b922      	cbnz	r2, 8006da4 <quorem+0xee>
 8006d9a:	3b04      	subs	r3, #4
 8006d9c:	429d      	cmp	r5, r3
 8006d9e:	461a      	mov	r2, r3
 8006da0:	d30a      	bcc.n	8006db8 <quorem+0x102>
 8006da2:	613c      	str	r4, [r7, #16]
 8006da4:	4630      	mov	r0, r6
 8006da6:	b003      	add	sp, #12
 8006da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dac:	6812      	ldr	r2, [r2, #0]
 8006dae:	3b04      	subs	r3, #4
 8006db0:	2a00      	cmp	r2, #0
 8006db2:	d1cd      	bne.n	8006d50 <quorem+0x9a>
 8006db4:	3c01      	subs	r4, #1
 8006db6:	e7c8      	b.n	8006d4a <quorem+0x94>
 8006db8:	6812      	ldr	r2, [r2, #0]
 8006dba:	3b04      	subs	r3, #4
 8006dbc:	2a00      	cmp	r2, #0
 8006dbe:	d1f0      	bne.n	8006da2 <quorem+0xec>
 8006dc0:	3c01      	subs	r4, #1
 8006dc2:	e7eb      	b.n	8006d9c <quorem+0xe6>
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	e7ee      	b.n	8006da6 <quorem+0xf0>

08006dc8 <_dtoa_r>:
 8006dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dcc:	4616      	mov	r6, r2
 8006dce:	461f      	mov	r7, r3
 8006dd0:	69c4      	ldr	r4, [r0, #28]
 8006dd2:	b099      	sub	sp, #100	; 0x64
 8006dd4:	4605      	mov	r5, r0
 8006dd6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006dda:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006dde:	b974      	cbnz	r4, 8006dfe <_dtoa_r+0x36>
 8006de0:	2010      	movs	r0, #16
 8006de2:	f7ff f899 	bl	8005f18 <malloc>
 8006de6:	4602      	mov	r2, r0
 8006de8:	61e8      	str	r0, [r5, #28]
 8006dea:	b920      	cbnz	r0, 8006df6 <_dtoa_r+0x2e>
 8006dec:	21ef      	movs	r1, #239	; 0xef
 8006dee:	4bac      	ldr	r3, [pc, #688]	; (80070a0 <_dtoa_r+0x2d8>)
 8006df0:	48ac      	ldr	r0, [pc, #688]	; (80070a4 <_dtoa_r+0x2dc>)
 8006df2:	f001 fc1d 	bl	8008630 <__assert_func>
 8006df6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006dfa:	6004      	str	r4, [r0, #0]
 8006dfc:	60c4      	str	r4, [r0, #12]
 8006dfe:	69eb      	ldr	r3, [r5, #28]
 8006e00:	6819      	ldr	r1, [r3, #0]
 8006e02:	b151      	cbz	r1, 8006e1a <_dtoa_r+0x52>
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	2301      	movs	r3, #1
 8006e08:	4093      	lsls	r3, r2
 8006e0a:	604a      	str	r2, [r1, #4]
 8006e0c:	608b      	str	r3, [r1, #8]
 8006e0e:	4628      	mov	r0, r5
 8006e10:	f000 fe46 	bl	8007aa0 <_Bfree>
 8006e14:	2200      	movs	r2, #0
 8006e16:	69eb      	ldr	r3, [r5, #28]
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	1e3b      	subs	r3, r7, #0
 8006e1c:	bfaf      	iteee	ge
 8006e1e:	2300      	movge	r3, #0
 8006e20:	2201      	movlt	r2, #1
 8006e22:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006e26:	9305      	strlt	r3, [sp, #20]
 8006e28:	bfa8      	it	ge
 8006e2a:	f8c8 3000 	strge.w	r3, [r8]
 8006e2e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006e32:	4b9d      	ldr	r3, [pc, #628]	; (80070a8 <_dtoa_r+0x2e0>)
 8006e34:	bfb8      	it	lt
 8006e36:	f8c8 2000 	strlt.w	r2, [r8]
 8006e3a:	ea33 0309 	bics.w	r3, r3, r9
 8006e3e:	d119      	bne.n	8006e74 <_dtoa_r+0xac>
 8006e40:	f242 730f 	movw	r3, #9999	; 0x270f
 8006e44:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006e46:	6013      	str	r3, [r2, #0]
 8006e48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e4c:	4333      	orrs	r3, r6
 8006e4e:	f000 8589 	beq.w	8007964 <_dtoa_r+0xb9c>
 8006e52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e54:	b953      	cbnz	r3, 8006e6c <_dtoa_r+0xa4>
 8006e56:	4b95      	ldr	r3, [pc, #596]	; (80070ac <_dtoa_r+0x2e4>)
 8006e58:	e023      	b.n	8006ea2 <_dtoa_r+0xda>
 8006e5a:	4b95      	ldr	r3, [pc, #596]	; (80070b0 <_dtoa_r+0x2e8>)
 8006e5c:	9303      	str	r3, [sp, #12]
 8006e5e:	3308      	adds	r3, #8
 8006e60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	9803      	ldr	r0, [sp, #12]
 8006e66:	b019      	add	sp, #100	; 0x64
 8006e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e6c:	4b8f      	ldr	r3, [pc, #572]	; (80070ac <_dtoa_r+0x2e4>)
 8006e6e:	9303      	str	r3, [sp, #12]
 8006e70:	3303      	adds	r3, #3
 8006e72:	e7f5      	b.n	8006e60 <_dtoa_r+0x98>
 8006e74:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006e78:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006e7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e80:	2200      	movs	r2, #0
 8006e82:	2300      	movs	r3, #0
 8006e84:	f7f9 fdcc 	bl	8000a20 <__aeabi_dcmpeq>
 8006e88:	4680      	mov	r8, r0
 8006e8a:	b160      	cbz	r0, 8006ea6 <_dtoa_r+0xde>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006e90:	6013      	str	r3, [r2, #0]
 8006e92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 8562 	beq.w	800795e <_dtoa_r+0xb96>
 8006e9a:	4b86      	ldr	r3, [pc, #536]	; (80070b4 <_dtoa_r+0x2ec>)
 8006e9c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006e9e:	6013      	str	r3, [r2, #0]
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	9303      	str	r3, [sp, #12]
 8006ea4:	e7de      	b.n	8006e64 <_dtoa_r+0x9c>
 8006ea6:	ab16      	add	r3, sp, #88	; 0x58
 8006ea8:	9301      	str	r3, [sp, #4]
 8006eaa:	ab17      	add	r3, sp, #92	; 0x5c
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	4628      	mov	r0, r5
 8006eb0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006eb4:	f001 f8d6 	bl	8008064 <__d2b>
 8006eb8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006ebc:	4682      	mov	sl, r0
 8006ebe:	2c00      	cmp	r4, #0
 8006ec0:	d07e      	beq.n	8006fc0 <_dtoa_r+0x1f8>
 8006ec2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ec8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ed0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006ed4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006ed8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006edc:	4619      	mov	r1, r3
 8006ede:	2200      	movs	r2, #0
 8006ee0:	4b75      	ldr	r3, [pc, #468]	; (80070b8 <_dtoa_r+0x2f0>)
 8006ee2:	f7f9 f97d 	bl	80001e0 <__aeabi_dsub>
 8006ee6:	a368      	add	r3, pc, #416	; (adr r3, 8007088 <_dtoa_r+0x2c0>)
 8006ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eec:	f7f9 fb30 	bl	8000550 <__aeabi_dmul>
 8006ef0:	a367      	add	r3, pc, #412	; (adr r3, 8007090 <_dtoa_r+0x2c8>)
 8006ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef6:	f7f9 f975 	bl	80001e4 <__adddf3>
 8006efa:	4606      	mov	r6, r0
 8006efc:	4620      	mov	r0, r4
 8006efe:	460f      	mov	r7, r1
 8006f00:	f7f9 fabc 	bl	800047c <__aeabi_i2d>
 8006f04:	a364      	add	r3, pc, #400	; (adr r3, 8007098 <_dtoa_r+0x2d0>)
 8006f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0a:	f7f9 fb21 	bl	8000550 <__aeabi_dmul>
 8006f0e:	4602      	mov	r2, r0
 8006f10:	460b      	mov	r3, r1
 8006f12:	4630      	mov	r0, r6
 8006f14:	4639      	mov	r1, r7
 8006f16:	f7f9 f965 	bl	80001e4 <__adddf3>
 8006f1a:	4606      	mov	r6, r0
 8006f1c:	460f      	mov	r7, r1
 8006f1e:	f7f9 fdc7 	bl	8000ab0 <__aeabi_d2iz>
 8006f22:	2200      	movs	r2, #0
 8006f24:	4683      	mov	fp, r0
 8006f26:	2300      	movs	r3, #0
 8006f28:	4630      	mov	r0, r6
 8006f2a:	4639      	mov	r1, r7
 8006f2c:	f7f9 fd82 	bl	8000a34 <__aeabi_dcmplt>
 8006f30:	b148      	cbz	r0, 8006f46 <_dtoa_r+0x17e>
 8006f32:	4658      	mov	r0, fp
 8006f34:	f7f9 faa2 	bl	800047c <__aeabi_i2d>
 8006f38:	4632      	mov	r2, r6
 8006f3a:	463b      	mov	r3, r7
 8006f3c:	f7f9 fd70 	bl	8000a20 <__aeabi_dcmpeq>
 8006f40:	b908      	cbnz	r0, 8006f46 <_dtoa_r+0x17e>
 8006f42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f46:	f1bb 0f16 	cmp.w	fp, #22
 8006f4a:	d857      	bhi.n	8006ffc <_dtoa_r+0x234>
 8006f4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f50:	4b5a      	ldr	r3, [pc, #360]	; (80070bc <_dtoa_r+0x2f4>)
 8006f52:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5a:	f7f9 fd6b 	bl	8000a34 <__aeabi_dcmplt>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	d04e      	beq.n	8007000 <_dtoa_r+0x238>
 8006f62:	2300      	movs	r3, #0
 8006f64:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f68:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f6a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006f6c:	1b1b      	subs	r3, r3, r4
 8006f6e:	1e5a      	subs	r2, r3, #1
 8006f70:	bf46      	itte	mi
 8006f72:	f1c3 0901 	rsbmi	r9, r3, #1
 8006f76:	2300      	movmi	r3, #0
 8006f78:	f04f 0900 	movpl.w	r9, #0
 8006f7c:	9209      	str	r2, [sp, #36]	; 0x24
 8006f7e:	bf48      	it	mi
 8006f80:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006f82:	f1bb 0f00 	cmp.w	fp, #0
 8006f86:	db3d      	blt.n	8007004 <_dtoa_r+0x23c>
 8006f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f8a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006f8e:	445b      	add	r3, fp
 8006f90:	9309      	str	r3, [sp, #36]	; 0x24
 8006f92:	2300      	movs	r3, #0
 8006f94:	930a      	str	r3, [sp, #40]	; 0x28
 8006f96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006f98:	2b09      	cmp	r3, #9
 8006f9a:	d867      	bhi.n	800706c <_dtoa_r+0x2a4>
 8006f9c:	2b05      	cmp	r3, #5
 8006f9e:	bfc4      	itt	gt
 8006fa0:	3b04      	subgt	r3, #4
 8006fa2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006fa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fa6:	bfc8      	it	gt
 8006fa8:	2400      	movgt	r4, #0
 8006faa:	f1a3 0302 	sub.w	r3, r3, #2
 8006fae:	bfd8      	it	le
 8006fb0:	2401      	movle	r4, #1
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	f200 8086 	bhi.w	80070c4 <_dtoa_r+0x2fc>
 8006fb8:	e8df f003 	tbb	[pc, r3]
 8006fbc:	5637392c 	.word	0x5637392c
 8006fc0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006fc4:	441c      	add	r4, r3
 8006fc6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006fca:	2b20      	cmp	r3, #32
 8006fcc:	bfc1      	itttt	gt
 8006fce:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006fd2:	fa09 f903 	lslgt.w	r9, r9, r3
 8006fd6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006fda:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006fde:	bfd6      	itet	le
 8006fe0:	f1c3 0320 	rsble	r3, r3, #32
 8006fe4:	ea49 0003 	orrgt.w	r0, r9, r3
 8006fe8:	fa06 f003 	lslle.w	r0, r6, r3
 8006fec:	f7f9 fa36 	bl	800045c <__aeabi_ui2d>
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006ff6:	3c01      	subs	r4, #1
 8006ff8:	9213      	str	r2, [sp, #76]	; 0x4c
 8006ffa:	e76f      	b.n	8006edc <_dtoa_r+0x114>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e7b3      	b.n	8006f68 <_dtoa_r+0x1a0>
 8007000:	900f      	str	r0, [sp, #60]	; 0x3c
 8007002:	e7b2      	b.n	8006f6a <_dtoa_r+0x1a2>
 8007004:	f1cb 0300 	rsb	r3, fp, #0
 8007008:	930a      	str	r3, [sp, #40]	; 0x28
 800700a:	2300      	movs	r3, #0
 800700c:	eba9 090b 	sub.w	r9, r9, fp
 8007010:	930e      	str	r3, [sp, #56]	; 0x38
 8007012:	e7c0      	b.n	8006f96 <_dtoa_r+0x1ce>
 8007014:	2300      	movs	r3, #0
 8007016:	930b      	str	r3, [sp, #44]	; 0x2c
 8007018:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800701a:	2b00      	cmp	r3, #0
 800701c:	dc55      	bgt.n	80070ca <_dtoa_r+0x302>
 800701e:	2301      	movs	r3, #1
 8007020:	461a      	mov	r2, r3
 8007022:	9306      	str	r3, [sp, #24]
 8007024:	9308      	str	r3, [sp, #32]
 8007026:	9223      	str	r2, [sp, #140]	; 0x8c
 8007028:	e00b      	b.n	8007042 <_dtoa_r+0x27a>
 800702a:	2301      	movs	r3, #1
 800702c:	e7f3      	b.n	8007016 <_dtoa_r+0x24e>
 800702e:	2300      	movs	r3, #0
 8007030:	930b      	str	r3, [sp, #44]	; 0x2c
 8007032:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007034:	445b      	add	r3, fp
 8007036:	9306      	str	r3, [sp, #24]
 8007038:	3301      	adds	r3, #1
 800703a:	2b01      	cmp	r3, #1
 800703c:	9308      	str	r3, [sp, #32]
 800703e:	bfb8      	it	lt
 8007040:	2301      	movlt	r3, #1
 8007042:	2100      	movs	r1, #0
 8007044:	2204      	movs	r2, #4
 8007046:	69e8      	ldr	r0, [r5, #28]
 8007048:	f102 0614 	add.w	r6, r2, #20
 800704c:	429e      	cmp	r6, r3
 800704e:	d940      	bls.n	80070d2 <_dtoa_r+0x30a>
 8007050:	6041      	str	r1, [r0, #4]
 8007052:	4628      	mov	r0, r5
 8007054:	f000 fce4 	bl	8007a20 <_Balloc>
 8007058:	9003      	str	r0, [sp, #12]
 800705a:	2800      	cmp	r0, #0
 800705c:	d13c      	bne.n	80070d8 <_dtoa_r+0x310>
 800705e:	4602      	mov	r2, r0
 8007060:	f240 11af 	movw	r1, #431	; 0x1af
 8007064:	4b16      	ldr	r3, [pc, #88]	; (80070c0 <_dtoa_r+0x2f8>)
 8007066:	e6c3      	b.n	8006df0 <_dtoa_r+0x28>
 8007068:	2301      	movs	r3, #1
 800706a:	e7e1      	b.n	8007030 <_dtoa_r+0x268>
 800706c:	2401      	movs	r4, #1
 800706e:	2300      	movs	r3, #0
 8007070:	940b      	str	r4, [sp, #44]	; 0x2c
 8007072:	9322      	str	r3, [sp, #136]	; 0x88
 8007074:	f04f 33ff 	mov.w	r3, #4294967295
 8007078:	2200      	movs	r2, #0
 800707a:	9306      	str	r3, [sp, #24]
 800707c:	9308      	str	r3, [sp, #32]
 800707e:	2312      	movs	r3, #18
 8007080:	e7d1      	b.n	8007026 <_dtoa_r+0x25e>
 8007082:	bf00      	nop
 8007084:	f3af 8000 	nop.w
 8007088:	636f4361 	.word	0x636f4361
 800708c:	3fd287a7 	.word	0x3fd287a7
 8007090:	8b60c8b3 	.word	0x8b60c8b3
 8007094:	3fc68a28 	.word	0x3fc68a28
 8007098:	509f79fb 	.word	0x509f79fb
 800709c:	3fd34413 	.word	0x3fd34413
 80070a0:	0800912d 	.word	0x0800912d
 80070a4:	08009144 	.word	0x08009144
 80070a8:	7ff00000 	.word	0x7ff00000
 80070ac:	08009129 	.word	0x08009129
 80070b0:	08009120 	.word	0x08009120
 80070b4:	080090fd 	.word	0x080090fd
 80070b8:	3ff80000 	.word	0x3ff80000
 80070bc:	08009230 	.word	0x08009230
 80070c0:	0800919c 	.word	0x0800919c
 80070c4:	2301      	movs	r3, #1
 80070c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80070c8:	e7d4      	b.n	8007074 <_dtoa_r+0x2ac>
 80070ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80070cc:	9306      	str	r3, [sp, #24]
 80070ce:	9308      	str	r3, [sp, #32]
 80070d0:	e7b7      	b.n	8007042 <_dtoa_r+0x27a>
 80070d2:	3101      	adds	r1, #1
 80070d4:	0052      	lsls	r2, r2, #1
 80070d6:	e7b7      	b.n	8007048 <_dtoa_r+0x280>
 80070d8:	69eb      	ldr	r3, [r5, #28]
 80070da:	9a03      	ldr	r2, [sp, #12]
 80070dc:	601a      	str	r2, [r3, #0]
 80070de:	9b08      	ldr	r3, [sp, #32]
 80070e0:	2b0e      	cmp	r3, #14
 80070e2:	f200 80a8 	bhi.w	8007236 <_dtoa_r+0x46e>
 80070e6:	2c00      	cmp	r4, #0
 80070e8:	f000 80a5 	beq.w	8007236 <_dtoa_r+0x46e>
 80070ec:	f1bb 0f00 	cmp.w	fp, #0
 80070f0:	dd34      	ble.n	800715c <_dtoa_r+0x394>
 80070f2:	4b9a      	ldr	r3, [pc, #616]	; (800735c <_dtoa_r+0x594>)
 80070f4:	f00b 020f 	and.w	r2, fp, #15
 80070f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070fc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007100:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007104:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007108:	ea4f 142b 	mov.w	r4, fp, asr #4
 800710c:	d016      	beq.n	800713c <_dtoa_r+0x374>
 800710e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007112:	4b93      	ldr	r3, [pc, #588]	; (8007360 <_dtoa_r+0x598>)
 8007114:	2703      	movs	r7, #3
 8007116:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800711a:	f7f9 fb43 	bl	80007a4 <__aeabi_ddiv>
 800711e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007122:	f004 040f 	and.w	r4, r4, #15
 8007126:	4e8e      	ldr	r6, [pc, #568]	; (8007360 <_dtoa_r+0x598>)
 8007128:	b954      	cbnz	r4, 8007140 <_dtoa_r+0x378>
 800712a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800712e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007132:	f7f9 fb37 	bl	80007a4 <__aeabi_ddiv>
 8007136:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800713a:	e029      	b.n	8007190 <_dtoa_r+0x3c8>
 800713c:	2702      	movs	r7, #2
 800713e:	e7f2      	b.n	8007126 <_dtoa_r+0x35e>
 8007140:	07e1      	lsls	r1, r4, #31
 8007142:	d508      	bpl.n	8007156 <_dtoa_r+0x38e>
 8007144:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007148:	e9d6 2300 	ldrd	r2, r3, [r6]
 800714c:	f7f9 fa00 	bl	8000550 <__aeabi_dmul>
 8007150:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007154:	3701      	adds	r7, #1
 8007156:	1064      	asrs	r4, r4, #1
 8007158:	3608      	adds	r6, #8
 800715a:	e7e5      	b.n	8007128 <_dtoa_r+0x360>
 800715c:	f000 80a5 	beq.w	80072aa <_dtoa_r+0x4e2>
 8007160:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007164:	f1cb 0400 	rsb	r4, fp, #0
 8007168:	4b7c      	ldr	r3, [pc, #496]	; (800735c <_dtoa_r+0x594>)
 800716a:	f004 020f 	and.w	r2, r4, #15
 800716e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007176:	f7f9 f9eb 	bl	8000550 <__aeabi_dmul>
 800717a:	2702      	movs	r7, #2
 800717c:	2300      	movs	r3, #0
 800717e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007182:	4e77      	ldr	r6, [pc, #476]	; (8007360 <_dtoa_r+0x598>)
 8007184:	1124      	asrs	r4, r4, #4
 8007186:	2c00      	cmp	r4, #0
 8007188:	f040 8084 	bne.w	8007294 <_dtoa_r+0x4cc>
 800718c:	2b00      	cmp	r3, #0
 800718e:	d1d2      	bne.n	8007136 <_dtoa_r+0x36e>
 8007190:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007194:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007198:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800719a:	2b00      	cmp	r3, #0
 800719c:	f000 8087 	beq.w	80072ae <_dtoa_r+0x4e6>
 80071a0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071a4:	2200      	movs	r2, #0
 80071a6:	4b6f      	ldr	r3, [pc, #444]	; (8007364 <_dtoa_r+0x59c>)
 80071a8:	f7f9 fc44 	bl	8000a34 <__aeabi_dcmplt>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	d07e      	beq.n	80072ae <_dtoa_r+0x4e6>
 80071b0:	9b08      	ldr	r3, [sp, #32]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d07b      	beq.n	80072ae <_dtoa_r+0x4e6>
 80071b6:	9b06      	ldr	r3, [sp, #24]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	dd38      	ble.n	800722e <_dtoa_r+0x466>
 80071bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071c0:	2200      	movs	r2, #0
 80071c2:	4b69      	ldr	r3, [pc, #420]	; (8007368 <_dtoa_r+0x5a0>)
 80071c4:	f7f9 f9c4 	bl	8000550 <__aeabi_dmul>
 80071c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071cc:	9c06      	ldr	r4, [sp, #24]
 80071ce:	f10b 38ff 	add.w	r8, fp, #4294967295
 80071d2:	3701      	adds	r7, #1
 80071d4:	4638      	mov	r0, r7
 80071d6:	f7f9 f951 	bl	800047c <__aeabi_i2d>
 80071da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071de:	f7f9 f9b7 	bl	8000550 <__aeabi_dmul>
 80071e2:	2200      	movs	r2, #0
 80071e4:	4b61      	ldr	r3, [pc, #388]	; (800736c <_dtoa_r+0x5a4>)
 80071e6:	f7f8 fffd 	bl	80001e4 <__adddf3>
 80071ea:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80071ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80071f2:	9611      	str	r6, [sp, #68]	; 0x44
 80071f4:	2c00      	cmp	r4, #0
 80071f6:	d15d      	bne.n	80072b4 <_dtoa_r+0x4ec>
 80071f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071fc:	2200      	movs	r2, #0
 80071fe:	4b5c      	ldr	r3, [pc, #368]	; (8007370 <_dtoa_r+0x5a8>)
 8007200:	f7f8 ffee 	bl	80001e0 <__aeabi_dsub>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800720c:	4633      	mov	r3, r6
 800720e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007210:	f7f9 fc2e 	bl	8000a70 <__aeabi_dcmpgt>
 8007214:	2800      	cmp	r0, #0
 8007216:	f040 8295 	bne.w	8007744 <_dtoa_r+0x97c>
 800721a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800721e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007220:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007224:	f7f9 fc06 	bl	8000a34 <__aeabi_dcmplt>
 8007228:	2800      	cmp	r0, #0
 800722a:	f040 8289 	bne.w	8007740 <_dtoa_r+0x978>
 800722e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007232:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007236:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007238:	2b00      	cmp	r3, #0
 800723a:	f2c0 8151 	blt.w	80074e0 <_dtoa_r+0x718>
 800723e:	f1bb 0f0e 	cmp.w	fp, #14
 8007242:	f300 814d 	bgt.w	80074e0 <_dtoa_r+0x718>
 8007246:	4b45      	ldr	r3, [pc, #276]	; (800735c <_dtoa_r+0x594>)
 8007248:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800724c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007250:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007254:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007256:	2b00      	cmp	r3, #0
 8007258:	f280 80da 	bge.w	8007410 <_dtoa_r+0x648>
 800725c:	9b08      	ldr	r3, [sp, #32]
 800725e:	2b00      	cmp	r3, #0
 8007260:	f300 80d6 	bgt.w	8007410 <_dtoa_r+0x648>
 8007264:	f040 826b 	bne.w	800773e <_dtoa_r+0x976>
 8007268:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800726c:	2200      	movs	r2, #0
 800726e:	4b40      	ldr	r3, [pc, #256]	; (8007370 <_dtoa_r+0x5a8>)
 8007270:	f7f9 f96e 	bl	8000550 <__aeabi_dmul>
 8007274:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007278:	f7f9 fbf0 	bl	8000a5c <__aeabi_dcmpge>
 800727c:	9c08      	ldr	r4, [sp, #32]
 800727e:	4626      	mov	r6, r4
 8007280:	2800      	cmp	r0, #0
 8007282:	f040 8241 	bne.w	8007708 <_dtoa_r+0x940>
 8007286:	2331      	movs	r3, #49	; 0x31
 8007288:	9f03      	ldr	r7, [sp, #12]
 800728a:	f10b 0b01 	add.w	fp, fp, #1
 800728e:	f807 3b01 	strb.w	r3, [r7], #1
 8007292:	e23d      	b.n	8007710 <_dtoa_r+0x948>
 8007294:	07e2      	lsls	r2, r4, #31
 8007296:	d505      	bpl.n	80072a4 <_dtoa_r+0x4dc>
 8007298:	e9d6 2300 	ldrd	r2, r3, [r6]
 800729c:	f7f9 f958 	bl	8000550 <__aeabi_dmul>
 80072a0:	2301      	movs	r3, #1
 80072a2:	3701      	adds	r7, #1
 80072a4:	1064      	asrs	r4, r4, #1
 80072a6:	3608      	adds	r6, #8
 80072a8:	e76d      	b.n	8007186 <_dtoa_r+0x3be>
 80072aa:	2702      	movs	r7, #2
 80072ac:	e770      	b.n	8007190 <_dtoa_r+0x3c8>
 80072ae:	46d8      	mov	r8, fp
 80072b0:	9c08      	ldr	r4, [sp, #32]
 80072b2:	e78f      	b.n	80071d4 <_dtoa_r+0x40c>
 80072b4:	9903      	ldr	r1, [sp, #12]
 80072b6:	4b29      	ldr	r3, [pc, #164]	; (800735c <_dtoa_r+0x594>)
 80072b8:	4421      	add	r1, r4
 80072ba:	9112      	str	r1, [sp, #72]	; 0x48
 80072bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80072c2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80072c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80072ca:	2900      	cmp	r1, #0
 80072cc:	d054      	beq.n	8007378 <_dtoa_r+0x5b0>
 80072ce:	2000      	movs	r0, #0
 80072d0:	4928      	ldr	r1, [pc, #160]	; (8007374 <_dtoa_r+0x5ac>)
 80072d2:	f7f9 fa67 	bl	80007a4 <__aeabi_ddiv>
 80072d6:	463b      	mov	r3, r7
 80072d8:	4632      	mov	r2, r6
 80072da:	f7f8 ff81 	bl	80001e0 <__aeabi_dsub>
 80072de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80072e2:	9f03      	ldr	r7, [sp, #12]
 80072e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072e8:	f7f9 fbe2 	bl	8000ab0 <__aeabi_d2iz>
 80072ec:	4604      	mov	r4, r0
 80072ee:	f7f9 f8c5 	bl	800047c <__aeabi_i2d>
 80072f2:	4602      	mov	r2, r0
 80072f4:	460b      	mov	r3, r1
 80072f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072fa:	f7f8 ff71 	bl	80001e0 <__aeabi_dsub>
 80072fe:	4602      	mov	r2, r0
 8007300:	460b      	mov	r3, r1
 8007302:	3430      	adds	r4, #48	; 0x30
 8007304:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007308:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800730c:	f807 4b01 	strb.w	r4, [r7], #1
 8007310:	f7f9 fb90 	bl	8000a34 <__aeabi_dcmplt>
 8007314:	2800      	cmp	r0, #0
 8007316:	d173      	bne.n	8007400 <_dtoa_r+0x638>
 8007318:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800731c:	2000      	movs	r0, #0
 800731e:	4911      	ldr	r1, [pc, #68]	; (8007364 <_dtoa_r+0x59c>)
 8007320:	f7f8 ff5e 	bl	80001e0 <__aeabi_dsub>
 8007324:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007328:	f7f9 fb84 	bl	8000a34 <__aeabi_dcmplt>
 800732c:	2800      	cmp	r0, #0
 800732e:	f040 80b6 	bne.w	800749e <_dtoa_r+0x6d6>
 8007332:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007334:	429f      	cmp	r7, r3
 8007336:	f43f af7a 	beq.w	800722e <_dtoa_r+0x466>
 800733a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800733e:	2200      	movs	r2, #0
 8007340:	4b09      	ldr	r3, [pc, #36]	; (8007368 <_dtoa_r+0x5a0>)
 8007342:	f7f9 f905 	bl	8000550 <__aeabi_dmul>
 8007346:	2200      	movs	r2, #0
 8007348:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800734c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007350:	4b05      	ldr	r3, [pc, #20]	; (8007368 <_dtoa_r+0x5a0>)
 8007352:	f7f9 f8fd 	bl	8000550 <__aeabi_dmul>
 8007356:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800735a:	e7c3      	b.n	80072e4 <_dtoa_r+0x51c>
 800735c:	08009230 	.word	0x08009230
 8007360:	08009208 	.word	0x08009208
 8007364:	3ff00000 	.word	0x3ff00000
 8007368:	40240000 	.word	0x40240000
 800736c:	401c0000 	.word	0x401c0000
 8007370:	40140000 	.word	0x40140000
 8007374:	3fe00000 	.word	0x3fe00000
 8007378:	4630      	mov	r0, r6
 800737a:	4639      	mov	r1, r7
 800737c:	f7f9 f8e8 	bl	8000550 <__aeabi_dmul>
 8007380:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007382:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007386:	9c03      	ldr	r4, [sp, #12]
 8007388:	9314      	str	r3, [sp, #80]	; 0x50
 800738a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800738e:	f7f9 fb8f 	bl	8000ab0 <__aeabi_d2iz>
 8007392:	9015      	str	r0, [sp, #84]	; 0x54
 8007394:	f7f9 f872 	bl	800047c <__aeabi_i2d>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073a0:	f7f8 ff1e 	bl	80001e0 <__aeabi_dsub>
 80073a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80073a6:	4606      	mov	r6, r0
 80073a8:	3330      	adds	r3, #48	; 0x30
 80073aa:	f804 3b01 	strb.w	r3, [r4], #1
 80073ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073b0:	460f      	mov	r7, r1
 80073b2:	429c      	cmp	r4, r3
 80073b4:	f04f 0200 	mov.w	r2, #0
 80073b8:	d124      	bne.n	8007404 <_dtoa_r+0x63c>
 80073ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073be:	4baf      	ldr	r3, [pc, #700]	; (800767c <_dtoa_r+0x8b4>)
 80073c0:	f7f8 ff10 	bl	80001e4 <__adddf3>
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	4630      	mov	r0, r6
 80073ca:	4639      	mov	r1, r7
 80073cc:	f7f9 fb50 	bl	8000a70 <__aeabi_dcmpgt>
 80073d0:	2800      	cmp	r0, #0
 80073d2:	d163      	bne.n	800749c <_dtoa_r+0x6d4>
 80073d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80073d8:	2000      	movs	r0, #0
 80073da:	49a8      	ldr	r1, [pc, #672]	; (800767c <_dtoa_r+0x8b4>)
 80073dc:	f7f8 ff00 	bl	80001e0 <__aeabi_dsub>
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	4630      	mov	r0, r6
 80073e6:	4639      	mov	r1, r7
 80073e8:	f7f9 fb24 	bl	8000a34 <__aeabi_dcmplt>
 80073ec:	2800      	cmp	r0, #0
 80073ee:	f43f af1e 	beq.w	800722e <_dtoa_r+0x466>
 80073f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80073f4:	1e7b      	subs	r3, r7, #1
 80073f6:	9314      	str	r3, [sp, #80]	; 0x50
 80073f8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80073fc:	2b30      	cmp	r3, #48	; 0x30
 80073fe:	d0f8      	beq.n	80073f2 <_dtoa_r+0x62a>
 8007400:	46c3      	mov	fp, r8
 8007402:	e03b      	b.n	800747c <_dtoa_r+0x6b4>
 8007404:	4b9e      	ldr	r3, [pc, #632]	; (8007680 <_dtoa_r+0x8b8>)
 8007406:	f7f9 f8a3 	bl	8000550 <__aeabi_dmul>
 800740a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800740e:	e7bc      	b.n	800738a <_dtoa_r+0x5c2>
 8007410:	9f03      	ldr	r7, [sp, #12]
 8007412:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007416:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800741a:	4640      	mov	r0, r8
 800741c:	4649      	mov	r1, r9
 800741e:	f7f9 f9c1 	bl	80007a4 <__aeabi_ddiv>
 8007422:	f7f9 fb45 	bl	8000ab0 <__aeabi_d2iz>
 8007426:	4604      	mov	r4, r0
 8007428:	f7f9 f828 	bl	800047c <__aeabi_i2d>
 800742c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007430:	f7f9 f88e 	bl	8000550 <__aeabi_dmul>
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	4640      	mov	r0, r8
 800743a:	4649      	mov	r1, r9
 800743c:	f7f8 fed0 	bl	80001e0 <__aeabi_dsub>
 8007440:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007444:	f807 6b01 	strb.w	r6, [r7], #1
 8007448:	9e03      	ldr	r6, [sp, #12]
 800744a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800744e:	1bbe      	subs	r6, r7, r6
 8007450:	45b4      	cmp	ip, r6
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	d136      	bne.n	80074c6 <_dtoa_r+0x6fe>
 8007458:	f7f8 fec4 	bl	80001e4 <__adddf3>
 800745c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007460:	4680      	mov	r8, r0
 8007462:	4689      	mov	r9, r1
 8007464:	f7f9 fb04 	bl	8000a70 <__aeabi_dcmpgt>
 8007468:	bb58      	cbnz	r0, 80074c2 <_dtoa_r+0x6fa>
 800746a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800746e:	4640      	mov	r0, r8
 8007470:	4649      	mov	r1, r9
 8007472:	f7f9 fad5 	bl	8000a20 <__aeabi_dcmpeq>
 8007476:	b108      	cbz	r0, 800747c <_dtoa_r+0x6b4>
 8007478:	07e3      	lsls	r3, r4, #31
 800747a:	d422      	bmi.n	80074c2 <_dtoa_r+0x6fa>
 800747c:	4651      	mov	r1, sl
 800747e:	4628      	mov	r0, r5
 8007480:	f000 fb0e 	bl	8007aa0 <_Bfree>
 8007484:	2300      	movs	r3, #0
 8007486:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007488:	703b      	strb	r3, [r7, #0]
 800748a:	f10b 0301 	add.w	r3, fp, #1
 800748e:	6013      	str	r3, [r2, #0]
 8007490:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007492:	2b00      	cmp	r3, #0
 8007494:	f43f ace6 	beq.w	8006e64 <_dtoa_r+0x9c>
 8007498:	601f      	str	r7, [r3, #0]
 800749a:	e4e3      	b.n	8006e64 <_dtoa_r+0x9c>
 800749c:	4627      	mov	r7, r4
 800749e:	463b      	mov	r3, r7
 80074a0:	461f      	mov	r7, r3
 80074a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074a6:	2a39      	cmp	r2, #57	; 0x39
 80074a8:	d107      	bne.n	80074ba <_dtoa_r+0x6f2>
 80074aa:	9a03      	ldr	r2, [sp, #12]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d1f7      	bne.n	80074a0 <_dtoa_r+0x6d8>
 80074b0:	2230      	movs	r2, #48	; 0x30
 80074b2:	9903      	ldr	r1, [sp, #12]
 80074b4:	f108 0801 	add.w	r8, r8, #1
 80074b8:	700a      	strb	r2, [r1, #0]
 80074ba:	781a      	ldrb	r2, [r3, #0]
 80074bc:	3201      	adds	r2, #1
 80074be:	701a      	strb	r2, [r3, #0]
 80074c0:	e79e      	b.n	8007400 <_dtoa_r+0x638>
 80074c2:	46d8      	mov	r8, fp
 80074c4:	e7eb      	b.n	800749e <_dtoa_r+0x6d6>
 80074c6:	2200      	movs	r2, #0
 80074c8:	4b6d      	ldr	r3, [pc, #436]	; (8007680 <_dtoa_r+0x8b8>)
 80074ca:	f7f9 f841 	bl	8000550 <__aeabi_dmul>
 80074ce:	2200      	movs	r2, #0
 80074d0:	2300      	movs	r3, #0
 80074d2:	4680      	mov	r8, r0
 80074d4:	4689      	mov	r9, r1
 80074d6:	f7f9 faa3 	bl	8000a20 <__aeabi_dcmpeq>
 80074da:	2800      	cmp	r0, #0
 80074dc:	d09b      	beq.n	8007416 <_dtoa_r+0x64e>
 80074de:	e7cd      	b.n	800747c <_dtoa_r+0x6b4>
 80074e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80074e2:	2a00      	cmp	r2, #0
 80074e4:	f000 80c4 	beq.w	8007670 <_dtoa_r+0x8a8>
 80074e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80074ea:	2a01      	cmp	r2, #1
 80074ec:	f300 80a8 	bgt.w	8007640 <_dtoa_r+0x878>
 80074f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80074f2:	2a00      	cmp	r2, #0
 80074f4:	f000 80a0 	beq.w	8007638 <_dtoa_r+0x870>
 80074f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80074fc:	464f      	mov	r7, r9
 80074fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007500:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007502:	2101      	movs	r1, #1
 8007504:	441a      	add	r2, r3
 8007506:	4628      	mov	r0, r5
 8007508:	4499      	add	r9, r3
 800750a:	9209      	str	r2, [sp, #36]	; 0x24
 800750c:	f000 fb7e 	bl	8007c0c <__i2b>
 8007510:	4606      	mov	r6, r0
 8007512:	b15f      	cbz	r7, 800752c <_dtoa_r+0x764>
 8007514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007516:	2b00      	cmp	r3, #0
 8007518:	dd08      	ble.n	800752c <_dtoa_r+0x764>
 800751a:	42bb      	cmp	r3, r7
 800751c:	bfa8      	it	ge
 800751e:	463b      	movge	r3, r7
 8007520:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007522:	eba9 0903 	sub.w	r9, r9, r3
 8007526:	1aff      	subs	r7, r7, r3
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	9309      	str	r3, [sp, #36]	; 0x24
 800752c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800752e:	b1f3      	cbz	r3, 800756e <_dtoa_r+0x7a6>
 8007530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007532:	2b00      	cmp	r3, #0
 8007534:	f000 80a0 	beq.w	8007678 <_dtoa_r+0x8b0>
 8007538:	2c00      	cmp	r4, #0
 800753a:	dd10      	ble.n	800755e <_dtoa_r+0x796>
 800753c:	4631      	mov	r1, r6
 800753e:	4622      	mov	r2, r4
 8007540:	4628      	mov	r0, r5
 8007542:	f000 fc21 	bl	8007d88 <__pow5mult>
 8007546:	4652      	mov	r2, sl
 8007548:	4601      	mov	r1, r0
 800754a:	4606      	mov	r6, r0
 800754c:	4628      	mov	r0, r5
 800754e:	f000 fb73 	bl	8007c38 <__multiply>
 8007552:	4680      	mov	r8, r0
 8007554:	4651      	mov	r1, sl
 8007556:	4628      	mov	r0, r5
 8007558:	f000 faa2 	bl	8007aa0 <_Bfree>
 800755c:	46c2      	mov	sl, r8
 800755e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007560:	1b1a      	subs	r2, r3, r4
 8007562:	d004      	beq.n	800756e <_dtoa_r+0x7a6>
 8007564:	4651      	mov	r1, sl
 8007566:	4628      	mov	r0, r5
 8007568:	f000 fc0e 	bl	8007d88 <__pow5mult>
 800756c:	4682      	mov	sl, r0
 800756e:	2101      	movs	r1, #1
 8007570:	4628      	mov	r0, r5
 8007572:	f000 fb4b 	bl	8007c0c <__i2b>
 8007576:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007578:	4604      	mov	r4, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	f340 8082 	ble.w	8007684 <_dtoa_r+0x8bc>
 8007580:	461a      	mov	r2, r3
 8007582:	4601      	mov	r1, r0
 8007584:	4628      	mov	r0, r5
 8007586:	f000 fbff 	bl	8007d88 <__pow5mult>
 800758a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800758c:	4604      	mov	r4, r0
 800758e:	2b01      	cmp	r3, #1
 8007590:	dd7b      	ble.n	800768a <_dtoa_r+0x8c2>
 8007592:	f04f 0800 	mov.w	r8, #0
 8007596:	6923      	ldr	r3, [r4, #16]
 8007598:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800759c:	6918      	ldr	r0, [r3, #16]
 800759e:	f000 fae7 	bl	8007b70 <__hi0bits>
 80075a2:	f1c0 0020 	rsb	r0, r0, #32
 80075a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075a8:	4418      	add	r0, r3
 80075aa:	f010 001f 	ands.w	r0, r0, #31
 80075ae:	f000 8092 	beq.w	80076d6 <_dtoa_r+0x90e>
 80075b2:	f1c0 0320 	rsb	r3, r0, #32
 80075b6:	2b04      	cmp	r3, #4
 80075b8:	f340 8085 	ble.w	80076c6 <_dtoa_r+0x8fe>
 80075bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075be:	f1c0 001c 	rsb	r0, r0, #28
 80075c2:	4403      	add	r3, r0
 80075c4:	4481      	add	r9, r0
 80075c6:	4407      	add	r7, r0
 80075c8:	9309      	str	r3, [sp, #36]	; 0x24
 80075ca:	f1b9 0f00 	cmp.w	r9, #0
 80075ce:	dd05      	ble.n	80075dc <_dtoa_r+0x814>
 80075d0:	4651      	mov	r1, sl
 80075d2:	464a      	mov	r2, r9
 80075d4:	4628      	mov	r0, r5
 80075d6:	f000 fc31 	bl	8007e3c <__lshift>
 80075da:	4682      	mov	sl, r0
 80075dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075de:	2b00      	cmp	r3, #0
 80075e0:	dd05      	ble.n	80075ee <_dtoa_r+0x826>
 80075e2:	4621      	mov	r1, r4
 80075e4:	461a      	mov	r2, r3
 80075e6:	4628      	mov	r0, r5
 80075e8:	f000 fc28 	bl	8007e3c <__lshift>
 80075ec:	4604      	mov	r4, r0
 80075ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d072      	beq.n	80076da <_dtoa_r+0x912>
 80075f4:	4621      	mov	r1, r4
 80075f6:	4650      	mov	r0, sl
 80075f8:	f000 fc8c 	bl	8007f14 <__mcmp>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	da6c      	bge.n	80076da <_dtoa_r+0x912>
 8007600:	2300      	movs	r3, #0
 8007602:	4651      	mov	r1, sl
 8007604:	220a      	movs	r2, #10
 8007606:	4628      	mov	r0, r5
 8007608:	f000 fa6c 	bl	8007ae4 <__multadd>
 800760c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800760e:	4682      	mov	sl, r0
 8007610:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 81ac 	beq.w	8007972 <_dtoa_r+0xbaa>
 800761a:	2300      	movs	r3, #0
 800761c:	4631      	mov	r1, r6
 800761e:	220a      	movs	r2, #10
 8007620:	4628      	mov	r0, r5
 8007622:	f000 fa5f 	bl	8007ae4 <__multadd>
 8007626:	9b06      	ldr	r3, [sp, #24]
 8007628:	4606      	mov	r6, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	f300 8093 	bgt.w	8007756 <_dtoa_r+0x98e>
 8007630:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007632:	2b02      	cmp	r3, #2
 8007634:	dc59      	bgt.n	80076ea <_dtoa_r+0x922>
 8007636:	e08e      	b.n	8007756 <_dtoa_r+0x98e>
 8007638:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800763a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800763e:	e75d      	b.n	80074fc <_dtoa_r+0x734>
 8007640:	9b08      	ldr	r3, [sp, #32]
 8007642:	1e5c      	subs	r4, r3, #1
 8007644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007646:	42a3      	cmp	r3, r4
 8007648:	bfbf      	itttt	lt
 800764a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800764c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800764e:	1ae3      	sublt	r3, r4, r3
 8007650:	18d2      	addlt	r2, r2, r3
 8007652:	bfa8      	it	ge
 8007654:	1b1c      	subge	r4, r3, r4
 8007656:	9b08      	ldr	r3, [sp, #32]
 8007658:	bfbe      	ittt	lt
 800765a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800765c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800765e:	2400      	movlt	r4, #0
 8007660:	2b00      	cmp	r3, #0
 8007662:	bfb5      	itete	lt
 8007664:	eba9 0703 	sublt.w	r7, r9, r3
 8007668:	464f      	movge	r7, r9
 800766a:	2300      	movlt	r3, #0
 800766c:	9b08      	ldrge	r3, [sp, #32]
 800766e:	e747      	b.n	8007500 <_dtoa_r+0x738>
 8007670:	464f      	mov	r7, r9
 8007672:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007674:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007676:	e74c      	b.n	8007512 <_dtoa_r+0x74a>
 8007678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800767a:	e773      	b.n	8007564 <_dtoa_r+0x79c>
 800767c:	3fe00000 	.word	0x3fe00000
 8007680:	40240000 	.word	0x40240000
 8007684:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007686:	2b01      	cmp	r3, #1
 8007688:	dc18      	bgt.n	80076bc <_dtoa_r+0x8f4>
 800768a:	9b04      	ldr	r3, [sp, #16]
 800768c:	b9b3      	cbnz	r3, 80076bc <_dtoa_r+0x8f4>
 800768e:	9b05      	ldr	r3, [sp, #20]
 8007690:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007694:	b993      	cbnz	r3, 80076bc <_dtoa_r+0x8f4>
 8007696:	9b05      	ldr	r3, [sp, #20]
 8007698:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800769c:	0d1b      	lsrs	r3, r3, #20
 800769e:	051b      	lsls	r3, r3, #20
 80076a0:	b17b      	cbz	r3, 80076c2 <_dtoa_r+0x8fa>
 80076a2:	f04f 0801 	mov.w	r8, #1
 80076a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076a8:	f109 0901 	add.w	r9, r9, #1
 80076ac:	3301      	adds	r3, #1
 80076ae:	9309      	str	r3, [sp, #36]	; 0x24
 80076b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f47f af6f 	bne.w	8007596 <_dtoa_r+0x7ce>
 80076b8:	2001      	movs	r0, #1
 80076ba:	e774      	b.n	80075a6 <_dtoa_r+0x7de>
 80076bc:	f04f 0800 	mov.w	r8, #0
 80076c0:	e7f6      	b.n	80076b0 <_dtoa_r+0x8e8>
 80076c2:	4698      	mov	r8, r3
 80076c4:	e7f4      	b.n	80076b0 <_dtoa_r+0x8e8>
 80076c6:	d080      	beq.n	80075ca <_dtoa_r+0x802>
 80076c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076ca:	331c      	adds	r3, #28
 80076cc:	441a      	add	r2, r3
 80076ce:	4499      	add	r9, r3
 80076d0:	441f      	add	r7, r3
 80076d2:	9209      	str	r2, [sp, #36]	; 0x24
 80076d4:	e779      	b.n	80075ca <_dtoa_r+0x802>
 80076d6:	4603      	mov	r3, r0
 80076d8:	e7f6      	b.n	80076c8 <_dtoa_r+0x900>
 80076da:	9b08      	ldr	r3, [sp, #32]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	dc34      	bgt.n	800774a <_dtoa_r+0x982>
 80076e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	dd31      	ble.n	800774a <_dtoa_r+0x982>
 80076e6:	9b08      	ldr	r3, [sp, #32]
 80076e8:	9306      	str	r3, [sp, #24]
 80076ea:	9b06      	ldr	r3, [sp, #24]
 80076ec:	b963      	cbnz	r3, 8007708 <_dtoa_r+0x940>
 80076ee:	4621      	mov	r1, r4
 80076f0:	2205      	movs	r2, #5
 80076f2:	4628      	mov	r0, r5
 80076f4:	f000 f9f6 	bl	8007ae4 <__multadd>
 80076f8:	4601      	mov	r1, r0
 80076fa:	4604      	mov	r4, r0
 80076fc:	4650      	mov	r0, sl
 80076fe:	f000 fc09 	bl	8007f14 <__mcmp>
 8007702:	2800      	cmp	r0, #0
 8007704:	f73f adbf 	bgt.w	8007286 <_dtoa_r+0x4be>
 8007708:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800770a:	9f03      	ldr	r7, [sp, #12]
 800770c:	ea6f 0b03 	mvn.w	fp, r3
 8007710:	f04f 0800 	mov.w	r8, #0
 8007714:	4621      	mov	r1, r4
 8007716:	4628      	mov	r0, r5
 8007718:	f000 f9c2 	bl	8007aa0 <_Bfree>
 800771c:	2e00      	cmp	r6, #0
 800771e:	f43f aead 	beq.w	800747c <_dtoa_r+0x6b4>
 8007722:	f1b8 0f00 	cmp.w	r8, #0
 8007726:	d005      	beq.n	8007734 <_dtoa_r+0x96c>
 8007728:	45b0      	cmp	r8, r6
 800772a:	d003      	beq.n	8007734 <_dtoa_r+0x96c>
 800772c:	4641      	mov	r1, r8
 800772e:	4628      	mov	r0, r5
 8007730:	f000 f9b6 	bl	8007aa0 <_Bfree>
 8007734:	4631      	mov	r1, r6
 8007736:	4628      	mov	r0, r5
 8007738:	f000 f9b2 	bl	8007aa0 <_Bfree>
 800773c:	e69e      	b.n	800747c <_dtoa_r+0x6b4>
 800773e:	2400      	movs	r4, #0
 8007740:	4626      	mov	r6, r4
 8007742:	e7e1      	b.n	8007708 <_dtoa_r+0x940>
 8007744:	46c3      	mov	fp, r8
 8007746:	4626      	mov	r6, r4
 8007748:	e59d      	b.n	8007286 <_dtoa_r+0x4be>
 800774a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800774c:	2b00      	cmp	r3, #0
 800774e:	f000 80c8 	beq.w	80078e2 <_dtoa_r+0xb1a>
 8007752:	9b08      	ldr	r3, [sp, #32]
 8007754:	9306      	str	r3, [sp, #24]
 8007756:	2f00      	cmp	r7, #0
 8007758:	dd05      	ble.n	8007766 <_dtoa_r+0x99e>
 800775a:	4631      	mov	r1, r6
 800775c:	463a      	mov	r2, r7
 800775e:	4628      	mov	r0, r5
 8007760:	f000 fb6c 	bl	8007e3c <__lshift>
 8007764:	4606      	mov	r6, r0
 8007766:	f1b8 0f00 	cmp.w	r8, #0
 800776a:	d05b      	beq.n	8007824 <_dtoa_r+0xa5c>
 800776c:	4628      	mov	r0, r5
 800776e:	6871      	ldr	r1, [r6, #4]
 8007770:	f000 f956 	bl	8007a20 <_Balloc>
 8007774:	4607      	mov	r7, r0
 8007776:	b928      	cbnz	r0, 8007784 <_dtoa_r+0x9bc>
 8007778:	4602      	mov	r2, r0
 800777a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800777e:	4b81      	ldr	r3, [pc, #516]	; (8007984 <_dtoa_r+0xbbc>)
 8007780:	f7ff bb36 	b.w	8006df0 <_dtoa_r+0x28>
 8007784:	6932      	ldr	r2, [r6, #16]
 8007786:	f106 010c 	add.w	r1, r6, #12
 800778a:	3202      	adds	r2, #2
 800778c:	0092      	lsls	r2, r2, #2
 800778e:	300c      	adds	r0, #12
 8007790:	f000 ff40 	bl	8008614 <memcpy>
 8007794:	2201      	movs	r2, #1
 8007796:	4639      	mov	r1, r7
 8007798:	4628      	mov	r0, r5
 800779a:	f000 fb4f 	bl	8007e3c <__lshift>
 800779e:	46b0      	mov	r8, r6
 80077a0:	4606      	mov	r6, r0
 80077a2:	9b03      	ldr	r3, [sp, #12]
 80077a4:	9a03      	ldr	r2, [sp, #12]
 80077a6:	3301      	adds	r3, #1
 80077a8:	9308      	str	r3, [sp, #32]
 80077aa:	9b06      	ldr	r3, [sp, #24]
 80077ac:	4413      	add	r3, r2
 80077ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80077b0:	9b04      	ldr	r3, [sp, #16]
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	930a      	str	r3, [sp, #40]	; 0x28
 80077b8:	9b08      	ldr	r3, [sp, #32]
 80077ba:	4621      	mov	r1, r4
 80077bc:	3b01      	subs	r3, #1
 80077be:	4650      	mov	r0, sl
 80077c0:	9304      	str	r3, [sp, #16]
 80077c2:	f7ff fa78 	bl	8006cb6 <quorem>
 80077c6:	4641      	mov	r1, r8
 80077c8:	9006      	str	r0, [sp, #24]
 80077ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80077ce:	4650      	mov	r0, sl
 80077d0:	f000 fba0 	bl	8007f14 <__mcmp>
 80077d4:	4632      	mov	r2, r6
 80077d6:	9009      	str	r0, [sp, #36]	; 0x24
 80077d8:	4621      	mov	r1, r4
 80077da:	4628      	mov	r0, r5
 80077dc:	f000 fbb6 	bl	8007f4c <__mdiff>
 80077e0:	68c2      	ldr	r2, [r0, #12]
 80077e2:	4607      	mov	r7, r0
 80077e4:	bb02      	cbnz	r2, 8007828 <_dtoa_r+0xa60>
 80077e6:	4601      	mov	r1, r0
 80077e8:	4650      	mov	r0, sl
 80077ea:	f000 fb93 	bl	8007f14 <__mcmp>
 80077ee:	4602      	mov	r2, r0
 80077f0:	4639      	mov	r1, r7
 80077f2:	4628      	mov	r0, r5
 80077f4:	920c      	str	r2, [sp, #48]	; 0x30
 80077f6:	f000 f953 	bl	8007aa0 <_Bfree>
 80077fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077fe:	9f08      	ldr	r7, [sp, #32]
 8007800:	ea43 0102 	orr.w	r1, r3, r2
 8007804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007806:	4319      	orrs	r1, r3
 8007808:	d110      	bne.n	800782c <_dtoa_r+0xa64>
 800780a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800780e:	d029      	beq.n	8007864 <_dtoa_r+0xa9c>
 8007810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007812:	2b00      	cmp	r3, #0
 8007814:	dd02      	ble.n	800781c <_dtoa_r+0xa54>
 8007816:	9b06      	ldr	r3, [sp, #24]
 8007818:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800781c:	9b04      	ldr	r3, [sp, #16]
 800781e:	f883 9000 	strb.w	r9, [r3]
 8007822:	e777      	b.n	8007714 <_dtoa_r+0x94c>
 8007824:	4630      	mov	r0, r6
 8007826:	e7ba      	b.n	800779e <_dtoa_r+0x9d6>
 8007828:	2201      	movs	r2, #1
 800782a:	e7e1      	b.n	80077f0 <_dtoa_r+0xa28>
 800782c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800782e:	2b00      	cmp	r3, #0
 8007830:	db04      	blt.n	800783c <_dtoa_r+0xa74>
 8007832:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007834:	430b      	orrs	r3, r1
 8007836:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007838:	430b      	orrs	r3, r1
 800783a:	d120      	bne.n	800787e <_dtoa_r+0xab6>
 800783c:	2a00      	cmp	r2, #0
 800783e:	dded      	ble.n	800781c <_dtoa_r+0xa54>
 8007840:	4651      	mov	r1, sl
 8007842:	2201      	movs	r2, #1
 8007844:	4628      	mov	r0, r5
 8007846:	f000 faf9 	bl	8007e3c <__lshift>
 800784a:	4621      	mov	r1, r4
 800784c:	4682      	mov	sl, r0
 800784e:	f000 fb61 	bl	8007f14 <__mcmp>
 8007852:	2800      	cmp	r0, #0
 8007854:	dc03      	bgt.n	800785e <_dtoa_r+0xa96>
 8007856:	d1e1      	bne.n	800781c <_dtoa_r+0xa54>
 8007858:	f019 0f01 	tst.w	r9, #1
 800785c:	d0de      	beq.n	800781c <_dtoa_r+0xa54>
 800785e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007862:	d1d8      	bne.n	8007816 <_dtoa_r+0xa4e>
 8007864:	2339      	movs	r3, #57	; 0x39
 8007866:	9a04      	ldr	r2, [sp, #16]
 8007868:	7013      	strb	r3, [r2, #0]
 800786a:	463b      	mov	r3, r7
 800786c:	461f      	mov	r7, r3
 800786e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007872:	3b01      	subs	r3, #1
 8007874:	2a39      	cmp	r2, #57	; 0x39
 8007876:	d06b      	beq.n	8007950 <_dtoa_r+0xb88>
 8007878:	3201      	adds	r2, #1
 800787a:	701a      	strb	r2, [r3, #0]
 800787c:	e74a      	b.n	8007714 <_dtoa_r+0x94c>
 800787e:	2a00      	cmp	r2, #0
 8007880:	dd07      	ble.n	8007892 <_dtoa_r+0xaca>
 8007882:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007886:	d0ed      	beq.n	8007864 <_dtoa_r+0xa9c>
 8007888:	9a04      	ldr	r2, [sp, #16]
 800788a:	f109 0301 	add.w	r3, r9, #1
 800788e:	7013      	strb	r3, [r2, #0]
 8007890:	e740      	b.n	8007714 <_dtoa_r+0x94c>
 8007892:	9b08      	ldr	r3, [sp, #32]
 8007894:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007896:	f803 9c01 	strb.w	r9, [r3, #-1]
 800789a:	4293      	cmp	r3, r2
 800789c:	d042      	beq.n	8007924 <_dtoa_r+0xb5c>
 800789e:	4651      	mov	r1, sl
 80078a0:	2300      	movs	r3, #0
 80078a2:	220a      	movs	r2, #10
 80078a4:	4628      	mov	r0, r5
 80078a6:	f000 f91d 	bl	8007ae4 <__multadd>
 80078aa:	45b0      	cmp	r8, r6
 80078ac:	4682      	mov	sl, r0
 80078ae:	f04f 0300 	mov.w	r3, #0
 80078b2:	f04f 020a 	mov.w	r2, #10
 80078b6:	4641      	mov	r1, r8
 80078b8:	4628      	mov	r0, r5
 80078ba:	d107      	bne.n	80078cc <_dtoa_r+0xb04>
 80078bc:	f000 f912 	bl	8007ae4 <__multadd>
 80078c0:	4680      	mov	r8, r0
 80078c2:	4606      	mov	r6, r0
 80078c4:	9b08      	ldr	r3, [sp, #32]
 80078c6:	3301      	adds	r3, #1
 80078c8:	9308      	str	r3, [sp, #32]
 80078ca:	e775      	b.n	80077b8 <_dtoa_r+0x9f0>
 80078cc:	f000 f90a 	bl	8007ae4 <__multadd>
 80078d0:	4631      	mov	r1, r6
 80078d2:	4680      	mov	r8, r0
 80078d4:	2300      	movs	r3, #0
 80078d6:	220a      	movs	r2, #10
 80078d8:	4628      	mov	r0, r5
 80078da:	f000 f903 	bl	8007ae4 <__multadd>
 80078de:	4606      	mov	r6, r0
 80078e0:	e7f0      	b.n	80078c4 <_dtoa_r+0xafc>
 80078e2:	9b08      	ldr	r3, [sp, #32]
 80078e4:	9306      	str	r3, [sp, #24]
 80078e6:	9f03      	ldr	r7, [sp, #12]
 80078e8:	4621      	mov	r1, r4
 80078ea:	4650      	mov	r0, sl
 80078ec:	f7ff f9e3 	bl	8006cb6 <quorem>
 80078f0:	9b03      	ldr	r3, [sp, #12]
 80078f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80078f6:	f807 9b01 	strb.w	r9, [r7], #1
 80078fa:	1afa      	subs	r2, r7, r3
 80078fc:	9b06      	ldr	r3, [sp, #24]
 80078fe:	4293      	cmp	r3, r2
 8007900:	dd07      	ble.n	8007912 <_dtoa_r+0xb4a>
 8007902:	4651      	mov	r1, sl
 8007904:	2300      	movs	r3, #0
 8007906:	220a      	movs	r2, #10
 8007908:	4628      	mov	r0, r5
 800790a:	f000 f8eb 	bl	8007ae4 <__multadd>
 800790e:	4682      	mov	sl, r0
 8007910:	e7ea      	b.n	80078e8 <_dtoa_r+0xb20>
 8007912:	9b06      	ldr	r3, [sp, #24]
 8007914:	f04f 0800 	mov.w	r8, #0
 8007918:	2b00      	cmp	r3, #0
 800791a:	bfcc      	ite	gt
 800791c:	461f      	movgt	r7, r3
 800791e:	2701      	movle	r7, #1
 8007920:	9b03      	ldr	r3, [sp, #12]
 8007922:	441f      	add	r7, r3
 8007924:	4651      	mov	r1, sl
 8007926:	2201      	movs	r2, #1
 8007928:	4628      	mov	r0, r5
 800792a:	f000 fa87 	bl	8007e3c <__lshift>
 800792e:	4621      	mov	r1, r4
 8007930:	4682      	mov	sl, r0
 8007932:	f000 faef 	bl	8007f14 <__mcmp>
 8007936:	2800      	cmp	r0, #0
 8007938:	dc97      	bgt.n	800786a <_dtoa_r+0xaa2>
 800793a:	d102      	bne.n	8007942 <_dtoa_r+0xb7a>
 800793c:	f019 0f01 	tst.w	r9, #1
 8007940:	d193      	bne.n	800786a <_dtoa_r+0xaa2>
 8007942:	463b      	mov	r3, r7
 8007944:	461f      	mov	r7, r3
 8007946:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800794a:	2a30      	cmp	r2, #48	; 0x30
 800794c:	d0fa      	beq.n	8007944 <_dtoa_r+0xb7c>
 800794e:	e6e1      	b.n	8007714 <_dtoa_r+0x94c>
 8007950:	9a03      	ldr	r2, [sp, #12]
 8007952:	429a      	cmp	r2, r3
 8007954:	d18a      	bne.n	800786c <_dtoa_r+0xaa4>
 8007956:	2331      	movs	r3, #49	; 0x31
 8007958:	f10b 0b01 	add.w	fp, fp, #1
 800795c:	e797      	b.n	800788e <_dtoa_r+0xac6>
 800795e:	4b0a      	ldr	r3, [pc, #40]	; (8007988 <_dtoa_r+0xbc0>)
 8007960:	f7ff ba9f 	b.w	8006ea2 <_dtoa_r+0xda>
 8007964:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007966:	2b00      	cmp	r3, #0
 8007968:	f47f aa77 	bne.w	8006e5a <_dtoa_r+0x92>
 800796c:	4b07      	ldr	r3, [pc, #28]	; (800798c <_dtoa_r+0xbc4>)
 800796e:	f7ff ba98 	b.w	8006ea2 <_dtoa_r+0xda>
 8007972:	9b06      	ldr	r3, [sp, #24]
 8007974:	2b00      	cmp	r3, #0
 8007976:	dcb6      	bgt.n	80078e6 <_dtoa_r+0xb1e>
 8007978:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800797a:	2b02      	cmp	r3, #2
 800797c:	f73f aeb5 	bgt.w	80076ea <_dtoa_r+0x922>
 8007980:	e7b1      	b.n	80078e6 <_dtoa_r+0xb1e>
 8007982:	bf00      	nop
 8007984:	0800919c 	.word	0x0800919c
 8007988:	080090fc 	.word	0x080090fc
 800798c:	08009120 	.word	0x08009120

08007990 <_free_r>:
 8007990:	b538      	push	{r3, r4, r5, lr}
 8007992:	4605      	mov	r5, r0
 8007994:	2900      	cmp	r1, #0
 8007996:	d040      	beq.n	8007a1a <_free_r+0x8a>
 8007998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800799c:	1f0c      	subs	r4, r1, #4
 800799e:	2b00      	cmp	r3, #0
 80079a0:	bfb8      	it	lt
 80079a2:	18e4      	addlt	r4, r4, r3
 80079a4:	f7fe fb68 	bl	8006078 <__malloc_lock>
 80079a8:	4a1c      	ldr	r2, [pc, #112]	; (8007a1c <_free_r+0x8c>)
 80079aa:	6813      	ldr	r3, [r2, #0]
 80079ac:	b933      	cbnz	r3, 80079bc <_free_r+0x2c>
 80079ae:	6063      	str	r3, [r4, #4]
 80079b0:	6014      	str	r4, [r2, #0]
 80079b2:	4628      	mov	r0, r5
 80079b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079b8:	f7fe bb64 	b.w	8006084 <__malloc_unlock>
 80079bc:	42a3      	cmp	r3, r4
 80079be:	d908      	bls.n	80079d2 <_free_r+0x42>
 80079c0:	6820      	ldr	r0, [r4, #0]
 80079c2:	1821      	adds	r1, r4, r0
 80079c4:	428b      	cmp	r3, r1
 80079c6:	bf01      	itttt	eq
 80079c8:	6819      	ldreq	r1, [r3, #0]
 80079ca:	685b      	ldreq	r3, [r3, #4]
 80079cc:	1809      	addeq	r1, r1, r0
 80079ce:	6021      	streq	r1, [r4, #0]
 80079d0:	e7ed      	b.n	80079ae <_free_r+0x1e>
 80079d2:	461a      	mov	r2, r3
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	b10b      	cbz	r3, 80079dc <_free_r+0x4c>
 80079d8:	42a3      	cmp	r3, r4
 80079da:	d9fa      	bls.n	80079d2 <_free_r+0x42>
 80079dc:	6811      	ldr	r1, [r2, #0]
 80079de:	1850      	adds	r0, r2, r1
 80079e0:	42a0      	cmp	r0, r4
 80079e2:	d10b      	bne.n	80079fc <_free_r+0x6c>
 80079e4:	6820      	ldr	r0, [r4, #0]
 80079e6:	4401      	add	r1, r0
 80079e8:	1850      	adds	r0, r2, r1
 80079ea:	4283      	cmp	r3, r0
 80079ec:	6011      	str	r1, [r2, #0]
 80079ee:	d1e0      	bne.n	80079b2 <_free_r+0x22>
 80079f0:	6818      	ldr	r0, [r3, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	4408      	add	r0, r1
 80079f6:	6010      	str	r0, [r2, #0]
 80079f8:	6053      	str	r3, [r2, #4]
 80079fa:	e7da      	b.n	80079b2 <_free_r+0x22>
 80079fc:	d902      	bls.n	8007a04 <_free_r+0x74>
 80079fe:	230c      	movs	r3, #12
 8007a00:	602b      	str	r3, [r5, #0]
 8007a02:	e7d6      	b.n	80079b2 <_free_r+0x22>
 8007a04:	6820      	ldr	r0, [r4, #0]
 8007a06:	1821      	adds	r1, r4, r0
 8007a08:	428b      	cmp	r3, r1
 8007a0a:	bf01      	itttt	eq
 8007a0c:	6819      	ldreq	r1, [r3, #0]
 8007a0e:	685b      	ldreq	r3, [r3, #4]
 8007a10:	1809      	addeq	r1, r1, r0
 8007a12:	6021      	streq	r1, [r4, #0]
 8007a14:	6063      	str	r3, [r4, #4]
 8007a16:	6054      	str	r4, [r2, #4]
 8007a18:	e7cb      	b.n	80079b2 <_free_r+0x22>
 8007a1a:	bd38      	pop	{r3, r4, r5, pc}
 8007a1c:	200008ec 	.word	0x200008ec

08007a20 <_Balloc>:
 8007a20:	b570      	push	{r4, r5, r6, lr}
 8007a22:	69c6      	ldr	r6, [r0, #28]
 8007a24:	4604      	mov	r4, r0
 8007a26:	460d      	mov	r5, r1
 8007a28:	b976      	cbnz	r6, 8007a48 <_Balloc+0x28>
 8007a2a:	2010      	movs	r0, #16
 8007a2c:	f7fe fa74 	bl	8005f18 <malloc>
 8007a30:	4602      	mov	r2, r0
 8007a32:	61e0      	str	r0, [r4, #28]
 8007a34:	b920      	cbnz	r0, 8007a40 <_Balloc+0x20>
 8007a36:	216b      	movs	r1, #107	; 0x6b
 8007a38:	4b17      	ldr	r3, [pc, #92]	; (8007a98 <_Balloc+0x78>)
 8007a3a:	4818      	ldr	r0, [pc, #96]	; (8007a9c <_Balloc+0x7c>)
 8007a3c:	f000 fdf8 	bl	8008630 <__assert_func>
 8007a40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a44:	6006      	str	r6, [r0, #0]
 8007a46:	60c6      	str	r6, [r0, #12]
 8007a48:	69e6      	ldr	r6, [r4, #28]
 8007a4a:	68f3      	ldr	r3, [r6, #12]
 8007a4c:	b183      	cbz	r3, 8007a70 <_Balloc+0x50>
 8007a4e:	69e3      	ldr	r3, [r4, #28]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a56:	b9b8      	cbnz	r0, 8007a88 <_Balloc+0x68>
 8007a58:	2101      	movs	r1, #1
 8007a5a:	fa01 f605 	lsl.w	r6, r1, r5
 8007a5e:	1d72      	adds	r2, r6, #5
 8007a60:	4620      	mov	r0, r4
 8007a62:	0092      	lsls	r2, r2, #2
 8007a64:	f000 fe02 	bl	800866c <_calloc_r>
 8007a68:	b160      	cbz	r0, 8007a84 <_Balloc+0x64>
 8007a6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a6e:	e00e      	b.n	8007a8e <_Balloc+0x6e>
 8007a70:	2221      	movs	r2, #33	; 0x21
 8007a72:	2104      	movs	r1, #4
 8007a74:	4620      	mov	r0, r4
 8007a76:	f000 fdf9 	bl	800866c <_calloc_r>
 8007a7a:	69e3      	ldr	r3, [r4, #28]
 8007a7c:	60f0      	str	r0, [r6, #12]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1e4      	bne.n	8007a4e <_Balloc+0x2e>
 8007a84:	2000      	movs	r0, #0
 8007a86:	bd70      	pop	{r4, r5, r6, pc}
 8007a88:	6802      	ldr	r2, [r0, #0]
 8007a8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a8e:	2300      	movs	r3, #0
 8007a90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a94:	e7f7      	b.n	8007a86 <_Balloc+0x66>
 8007a96:	bf00      	nop
 8007a98:	0800912d 	.word	0x0800912d
 8007a9c:	080091ad 	.word	0x080091ad

08007aa0 <_Bfree>:
 8007aa0:	b570      	push	{r4, r5, r6, lr}
 8007aa2:	69c6      	ldr	r6, [r0, #28]
 8007aa4:	4605      	mov	r5, r0
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	b976      	cbnz	r6, 8007ac8 <_Bfree+0x28>
 8007aaa:	2010      	movs	r0, #16
 8007aac:	f7fe fa34 	bl	8005f18 <malloc>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	61e8      	str	r0, [r5, #28]
 8007ab4:	b920      	cbnz	r0, 8007ac0 <_Bfree+0x20>
 8007ab6:	218f      	movs	r1, #143	; 0x8f
 8007ab8:	4b08      	ldr	r3, [pc, #32]	; (8007adc <_Bfree+0x3c>)
 8007aba:	4809      	ldr	r0, [pc, #36]	; (8007ae0 <_Bfree+0x40>)
 8007abc:	f000 fdb8 	bl	8008630 <__assert_func>
 8007ac0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ac4:	6006      	str	r6, [r0, #0]
 8007ac6:	60c6      	str	r6, [r0, #12]
 8007ac8:	b13c      	cbz	r4, 8007ada <_Bfree+0x3a>
 8007aca:	69eb      	ldr	r3, [r5, #28]
 8007acc:	6862      	ldr	r2, [r4, #4]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ad4:	6021      	str	r1, [r4, #0]
 8007ad6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ada:	bd70      	pop	{r4, r5, r6, pc}
 8007adc:	0800912d 	.word	0x0800912d
 8007ae0:	080091ad 	.word	0x080091ad

08007ae4 <__multadd>:
 8007ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae8:	4607      	mov	r7, r0
 8007aea:	460c      	mov	r4, r1
 8007aec:	461e      	mov	r6, r3
 8007aee:	2000      	movs	r0, #0
 8007af0:	690d      	ldr	r5, [r1, #16]
 8007af2:	f101 0c14 	add.w	ip, r1, #20
 8007af6:	f8dc 3000 	ldr.w	r3, [ip]
 8007afa:	3001      	adds	r0, #1
 8007afc:	b299      	uxth	r1, r3
 8007afe:	fb02 6101 	mla	r1, r2, r1, r6
 8007b02:	0c1e      	lsrs	r6, r3, #16
 8007b04:	0c0b      	lsrs	r3, r1, #16
 8007b06:	fb02 3306 	mla	r3, r2, r6, r3
 8007b0a:	b289      	uxth	r1, r1
 8007b0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b10:	4285      	cmp	r5, r0
 8007b12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b16:	f84c 1b04 	str.w	r1, [ip], #4
 8007b1a:	dcec      	bgt.n	8007af6 <__multadd+0x12>
 8007b1c:	b30e      	cbz	r6, 8007b62 <__multadd+0x7e>
 8007b1e:	68a3      	ldr	r3, [r4, #8]
 8007b20:	42ab      	cmp	r3, r5
 8007b22:	dc19      	bgt.n	8007b58 <__multadd+0x74>
 8007b24:	6861      	ldr	r1, [r4, #4]
 8007b26:	4638      	mov	r0, r7
 8007b28:	3101      	adds	r1, #1
 8007b2a:	f7ff ff79 	bl	8007a20 <_Balloc>
 8007b2e:	4680      	mov	r8, r0
 8007b30:	b928      	cbnz	r0, 8007b3e <__multadd+0x5a>
 8007b32:	4602      	mov	r2, r0
 8007b34:	21ba      	movs	r1, #186	; 0xba
 8007b36:	4b0c      	ldr	r3, [pc, #48]	; (8007b68 <__multadd+0x84>)
 8007b38:	480c      	ldr	r0, [pc, #48]	; (8007b6c <__multadd+0x88>)
 8007b3a:	f000 fd79 	bl	8008630 <__assert_func>
 8007b3e:	6922      	ldr	r2, [r4, #16]
 8007b40:	f104 010c 	add.w	r1, r4, #12
 8007b44:	3202      	adds	r2, #2
 8007b46:	0092      	lsls	r2, r2, #2
 8007b48:	300c      	adds	r0, #12
 8007b4a:	f000 fd63 	bl	8008614 <memcpy>
 8007b4e:	4621      	mov	r1, r4
 8007b50:	4638      	mov	r0, r7
 8007b52:	f7ff ffa5 	bl	8007aa0 <_Bfree>
 8007b56:	4644      	mov	r4, r8
 8007b58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b5c:	3501      	adds	r5, #1
 8007b5e:	615e      	str	r6, [r3, #20]
 8007b60:	6125      	str	r5, [r4, #16]
 8007b62:	4620      	mov	r0, r4
 8007b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b68:	0800919c 	.word	0x0800919c
 8007b6c:	080091ad 	.word	0x080091ad

08007b70 <__hi0bits>:
 8007b70:	0c02      	lsrs	r2, r0, #16
 8007b72:	0412      	lsls	r2, r2, #16
 8007b74:	4603      	mov	r3, r0
 8007b76:	b9ca      	cbnz	r2, 8007bac <__hi0bits+0x3c>
 8007b78:	0403      	lsls	r3, r0, #16
 8007b7a:	2010      	movs	r0, #16
 8007b7c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007b80:	bf04      	itt	eq
 8007b82:	021b      	lsleq	r3, r3, #8
 8007b84:	3008      	addeq	r0, #8
 8007b86:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007b8a:	bf04      	itt	eq
 8007b8c:	011b      	lsleq	r3, r3, #4
 8007b8e:	3004      	addeq	r0, #4
 8007b90:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007b94:	bf04      	itt	eq
 8007b96:	009b      	lsleq	r3, r3, #2
 8007b98:	3002      	addeq	r0, #2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	db05      	blt.n	8007baa <__hi0bits+0x3a>
 8007b9e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007ba2:	f100 0001 	add.w	r0, r0, #1
 8007ba6:	bf08      	it	eq
 8007ba8:	2020      	moveq	r0, #32
 8007baa:	4770      	bx	lr
 8007bac:	2000      	movs	r0, #0
 8007bae:	e7e5      	b.n	8007b7c <__hi0bits+0xc>

08007bb0 <__lo0bits>:
 8007bb0:	6803      	ldr	r3, [r0, #0]
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	f013 0007 	ands.w	r0, r3, #7
 8007bb8:	d00b      	beq.n	8007bd2 <__lo0bits+0x22>
 8007bba:	07d9      	lsls	r1, r3, #31
 8007bbc:	d421      	bmi.n	8007c02 <__lo0bits+0x52>
 8007bbe:	0798      	lsls	r0, r3, #30
 8007bc0:	bf49      	itett	mi
 8007bc2:	085b      	lsrmi	r3, r3, #1
 8007bc4:	089b      	lsrpl	r3, r3, #2
 8007bc6:	2001      	movmi	r0, #1
 8007bc8:	6013      	strmi	r3, [r2, #0]
 8007bca:	bf5c      	itt	pl
 8007bcc:	2002      	movpl	r0, #2
 8007bce:	6013      	strpl	r3, [r2, #0]
 8007bd0:	4770      	bx	lr
 8007bd2:	b299      	uxth	r1, r3
 8007bd4:	b909      	cbnz	r1, 8007bda <__lo0bits+0x2a>
 8007bd6:	2010      	movs	r0, #16
 8007bd8:	0c1b      	lsrs	r3, r3, #16
 8007bda:	b2d9      	uxtb	r1, r3
 8007bdc:	b909      	cbnz	r1, 8007be2 <__lo0bits+0x32>
 8007bde:	3008      	adds	r0, #8
 8007be0:	0a1b      	lsrs	r3, r3, #8
 8007be2:	0719      	lsls	r1, r3, #28
 8007be4:	bf04      	itt	eq
 8007be6:	091b      	lsreq	r3, r3, #4
 8007be8:	3004      	addeq	r0, #4
 8007bea:	0799      	lsls	r1, r3, #30
 8007bec:	bf04      	itt	eq
 8007bee:	089b      	lsreq	r3, r3, #2
 8007bf0:	3002      	addeq	r0, #2
 8007bf2:	07d9      	lsls	r1, r3, #31
 8007bf4:	d403      	bmi.n	8007bfe <__lo0bits+0x4e>
 8007bf6:	085b      	lsrs	r3, r3, #1
 8007bf8:	f100 0001 	add.w	r0, r0, #1
 8007bfc:	d003      	beq.n	8007c06 <__lo0bits+0x56>
 8007bfe:	6013      	str	r3, [r2, #0]
 8007c00:	4770      	bx	lr
 8007c02:	2000      	movs	r0, #0
 8007c04:	4770      	bx	lr
 8007c06:	2020      	movs	r0, #32
 8007c08:	4770      	bx	lr
	...

08007c0c <__i2b>:
 8007c0c:	b510      	push	{r4, lr}
 8007c0e:	460c      	mov	r4, r1
 8007c10:	2101      	movs	r1, #1
 8007c12:	f7ff ff05 	bl	8007a20 <_Balloc>
 8007c16:	4602      	mov	r2, r0
 8007c18:	b928      	cbnz	r0, 8007c26 <__i2b+0x1a>
 8007c1a:	f240 1145 	movw	r1, #325	; 0x145
 8007c1e:	4b04      	ldr	r3, [pc, #16]	; (8007c30 <__i2b+0x24>)
 8007c20:	4804      	ldr	r0, [pc, #16]	; (8007c34 <__i2b+0x28>)
 8007c22:	f000 fd05 	bl	8008630 <__assert_func>
 8007c26:	2301      	movs	r3, #1
 8007c28:	6144      	str	r4, [r0, #20]
 8007c2a:	6103      	str	r3, [r0, #16]
 8007c2c:	bd10      	pop	{r4, pc}
 8007c2e:	bf00      	nop
 8007c30:	0800919c 	.word	0x0800919c
 8007c34:	080091ad 	.word	0x080091ad

08007c38 <__multiply>:
 8007c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3c:	4691      	mov	r9, r2
 8007c3e:	690a      	ldr	r2, [r1, #16]
 8007c40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c44:	460c      	mov	r4, r1
 8007c46:	429a      	cmp	r2, r3
 8007c48:	bfbe      	ittt	lt
 8007c4a:	460b      	movlt	r3, r1
 8007c4c:	464c      	movlt	r4, r9
 8007c4e:	4699      	movlt	r9, r3
 8007c50:	6927      	ldr	r7, [r4, #16]
 8007c52:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c56:	68a3      	ldr	r3, [r4, #8]
 8007c58:	6861      	ldr	r1, [r4, #4]
 8007c5a:	eb07 060a 	add.w	r6, r7, sl
 8007c5e:	42b3      	cmp	r3, r6
 8007c60:	b085      	sub	sp, #20
 8007c62:	bfb8      	it	lt
 8007c64:	3101      	addlt	r1, #1
 8007c66:	f7ff fedb 	bl	8007a20 <_Balloc>
 8007c6a:	b930      	cbnz	r0, 8007c7a <__multiply+0x42>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007c72:	4b43      	ldr	r3, [pc, #268]	; (8007d80 <__multiply+0x148>)
 8007c74:	4843      	ldr	r0, [pc, #268]	; (8007d84 <__multiply+0x14c>)
 8007c76:	f000 fcdb 	bl	8008630 <__assert_func>
 8007c7a:	f100 0514 	add.w	r5, r0, #20
 8007c7e:	462b      	mov	r3, r5
 8007c80:	2200      	movs	r2, #0
 8007c82:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c86:	4543      	cmp	r3, r8
 8007c88:	d321      	bcc.n	8007cce <__multiply+0x96>
 8007c8a:	f104 0314 	add.w	r3, r4, #20
 8007c8e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007c92:	f109 0314 	add.w	r3, r9, #20
 8007c96:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007c9a:	9202      	str	r2, [sp, #8]
 8007c9c:	1b3a      	subs	r2, r7, r4
 8007c9e:	3a15      	subs	r2, #21
 8007ca0:	f022 0203 	bic.w	r2, r2, #3
 8007ca4:	3204      	adds	r2, #4
 8007ca6:	f104 0115 	add.w	r1, r4, #21
 8007caa:	428f      	cmp	r7, r1
 8007cac:	bf38      	it	cc
 8007cae:	2204      	movcc	r2, #4
 8007cb0:	9201      	str	r2, [sp, #4]
 8007cb2:	9a02      	ldr	r2, [sp, #8]
 8007cb4:	9303      	str	r3, [sp, #12]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d80c      	bhi.n	8007cd4 <__multiply+0x9c>
 8007cba:	2e00      	cmp	r6, #0
 8007cbc:	dd03      	ble.n	8007cc6 <__multiply+0x8e>
 8007cbe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d05a      	beq.n	8007d7c <__multiply+0x144>
 8007cc6:	6106      	str	r6, [r0, #16]
 8007cc8:	b005      	add	sp, #20
 8007cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cce:	f843 2b04 	str.w	r2, [r3], #4
 8007cd2:	e7d8      	b.n	8007c86 <__multiply+0x4e>
 8007cd4:	f8b3 a000 	ldrh.w	sl, [r3]
 8007cd8:	f1ba 0f00 	cmp.w	sl, #0
 8007cdc:	d023      	beq.n	8007d26 <__multiply+0xee>
 8007cde:	46a9      	mov	r9, r5
 8007ce0:	f04f 0c00 	mov.w	ip, #0
 8007ce4:	f104 0e14 	add.w	lr, r4, #20
 8007ce8:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007cec:	f8d9 1000 	ldr.w	r1, [r9]
 8007cf0:	fa1f fb82 	uxth.w	fp, r2
 8007cf4:	b289      	uxth	r1, r1
 8007cf6:	fb0a 110b 	mla	r1, sl, fp, r1
 8007cfa:	4461      	add	r1, ip
 8007cfc:	f8d9 c000 	ldr.w	ip, [r9]
 8007d00:	0c12      	lsrs	r2, r2, #16
 8007d02:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007d06:	fb0a c202 	mla	r2, sl, r2, ip
 8007d0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d0e:	b289      	uxth	r1, r1
 8007d10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d14:	4577      	cmp	r7, lr
 8007d16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d1a:	f849 1b04 	str.w	r1, [r9], #4
 8007d1e:	d8e3      	bhi.n	8007ce8 <__multiply+0xb0>
 8007d20:	9a01      	ldr	r2, [sp, #4]
 8007d22:	f845 c002 	str.w	ip, [r5, r2]
 8007d26:	9a03      	ldr	r2, [sp, #12]
 8007d28:	3304      	adds	r3, #4
 8007d2a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d2e:	f1b9 0f00 	cmp.w	r9, #0
 8007d32:	d021      	beq.n	8007d78 <__multiply+0x140>
 8007d34:	46ae      	mov	lr, r5
 8007d36:	f04f 0a00 	mov.w	sl, #0
 8007d3a:	6829      	ldr	r1, [r5, #0]
 8007d3c:	f104 0c14 	add.w	ip, r4, #20
 8007d40:	f8bc b000 	ldrh.w	fp, [ip]
 8007d44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007d48:	b289      	uxth	r1, r1
 8007d4a:	fb09 220b 	mla	r2, r9, fp, r2
 8007d4e:	4452      	add	r2, sl
 8007d50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d54:	f84e 1b04 	str.w	r1, [lr], #4
 8007d58:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007d5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d60:	f8be 1000 	ldrh.w	r1, [lr]
 8007d64:	4567      	cmp	r7, ip
 8007d66:	fb09 110a 	mla	r1, r9, sl, r1
 8007d6a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007d6e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d72:	d8e5      	bhi.n	8007d40 <__multiply+0x108>
 8007d74:	9a01      	ldr	r2, [sp, #4]
 8007d76:	50a9      	str	r1, [r5, r2]
 8007d78:	3504      	adds	r5, #4
 8007d7a:	e79a      	b.n	8007cb2 <__multiply+0x7a>
 8007d7c:	3e01      	subs	r6, #1
 8007d7e:	e79c      	b.n	8007cba <__multiply+0x82>
 8007d80:	0800919c 	.word	0x0800919c
 8007d84:	080091ad 	.word	0x080091ad

08007d88 <__pow5mult>:
 8007d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d8c:	4615      	mov	r5, r2
 8007d8e:	f012 0203 	ands.w	r2, r2, #3
 8007d92:	4606      	mov	r6, r0
 8007d94:	460f      	mov	r7, r1
 8007d96:	d007      	beq.n	8007da8 <__pow5mult+0x20>
 8007d98:	4c25      	ldr	r4, [pc, #148]	; (8007e30 <__pow5mult+0xa8>)
 8007d9a:	3a01      	subs	r2, #1
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007da2:	f7ff fe9f 	bl	8007ae4 <__multadd>
 8007da6:	4607      	mov	r7, r0
 8007da8:	10ad      	asrs	r5, r5, #2
 8007daa:	d03d      	beq.n	8007e28 <__pow5mult+0xa0>
 8007dac:	69f4      	ldr	r4, [r6, #28]
 8007dae:	b97c      	cbnz	r4, 8007dd0 <__pow5mult+0x48>
 8007db0:	2010      	movs	r0, #16
 8007db2:	f7fe f8b1 	bl	8005f18 <malloc>
 8007db6:	4602      	mov	r2, r0
 8007db8:	61f0      	str	r0, [r6, #28]
 8007dba:	b928      	cbnz	r0, 8007dc8 <__pow5mult+0x40>
 8007dbc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007dc0:	4b1c      	ldr	r3, [pc, #112]	; (8007e34 <__pow5mult+0xac>)
 8007dc2:	481d      	ldr	r0, [pc, #116]	; (8007e38 <__pow5mult+0xb0>)
 8007dc4:	f000 fc34 	bl	8008630 <__assert_func>
 8007dc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007dcc:	6004      	str	r4, [r0, #0]
 8007dce:	60c4      	str	r4, [r0, #12]
 8007dd0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007dd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007dd8:	b94c      	cbnz	r4, 8007dee <__pow5mult+0x66>
 8007dda:	f240 2171 	movw	r1, #625	; 0x271
 8007dde:	4630      	mov	r0, r6
 8007de0:	f7ff ff14 	bl	8007c0c <__i2b>
 8007de4:	2300      	movs	r3, #0
 8007de6:	4604      	mov	r4, r0
 8007de8:	f8c8 0008 	str.w	r0, [r8, #8]
 8007dec:	6003      	str	r3, [r0, #0]
 8007dee:	f04f 0900 	mov.w	r9, #0
 8007df2:	07eb      	lsls	r3, r5, #31
 8007df4:	d50a      	bpl.n	8007e0c <__pow5mult+0x84>
 8007df6:	4639      	mov	r1, r7
 8007df8:	4622      	mov	r2, r4
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f7ff ff1c 	bl	8007c38 <__multiply>
 8007e00:	4680      	mov	r8, r0
 8007e02:	4639      	mov	r1, r7
 8007e04:	4630      	mov	r0, r6
 8007e06:	f7ff fe4b 	bl	8007aa0 <_Bfree>
 8007e0a:	4647      	mov	r7, r8
 8007e0c:	106d      	asrs	r5, r5, #1
 8007e0e:	d00b      	beq.n	8007e28 <__pow5mult+0xa0>
 8007e10:	6820      	ldr	r0, [r4, #0]
 8007e12:	b938      	cbnz	r0, 8007e24 <__pow5mult+0x9c>
 8007e14:	4622      	mov	r2, r4
 8007e16:	4621      	mov	r1, r4
 8007e18:	4630      	mov	r0, r6
 8007e1a:	f7ff ff0d 	bl	8007c38 <__multiply>
 8007e1e:	6020      	str	r0, [r4, #0]
 8007e20:	f8c0 9000 	str.w	r9, [r0]
 8007e24:	4604      	mov	r4, r0
 8007e26:	e7e4      	b.n	8007df2 <__pow5mult+0x6a>
 8007e28:	4638      	mov	r0, r7
 8007e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e2e:	bf00      	nop
 8007e30:	080092f8 	.word	0x080092f8
 8007e34:	0800912d 	.word	0x0800912d
 8007e38:	080091ad 	.word	0x080091ad

08007e3c <__lshift>:
 8007e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e40:	460c      	mov	r4, r1
 8007e42:	4607      	mov	r7, r0
 8007e44:	4691      	mov	r9, r2
 8007e46:	6923      	ldr	r3, [r4, #16]
 8007e48:	6849      	ldr	r1, [r1, #4]
 8007e4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e4e:	68a3      	ldr	r3, [r4, #8]
 8007e50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e54:	f108 0601 	add.w	r6, r8, #1
 8007e58:	42b3      	cmp	r3, r6
 8007e5a:	db0b      	blt.n	8007e74 <__lshift+0x38>
 8007e5c:	4638      	mov	r0, r7
 8007e5e:	f7ff fddf 	bl	8007a20 <_Balloc>
 8007e62:	4605      	mov	r5, r0
 8007e64:	b948      	cbnz	r0, 8007e7a <__lshift+0x3e>
 8007e66:	4602      	mov	r2, r0
 8007e68:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007e6c:	4b27      	ldr	r3, [pc, #156]	; (8007f0c <__lshift+0xd0>)
 8007e6e:	4828      	ldr	r0, [pc, #160]	; (8007f10 <__lshift+0xd4>)
 8007e70:	f000 fbde 	bl	8008630 <__assert_func>
 8007e74:	3101      	adds	r1, #1
 8007e76:	005b      	lsls	r3, r3, #1
 8007e78:	e7ee      	b.n	8007e58 <__lshift+0x1c>
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	f100 0114 	add.w	r1, r0, #20
 8007e80:	f100 0210 	add.w	r2, r0, #16
 8007e84:	4618      	mov	r0, r3
 8007e86:	4553      	cmp	r3, sl
 8007e88:	db33      	blt.n	8007ef2 <__lshift+0xb6>
 8007e8a:	6920      	ldr	r0, [r4, #16]
 8007e8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e90:	f104 0314 	add.w	r3, r4, #20
 8007e94:	f019 091f 	ands.w	r9, r9, #31
 8007e98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007ea0:	d02b      	beq.n	8007efa <__lshift+0xbe>
 8007ea2:	468a      	mov	sl, r1
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	f1c9 0e20 	rsb	lr, r9, #32
 8007eaa:	6818      	ldr	r0, [r3, #0]
 8007eac:	fa00 f009 	lsl.w	r0, r0, r9
 8007eb0:	4310      	orrs	r0, r2
 8007eb2:	f84a 0b04 	str.w	r0, [sl], #4
 8007eb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eba:	459c      	cmp	ip, r3
 8007ebc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ec0:	d8f3      	bhi.n	8007eaa <__lshift+0x6e>
 8007ec2:	ebac 0304 	sub.w	r3, ip, r4
 8007ec6:	3b15      	subs	r3, #21
 8007ec8:	f023 0303 	bic.w	r3, r3, #3
 8007ecc:	3304      	adds	r3, #4
 8007ece:	f104 0015 	add.w	r0, r4, #21
 8007ed2:	4584      	cmp	ip, r0
 8007ed4:	bf38      	it	cc
 8007ed6:	2304      	movcc	r3, #4
 8007ed8:	50ca      	str	r2, [r1, r3]
 8007eda:	b10a      	cbz	r2, 8007ee0 <__lshift+0xa4>
 8007edc:	f108 0602 	add.w	r6, r8, #2
 8007ee0:	3e01      	subs	r6, #1
 8007ee2:	4638      	mov	r0, r7
 8007ee4:	4621      	mov	r1, r4
 8007ee6:	612e      	str	r6, [r5, #16]
 8007ee8:	f7ff fdda 	bl	8007aa0 <_Bfree>
 8007eec:	4628      	mov	r0, r5
 8007eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	e7c5      	b.n	8007e86 <__lshift+0x4a>
 8007efa:	3904      	subs	r1, #4
 8007efc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f00:	459c      	cmp	ip, r3
 8007f02:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f06:	d8f9      	bhi.n	8007efc <__lshift+0xc0>
 8007f08:	e7ea      	b.n	8007ee0 <__lshift+0xa4>
 8007f0a:	bf00      	nop
 8007f0c:	0800919c 	.word	0x0800919c
 8007f10:	080091ad 	.word	0x080091ad

08007f14 <__mcmp>:
 8007f14:	4603      	mov	r3, r0
 8007f16:	690a      	ldr	r2, [r1, #16]
 8007f18:	6900      	ldr	r0, [r0, #16]
 8007f1a:	b530      	push	{r4, r5, lr}
 8007f1c:	1a80      	subs	r0, r0, r2
 8007f1e:	d10d      	bne.n	8007f3c <__mcmp+0x28>
 8007f20:	3314      	adds	r3, #20
 8007f22:	3114      	adds	r1, #20
 8007f24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007f28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007f2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007f30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007f34:	4295      	cmp	r5, r2
 8007f36:	d002      	beq.n	8007f3e <__mcmp+0x2a>
 8007f38:	d304      	bcc.n	8007f44 <__mcmp+0x30>
 8007f3a:	2001      	movs	r0, #1
 8007f3c:	bd30      	pop	{r4, r5, pc}
 8007f3e:	42a3      	cmp	r3, r4
 8007f40:	d3f4      	bcc.n	8007f2c <__mcmp+0x18>
 8007f42:	e7fb      	b.n	8007f3c <__mcmp+0x28>
 8007f44:	f04f 30ff 	mov.w	r0, #4294967295
 8007f48:	e7f8      	b.n	8007f3c <__mcmp+0x28>
	...

08007f4c <__mdiff>:
 8007f4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f50:	460d      	mov	r5, r1
 8007f52:	4607      	mov	r7, r0
 8007f54:	4611      	mov	r1, r2
 8007f56:	4628      	mov	r0, r5
 8007f58:	4614      	mov	r4, r2
 8007f5a:	f7ff ffdb 	bl	8007f14 <__mcmp>
 8007f5e:	1e06      	subs	r6, r0, #0
 8007f60:	d111      	bne.n	8007f86 <__mdiff+0x3a>
 8007f62:	4631      	mov	r1, r6
 8007f64:	4638      	mov	r0, r7
 8007f66:	f7ff fd5b 	bl	8007a20 <_Balloc>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	b928      	cbnz	r0, 8007f7a <__mdiff+0x2e>
 8007f6e:	f240 2137 	movw	r1, #567	; 0x237
 8007f72:	4b3a      	ldr	r3, [pc, #232]	; (800805c <__mdiff+0x110>)
 8007f74:	483a      	ldr	r0, [pc, #232]	; (8008060 <__mdiff+0x114>)
 8007f76:	f000 fb5b 	bl	8008630 <__assert_func>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007f80:	4610      	mov	r0, r2
 8007f82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f86:	bfa4      	itt	ge
 8007f88:	4623      	movge	r3, r4
 8007f8a:	462c      	movge	r4, r5
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	6861      	ldr	r1, [r4, #4]
 8007f90:	bfa6      	itte	ge
 8007f92:	461d      	movge	r5, r3
 8007f94:	2600      	movge	r6, #0
 8007f96:	2601      	movlt	r6, #1
 8007f98:	f7ff fd42 	bl	8007a20 <_Balloc>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	b918      	cbnz	r0, 8007fa8 <__mdiff+0x5c>
 8007fa0:	f240 2145 	movw	r1, #581	; 0x245
 8007fa4:	4b2d      	ldr	r3, [pc, #180]	; (800805c <__mdiff+0x110>)
 8007fa6:	e7e5      	b.n	8007f74 <__mdiff+0x28>
 8007fa8:	f102 0814 	add.w	r8, r2, #20
 8007fac:	46c2      	mov	sl, r8
 8007fae:	f04f 0c00 	mov.w	ip, #0
 8007fb2:	6927      	ldr	r7, [r4, #16]
 8007fb4:	60c6      	str	r6, [r0, #12]
 8007fb6:	692e      	ldr	r6, [r5, #16]
 8007fb8:	f104 0014 	add.w	r0, r4, #20
 8007fbc:	f105 0914 	add.w	r9, r5, #20
 8007fc0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007fc4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007fc8:	3410      	adds	r4, #16
 8007fca:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007fce:	f859 3b04 	ldr.w	r3, [r9], #4
 8007fd2:	fa1f f18b 	uxth.w	r1, fp
 8007fd6:	4461      	add	r1, ip
 8007fd8:	fa1f fc83 	uxth.w	ip, r3
 8007fdc:	0c1b      	lsrs	r3, r3, #16
 8007fde:	eba1 010c 	sub.w	r1, r1, ip
 8007fe2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007fe6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007fea:	b289      	uxth	r1, r1
 8007fec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007ff0:	454e      	cmp	r6, r9
 8007ff2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007ff6:	f84a 1b04 	str.w	r1, [sl], #4
 8007ffa:	d8e6      	bhi.n	8007fca <__mdiff+0x7e>
 8007ffc:	1b73      	subs	r3, r6, r5
 8007ffe:	3b15      	subs	r3, #21
 8008000:	f023 0303 	bic.w	r3, r3, #3
 8008004:	3515      	adds	r5, #21
 8008006:	3304      	adds	r3, #4
 8008008:	42ae      	cmp	r6, r5
 800800a:	bf38      	it	cc
 800800c:	2304      	movcc	r3, #4
 800800e:	4418      	add	r0, r3
 8008010:	4443      	add	r3, r8
 8008012:	461e      	mov	r6, r3
 8008014:	4605      	mov	r5, r0
 8008016:	4575      	cmp	r5, lr
 8008018:	d30e      	bcc.n	8008038 <__mdiff+0xec>
 800801a:	f10e 0103 	add.w	r1, lr, #3
 800801e:	1a09      	subs	r1, r1, r0
 8008020:	f021 0103 	bic.w	r1, r1, #3
 8008024:	3803      	subs	r0, #3
 8008026:	4586      	cmp	lr, r0
 8008028:	bf38      	it	cc
 800802a:	2100      	movcc	r1, #0
 800802c:	440b      	add	r3, r1
 800802e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008032:	b189      	cbz	r1, 8008058 <__mdiff+0x10c>
 8008034:	6117      	str	r7, [r2, #16]
 8008036:	e7a3      	b.n	8007f80 <__mdiff+0x34>
 8008038:	f855 8b04 	ldr.w	r8, [r5], #4
 800803c:	fa1f f188 	uxth.w	r1, r8
 8008040:	4461      	add	r1, ip
 8008042:	140c      	asrs	r4, r1, #16
 8008044:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008048:	b289      	uxth	r1, r1
 800804a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800804e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008052:	f846 1b04 	str.w	r1, [r6], #4
 8008056:	e7de      	b.n	8008016 <__mdiff+0xca>
 8008058:	3f01      	subs	r7, #1
 800805a:	e7e8      	b.n	800802e <__mdiff+0xe2>
 800805c:	0800919c 	.word	0x0800919c
 8008060:	080091ad 	.word	0x080091ad

08008064 <__d2b>:
 8008064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008066:	2101      	movs	r1, #1
 8008068:	4617      	mov	r7, r2
 800806a:	461c      	mov	r4, r3
 800806c:	9e08      	ldr	r6, [sp, #32]
 800806e:	f7ff fcd7 	bl	8007a20 <_Balloc>
 8008072:	4605      	mov	r5, r0
 8008074:	b930      	cbnz	r0, 8008084 <__d2b+0x20>
 8008076:	4602      	mov	r2, r0
 8008078:	f240 310f 	movw	r1, #783	; 0x30f
 800807c:	4b22      	ldr	r3, [pc, #136]	; (8008108 <__d2b+0xa4>)
 800807e:	4823      	ldr	r0, [pc, #140]	; (800810c <__d2b+0xa8>)
 8008080:	f000 fad6 	bl	8008630 <__assert_func>
 8008084:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008088:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800808c:	bb24      	cbnz	r4, 80080d8 <__d2b+0x74>
 800808e:	2f00      	cmp	r7, #0
 8008090:	9301      	str	r3, [sp, #4]
 8008092:	d026      	beq.n	80080e2 <__d2b+0x7e>
 8008094:	4668      	mov	r0, sp
 8008096:	9700      	str	r7, [sp, #0]
 8008098:	f7ff fd8a 	bl	8007bb0 <__lo0bits>
 800809c:	e9dd 1200 	ldrd	r1, r2, [sp]
 80080a0:	b1e8      	cbz	r0, 80080de <__d2b+0x7a>
 80080a2:	f1c0 0320 	rsb	r3, r0, #32
 80080a6:	fa02 f303 	lsl.w	r3, r2, r3
 80080aa:	430b      	orrs	r3, r1
 80080ac:	40c2      	lsrs	r2, r0
 80080ae:	616b      	str	r3, [r5, #20]
 80080b0:	9201      	str	r2, [sp, #4]
 80080b2:	9b01      	ldr	r3, [sp, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	bf14      	ite	ne
 80080b8:	2102      	movne	r1, #2
 80080ba:	2101      	moveq	r1, #1
 80080bc:	61ab      	str	r3, [r5, #24]
 80080be:	6129      	str	r1, [r5, #16]
 80080c0:	b1bc      	cbz	r4, 80080f2 <__d2b+0x8e>
 80080c2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80080c6:	4404      	add	r4, r0
 80080c8:	6034      	str	r4, [r6, #0]
 80080ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80080ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080d0:	6018      	str	r0, [r3, #0]
 80080d2:	4628      	mov	r0, r5
 80080d4:	b003      	add	sp, #12
 80080d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80080dc:	e7d7      	b.n	800808e <__d2b+0x2a>
 80080de:	6169      	str	r1, [r5, #20]
 80080e0:	e7e7      	b.n	80080b2 <__d2b+0x4e>
 80080e2:	a801      	add	r0, sp, #4
 80080e4:	f7ff fd64 	bl	8007bb0 <__lo0bits>
 80080e8:	9b01      	ldr	r3, [sp, #4]
 80080ea:	2101      	movs	r1, #1
 80080ec:	616b      	str	r3, [r5, #20]
 80080ee:	3020      	adds	r0, #32
 80080f0:	e7e5      	b.n	80080be <__d2b+0x5a>
 80080f2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80080f6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80080fa:	6030      	str	r0, [r6, #0]
 80080fc:	6918      	ldr	r0, [r3, #16]
 80080fe:	f7ff fd37 	bl	8007b70 <__hi0bits>
 8008102:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008106:	e7e2      	b.n	80080ce <__d2b+0x6a>
 8008108:	0800919c 	.word	0x0800919c
 800810c:	080091ad 	.word	0x080091ad

08008110 <__sfputc_r>:
 8008110:	6893      	ldr	r3, [r2, #8]
 8008112:	b410      	push	{r4}
 8008114:	3b01      	subs	r3, #1
 8008116:	2b00      	cmp	r3, #0
 8008118:	6093      	str	r3, [r2, #8]
 800811a:	da07      	bge.n	800812c <__sfputc_r+0x1c>
 800811c:	6994      	ldr	r4, [r2, #24]
 800811e:	42a3      	cmp	r3, r4
 8008120:	db01      	blt.n	8008126 <__sfputc_r+0x16>
 8008122:	290a      	cmp	r1, #10
 8008124:	d102      	bne.n	800812c <__sfputc_r+0x1c>
 8008126:	bc10      	pop	{r4}
 8008128:	f000 b9de 	b.w	80084e8 <__swbuf_r>
 800812c:	6813      	ldr	r3, [r2, #0]
 800812e:	1c58      	adds	r0, r3, #1
 8008130:	6010      	str	r0, [r2, #0]
 8008132:	7019      	strb	r1, [r3, #0]
 8008134:	4608      	mov	r0, r1
 8008136:	bc10      	pop	{r4}
 8008138:	4770      	bx	lr

0800813a <__sfputs_r>:
 800813a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813c:	4606      	mov	r6, r0
 800813e:	460f      	mov	r7, r1
 8008140:	4614      	mov	r4, r2
 8008142:	18d5      	adds	r5, r2, r3
 8008144:	42ac      	cmp	r4, r5
 8008146:	d101      	bne.n	800814c <__sfputs_r+0x12>
 8008148:	2000      	movs	r0, #0
 800814a:	e007      	b.n	800815c <__sfputs_r+0x22>
 800814c:	463a      	mov	r2, r7
 800814e:	4630      	mov	r0, r6
 8008150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008154:	f7ff ffdc 	bl	8008110 <__sfputc_r>
 8008158:	1c43      	adds	r3, r0, #1
 800815a:	d1f3      	bne.n	8008144 <__sfputs_r+0xa>
 800815c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008160 <_vfiprintf_r>:
 8008160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008164:	460d      	mov	r5, r1
 8008166:	4614      	mov	r4, r2
 8008168:	4698      	mov	r8, r3
 800816a:	4606      	mov	r6, r0
 800816c:	b09d      	sub	sp, #116	; 0x74
 800816e:	b118      	cbz	r0, 8008178 <_vfiprintf_r+0x18>
 8008170:	6a03      	ldr	r3, [r0, #32]
 8008172:	b90b      	cbnz	r3, 8008178 <_vfiprintf_r+0x18>
 8008174:	f7fe fc76 	bl	8006a64 <__sinit>
 8008178:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800817a:	07d9      	lsls	r1, r3, #31
 800817c:	d405      	bmi.n	800818a <_vfiprintf_r+0x2a>
 800817e:	89ab      	ldrh	r3, [r5, #12]
 8008180:	059a      	lsls	r2, r3, #22
 8008182:	d402      	bmi.n	800818a <_vfiprintf_r+0x2a>
 8008184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008186:	f7fe fd86 	bl	8006c96 <__retarget_lock_acquire_recursive>
 800818a:	89ab      	ldrh	r3, [r5, #12]
 800818c:	071b      	lsls	r3, r3, #28
 800818e:	d501      	bpl.n	8008194 <_vfiprintf_r+0x34>
 8008190:	692b      	ldr	r3, [r5, #16]
 8008192:	b99b      	cbnz	r3, 80081bc <_vfiprintf_r+0x5c>
 8008194:	4629      	mov	r1, r5
 8008196:	4630      	mov	r0, r6
 8008198:	f000 f9e4 	bl	8008564 <__swsetup_r>
 800819c:	b170      	cbz	r0, 80081bc <_vfiprintf_r+0x5c>
 800819e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081a0:	07dc      	lsls	r4, r3, #31
 80081a2:	d504      	bpl.n	80081ae <_vfiprintf_r+0x4e>
 80081a4:	f04f 30ff 	mov.w	r0, #4294967295
 80081a8:	b01d      	add	sp, #116	; 0x74
 80081aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ae:	89ab      	ldrh	r3, [r5, #12]
 80081b0:	0598      	lsls	r0, r3, #22
 80081b2:	d4f7      	bmi.n	80081a4 <_vfiprintf_r+0x44>
 80081b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081b6:	f7fe fd6f 	bl	8006c98 <__retarget_lock_release_recursive>
 80081ba:	e7f3      	b.n	80081a4 <_vfiprintf_r+0x44>
 80081bc:	2300      	movs	r3, #0
 80081be:	9309      	str	r3, [sp, #36]	; 0x24
 80081c0:	2320      	movs	r3, #32
 80081c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081c6:	2330      	movs	r3, #48	; 0x30
 80081c8:	f04f 0901 	mov.w	r9, #1
 80081cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80081d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008380 <_vfiprintf_r+0x220>
 80081d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081d8:	4623      	mov	r3, r4
 80081da:	469a      	mov	sl, r3
 80081dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081e0:	b10a      	cbz	r2, 80081e6 <_vfiprintf_r+0x86>
 80081e2:	2a25      	cmp	r2, #37	; 0x25
 80081e4:	d1f9      	bne.n	80081da <_vfiprintf_r+0x7a>
 80081e6:	ebba 0b04 	subs.w	fp, sl, r4
 80081ea:	d00b      	beq.n	8008204 <_vfiprintf_r+0xa4>
 80081ec:	465b      	mov	r3, fp
 80081ee:	4622      	mov	r2, r4
 80081f0:	4629      	mov	r1, r5
 80081f2:	4630      	mov	r0, r6
 80081f4:	f7ff ffa1 	bl	800813a <__sfputs_r>
 80081f8:	3001      	adds	r0, #1
 80081fa:	f000 80a9 	beq.w	8008350 <_vfiprintf_r+0x1f0>
 80081fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008200:	445a      	add	r2, fp
 8008202:	9209      	str	r2, [sp, #36]	; 0x24
 8008204:	f89a 3000 	ldrb.w	r3, [sl]
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 80a1 	beq.w	8008350 <_vfiprintf_r+0x1f0>
 800820e:	2300      	movs	r3, #0
 8008210:	f04f 32ff 	mov.w	r2, #4294967295
 8008214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008218:	f10a 0a01 	add.w	sl, sl, #1
 800821c:	9304      	str	r3, [sp, #16]
 800821e:	9307      	str	r3, [sp, #28]
 8008220:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008224:	931a      	str	r3, [sp, #104]	; 0x68
 8008226:	4654      	mov	r4, sl
 8008228:	2205      	movs	r2, #5
 800822a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800822e:	4854      	ldr	r0, [pc, #336]	; (8008380 <_vfiprintf_r+0x220>)
 8008230:	f7fe fd33 	bl	8006c9a <memchr>
 8008234:	9a04      	ldr	r2, [sp, #16]
 8008236:	b9d8      	cbnz	r0, 8008270 <_vfiprintf_r+0x110>
 8008238:	06d1      	lsls	r1, r2, #27
 800823a:	bf44      	itt	mi
 800823c:	2320      	movmi	r3, #32
 800823e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008242:	0713      	lsls	r3, r2, #28
 8008244:	bf44      	itt	mi
 8008246:	232b      	movmi	r3, #43	; 0x2b
 8008248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800824c:	f89a 3000 	ldrb.w	r3, [sl]
 8008250:	2b2a      	cmp	r3, #42	; 0x2a
 8008252:	d015      	beq.n	8008280 <_vfiprintf_r+0x120>
 8008254:	4654      	mov	r4, sl
 8008256:	2000      	movs	r0, #0
 8008258:	f04f 0c0a 	mov.w	ip, #10
 800825c:	9a07      	ldr	r2, [sp, #28]
 800825e:	4621      	mov	r1, r4
 8008260:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008264:	3b30      	subs	r3, #48	; 0x30
 8008266:	2b09      	cmp	r3, #9
 8008268:	d94d      	bls.n	8008306 <_vfiprintf_r+0x1a6>
 800826a:	b1b0      	cbz	r0, 800829a <_vfiprintf_r+0x13a>
 800826c:	9207      	str	r2, [sp, #28]
 800826e:	e014      	b.n	800829a <_vfiprintf_r+0x13a>
 8008270:	eba0 0308 	sub.w	r3, r0, r8
 8008274:	fa09 f303 	lsl.w	r3, r9, r3
 8008278:	4313      	orrs	r3, r2
 800827a:	46a2      	mov	sl, r4
 800827c:	9304      	str	r3, [sp, #16]
 800827e:	e7d2      	b.n	8008226 <_vfiprintf_r+0xc6>
 8008280:	9b03      	ldr	r3, [sp, #12]
 8008282:	1d19      	adds	r1, r3, #4
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	9103      	str	r1, [sp, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	bfbb      	ittet	lt
 800828c:	425b      	neglt	r3, r3
 800828e:	f042 0202 	orrlt.w	r2, r2, #2
 8008292:	9307      	strge	r3, [sp, #28]
 8008294:	9307      	strlt	r3, [sp, #28]
 8008296:	bfb8      	it	lt
 8008298:	9204      	strlt	r2, [sp, #16]
 800829a:	7823      	ldrb	r3, [r4, #0]
 800829c:	2b2e      	cmp	r3, #46	; 0x2e
 800829e:	d10c      	bne.n	80082ba <_vfiprintf_r+0x15a>
 80082a0:	7863      	ldrb	r3, [r4, #1]
 80082a2:	2b2a      	cmp	r3, #42	; 0x2a
 80082a4:	d134      	bne.n	8008310 <_vfiprintf_r+0x1b0>
 80082a6:	9b03      	ldr	r3, [sp, #12]
 80082a8:	3402      	adds	r4, #2
 80082aa:	1d1a      	adds	r2, r3, #4
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	9203      	str	r2, [sp, #12]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	bfb8      	it	lt
 80082b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80082b8:	9305      	str	r3, [sp, #20]
 80082ba:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008384 <_vfiprintf_r+0x224>
 80082be:	2203      	movs	r2, #3
 80082c0:	4650      	mov	r0, sl
 80082c2:	7821      	ldrb	r1, [r4, #0]
 80082c4:	f7fe fce9 	bl	8006c9a <memchr>
 80082c8:	b138      	cbz	r0, 80082da <_vfiprintf_r+0x17a>
 80082ca:	2240      	movs	r2, #64	; 0x40
 80082cc:	9b04      	ldr	r3, [sp, #16]
 80082ce:	eba0 000a 	sub.w	r0, r0, sl
 80082d2:	4082      	lsls	r2, r0
 80082d4:	4313      	orrs	r3, r2
 80082d6:	3401      	adds	r4, #1
 80082d8:	9304      	str	r3, [sp, #16]
 80082da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082de:	2206      	movs	r2, #6
 80082e0:	4829      	ldr	r0, [pc, #164]	; (8008388 <_vfiprintf_r+0x228>)
 80082e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082e6:	f7fe fcd8 	bl	8006c9a <memchr>
 80082ea:	2800      	cmp	r0, #0
 80082ec:	d03f      	beq.n	800836e <_vfiprintf_r+0x20e>
 80082ee:	4b27      	ldr	r3, [pc, #156]	; (800838c <_vfiprintf_r+0x22c>)
 80082f0:	bb1b      	cbnz	r3, 800833a <_vfiprintf_r+0x1da>
 80082f2:	9b03      	ldr	r3, [sp, #12]
 80082f4:	3307      	adds	r3, #7
 80082f6:	f023 0307 	bic.w	r3, r3, #7
 80082fa:	3308      	adds	r3, #8
 80082fc:	9303      	str	r3, [sp, #12]
 80082fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008300:	443b      	add	r3, r7
 8008302:	9309      	str	r3, [sp, #36]	; 0x24
 8008304:	e768      	b.n	80081d8 <_vfiprintf_r+0x78>
 8008306:	460c      	mov	r4, r1
 8008308:	2001      	movs	r0, #1
 800830a:	fb0c 3202 	mla	r2, ip, r2, r3
 800830e:	e7a6      	b.n	800825e <_vfiprintf_r+0xfe>
 8008310:	2300      	movs	r3, #0
 8008312:	f04f 0c0a 	mov.w	ip, #10
 8008316:	4619      	mov	r1, r3
 8008318:	3401      	adds	r4, #1
 800831a:	9305      	str	r3, [sp, #20]
 800831c:	4620      	mov	r0, r4
 800831e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008322:	3a30      	subs	r2, #48	; 0x30
 8008324:	2a09      	cmp	r2, #9
 8008326:	d903      	bls.n	8008330 <_vfiprintf_r+0x1d0>
 8008328:	2b00      	cmp	r3, #0
 800832a:	d0c6      	beq.n	80082ba <_vfiprintf_r+0x15a>
 800832c:	9105      	str	r1, [sp, #20]
 800832e:	e7c4      	b.n	80082ba <_vfiprintf_r+0x15a>
 8008330:	4604      	mov	r4, r0
 8008332:	2301      	movs	r3, #1
 8008334:	fb0c 2101 	mla	r1, ip, r1, r2
 8008338:	e7f0      	b.n	800831c <_vfiprintf_r+0x1bc>
 800833a:	ab03      	add	r3, sp, #12
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	462a      	mov	r2, r5
 8008340:	4630      	mov	r0, r6
 8008342:	4b13      	ldr	r3, [pc, #76]	; (8008390 <_vfiprintf_r+0x230>)
 8008344:	a904      	add	r1, sp, #16
 8008346:	f7fd ff3f 	bl	80061c8 <_printf_float>
 800834a:	4607      	mov	r7, r0
 800834c:	1c78      	adds	r0, r7, #1
 800834e:	d1d6      	bne.n	80082fe <_vfiprintf_r+0x19e>
 8008350:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008352:	07d9      	lsls	r1, r3, #31
 8008354:	d405      	bmi.n	8008362 <_vfiprintf_r+0x202>
 8008356:	89ab      	ldrh	r3, [r5, #12]
 8008358:	059a      	lsls	r2, r3, #22
 800835a:	d402      	bmi.n	8008362 <_vfiprintf_r+0x202>
 800835c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800835e:	f7fe fc9b 	bl	8006c98 <__retarget_lock_release_recursive>
 8008362:	89ab      	ldrh	r3, [r5, #12]
 8008364:	065b      	lsls	r3, r3, #25
 8008366:	f53f af1d 	bmi.w	80081a4 <_vfiprintf_r+0x44>
 800836a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800836c:	e71c      	b.n	80081a8 <_vfiprintf_r+0x48>
 800836e:	ab03      	add	r3, sp, #12
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	462a      	mov	r2, r5
 8008374:	4630      	mov	r0, r6
 8008376:	4b06      	ldr	r3, [pc, #24]	; (8008390 <_vfiprintf_r+0x230>)
 8008378:	a904      	add	r1, sp, #16
 800837a:	f7fe f9c5 	bl	8006708 <_printf_i>
 800837e:	e7e4      	b.n	800834a <_vfiprintf_r+0x1ea>
 8008380:	08009304 	.word	0x08009304
 8008384:	0800930a 	.word	0x0800930a
 8008388:	0800930e 	.word	0x0800930e
 800838c:	080061c9 	.word	0x080061c9
 8008390:	0800813b 	.word	0x0800813b

08008394 <__sflush_r>:
 8008394:	898a      	ldrh	r2, [r1, #12]
 8008396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008398:	4605      	mov	r5, r0
 800839a:	0710      	lsls	r0, r2, #28
 800839c:	460c      	mov	r4, r1
 800839e:	d457      	bmi.n	8008450 <__sflush_r+0xbc>
 80083a0:	684b      	ldr	r3, [r1, #4]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	dc04      	bgt.n	80083b0 <__sflush_r+0x1c>
 80083a6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	dc01      	bgt.n	80083b0 <__sflush_r+0x1c>
 80083ac:	2000      	movs	r0, #0
 80083ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083b2:	2e00      	cmp	r6, #0
 80083b4:	d0fa      	beq.n	80083ac <__sflush_r+0x18>
 80083b6:	2300      	movs	r3, #0
 80083b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80083bc:	682f      	ldr	r7, [r5, #0]
 80083be:	6a21      	ldr	r1, [r4, #32]
 80083c0:	602b      	str	r3, [r5, #0]
 80083c2:	d032      	beq.n	800842a <__sflush_r+0x96>
 80083c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80083c6:	89a3      	ldrh	r3, [r4, #12]
 80083c8:	075a      	lsls	r2, r3, #29
 80083ca:	d505      	bpl.n	80083d8 <__sflush_r+0x44>
 80083cc:	6863      	ldr	r3, [r4, #4]
 80083ce:	1ac0      	subs	r0, r0, r3
 80083d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80083d2:	b10b      	cbz	r3, 80083d8 <__sflush_r+0x44>
 80083d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083d6:	1ac0      	subs	r0, r0, r3
 80083d8:	2300      	movs	r3, #0
 80083da:	4602      	mov	r2, r0
 80083dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083de:	4628      	mov	r0, r5
 80083e0:	6a21      	ldr	r1, [r4, #32]
 80083e2:	47b0      	blx	r6
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	89a3      	ldrh	r3, [r4, #12]
 80083e8:	d106      	bne.n	80083f8 <__sflush_r+0x64>
 80083ea:	6829      	ldr	r1, [r5, #0]
 80083ec:	291d      	cmp	r1, #29
 80083ee:	d82b      	bhi.n	8008448 <__sflush_r+0xb4>
 80083f0:	4a28      	ldr	r2, [pc, #160]	; (8008494 <__sflush_r+0x100>)
 80083f2:	410a      	asrs	r2, r1
 80083f4:	07d6      	lsls	r6, r2, #31
 80083f6:	d427      	bmi.n	8008448 <__sflush_r+0xb4>
 80083f8:	2200      	movs	r2, #0
 80083fa:	6062      	str	r2, [r4, #4]
 80083fc:	6922      	ldr	r2, [r4, #16]
 80083fe:	04d9      	lsls	r1, r3, #19
 8008400:	6022      	str	r2, [r4, #0]
 8008402:	d504      	bpl.n	800840e <__sflush_r+0x7a>
 8008404:	1c42      	adds	r2, r0, #1
 8008406:	d101      	bne.n	800840c <__sflush_r+0x78>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	b903      	cbnz	r3, 800840e <__sflush_r+0x7a>
 800840c:	6560      	str	r0, [r4, #84]	; 0x54
 800840e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008410:	602f      	str	r7, [r5, #0]
 8008412:	2900      	cmp	r1, #0
 8008414:	d0ca      	beq.n	80083ac <__sflush_r+0x18>
 8008416:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800841a:	4299      	cmp	r1, r3
 800841c:	d002      	beq.n	8008424 <__sflush_r+0x90>
 800841e:	4628      	mov	r0, r5
 8008420:	f7ff fab6 	bl	8007990 <_free_r>
 8008424:	2000      	movs	r0, #0
 8008426:	6360      	str	r0, [r4, #52]	; 0x34
 8008428:	e7c1      	b.n	80083ae <__sflush_r+0x1a>
 800842a:	2301      	movs	r3, #1
 800842c:	4628      	mov	r0, r5
 800842e:	47b0      	blx	r6
 8008430:	1c41      	adds	r1, r0, #1
 8008432:	d1c8      	bne.n	80083c6 <__sflush_r+0x32>
 8008434:	682b      	ldr	r3, [r5, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d0c5      	beq.n	80083c6 <__sflush_r+0x32>
 800843a:	2b1d      	cmp	r3, #29
 800843c:	d001      	beq.n	8008442 <__sflush_r+0xae>
 800843e:	2b16      	cmp	r3, #22
 8008440:	d101      	bne.n	8008446 <__sflush_r+0xb2>
 8008442:	602f      	str	r7, [r5, #0]
 8008444:	e7b2      	b.n	80083ac <__sflush_r+0x18>
 8008446:	89a3      	ldrh	r3, [r4, #12]
 8008448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800844c:	81a3      	strh	r3, [r4, #12]
 800844e:	e7ae      	b.n	80083ae <__sflush_r+0x1a>
 8008450:	690f      	ldr	r7, [r1, #16]
 8008452:	2f00      	cmp	r7, #0
 8008454:	d0aa      	beq.n	80083ac <__sflush_r+0x18>
 8008456:	0793      	lsls	r3, r2, #30
 8008458:	bf18      	it	ne
 800845a:	2300      	movne	r3, #0
 800845c:	680e      	ldr	r6, [r1, #0]
 800845e:	bf08      	it	eq
 8008460:	694b      	ldreq	r3, [r1, #20]
 8008462:	1bf6      	subs	r6, r6, r7
 8008464:	600f      	str	r7, [r1, #0]
 8008466:	608b      	str	r3, [r1, #8]
 8008468:	2e00      	cmp	r6, #0
 800846a:	dd9f      	ble.n	80083ac <__sflush_r+0x18>
 800846c:	4633      	mov	r3, r6
 800846e:	463a      	mov	r2, r7
 8008470:	4628      	mov	r0, r5
 8008472:	6a21      	ldr	r1, [r4, #32]
 8008474:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008478:	47e0      	blx	ip
 800847a:	2800      	cmp	r0, #0
 800847c:	dc06      	bgt.n	800848c <__sflush_r+0xf8>
 800847e:	89a3      	ldrh	r3, [r4, #12]
 8008480:	f04f 30ff 	mov.w	r0, #4294967295
 8008484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008488:	81a3      	strh	r3, [r4, #12]
 800848a:	e790      	b.n	80083ae <__sflush_r+0x1a>
 800848c:	4407      	add	r7, r0
 800848e:	1a36      	subs	r6, r6, r0
 8008490:	e7ea      	b.n	8008468 <__sflush_r+0xd4>
 8008492:	bf00      	nop
 8008494:	dfbffffe 	.word	0xdfbffffe

08008498 <_fflush_r>:
 8008498:	b538      	push	{r3, r4, r5, lr}
 800849a:	690b      	ldr	r3, [r1, #16]
 800849c:	4605      	mov	r5, r0
 800849e:	460c      	mov	r4, r1
 80084a0:	b913      	cbnz	r3, 80084a8 <_fflush_r+0x10>
 80084a2:	2500      	movs	r5, #0
 80084a4:	4628      	mov	r0, r5
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	b118      	cbz	r0, 80084b2 <_fflush_r+0x1a>
 80084aa:	6a03      	ldr	r3, [r0, #32]
 80084ac:	b90b      	cbnz	r3, 80084b2 <_fflush_r+0x1a>
 80084ae:	f7fe fad9 	bl	8006a64 <__sinit>
 80084b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d0f3      	beq.n	80084a2 <_fflush_r+0xa>
 80084ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80084bc:	07d0      	lsls	r0, r2, #31
 80084be:	d404      	bmi.n	80084ca <_fflush_r+0x32>
 80084c0:	0599      	lsls	r1, r3, #22
 80084c2:	d402      	bmi.n	80084ca <_fflush_r+0x32>
 80084c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084c6:	f7fe fbe6 	bl	8006c96 <__retarget_lock_acquire_recursive>
 80084ca:	4628      	mov	r0, r5
 80084cc:	4621      	mov	r1, r4
 80084ce:	f7ff ff61 	bl	8008394 <__sflush_r>
 80084d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084d4:	4605      	mov	r5, r0
 80084d6:	07da      	lsls	r2, r3, #31
 80084d8:	d4e4      	bmi.n	80084a4 <_fflush_r+0xc>
 80084da:	89a3      	ldrh	r3, [r4, #12]
 80084dc:	059b      	lsls	r3, r3, #22
 80084de:	d4e1      	bmi.n	80084a4 <_fflush_r+0xc>
 80084e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084e2:	f7fe fbd9 	bl	8006c98 <__retarget_lock_release_recursive>
 80084e6:	e7dd      	b.n	80084a4 <_fflush_r+0xc>

080084e8 <__swbuf_r>:
 80084e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ea:	460e      	mov	r6, r1
 80084ec:	4614      	mov	r4, r2
 80084ee:	4605      	mov	r5, r0
 80084f0:	b118      	cbz	r0, 80084fa <__swbuf_r+0x12>
 80084f2:	6a03      	ldr	r3, [r0, #32]
 80084f4:	b90b      	cbnz	r3, 80084fa <__swbuf_r+0x12>
 80084f6:	f7fe fab5 	bl	8006a64 <__sinit>
 80084fa:	69a3      	ldr	r3, [r4, #24]
 80084fc:	60a3      	str	r3, [r4, #8]
 80084fe:	89a3      	ldrh	r3, [r4, #12]
 8008500:	071a      	lsls	r2, r3, #28
 8008502:	d525      	bpl.n	8008550 <__swbuf_r+0x68>
 8008504:	6923      	ldr	r3, [r4, #16]
 8008506:	b31b      	cbz	r3, 8008550 <__swbuf_r+0x68>
 8008508:	6823      	ldr	r3, [r4, #0]
 800850a:	6922      	ldr	r2, [r4, #16]
 800850c:	b2f6      	uxtb	r6, r6
 800850e:	1a98      	subs	r0, r3, r2
 8008510:	6963      	ldr	r3, [r4, #20]
 8008512:	4637      	mov	r7, r6
 8008514:	4283      	cmp	r3, r0
 8008516:	dc04      	bgt.n	8008522 <__swbuf_r+0x3a>
 8008518:	4621      	mov	r1, r4
 800851a:	4628      	mov	r0, r5
 800851c:	f7ff ffbc 	bl	8008498 <_fflush_r>
 8008520:	b9e0      	cbnz	r0, 800855c <__swbuf_r+0x74>
 8008522:	68a3      	ldr	r3, [r4, #8]
 8008524:	3b01      	subs	r3, #1
 8008526:	60a3      	str	r3, [r4, #8]
 8008528:	6823      	ldr	r3, [r4, #0]
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	6022      	str	r2, [r4, #0]
 800852e:	701e      	strb	r6, [r3, #0]
 8008530:	6962      	ldr	r2, [r4, #20]
 8008532:	1c43      	adds	r3, r0, #1
 8008534:	429a      	cmp	r2, r3
 8008536:	d004      	beq.n	8008542 <__swbuf_r+0x5a>
 8008538:	89a3      	ldrh	r3, [r4, #12]
 800853a:	07db      	lsls	r3, r3, #31
 800853c:	d506      	bpl.n	800854c <__swbuf_r+0x64>
 800853e:	2e0a      	cmp	r6, #10
 8008540:	d104      	bne.n	800854c <__swbuf_r+0x64>
 8008542:	4621      	mov	r1, r4
 8008544:	4628      	mov	r0, r5
 8008546:	f7ff ffa7 	bl	8008498 <_fflush_r>
 800854a:	b938      	cbnz	r0, 800855c <__swbuf_r+0x74>
 800854c:	4638      	mov	r0, r7
 800854e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008550:	4621      	mov	r1, r4
 8008552:	4628      	mov	r0, r5
 8008554:	f000 f806 	bl	8008564 <__swsetup_r>
 8008558:	2800      	cmp	r0, #0
 800855a:	d0d5      	beq.n	8008508 <__swbuf_r+0x20>
 800855c:	f04f 37ff 	mov.w	r7, #4294967295
 8008560:	e7f4      	b.n	800854c <__swbuf_r+0x64>
	...

08008564 <__swsetup_r>:
 8008564:	b538      	push	{r3, r4, r5, lr}
 8008566:	4b2a      	ldr	r3, [pc, #168]	; (8008610 <__swsetup_r+0xac>)
 8008568:	4605      	mov	r5, r0
 800856a:	6818      	ldr	r0, [r3, #0]
 800856c:	460c      	mov	r4, r1
 800856e:	b118      	cbz	r0, 8008578 <__swsetup_r+0x14>
 8008570:	6a03      	ldr	r3, [r0, #32]
 8008572:	b90b      	cbnz	r3, 8008578 <__swsetup_r+0x14>
 8008574:	f7fe fa76 	bl	8006a64 <__sinit>
 8008578:	89a3      	ldrh	r3, [r4, #12]
 800857a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800857e:	0718      	lsls	r0, r3, #28
 8008580:	d422      	bmi.n	80085c8 <__swsetup_r+0x64>
 8008582:	06d9      	lsls	r1, r3, #27
 8008584:	d407      	bmi.n	8008596 <__swsetup_r+0x32>
 8008586:	2309      	movs	r3, #9
 8008588:	602b      	str	r3, [r5, #0]
 800858a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800858e:	f04f 30ff 	mov.w	r0, #4294967295
 8008592:	81a3      	strh	r3, [r4, #12]
 8008594:	e034      	b.n	8008600 <__swsetup_r+0x9c>
 8008596:	0758      	lsls	r0, r3, #29
 8008598:	d512      	bpl.n	80085c0 <__swsetup_r+0x5c>
 800859a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800859c:	b141      	cbz	r1, 80085b0 <__swsetup_r+0x4c>
 800859e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085a2:	4299      	cmp	r1, r3
 80085a4:	d002      	beq.n	80085ac <__swsetup_r+0x48>
 80085a6:	4628      	mov	r0, r5
 80085a8:	f7ff f9f2 	bl	8007990 <_free_r>
 80085ac:	2300      	movs	r3, #0
 80085ae:	6363      	str	r3, [r4, #52]	; 0x34
 80085b0:	89a3      	ldrh	r3, [r4, #12]
 80085b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085b6:	81a3      	strh	r3, [r4, #12]
 80085b8:	2300      	movs	r3, #0
 80085ba:	6063      	str	r3, [r4, #4]
 80085bc:	6923      	ldr	r3, [r4, #16]
 80085be:	6023      	str	r3, [r4, #0]
 80085c0:	89a3      	ldrh	r3, [r4, #12]
 80085c2:	f043 0308 	orr.w	r3, r3, #8
 80085c6:	81a3      	strh	r3, [r4, #12]
 80085c8:	6923      	ldr	r3, [r4, #16]
 80085ca:	b94b      	cbnz	r3, 80085e0 <__swsetup_r+0x7c>
 80085cc:	89a3      	ldrh	r3, [r4, #12]
 80085ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085d6:	d003      	beq.n	80085e0 <__swsetup_r+0x7c>
 80085d8:	4621      	mov	r1, r4
 80085da:	4628      	mov	r0, r5
 80085dc:	f000 f8b1 	bl	8008742 <__smakebuf_r>
 80085e0:	89a0      	ldrh	r0, [r4, #12]
 80085e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085e6:	f010 0301 	ands.w	r3, r0, #1
 80085ea:	d00a      	beq.n	8008602 <__swsetup_r+0x9e>
 80085ec:	2300      	movs	r3, #0
 80085ee:	60a3      	str	r3, [r4, #8]
 80085f0:	6963      	ldr	r3, [r4, #20]
 80085f2:	425b      	negs	r3, r3
 80085f4:	61a3      	str	r3, [r4, #24]
 80085f6:	6923      	ldr	r3, [r4, #16]
 80085f8:	b943      	cbnz	r3, 800860c <__swsetup_r+0xa8>
 80085fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80085fe:	d1c4      	bne.n	800858a <__swsetup_r+0x26>
 8008600:	bd38      	pop	{r3, r4, r5, pc}
 8008602:	0781      	lsls	r1, r0, #30
 8008604:	bf58      	it	pl
 8008606:	6963      	ldrpl	r3, [r4, #20]
 8008608:	60a3      	str	r3, [r4, #8]
 800860a:	e7f4      	b.n	80085f6 <__swsetup_r+0x92>
 800860c:	2000      	movs	r0, #0
 800860e:	e7f7      	b.n	8008600 <__swsetup_r+0x9c>
 8008610:	200000c8 	.word	0x200000c8

08008614 <memcpy>:
 8008614:	440a      	add	r2, r1
 8008616:	4291      	cmp	r1, r2
 8008618:	f100 33ff 	add.w	r3, r0, #4294967295
 800861c:	d100      	bne.n	8008620 <memcpy+0xc>
 800861e:	4770      	bx	lr
 8008620:	b510      	push	{r4, lr}
 8008622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008626:	4291      	cmp	r1, r2
 8008628:	f803 4f01 	strb.w	r4, [r3, #1]!
 800862c:	d1f9      	bne.n	8008622 <memcpy+0xe>
 800862e:	bd10      	pop	{r4, pc}

08008630 <__assert_func>:
 8008630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008632:	4614      	mov	r4, r2
 8008634:	461a      	mov	r2, r3
 8008636:	4b09      	ldr	r3, [pc, #36]	; (800865c <__assert_func+0x2c>)
 8008638:	4605      	mov	r5, r0
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68d8      	ldr	r0, [r3, #12]
 800863e:	b14c      	cbz	r4, 8008654 <__assert_func+0x24>
 8008640:	4b07      	ldr	r3, [pc, #28]	; (8008660 <__assert_func+0x30>)
 8008642:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008646:	9100      	str	r1, [sp, #0]
 8008648:	462b      	mov	r3, r5
 800864a:	4906      	ldr	r1, [pc, #24]	; (8008664 <__assert_func+0x34>)
 800864c:	f000 f842 	bl	80086d4 <fiprintf>
 8008650:	f000 f8d6 	bl	8008800 <abort>
 8008654:	4b04      	ldr	r3, [pc, #16]	; (8008668 <__assert_func+0x38>)
 8008656:	461c      	mov	r4, r3
 8008658:	e7f3      	b.n	8008642 <__assert_func+0x12>
 800865a:	bf00      	nop
 800865c:	200000c8 	.word	0x200000c8
 8008660:	0800931f 	.word	0x0800931f
 8008664:	0800932c 	.word	0x0800932c
 8008668:	0800935a 	.word	0x0800935a

0800866c <_calloc_r>:
 800866c:	b570      	push	{r4, r5, r6, lr}
 800866e:	fba1 5402 	umull	r5, r4, r1, r2
 8008672:	b934      	cbnz	r4, 8008682 <_calloc_r+0x16>
 8008674:	4629      	mov	r1, r5
 8008676:	f7fd fc7f 	bl	8005f78 <_malloc_r>
 800867a:	4606      	mov	r6, r0
 800867c:	b928      	cbnz	r0, 800868a <_calloc_r+0x1e>
 800867e:	4630      	mov	r0, r6
 8008680:	bd70      	pop	{r4, r5, r6, pc}
 8008682:	220c      	movs	r2, #12
 8008684:	2600      	movs	r6, #0
 8008686:	6002      	str	r2, [r0, #0]
 8008688:	e7f9      	b.n	800867e <_calloc_r+0x12>
 800868a:	462a      	mov	r2, r5
 800868c:	4621      	mov	r1, r4
 800868e:	f7fe fa74 	bl	8006b7a <memset>
 8008692:	e7f4      	b.n	800867e <_calloc_r+0x12>

08008694 <__ascii_mbtowc>:
 8008694:	b082      	sub	sp, #8
 8008696:	b901      	cbnz	r1, 800869a <__ascii_mbtowc+0x6>
 8008698:	a901      	add	r1, sp, #4
 800869a:	b142      	cbz	r2, 80086ae <__ascii_mbtowc+0x1a>
 800869c:	b14b      	cbz	r3, 80086b2 <__ascii_mbtowc+0x1e>
 800869e:	7813      	ldrb	r3, [r2, #0]
 80086a0:	600b      	str	r3, [r1, #0]
 80086a2:	7812      	ldrb	r2, [r2, #0]
 80086a4:	1e10      	subs	r0, r2, #0
 80086a6:	bf18      	it	ne
 80086a8:	2001      	movne	r0, #1
 80086aa:	b002      	add	sp, #8
 80086ac:	4770      	bx	lr
 80086ae:	4610      	mov	r0, r2
 80086b0:	e7fb      	b.n	80086aa <__ascii_mbtowc+0x16>
 80086b2:	f06f 0001 	mvn.w	r0, #1
 80086b6:	e7f8      	b.n	80086aa <__ascii_mbtowc+0x16>

080086b8 <__ascii_wctomb>:
 80086b8:	4603      	mov	r3, r0
 80086ba:	4608      	mov	r0, r1
 80086bc:	b141      	cbz	r1, 80086d0 <__ascii_wctomb+0x18>
 80086be:	2aff      	cmp	r2, #255	; 0xff
 80086c0:	d904      	bls.n	80086cc <__ascii_wctomb+0x14>
 80086c2:	228a      	movs	r2, #138	; 0x8a
 80086c4:	f04f 30ff 	mov.w	r0, #4294967295
 80086c8:	601a      	str	r2, [r3, #0]
 80086ca:	4770      	bx	lr
 80086cc:	2001      	movs	r0, #1
 80086ce:	700a      	strb	r2, [r1, #0]
 80086d0:	4770      	bx	lr
	...

080086d4 <fiprintf>:
 80086d4:	b40e      	push	{r1, r2, r3}
 80086d6:	b503      	push	{r0, r1, lr}
 80086d8:	4601      	mov	r1, r0
 80086da:	ab03      	add	r3, sp, #12
 80086dc:	4805      	ldr	r0, [pc, #20]	; (80086f4 <fiprintf+0x20>)
 80086de:	f853 2b04 	ldr.w	r2, [r3], #4
 80086e2:	6800      	ldr	r0, [r0, #0]
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	f7ff fd3b 	bl	8008160 <_vfiprintf_r>
 80086ea:	b002      	add	sp, #8
 80086ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80086f0:	b003      	add	sp, #12
 80086f2:	4770      	bx	lr
 80086f4:	200000c8 	.word	0x200000c8

080086f8 <__swhatbuf_r>:
 80086f8:	b570      	push	{r4, r5, r6, lr}
 80086fa:	460c      	mov	r4, r1
 80086fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008700:	4615      	mov	r5, r2
 8008702:	2900      	cmp	r1, #0
 8008704:	461e      	mov	r6, r3
 8008706:	b096      	sub	sp, #88	; 0x58
 8008708:	da0c      	bge.n	8008724 <__swhatbuf_r+0x2c>
 800870a:	89a3      	ldrh	r3, [r4, #12]
 800870c:	2100      	movs	r1, #0
 800870e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008712:	bf0c      	ite	eq
 8008714:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008718:	2340      	movne	r3, #64	; 0x40
 800871a:	2000      	movs	r0, #0
 800871c:	6031      	str	r1, [r6, #0]
 800871e:	602b      	str	r3, [r5, #0]
 8008720:	b016      	add	sp, #88	; 0x58
 8008722:	bd70      	pop	{r4, r5, r6, pc}
 8008724:	466a      	mov	r2, sp
 8008726:	f000 f849 	bl	80087bc <_fstat_r>
 800872a:	2800      	cmp	r0, #0
 800872c:	dbed      	blt.n	800870a <__swhatbuf_r+0x12>
 800872e:	9901      	ldr	r1, [sp, #4]
 8008730:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008734:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008738:	4259      	negs	r1, r3
 800873a:	4159      	adcs	r1, r3
 800873c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008740:	e7eb      	b.n	800871a <__swhatbuf_r+0x22>

08008742 <__smakebuf_r>:
 8008742:	898b      	ldrh	r3, [r1, #12]
 8008744:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008746:	079d      	lsls	r5, r3, #30
 8008748:	4606      	mov	r6, r0
 800874a:	460c      	mov	r4, r1
 800874c:	d507      	bpl.n	800875e <__smakebuf_r+0x1c>
 800874e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008752:	6023      	str	r3, [r4, #0]
 8008754:	6123      	str	r3, [r4, #16]
 8008756:	2301      	movs	r3, #1
 8008758:	6163      	str	r3, [r4, #20]
 800875a:	b002      	add	sp, #8
 800875c:	bd70      	pop	{r4, r5, r6, pc}
 800875e:	466a      	mov	r2, sp
 8008760:	ab01      	add	r3, sp, #4
 8008762:	f7ff ffc9 	bl	80086f8 <__swhatbuf_r>
 8008766:	9900      	ldr	r1, [sp, #0]
 8008768:	4605      	mov	r5, r0
 800876a:	4630      	mov	r0, r6
 800876c:	f7fd fc04 	bl	8005f78 <_malloc_r>
 8008770:	b948      	cbnz	r0, 8008786 <__smakebuf_r+0x44>
 8008772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008776:	059a      	lsls	r2, r3, #22
 8008778:	d4ef      	bmi.n	800875a <__smakebuf_r+0x18>
 800877a:	f023 0303 	bic.w	r3, r3, #3
 800877e:	f043 0302 	orr.w	r3, r3, #2
 8008782:	81a3      	strh	r3, [r4, #12]
 8008784:	e7e3      	b.n	800874e <__smakebuf_r+0xc>
 8008786:	89a3      	ldrh	r3, [r4, #12]
 8008788:	6020      	str	r0, [r4, #0]
 800878a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800878e:	81a3      	strh	r3, [r4, #12]
 8008790:	9b00      	ldr	r3, [sp, #0]
 8008792:	6120      	str	r0, [r4, #16]
 8008794:	6163      	str	r3, [r4, #20]
 8008796:	9b01      	ldr	r3, [sp, #4]
 8008798:	b15b      	cbz	r3, 80087b2 <__smakebuf_r+0x70>
 800879a:	4630      	mov	r0, r6
 800879c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087a0:	f000 f81e 	bl	80087e0 <_isatty_r>
 80087a4:	b128      	cbz	r0, 80087b2 <__smakebuf_r+0x70>
 80087a6:	89a3      	ldrh	r3, [r4, #12]
 80087a8:	f023 0303 	bic.w	r3, r3, #3
 80087ac:	f043 0301 	orr.w	r3, r3, #1
 80087b0:	81a3      	strh	r3, [r4, #12]
 80087b2:	89a3      	ldrh	r3, [r4, #12]
 80087b4:	431d      	orrs	r5, r3
 80087b6:	81a5      	strh	r5, [r4, #12]
 80087b8:	e7cf      	b.n	800875a <__smakebuf_r+0x18>
	...

080087bc <_fstat_r>:
 80087bc:	b538      	push	{r3, r4, r5, lr}
 80087be:	2300      	movs	r3, #0
 80087c0:	4d06      	ldr	r5, [pc, #24]	; (80087dc <_fstat_r+0x20>)
 80087c2:	4604      	mov	r4, r0
 80087c4:	4608      	mov	r0, r1
 80087c6:	4611      	mov	r1, r2
 80087c8:	602b      	str	r3, [r5, #0]
 80087ca:	f7f9 ff50 	bl	800266e <_fstat>
 80087ce:	1c43      	adds	r3, r0, #1
 80087d0:	d102      	bne.n	80087d8 <_fstat_r+0x1c>
 80087d2:	682b      	ldr	r3, [r5, #0]
 80087d4:	b103      	cbz	r3, 80087d8 <_fstat_r+0x1c>
 80087d6:	6023      	str	r3, [r4, #0]
 80087d8:	bd38      	pop	{r3, r4, r5, pc}
 80087da:	bf00      	nop
 80087dc:	20000a30 	.word	0x20000a30

080087e0 <_isatty_r>:
 80087e0:	b538      	push	{r3, r4, r5, lr}
 80087e2:	2300      	movs	r3, #0
 80087e4:	4d05      	ldr	r5, [pc, #20]	; (80087fc <_isatty_r+0x1c>)
 80087e6:	4604      	mov	r4, r0
 80087e8:	4608      	mov	r0, r1
 80087ea:	602b      	str	r3, [r5, #0]
 80087ec:	f7f9 ff4e 	bl	800268c <_isatty>
 80087f0:	1c43      	adds	r3, r0, #1
 80087f2:	d102      	bne.n	80087fa <_isatty_r+0x1a>
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	b103      	cbz	r3, 80087fa <_isatty_r+0x1a>
 80087f8:	6023      	str	r3, [r4, #0]
 80087fa:	bd38      	pop	{r3, r4, r5, pc}
 80087fc:	20000a30 	.word	0x20000a30

08008800 <abort>:
 8008800:	2006      	movs	r0, #6
 8008802:	b508      	push	{r3, lr}
 8008804:	f000 f82c 	bl	8008860 <raise>
 8008808:	2001      	movs	r0, #1
 800880a:	f7f9 fee2 	bl	80025d2 <_exit>

0800880e <_raise_r>:
 800880e:	291f      	cmp	r1, #31
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4604      	mov	r4, r0
 8008814:	460d      	mov	r5, r1
 8008816:	d904      	bls.n	8008822 <_raise_r+0x14>
 8008818:	2316      	movs	r3, #22
 800881a:	6003      	str	r3, [r0, #0]
 800881c:	f04f 30ff 	mov.w	r0, #4294967295
 8008820:	bd38      	pop	{r3, r4, r5, pc}
 8008822:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008824:	b112      	cbz	r2, 800882c <_raise_r+0x1e>
 8008826:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800882a:	b94b      	cbnz	r3, 8008840 <_raise_r+0x32>
 800882c:	4620      	mov	r0, r4
 800882e:	f000 f831 	bl	8008894 <_getpid_r>
 8008832:	462a      	mov	r2, r5
 8008834:	4601      	mov	r1, r0
 8008836:	4620      	mov	r0, r4
 8008838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800883c:	f000 b818 	b.w	8008870 <_kill_r>
 8008840:	2b01      	cmp	r3, #1
 8008842:	d00a      	beq.n	800885a <_raise_r+0x4c>
 8008844:	1c59      	adds	r1, r3, #1
 8008846:	d103      	bne.n	8008850 <_raise_r+0x42>
 8008848:	2316      	movs	r3, #22
 800884a:	6003      	str	r3, [r0, #0]
 800884c:	2001      	movs	r0, #1
 800884e:	e7e7      	b.n	8008820 <_raise_r+0x12>
 8008850:	2400      	movs	r4, #0
 8008852:	4628      	mov	r0, r5
 8008854:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008858:	4798      	blx	r3
 800885a:	2000      	movs	r0, #0
 800885c:	e7e0      	b.n	8008820 <_raise_r+0x12>
	...

08008860 <raise>:
 8008860:	4b02      	ldr	r3, [pc, #8]	; (800886c <raise+0xc>)
 8008862:	4601      	mov	r1, r0
 8008864:	6818      	ldr	r0, [r3, #0]
 8008866:	f7ff bfd2 	b.w	800880e <_raise_r>
 800886a:	bf00      	nop
 800886c:	200000c8 	.word	0x200000c8

08008870 <_kill_r>:
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	2300      	movs	r3, #0
 8008874:	4d06      	ldr	r5, [pc, #24]	; (8008890 <_kill_r+0x20>)
 8008876:	4604      	mov	r4, r0
 8008878:	4608      	mov	r0, r1
 800887a:	4611      	mov	r1, r2
 800887c:	602b      	str	r3, [r5, #0]
 800887e:	f7f9 fe98 	bl	80025b2 <_kill>
 8008882:	1c43      	adds	r3, r0, #1
 8008884:	d102      	bne.n	800888c <_kill_r+0x1c>
 8008886:	682b      	ldr	r3, [r5, #0]
 8008888:	b103      	cbz	r3, 800888c <_kill_r+0x1c>
 800888a:	6023      	str	r3, [r4, #0]
 800888c:	bd38      	pop	{r3, r4, r5, pc}
 800888e:	bf00      	nop
 8008890:	20000a30 	.word	0x20000a30

08008894 <_getpid_r>:
 8008894:	f7f9 be86 	b.w	80025a4 <_getpid>

08008898 <log>:
 8008898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889a:	4604      	mov	r4, r0
 800889c:	460d      	mov	r5, r1
 800889e:	f000 f833 	bl	8008908 <__ieee754_log>
 80088a2:	4622      	mov	r2, r4
 80088a4:	4606      	mov	r6, r0
 80088a6:	460f      	mov	r7, r1
 80088a8:	462b      	mov	r3, r5
 80088aa:	4620      	mov	r0, r4
 80088ac:	4629      	mov	r1, r5
 80088ae:	f7f8 f8e9 	bl	8000a84 <__aeabi_dcmpun>
 80088b2:	b998      	cbnz	r0, 80088dc <log+0x44>
 80088b4:	2200      	movs	r2, #0
 80088b6:	2300      	movs	r3, #0
 80088b8:	4620      	mov	r0, r4
 80088ba:	4629      	mov	r1, r5
 80088bc:	f7f8 f8d8 	bl	8000a70 <__aeabi_dcmpgt>
 80088c0:	b960      	cbnz	r0, 80088dc <log+0x44>
 80088c2:	2200      	movs	r2, #0
 80088c4:	2300      	movs	r3, #0
 80088c6:	4620      	mov	r0, r4
 80088c8:	4629      	mov	r1, r5
 80088ca:	f7f8 f8a9 	bl	8000a20 <__aeabi_dcmpeq>
 80088ce:	b140      	cbz	r0, 80088e2 <log+0x4a>
 80088d0:	f7fe f9b6 	bl	8006c40 <__errno>
 80088d4:	2322      	movs	r3, #34	; 0x22
 80088d6:	2600      	movs	r6, #0
 80088d8:	4f06      	ldr	r7, [pc, #24]	; (80088f4 <log+0x5c>)
 80088da:	6003      	str	r3, [r0, #0]
 80088dc:	4630      	mov	r0, r6
 80088de:	4639      	mov	r1, r7
 80088e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088e2:	f7fe f9ad 	bl	8006c40 <__errno>
 80088e6:	2321      	movs	r3, #33	; 0x21
 80088e8:	6003      	str	r3, [r0, #0]
 80088ea:	4803      	ldr	r0, [pc, #12]	; (80088f8 <log+0x60>)
 80088ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80088f0:	f000 b804 	b.w	80088fc <nan>
 80088f4:	fff00000 	.word	0xfff00000
 80088f8:	0800935a 	.word	0x0800935a

080088fc <nan>:
 80088fc:	2000      	movs	r0, #0
 80088fe:	4901      	ldr	r1, [pc, #4]	; (8008904 <nan+0x8>)
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	7ff80000 	.word	0x7ff80000

08008908 <__ieee754_log>:
 8008908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800890c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008910:	4602      	mov	r2, r0
 8008912:	460b      	mov	r3, r1
 8008914:	460d      	mov	r5, r1
 8008916:	b087      	sub	sp, #28
 8008918:	da24      	bge.n	8008964 <__ieee754_log+0x5c>
 800891a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800891e:	4304      	orrs	r4, r0
 8008920:	d108      	bne.n	8008934 <__ieee754_log+0x2c>
 8008922:	2200      	movs	r2, #0
 8008924:	2300      	movs	r3, #0
 8008926:	2000      	movs	r0, #0
 8008928:	49cb      	ldr	r1, [pc, #812]	; (8008c58 <__ieee754_log+0x350>)
 800892a:	f7f7 ff3b 	bl	80007a4 <__aeabi_ddiv>
 800892e:	b007      	add	sp, #28
 8008930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008934:	2900      	cmp	r1, #0
 8008936:	da04      	bge.n	8008942 <__ieee754_log+0x3a>
 8008938:	f7f7 fc52 	bl	80001e0 <__aeabi_dsub>
 800893c:	2200      	movs	r2, #0
 800893e:	2300      	movs	r3, #0
 8008940:	e7f3      	b.n	800892a <__ieee754_log+0x22>
 8008942:	2200      	movs	r2, #0
 8008944:	4bc5      	ldr	r3, [pc, #788]	; (8008c5c <__ieee754_log+0x354>)
 8008946:	f7f7 fe03 	bl	8000550 <__aeabi_dmul>
 800894a:	460b      	mov	r3, r1
 800894c:	460d      	mov	r5, r1
 800894e:	4602      	mov	r2, r0
 8008950:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8008954:	48c2      	ldr	r0, [pc, #776]	; (8008c60 <__ieee754_log+0x358>)
 8008956:	4285      	cmp	r5, r0
 8008958:	dd06      	ble.n	8008968 <__ieee754_log+0x60>
 800895a:	4610      	mov	r0, r2
 800895c:	4619      	mov	r1, r3
 800895e:	f7f7 fc41 	bl	80001e4 <__adddf3>
 8008962:	e7e4      	b.n	800892e <__ieee754_log+0x26>
 8008964:	2100      	movs	r1, #0
 8008966:	e7f5      	b.n	8008954 <__ieee754_log+0x4c>
 8008968:	152c      	asrs	r4, r5, #20
 800896a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800896e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008972:	440c      	add	r4, r1
 8008974:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 8008978:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800897c:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
 8008980:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
 8008984:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8008988:	ea41 0305 	orr.w	r3, r1, r5
 800898c:	4610      	mov	r0, r2
 800898e:	4619      	mov	r1, r3
 8008990:	2200      	movs	r2, #0
 8008992:	4bb4      	ldr	r3, [pc, #720]	; (8008c64 <__ieee754_log+0x35c>)
 8008994:	f7f7 fc24 	bl	80001e0 <__aeabi_dsub>
 8008998:	1cab      	adds	r3, r5, #2
 800899a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800899e:	2b02      	cmp	r3, #2
 80089a0:	4682      	mov	sl, r0
 80089a2:	468b      	mov	fp, r1
 80089a4:	f04f 0200 	mov.w	r2, #0
 80089a8:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 80089ac:	dc53      	bgt.n	8008a56 <__ieee754_log+0x14e>
 80089ae:	2300      	movs	r3, #0
 80089b0:	f7f8 f836 	bl	8000a20 <__aeabi_dcmpeq>
 80089b4:	b1d0      	cbz	r0, 80089ec <__ieee754_log+0xe4>
 80089b6:	2c00      	cmp	r4, #0
 80089b8:	f000 8122 	beq.w	8008c00 <__ieee754_log+0x2f8>
 80089bc:	4620      	mov	r0, r4
 80089be:	f7f7 fd5d 	bl	800047c <__aeabi_i2d>
 80089c2:	a391      	add	r3, pc, #580	; (adr r3, 8008c08 <__ieee754_log+0x300>)
 80089c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c8:	4606      	mov	r6, r0
 80089ca:	460f      	mov	r7, r1
 80089cc:	f7f7 fdc0 	bl	8000550 <__aeabi_dmul>
 80089d0:	a38f      	add	r3, pc, #572	; (adr r3, 8008c10 <__ieee754_log+0x308>)
 80089d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d6:	4604      	mov	r4, r0
 80089d8:	460d      	mov	r5, r1
 80089da:	4630      	mov	r0, r6
 80089dc:	4639      	mov	r1, r7
 80089de:	f7f7 fdb7 	bl	8000550 <__aeabi_dmul>
 80089e2:	4602      	mov	r2, r0
 80089e4:	460b      	mov	r3, r1
 80089e6:	4620      	mov	r0, r4
 80089e8:	4629      	mov	r1, r5
 80089ea:	e7b8      	b.n	800895e <__ieee754_log+0x56>
 80089ec:	a38a      	add	r3, pc, #552	; (adr r3, 8008c18 <__ieee754_log+0x310>)
 80089ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f2:	4650      	mov	r0, sl
 80089f4:	4659      	mov	r1, fp
 80089f6:	f7f7 fdab 	bl	8000550 <__aeabi_dmul>
 80089fa:	4602      	mov	r2, r0
 80089fc:	460b      	mov	r3, r1
 80089fe:	2000      	movs	r0, #0
 8008a00:	4999      	ldr	r1, [pc, #612]	; (8008c68 <__ieee754_log+0x360>)
 8008a02:	f7f7 fbed 	bl	80001e0 <__aeabi_dsub>
 8008a06:	4652      	mov	r2, sl
 8008a08:	4606      	mov	r6, r0
 8008a0a:	460f      	mov	r7, r1
 8008a0c:	465b      	mov	r3, fp
 8008a0e:	4650      	mov	r0, sl
 8008a10:	4659      	mov	r1, fp
 8008a12:	f7f7 fd9d 	bl	8000550 <__aeabi_dmul>
 8008a16:	4602      	mov	r2, r0
 8008a18:	460b      	mov	r3, r1
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	4639      	mov	r1, r7
 8008a1e:	f7f7 fd97 	bl	8000550 <__aeabi_dmul>
 8008a22:	4606      	mov	r6, r0
 8008a24:	460f      	mov	r7, r1
 8008a26:	b914      	cbnz	r4, 8008a2e <__ieee754_log+0x126>
 8008a28:	4632      	mov	r2, r6
 8008a2a:	463b      	mov	r3, r7
 8008a2c:	e0a2      	b.n	8008b74 <__ieee754_log+0x26c>
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f7f7 fd24 	bl	800047c <__aeabi_i2d>
 8008a34:	a374      	add	r3, pc, #464	; (adr r3, 8008c08 <__ieee754_log+0x300>)
 8008a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3a:	4680      	mov	r8, r0
 8008a3c:	4689      	mov	r9, r1
 8008a3e:	f7f7 fd87 	bl	8000550 <__aeabi_dmul>
 8008a42:	a373      	add	r3, pc, #460	; (adr r3, 8008c10 <__ieee754_log+0x308>)
 8008a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a48:	4604      	mov	r4, r0
 8008a4a:	460d      	mov	r5, r1
 8008a4c:	4640      	mov	r0, r8
 8008a4e:	4649      	mov	r1, r9
 8008a50:	f7f7 fd7e 	bl	8000550 <__aeabi_dmul>
 8008a54:	e0a7      	b.n	8008ba6 <__ieee754_log+0x29e>
 8008a56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a5a:	f7f7 fbc3 	bl	80001e4 <__adddf3>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	4650      	mov	r0, sl
 8008a64:	4659      	mov	r1, fp
 8008a66:	f7f7 fe9d 	bl	80007a4 <__aeabi_ddiv>
 8008a6a:	e9cd 0100 	strd	r0, r1, [sp]
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f7f7 fd04 	bl	800047c <__aeabi_i2d>
 8008a74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	4619      	mov	r1, r3
 8008a80:	f7f7 fd66 	bl	8000550 <__aeabi_dmul>
 8008a84:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8008a88:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	9305      	str	r3, [sp, #20]
 8008a90:	460b      	mov	r3, r1
 8008a92:	4606      	mov	r6, r0
 8008a94:	460f      	mov	r7, r1
 8008a96:	f7f7 fd5b 	bl	8000550 <__aeabi_dmul>
 8008a9a:	a361      	add	r3, pc, #388	; (adr r3, 8008c20 <__ieee754_log+0x318>)
 8008a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa0:	4680      	mov	r8, r0
 8008aa2:	4689      	mov	r9, r1
 8008aa4:	f7f7 fd54 	bl	8000550 <__aeabi_dmul>
 8008aa8:	a35f      	add	r3, pc, #380	; (adr r3, 8008c28 <__ieee754_log+0x320>)
 8008aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aae:	f7f7 fb99 	bl	80001e4 <__adddf3>
 8008ab2:	4642      	mov	r2, r8
 8008ab4:	464b      	mov	r3, r9
 8008ab6:	f7f7 fd4b 	bl	8000550 <__aeabi_dmul>
 8008aba:	a35d      	add	r3, pc, #372	; (adr r3, 8008c30 <__ieee754_log+0x328>)
 8008abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac0:	f7f7 fb90 	bl	80001e4 <__adddf3>
 8008ac4:	4642      	mov	r2, r8
 8008ac6:	464b      	mov	r3, r9
 8008ac8:	f7f7 fd42 	bl	8000550 <__aeabi_dmul>
 8008acc:	a35a      	add	r3, pc, #360	; (adr r3, 8008c38 <__ieee754_log+0x330>)
 8008ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad2:	f7f7 fb87 	bl	80001e4 <__adddf3>
 8008ad6:	4632      	mov	r2, r6
 8008ad8:	463b      	mov	r3, r7
 8008ada:	f7f7 fd39 	bl	8000550 <__aeabi_dmul>
 8008ade:	a358      	add	r3, pc, #352	; (adr r3, 8008c40 <__ieee754_log+0x338>)
 8008ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae4:	4606      	mov	r6, r0
 8008ae6:	460f      	mov	r7, r1
 8008ae8:	4640      	mov	r0, r8
 8008aea:	4649      	mov	r1, r9
 8008aec:	f7f7 fd30 	bl	8000550 <__aeabi_dmul>
 8008af0:	a355      	add	r3, pc, #340	; (adr r3, 8008c48 <__ieee754_log+0x340>)
 8008af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af6:	f7f7 fb75 	bl	80001e4 <__adddf3>
 8008afa:	4642      	mov	r2, r8
 8008afc:	464b      	mov	r3, r9
 8008afe:	f7f7 fd27 	bl	8000550 <__aeabi_dmul>
 8008b02:	a353      	add	r3, pc, #332	; (adr r3, 8008c50 <__ieee754_log+0x348>)
 8008b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b08:	f7f7 fb6c 	bl	80001e4 <__adddf3>
 8008b0c:	4642      	mov	r2, r8
 8008b0e:	464b      	mov	r3, r9
 8008b10:	f7f7 fd1e 	bl	8000550 <__aeabi_dmul>
 8008b14:	460b      	mov	r3, r1
 8008b16:	4602      	mov	r2, r0
 8008b18:	4639      	mov	r1, r7
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	f7f7 fb62 	bl	80001e4 <__adddf3>
 8008b20:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8008b24:	9b05      	ldr	r3, [sp, #20]
 8008b26:	3551      	adds	r5, #81	; 0x51
 8008b28:	431d      	orrs	r5, r3
 8008b2a:	2d00      	cmp	r5, #0
 8008b2c:	4680      	mov	r8, r0
 8008b2e:	4689      	mov	r9, r1
 8008b30:	dd48      	ble.n	8008bc4 <__ieee754_log+0x2bc>
 8008b32:	2200      	movs	r2, #0
 8008b34:	4b4c      	ldr	r3, [pc, #304]	; (8008c68 <__ieee754_log+0x360>)
 8008b36:	4650      	mov	r0, sl
 8008b38:	4659      	mov	r1, fp
 8008b3a:	f7f7 fd09 	bl	8000550 <__aeabi_dmul>
 8008b3e:	4652      	mov	r2, sl
 8008b40:	465b      	mov	r3, fp
 8008b42:	f7f7 fd05 	bl	8000550 <__aeabi_dmul>
 8008b46:	4602      	mov	r2, r0
 8008b48:	460b      	mov	r3, r1
 8008b4a:	4606      	mov	r6, r0
 8008b4c:	460f      	mov	r7, r1
 8008b4e:	4640      	mov	r0, r8
 8008b50:	4649      	mov	r1, r9
 8008b52:	f7f7 fb47 	bl	80001e4 <__adddf3>
 8008b56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b5a:	f7f7 fcf9 	bl	8000550 <__aeabi_dmul>
 8008b5e:	4680      	mov	r8, r0
 8008b60:	4689      	mov	r9, r1
 8008b62:	b964      	cbnz	r4, 8008b7e <__ieee754_log+0x276>
 8008b64:	4602      	mov	r2, r0
 8008b66:	460b      	mov	r3, r1
 8008b68:	4630      	mov	r0, r6
 8008b6a:	4639      	mov	r1, r7
 8008b6c:	f7f7 fb38 	bl	80001e0 <__aeabi_dsub>
 8008b70:	4602      	mov	r2, r0
 8008b72:	460b      	mov	r3, r1
 8008b74:	4650      	mov	r0, sl
 8008b76:	4659      	mov	r1, fp
 8008b78:	f7f7 fb32 	bl	80001e0 <__aeabi_dsub>
 8008b7c:	e6d7      	b.n	800892e <__ieee754_log+0x26>
 8008b7e:	a322      	add	r3, pc, #136	; (adr r3, 8008c08 <__ieee754_log+0x300>)
 8008b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b88:	f7f7 fce2 	bl	8000550 <__aeabi_dmul>
 8008b8c:	a320      	add	r3, pc, #128	; (adr r3, 8008c10 <__ieee754_log+0x308>)
 8008b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b92:	4604      	mov	r4, r0
 8008b94:	460d      	mov	r5, r1
 8008b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b9a:	f7f7 fcd9 	bl	8000550 <__aeabi_dmul>
 8008b9e:	4642      	mov	r2, r8
 8008ba0:	464b      	mov	r3, r9
 8008ba2:	f7f7 fb1f 	bl	80001e4 <__adddf3>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	460b      	mov	r3, r1
 8008baa:	4630      	mov	r0, r6
 8008bac:	4639      	mov	r1, r7
 8008bae:	f7f7 fb17 	bl	80001e0 <__aeabi_dsub>
 8008bb2:	4652      	mov	r2, sl
 8008bb4:	465b      	mov	r3, fp
 8008bb6:	f7f7 fb13 	bl	80001e0 <__aeabi_dsub>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	e7d9      	b.n	8008b78 <__ieee754_log+0x270>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4650      	mov	r0, sl
 8008bca:	4659      	mov	r1, fp
 8008bcc:	f7f7 fb08 	bl	80001e0 <__aeabi_dsub>
 8008bd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008bd4:	f7f7 fcbc 	bl	8000550 <__aeabi_dmul>
 8008bd8:	4606      	mov	r6, r0
 8008bda:	460f      	mov	r7, r1
 8008bdc:	2c00      	cmp	r4, #0
 8008bde:	f43f af23 	beq.w	8008a28 <__ieee754_log+0x120>
 8008be2:	a309      	add	r3, pc, #36	; (adr r3, 8008c08 <__ieee754_log+0x300>)
 8008be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bec:	f7f7 fcb0 	bl	8000550 <__aeabi_dmul>
 8008bf0:	a307      	add	r3, pc, #28	; (adr r3, 8008c10 <__ieee754_log+0x308>)
 8008bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	460d      	mov	r5, r1
 8008bfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bfe:	e727      	b.n	8008a50 <__ieee754_log+0x148>
 8008c00:	2000      	movs	r0, #0
 8008c02:	2100      	movs	r1, #0
 8008c04:	e693      	b.n	800892e <__ieee754_log+0x26>
 8008c06:	bf00      	nop
 8008c08:	fee00000 	.word	0xfee00000
 8008c0c:	3fe62e42 	.word	0x3fe62e42
 8008c10:	35793c76 	.word	0x35793c76
 8008c14:	3dea39ef 	.word	0x3dea39ef
 8008c18:	55555555 	.word	0x55555555
 8008c1c:	3fd55555 	.word	0x3fd55555
 8008c20:	df3e5244 	.word	0xdf3e5244
 8008c24:	3fc2f112 	.word	0x3fc2f112
 8008c28:	96cb03de 	.word	0x96cb03de
 8008c2c:	3fc74664 	.word	0x3fc74664
 8008c30:	94229359 	.word	0x94229359
 8008c34:	3fd24924 	.word	0x3fd24924
 8008c38:	55555593 	.word	0x55555593
 8008c3c:	3fe55555 	.word	0x3fe55555
 8008c40:	d078c69f 	.word	0xd078c69f
 8008c44:	3fc39a09 	.word	0x3fc39a09
 8008c48:	1d8e78af 	.word	0x1d8e78af
 8008c4c:	3fcc71c5 	.word	0x3fcc71c5
 8008c50:	9997fa04 	.word	0x9997fa04
 8008c54:	3fd99999 	.word	0x3fd99999
 8008c58:	c3500000 	.word	0xc3500000
 8008c5c:	43500000 	.word	0x43500000
 8008c60:	7fefffff 	.word	0x7fefffff
 8008c64:	3ff00000 	.word	0x3ff00000
 8008c68:	3fe00000 	.word	0x3fe00000

08008c6c <_init>:
 8008c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6e:	bf00      	nop
 8008c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c72:	bc08      	pop	{r3}
 8008c74:	469e      	mov	lr, r3
 8008c76:	4770      	bx	lr

08008c78 <_fini>:
 8008c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c7a:	bf00      	nop
 8008c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c7e:	bc08      	pop	{r3}
 8008c80:	469e      	mov	lr, r3
 8008c82:	4770      	bx	lr
