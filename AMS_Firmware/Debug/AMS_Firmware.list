
AMS_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6fc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d4  0800d888  0800d888  0001d888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e05c  0800e05c  00020378  2**0
                  CONTENTS
  4 .ARM          00000008  0800e05c  0800e05c  0001e05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e064  0800e064  00020378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e064  0800e064  0001e064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e068  0800e068  0001e068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000378  20000000  0800e06c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001594  20000378  0800e3e4  00020378  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000190c  0800e3e4  0002190c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020378  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000203a1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a213  00000000  00000000  000203e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049b4  00000000  00000000  0003a5f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001720  00000000  00000000  0003efb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000118b  00000000  00000000  000406d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023fd8  00000000  00000000  0004185b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e4bf  00000000  00000000  00065833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5490  00000000  00000000  00083cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007030  00000000  00000000  00149184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001501b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000378 	.word	0x20000378
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d86c 	.word	0x0800d86c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000037c 	.word	0x2000037c
 80001c4:	0800d86c 	.word	0x0800d86c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b972 	b.w	8000e3c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	460d      	mov	r5, r1
 8000b78:	4604      	mov	r4, r0
 8000b7a:	468e      	mov	lr, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14c      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4694      	mov	ip, r2
 8000b84:	d967      	bls.n	8000c56 <__udivmoddi4+0xe6>
 8000b86:	fab2 f382 	clz	r3, r2
 8000b8a:	b153      	cbz	r3, 8000ba2 <__udivmoddi4+0x32>
 8000b8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b90:	f1c3 0220 	rsb	r2, r3, #32
 8000b94:	fa01 fe03 	lsl.w	lr, r1, r3
 8000b98:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9c:	ea42 0e0e 	orr.w	lr, r2, lr
 8000ba0:	409c      	lsls	r4, r3
 8000ba2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba6:	fbbe f1f7 	udiv	r1, lr, r7
 8000baa:	fa1f f58c 	uxth.w	r5, ip
 8000bae:	fb07 ee11 	mls	lr, r7, r1, lr
 8000bb2:	fb01 f005 	mul.w	r0, r1, r5
 8000bb6:	0c22      	lsrs	r2, r4, #16
 8000bb8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000bbc:	4290      	cmp	r0, r2
 8000bbe:	d90a      	bls.n	8000bd6 <__udivmoddi4+0x66>
 8000bc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc4:	f101 3eff 	add.w	lr, r1, #4294967295
 8000bc8:	f080 8119 	bcs.w	8000dfe <__udivmoddi4+0x28e>
 8000bcc:	4290      	cmp	r0, r2
 8000bce:	f240 8116 	bls.w	8000dfe <__udivmoddi4+0x28e>
 8000bd2:	3902      	subs	r1, #2
 8000bd4:	4462      	add	r2, ip
 8000bd6:	1a12      	subs	r2, r2, r0
 8000bd8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bdc:	fb07 2210 	mls	r2, r7, r0, r2
 8000be0:	fb00 f505 	mul.w	r5, r0, r5
 8000be4:	b2a4      	uxth	r4, r4
 8000be6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bea:	42a5      	cmp	r5, r4
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x94>
 8000bee:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf6:	f080 8104 	bcs.w	8000e02 <__udivmoddi4+0x292>
 8000bfa:	42a5      	cmp	r5, r4
 8000bfc:	f240 8101 	bls.w	8000e02 <__udivmoddi4+0x292>
 8000c00:	4464      	add	r4, ip
 8000c02:	3802      	subs	r0, #2
 8000c04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c08:	2100      	movs	r1, #0
 8000c0a:	1b64      	subs	r4, r4, r5
 8000c0c:	b11e      	cbz	r6, 8000c16 <__udivmoddi4+0xa6>
 8000c0e:	40dc      	lsrs	r4, r3
 8000c10:	2300      	movs	r3, #0
 8000c12:	e9c6 4300 	strd	r4, r3, [r6]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0xc0>
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	f000 80ea 	beq.w	8000df8 <__udivmoddi4+0x288>
 8000c24:	2100      	movs	r1, #0
 8000c26:	e9c6 0500 	strd	r0, r5, [r6]
 8000c2a:	4608      	mov	r0, r1
 8000c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c30:	fab3 f183 	clz	r1, r3
 8000c34:	2900      	cmp	r1, #0
 8000c36:	d148      	bne.n	8000cca <__udivmoddi4+0x15a>
 8000c38:	42ab      	cmp	r3, r5
 8000c3a:	d302      	bcc.n	8000c42 <__udivmoddi4+0xd2>
 8000c3c:	4282      	cmp	r2, r0
 8000c3e:	f200 80f8 	bhi.w	8000e32 <__udivmoddi4+0x2c2>
 8000c42:	1a84      	subs	r4, r0, r2
 8000c44:	eb65 0203 	sbc.w	r2, r5, r3
 8000c48:	2001      	movs	r0, #1
 8000c4a:	4696      	mov	lr, r2
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	d0e2      	beq.n	8000c16 <__udivmoddi4+0xa6>
 8000c50:	e9c6 4e00 	strd	r4, lr, [r6]
 8000c54:	e7df      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c56:	b902      	cbnz	r2, 8000c5a <__udivmoddi4+0xea>
 8000c58:	deff      	udf	#255	; 0xff
 8000c5a:	fab2 f382 	clz	r3, r2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f040 808e 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c64:	1a88      	subs	r0, r1, r2
 8000c66:	2101      	movs	r1, #1
 8000c68:	0c17      	lsrs	r7, r2, #16
 8000c6a:	fa1f fe82 	uxth.w	lr, r2
 8000c6e:	fbb0 f5f7 	udiv	r5, r0, r7
 8000c72:	fb07 0015 	mls	r0, r7, r5, r0
 8000c76:	0c22      	lsrs	r2, r4, #16
 8000c78:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c7c:	fb0e f005 	mul.w	r0, lr, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x126>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c8c:	d202      	bcs.n	8000c94 <__udivmoddi4+0x124>
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	f200 80cc 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c94:	4645      	mov	r5, r8
 8000c96:	1a12      	subs	r2, r2, r0
 8000c98:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c9c:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ca4:	b2a4      	uxth	r4, r4
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x150>
 8000cae:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x14e>
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	f200 80b4 	bhi.w	8000e26 <__udivmoddi4+0x2b6>
 8000cbe:	4610      	mov	r0, r2
 8000cc0:	eba4 040e 	sub.w	r4, r4, lr
 8000cc4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cc8:	e7a0      	b.n	8000c0c <__udivmoddi4+0x9c>
 8000cca:	f1c1 0720 	rsb	r7, r1, #32
 8000cce:	408b      	lsls	r3, r1
 8000cd0:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cd4:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cd8:	fa25 fa07 	lsr.w	sl, r5, r7
 8000cdc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ce0:	fbba f8f9 	udiv	r8, sl, r9
 8000ce4:	408d      	lsls	r5, r1
 8000ce6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cea:	fb09 aa18 	mls	sl, r9, r8, sl
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	432b      	orrs	r3, r5
 8000cf4:	fa00 f501 	lsl.w	r5, r0, r1
 8000cf8:	fb08 f00e 	mul.w	r0, r8, lr
 8000cfc:	0c1c      	lsrs	r4, r3, #16
 8000cfe:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d02:	42a0      	cmp	r0, r4
 8000d04:	fa02 f201 	lsl.w	r2, r2, r1
 8000d08:	d90b      	bls.n	8000d22 <__udivmoddi4+0x1b2>
 8000d0a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d12:	f080 8086 	bcs.w	8000e22 <__udivmoddi4+0x2b2>
 8000d16:	42a0      	cmp	r0, r4
 8000d18:	f240 8083 	bls.w	8000e22 <__udivmoddi4+0x2b2>
 8000d1c:	f1a8 0802 	sub.w	r8, r8, #2
 8000d20:	4464      	add	r4, ip
 8000d22:	1a24      	subs	r4, r4, r0
 8000d24:	b298      	uxth	r0, r3
 8000d26:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d2a:	fb09 4413 	mls	r4, r9, r3, r4
 8000d2e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d32:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x1dc>
 8000d3a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d42:	d26a      	bcs.n	8000e1a <__udivmoddi4+0x2aa>
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d968      	bls.n	8000e1a <__udivmoddi4+0x2aa>
 8000d48:	3b02      	subs	r3, #2
 8000d4a:	4464      	add	r4, ip
 8000d4c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d50:	fba0 9302 	umull	r9, r3, r0, r2
 8000d54:	eba4 040e 	sub.w	r4, r4, lr
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	46c8      	mov	r8, r9
 8000d5c:	469e      	mov	lr, r3
 8000d5e:	d354      	bcc.n	8000e0a <__udivmoddi4+0x29a>
 8000d60:	d051      	beq.n	8000e06 <__udivmoddi4+0x296>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d067      	beq.n	8000e36 <__udivmoddi4+0x2c6>
 8000d66:	ebb5 0308 	subs.w	r3, r5, r8
 8000d6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d6e:	40cb      	lsrs	r3, r1
 8000d70:	fa04 f707 	lsl.w	r7, r4, r7
 8000d74:	431f      	orrs	r7, r3
 8000d76:	40cc      	lsrs	r4, r1
 8000d78:	e9c6 7400 	strd	r7, r4, [r6]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e74a      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0020 	rsb	r0, r3, #32
 8000d88:	40c1      	lsrs	r1, r0
 8000d8a:	409d      	lsls	r5, r3
 8000d8c:	fa24 f000 	lsr.w	r0, r4, r0
 8000d90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d94:	4328      	orrs	r0, r5
 8000d96:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d9a:	fb07 1115 	mls	r1, r7, r5, r1
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	0c02      	lsrs	r2, r0, #16
 8000da4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000da8:	fb05 f10e 	mul.w	r1, r5, lr
 8000dac:	4291      	cmp	r1, r2
 8000dae:	fa04 f403 	lsl.w	r4, r4, r3
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x256>
 8000db4:	eb1c 0202 	adds.w	r2, ip, r2
 8000db8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dbc:	d22f      	bcs.n	8000e1e <__udivmoddi4+0x2ae>
 8000dbe:	4291      	cmp	r1, r2
 8000dc0:	d92d      	bls.n	8000e1e <__udivmoddi4+0x2ae>
 8000dc2:	3d02      	subs	r5, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a52      	subs	r2, r2, r1
 8000dc8:	fbb2 f1f7 	udiv	r1, r2, r7
 8000dcc:	fb07 2211 	mls	r2, r7, r1, r2
 8000dd0:	b280      	uxth	r0, r0
 8000dd2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000dd6:	fb01 f20e 	mul.w	r2, r1, lr
 8000dda:	4282      	cmp	r2, r0
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x280>
 8000dde:	eb1c 0000 	adds.w	r0, ip, r0
 8000de2:	f101 38ff 	add.w	r8, r1, #4294967295
 8000de6:	d216      	bcs.n	8000e16 <__udivmoddi4+0x2a6>
 8000de8:	4282      	cmp	r2, r0
 8000dea:	d914      	bls.n	8000e16 <__udivmoddi4+0x2a6>
 8000dec:	3902      	subs	r1, #2
 8000dee:	4460      	add	r0, ip
 8000df0:	1a80      	subs	r0, r0, r2
 8000df2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000df6:	e73a      	b.n	8000c6e <__udivmoddi4+0xfe>
 8000df8:	4631      	mov	r1, r6
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e70b      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000dfe:	4671      	mov	r1, lr
 8000e00:	e6e9      	b.n	8000bd6 <__udivmoddi4+0x66>
 8000e02:	4610      	mov	r0, r2
 8000e04:	e6fe      	b.n	8000c04 <__udivmoddi4+0x94>
 8000e06:	454d      	cmp	r5, r9
 8000e08:	d2ab      	bcs.n	8000d62 <__udivmoddi4+0x1f2>
 8000e0a:	ebb9 0802 	subs.w	r8, r9, r2
 8000e0e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000e12:	3801      	subs	r0, #1
 8000e14:	e7a5      	b.n	8000d62 <__udivmoddi4+0x1f2>
 8000e16:	4641      	mov	r1, r8
 8000e18:	e7ea      	b.n	8000df0 <__udivmoddi4+0x280>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	e796      	b.n	8000d4c <__udivmoddi4+0x1dc>
 8000e1e:	4645      	mov	r5, r8
 8000e20:	e7d1      	b.n	8000dc6 <__udivmoddi4+0x256>
 8000e22:	46d0      	mov	r8, sl
 8000e24:	e77d      	b.n	8000d22 <__udivmoddi4+0x1b2>
 8000e26:	4464      	add	r4, ip
 8000e28:	3802      	subs	r0, #2
 8000e2a:	e749      	b.n	8000cc0 <__udivmoddi4+0x150>
 8000e2c:	3d02      	subs	r5, #2
 8000e2e:	4462      	add	r2, ip
 8000e30:	e731      	b.n	8000c96 <__udivmoddi4+0x126>
 8000e32:	4608      	mov	r0, r1
 8000e34:	e70a      	b.n	8000c4c <__udivmoddi4+0xdc>
 8000e36:	4631      	mov	r1, r6
 8000e38:	e6ed      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <spi_write_array>:
 * @param len length of the data array
 * @param data pointer to the data array
 */

static inline void spi_write_array(uint8_t len, uint8_t data[])
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi3, data, len, HAL_MAX_DELAY);
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
 8000e54:	6839      	ldr	r1, [r7, #0]
 8000e56:	4803      	ldr	r0, [pc, #12]	; (8000e64 <spi_write_array+0x24>)
 8000e58:	f005 f957 	bl	800610a <HAL_SPI_Transmit>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	2000054c 	.word	0x2000054c

08000e68 <spi_write_read>:
 * @param tx_len length of the data array to be transmitted
 * @param rx_data pointer to the data array to be received
 * @param rx_len length of the data array to be received
 */
static inline void spi_write_read(uint8_t tx_Data[], uint8_t tx_len, uint8_t *rx_data, uint8_t rx_len)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	461a      	mov	r2, r3
 8000e74:	460b      	mov	r3, r1
 8000e76:	72fb      	strb	r3, [r7, #11]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	72bb      	strb	r3, [r7, #10]
  HAL_SPI_Transmit(&hspi3, tx_Data, tx_len, HAL_MAX_DELAY);
 8000e7c:	7afb      	ldrb	r3, [r7, #11]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
 8000e84:	68f9      	ldr	r1, [r7, #12]
 8000e86:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <spi_write_read+0x3c>)
 8000e88:	f005 f93f 	bl	800610a <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3, rx_data, rx_len, HAL_MAX_DELAY);
 8000e8c:	7abb      	ldrb	r3, [r7, #10]
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	f04f 33ff 	mov.w	r3, #4294967295
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <spi_write_read+0x3c>)
 8000e98:	f005 fa7a 	bl	8006390 <HAL_SPI_Receive>

}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2000054c 	.word	0x2000054c

08000ea8 <LTC6811_initialize>:
uint8_t wakeup = 0x00;

/*@brief Initializes all command variables
 */
void LTC6811_initialize()
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af02      	add	r7, sp, #8
  set_adc(MD_NORMAL, DCP_DISABLED, CELL_CH_ALL, AUX_CH_ALL, CHST_SC);
 8000eae:	2301      	movs	r3, #1
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f000 f81f 	bl	8000efc <set_adc>
  //set_selftest(MD_NORMAL, ST_1);
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <wakeup_idle>:

void wakeup_idle()
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ece:	4808      	ldr	r0, [pc, #32]	; (8000ef0 <wakeup_idle+0x2c>)
 8000ed0:	f003 fa20 	bl	8004314 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4906      	ldr	r1, [pc, #24]	; (8000ef4 <wakeup_idle+0x30>)
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <wakeup_idle+0x34>)
 8000edc:	f005 f915 	bl	800610a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee6:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <wakeup_idle+0x2c>)
 8000ee8:	f003 fa14 	bl	8004314 <HAL_GPIO_WritePin>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	2000039a 	.word	0x2000039a
 8000ef8:	2000054c 	.word	0x2000054c

08000efc <set_adc>:
			|-----------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|
			|ADCV:	    |   0   |   1   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CH[2] | CH[1] | CH[0] |
			|ADAX:	    |   1   |   0   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CHG[2]| CHG[1]| CHG[0]|
 ******************************************************************************************************************/
void set_adc(uint8_t MD, uint8_t DCP, uint8_t CH, uint8_t CHG, uint8_t CHST)
{
 8000efc:	b490      	push	{r4, r7}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4604      	mov	r4, r0
 8000f04:	4608      	mov	r0, r1
 8000f06:	4611      	mov	r1, r2
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4623      	mov	r3, r4
 8000f0c:	71fb      	strb	r3, [r7, #7]
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71bb      	strb	r3, [r7, #6]
 8000f12:	460b      	mov	r3, r1
 8000f14:	717b      	strb	r3, [r7, #5]
 8000f16:	4613      	mov	r3, r2
 8000f18:	713b      	strb	r3, [r7, #4]
  uint8_t md_bits;

  md_bits = (MD & 0x02) >> 1;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	105b      	asrs	r3, r3, #1
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]
  ADCV[0] = md_bits | 0x02;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <set_adc+0x94>)
 8000f30:	701a      	strb	r2, [r3, #0]
  md_bits = (MD & 0x01) << 7;
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	01db      	lsls	r3, r3, #7
 8000f36:	73fb      	strb	r3, [r7, #15]
  ADCV[1] = md_bits | 0x60 | (DCP << 4) | CH;
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	797b      	ldrb	r3, [r7, #5]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <set_adc+0x94>)
 8000f52:	705a      	strb	r2, [r3, #1]

  md_bits = (MD & 0x02) >> 1;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	105b      	asrs	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
  ADAX[0] = md_bits | 0x04;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <set_adc+0x98>)
 8000f6a:	701a      	strb	r2, [r3, #0]
  md_bits = (MD & 0x01) << 7;
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	01db      	lsls	r3, r3, #7
 8000f70:	73fb      	strb	r3, [r7, #15]
  ADAX[1] = md_bits | 0x60 | CHG;
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	793b      	ldrb	r3, [r7, #4]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <set_adc+0x98>)
 8000f82:	705a      	strb	r2, [r3, #1]
  md_bits = (MD & 0x02) >> 1;
  ADSTAT[0] = md_bits | 0x04;
  md_bits = (MD & 0x01) << 7;
  ADSTAT[1] = md_bits | 0x68 | CHST;
  */
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc90      	pop	{r4, r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000394 	.word	0x20000394
 8000f94:	20000398 	.word	0x20000398

08000f98 <LTC6811_adcv>:
 | CH     | Determines which cell channels are converted |
 | DCP    | Determines if Discharge is Permitted	     |

***********************************************************************************************/
void LTC6811_adcv()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;
	//1
	cmd[0] = ADCV[0];
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <LTC6811_adcv+0x74>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADCV[1];
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <LTC6811_adcv+0x74>)
 8000fa6:	785b      	ldrb	r3, [r3, #1]
 8000fa8:	707b      	strb	r3, [r7, #1]
	//2
	temp_pec = pec15_calc(2, ADCV);
 8000faa:	4918      	ldr	r1, [pc, #96]	; (800100c <LTC6811_adcv+0x74>)
 8000fac:	2002      	movs	r0, #2
 8000fae:	f000 fb0d 	bl	80015cc <pec15_calc>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	70fb      	strb	r3, [r7, #3]
	//3
	wakeup_idle();
 8000fc6:	f7ff ff7d 	bl	8000ec4 <wakeup_idle>
	//4
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd0:	480f      	ldr	r0, [pc, #60]	; (8001010 <LTC6811_adcv+0x78>)
 8000fd2:	f003 f99f 	bl	8004314 <HAL_GPIO_WritePin>
	spi_write_array(4, cmd);
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	2004      	movs	r0, #4
 8000fdc:	f7ff ff30 	bl	8000e40 <spi_write_array>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fe6:	480a      	ldr	r0, [pc, #40]	; (8001010 <LTC6811_adcv+0x78>)
 8000fe8:	f003 f994 	bl	8004314 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000fec:	2301      	movs	r3, #1
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4908      	ldr	r1, [pc, #32]	; (8001014 <LTC6811_adcv+0x7c>)
 8000ff2:	4809      	ldr	r0, [pc, #36]	; (8001018 <LTC6811_adcv+0x80>)
 8000ff4:	f005 f889 	bl	800610a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4905      	ldr	r1, [pc, #20]	; (8001014 <LTC6811_adcv+0x7c>)
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <LTC6811_adcv+0x80>)
 8001000:	f005 f883 	bl	800610a <HAL_SPI_Transmit>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000394 	.word	0x20000394
 8001010:	40020000 	.word	0x40020000
 8001014:	2000039a 	.word	0x2000039a
 8001018:	2000054c 	.word	0x2000054c

0800101c <LTC6811_adax>:
 | MD     | Determines the filter corner of the ADC      |
 | CHG    | Determines which GPIO channels are converted |

*********************************************************************************************************/
void LTC6811_adax()
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;

	//1
	cmd[0] = ADAX[0];
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <LTC6811_adax+0x74>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADAX[1];
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <LTC6811_adax+0x74>)
 800102a:	785b      	ldrb	r3, [r3, #1]
 800102c:	707b      	strb	r3, [r7, #1]
	//2
	temp_pec = pec15_calc(2, ADAX);
 800102e:	4918      	ldr	r1, [pc, #96]	; (8001090 <LTC6811_adax+0x74>)
 8001030:	2002      	movs	r0, #2
 8001032:	f000 facb 	bl	80015cc <pec15_calc>
 8001036:	4603      	mov	r3, r0
 8001038:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	b29b      	uxth	r3, r3
 8001040:	b2db      	uxtb	r3, r3
 8001042:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	70fb      	strb	r3, [r7, #3]
	//3
	wakeup_idle();
 800104a:	f7ff ff3b 	bl	8000ec4 <wakeup_idle>
	//4
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001054:	480f      	ldr	r0, [pc, #60]	; (8001094 <LTC6811_adax+0x78>)
 8001056:	f003 f95d 	bl	8004314 <HAL_GPIO_WritePin>
	spi_write_array(4, cmd);
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	2004      	movs	r0, #4
 8001060:	f7ff feee 	bl	8000e40 <spi_write_array>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800106a:	480a      	ldr	r0, [pc, #40]	; (8001094 <LTC6811_adax+0x78>)
 800106c:	f003 f952 	bl	8004314 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8001070:	2301      	movs	r3, #1
 8001072:	2201      	movs	r2, #1
 8001074:	4908      	ldr	r1, [pc, #32]	; (8001098 <LTC6811_adax+0x7c>)
 8001076:	4809      	ldr	r0, [pc, #36]	; (800109c <LTC6811_adax+0x80>)
 8001078:	f005 f847 	bl	800610a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 800107c:	2301      	movs	r3, #1
 800107e:	2201      	movs	r2, #1
 8001080:	4905      	ldr	r1, [pc, #20]	; (8001098 <LTC6811_adax+0x7c>)
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <LTC6811_adax+0x80>)
 8001084:	f005 f841 	bl	800610a <HAL_SPI_Transmit>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000398 	.word	0x20000398
 8001094:	40020000 	.word	0x40020000
 8001098:	2000039a 	.word	0x2000039a
 800109c:	2000054c 	.word	0x2000054c

080010a0 <LTC6811_wrcfg>:


void LTC6811_wrcfg(uint8_t nIC, uint8_t config [][6])

{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 80010ac:	2306      	movs	r3, #6
 80010ae:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * nIC);
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	3304      	adds	r3, #4
 80010b8:	74fb      	strb	r3, [r7, #19]

	uint16_t temp_pec;
	uint8_t current_ic;
	uint8_t WRCFG_index = 4;
 80010ba:	2304      	movs	r3, #4
 80010bc:	75bb      	strb	r3, [r7, #22]
	uint8_t *WRCFG;


	WRCFG = (uint8_t *)malloc(CMD_LEN * sizeof(uint8_t));
 80010be:	7cfb      	ldrb	r3, [r7, #19]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f009 fd3b 	bl	800ab3c <malloc>
 80010c6:	4603      	mov	r3, r0
 80010c8:	60fb      	str	r3, [r7, #12]

	for(current_ic = 0; current_ic < nIC; current_ic++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	75fb      	strb	r3, [r7, #23]
 80010ce:	e03f      	b.n	8001150 <LTC6811_wrcfg+0xb0>
	{
		for(uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	757b      	strb	r3, [r7, #21]
 80010d4:	e013      	b.n	80010fe <LTC6811_wrcfg+0x5e>
		{
			WRCFG[WRCFG_index] = config[current_ic][current_byte];
 80010d6:	7dfa      	ldrb	r2, [r7, #23]
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	461a      	mov	r2, r3
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	1899      	adds	r1, r3, r2
 80010e6:	7d7a      	ldrb	r2, [r7, #21]
 80010e8:	7dbb      	ldrb	r3, [r7, #22]
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	4403      	add	r3, r0
 80010ee:	5c8a      	ldrb	r2, [r1, r2]
 80010f0:	701a      	strb	r2, [r3, #0]
			WRCFG_index++;
 80010f2:	7dbb      	ldrb	r3, [r7, #22]
 80010f4:	3301      	adds	r3, #1
 80010f6:	75bb      	strb	r3, [r7, #22]
		for(uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80010f8:	7d7b      	ldrb	r3, [r7, #21]
 80010fa:	3301      	adds	r3, #1
 80010fc:	757b      	strb	r3, [r7, #21]
 80010fe:	7d7a      	ldrb	r2, [r7, #21]
 8001100:	7d3b      	ldrb	r3, [r7, #20]
 8001102:	429a      	cmp	r2, r3
 8001104:	d3e7      	bcc.n	80010d6 <LTC6811_wrcfg+0x36>
		}

		temp_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic][0]);
 8001106:	7dfa      	ldrb	r2, [r7, #23]
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	461a      	mov	r2, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	4413      	add	r3, r2
 8001116:	461a      	mov	r2, r3
 8001118:	7d3b      	ldrb	r3, [r7, #20]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fa55 	bl	80015cc <pec15_calc>
 8001122:	4603      	mov	r3, r0
 8001124:	817b      	strh	r3, [r7, #10]
		WRCFG[WRCFG_index] = (uint8_t)(temp_pec >> 8);
 8001126:	897b      	ldrh	r3, [r7, #10]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b299      	uxth	r1, r3
 800112c:	7dbb      	ldrb	r3, [r7, #22]
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	b2ca      	uxtb	r2, r1
 8001134:	701a      	strb	r2, [r3, #0]
		WRCFG[WRCFG_index + 1] = (uint8_t)temp_pec;
 8001136:	7dbb      	ldrb	r3, [r7, #22]
 8001138:	3301      	adds	r3, #1
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	4413      	add	r3, r2
 800113e:	897a      	ldrh	r2, [r7, #10]
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	701a      	strb	r2, [r3, #0]
		WRCFG_index += 2;
 8001144:	7dbb      	ldrb	r3, [r7, #22]
 8001146:	3302      	adds	r3, #2
 8001148:	75bb      	strb	r3, [r7, #22]
	for(current_ic = 0; current_ic < nIC; current_ic++)
 800114a:	7dfb      	ldrb	r3, [r7, #23]
 800114c:	3301      	adds	r3, #1
 800114e:	75fb      	strb	r3, [r7, #23]
 8001150:	7dfa      	ldrb	r2, [r7, #23]
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	429a      	cmp	r2, r3
 8001156:	d3bb      	bcc.n	80010d0 <LTC6811_wrcfg+0x30>
	}

	wakeup_idle();
 8001158:	f7ff feb4 	bl	8000ec4 <wakeup_idle>

	for(current_ic = 0; current_ic < nIC; current_ic++)
 800115c:	2300      	movs	r3, #0
 800115e:	75fb      	strb	r3, [r7, #23]
 8001160:	e045      	b.n	80011ee <LTC6811_wrcfg+0x14e>
	{
	    WRCFG[0] = 0x80 + (current_ic << 3); //Setting address
 8001162:	7dfb      	ldrb	r3, [r7, #23]
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	3b80      	subs	r3, #128	; 0x80
 800116a:	b2da      	uxtb	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	701a      	strb	r2, [r3, #0]
	    WRCFG[1] = 0x01;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3301      	adds	r3, #1
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
	    temp_pec = pec15_calc(2, WRCFG);
 8001178:	68f9      	ldr	r1, [r7, #12]
 800117a:	2002      	movs	r0, #2
 800117c:	f000 fa26 	bl	80015cc <pec15_calc>
 8001180:	4603      	mov	r3, r0
 8001182:	817b      	strh	r3, [r7, #10]
	    WRCFG[2] = (uint8_t)(temp_pec >> 8);
 8001184:	897b      	ldrh	r3, [r7, #10]
 8001186:	0a1b      	lsrs	r3, r3, #8
 8001188:	b29a      	uxth	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	3302      	adds	r3, #2
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	701a      	strb	r2, [r3, #0]
	    WRCFG[3] = (uint8_t)(temp_pec);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3303      	adds	r3, #3
 8001196:	897a      	ldrh	r2, [r7, #10]
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a2:	4818      	ldr	r0, [pc, #96]	; (8001204 <LTC6811_wrcfg+0x164>)
 80011a4:	f003 f8b6 	bl	8004314 <HAL_GPIO_WritePin>
		spi_write_array(4, WRCFG);
 80011a8:	68f9      	ldr	r1, [r7, #12]
 80011aa:	2004      	movs	r0, #4
 80011ac:	f7ff fe48 	bl	8000e40 <spi_write_array>
		spi_write_array(8, &WRCFG[4 + (8 * current_ic)]);
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	3304      	adds	r3, #4
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	2008      	movs	r0, #8
 80011c0:	f7ff fe3e 	bl	8000e40 <spi_write_array>
		HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ca:	480e      	ldr	r0, [pc, #56]	; (8001204 <LTC6811_wrcfg+0x164>)
 80011cc:	f003 f8a2 	bl	8004314 <HAL_GPIO_WritePin>


		HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 80011d0:	2301      	movs	r3, #1
 80011d2:	2201      	movs	r2, #1
 80011d4:	490c      	ldr	r1, [pc, #48]	; (8001208 <LTC6811_wrcfg+0x168>)
 80011d6:	480d      	ldr	r0, [pc, #52]	; (800120c <LTC6811_wrcfg+0x16c>)
 80011d8:	f004 ff97 	bl	800610a <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 80011dc:	2301      	movs	r3, #1
 80011de:	2201      	movs	r2, #1
 80011e0:	4909      	ldr	r1, [pc, #36]	; (8001208 <LTC6811_wrcfg+0x168>)
 80011e2:	480a      	ldr	r0, [pc, #40]	; (800120c <LTC6811_wrcfg+0x16c>)
 80011e4:	f004 ff91 	bl	800610a <HAL_SPI_Transmit>
	for(current_ic = 0; current_ic < nIC; current_ic++)
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	3301      	adds	r3, #1
 80011ec:	75fb      	strb	r3, [r7, #23]
 80011ee:	7dfa      	ldrb	r2, [r7, #23]
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d3b5      	bcc.n	8001162 <LTC6811_wrcfg+0xc2>

	}

	free(WRCFG);
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f009 fca8 	bl	800ab4c <free>
}
 80011fc:	bf00      	nop
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40020000 	.word	0x40020000
 8001208:	2000039a 	.word	0x2000039a
 800120c:	2000054c 	.word	0x2000054c

08001210 <LTC6811_rdcv>:
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
}
*/

uint8_t LTC6811_rdcv(uint8_t reg, uint8_t nIC, uint16_t cell_codes[][12])
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	603a      	str	r2, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
 800121c:	460b      	mov	r3, r1
 800121e:	71bb      	strb	r3, [r7, #6]
	const uint8_t NUM_RX_BYT = 8;
 8001220:	2308      	movs	r3, #8
 8001222:	76bb      	strb	r3, [r7, #26]
	const uint8_t BYT_IN_REG = 6;
 8001224:	2306      	movs	r3, #6
 8001226:	767b      	strb	r3, [r7, #25]
	const uint8_t CELL_IN_REG = 3;
 8001228:	2303      	movs	r3, #3
 800122a:	763b      	strb	r3, [r7, #24]

	uint8_t pec_error = 0; //pec Error wenn -1
 800122c:	2300      	movs	r3, #0
 800122e:	77fb      	strb	r3, [r7, #31]
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	77bb      	strb	r3, [r7, #30]
	uint8_t *cell_data;
	cell_data = (uint8_t *)malloc((NUM_RX_BYT * nIC) * sizeof(uint8_t));
 8001234:	7ebb      	ldrb	r3, [r7, #26]
 8001236:	79ba      	ldrb	r2, [r7, #6]
 8001238:	fb02 f303 	mul.w	r3, r2, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f009 fc7d 	bl	800ab3c <malloc>
 8001242:	4603      	mov	r3, r0
 8001244:	617b      	str	r3, [r7, #20]

	for(uint8_t cell_reg = 1; cell_reg < 5; cell_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001246:	2301      	movs	r3, #1
 8001248:	777b      	strb	r3, [r7, #29]
 800124a:	e068      	b.n	800131e <LTC6811_rdcv+0x10e>
	{
		data_counter = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	77bb      	strb	r3, [r7, #30]
		LTC6811_rdcv_reg(cell_reg, nIC, cell_data);
 8001250:	79b9      	ldrb	r1, [r7, #6]
 8001252:	7f7b      	ldrb	r3, [r7, #29]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f86c 	bl	8001334 <LTC6811_rdcv_reg>

		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 800125c:	2300      	movs	r3, #0
 800125e:	773b      	strb	r3, [r7, #28]
 8001260:	e056      	b.n	8001310 <LTC6811_rdcv+0x100>
		{
			 // current_ic is used as an IC counter
			for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 8001262:	2300      	movs	r3, #0
 8001264:	76fb      	strb	r3, [r7, #27]
 8001266:	e026      	b.n	80012b6 <LTC6811_rdcv+0xa6>
			{
				uint16_t parsed_cell = cell_data[data_counter] | (cell_data[data_counter + 1] << 8);
 8001268:	7fbb      	ldrb	r3, [r7, #30]
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b21a      	sxth	r2, r3
 8001272:	7fbb      	ldrb	r3, [r7, #30]
 8001274:	3301      	adds	r3, #1
 8001276:	6979      	ldr	r1, [r7, #20]
 8001278:	440b      	add	r3, r1
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	b21b      	sxth	r3, r3
 8001280:	4313      	orrs	r3, r2
 8001282:	b21b      	sxth	r3, r3
 8001284:	81fb      	strh	r3, [r7, #14]
				cell_codes[current_ic][current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8001286:	7f3a      	ldrb	r2, [r7, #28]
 8001288:	4613      	mov	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4413      	add	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	461a      	mov	r2, r3
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	4413      	add	r3, r2
 8001296:	7ef9      	ldrb	r1, [r7, #27]
 8001298:	7f7a      	ldrb	r2, [r7, #29]
 800129a:	3a01      	subs	r2, #1
 800129c:	7e38      	ldrb	r0, [r7, #24]
 800129e:	fb00 f202 	mul.w	r2, r0, r2
 80012a2:	440a      	add	r2, r1
 80012a4:	89f9      	ldrh	r1, [r7, #14]
 80012a6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter = data_counter + 2;
 80012aa:	7fbb      	ldrb	r3, [r7, #30]
 80012ac:	3302      	adds	r3, #2
 80012ae:	77bb      	strb	r3, [r7, #30]
			for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 80012b0:	7efb      	ldrb	r3, [r7, #27]
 80012b2:	3301      	adds	r3, #1
 80012b4:	76fb      	strb	r3, [r7, #27]
 80012b6:	7efa      	ldrb	r2, [r7, #27]
 80012b8:	7e3b      	ldrb	r3, [r7, #24]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d3d4      	bcc.n	8001268 <LTC6811_rdcv+0x58>
			}
			received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter + 1];
 80012be:	7fbb      	ldrb	r3, [r7, #30]
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	4413      	add	r3, r2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	7fbb      	ldrb	r3, [r7, #30]
 80012ce:	3301      	adds	r3, #1
 80012d0:	6979      	ldr	r1, [r7, #20]
 80012d2:	440b      	add	r3, r1
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	4413      	add	r3, r2
 80012da:	827b      	strh	r3, [r7, #18]
			data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 80012dc:	7f3b      	ldrb	r3, [r7, #28]
 80012de:	7eba      	ldrb	r2, [r7, #26]
 80012e0:	fb02 f303 	mul.w	r3, r2, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	441a      	add	r2, r3
 80012ea:	7e7b      	ldrb	r3, [r7, #25]
 80012ec:	4611      	mov	r1, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f96c 	bl	80015cc <pec15_calc>
 80012f4:	4603      	mov	r3, r0
 80012f6:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 80012f8:	8a7a      	ldrh	r2, [r7, #18]
 80012fa:	8a3b      	ldrh	r3, [r7, #16]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d001      	beq.n	8001304 <LTC6811_rdcv+0xf4>
			{
			  pec_error = -1;
 8001300:	23ff      	movs	r3, #255	; 0xff
 8001302:	77fb      	strb	r3, [r7, #31]
			}
			data_counter = data_counter + 2;
 8001304:	7fbb      	ldrb	r3, [r7, #30]
 8001306:	3302      	adds	r3, #2
 8001308:	77bb      	strb	r3, [r7, #30]
		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 800130a:	7f3b      	ldrb	r3, [r7, #28]
 800130c:	3301      	adds	r3, #1
 800130e:	773b      	strb	r3, [r7, #28]
 8001310:	7f3a      	ldrb	r2, [r7, #28]
 8001312:	79bb      	ldrb	r3, [r7, #6]
 8001314:	429a      	cmp	r2, r3
 8001316:	d3a4      	bcc.n	8001262 <LTC6811_rdcv+0x52>
	for(uint8_t cell_reg = 1; cell_reg < 5; cell_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001318:	7f7b      	ldrb	r3, [r7, #29]
 800131a:	3301      	adds	r3, #1
 800131c:	777b      	strb	r3, [r7, #29]
 800131e:	7f7b      	ldrb	r3, [r7, #29]
 8001320:	2b04      	cmp	r3, #4
 8001322:	d993      	bls.n	800124c <LTC6811_rdcv+0x3c>
		}
	}

	free(cell_data);
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f009 fc11 	bl	800ab4c <free>
	return(pec_error);
 800132a:	7ffb      	ldrb	r3, [r7, #31]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <LTC6811_rdcv_reg>:

void LTC6811_rdcv_reg(uint8_t reg, uint8_t nIC, uint8_t *data)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	603a      	str	r2, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	460b      	mov	r3, r1
 8001342:	71bb      	strb	r3, [r7, #6]
	uint8_t RDCV[4];
	uint16_t temp_pec;

	switch(reg){
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	3b01      	subs	r3, #1
 8001348:	2b03      	cmp	r3, #3
 800134a:	d817      	bhi.n	800137c <LTC6811_rdcv_reg+0x48>
 800134c:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <LTC6811_rdcv_reg+0x20>)
 800134e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001352:	bf00      	nop
 8001354:	08001365 	.word	0x08001365
 8001358:	0800136b 	.word	0x0800136b
 800135c:	08001371 	.word	0x08001371
 8001360:	08001377 	.word	0x08001377
		case 1: RDCV[1] = 0x04; break;
 8001364:	2304      	movs	r3, #4
 8001366:	727b      	strb	r3, [r7, #9]
 8001368:	e008      	b.n	800137c <LTC6811_rdcv_reg+0x48>
		case 2: RDCV[1] = 0x06; break;
 800136a:	2306      	movs	r3, #6
 800136c:	727b      	strb	r3, [r7, #9]
 800136e:	e005      	b.n	800137c <LTC6811_rdcv_reg+0x48>
		case 3: RDCV[1] = 0x08; break;
 8001370:	2308      	movs	r3, #8
 8001372:	727b      	strb	r3, [r7, #9]
 8001374:	e002      	b.n	800137c <LTC6811_rdcv_reg+0x48>
		case 4: RDCV[1] = 0x0a; break;
 8001376:	230a      	movs	r3, #10
 8001378:	727b      	strb	r3, [r7, #9]
 800137a:	bf00      	nop
	}

	wakeup_idle();
 800137c:	f7ff fda2 	bl	8000ec4 <wakeup_idle>

    //Register A-D = reg 1-4
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	e02f      	b.n	80013e6 <LTC6811_rdcv_reg+0xb2>
    {
    	RDCV[0] = 0x80 + (current_ic << 3);
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	3b80      	subs	r3, #128	; 0x80
 800138e:	b2db      	uxtb	r3, r3
 8001390:	723b      	strb	r3, [r7, #8]
        temp_pec = pec15_calc(2, RDCV);
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	4619      	mov	r1, r3
 8001398:	2002      	movs	r0, #2
 800139a:	f000 f917 	bl	80015cc <pec15_calc>
 800139e:	4603      	mov	r3, r0
 80013a0:	81bb      	strh	r3, [r7, #12]
        RDCV[2] = (uint8_t)(temp_pec >> 8);
 80013a2:	89bb      	ldrh	r3, [r7, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	72bb      	strb	r3, [r7, #10]
        RDCV[3] = (uint8_t)(temp_pec);
 80013ac:	89bb      	ldrh	r3, [r7, #12]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b8:	480f      	ldr	r0, [pc, #60]	; (80013f8 <LTC6811_rdcv_reg+0xc4>)
 80013ba:	f002 ffab 	bl	8004314 <HAL_GPIO_WritePin>
        spi_write_read(RDCV, 4, &data[current_ic * 8], 8);
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	461a      	mov	r2, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	441a      	add	r2, r3
 80013c8:	f107 0008 	add.w	r0, r7, #8
 80013cc:	2308      	movs	r3, #8
 80013ce:	2104      	movs	r1, #4
 80013d0:	f7ff fd4a 	bl	8000e68 <spi_write_read>
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013da:	4807      	ldr	r0, [pc, #28]	; (80013f8 <LTC6811_rdcv_reg+0xc4>)
 80013dc:	f002 ff9a 	bl	8004314 <HAL_GPIO_WritePin>
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	3301      	adds	r3, #1
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d3cb      	bcc.n	8001386 <LTC6811_rdcv_reg+0x52>
    }
}
 80013ee:	bf00      	nop
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40020000 	.word	0x40020000

080013fc <LTC6811_rdaux>:

int8_t LTC6811_rdaux(uint8_t reg, uint8_t nIC, uint16_t aux_codes[][6])
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	603a      	str	r2, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	460b      	mov	r3, r1
 800140a:	71bb      	strb	r3, [r7, #6]
	const uint8_t NUM_RX_BYT = 8;
 800140c:	2308      	movs	r3, #8
 800140e:	76bb      	strb	r3, [r7, #26]
	const uint8_t BYT_IN_REG = 6;
 8001410:	2306      	movs	r3, #6
 8001412:	767b      	strb	r3, [r7, #25]
	const uint8_t AUX_IN_REG = 3;
 8001414:	2303      	movs	r3, #3
 8001416:	763b      	strb	r3, [r7, #24]

	uint8_t pec_error = 0; //pec Error wenn -1
 8001418:	2300      	movs	r3, #0
 800141a:	77fb      	strb	r3, [r7, #31]
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	77bb      	strb	r3, [r7, #30]
	uint8_t *aux_data;

	aux_data = (uint8_t *)malloc((NUM_RX_BYT * nIC) * sizeof(uint8_t));
 8001420:	7ebb      	ldrb	r3, [r7, #26]
 8001422:	79ba      	ldrb	r2, [r7, #6]
 8001424:	fb02 f303 	mul.w	r3, r2, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f009 fb87 	bl	800ab3c <malloc>
 800142e:	4603      	mov	r3, r0
 8001430:	617b      	str	r3, [r7, #20]

	for(uint8_t aux_reg = 1; aux_reg < AUX_IN_REG; aux_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001432:	2301      	movs	r3, #1
 8001434:	777b      	strb	r3, [r7, #29]
 8001436:	e068      	b.n	800150a <LTC6811_rdaux+0x10e>
	{
		data_counter = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	77bb      	strb	r3, [r7, #30]
		LTC6811_rdaux_reg(aux_reg, nIC, aux_data);
 800143c:	79b9      	ldrb	r1, [r7, #6]
 800143e:	7f7b      	ldrb	r3, [r7, #29]
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f86e 	bl	8001524 <LTC6811_rdaux_reg>

		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 8001448:	2300      	movs	r3, #0
 800144a:	773b      	strb	r3, [r7, #28]
 800144c:	e056      	b.n	80014fc <LTC6811_rdaux+0x100>
		{
			 // current_ic is used as an IC counter
			for(uint8_t current_cell = 0; current_cell < AUX_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 800144e:	2300      	movs	r3, #0
 8001450:	76fb      	strb	r3, [r7, #27]
 8001452:	e026      	b.n	80014a2 <LTC6811_rdaux+0xa6>
			{
				uint16_t parsed_cell = aux_data[data_counter] | (aux_data[data_counter + 1] << 8);
 8001454:	7fbb      	ldrb	r3, [r7, #30]
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	4413      	add	r3, r2
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b21a      	sxth	r2, r3
 800145e:	7fbb      	ldrb	r3, [r7, #30]
 8001460:	3301      	adds	r3, #1
 8001462:	6979      	ldr	r1, [r7, #20]
 8001464:	440b      	add	r3, r1
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21b      	sxth	r3, r3
 8001470:	81fb      	strh	r3, [r7, #14]
				aux_codes[current_ic][current_cell + ((aux_reg - 1) * AUX_IN_REG)] = parsed_cell;
 8001472:	7f3a      	ldrb	r2, [r7, #28]
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	461a      	mov	r2, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	4413      	add	r3, r2
 8001482:	7ef9      	ldrb	r1, [r7, #27]
 8001484:	7f7a      	ldrb	r2, [r7, #29]
 8001486:	3a01      	subs	r2, #1
 8001488:	7e38      	ldrb	r0, [r7, #24]
 800148a:	fb00 f202 	mul.w	r2, r0, r2
 800148e:	440a      	add	r2, r1
 8001490:	89f9      	ldrh	r1, [r7, #14]
 8001492:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter += 2;
 8001496:	7fbb      	ldrb	r3, [r7, #30]
 8001498:	3302      	adds	r3, #2
 800149a:	77bb      	strb	r3, [r7, #30]
			for(uint8_t current_cell = 0; current_cell < AUX_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 800149c:	7efb      	ldrb	r3, [r7, #27]
 800149e:	3301      	adds	r3, #1
 80014a0:	76fb      	strb	r3, [r7, #27]
 80014a2:	7efa      	ldrb	r2, [r7, #27]
 80014a4:	7e3b      	ldrb	r3, [r7, #24]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d3d4      	bcc.n	8001454 <LTC6811_rdaux+0x58>
			}
			received_pec = (aux_data[data_counter] << 8) + aux_data[data_counter + 1];
 80014aa:	7fbb      	ldrb	r3, [r7, #30]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	7fbb      	ldrb	r3, [r7, #30]
 80014ba:	3301      	adds	r3, #1
 80014bc:	6979      	ldr	r1, [r7, #20]
 80014be:	440b      	add	r3, r1
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	4413      	add	r3, r2
 80014c6:	827b      	strh	r3, [r7, #18]
			data_pec = pec15_calc(BYT_IN_REG, &aux_data[current_ic * NUM_RX_BYT]);
 80014c8:	7f3b      	ldrb	r3, [r7, #28]
 80014ca:	7eba      	ldrb	r2, [r7, #26]
 80014cc:	fb02 f303 	mul.w	r3, r2, r3
 80014d0:	461a      	mov	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	441a      	add	r2, r3
 80014d6:	7e7b      	ldrb	r3, [r7, #25]
 80014d8:	4611      	mov	r1, r2
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f876 	bl	80015cc <pec15_calc>
 80014e0:	4603      	mov	r3, r0
 80014e2:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 80014e4:	8a7a      	ldrh	r2, [r7, #18]
 80014e6:	8a3b      	ldrh	r3, [r7, #16]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d001      	beq.n	80014f0 <LTC6811_rdaux+0xf4>
			{
			  pec_error = -1;
 80014ec:	23ff      	movs	r3, #255	; 0xff
 80014ee:	77fb      	strb	r3, [r7, #31]
			}
			data_counter += 2;
 80014f0:	7fbb      	ldrb	r3, [r7, #30]
 80014f2:	3302      	adds	r3, #2
 80014f4:	77bb      	strb	r3, [r7, #30]
		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 80014f6:	7f3b      	ldrb	r3, [r7, #28]
 80014f8:	3301      	adds	r3, #1
 80014fa:	773b      	strb	r3, [r7, #28]
 80014fc:	7f3a      	ldrb	r2, [r7, #28]
 80014fe:	79bb      	ldrb	r3, [r7, #6]
 8001500:	429a      	cmp	r2, r3
 8001502:	d3a4      	bcc.n	800144e <LTC6811_rdaux+0x52>
	for(uint8_t aux_reg = 1; aux_reg < AUX_IN_REG; aux_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001504:	7f7b      	ldrb	r3, [r7, #29]
 8001506:	3301      	adds	r3, #1
 8001508:	777b      	strb	r3, [r7, #29]
 800150a:	7f7a      	ldrb	r2, [r7, #29]
 800150c:	7e3b      	ldrb	r3, [r7, #24]
 800150e:	429a      	cmp	r2, r3
 8001510:	d392      	bcc.n	8001438 <LTC6811_rdaux+0x3c>
		}
	}

	free(aux_data);
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f009 fb1a 	bl	800ab4c <free>
	return(pec_error);
 8001518:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <LTC6811_rdaux_reg>:

void LTC6811_rdaux_reg(uint8_t reg, uint8_t nIC, uint8_t *data)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	603a      	str	r2, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
 8001530:	460b      	mov	r3, r1
 8001532:	71bb      	strb	r3, [r7, #6]
	uint8_t RDAUX[4];
	uint16_t temp_pec;

	switch(reg){
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d002      	beq.n	8001540 <LTC6811_rdaux_reg+0x1c>
 800153a:	2b02      	cmp	r3, #2
 800153c:	d003      	beq.n	8001546 <LTC6811_rdaux_reg+0x22>
 800153e:	e005      	b.n	800154c <LTC6811_rdaux_reg+0x28>
		case 1: RDAUX[1] = 0xC; break;
 8001540:	230c      	movs	r3, #12
 8001542:	727b      	strb	r3, [r7, #9]
 8001544:	e002      	b.n	800154c <LTC6811_rdaux_reg+0x28>
		case 2: RDAUX[1] = 0xE; break;
 8001546:	230e      	movs	r3, #14
 8001548:	727b      	strb	r3, [r7, #9]
 800154a:	bf00      	nop
	}

	wakeup_idle();
 800154c:	f7ff fcba 	bl	8000ec4 <wakeup_idle>

    //Register A-D = reg 1-4
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e02f      	b.n	80015b6 <LTC6811_rdaux_reg+0x92>
    {
    	RDAUX[0] = 0x80 + (current_ic << 3);
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	3b80      	subs	r3, #128	; 0x80
 800155e:	b2db      	uxtb	r3, r3
 8001560:	723b      	strb	r3, [r7, #8]
        temp_pec = pec15_calc(2, RDAUX);
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	4619      	mov	r1, r3
 8001568:	2002      	movs	r0, #2
 800156a:	f000 f82f 	bl	80015cc <pec15_calc>
 800156e:	4603      	mov	r3, r0
 8001570:	81bb      	strh	r3, [r7, #12]
        RDAUX[2] = (uint8_t)(temp_pec >> 8);
 8001572:	89bb      	ldrh	r3, [r7, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	b29b      	uxth	r3, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	72bb      	strb	r3, [r7, #10]
        RDAUX[3] = (uint8_t)(temp_pec);
 800157c:	89bb      	ldrh	r3, [r7, #12]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001588:	480f      	ldr	r0, [pc, #60]	; (80015c8 <LTC6811_rdaux_reg+0xa4>)
 800158a:	f002 fec3 	bl	8004314 <HAL_GPIO_WritePin>
        spi_write_read(RDAUX, 4, &data[current_ic * 8], 8);
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	461a      	mov	r2, r3
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	441a      	add	r2, r3
 8001598:	f107 0008 	add.w	r0, r7, #8
 800159c:	2308      	movs	r3, #8
 800159e:	2104      	movs	r1, #4
 80015a0:	f7ff fc62 	bl	8000e68 <spi_write_read>
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015aa:	4807      	ldr	r0, [pc, #28]	; (80015c8 <LTC6811_rdaux_reg+0xa4>)
 80015ac:	f002 feb2 	bl	8004314 <HAL_GPIO_WritePin>
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	3301      	adds	r3, #1
 80015b4:	73fb      	strb	r3, [r7, #15]
 80015b6:	7bfa      	ldrb	r2, [r7, #15]
 80015b8:	79bb      	ldrb	r3, [r7, #6]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d3cb      	bcc.n	8001556 <LTC6811_rdaux_reg+0x32>
    }
}
 80015be:	bf00      	nop
 80015c0:	bf00      	nop
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40020000 	.word	0x40020000

080015cc <pec15_calc>:
}
*/

//char *data uint8_t *data , uint8_t len
uint16_t pec15_calc(uint8_t len, uint8_t *data)
 {
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
 uint16_t remainder, address;

 remainder = 16;//PEC seed
 80015d8:	2310      	movs	r3, #16
 80015da:	82fb      	strh	r3, [r7, #22]
 for (int i = 0; i < len; i++)
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	e018      	b.n	8001614 <pec15_calc+0x48>
 {
 address = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 80015e2:	8afb      	ldrh	r3, [r7, #22]
 80015e4:	09db      	lsrs	r3, r3, #7
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	6839      	ldr	r1, [r7, #0]
 80015ec:	440b      	add	r3, r1
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	4053      	eors	r3, r2
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	81fb      	strh	r3, [r7, #14]
 remainder = (remainder << 8 ) ^ pec15Table[address];
 80015fa:	8afb      	ldrh	r3, [r7, #22]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	b29a      	uxth	r2, r3
 8001600:	89fb      	ldrh	r3, [r7, #14]
 8001602:	490a      	ldr	r1, [pc, #40]	; (800162c <pec15_calc+0x60>)
 8001604:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001608:	b29b      	uxth	r3, r3
 800160a:	4053      	eors	r3, r2
 800160c:	82fb      	strh	r3, [r7, #22]
 for (int i = 0; i < len; i++)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	3301      	adds	r3, #1
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	429a      	cmp	r2, r3
 800161a:	dbe2      	blt.n	80015e2 <pec15_calc+0x16>
 }
 return (remainder*2);//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 800161c:	8afb      	ldrh	r3, [r7, #22]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	b29b      	uxth	r3, r3
 }
 8001622:	4618      	mov	r0, r3
 8001624:	371c      	adds	r7, #28
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	0800d8dc 	.word	0x0800d8dc

08001630 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001636:	463b      	mov	r3, r7
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001642:	4b21      	ldr	r3, [pc, #132]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001644:	4a21      	ldr	r2, [pc, #132]	; (80016cc <MX_ADC1_Init+0x9c>)
 8001646:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001648:	4b1f      	ldr	r3, [pc, #124]	; (80016c8 <MX_ADC1_Init+0x98>)
 800164a:	2200      	movs	r2, #0
 800164c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800164e:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001654:	4b1c      	ldr	r3, [pc, #112]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <MX_ADC1_Init+0x98>)
 800165c:	2200      	movs	r2, #0
 800165e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <MX_ADC1_Init+0x98>)
 800166a:	2200      	movs	r2, #0
 800166c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800166e:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001670:	4a17      	ldr	r2, [pc, #92]	; (80016d0 <MX_ADC1_Init+0xa0>)
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800167a:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <MX_ADC1_Init+0x98>)
 800167c:	2201      	movs	r2, #1
 800167e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <MX_ADC1_Init+0x98>)
 800168a:	2201      	movs	r2, #1
 800168c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800168e:	480e      	ldr	r0, [pc, #56]	; (80016c8 <MX_ADC1_Init+0x98>)
 8001690:	f001 fad2 	bl	8002c38 <HAL_ADC_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800169a:	f000 ffd6 	bl	800264a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800169e:	230a      	movs	r3, #10
 80016a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016a2:	2301      	movs	r3, #1
 80016a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016aa:	463b      	mov	r3, r7
 80016ac:	4619      	mov	r1, r3
 80016ae:	4806      	ldr	r0, [pc, #24]	; (80016c8 <MX_ADC1_Init+0x98>)
 80016b0:	f001 fb06 	bl	8002cc0 <HAL_ADC_ConfigChannel>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80016ba:	f000 ffc6 	bl	800264a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	2000039c 	.word	0x2000039c
 80016cc:	40012000 	.word	0x40012000
 80016d0:	0f000001 	.word	0x0f000001

080016d4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016da:	463b      	mov	r3, r7
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80016e6:	4b21      	ldr	r3, [pc, #132]	; (800176c <MX_ADC2_Init+0x98>)
 80016e8:	4a21      	ldr	r2, [pc, #132]	; (8001770 <MX_ADC2_Init+0x9c>)
 80016ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016ec:	4b1f      	ldr	r3, [pc, #124]	; (800176c <MX_ADC2_Init+0x98>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80016f2:	4b1e      	ldr	r3, [pc, #120]	; (800176c <MX_ADC2_Init+0x98>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80016f8:	4b1c      	ldr	r3, [pc, #112]	; (800176c <MX_ADC2_Init+0x98>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80016fe:	4b1b      	ldr	r3, [pc, #108]	; (800176c <MX_ADC2_Init+0x98>)
 8001700:	2200      	movs	r2, #0
 8001702:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001704:	4b19      	ldr	r3, [pc, #100]	; (800176c <MX_ADC2_Init+0x98>)
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800170c:	4b17      	ldr	r3, [pc, #92]	; (800176c <MX_ADC2_Init+0x98>)
 800170e:	2200      	movs	r2, #0
 8001710:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001712:	4b16      	ldr	r3, [pc, #88]	; (800176c <MX_ADC2_Init+0x98>)
 8001714:	4a17      	ldr	r2, [pc, #92]	; (8001774 <MX_ADC2_Init+0xa0>)
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001718:	4b14      	ldr	r3, [pc, #80]	; (800176c <MX_ADC2_Init+0x98>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800171e:	4b13      	ldr	r3, [pc, #76]	; (800176c <MX_ADC2_Init+0x98>)
 8001720:	2201      	movs	r2, #1
 8001722:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_ADC2_Init+0x98>)
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_ADC2_Init+0x98>)
 800172e:	2201      	movs	r2, #1
 8001730:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001732:	480e      	ldr	r0, [pc, #56]	; (800176c <MX_ADC2_Init+0x98>)
 8001734:	f001 fa80 	bl	8002c38 <HAL_ADC_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 800173e:	f000 ff84 	bl	800264a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001742:	230b      	movs	r3, #11
 8001744:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001746:	2301      	movs	r3, #1
 8001748:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800174e:	463b      	mov	r3, r7
 8001750:	4619      	mov	r1, r3
 8001752:	4806      	ldr	r0, [pc, #24]	; (800176c <MX_ADC2_Init+0x98>)
 8001754:	f001 fab4 	bl	8002cc0 <HAL_ADC_ConfigChannel>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800175e:	f000 ff74 	bl	800264a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200003e4 	.word	0x200003e4
 8001770:	40012100 	.word	0x40012100
 8001774:	0f000001 	.word	0x0f000001

08001778 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08c      	sub	sp, #48	; 0x30
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 031c 	add.w	r3, r7, #28
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a2e      	ldr	r2, [pc, #184]	; (8001850 <HAL_ADC_MspInit+0xd8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d128      	bne.n	80017ec <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
 800179e:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	4a2c      	ldr	r2, [pc, #176]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 80017a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a8:	6453      	str	r3, [r2, #68]	; 0x44
 80017aa:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b2:	61bb      	str	r3, [r7, #24]
 80017b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a25      	ldr	r2, [pc, #148]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b23      	ldr	r3, [pc, #140]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017d2:	2301      	movs	r3, #1
 80017d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d6:	2303      	movs	r3, #3
 80017d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	4619      	mov	r1, r3
 80017e4:	481c      	ldr	r0, [pc, #112]	; (8001858 <HAL_ADC_MspInit+0xe0>)
 80017e6:	f002 fbf7 	bl	8003fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80017ea:	e02c      	b.n	8001846 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a1a      	ldr	r2, [pc, #104]	; (800185c <HAL_ADC_MspInit+0xe4>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d127      	bne.n	8001846 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fe:	4a15      	ldr	r2, [pc, #84]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 8001800:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001804:	6453      	str	r3, [r2, #68]	; 0x44
 8001806:	4b13      	ldr	r3, [pc, #76]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6313      	str	r3, [r2, #48]	; 0x30
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <HAL_ADC_MspInit+0xdc>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800182e:	2302      	movs	r3, #2
 8001830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001832:	2303      	movs	r3, #3
 8001834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	4619      	mov	r1, r3
 8001840:	4805      	ldr	r0, [pc, #20]	; (8001858 <HAL_ADC_MspInit+0xe0>)
 8001842:	f002 fbc9 	bl	8003fd8 <HAL_GPIO_Init>
}
 8001846:	bf00      	nop
 8001848:	3730      	adds	r7, #48	; 0x30
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40012000 	.word	0x40012000
 8001854:	40023800 	.word	0x40023800
 8001858:	40020800 	.word	0x40020800
 800185c:	40012100 	.word	0x40012100

08001860 <HAL_TIM_PeriodElapsedCallback>:
 * HLCK 96 MHz
 * APB1 48 MHz
 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

CAN_interrupt();
 8001868:	f000 fa22 	bl	8001cb0 <CAN_interrupt>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
   {
 8001874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001876:	b089      	sub	sp, #36	; 0x24
 8001878:	af06      	add	r7, sp, #24
 800187a:	6078      	str	r0, [r7, #4]
    CAN_RX(hcan1);
 800187c:	4e08      	ldr	r6, [pc, #32]	; (80018a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800187e:	466d      	mov	r5, sp
 8001880:	f106 0410 	add.w	r4, r6, #16
 8001884:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001886:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001888:	e894 0003 	ldmia.w	r4, {r0, r1}
 800188c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001890:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001894:	f000 fb96 	bl	8001fc4 <CAN_RX>
   }
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a0:	200004d8 	.word	0x200004d8

080018a4 <BMS_init>:


void BMS_init()
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	LTC6811_initialize();
 80018a8:	f7ff fafe 	bl	8000ea8 <LTC6811_initialize>
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <BMS>:

void BMS()		// Battery Management System function for main loop.
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
	uint8_t pec = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	713b      	strb	r3, [r7, #4]
	static uint8_t selTemp = 0;
	uint16_t VOV = MAX_VOLTAGE/16;					// Formeln aus Datenblatt S.65
 80018ba:	f640 1385 	movw	r3, #2437	; 0x985
 80018be:	807b      	strh	r3, [r7, #2]
	uint16_t VUV = (MIN_VOLTAGE/16)-1;
 80018c0:	f240 7352 	movw	r3, #1874	; 0x752
 80018c4:	803b      	strh	r3, [r7, #0]


	for (uint8_t i = 0; i < NUM_STACK; i++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	71fb      	strb	r3, [r7, #7]
 80018ca:	e0b2      	b.n	8001a32 <BMS+0x182>
		cfg[i][4] = 0x00 | OV_flag[i];
		cfg[i][5] = 0x00 | (OV_flag[i]>>8);

*/
		//Balancing without flags
		cfg[i][0] = 0x3C | ((selTemp << 6) & 0xC0);		//cfg : Databytes in config register of the LTC6811
 80018cc:	4b7e      	ldr	r3, [pc, #504]	; (8001ac8 <BMS+0x218>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	019b      	lsls	r3, r3, #6
 80018d2:	b25b      	sxtb	r3, r3
 80018d4:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 80018d8:	b25b      	sxtb	r3, r3
 80018da:	79fa      	ldrb	r2, [r7, #7]
 80018dc:	b2d8      	uxtb	r0, r3
 80018de:	497b      	ldr	r1, [pc, #492]	; (8001acc <BMS+0x21c>)
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	440b      	add	r3, r1
 80018ea:	4602      	mov	r2, r0
 80018ec:	701a      	strb	r2, [r3, #0]
		cfg[i][1] = 0x00;
 80018ee:	79fa      	ldrb	r2, [r7, #7]
 80018f0:	4976      	ldr	r1, [pc, #472]	; (8001acc <BMS+0x21c>)
 80018f2:	4613      	mov	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4413      	add	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	440b      	add	r3, r1
 80018fc:	3301      	adds	r3, #1
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
		cfg[i][2] = 0x00;
 8001902:	79fa      	ldrb	r2, [r7, #7]
 8001904:	4971      	ldr	r1, [pc, #452]	; (8001acc <BMS+0x21c>)
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	440b      	add	r3, r1
 8001910:	3302      	adds	r3, #2
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
		cfg[i][3] = 0x00;
 8001916:	79fa      	ldrb	r2, [r7, #7]
 8001918:	496c      	ldr	r1, [pc, #432]	; (8001acc <BMS+0x21c>)
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	440b      	add	r3, r1
 8001924:	3303      	adds	r3, #3
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
		cfg[i][4] = 0x00;
 800192a:	79fa      	ldrb	r2, [r7, #7]
 800192c:	4967      	ldr	r1, [pc, #412]	; (8001acc <BMS+0x21c>)
 800192e:	4613      	mov	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	440b      	add	r3, r1
 8001938:	3304      	adds	r3, #4
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
		cfg[i][5] = 0x00;
 800193e:	79fa      	ldrb	r2, [r7, #7]
 8001940:	4962      	ldr	r1, [pc, #392]	; (8001acc <BMS+0x21c>)
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	440b      	add	r3, r1
 800194c:	3305      	adds	r3, #5
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]

		if(balancing)
 8001952:	4b5f      	ldr	r3, [pc, #380]	; (8001ad0 <BMS+0x220>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d068      	beq.n	8001a2c <BMS+0x17c>
		{
			if(selTemp < 3)
 800195a:	4b5b      	ldr	r3, [pc, #364]	; (8001ac8 <BMS+0x218>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d864      	bhi.n	8001a2c <BMS+0x17c>
			{
				for(uint8_t j = 0; j < 8; j++)
 8001962:	2300      	movs	r3, #0
 8001964:	71bb      	strb	r3, [r7, #6]
 8001966:	e02b      	b.n	80019c0 <BMS+0x110>
				{
					if(cellVoltages[i * NUM_STACK + j] - MAX_VOLTAGE > balanceMargin)cfg[i][4] |= 1 << j;
 8001968:	79fa      	ldrb	r2, [r7, #7]
 800196a:	79bb      	ldrb	r3, [r7, #6]
 800196c:	4413      	add	r3, r2
 800196e:	4a59      	ldr	r2, [pc, #356]	; (8001ad4 <BMS+0x224>)
 8001970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001974:	f5a3 4318 	sub.w	r3, r3, #38912	; 0x9800
 8001978:	3b58      	subs	r3, #88	; 0x58
 800197a:	4a57      	ldr	r2, [pc, #348]	; (8001ad8 <BMS+0x228>)
 800197c:	8812      	ldrh	r2, [r2, #0]
 800197e:	4293      	cmp	r3, r2
 8001980:	dd1b      	ble.n	80019ba <BMS+0x10a>
 8001982:	79fa      	ldrb	r2, [r7, #7]
 8001984:	4951      	ldr	r1, [pc, #324]	; (8001acc <BMS+0x21c>)
 8001986:	4613      	mov	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	4413      	add	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	440b      	add	r3, r1
 8001990:	3304      	adds	r3, #4
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	b25a      	sxtb	r2, r3
 8001996:	79bb      	ldrb	r3, [r7, #6]
 8001998:	2101      	movs	r1, #1
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	b25b      	sxtb	r3, r3
 80019a0:	4313      	orrs	r3, r2
 80019a2:	b25b      	sxtb	r3, r3
 80019a4:	79fa      	ldrb	r2, [r7, #7]
 80019a6:	b2d8      	uxtb	r0, r3
 80019a8:	4948      	ldr	r1, [pc, #288]	; (8001acc <BMS+0x21c>)
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	440b      	add	r3, r1
 80019b4:	3304      	adds	r3, #4
 80019b6:	4602      	mov	r2, r0
 80019b8:	701a      	strb	r2, [r3, #0]
				for(uint8_t j = 0; j < 8; j++)
 80019ba:	79bb      	ldrb	r3, [r7, #6]
 80019bc:	3301      	adds	r3, #1
 80019be:	71bb      	strb	r3, [r7, #6]
 80019c0:	79bb      	ldrb	r3, [r7, #6]
 80019c2:	2b07      	cmp	r3, #7
 80019c4:	d9d0      	bls.n	8001968 <BMS+0xb8>
				}
				for(uint8_t j = 0; j < 3; j++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	717b      	strb	r3, [r7, #5]
 80019ca:	e02c      	b.n	8001a26 <BMS+0x176>
				{
					if(cellVoltages[i * NUM_STACK + j + 8] - MAX_VOLTAGE > balanceMargin)cfg[i][5] |= 1 << j;
 80019cc:	79fa      	ldrb	r2, [r7, #7]
 80019ce:	797b      	ldrb	r3, [r7, #5]
 80019d0:	4413      	add	r3, r2
 80019d2:	3308      	adds	r3, #8
 80019d4:	4a3f      	ldr	r2, [pc, #252]	; (8001ad4 <BMS+0x224>)
 80019d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019da:	f5a3 4318 	sub.w	r3, r3, #38912	; 0x9800
 80019de:	3b58      	subs	r3, #88	; 0x58
 80019e0:	4a3d      	ldr	r2, [pc, #244]	; (8001ad8 <BMS+0x228>)
 80019e2:	8812      	ldrh	r2, [r2, #0]
 80019e4:	4293      	cmp	r3, r2
 80019e6:	dd1b      	ble.n	8001a20 <BMS+0x170>
 80019e8:	79fa      	ldrb	r2, [r7, #7]
 80019ea:	4938      	ldr	r1, [pc, #224]	; (8001acc <BMS+0x21c>)
 80019ec:	4613      	mov	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4413      	add	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	440b      	add	r3, r1
 80019f6:	3305      	adds	r3, #5
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	b25a      	sxtb	r2, r3
 80019fc:	797b      	ldrb	r3, [r7, #5]
 80019fe:	2101      	movs	r1, #1
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	b25b      	sxtb	r3, r3
 8001a06:	4313      	orrs	r3, r2
 8001a08:	b25b      	sxtb	r3, r3
 8001a0a:	79fa      	ldrb	r2, [r7, #7]
 8001a0c:	b2d8      	uxtb	r0, r3
 8001a0e:	492f      	ldr	r1, [pc, #188]	; (8001acc <BMS+0x21c>)
 8001a10:	4613      	mov	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4413      	add	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	440b      	add	r3, r1
 8001a1a:	3305      	adds	r3, #5
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	701a      	strb	r2, [r3, #0]
				for(uint8_t j = 0; j < 3; j++)
 8001a20:	797b      	ldrb	r3, [r7, #5]
 8001a22:	3301      	adds	r3, #1
 8001a24:	717b      	strb	r3, [r7, #5]
 8001a26:	797b      	ldrb	r3, [r7, #5]
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d9cf      	bls.n	80019cc <BMS+0x11c>
	for (uint8_t i = 0; i < NUM_STACK; i++)
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	71fb      	strb	r3, [r7, #7]
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f43f af49 	beq.w	80018cc <BMS+0x1c>
	/*
	LTC6811_clrstat();
	HAL_Delay(3);
*/

	LTC6811_wrcfg(NUM_STACK, (uint8_t(*)[6])cfg);		// Write config
 8001a3a:	4924      	ldr	r1, [pc, #144]	; (8001acc <BMS+0x21c>)
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f7ff fb2f 	bl	80010a0 <LTC6811_wrcfg>
	HAL_Delay(3);
 8001a42:	2003      	movs	r0, #3
 8001a44:	f001 f8d4 	bl	8002bf0 <HAL_Delay>

	//wakeup_idle();									// read config
	//LTC6811_rdcfg();
	//HAL_Delay(3);

	LTC6811_adcv();										// measure voltages
 8001a48:	f7ff faa6 	bl	8000f98 <LTC6811_adcv>
	HAL_Delay(3);
 8001a4c:	2003      	movs	r0, #3
 8001a4e:	f001 f8cf 	bl	8002bf0 <HAL_Delay>

	pec += LTC6811_rdcv(0, NUM_STACK, (uint16_t(*)[12])cellVoltages);	//read voltages
 8001a52:	4a20      	ldr	r2, [pc, #128]	; (8001ad4 <BMS+0x224>)
 8001a54:	2101      	movs	r1, #1
 8001a56:	2000      	movs	r0, #0
 8001a58:	f7ff fbda 	bl	8001210 <LTC6811_rdcv>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	793b      	ldrb	r3, [r7, #4]
 8001a62:	4413      	add	r3, r2
 8001a64:	713b      	strb	r3, [r7, #4]
	HAL_Delay(3);
 8001a66:	2003      	movs	r0, #3
 8001a68:	f001 f8c2 	bl	8002bf0 <HAL_Delay>

	//CAN_interrupt();

	LTC6811_adax();										// measure 3 celltemp
 8001a6c:	f7ff fad6 	bl	800101c <LTC6811_adax>
	HAL_Delay(3);
 8001a70:	2003      	movs	r0, #3
 8001a72:	f001 f8bd 	bl	8002bf0 <HAL_Delay>

	pec += LTC6811_rdaux(0, NUM_STACK, (uint16_t(*)[6])slaveGPIOs);	// read celltemp
 8001a76:	4a19      	ldr	r2, [pc, #100]	; (8001adc <BMS+0x22c>)
 8001a78:	2101      	movs	r1, #1
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f7ff fcbe 	bl	80013fc <LTC6811_rdaux>
 8001a80:	4603      	mov	r3, r0
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	793b      	ldrb	r3, [r7, #4]
 8001a86:	4413      	add	r3, r2
 8001a88:	713b      	strb	r3, [r7, #4]
	HAL_Delay(3);
 8001a8a:	2003      	movs	r0, #3
 8001a8c:	f001 f8b0 	bl	8002bf0 <HAL_Delay>

	//pec += LTC6811_rdstatb(NUM_STACK, OV_flag, UV_flag, r_statb);
	//HAL_Delay(3);


	convertVoltage();
 8001a90:	f000 f826 	bl	8001ae0 <convertVoltage>

	convertTemperature(selTemp);
 8001a94:	4b0c      	ldr	r3, [pc, #48]	; (8001ac8 <BMS+0x218>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 f965 	bl	8001d68 <convertTemperature>

	wakeup_idle();
	LTC6811_rdstat();
*/

	if (selTemp < 3)		// Variable for cycling the multiplexers for temp measurement.
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <BMS+0x218>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d806      	bhi.n	8001ab4 <BMS+0x204>
	{
		selTemp++;
 8001aa6:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <BMS+0x218>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <BMS+0x218>)
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	e002      	b.n	8001aba <BMS+0x20a>
		//CAN_interrupt();
	}


	else
		selTemp = 0;
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <BMS+0x218>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]

	send_usb();
 8001aba:	f000 fa25 	bl	8001f08 <send_usb>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200004c0 	.word	0x200004c0
 8001acc:	20000448 	.word	0x20000448
 8001ad0:	2000042c 	.word	0x2000042c
 8001ad4:	20000430 	.word	0x20000430
 8001ad8:	20000000 	.word	0x20000000
 8001adc:	20000450 	.word	0x20000450

08001ae0 <convertVoltage>:

void convertVoltage()		//convert and sort Voltages
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
	//double voltage[NUM_CELLS];


	for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	71fb      	strb	r3, [r7, #7]
 8001aea:	e00f      	b.n	8001b0c <convertVoltage+0x2c>
	{
		usb_voltages[i] = cellVoltages[i]/1000;
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	4a3a      	ldr	r2, [pc, #232]	; (8001bd8 <convertVoltage+0xf8>)
 8001af0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001af4:	4a39      	ldr	r2, [pc, #228]	; (8001bdc <convertVoltage+0xfc>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	099b      	lsrs	r3, r3, #6
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	b2d1      	uxtb	r1, r2
 8001b02:	4a37      	ldr	r2, [pc, #220]	; (8001be0 <convertVoltage+0x100>)
 8001b04:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	71fb      	strb	r3, [r7, #7]
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	2b0b      	cmp	r3, #11
 8001b10:	d9ec      	bls.n	8001aec <convertVoltage+0xc>
	}

	//uint16_t cell_max = 42890;
	//uint16_t cell_min = 37789;

	uint16_t cell_max = cellVoltages[0];
 8001b12:	4b31      	ldr	r3, [pc, #196]	; (8001bd8 <convertVoltage+0xf8>)
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	80bb      	strh	r3, [r7, #4]
	uint16_t cell_min = cellVoltages[0];
 8001b18:	4b2f      	ldr	r3, [pc, #188]	; (8001bd8 <convertVoltage+0xf8>)
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	807b      	strh	r3, [r7, #2]
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	707b      	strb	r3, [r7, #1]
 8001b22:	e03c      	b.n	8001b9e <convertVoltage+0xbe>
	{
		for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 8001b24:	2300      	movs	r3, #0
 8001b26:	703b      	strb	r3, [r7, #0]
 8001b28:	e033      	b.n	8001b92 <convertVoltage+0xb2>
		{
			if(cellVoltages[i + k * 12] > cell_max) cell_max = cellVoltages[i + k * 12];
 8001b2a:	7839      	ldrb	r1, [r7, #0]
 8001b2c:	787a      	ldrb	r2, [r7, #1]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4413      	add	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	440b      	add	r3, r1
 8001b38:	4a27      	ldr	r2, [pc, #156]	; (8001bd8 <convertVoltage+0xf8>)
 8001b3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b3e:	88ba      	ldrh	r2, [r7, #4]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d20b      	bcs.n	8001b5c <convertVoltage+0x7c>
 8001b44:	7839      	ldrb	r1, [r7, #0]
 8001b46:	787a      	ldrb	r2, [r7, #1]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	4a21      	ldr	r2, [pc, #132]	; (8001bd8 <convertVoltage+0xf8>)
 8001b54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b58:	80bb      	strh	r3, [r7, #4]
 8001b5a:	e017      	b.n	8001b8c <convertVoltage+0xac>
			else if(cellVoltages[i + k * 12] < cell_min) cell_min = cellVoltages[i + k * 12];
 8001b5c:	7839      	ldrb	r1, [r7, #0]
 8001b5e:	787a      	ldrb	r2, [r7, #1]
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	440b      	add	r3, r1
 8001b6a:	4a1b      	ldr	r2, [pc, #108]	; (8001bd8 <convertVoltage+0xf8>)
 8001b6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b70:	887a      	ldrh	r2, [r7, #2]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d90a      	bls.n	8001b8c <convertVoltage+0xac>
 8001b76:	7839      	ldrb	r1, [r7, #0]
 8001b78:	787a      	ldrb	r2, [r7, #1]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <convertVoltage+0xf8>)
 8001b86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b8a:	807b      	strh	r3, [r7, #2]
		for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 8001b8c:	783b      	ldrb	r3, [r7, #0]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	703b      	strb	r3, [r7, #0]
 8001b92:	783b      	ldrb	r3, [r7, #0]
 8001b94:	2b0b      	cmp	r3, #11
 8001b96:	d9c8      	bls.n	8001b2a <convertVoltage+0x4a>
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001b98:	787b      	ldrb	r3, [r7, #1]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	707b      	strb	r3, [r7, #1]
 8001b9e:	787b      	ldrb	r3, [r7, #1]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0bf      	beq.n	8001b24 <convertVoltage+0x44>
			//voltage[i + k * 12] = (double)cellVoltages[i + k * 12]/10000;
			//printf(" Stack %d Cell %d = %.4f V \r\n", k, i, voltage[i + k * 12]);
		}
	}

	AMS1_databytes[0] = cell_min;
 8001ba4:	887b      	ldrh	r3, [r7, #2]
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <convertVoltage+0x104>)
 8001baa:	701a      	strb	r2, [r3, #0]
	AMS1_databytes[1] = (cell_min >> 8);
 8001bac:	887b      	ldrh	r3, [r7, #2]
 8001bae:	0a1b      	lsrs	r3, r3, #8
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <convertVoltage+0x104>)
 8001bb6:	705a      	strb	r2, [r3, #1]
	AMS1_databytes[2] = cell_max;
 8001bb8:	88bb      	ldrh	r3, [r7, #4]
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <convertVoltage+0x104>)
 8001bbe:	709a      	strb	r2, [r3, #2]
	AMS1_databytes[3] = (cell_max >> 8);
 8001bc0:	88bb      	ldrh	r3, [r7, #4]
 8001bc2:	0a1b      	lsrs	r3, r3, #8
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <convertVoltage+0x104>)
 8001bca:	70da      	strb	r2, [r3, #3]



}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	20000430 	.word	0x20000430
 8001bdc:	10624dd3 	.word	0x10624dd3
 8001be0:	20000490 	.word	0x20000490
 8001be4:	200004a8 	.word	0x200004a8

08001be8 <calculateTemperature>:


uint16_t calculateTemperature(uint16_t voltageCode, uint16_t referenceCode)		//convert temp
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	460a      	mov	r2, r1
 8001bf2:	80fb      	strh	r3, [r7, #6]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	80bb      	strh	r3, [r7, #4]
	if(referenceCode - voltageCode != 0)
 8001bf8:	88ba      	ldrh	r2, [r7, #4]
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d03e      	beq.n	8001c7e <calculateTemperature+0x96>
	{
		uint32_t convert_R = (voltageCode * 100000)/(referenceCode - voltageCode);
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	4a29      	ldr	r2, [pc, #164]	; (8001ca8 <calculateTemperature+0xc0>)
 8001c04:	fb03 f202 	mul.w	r2, r3, r2
 8001c08:	88b9      	ldrh	r1, [r7, #4]
 8001c0a:	88fb      	ldrh	r3, [r7, #6]
 8001c0c:	1acb      	subs	r3, r1, r3
 8001c0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c12:	60fb      	str	r3, [r7, #12]
		return 1000.0 / ((1.0 / 298.15) - (log(10000.0 / convert_R) / 3435.0)) - 273150.0;
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f7fe fc21 	bl	800045c <__aeabi_ui2d>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	a11a      	add	r1, pc, #104	; (adr r1, 8001c88 <calculateTemperature+0xa0>)
 8001c20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c24:	f7fe fdbe 	bl	80007a4 <__aeabi_ddiv>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f00b fc30 	bl	800d494 <log>
 8001c34:	a316      	add	r3, pc, #88	; (adr r3, 8001c90 <calculateTemperature+0xa8>)
 8001c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3a:	f7fe fdb3 	bl	80007a4 <__aeabi_ddiv>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	a115      	add	r1, pc, #84	; (adr r1, 8001c98 <calculateTemperature+0xb0>)
 8001c44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c48:	f7fe faca 	bl	80001e0 <__aeabi_dsub>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	f04f 0000 	mov.w	r0, #0
 8001c54:	4915      	ldr	r1, [pc, #84]	; (8001cac <calculateTemperature+0xc4>)
 8001c56:	f7fe fda5 	bl	80007a4 <__aeabi_ddiv>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	a30f      	add	r3, pc, #60	; (adr r3, 8001ca0 <calculateTemperature+0xb8>)
 8001c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c68:	f7fe faba 	bl	80001e0 <__aeabi_dsub>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4610      	mov	r0, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	f7fe ff44 	bl	8000b00 <__aeabi_d2uiz>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	e000      	b.n	8001c80 <calculateTemperature+0x98>
	}
	else
		return 0x00;
 8001c7e:	2300      	movs	r3, #0


}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	00000000 	.word	0x00000000
 8001c8c:	40c38800 	.word	0x40c38800
 8001c90:	00000000 	.word	0x00000000
 8001c94:	40aad600 	.word	0x40aad600
 8001c98:	dcb5db83 	.word	0xdcb5db83
 8001c9c:	3f6b79e1 	.word	0x3f6b79e1
 8001ca0:	00000000 	.word	0x00000000
 8001ca4:	4110abf8 	.word	0x4110abf8
 8001ca8:	000186a0 	.word	0x000186a0
 8001cac:	408f4000 	.word	0x408f4000

08001cb0 <CAN_interrupt>:

void CAN_interrupt()
{
 8001cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb4:	b086      	sub	sp, #24
 8001cb6:	af00      	add	r7, sp, #0

	if (HAL_GetTick()>= last10 + 10)
 8001cb8:	f000 ff90 	bl	8002bdc <HAL_GetTick>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	613b      	str	r3, [r7, #16]
 8001cc2:	617a      	str	r2, [r7, #20]
 8001cc4:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <CAN_interrupt+0xa4>)
 8001cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cca:	f112 080a 	adds.w	r8, r2, #10
 8001cce:	f143 0900 	adc.w	r9, r3, #0
 8001cd2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4541      	cmp	r1, r8
 8001cda:	eb73 0309 	sbcs.w	r3, r3, r9
 8001cde:	d30c      	bcc.n	8001cfa <CAN_interrupt+0x4a>
	{
		CAN_100();
 8001ce0:	f000 f9b0 	bl	8002044 <CAN_100>
		last10 = HAL_GetTick();
 8001ce4:	f000 ff7a 	bl	8002bdc <HAL_GetTick>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2200      	movs	r2, #0
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	60fa      	str	r2, [r7, #12]
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <CAN_interrupt+0xa4>)
 8001cf2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001cf6:	e9c3 1200 	strd	r1, r2, [r3]

	}
	if (HAL_GetTick()>= last100 + 100)
 8001cfa:	f000 ff6f 	bl	8002bdc <HAL_GetTick>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2200      	movs	r2, #0
 8001d02:	469a      	mov	sl, r3
 8001d04:	4693      	mov	fp, r2
 8001d06:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <CAN_interrupt+0xa8>)
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	f112 0464 	adds.w	r4, r2, #100	; 0x64
 8001d10:	f143 0500 	adc.w	r5, r3, #0
 8001d14:	45a2      	cmp	sl, r4
 8001d16:	eb7b 0305 	sbcs.w	r3, fp, r5
 8001d1a:	d316      	bcc.n	8001d4a <CAN_interrupt+0x9a>
	{
		CAN_10(AMS1_databytes);
 8001d1c:	480f      	ldr	r0, [pc, #60]	; (8001d5c <CAN_interrupt+0xac>)
 8001d1e:	f000 f9b7 	bl	8002090 <CAN_10>

		HAL_GPIO_TogglePin(GPIOA, WDI_Pin);		// toggle watchdog
 8001d22:	2110      	movs	r1, #16
 8001d24:	480e      	ldr	r0, [pc, #56]	; (8001d60 <CAN_interrupt+0xb0>)
 8001d26:	f002 fb0d 	bl	8004344 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, LED_GN_Pin);	// toggle LED
 8001d2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d2e:	480d      	ldr	r0, [pc, #52]	; (8001d64 <CAN_interrupt+0xb4>)
 8001d30:	f002 fb08 	bl	8004344 <HAL_GPIO_TogglePin>
		last100 = HAL_GetTick();
 8001d34:	f000 ff52 	bl	8002bdc <HAL_GetTick>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	603b      	str	r3, [r7, #0]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <CAN_interrupt+0xa8>)
 8001d42:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001d46:	e9c3 1200 	strd	r1, r2, [r3]
	}
}
 8001d4a:	bf00      	nop
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d54:	200004b0 	.word	0x200004b0
 8001d58:	200004b8 	.word	0x200004b8
 8001d5c:	200004a8 	.word	0x200004a8
 8001d60:	40020000 	.word	0x40020000
 8001d64:	40020800 	.word	0x40020800

08001d68 <convertTemperature>:


void convertTemperature(uint8_t selTemp)		// sort temp
{
 8001d68:	b5b0      	push	{r4, r5, r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
*/

	//min und max Werte noch finden


	uint8_t indexOffset[12] = {9, 4, 11, 7, 6, 1, 0, 3, 10, 2, 5, 8};
 8001d72:	4a5f      	ldr	r2, [pc, #380]	; (8001ef0 <convertTemperature+0x188>)
 8001d74:	f107 0308 	add.w	r3, r7, #8
 8001d78:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	77fb      	strb	r3, [r7, #31]
 8001d82:	e037      	b.n	8001df4 <convertTemperature+0x8c>
	{
			for(uint8_t j = 0; j < 3; j++)
 8001d84:	2300      	movs	r3, #0
 8001d86:	77bb      	strb	r3, [r7, #30]
 8001d88:	e02e      	b.n	8001de8 <convertTemperature+0x80>
			{
				temperature[k * NUM_CELLS_STACK + indexOffset[j + selTemp * 3]] = calculateTemperature(slaveGPIOs[j + k * 6], slaveGPIOs[5 + k * NUM_GPIO_STACK]);
 8001d8a:	7fb9      	ldrb	r1, [r7, #30]
 8001d8c:	7ffa      	ldrb	r2, [r7, #31]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4413      	add	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	440b      	add	r3, r1
 8001d98:	4a56      	ldr	r2, [pc, #344]	; (8001ef4 <convertTemperature+0x18c>)
 8001d9a:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8001d9e:	7ffa      	ldrb	r2, [r7, #31]
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	3305      	adds	r3, #5
 8001daa:	4a52      	ldr	r2, [pc, #328]	; (8001ef4 <convertTemperature+0x18c>)
 8001dac:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8001db0:	7ffa      	ldrb	r2, [r7, #31]
 8001db2:	4613      	mov	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	4413      	add	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	461c      	mov	r4, r3
 8001dbc:	7fb9      	ldrb	r1, [r7, #30]
 8001dbe:	79fa      	ldrb	r2, [r7, #7]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3320      	adds	r3, #32
 8001dca:	443b      	add	r3, r7
 8001dcc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001dd0:	441c      	add	r4, r3
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	f7ff ff08 	bl	8001be8 <calculateTemperature>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b46      	ldr	r3, [pc, #280]	; (8001ef8 <convertTemperature+0x190>)
 8001dde:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			for(uint8_t j = 0; j < 3; j++)
 8001de2:	7fbb      	ldrb	r3, [r7, #30]
 8001de4:	3301      	adds	r3, #1
 8001de6:	77bb      	strb	r3, [r7, #30]
 8001de8:	7fbb      	ldrb	r3, [r7, #30]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d9cd      	bls.n	8001d8a <convertTemperature+0x22>
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001dee:	7ffb      	ldrb	r3, [r7, #31]
 8001df0:	3301      	adds	r3, #1
 8001df2:	77fb      	strb	r3, [r7, #31]
 8001df4:	7ffb      	ldrb	r3, [r7, #31]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0c4      	beq.n	8001d84 <convertTemperature+0x1c>
				}
			}
			*/
		//USB STUFF

	if(selTemp == 3)
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d172      	bne.n	8001ee6 <convertTemperature+0x17e>
	{
		for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001e00:	2300      	movs	r3, #0
 8001e02:	777b      	strb	r3, [r7, #29]
 8001e04:	e00f      	b.n	8001e26 <convertTemperature+0xbe>
		{
			usb_temperatures[i] = temperature[i]/1000;
 8001e06:	7f7b      	ldrb	r3, [r7, #29]
 8001e08:	4a3b      	ldr	r2, [pc, #236]	; (8001ef8 <convertTemperature+0x190>)
 8001e0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e0e:	4a3b      	ldr	r2, [pc, #236]	; (8001efc <convertTemperature+0x194>)
 8001e10:	fba2 2303 	umull	r2, r3, r2, r3
 8001e14:	099b      	lsrs	r3, r3, #6
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	7f7b      	ldrb	r3, [r7, #29]
 8001e1a:	b2d1      	uxtb	r1, r2
 8001e1c:	4a38      	ldr	r2, [pc, #224]	; (8001f00 <convertTemperature+0x198>)
 8001e1e:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001e20:	7f7b      	ldrb	r3, [r7, #29]
 8001e22:	3301      	adds	r3, #1
 8001e24:	777b      	strb	r3, [r7, #29]
 8001e26:	7f7b      	ldrb	r3, [r7, #29]
 8001e28:	2b0b      	cmp	r3, #11
 8001e2a:	d9ec      	bls.n	8001e06 <convertTemperature+0x9e>
		}

		//CAN stuff


		uint16_t temp_min = temperature[0];
 8001e2c:	4b32      	ldr	r3, [pc, #200]	; (8001ef8 <convertTemperature+0x190>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	837b      	strh	r3, [r7, #26]
			uint16_t temp_max = temperature[0];
 8001e32:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <convertTemperature+0x190>)
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	833b      	strh	r3, [r7, #24]
		for(uint8_t k = 0; k < NUM_STACK; k++)
 8001e38:	2300      	movs	r3, #0
 8001e3a:	75fb      	strb	r3, [r7, #23]
 8001e3c:	e050      	b.n	8001ee0 <convertTemperature+0x178>
			{
				for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	75bb      	strb	r3, [r7, #22]
 8001e42:	e033      	b.n	8001eac <convertTemperature+0x144>
				{
					if(temperature[i + k * 12] > temp_max) temp_max = temperature[i + k * 12];
 8001e44:	7db9      	ldrb	r1, [r7, #22]
 8001e46:	7dfa      	ldrb	r2, [r7, #23]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	4a29      	ldr	r2, [pc, #164]	; (8001ef8 <convertTemperature+0x190>)
 8001e54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e58:	8b3a      	ldrh	r2, [r7, #24]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d20b      	bcs.n	8001e76 <convertTemperature+0x10e>
 8001e5e:	7db9      	ldrb	r1, [r7, #22]
 8001e60:	7dfa      	ldrb	r2, [r7, #23]
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	4a22      	ldr	r2, [pc, #136]	; (8001ef8 <convertTemperature+0x190>)
 8001e6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e72:	833b      	strh	r3, [r7, #24]
 8001e74:	e017      	b.n	8001ea6 <convertTemperature+0x13e>
					else if(temperature[i + k * 12] < temp_min) temp_min = temperature[i + k * 12];
 8001e76:	7db9      	ldrb	r1, [r7, #22]
 8001e78:	7dfa      	ldrb	r2, [r7, #23]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	4a1c      	ldr	r2, [pc, #112]	; (8001ef8 <convertTemperature+0x190>)
 8001e86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e8a:	8b7a      	ldrh	r2, [r7, #26]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d90a      	bls.n	8001ea6 <convertTemperature+0x13e>
 8001e90:	7db9      	ldrb	r1, [r7, #22]
 8001e92:	7dfa      	ldrb	r2, [r7, #23]
 8001e94:	4613      	mov	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	440b      	add	r3, r1
 8001e9e:	4a16      	ldr	r2, [pc, #88]	; (8001ef8 <convertTemperature+0x190>)
 8001ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ea4:	837b      	strh	r3, [r7, #26]
				for(uint8_t i = 0; i < NUM_CELLS_STACK; i++)
 8001ea6:	7dbb      	ldrb	r3, [r7, #22]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	75bb      	strb	r3, [r7, #22]
 8001eac:	7dbb      	ldrb	r3, [r7, #22]
 8001eae:	2b0b      	cmp	r3, #11
 8001eb0:	d9c8      	bls.n	8001e44 <convertTemperature+0xdc>
				}

		AMS1_databytes[4] = temp_min;
 8001eb2:	8b7b      	ldrh	r3, [r7, #26]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <convertTemperature+0x19c>)
 8001eb8:	711a      	strb	r2, [r3, #4]
		AMS1_databytes[5] = (temp_min >> 8);
 8001eba:	8b7b      	ldrh	r3, [r7, #26]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <convertTemperature+0x19c>)
 8001ec4:	715a      	strb	r2, [r3, #5]
		AMS1_databytes[6] = temp_max;
 8001ec6:	8b3b      	ldrh	r3, [r7, #24]
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <convertTemperature+0x19c>)
 8001ecc:	719a      	strb	r2, [r3, #6]
		AMS1_databytes[7] = (temp_max >> 8);
 8001ece:	8b3b      	ldrh	r3, [r7, #24]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <convertTemperature+0x19c>)
 8001ed8:	71da      	strb	r2, [r3, #7]
		for(uint8_t k = 0; k < NUM_STACK; k++)
 8001eda:	7dfb      	ldrb	r3, [r7, #23]
 8001edc:	3301      	adds	r3, #1
 8001ede:	75fb      	strb	r3, [r7, #23]
 8001ee0:	7dfb      	ldrb	r3, [r7, #23]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0ab      	beq.n	8001e3e <convertTemperature+0xd6>


			}
	}
}
 8001ee6:	bf00      	nop
 8001ee8:	3720      	adds	r7, #32
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bdb0      	pop	{r4, r5, r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	0800d888 	.word	0x0800d888
 8001ef4:	20000450 	.word	0x20000450
 8001ef8:	2000045c 	.word	0x2000045c
 8001efc:	10624dd3 	.word	0x10624dd3
 8001f00:	2000049c 	.word	0x2000049c
 8001f04:	200004a8 	.word	0x200004a8

08001f08 <send_usb>:

void send_usb()
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
	usb_data[NUM_CELLS * 2] = 0xff;
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <send_usb+0x48>)
 8001f10:	22ff      	movs	r2, #255	; 0xff
 8001f12:	761a      	strb	r2, [r3, #24]
	for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001f14:	2300      	movs	r3, #0
 8001f16:	71fb      	strb	r3, [r7, #7]
 8001f18:	e00f      	b.n	8001f3a <send_usb+0x32>
	{
		usb_data[i] = usb_voltages[i];
 8001f1a:	79fa      	ldrb	r2, [r7, #7]
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	490d      	ldr	r1, [pc, #52]	; (8001f54 <send_usb+0x4c>)
 8001f20:	5c89      	ldrb	r1, [r1, r2]
 8001f22:	4a0b      	ldr	r2, [pc, #44]	; (8001f50 <send_usb+0x48>)
 8001f24:	54d1      	strb	r1, [r2, r3]
		usb_data[NUM_CELLS + i] = usb_temperatures[i];
 8001f26:	79fa      	ldrb	r2, [r7, #7]
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	330c      	adds	r3, #12
 8001f2c:	490a      	ldr	r1, [pc, #40]	; (8001f58 <send_usb+0x50>)
 8001f2e:	5c89      	ldrb	r1, [r1, r2]
 8001f30:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <send_usb+0x48>)
 8001f32:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	3301      	adds	r3, #1
 8001f38:	71fb      	strb	r3, [r7, #7]
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	2b0b      	cmp	r3, #11
 8001f3e:	d9ec      	bls.n	8001f1a <send_usb+0x12>

	}

	CDC_Transmit_FS(usb_data, NUM_CELLS * 2 + 1);
 8001f40:	2119      	movs	r1, #25
 8001f42:	4803      	ldr	r0, [pc, #12]	; (8001f50 <send_usb+0x48>)
 8001f44:	f008 f9ba 	bl	800a2bc <CDC_Transmit_FS>
	//CDC_Transmit_FS(usb_voltages, NUM_CELLS + 1);

}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000474 	.word	0x20000474
 8001f54:	20000490 	.word	0x20000490
 8001f58:	2000049c 	.word	0x2000049c

08001f5c <CAN_TX>:

uint32_t RxFifo;

	// transmit CAN Message
void CAN_TX(CAN_HandleTypeDef hcan, CAN_TxHeaderTypeDef TxHeader, uint8_t* TxData)
{
 8001f5c:	b084      	sub	sp, #16
 8001f5e:	b5b0      	push	{r4, r5, r7, lr}
 8001f60:	b090      	sub	sp, #64	; 0x40
 8001f62:	af0e      	add	r7, sp, #56	; 0x38
 8001f64:	f107 0418 	add.w	r4, r7, #24
 8001f68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t TxMailbox;
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001f72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f74:	f107 0018 	add.w	r0, r7, #24
 8001f78:	f001 fae8 	bl	800354c <HAL_CAN_AddTxMessage>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d018      	beq.n	8001fb4 <CAN_TX+0x58>
	{
		CAN_TX(hcan, TxHeader, TxData);		//retry when failed
 8001f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f84:	930c      	str	r3, [sp, #48]	; 0x30
 8001f86:	ad06      	add	r5, sp, #24
 8001f88:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001f8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f94:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f98:	466d      	mov	r5, sp
 8001f9a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fa2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fa6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001faa:	f107 0318 	add.w	r3, r7, #24
 8001fae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fb0:	f7ff ffd4 	bl	8001f5c <CAN_TX>
	}
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001fbe:	b004      	add	sp, #16
 8001fc0:	4770      	bx	lr
	...

08001fc4 <CAN_RX>:

	// receive CAN Message
void CAN_RX(CAN_HandleTypeDef hcan)
{
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	f107 0c10 	add.w	ip, r7, #16
 8001fd0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}


	uint8_t RxData[8];


	if (HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001fd4:	463b      	mov	r3, r7
 8001fd6:	4a17      	ldr	r2, [pc, #92]	; (8002034 <CAN_RX+0x70>)
 8001fd8:	2100      	movs	r1, #0
 8001fda:	f107 0010 	add.w	r0, r7, #16
 8001fde:	f001 fb84 	bl	80036ea <HAL_CAN_GetRxMessage>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <CAN_RX+0x28>
	{
		Error_Handler();
 8001fe8:	f000 fb2f 	bl	800264a <Error_Handler>
	}

	if(RxHeader.StdId == 0x500)
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <CAN_RX+0x70>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001ff4:	d117      	bne.n	8002026 <CAN_RX+0x62>
	{

		AMS0_databytes[0] = RxData[4];
 8001ff6:	793a      	ldrb	r2, [r7, #4]
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <CAN_RX+0x74>)
 8001ffa:	701a      	strb	r2, [r3, #0]

		AIR_Logic(DIC0_databytes[0], ts_ready, DIC0_databytes[1]);
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <CAN_RX+0x78>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	4a0f      	ldr	r2, [pc, #60]	; (8002040 <CAN_RX+0x7c>)
 8002002:	7811      	ldrb	r1, [r2, #0]
 8002004:	4a0d      	ldr	r2, [pc, #52]	; (800203c <CAN_RX+0x78>)
 8002006:	7852      	ldrb	r2, [r2, #1]
 8002008:	4618      	mov	r0, r3
 800200a:	f000 f9a9 	bl	8002360 <AIR_Logic>
		AMS0_databytes[6]|= (ts_ready << 3);
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <CAN_RX+0x74>)
 8002010:	799b      	ldrb	r3, [r3, #6]
 8002012:	b25a      	sxtb	r2, r3
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <CAN_RX+0x7c>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	b25b      	sxtb	r3, r3
 800201c:	4313      	orrs	r3, r2
 800201e:	b25b      	sxtb	r3, r3
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4b05      	ldr	r3, [pc, #20]	; (8002038 <CAN_RX+0x74>)
 8002024:	719a      	strb	r2, [r3, #6]

	}

	// hier kann man weitere Nachrichten zum Empfangen hinzufügen

}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002030:	b004      	add	sp, #16
 8002032:	4770      	bx	lr
 8002034:	20000528 	.word	0x20000528
 8002038:	200004c4 	.word	0x200004c4
 800203c:	200004cc 	.word	0x200004cc
 8002040:	200004d4 	.word	0x200004d4

08002044 <CAN_100>:




void CAN_100()		// CAN Messages transmitted with 100 Hz
{
 8002044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002046:	b08f      	sub	sp, #60	; 0x3c
 8002048:	af0e      	add	r7, sp, #56	; 0x38

	CAN_TX(hcan1, AMS0_header, AMS0_databytes);
 800204a:	4e0e      	ldr	r6, [pc, #56]	; (8002084 <CAN_100+0x40>)
 800204c:	4b0e      	ldr	r3, [pc, #56]	; (8002088 <CAN_100+0x44>)
 800204e:	930c      	str	r3, [sp, #48]	; 0x30
 8002050:	4b0e      	ldr	r3, [pc, #56]	; (800208c <CAN_100+0x48>)
 8002052:	ac06      	add	r4, sp, #24
 8002054:	461d      	mov	r5, r3
 8002056:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800205a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800205e:	e884 0003 	stmia.w	r4, {r0, r1}
 8002062:	466d      	mov	r5, sp
 8002064:	f106 0410 	add.w	r4, r6, #16
 8002068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800206c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002070:	e885 0003 	stmia.w	r5, {r0, r1}
 8002074:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002078:	f7ff ff70 	bl	8001f5c <CAN_TX>
}
 800207c:	bf00      	nop
 800207e:	3704      	adds	r7, #4
 8002080:	46bd      	mov	sp, r7
 8002082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002084:	200004d8 	.word	0x200004d8
 8002088:	200004c4 	.word	0x200004c4
 800208c:	20000004 	.word	0x20000004

08002090 <CAN_10>:

void CAN_10(uint8_t bms_data[])		// CAN Messages transmitted with 10 Hz
{
 8002090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002092:	b091      	sub	sp, #68	; 0x44
 8002094:	af0e      	add	r7, sp, #56	; 0x38
 8002096:	6078      	str	r0, [r7, #4]
	CAN_TX(hcan1, AMS1_header, bms_data);
 8002098:	4e0e      	ldr	r6, [pc, #56]	; (80020d4 <CAN_10+0x44>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	930c      	str	r3, [sp, #48]	; 0x30
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <CAN_10+0x48>)
 80020a0:	ac06      	add	r4, sp, #24
 80020a2:	461d      	mov	r5, r3
 80020a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80020ac:	e884 0003 	stmia.w	r4, {r0, r1}
 80020b0:	466d      	mov	r5, sp
 80020b2:	f106 0410 	add.w	r4, r6, #16
 80020b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020be:	e885 0003 	stmia.w	r5, {r0, r1}
 80020c2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80020c6:	f7ff ff49 	bl	8001f5c <CAN_TX>
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020d2:	bf00      	nop
 80020d4:	200004d8 	.word	0x200004d8
 80020d8:	2000001c 	.word	0x2000001c

080020dc <MX_CAN1_Init>:
/* USER CODE END 0 */

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80020e2:	4b26      	ldr	r3, [pc, #152]	; (800217c <MX_CAN1_Init+0xa0>)
 80020e4:	4a26      	ldr	r2, [pc, #152]	; (8002180 <MX_CAN1_Init+0xa4>)
 80020e6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80020e8:	4b24      	ldr	r3, [pc, #144]	; (800217c <MX_CAN1_Init+0xa0>)
 80020ea:	2204      	movs	r2, #4
 80020ec:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80020ee:	4b23      	ldr	r3, [pc, #140]	; (800217c <MX_CAN1_Init+0xa0>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80020f4:	4b21      	ldr	r3, [pc, #132]	; (800217c <MX_CAN1_Init+0xa0>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 80020fa:	4b20      	ldr	r3, [pc, #128]	; (800217c <MX_CAN1_Init+0xa0>)
 80020fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002100:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002102:	4b1e      	ldr	r3, [pc, #120]	; (800217c <MX_CAN1_Init+0xa0>)
 8002104:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002108:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800210a:	4b1c      	ldr	r3, [pc, #112]	; (800217c <MX_CAN1_Init+0xa0>)
 800210c:	2200      	movs	r2, #0
 800210e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <MX_CAN1_Init+0xa0>)
 8002112:	2200      	movs	r2, #0
 8002114:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <MX_CAN1_Init+0xa0>)
 8002118:	2200      	movs	r2, #0
 800211a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800211c:	4b17      	ldr	r3, [pc, #92]	; (800217c <MX_CAN1_Init+0xa0>)
 800211e:	2200      	movs	r2, #0
 8002120:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002122:	4b16      	ldr	r3, [pc, #88]	; (800217c <MX_CAN1_Init+0xa0>)
 8002124:	2200      	movs	r2, #0
 8002126:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002128:	4b14      	ldr	r3, [pc, #80]	; (800217c <MX_CAN1_Init+0xa0>)
 800212a:	2200      	movs	r2, #0
 800212c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800212e:	4813      	ldr	r0, [pc, #76]	; (800217c <MX_CAN1_Init+0xa0>)
 8002130:	f000 ffec 	bl	800310c <HAL_CAN_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800213a:	f000 fa86 	bl	800264a <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */


	CAN_FilterTypeDef canfilterconfig;

	  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800213e:	2301      	movs	r3, #1
 8002140:	623b      	str	r3, [r7, #32]
	  canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 8002142:	2312      	movs	r3, #18
 8002144:	617b      	str	r3, [r7, #20]
	  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
	  canfilterconfig.FilterIdHigh = 0x500<<5;
 800214a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800214e:	603b      	str	r3, [r7, #0]
	  canfilterconfig.FilterIdLow = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	607b      	str	r3, [r7, #4]
	  canfilterconfig.FilterMaskIdHigh = 0x7FF<<5;
 8002154:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002158:	60bb      	str	r3, [r7, #8]
	  canfilterconfig.FilterMaskIdLow = 0x0000;
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
	  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800215e:	2300      	movs	r3, #0
 8002160:	61bb      	str	r3, [r7, #24]
	  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002162:	2301      	movs	r3, #1
 8002164:	61fb      	str	r3, [r7, #28]
	  canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8002166:	2314      	movs	r3, #20
 8002168:	627b      	str	r3, [r7, #36]	; 0x24

	  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 800216a:	463b      	mov	r3, r7
 800216c:	4619      	mov	r1, r3
 800216e:	4803      	ldr	r0, [pc, #12]	; (800217c <MX_CAN1_Init+0xa0>)
 8002170:	f001 f8c8 	bl	8003304 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8002174:	bf00      	nop
 8002176:	3728      	adds	r7, #40	; 0x28
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	200004d8 	.word	0x200004d8
 8002180:	40006400 	.word	0x40006400

08002184 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002188:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <MX_CAN2_Init+0x64>)
 800218a:	4a18      	ldr	r2, [pc, #96]	; (80021ec <MX_CAN2_Init+0x68>)
 800218c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 800218e:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <MX_CAN2_Init+0x64>)
 8002190:	2204      	movs	r2, #4
 8002192:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002194:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <MX_CAN2_Init+0x64>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800219a:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <MX_CAN2_Init+0x64>)
 800219c:	2200      	movs	r2, #0
 800219e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <MX_CAN2_Init+0x64>)
 80021a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021a6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <MX_CAN2_Init+0x64>)
 80021aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80021ae:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80021b0:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <MX_CAN2_Init+0x64>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80021b6:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <MX_CAN2_Init+0x64>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80021bc:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <MX_CAN2_Init+0x64>)
 80021be:	2200      	movs	r2, #0
 80021c0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80021c2:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <MX_CAN2_Init+0x64>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80021c8:	4b07      	ldr	r3, [pc, #28]	; (80021e8 <MX_CAN2_Init+0x64>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <MX_CAN2_Init+0x64>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80021d4:	4804      	ldr	r0, [pc, #16]	; (80021e8 <MX_CAN2_Init+0x64>)
 80021d6:	f000 ff99 	bl	800310c <HAL_CAN_Init>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80021e0:	f000 fa33 	bl	800264a <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000500 	.word	0x20000500
 80021ec:	40006800 	.word	0x40006800

080021f0 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08c      	sub	sp, #48	; 0x30
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 031c 	add.w	r3, r7, #28
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a4f      	ldr	r2, [pc, #316]	; (800234c <HAL_CAN_MspInit+0x15c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d146      	bne.n	80022a0 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002212:	4b4f      	ldr	r3, [pc, #316]	; (8002350 <HAL_CAN_MspInit+0x160>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	3301      	adds	r3, #1
 8002218:	4a4d      	ldr	r2, [pc, #308]	; (8002350 <HAL_CAN_MspInit+0x160>)
 800221a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800221c:	4b4c      	ldr	r3, [pc, #304]	; (8002350 <HAL_CAN_MspInit+0x160>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d10d      	bne.n	8002240 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002224:	2300      	movs	r3, #0
 8002226:	61bb      	str	r3, [r7, #24]
 8002228:	4b4a      	ldr	r3, [pc, #296]	; (8002354 <HAL_CAN_MspInit+0x164>)
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	4a49      	ldr	r2, [pc, #292]	; (8002354 <HAL_CAN_MspInit+0x164>)
 800222e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002232:	6413      	str	r3, [r2, #64]	; 0x40
 8002234:	4b47      	ldr	r3, [pc, #284]	; (8002354 <HAL_CAN_MspInit+0x164>)
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	4b43      	ldr	r3, [pc, #268]	; (8002354 <HAL_CAN_MspInit+0x164>)
 8002246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002248:	4a42      	ldr	r2, [pc, #264]	; (8002354 <HAL_CAN_MspInit+0x164>)
 800224a:	f043 0302 	orr.w	r3, r3, #2
 800224e:	6313      	str	r3, [r2, #48]	; 0x30
 8002250:	4b40      	ldr	r3, [pc, #256]	; (8002354 <HAL_CAN_MspInit+0x164>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800225c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226a:	2303      	movs	r3, #3
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800226e:	2309      	movs	r3, #9
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002272:	f107 031c 	add.w	r3, r7, #28
 8002276:	4619      	mov	r1, r3
 8002278:	4837      	ldr	r0, [pc, #220]	; (8002358 <HAL_CAN_MspInit+0x168>)
 800227a:	f001 fead 	bl	8003fd8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2100      	movs	r1, #0
 8002282:	2013      	movs	r0, #19
 8002284:	f001 fe71 	bl	8003f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002288:	2013      	movs	r0, #19
 800228a:	f001 fe8a 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800228e:	2200      	movs	r2, #0
 8002290:	2100      	movs	r1, #0
 8002292:	2014      	movs	r0, #20
 8002294:	f001 fe69 	bl	8003f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002298:	2014      	movs	r0, #20
 800229a:	f001 fe82 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800229e:	e050      	b.n	8002342 <HAL_CAN_MspInit+0x152>
  else if(canHandle->Instance==CAN2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a2d      	ldr	r2, [pc, #180]	; (800235c <HAL_CAN_MspInit+0x16c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d14b      	bne.n	8002342 <HAL_CAN_MspInit+0x152>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
 80022ae:	4b29      	ldr	r3, [pc, #164]	; (8002354 <HAL_CAN_MspInit+0x164>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	4a28      	ldr	r2, [pc, #160]	; (8002354 <HAL_CAN_MspInit+0x164>)
 80022b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022b8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ba:	4b26      	ldr	r3, [pc, #152]	; (8002354 <HAL_CAN_MspInit+0x164>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80022c6:	4b22      	ldr	r3, [pc, #136]	; (8002350 <HAL_CAN_MspInit+0x160>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	3301      	adds	r3, #1
 80022cc:	4a20      	ldr	r2, [pc, #128]	; (8002350 <HAL_CAN_MspInit+0x160>)
 80022ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80022d0:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <HAL_CAN_MspInit+0x160>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d10d      	bne.n	80022f4 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <HAL_CAN_MspInit+0x164>)
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	4a1c      	ldr	r2, [pc, #112]	; (8002354 <HAL_CAN_MspInit+0x164>)
 80022e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022e6:	6413      	str	r3, [r2, #64]	; 0x40
 80022e8:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <HAL_CAN_MspInit+0x164>)
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	4b16      	ldr	r3, [pc, #88]	; (8002354 <HAL_CAN_MspInit+0x164>)
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	4a15      	ldr	r2, [pc, #84]	; (8002354 <HAL_CAN_MspInit+0x164>)
 80022fe:	f043 0302 	orr.w	r3, r3, #2
 8002302:	6313      	str	r3, [r2, #48]	; 0x30
 8002304:	4b13      	ldr	r3, [pc, #76]	; (8002354 <HAL_CAN_MspInit+0x164>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002310:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002322:	2309      	movs	r3, #9
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002326:	f107 031c 	add.w	r3, r7, #28
 800232a:	4619      	mov	r1, r3
 800232c:	480a      	ldr	r0, [pc, #40]	; (8002358 <HAL_CAN_MspInit+0x168>)
 800232e:	f001 fe53 	bl	8003fd8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	2100      	movs	r1, #0
 8002336:	2040      	movs	r0, #64	; 0x40
 8002338:	f001 fe17 	bl	8003f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800233c:	2040      	movs	r0, #64	; 0x40
 800233e:	f001 fe30 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
}
 8002342:	bf00      	nop
 8002344:	3730      	adds	r7, #48	; 0x30
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40006400 	.word	0x40006400
 8002350:	20000544 	.word	0x20000544
 8002354:	40023800 	.word	0x40023800
 8002358:	40020400 	.word	0x40020400
 800235c:	40006800 	.word	0x40006800

08002360 <AIR_Logic>:
	// returns 0 if open
	return HAL_GPIO_ReadPin(GPIOC,AIR_N_INT_Pin);
}

void AIR_Logic(uint8_t ts_on, uint8_t ts_ready, uint8_t ts_start)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
 800236a:	460b      	mov	r3, r1
 800236c:	71bb      	strb	r3, [r7, #6]
 800236e:	4613      	mov	r3, r2
 8002370:	717b      	strb	r3, [r7, #5]

	 if (error == 0)
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <AIR_Logic+0x4c>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d113      	bne.n	80023a2 <AIR_Logic+0x42>
	 {
		 if (ts_on>= 1)
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d007      	beq.n	8002390 <AIR_Logic+0x30>
		 {

			 HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_SET);
 8002380:	2201      	movs	r2, #1
 8002382:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002386:	480a      	ldr	r0, [pc, #40]	; (80023b0 <AIR_Logic+0x50>)
 8002388:	f001 ffc4 	bl	8004314 <HAL_GPIO_WritePin>
			 ts_ready = 1;
 800238c:	2301      	movs	r3, #1
 800238e:	71bb      	strb	r3, [r7, #6]

		 }

		 if (ts_start>= 1)
 8002390:	797b      	ldrb	r3, [r7, #5]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <AIR_Logic+0x42>
		 {
			 HAL_GPIO_WritePin(GPIOC,AIR_P_SW_Pin, GPIO_PIN_SET);
 8002396:	2201      	movs	r2, #1
 8002398:	f44f 7180 	mov.w	r1, #256	; 0x100
 800239c:	4805      	ldr	r0, [pc, #20]	; (80023b4 <AIR_Logic+0x54>)
 800239e:	f001 ffb9 	bl	8004314 <HAL_GPIO_WritePin>
		 }
	}
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000548 	.word	0x20000548
 80023b0:	40020400 	.word	0x40020400
 80023b4:	40020800 	.word	0x40020800

080023b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b08a      	sub	sp, #40	; 0x28
 80023bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023be:	f107 0314 	add.w	r3, r7, #20
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	60da      	str	r2, [r3, #12]
 80023cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	4b5e      	ldr	r3, [pc, #376]	; (800254c <MX_GPIO_Init+0x194>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a5d      	ldr	r2, [pc, #372]	; (800254c <MX_GPIO_Init+0x194>)
 80023d8:	f043 0304 	orr.w	r3, r3, #4
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b5b      	ldr	r3, [pc, #364]	; (800254c <MX_GPIO_Init+0x194>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b57      	ldr	r3, [pc, #348]	; (800254c <MX_GPIO_Init+0x194>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a56      	ldr	r2, [pc, #344]	; (800254c <MX_GPIO_Init+0x194>)
 80023f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b54      	ldr	r3, [pc, #336]	; (800254c <MX_GPIO_Init+0x194>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	4b50      	ldr	r3, [pc, #320]	; (800254c <MX_GPIO_Init+0x194>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	4a4f      	ldr	r2, [pc, #316]	; (800254c <MX_GPIO_Init+0x194>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6313      	str	r3, [r2, #48]	; 0x30
 8002416:	4b4d      	ldr	r3, [pc, #308]	; (800254c <MX_GPIO_Init+0x194>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	4b49      	ldr	r3, [pc, #292]	; (800254c <MX_GPIO_Init+0x194>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a48      	ldr	r2, [pc, #288]	; (800254c <MX_GPIO_Init+0x194>)
 800242c:	f043 0302 	orr.w	r3, r3, #2
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b46      	ldr	r3, [pc, #280]	; (800254c <MX_GPIO_Init+0x194>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	603b      	str	r3, [r7, #0]
 8002442:	4b42      	ldr	r3, [pc, #264]	; (800254c <MX_GPIO_Init+0x194>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	4a41      	ldr	r2, [pc, #260]	; (800254c <MX_GPIO_Init+0x194>)
 8002448:	f043 0308 	orr.w	r3, r3, #8
 800244c:	6313      	str	r3, [r2, #48]	; 0x30
 800244e:	4b3f      	ldr	r3, [pc, #252]	; (800254c <MX_GPIO_Init+0x194>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GN_Pin|LED_YW_Pin|LED_RD_Pin|AIR_P_SW_Pin, GPIO_PIN_RESET);
 800245a:	2200      	movs	r2, #0
 800245c:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8002460:	483b      	ldr	r0, [pc, #236]	; (8002550 <MX_GPIO_Init+0x198>)
 8002462:	f001 ff57 	bl	8004314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WDI_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 8002466:	2200      	movs	r2, #0
 8002468:	f248 0110 	movw	r1, #32784	; 0x8010
 800246c:	4839      	ldr	r0, [pc, #228]	; (8002554 <MX_GPIO_Init+0x19c>)
 800246e:	f001 ff51 	bl	8004314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SC_OPEN_GPIO_Port, SC_OPEN_Pin, GPIO_PIN_SET);
 8002472:	2201      	movs	r2, #1
 8002474:	2180      	movs	r1, #128	; 0x80
 8002476:	4837      	ldr	r0, [pc, #220]	; (8002554 <MX_GPIO_Init+0x19c>)
 8002478:	f001 ff4c 	bl	8004314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_RESET);
 800247c:	2200      	movs	r2, #0
 800247e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002482:	4835      	ldr	r0, [pc, #212]	; (8002558 <MX_GPIO_Init+0x1a0>)
 8002484:	f001 ff46 	bl	8004314 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_GN_Pin|LED_YW_Pin|LED_RD_Pin|AIR_P_SW_Pin;
 8002488:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800248c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800248e:	2301      	movs	r3, #1
 8002490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002496:	2300      	movs	r3, #0
 8002498:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800249a:	f107 0314 	add.w	r3, r7, #20
 800249e:	4619      	mov	r1, r3
 80024a0:	482b      	ldr	r0, [pc, #172]	; (8002550 <MX_GPIO_Init+0x198>)
 80024a2:	f001 fd99 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_STATE_Pin|IMD_SAFE_Pin|SC_OPENING_Pin;
 80024a6:	2368      	movs	r3, #104	; 0x68
 80024a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b2:	f107 0314 	add.w	r3, r7, #20
 80024b6:	4619      	mov	r1, r3
 80024b8:	4826      	ldr	r0, [pc, #152]	; (8002554 <MX_GPIO_Init+0x19c>)
 80024ba:	f001 fd8d 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WDI_Pin|SC_OPEN_Pin|SPI3_CS_Pin;
 80024be:	f248 0390 	movw	r3, #32912	; 0x8090
 80024c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c4:	2301      	movs	r3, #1
 80024c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024cc:	2300      	movs	r3, #0
 80024ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	4619      	mov	r1, r3
 80024d6:	481f      	ldr	r0, [pc, #124]	; (8002554 <MX_GPIO_Init+0x19c>)
 80024d8:	f001 fd7e 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SC_CLOSING_Pin|SC_STATE_Pin|AIR_N_ACT_Pin|AIR_N_INT_Pin;
 80024dc:	23f0      	movs	r3, #240	; 0xf0
 80024de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e8:	f107 0314 	add.w	r3, r7, #20
 80024ec:	4619      	mov	r1, r3
 80024ee:	4818      	ldr	r0, [pc, #96]	; (8002550 <MX_GPIO_Init+0x198>)
 80024f0:	f001 fd72 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_ACTIVATE_Pin;
 80024f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fa:	2301      	movs	r3, #1
 80024fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002502:	2300      	movs	r3, #0
 8002504:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TS_ACTIVATE_GPIO_Port, &GPIO_InitStruct);
 8002506:	f107 0314 	add.w	r3, r7, #20
 800250a:	4619      	mov	r1, r3
 800250c:	4812      	ldr	r0, [pc, #72]	; (8002558 <MX_GPIO_Init+0x1a0>)
 800250e:	f001 fd63 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DANGER_V_Pin|AIR_P_ACT_Pin|AIR_P_INT_Pin;
 8002512:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8002516:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002518:	2300      	movs	r3, #0
 800251a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251c:	2300      	movs	r3, #0
 800251e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	4619      	mov	r1, r3
 8002526:	480c      	ldr	r0, [pc, #48]	; (8002558 <MX_GPIO_Init+0x1a0>)
 8002528:	f001 fd56 	bl	8003fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PCHRG_ACT_Pin;
 800252c:	2304      	movs	r3, #4
 800252e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002530:	2300      	movs	r3, #0
 8002532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PCHRG_ACT_GPIO_Port, &GPIO_InitStruct);
 8002538:	f107 0314 	add.w	r3, r7, #20
 800253c:	4619      	mov	r1, r3
 800253e:	4807      	ldr	r0, [pc, #28]	; (800255c <MX_GPIO_Init+0x1a4>)
 8002540:	f001 fd4a 	bl	8003fd8 <HAL_GPIO_Init>

}
 8002544:	bf00      	nop
 8002546:	3728      	adds	r7, #40	; 0x28
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40023800 	.word	0x40023800
 8002550:	40020800 	.word	0x40020800
 8002554:	40020000 	.word	0x40020000
 8002558:	40020400 	.word	0x40020400
 800255c:	40020c00 	.word	0x40020c00

08002560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002564:	f000 fad6 	bl	8002b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002568:	f000 f828 	bl	80025bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800256c:	f7ff ff24 	bl	80023b8 <MX_GPIO_Init>
  MX_SPI3_Init();
 8002570:	f000 f870 	bl	8002654 <MX_SPI3_Init>
  MX_TIM2_Init();
 8002574:	f000 fa32 	bl	80029dc <MX_TIM2_Init>
  MX_CAN1_Init();
 8002578:	f7ff fdb0 	bl	80020dc <MX_CAN1_Init>
  MX_CAN2_Init();
 800257c:	f7ff fe02 	bl	8002184 <MX_CAN2_Init>
  MX_USB_DEVICE_Init();
 8002580:	f007 fdde 	bl	800a140 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8002584:	f7ff f854 	bl	8001630 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002588:	f7ff f8a4 	bl	80016d4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  // Start timer
  HAL_TIM_Base_Start_IT(&htim2);
 800258c:	4809      	ldr	r0, [pc, #36]	; (80025b4 <main+0x54>)
 800258e:	f004 faf1 	bl	8006b74 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan1);
 8002592:	4809      	ldr	r0, [pc, #36]	; (80025b8 <main+0x58>)
 8002594:	f000 ff96 	bl	80034c4 <HAL_CAN_Start>
  BMS_init();
 8002598:	f7ff f984 	bl	80018a4 <BMS_init>

    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800259c:	2102      	movs	r1, #2
 800259e:	4806      	ldr	r0, [pc, #24]	; (80025b8 <main+0x58>)
 80025a0:	f001 f9c4 	bl	800392c <HAL_CAN_ActivateNotification>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <main+0x4e>
    {
  	  Error_Handler();
 80025aa:	f000 f84e 	bl	800264a <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 BMS();
 80025ae:	f7ff f97f 	bl	80018b0 <BMS>
 80025b2:	e7fc      	b.n	80025ae <main+0x4e>
 80025b4:	200005a8 	.word	0x200005a8
 80025b8:	200004d8 	.word	0x200004d8

080025bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b092      	sub	sp, #72	; 0x48
 80025c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025c2:	f107 0318 	add.w	r3, r7, #24
 80025c6:	2230      	movs	r2, #48	; 0x30
 80025c8:	2100      	movs	r1, #0
 80025ca:	4618      	mov	r0, r3
 80025cc:	f009 f8d5 	bl	800b77a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025d0:	1d3b      	adds	r3, r7, #4
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
 80025dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025de:	2302      	movs	r3, #2
 80025e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025e2:	2301      	movs	r3, #1
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025e6:	2310      	movs	r3, #16
 80025e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ea:	2302      	movs	r3, #2
 80025ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025ee:	2300      	movs	r3, #0
 80025f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 80025f2:	2308      	movs	r3, #8
 80025f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 80025f6:	23c0      	movs	r3, #192	; 0xc0
 80025f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80025fa:	2304      	movs	r3, #4
 80025fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80025fe:	2308      	movs	r3, #8
 8002600:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002602:	f107 0318 	add.w	r3, r7, #24
 8002606:	4618      	mov	r0, r3
 8002608:	f003 f8e6 	bl	80057d8 <HAL_RCC_OscConfig>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8002612:	f000 f81a 	bl	800264a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002616:	230f      	movs	r3, #15
 8002618:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800261a:	2302      	movs	r3, #2
 800261c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002622:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002628:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800262c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800262e:	1d3b      	adds	r3, r7, #4
 8002630:	2103      	movs	r1, #3
 8002632:	4618      	mov	r0, r3
 8002634:	f003 fb24 	bl	8005c80 <HAL_RCC_ClockConfig>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800263e:	f000 f804 	bl	800264a <Error_Handler>
  }
}
 8002642:	bf00      	nop
 8002644:	3748      	adds	r7, #72	; 0x48
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800264a:	b480      	push	{r7}
 800264c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800264e:	b672      	cpsid	i
}
 8002650:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002652:	e7fe      	b.n	8002652 <Error_Handler+0x8>

08002654 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002658:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <MX_SPI3_Init+0x64>)
 800265a:	4a18      	ldr	r2, [pc, #96]	; (80026bc <MX_SPI3_Init+0x68>)
 800265c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800265e:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <MX_SPI3_Init+0x64>)
 8002660:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002664:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002666:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <MX_SPI3_Init+0x64>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800266c:	4b12      	ldr	r3, [pc, #72]	; (80026b8 <MX_SPI3_Init+0x64>)
 800266e:	2200      	movs	r2, #0
 8002670:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002672:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <MX_SPI3_Init+0x64>)
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002678:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <MX_SPI3_Init+0x64>)
 800267a:	2200      	movs	r2, #0
 800267c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800267e:	4b0e      	ldr	r3, [pc, #56]	; (80026b8 <MX_SPI3_Init+0x64>)
 8002680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002684:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002686:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <MX_SPI3_Init+0x64>)
 8002688:	2220      	movs	r2, #32
 800268a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800268c:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <MX_SPI3_Init+0x64>)
 800268e:	2200      	movs	r2, #0
 8002690:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <MX_SPI3_Init+0x64>)
 8002694:	2200      	movs	r2, #0
 8002696:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002698:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <MX_SPI3_Init+0x64>)
 800269a:	2200      	movs	r2, #0
 800269c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <MX_SPI3_Init+0x64>)
 80026a0:	220a      	movs	r2, #10
 80026a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80026a4:	4804      	ldr	r0, [pc, #16]	; (80026b8 <MX_SPI3_Init+0x64>)
 80026a6:	f003 fca7 	bl	8005ff8 <HAL_SPI_Init>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80026b0:	f7ff ffcb 	bl	800264a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80026b4:	bf00      	nop
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	2000054c 	.word	0x2000054c
 80026bc:	40003c00 	.word	0x40003c00

080026c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a19      	ldr	r2, [pc, #100]	; (8002744 <HAL_SPI_MspInit+0x84>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d12c      	bne.n	800273c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	4b18      	ldr	r3, [pc, #96]	; (8002748 <HAL_SPI_MspInit+0x88>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	4a17      	ldr	r2, [pc, #92]	; (8002748 <HAL_SPI_MspInit+0x88>)
 80026ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
 80026f2:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_SPI_MspInit+0x88>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	4b11      	ldr	r3, [pc, #68]	; (8002748 <HAL_SPI_MspInit+0x88>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4a10      	ldr	r2, [pc, #64]	; (8002748 <HAL_SPI_MspInit+0x88>)
 8002708:	f043 0304 	orr.w	r3, r3, #4
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <HAL_SPI_MspInit+0x88>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800271a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800271e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	2302      	movs	r3, #2
 8002722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002728:	2303      	movs	r3, #3
 800272a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800272c:	2306      	movs	r3, #6
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	4619      	mov	r1, r3
 8002736:	4805      	ldr	r0, [pc, #20]	; (800274c <HAL_SPI_MspInit+0x8c>)
 8002738:	f001 fc4e 	bl	8003fd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800273c:	bf00      	nop
 800273e:	3728      	adds	r7, #40	; 0x28
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40003c00 	.word	0x40003c00
 8002748:	40023800 	.word	0x40023800
 800274c:	40020800 	.word	0x40020800

08002750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002756:	2300      	movs	r3, #0
 8002758:	607b      	str	r3, [r7, #4]
 800275a:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <HAL_MspInit+0x48>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <HAL_MspInit+0x48>)
 8002760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002764:	6453      	str	r3, [r2, #68]	; 0x44
 8002766:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <HAL_MspInit+0x48>)
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	603b      	str	r3, [r7, #0]
 8002776:	4b08      	ldr	r3, [pc, #32]	; (8002798 <HAL_MspInit+0x48>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	4a07      	ldr	r2, [pc, #28]	; (8002798 <HAL_MspInit+0x48>)
 800277c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002780:	6413      	str	r3, [r2, #64]	; 0x40
 8002782:	4b05      	ldr	r3, [pc, #20]	; (8002798 <HAL_MspInit+0x48>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	40023800 	.word	0x40023800

0800279c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027a0:	e7fe      	b.n	80027a0 <NMI_Handler+0x4>

080027a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027a2:	b480      	push	{r7}
 80027a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027a6:	e7fe      	b.n	80027a6 <HardFault_Handler+0x4>

080027a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027ac:	e7fe      	b.n	80027ac <MemManage_Handler+0x4>

080027ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ae:	b480      	push	{r7}
 80027b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027b2:	e7fe      	b.n	80027b2 <BusFault_Handler+0x4>

080027b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027b8:	e7fe      	b.n	80027b8 <UsageFault_Handler+0x4>

080027ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ba:	b480      	push	{r7}
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr

080027d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr

080027de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027e2:	f000 f9e9 	bl	8002bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
	...

080027ec <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80027f0:	4802      	ldr	r0, [pc, #8]	; (80027fc <CAN1_TX_IRQHandler+0x10>)
 80027f2:	f001 f8c0 	bl	8003976 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	200004d8 	.word	0x200004d8

08002800 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002804:	4802      	ldr	r0, [pc, #8]	; (8002810 <CAN1_RX0_IRQHandler+0x10>)
 8002806:	f001 f8b6 	bl	8003976 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	200004d8 	.word	0x200004d8

08002814 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002818:	4802      	ldr	r0, [pc, #8]	; (8002824 <TIM2_IRQHandler+0x10>)
 800281a:	f004 fa19 	bl	8006c50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	200005a8 	.word	0x200005a8

08002828 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800282c:	4802      	ldr	r0, [pc, #8]	; (8002838 <CAN2_RX0_IRQHandler+0x10>)
 800282e:	f001 f8a2 	bl	8003976 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000500 	.word	0x20000500

0800283c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002840:	4802      	ldr	r0, [pc, #8]	; (800284c <OTG_FS_IRQHandler+0x10>)
 8002842:	f001 fed7 	bl	80045f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	200012bc 	.word	0x200012bc

08002850 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return 1;
 8002854:	2301      	movs	r3, #1
}
 8002856:	4618      	mov	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr

0800285e <_kill>:

int _kill(int pid, int sig)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002868:	f008 ffea 	bl	800b840 <__errno>
 800286c:	4603      	mov	r3, r0
 800286e:	2216      	movs	r2, #22
 8002870:	601a      	str	r2, [r3, #0]
  return -1;
 8002872:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <_exit>:

void _exit (int status)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002886:	f04f 31ff 	mov.w	r1, #4294967295
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7ff ffe7 	bl	800285e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002890:	e7fe      	b.n	8002890 <_exit+0x12>

08002892 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b086      	sub	sp, #24
 8002896:	af00      	add	r7, sp, #0
 8002898:	60f8      	str	r0, [r7, #12]
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800289e:	2300      	movs	r3, #0
 80028a0:	617b      	str	r3, [r7, #20]
 80028a2:	e00a      	b.n	80028ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028a4:	f3af 8000 	nop.w
 80028a8:	4601      	mov	r1, r0
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	60ba      	str	r2, [r7, #8]
 80028b0:	b2ca      	uxtb	r2, r1
 80028b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	3301      	adds	r3, #1
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	429a      	cmp	r2, r3
 80028c0:	dbf0      	blt.n	80028a4 <_read+0x12>
  }

  return len;
 80028c2:	687b      	ldr	r3, [r7, #4]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	e009      	b.n	80028f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	60ba      	str	r2, [r7, #8]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	3301      	adds	r3, #1
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	dbf1      	blt.n	80028de <_write+0x12>
    //ITM_SendChar(*ptr++); //Diese Zeile kann gelöscht werden wenn kein printf über SWV mehr gewollt ist
  }
  return len;
 80028fa:	687b      	ldr	r3, [r7, #4]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <_close>:

int _close(int file)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800290c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
 8002922:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800292a:	605a      	str	r2, [r3, #4]
  return 0;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <_isatty>:

int _isatty(int file)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002940:	2301      	movs	r3, #1
}
 8002942:	4618      	mov	r0, r3
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800296c:	4a14      	ldr	r2, [pc, #80]	; (80029c0 <_sbrk+0x5c>)
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <_sbrk+0x60>)
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002978:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <_sbrk+0x64>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d102      	bne.n	8002986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002980:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <_sbrk+0x64>)
 8002982:	4a12      	ldr	r2, [pc, #72]	; (80029cc <_sbrk+0x68>)
 8002984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002986:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <_sbrk+0x64>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4413      	add	r3, r2
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	429a      	cmp	r2, r3
 8002992:	d207      	bcs.n	80029a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002994:	f008 ff54 	bl	800b840 <__errno>
 8002998:	4603      	mov	r3, r0
 800299a:	220c      	movs	r2, #12
 800299c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800299e:	f04f 33ff 	mov.w	r3, #4294967295
 80029a2:	e009      	b.n	80029b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <_sbrk+0x64>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029aa:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <_sbrk+0x64>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	4a05      	ldr	r2, [pc, #20]	; (80029c8 <_sbrk+0x64>)
 80029b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029b6:	68fb      	ldr	r3, [r7, #12]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	2000c000 	.word	0x2000c000
 80029c4:	00000400 	.word	0x00000400
 80029c8:	200005a4 	.word	0x200005a4
 80029cc:	20001910 	.word	0x20001910

080029d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr

080029dc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029e2:	f107 0308 	add.w	r3, r7, #8
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	605a      	str	r2, [r3, #4]
 80029ec:	609a      	str	r2, [r3, #8]
 80029ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029f0:	463b      	mov	r3, r7
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029f8:	4b1d      	ldr	r3, [pc, #116]	; (8002a70 <MX_TIM2_Init+0x94>)
 80029fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 8002a00:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <MX_TIM2_Init+0x94>)
 8002a02:	222f      	movs	r2, #47	; 0x2f
 8002a04:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a06:	4b1a      	ldr	r3, [pc, #104]	; (8002a70 <MX_TIM2_Init+0x94>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8002a0c:	4b18      	ldr	r3, [pc, #96]	; (8002a70 <MX_TIM2_Init+0x94>)
 8002a0e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a14:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <MX_TIM2_Init+0x94>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a1a:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <MX_TIM2_Init+0x94>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a20:	4813      	ldr	r0, [pc, #76]	; (8002a70 <MX_TIM2_Init+0x94>)
 8002a22:	f004 f858 	bl	8006ad6 <HAL_TIM_Base_Init>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002a2c:	f7ff fe0d 	bl	800264a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a36:	f107 0308 	add.w	r3, r7, #8
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	480c      	ldr	r0, [pc, #48]	; (8002a70 <MX_TIM2_Init+0x94>)
 8002a3e:	f004 fa0f 	bl	8006e60 <HAL_TIM_ConfigClockSource>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002a48:	f7ff fdff 	bl	800264a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a50:	2300      	movs	r3, #0
 8002a52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a54:	463b      	mov	r3, r7
 8002a56:	4619      	mov	r1, r3
 8002a58:	4805      	ldr	r0, [pc, #20]	; (8002a70 <MX_TIM2_Init+0x94>)
 8002a5a:	f004 fc21 	bl	80072a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002a64:	f7ff fdf1 	bl	800264a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a68:	bf00      	nop
 8002a6a:	3718      	adds	r7, #24
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	200005a8 	.word	0x200005a8

08002a74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a84:	d115      	bne.n	8002ab2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <HAL_TIM_Base_MspInit+0x48>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	4a0b      	ldr	r2, [pc, #44]	; (8002abc <HAL_TIM_Base_MspInit+0x48>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6413      	str	r3, [r2, #64]	; 0x40
 8002a96:	4b09      	ldr	r3, [pc, #36]	; (8002abc <HAL_TIM_Base_MspInit+0x48>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	201c      	movs	r0, #28
 8002aa8:	f001 fa5f 	bl	8003f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002aac:	201c      	movs	r0, #28
 8002aae:	f001 fa78 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800

08002ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002af8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8002ac4:	f7ff ff84 	bl	80029d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ac8:	480c      	ldr	r0, [pc, #48]	; (8002afc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002aca:	490d      	ldr	r1, [pc, #52]	; (8002b00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002acc:	4a0d      	ldr	r2, [pc, #52]	; (8002b04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ad0:	e002      	b.n	8002ad8 <LoopCopyDataInit>

08002ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ad6:	3304      	adds	r3, #4

08002ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002adc:	d3f9      	bcc.n	8002ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ae0:	4c0a      	ldr	r4, [pc, #40]	; (8002b0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ae4:	e001      	b.n	8002aea <LoopFillZerobss>

08002ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ae8:	3204      	adds	r2, #4

08002aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aec:	d3fb      	bcc.n	8002ae6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002aee:	f008 fead 	bl	800b84c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002af2:	f7ff fd35 	bl	8002560 <main>
  bx  lr    
 8002af6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002af8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b00:	20000378 	.word	0x20000378
  ldr r2, =_sidata
 8002b04:	0800e06c 	.word	0x0800e06c
  ldr r2, =_sbss
 8002b08:	20000378 	.word	0x20000378
  ldr r4, =_ebss
 8002b0c:	2000190c 	.word	0x2000190c

08002b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b10:	e7fe      	b.n	8002b10 <ADC_IRQHandler>
	...

08002b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b18:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <HAL_Init+0x40>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a0d      	ldr	r2, [pc, #52]	; (8002b54 <HAL_Init+0x40>)
 8002b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_Init+0x40>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a0a      	ldr	r2, [pc, #40]	; (8002b54 <HAL_Init+0x40>)
 8002b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b30:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <HAL_Init+0x40>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a07      	ldr	r2, [pc, #28]	; (8002b54 <HAL_Init+0x40>)
 8002b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b3c:	2003      	movs	r0, #3
 8002b3e:	f001 fa09 	bl	8003f54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b42:	200f      	movs	r0, #15
 8002b44:	f000 f808 	bl	8002b58 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002b48:	f7ff fe02 	bl	8002750 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40023c00 	.word	0x40023c00

08002b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b60:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_InitTick+0x54>)
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <HAL_InitTick+0x58>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b76:	4618      	mov	r0, r3
 8002b78:	f001 fa21 	bl	8003fbe <HAL_SYSTICK_Config>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e00e      	b.n	8002ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b0f      	cmp	r3, #15
 8002b8a:	d80a      	bhi.n	8002ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	f04f 30ff 	mov.w	r0, #4294967295
 8002b94:	f001 f9e9 	bl	8003f6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b98:	4a06      	ldr	r2, [pc, #24]	; (8002bb4 <HAL_InitTick+0x5c>)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e000      	b.n	8002ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	20000034 	.word	0x20000034
 8002bb0:	2000003c 	.word	0x2000003c
 8002bb4:	20000038 	.word	0x20000038

08002bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bbc:	4b05      	ldr	r3, [pc, #20]	; (8002bd4 <HAL_IncTick+0x1c>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <HAL_IncTick+0x20>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	4a03      	ldr	r2, [pc, #12]	; (8002bd8 <HAL_IncTick+0x20>)
 8002bca:	6013      	str	r3, [r2, #0]
}
 8002bcc:	bf00      	nop
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr
 8002bd4:	2000003c 	.word	0x2000003c
 8002bd8:	200005f0 	.word	0x200005f0

08002bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return uwTick;
 8002be0:	4b02      	ldr	r3, [pc, #8]	; (8002bec <HAL_GetTick+0x10>)
 8002be2:	681b      	ldr	r3, [r3, #0]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	200005f0 	.word	0x200005f0

08002bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bf8:	f7ff fff0 	bl	8002bdc <HAL_GetTick>
 8002bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c08:	d005      	beq.n	8002c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <HAL_Delay+0x44>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4413      	add	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c16:	bf00      	nop
 8002c18:	f7ff ffe0 	bl	8002bdc <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d8f7      	bhi.n	8002c18 <HAL_Delay+0x28>
  {
  }
}
 8002c28:	bf00      	nop
 8002c2a:	bf00      	nop
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	2000003c 	.word	0x2000003c

08002c38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e033      	b.n	8002cb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d109      	bne.n	8002c6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fe fd8e 	bl	8001778 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f003 0310 	and.w	r3, r3, #16
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d118      	bne.n	8002ca8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c7e:	f023 0302 	bic.w	r3, r3, #2
 8002c82:	f043 0202 	orr.w	r2, r3, #2
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f938 	bl	8002f00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f023 0303 	bic.w	r3, r3, #3
 8002c9e:	f043 0201 	orr.w	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	641a      	str	r2, [r3, #64]	; 0x40
 8002ca6:	e001      	b.n	8002cac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x1c>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e103      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x224>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b09      	cmp	r3, #9
 8002cea:	d925      	bls.n	8002d38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68d9      	ldr	r1, [r3, #12]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	3b1e      	subs	r3, #30
 8002d02:	2207      	movs	r2, #7
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43da      	mvns	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	400a      	ands	r2, r1
 8002d10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68d9      	ldr	r1, [r3, #12]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	4618      	mov	r0, r3
 8002d24:	4603      	mov	r3, r0
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	4403      	add	r3, r0
 8002d2a:	3b1e      	subs	r3, #30
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	e022      	b.n	8002d7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6919      	ldr	r1, [r3, #16]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	461a      	mov	r2, r3
 8002d46:	4613      	mov	r3, r2
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	4413      	add	r3, r2
 8002d4c:	2207      	movs	r2, #7
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	43da      	mvns	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	400a      	ands	r2, r1
 8002d5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6919      	ldr	r1, [r3, #16]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	4603      	mov	r3, r0
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4403      	add	r3, r0
 8002d74:	409a      	lsls	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d824      	bhi.n	8002dd0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	3b05      	subs	r3, #5
 8002d98:	221f      	movs	r2, #31
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	400a      	ands	r2, r1
 8002da6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	4618      	mov	r0, r3
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4413      	add	r3, r2
 8002dc0:	3b05      	subs	r3, #5
 8002dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	635a      	str	r2, [r3, #52]	; 0x34
 8002dce:	e04c      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b0c      	cmp	r3, #12
 8002dd6:	d824      	bhi.n	8002e22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	3b23      	subs	r3, #35	; 0x23
 8002dea:	221f      	movs	r2, #31
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	43da      	mvns	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	400a      	ands	r2, r1
 8002df8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	4618      	mov	r0, r3
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	3b23      	subs	r3, #35	; 0x23
 8002e14:	fa00 f203 	lsl.w	r2, r0, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	631a      	str	r2, [r3, #48]	; 0x30
 8002e20:	e023      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	3b41      	subs	r3, #65	; 0x41
 8002e34:	221f      	movs	r2, #31
 8002e36:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3a:	43da      	mvns	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	400a      	ands	r2, r1
 8002e42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	4618      	mov	r0, r3
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3b41      	subs	r3, #65	; 0x41
 8002e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a20      	ldr	r2, [pc, #128]	; (8002ef0 <HAL_ADC_ConfigChannel+0x230>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d109      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x1c8>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b12      	cmp	r3, #18
 8002e7a:	d105      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002e7c:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <HAL_ADC_ConfigChannel+0x234>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	4a1c      	ldr	r2, [pc, #112]	; (8002ef4 <HAL_ADC_ConfigChannel+0x234>)
 8002e82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e86:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a18      	ldr	r2, [pc, #96]	; (8002ef0 <HAL_ADC_ConfigChannel+0x230>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d123      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x21a>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b10      	cmp	r3, #16
 8002e98:	d003      	beq.n	8002ea2 <HAL_ADC_ConfigChannel+0x1e2>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b11      	cmp	r3, #17
 8002ea0:	d11b      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002ea2:	4b14      	ldr	r3, [pc, #80]	; (8002ef4 <HAL_ADC_ConfigChannel+0x234>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4a13      	ldr	r2, [pc, #76]	; (8002ef4 <HAL_ADC_ConfigChannel+0x234>)
 8002ea8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002eac:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b10      	cmp	r3, #16
 8002eb4:	d111      	bne.n	8002eda <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <HAL_ADC_ConfigChannel+0x238>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a10      	ldr	r2, [pc, #64]	; (8002efc <HAL_ADC_ConfigChannel+0x23c>)
 8002ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec0:	0c9a      	lsrs	r2, r3, #18
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002ecc:	e002      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f9      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40012000 	.word	0x40012000
 8002ef4:	40012300 	.word	0x40012300
 8002ef8:	20000034 	.word	0x20000034
 8002efc:	431bde83 	.word	0x431bde83

08002f00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002f08:	4b7e      	ldr	r3, [pc, #504]	; (8003104 <ADC_Init+0x204>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4a7d      	ldr	r2, [pc, #500]	; (8003104 <ADC_Init+0x204>)
 8002f0e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002f12:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002f14:	4b7b      	ldr	r3, [pc, #492]	; (8003104 <ADC_Init+0x204>)
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4979      	ldr	r1, [pc, #484]	; (8003104 <ADC_Init+0x204>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6859      	ldr	r1, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	021a      	lsls	r2, r3, #8
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6859      	ldr	r1, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6899      	ldr	r1, [r3, #8]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8e:	4a5e      	ldr	r2, [pc, #376]	; (8003108 <ADC_Init+0x208>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d022      	beq.n	8002fda <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fa2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6899      	ldr	r1, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fc4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6899      	ldr	r1, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	e00f      	b.n	8002ffa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fe8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ff8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689a      	ldr	r2, [r3, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0202 	bic.w	r2, r2, #2
 8003008:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6899      	ldr	r1, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	7e1b      	ldrb	r3, [r3, #24]
 8003014:	005a      	lsls	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d027      	beq.n	8003078 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003036:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003046:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304c:	3b01      	subs	r3, #1
 800304e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8003052:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	fa92 f2a2 	rbit	r2, r2
 800305a:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	fab2 f282 	clz	r2, r2
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	fa03 f102 	lsl.w	r1, r3, r2
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	e007      	b.n	8003088 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003086:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003096:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	051a      	lsls	r2, r3, #20
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6899      	ldr	r1, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030ca:	025a      	lsls	r2, r3, #9
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6899      	ldr	r1, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	029a      	lsls	r2, r3, #10
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	609a      	str	r2, [r3, #8]
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	40012300 	.word	0x40012300
 8003108:	0f000001 	.word	0x0f000001

0800310c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e0ed      	b.n	80032fa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d102      	bne.n	8003130 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7ff f860 	bl	80021f0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003140:	f7ff fd4c 	bl	8002bdc <HAL_GetTick>
 8003144:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003146:	e012      	b.n	800316e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003148:	f7ff fd48 	bl	8002bdc <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b0a      	cmp	r3, #10
 8003154:	d90b      	bls.n	800316e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2205      	movs	r2, #5
 8003166:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0c5      	b.n	80032fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0e5      	beq.n	8003148 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0202 	bic.w	r2, r2, #2
 800318a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800318c:	f7ff fd26 	bl	8002bdc <HAL_GetTick>
 8003190:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003192:	e012      	b.n	80031ba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003194:	f7ff fd22 	bl	8002bdc <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b0a      	cmp	r3, #10
 80031a0:	d90b      	bls.n	80031ba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2205      	movs	r2, #5
 80031b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e09f      	b.n	80032fa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1e5      	bne.n	8003194 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7e1b      	ldrb	r3, [r3, #24]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d108      	bne.n	80031e2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	e007      	b.n	80031f2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	7e5b      	ldrb	r3, [r3, #25]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d108      	bne.n	800320c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	e007      	b.n	800321c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800321a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	7e9b      	ldrb	r3, [r3, #26]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d108      	bne.n	8003236 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0220 	orr.w	r2, r2, #32
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	e007      	b.n	8003246 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0220 	bic.w	r2, r2, #32
 8003244:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	7edb      	ldrb	r3, [r3, #27]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d108      	bne.n	8003260 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0210 	bic.w	r2, r2, #16
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	e007      	b.n	8003270 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0210 	orr.w	r2, r2, #16
 800326e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	7f1b      	ldrb	r3, [r3, #28]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d108      	bne.n	800328a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0208 	orr.w	r2, r2, #8
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	e007      	b.n	800329a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0208 	bic.w	r2, r2, #8
 8003298:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	7f5b      	ldrb	r3, [r3, #29]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d108      	bne.n	80032b4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0204 	orr.w	r2, r2, #4
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	e007      	b.n	80032c4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0204 	bic.w	r2, r2, #4
 80032c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	ea42 0103 	orr.w	r1, r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	1e5a      	subs	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003304:	b480      	push	{r7}
 8003306:	b087      	sub	sp, #28
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3020 	ldrb.w	r3, [r3, #32]
 800331a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800331c:	7cfb      	ldrb	r3, [r7, #19]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d003      	beq.n	800332a <HAL_CAN_ConfigFilter+0x26>
 8003322:	7cfb      	ldrb	r3, [r7, #19]
 8003324:	2b02      	cmp	r3, #2
 8003326:	f040 80be 	bne.w	80034a6 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800332a:	4b65      	ldr	r3, [pc, #404]	; (80034c0 <HAL_CAN_ConfigFilter+0x1bc>)
 800332c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003334:	f043 0201 	orr.w	r2, r3, #1
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003344:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	021b      	lsls	r3, r3, #8
 800335a:	431a      	orrs	r2, r3
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	2201      	movs	r2, #1
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	43db      	mvns	r3, r3
 800337c:	401a      	ands	r2, r3
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	69db      	ldr	r3, [r3, #28]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d123      	bne.n	80033d4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	43db      	mvns	r3, r3
 8003396:	401a      	ands	r2, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80033ae:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	3248      	adds	r2, #72	; 0x48
 80033b4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80033c8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80033ca:	6979      	ldr	r1, [r7, #20]
 80033cc:	3348      	adds	r3, #72	; 0x48
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	440b      	add	r3, r1
 80033d2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	69db      	ldr	r3, [r3, #28]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d122      	bne.n	8003422 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	431a      	orrs	r2, r3
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80033fc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	3248      	adds	r2, #72	; 0x48
 8003402:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003416:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003418:	6979      	ldr	r1, [r7, #20]
 800341a:	3348      	adds	r3, #72	; 0x48
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	440b      	add	r3, r1
 8003420:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	43db      	mvns	r3, r3
 8003434:	401a      	ands	r2, r3
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800343c:	e007      	b.n	800344e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	431a      	orrs	r2, r3
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d109      	bne.n	800346a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	43db      	mvns	r3, r3
 8003460:	401a      	ands	r2, r3
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003468:	e007      	b.n	800347a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	431a      	orrs	r2, r3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d107      	bne.n	8003492 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	431a      	orrs	r2, r3
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003498:	f023 0201 	bic.w	r2, r3, #1
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	e006      	b.n	80034b4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
  }
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	371c      	adds	r7, #28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40006400 	.word	0x40006400

080034c4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d12e      	bne.n	8003536 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034f0:	f7ff fb74 	bl	8002bdc <HAL_GetTick>
 80034f4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80034f6:	e012      	b.n	800351e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034f8:	f7ff fb70 	bl	8002bdc <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b0a      	cmp	r3, #10
 8003504:	d90b      	bls.n	800351e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2205      	movs	r2, #5
 8003516:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e012      	b.n	8003544 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1e5      	bne.n	80034f8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	e006      	b.n	8003544 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
  }
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800354c:	b480      	push	{r7}
 800354e:	b089      	sub	sp, #36	; 0x24
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003560:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800356a:	7ffb      	ldrb	r3, [r7, #31]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d003      	beq.n	8003578 <HAL_CAN_AddTxMessage+0x2c>
 8003570:	7ffb      	ldrb	r3, [r7, #31]
 8003572:	2b02      	cmp	r3, #2
 8003574:	f040 80ad 	bne.w	80036d2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10a      	bne.n	8003598 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003588:	2b00      	cmp	r3, #0
 800358a:	d105      	bne.n	8003598 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 8095 	beq.w	80036c2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	0e1b      	lsrs	r3, r3, #24
 800359c:	f003 0303 	and.w	r3, r3, #3
 80035a0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80035a2:	2201      	movs	r2, #1
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	409a      	lsls	r2, r3
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10d      	bne.n	80035d0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80035be:	68f9      	ldr	r1, [r7, #12]
 80035c0:	6809      	ldr	r1, [r1, #0]
 80035c2:	431a      	orrs	r2, r3
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	3318      	adds	r3, #24
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	440b      	add	r3, r1
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	e00f      	b.n	80035f0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035da:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035e0:	68f9      	ldr	r1, [r7, #12]
 80035e2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80035e4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	3318      	adds	r3, #24
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	440b      	add	r3, r1
 80035ee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6819      	ldr	r1, [r3, #0]
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	3318      	adds	r3, #24
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	440b      	add	r3, r1
 8003600:	3304      	adds	r3, #4
 8003602:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	7d1b      	ldrb	r3, [r3, #20]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d111      	bne.n	8003630 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	3318      	adds	r3, #24
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	4413      	add	r3, r2
 8003618:	3304      	adds	r3, #4
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	6811      	ldr	r1, [r2, #0]
 8003620:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	3318      	adds	r3, #24
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	440b      	add	r3, r1
 800362c:	3304      	adds	r3, #4
 800362e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3307      	adds	r3, #7
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	061a      	lsls	r2, r3, #24
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3306      	adds	r3, #6
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	041b      	lsls	r3, r3, #16
 8003640:	431a      	orrs	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	3305      	adds	r3, #5
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	021b      	lsls	r3, r3, #8
 800364a:	4313      	orrs	r3, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	3204      	adds	r2, #4
 8003650:	7812      	ldrb	r2, [r2, #0]
 8003652:	4610      	mov	r0, r2
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	6811      	ldr	r1, [r2, #0]
 8003658:	ea43 0200 	orr.w	r2, r3, r0
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	440b      	add	r3, r1
 8003662:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003666:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3303      	adds	r3, #3
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	061a      	lsls	r2, r3, #24
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3302      	adds	r3, #2
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	041b      	lsls	r3, r3, #16
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3301      	adds	r3, #1
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	4313      	orrs	r3, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	7812      	ldrb	r2, [r2, #0]
 8003688:	4610      	mov	r0, r2
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	6811      	ldr	r1, [r2, #0]
 800368e:	ea43 0200 	orr.w	r2, r3, r0
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	440b      	add	r3, r1
 8003698:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800369c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	3318      	adds	r3, #24
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	4413      	add	r3, r2
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	6811      	ldr	r1, [r2, #0]
 80036b0:	f043 0201 	orr.w	r2, r3, #1
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	3318      	adds	r3, #24
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	440b      	add	r3, r1
 80036bc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	e00e      	b.n	80036e0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e006      	b.n	80036e0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
  }
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3724      	adds	r7, #36	; 0x24
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr

080036ea <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80036ea:	b480      	push	{r7}
 80036ec:	b087      	sub	sp, #28
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036fe:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003700:	7dfb      	ldrb	r3, [r7, #23]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d003      	beq.n	800370e <HAL_CAN_GetRxMessage+0x24>
 8003706:	7dfb      	ldrb	r3, [r7, #23]
 8003708:	2b02      	cmp	r3, #2
 800370a:	f040 8103 	bne.w	8003914 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10e      	bne.n	8003732 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	2b00      	cmp	r3, #0
 8003720:	d116      	bne.n	8003750 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e0f7      	b.n	8003922 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d107      	bne.n	8003750 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e0e8      	b.n	8003922 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	331b      	adds	r3, #27
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	4413      	add	r3, r2
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0204 	and.w	r2, r3, #4
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10c      	bne.n	8003788 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	331b      	adds	r3, #27
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	4413      	add	r3, r2
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	0d5b      	lsrs	r3, r3, #21
 800377e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	e00b      	b.n	80037a0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	331b      	adds	r3, #27
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	4413      	add	r3, r2
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	08db      	lsrs	r3, r3, #3
 8003798:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	331b      	adds	r3, #27
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	4413      	add	r3, r2
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0202 	and.w	r2, r3, #2
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	331b      	adds	r3, #27
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	4413      	add	r3, r2
 80037c2:	3304      	adds	r3, #4
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2208      	movs	r2, #8
 80037d2:	611a      	str	r2, [r3, #16]
 80037d4:	e00b      	b.n	80037ee <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	331b      	adds	r3, #27
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	4413      	add	r3, r2
 80037e2:	3304      	adds	r3, #4
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 020f 	and.w	r2, r3, #15
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	331b      	adds	r3, #27
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	4413      	add	r3, r2
 80037fa:	3304      	adds	r3, #4
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	0a1b      	lsrs	r3, r3, #8
 8003800:	b2da      	uxtb	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	331b      	adds	r3, #27
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	4413      	add	r3, r2
 8003812:	3304      	adds	r3, #4
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	0c1b      	lsrs	r3, r3, #16
 8003818:	b29a      	uxth	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	4413      	add	r3, r2
 8003828:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	b2da      	uxtb	r2, r3
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	4413      	add	r3, r2
 800383e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	0a1a      	lsrs	r2, r3, #8
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	3301      	adds	r3, #1
 800384a:	b2d2      	uxtb	r2, r2
 800384c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	4413      	add	r3, r2
 8003858:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	0c1a      	lsrs	r2, r3, #16
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	3302      	adds	r3, #2
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	4413      	add	r3, r2
 8003872:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	0e1a      	lsrs	r2, r3, #24
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	3303      	adds	r3, #3
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	4413      	add	r3, r2
 800388c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	3304      	adds	r3, #4
 8003896:	b2d2      	uxtb	r2, r2
 8003898:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	0a1a      	lsrs	r2, r3, #8
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	3305      	adds	r3, #5
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	4413      	add	r3, r2
 80038be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	0c1a      	lsrs	r2, r3, #16
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	3306      	adds	r3, #6
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	0e1a      	lsrs	r2, r3, #24
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	3307      	adds	r3, #7
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d108      	bne.n	8003900 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0220 	orr.w	r2, r2, #32
 80038fc:	60da      	str	r2, [r3, #12]
 80038fe:	e007      	b.n	8003910 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691a      	ldr	r2, [r3, #16]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0220 	orr.w	r2, r2, #32
 800390e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	e006      	b.n	8003922 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
  }
}
 8003922:	4618      	mov	r0, r3
 8003924:	371c      	adds	r7, #28
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr

0800392c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3020 	ldrb.w	r3, [r3, #32]
 800393c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d002      	beq.n	800394a <HAL_CAN_ActivateNotification+0x1e>
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d109      	bne.n	800395e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6959      	ldr	r1, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	e006      	b.n	800396c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
  }
}
 800396c:	4618      	mov	r0, r3
 800396e:	3714      	adds	r7, #20
 8003970:	46bd      	mov	sp, r7
 8003972:	bc80      	pop	{r7}
 8003974:	4770      	bx	lr

08003976 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b08a      	sub	sp, #40	; 0x28
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800397e:	2300      	movs	r3, #0
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d07c      	beq.n	8003ab6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d023      	beq.n	8003a0e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2201      	movs	r2, #1
 80039cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f983 	bl	8003ce4 <HAL_CAN_TxMailbox0CompleteCallback>
 80039de:	e016      	b.n	8003a0e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d004      	beq.n	80039f4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039f0:	627b      	str	r3, [r7, #36]	; 0x24
 80039f2:	e00c      	b.n	8003a0e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d004      	beq.n	8003a08 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
 8003a06:	e002      	b.n	8003a0e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f986 	bl	8003d1a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d024      	beq.n	8003a62 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a20:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f962 	bl	8003cf6 <HAL_CAN_TxMailbox1CompleteCallback>
 8003a32:	e016      	b.n	8003a62 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d004      	beq.n	8003a48 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
 8003a46:	e00c      	b.n	8003a62 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d004      	beq.n	8003a5c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5a:	e002      	b.n	8003a62 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 f965 	bl	8003d2c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d024      	beq.n	8003ab6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a74:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d003      	beq.n	8003a88 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f941 	bl	8003d08 <HAL_CAN_TxMailbox2CompleteCallback>
 8003a86:	e016      	b.n	8003ab6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d004      	beq.n	8003a9c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a98:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9a:	e00c      	b.n	8003ab6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d004      	beq.n	8003ab0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
 8003aae:	e002      	b.n	8003ab6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f944 	bl	8003d3e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	f003 0308 	and.w	r3, r3, #8
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00c      	beq.n	8003ada <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	f003 0310 	and.w	r3, r3, #16
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d007      	beq.n	8003ada <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2210      	movs	r2, #16
 8003ad8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00b      	beq.n	8003afc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f003 0308 	and.w	r3, r3, #8
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d006      	beq.n	8003afc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2208      	movs	r2, #8
 8003af4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f92a 	bl	8003d50 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7fd fead 	bl	8001874 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d00c      	beq.n	8003b3e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d007      	beq.n	8003b3e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2210      	movs	r2, #16
 8003b3c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	f003 0320 	and.w	r3, r3, #32
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00b      	beq.n	8003b60 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d006      	beq.n	8003b60 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2208      	movs	r2, #8
 8003b58:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f90a 	bl	8003d74 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	f003 0310 	and.w	r3, r3, #16
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d009      	beq.n	8003b7e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0303 	and.w	r3, r3, #3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f8f2 	bl	8003d62 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00b      	beq.n	8003ba0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	f003 0310 	and.w	r3, r3, #16
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d006      	beq.n	8003ba0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2210      	movs	r2, #16
 8003b98:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f8f3 	bl	8003d86 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00b      	beq.n	8003bc2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d006      	beq.n	8003bc2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2208      	movs	r2, #8
 8003bba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f8eb 	bl	8003d98 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d07b      	beq.n	8003cc4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d072      	beq.n	8003cbc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	f043 0302 	orr.w	r3, r3, #2
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	f043 0304 	orr.w	r3, r3, #4
 8003c28:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d043      	beq.n	8003cbc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d03e      	beq.n	8003cbc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c44:	2b60      	cmp	r3, #96	; 0x60
 8003c46:	d02b      	beq.n	8003ca0 <HAL_CAN_IRQHandler+0x32a>
 8003c48:	2b60      	cmp	r3, #96	; 0x60
 8003c4a:	d82e      	bhi.n	8003caa <HAL_CAN_IRQHandler+0x334>
 8003c4c:	2b50      	cmp	r3, #80	; 0x50
 8003c4e:	d022      	beq.n	8003c96 <HAL_CAN_IRQHandler+0x320>
 8003c50:	2b50      	cmp	r3, #80	; 0x50
 8003c52:	d82a      	bhi.n	8003caa <HAL_CAN_IRQHandler+0x334>
 8003c54:	2b40      	cmp	r3, #64	; 0x40
 8003c56:	d019      	beq.n	8003c8c <HAL_CAN_IRQHandler+0x316>
 8003c58:	2b40      	cmp	r3, #64	; 0x40
 8003c5a:	d826      	bhi.n	8003caa <HAL_CAN_IRQHandler+0x334>
 8003c5c:	2b30      	cmp	r3, #48	; 0x30
 8003c5e:	d010      	beq.n	8003c82 <HAL_CAN_IRQHandler+0x30c>
 8003c60:	2b30      	cmp	r3, #48	; 0x30
 8003c62:	d822      	bhi.n	8003caa <HAL_CAN_IRQHandler+0x334>
 8003c64:	2b10      	cmp	r3, #16
 8003c66:	d002      	beq.n	8003c6e <HAL_CAN_IRQHandler+0x2f8>
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d005      	beq.n	8003c78 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003c6c:	e01d      	b.n	8003caa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	f043 0308 	orr.w	r3, r3, #8
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c76:	e019      	b.n	8003cac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	f043 0310 	orr.w	r3, r3, #16
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c80:	e014      	b.n	8003cac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	f043 0320 	orr.w	r3, r3, #32
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c8a:	e00f      	b.n	8003cac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c94:	e00a      	b.n	8003cac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003c9e:	e005      	b.n	8003cac <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ca8:	e000      	b.n	8003cac <HAL_CAN_IRQHandler+0x336>
            break;
 8003caa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699a      	ldr	r2, [r3, #24]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003cba:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d008      	beq.n	8003cdc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	431a      	orrs	r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f867 	bl	8003daa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003cdc:	bf00      	nop
 8003cde:	3728      	adds	r7, #40	; 0x28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr

08003d08 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr

08003d1a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr

08003d2c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bc80      	pop	{r7}
 8003d3c:	4770      	bx	lr

08003d3e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bc80      	pop	{r7}
 8003d4e:	4770      	bx	lr

08003d50 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr

08003d62 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr

08003d74 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bc80      	pop	{r7}
 8003d84:	4770      	bx	lr

08003d86 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr

08003d98 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr

08003daa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr

08003dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <__NVIC_SetPriorityGrouping+0x44>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dd8:	4013      	ands	r3, r2
 8003dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dee:	4a04      	ldr	r2, [pc, #16]	; (8003e00 <__NVIC_SetPriorityGrouping+0x44>)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	60d3      	str	r3, [r2, #12]
}
 8003df4:	bf00      	nop
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc80      	pop	{r7}
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	e000ed00 	.word	0xe000ed00

08003e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e08:	4b04      	ldr	r3, [pc, #16]	; (8003e1c <__NVIC_GetPriorityGrouping+0x18>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	0a1b      	lsrs	r3, r3, #8
 8003e0e:	f003 0307 	and.w	r3, r3, #7
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	e000ed00 	.word	0xe000ed00

08003e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	db0b      	blt.n	8003e4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	f003 021f 	and.w	r2, r3, #31
 8003e38:	4906      	ldr	r1, [pc, #24]	; (8003e54 <__NVIC_EnableIRQ+0x34>)
 8003e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	2001      	movs	r0, #1
 8003e42:	fa00 f202 	lsl.w	r2, r0, r2
 8003e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr
 8003e54:	e000e100 	.word	0xe000e100

08003e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	6039      	str	r1, [r7, #0]
 8003e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	db0a      	blt.n	8003e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	490c      	ldr	r1, [pc, #48]	; (8003ea4 <__NVIC_SetPriority+0x4c>)
 8003e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e76:	0112      	lsls	r2, r2, #4
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e80:	e00a      	b.n	8003e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	4908      	ldr	r1, [pc, #32]	; (8003ea8 <__NVIC_SetPriority+0x50>)
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	3b04      	subs	r3, #4
 8003e90:	0112      	lsls	r2, r2, #4
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	440b      	add	r3, r1
 8003e96:	761a      	strb	r2, [r3, #24]
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bc80      	pop	{r7}
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	e000e100 	.word	0xe000e100
 8003ea8:	e000ed00 	.word	0xe000ed00

08003eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b089      	sub	sp, #36	; 0x24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f003 0307 	and.w	r3, r3, #7
 8003ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f1c3 0307 	rsb	r3, r3, #7
 8003ec6:	2b04      	cmp	r3, #4
 8003ec8:	bf28      	it	cs
 8003eca:	2304      	movcs	r3, #4
 8003ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	2b06      	cmp	r3, #6
 8003ed4:	d902      	bls.n	8003edc <NVIC_EncodePriority+0x30>
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	3b03      	subs	r3, #3
 8003eda:	e000      	b.n	8003ede <NVIC_EncodePriority+0x32>
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	43da      	mvns	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	401a      	ands	r2, r3
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	fa01 f303 	lsl.w	r3, r1, r3
 8003efe:	43d9      	mvns	r1, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f04:	4313      	orrs	r3, r2
         );
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3724      	adds	r7, #36	; 0x24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bc80      	pop	{r7}
 8003f0e:	4770      	bx	lr

08003f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f20:	d301      	bcc.n	8003f26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f22:	2301      	movs	r3, #1
 8003f24:	e00f      	b.n	8003f46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f26:	4a0a      	ldr	r2, [pc, #40]	; (8003f50 <SysTick_Config+0x40>)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f2e:	210f      	movs	r1, #15
 8003f30:	f04f 30ff 	mov.w	r0, #4294967295
 8003f34:	f7ff ff90 	bl	8003e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <SysTick_Config+0x40>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f3e:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <SysTick_Config+0x40>)
 8003f40:	2207      	movs	r2, #7
 8003f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	e000e010 	.word	0xe000e010

08003f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff ff2d 	bl	8003dbc <__NVIC_SetPriorityGrouping>
}
 8003f62:	bf00      	nop
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b086      	sub	sp, #24
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	4603      	mov	r3, r0
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]
 8003f76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f7c:	f7ff ff42 	bl	8003e04 <__NVIC_GetPriorityGrouping>
 8003f80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	6978      	ldr	r0, [r7, #20]
 8003f88:	f7ff ff90 	bl	8003eac <NVIC_EncodePriority>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f92:	4611      	mov	r1, r2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff ff5f 	bl	8003e58 <__NVIC_SetPriority>
}
 8003f9a:	bf00      	nop
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	4603      	mov	r3, r0
 8003faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff ff35 	bl	8003e20 <__NVIC_EnableIRQ>
}
 8003fb6:	bf00      	nop
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff ffa2 	bl	8003f10 <SysTick_Config>
 8003fcc:	4603      	mov	r3, r0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fe6:	e16f      	b.n	80042c8 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	2101      	movs	r1, #1
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 8161 	beq.w	80042c2 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	2b01      	cmp	r3, #1
 800400a:	d005      	beq.n	8004018 <HAL_GPIO_Init+0x40>
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 0303 	and.w	r3, r3, #3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d130      	bne.n	800407a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	2203      	movs	r2, #3
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	43db      	mvns	r3, r3
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4013      	ands	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800404e:	2201      	movs	r2, #1
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	43db      	mvns	r3, r3
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4013      	ands	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	091b      	lsrs	r3, r3, #4
 8004064:	f003 0201 	and.w	r2, r3, #1
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f003 0303 	and.w	r3, r3, #3
 8004082:	2b03      	cmp	r3, #3
 8004084:	d017      	beq.n	80040b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	2203      	movs	r2, #3
 8004092:	fa02 f303 	lsl.w	r3, r2, r3
 8004096:	43db      	mvns	r3, r3
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4013      	ands	r3, r2
 800409c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	689a      	ldr	r2, [r3, #8]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d123      	bne.n	800410a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	08da      	lsrs	r2, r3, #3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3208      	adds	r2, #8
 80040ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	220f      	movs	r2, #15
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43db      	mvns	r3, r3
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4013      	ands	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	691a      	ldr	r2, [r3, #16]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	08da      	lsrs	r2, r3, #3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3208      	adds	r2, #8
 8004104:	6939      	ldr	r1, [r7, #16]
 8004106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	2203      	movs	r2, #3
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43db      	mvns	r3, r3
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4013      	ands	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f003 0203 	and.w	r2, r3, #3
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 80bb 	beq.w	80042c2 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800414c:	2300      	movs	r3, #0
 800414e:	60bb      	str	r3, [r7, #8]
 8004150:	4b64      	ldr	r3, [pc, #400]	; (80042e4 <HAL_GPIO_Init+0x30c>)
 8004152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004154:	4a63      	ldr	r2, [pc, #396]	; (80042e4 <HAL_GPIO_Init+0x30c>)
 8004156:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800415a:	6453      	str	r3, [r2, #68]	; 0x44
 800415c:	4b61      	ldr	r3, [pc, #388]	; (80042e4 <HAL_GPIO_Init+0x30c>)
 800415e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004164:	60bb      	str	r3, [r7, #8]
 8004166:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004168:	4a5f      	ldr	r2, [pc, #380]	; (80042e8 <HAL_GPIO_Init+0x310>)
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	089b      	lsrs	r3, r3, #2
 800416e:	3302      	adds	r3, #2
 8004170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004174:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f003 0303 	and.w	r3, r3, #3
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	220f      	movs	r2, #15
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	43db      	mvns	r3, r3
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4013      	ands	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a57      	ldr	r2, [pc, #348]	; (80042ec <HAL_GPIO_Init+0x314>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d031      	beq.n	80041f8 <HAL_GPIO_Init+0x220>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4a56      	ldr	r2, [pc, #344]	; (80042f0 <HAL_GPIO_Init+0x318>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d02b      	beq.n	80041f4 <HAL_GPIO_Init+0x21c>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a55      	ldr	r2, [pc, #340]	; (80042f4 <HAL_GPIO_Init+0x31c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d025      	beq.n	80041f0 <HAL_GPIO_Init+0x218>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a54      	ldr	r2, [pc, #336]	; (80042f8 <HAL_GPIO_Init+0x320>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d01f      	beq.n	80041ec <HAL_GPIO_Init+0x214>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a53      	ldr	r2, [pc, #332]	; (80042fc <HAL_GPIO_Init+0x324>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d019      	beq.n	80041e8 <HAL_GPIO_Init+0x210>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a52      	ldr	r2, [pc, #328]	; (8004300 <HAL_GPIO_Init+0x328>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d013      	beq.n	80041e4 <HAL_GPIO_Init+0x20c>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a51      	ldr	r2, [pc, #324]	; (8004304 <HAL_GPIO_Init+0x32c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00d      	beq.n	80041e0 <HAL_GPIO_Init+0x208>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a50      	ldr	r2, [pc, #320]	; (8004308 <HAL_GPIO_Init+0x330>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d007      	beq.n	80041dc <HAL_GPIO_Init+0x204>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a4f      	ldr	r2, [pc, #316]	; (800430c <HAL_GPIO_Init+0x334>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d101      	bne.n	80041d8 <HAL_GPIO_Init+0x200>
 80041d4:	2308      	movs	r3, #8
 80041d6:	e010      	b.n	80041fa <HAL_GPIO_Init+0x222>
 80041d8:	2309      	movs	r3, #9
 80041da:	e00e      	b.n	80041fa <HAL_GPIO_Init+0x222>
 80041dc:	2307      	movs	r3, #7
 80041de:	e00c      	b.n	80041fa <HAL_GPIO_Init+0x222>
 80041e0:	2306      	movs	r3, #6
 80041e2:	e00a      	b.n	80041fa <HAL_GPIO_Init+0x222>
 80041e4:	2305      	movs	r3, #5
 80041e6:	e008      	b.n	80041fa <HAL_GPIO_Init+0x222>
 80041e8:	2304      	movs	r3, #4
 80041ea:	e006      	b.n	80041fa <HAL_GPIO_Init+0x222>
 80041ec:	2303      	movs	r3, #3
 80041ee:	e004      	b.n	80041fa <HAL_GPIO_Init+0x222>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e002      	b.n	80041fa <HAL_GPIO_Init+0x222>
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <HAL_GPIO_Init+0x222>
 80041f8:	2300      	movs	r3, #0
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	f002 0203 	and.w	r2, r2, #3
 8004200:	0092      	lsls	r2, r2, #2
 8004202:	4093      	lsls	r3, r2
 8004204:	461a      	mov	r2, r3
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800420c:	4936      	ldr	r1, [pc, #216]	; (80042e8 <HAL_GPIO_Init+0x310>)
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	089b      	lsrs	r3, r3, #2
 8004212:	3302      	adds	r3, #2
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800421a:	4b3d      	ldr	r3, [pc, #244]	; (8004310 <HAL_GPIO_Init+0x338>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	43db      	mvns	r3, r3
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4013      	ands	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800423e:	4a34      	ldr	r2, [pc, #208]	; (8004310 <HAL_GPIO_Init+0x338>)
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004244:	4b32      	ldr	r3, [pc, #200]	; (8004310 <HAL_GPIO_Init+0x338>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	43db      	mvns	r3, r3
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4013      	ands	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4313      	orrs	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004268:	4a29      	ldr	r2, [pc, #164]	; (8004310 <HAL_GPIO_Init+0x338>)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800426e:	4b28      	ldr	r3, [pc, #160]	; (8004310 <HAL_GPIO_Init+0x338>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	43db      	mvns	r3, r3
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4013      	ands	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4313      	orrs	r3, r2
 8004290:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004292:	4a1f      	ldr	r2, [pc, #124]	; (8004310 <HAL_GPIO_Init+0x338>)
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004298:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <HAL_GPIO_Init+0x338>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	43db      	mvns	r3, r3
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4013      	ands	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80042bc:	4a14      	ldr	r2, [pc, #80]	; (8004310 <HAL_GPIO_Init+0x338>)
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	3301      	adds	r3, #1
 80042c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	fa22 f303 	lsr.w	r3, r2, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f47f ae88 	bne.w	8003fe8 <HAL_GPIO_Init+0x10>
  }
}
 80042d8:	bf00      	nop
 80042da:	bf00      	nop
 80042dc:	371c      	adds	r7, #28
 80042de:	46bd      	mov	sp, r7
 80042e0:	bc80      	pop	{r7}
 80042e2:	4770      	bx	lr
 80042e4:	40023800 	.word	0x40023800
 80042e8:	40013800 	.word	0x40013800
 80042ec:	40020000 	.word	0x40020000
 80042f0:	40020400 	.word	0x40020400
 80042f4:	40020800 	.word	0x40020800
 80042f8:	40020c00 	.word	0x40020c00
 80042fc:	40021000 	.word	0x40021000
 8004300:	40021400 	.word	0x40021400
 8004304:	40021800 	.word	0x40021800
 8004308:	40021c00 	.word	0x40021c00
 800430c:	40022000 	.word	0x40022000
 8004310:	40013c00 	.word	0x40013c00

08004314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	807b      	strh	r3, [r7, #2]
 8004320:	4613      	mov	r3, r2
 8004322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004324:	787b      	ldrb	r3, [r7, #1]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800432a:	887a      	ldrh	r2, [r7, #2]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004330:	e003      	b.n	800433a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004332:	887b      	ldrh	r3, [r7, #2]
 8004334:	041a      	lsls	r2, r3, #16
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	619a      	str	r2, [r3, #24]
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	bc80      	pop	{r7}
 8004342:	4770      	bx	lr

08004344 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004356:	887a      	ldrh	r2, [r7, #2]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4013      	ands	r3, r2
 800435c:	041a      	lsls	r2, r3, #16
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	43d9      	mvns	r1, r3
 8004362:	887b      	ldrh	r3, [r7, #2]
 8004364:	400b      	ands	r3, r1
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	619a      	str	r2, [r3, #24]
}
 800436c:	bf00      	nop
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	bc80      	pop	{r7}
 8004374:	4770      	bx	lr

08004376 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004376:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004378:	b08f      	sub	sp, #60	; 0x3c
 800437a:	af0a      	add	r7, sp, #40	; 0x28
 800437c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e10f      	b.n	80045a8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d106      	bne.n	80043a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f006 f8be 	bl	800a524 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2203      	movs	r2, #3
 80043ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d102      	bne.n	80043c2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f003 f900 	bl	80075cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	603b      	str	r3, [r7, #0]
 80043d2:	687e      	ldr	r6, [r7, #4]
 80043d4:	466d      	mov	r5, sp
 80043d6:	f106 0410 	add.w	r4, r6, #16
 80043da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80043ea:	1d33      	adds	r3, r6, #4
 80043ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043ee:	6838      	ldr	r0, [r7, #0]
 80043f0:	f002 ffe2 	bl	80073b8 <USB_CoreInit>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2202      	movs	r2, #2
 80043fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e0d0      	b.n	80045a8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2100      	movs	r1, #0
 800440c:	4618      	mov	r0, r3
 800440e:	f003 f8ed 	bl	80075ec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004412:	2300      	movs	r3, #0
 8004414:	73fb      	strb	r3, [r7, #15]
 8004416:	e04a      	b.n	80044ae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004418:	7bfa      	ldrb	r2, [r7, #15]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	333d      	adds	r3, #61	; 0x3d
 8004428:	2201      	movs	r2, #1
 800442a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800442c:	7bfa      	ldrb	r2, [r7, #15]
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	4613      	mov	r3, r2
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	4413      	add	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	333c      	adds	r3, #60	; 0x3c
 800443c:	7bfa      	ldrb	r2, [r7, #15]
 800443e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004440:	7bfa      	ldrb	r2, [r7, #15]
 8004442:	7bfb      	ldrb	r3, [r7, #15]
 8004444:	b298      	uxth	r0, r3
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	3356      	adds	r3, #86	; 0x56
 8004454:	4602      	mov	r2, r0
 8004456:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004458:	7bfa      	ldrb	r2, [r7, #15]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	4613      	mov	r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	3340      	adds	r3, #64	; 0x40
 8004468:	2200      	movs	r2, #0
 800446a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800446c:	7bfa      	ldrb	r2, [r7, #15]
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	4613      	mov	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4413      	add	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	440b      	add	r3, r1
 800447a:	3344      	adds	r3, #68	; 0x44
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004480:	7bfa      	ldrb	r2, [r7, #15]
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	4613      	mov	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	3348      	adds	r3, #72	; 0x48
 8004490:	2200      	movs	r2, #0
 8004492:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004494:	7bfa      	ldrb	r2, [r7, #15]
 8004496:	6879      	ldr	r1, [r7, #4]
 8004498:	4613      	mov	r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	4413      	add	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	334c      	adds	r3, #76	; 0x4c
 80044a4:	2200      	movs	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	3301      	adds	r3, #1
 80044ac:	73fb      	strb	r3, [r7, #15]
 80044ae:	7bfa      	ldrb	r2, [r7, #15]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d3af      	bcc.n	8004418 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044b8:	2300      	movs	r3, #0
 80044ba:	73fb      	strb	r3, [r7, #15]
 80044bc:	e044      	b.n	8004548 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80044be:	7bfa      	ldrb	r2, [r7, #15]
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	4613      	mov	r3, r2
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	4413      	add	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	440b      	add	r3, r1
 80044cc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80044d0:	2200      	movs	r2, #0
 80044d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044d4:	7bfa      	ldrb	r2, [r7, #15]
 80044d6:	6879      	ldr	r1, [r7, #4]
 80044d8:	4613      	mov	r3, r2
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	4413      	add	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	440b      	add	r3, r1
 80044e2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80044e6:	7bfa      	ldrb	r2, [r7, #15]
 80044e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044ea:	7bfa      	ldrb	r2, [r7, #15]
 80044ec:	6879      	ldr	r1, [r7, #4]
 80044ee:	4613      	mov	r3, r2
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	440b      	add	r3, r1
 80044f8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80044fc:	2200      	movs	r2, #0
 80044fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004500:	7bfa      	ldrb	r2, [r7, #15]
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	4613      	mov	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004516:	7bfa      	ldrb	r2, [r7, #15]
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800452c:	7bfa      	ldrb	r2, [r7, #15]
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4413      	add	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	3301      	adds	r3, #1
 8004546:	73fb      	strb	r3, [r7, #15]
 8004548:	7bfa      	ldrb	r2, [r7, #15]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	429a      	cmp	r2, r3
 8004550:	d3b5      	bcc.n	80044be <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	603b      	str	r3, [r7, #0]
 8004558:	687e      	ldr	r6, [r7, #4]
 800455a:	466d      	mov	r5, sp
 800455c:	f106 0410 	add.w	r4, r6, #16
 8004560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004568:	e894 0003 	ldmia.w	r4, {r0, r1}
 800456c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004570:	1d33      	adds	r3, r6, #4
 8004572:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004574:	6838      	ldr	r0, [r7, #0]
 8004576:	f003 f885 	bl	8007684 <USB_DevInit>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e00d      	b.n	80045a8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f004 f8b7 	bl	8008714 <USB_DevDisconnect>

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <HAL_PCD_Start+0x16>
 80045c2:	2302      	movs	r3, #2
 80045c4:	e012      	b.n	80045ec <HAL_PCD_Start+0x3c>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f002 ffea 	bl	80075ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	f004 f879 	bl	80086d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80045f4:	b590      	push	{r4, r7, lr}
 80045f6:	b08d      	sub	sp, #52	; 0x34
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f004 f930 	bl	8008870 <USB_GetMode>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	f040 847c 	bne.w	8004f10 <HAL_PCD_IRQHandler+0x91c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4618      	mov	r0, r3
 800461e:	f004 f899 	bl	8008754 <USB_ReadInterrupts>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 8472 	beq.w	8004f0e <HAL_PCD_IRQHandler+0x91a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	0a1b      	lsrs	r3, r3, #8
 8004634:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f004 f886 	bl	8008754 <USB_ReadInterrupts>
 8004648:	4603      	mov	r3, r0
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b02      	cmp	r3, #2
 8004650:	d107      	bne.n	8004662 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	695a      	ldr	r2, [r3, #20]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f002 0202 	and.w	r2, r2, #2
 8004660:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f004 f874 	bl	8008754 <USB_ReadInterrupts>
 800466c:	4603      	mov	r3, r0
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	2b10      	cmp	r3, #16
 8004674:	d161      	bne.n	800473a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	699a      	ldr	r2, [r3, #24]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0210 	bic.w	r2, r2, #16
 8004684:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	f003 020f 	and.w	r2, r3, #15
 8004692:	4613      	mov	r3, r2
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	4413      	add	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	4413      	add	r3, r2
 80046a2:	3304      	adds	r3, #4
 80046a4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	0c5b      	lsrs	r3, r3, #17
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d124      	bne.n	80046fc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80046b8:	4013      	ands	r3, r2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d035      	beq.n	800472a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	091b      	lsrs	r3, r3, #4
 80046c6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80046c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	461a      	mov	r2, r3
 80046d0:	6a38      	ldr	r0, [r7, #32]
 80046d2:	f003 feb1 	bl	8008438 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	091b      	lsrs	r3, r3, #4
 80046de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046e2:	441a      	add	r2, r3
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	695a      	ldr	r2, [r3, #20]
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	091b      	lsrs	r3, r3, #4
 80046f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80046f4:	441a      	add	r2, r3
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	615a      	str	r2, [r3, #20]
 80046fa:	e016      	b.n	800472a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	0c5b      	lsrs	r3, r3, #17
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	2b06      	cmp	r3, #6
 8004706:	d110      	bne.n	800472a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800470e:	2208      	movs	r2, #8
 8004710:	4619      	mov	r1, r3
 8004712:	6a38      	ldr	r0, [r7, #32]
 8004714:	f003 fe90 	bl	8008438 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	695a      	ldr	r2, [r3, #20]
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	091b      	lsrs	r3, r3, #4
 8004720:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004724:	441a      	add	r2, r3
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699a      	ldr	r2, [r3, #24]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0210 	orr.w	r2, r2, #16
 8004738:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f004 f808 	bl	8008754 <USB_ReadInterrupts>
 8004744:	4603      	mov	r3, r0
 8004746:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800474a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800474e:	f040 80a7 	bne.w	80048a0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004752:	2300      	movs	r3, #0
 8004754:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f004 f80c 	bl	8008778 <USB_ReadDevAllOutEpInterrupt>
 8004760:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004762:	e099      	b.n	8004898 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 808e 	beq.w	800488c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004776:	b2d2      	uxtb	r2, r2
 8004778:	4611      	mov	r1, r2
 800477a:	4618      	mov	r0, r3
 800477c:	f004 f82e 	bl	80087dc <USB_ReadDevOutEPInterrupt>
 8004780:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00c      	beq.n	80047a6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	4413      	add	r3, r2
 8004794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004798:	461a      	mov	r2, r3
 800479a:	2301      	movs	r3, #1
 800479c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800479e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 fe95 	bl	80054d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f003 0308 	and.w	r3, r3, #8
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00c      	beq.n	80047ca <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047bc:	461a      	mov	r2, r3
 80047be:	2308      	movs	r3, #8
 80047c0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80047c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 ff6b 	bl	80056a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d008      	beq.n	80047e6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e0:	461a      	mov	r2, r3
 80047e2:	2310      	movs	r3, #16
 80047e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d030      	beq.n	8004852 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f8:	2b80      	cmp	r3, #128	; 0x80
 80047fa:	d109      	bne.n	8004810 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	69fa      	ldr	r2, [r7, #28]
 8004806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800480a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800480e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004812:	4613      	mov	r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	4413      	add	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	4413      	add	r3, r2
 8004822:	3304      	adds	r3, #4
 8004824:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	78db      	ldrb	r3, [r3, #3]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d108      	bne.n	8004840 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2200      	movs	r2, #0
 8004832:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004836:	b2db      	uxtb	r3, r3
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f005 ff86 	bl	800a74c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484c:	461a      	mov	r2, r3
 800484e:	2302      	movs	r3, #2
 8004850:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f003 0320 	and.w	r3, r3, #32
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800485c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004868:	461a      	mov	r2, r3
 800486a:	2320      	movs	r3, #32
 800486c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d009      	beq.n	800488c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004884:	461a      	mov	r2, r3
 8004886:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800488a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	3301      	adds	r3, #1
 8004890:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	2b00      	cmp	r3, #0
 800489c:	f47f af62 	bne.w	8004764 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f003 ff55 	bl	8008754 <USB_ReadInterrupts>
 80048aa:	4603      	mov	r3, r0
 80048ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80048b4:	f040 80db 	bne.w	8004a6e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f003 ff74 	bl	80087aa <USB_ReadDevAllInEpInterrupt>
 80048c2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80048c4:	2300      	movs	r3, #0
 80048c6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80048c8:	e0cd      	b.n	8004a66 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80048ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 80c2 	beq.w	8004a5a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048dc:	b2d2      	uxtb	r2, r2
 80048de:	4611      	mov	r1, r2
 80048e0:	4618      	mov	r0, r3
 80048e2:	f003 ff98 	bl	8008816 <USB_ReadDevInEPInterrupt>
 80048e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d057      	beq.n	80049a2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	f003 030f 	and.w	r3, r3, #15
 80048f8:	2201      	movs	r2, #1
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	43db      	mvns	r3, r3
 800490c:	69f9      	ldr	r1, [r7, #28]
 800490e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004912:	4013      	ands	r3, r2
 8004914:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004922:	461a      	mov	r2, r3
 8004924:	2301      	movs	r3, #1
 8004926:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d132      	bne.n	8004996 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004934:	4613      	mov	r3, r2
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	4413      	add	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	440b      	add	r3, r1
 800493e:	3348      	adds	r3, #72	; 0x48
 8004940:	6819      	ldr	r1, [r3, #0]
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004946:	4613      	mov	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	4413      	add	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4403      	add	r3, r0
 8004950:	3344      	adds	r3, #68	; 0x44
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4419      	add	r1, r3
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495a:	4613      	mov	r3, r2
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	4413      	add	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4403      	add	r3, r0
 8004964:	3348      	adds	r3, #72	; 0x48
 8004966:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	2b00      	cmp	r3, #0
 800496c:	d113      	bne.n	8004996 <HAL_PCD_IRQHandler+0x3a2>
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004972:	4613      	mov	r3, r2
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	4413      	add	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	440b      	add	r3, r1
 800497c:	334c      	adds	r3, #76	; 0x4c
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d108      	bne.n	8004996 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6818      	ldr	r0, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800498e:	461a      	mov	r2, r3
 8004990:	2101      	movs	r1, #1
 8004992:	f003 ff9d 	bl	80088d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	b2db      	uxtb	r3, r3
 800499a:	4619      	mov	r1, r3
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f005 fe50 	bl	800a642 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	015a      	lsls	r2, r3, #5
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	4413      	add	r3, r2
 80049b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b8:	461a      	mov	r2, r3
 80049ba:	2308      	movs	r3, #8
 80049bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f003 0310 	and.w	r3, r3, #16
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d4:	461a      	mov	r2, r3
 80049d6:	2310      	movs	r3, #16
 80049d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d008      	beq.n	80049f6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f0:	461a      	mov	r2, r3
 80049f2:	2340      	movs	r3, #64	; 0x40
 80049f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d023      	beq.n	8004a48 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004a00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a02:	6a38      	ldr	r0, [r7, #32]
 8004a04:	f002 ff98 	bl	8007938 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	3338      	adds	r3, #56	; 0x38
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	4413      	add	r3, r2
 8004a18:	3304      	adds	r3, #4
 8004a1a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	78db      	ldrb	r3, [r3, #3]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d108      	bne.n	8004a36 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2200      	movs	r2, #0
 8004a28:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	4619      	mov	r1, r3
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f005 fe9d 	bl	800a770 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a42:	461a      	mov	r2, r3
 8004a44:	2302      	movs	r3, #2
 8004a46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004a52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fcae 	bl	80053b6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a62:	085b      	lsrs	r3, r3, #1
 8004a64:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f47f af2e 	bne.w	80048ca <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f003 fe6e 	bl	8008754 <USB_ReadInterrupts>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a82:	d114      	bne.n	8004aae <HAL_PCD_IRQHandler+0x4ba>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	69fa      	ldr	r2, [r7, #28]
 8004a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a92:	f023 0301 	bic.w	r3, r3, #1
 8004a96:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f005 fe49 	bl	800a730 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695a      	ldr	r2, [r3, #20]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f003 fe4e 	bl	8008754 <USB_ReadInterrupts>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ac2:	d112      	bne.n	8004aea <HAL_PCD_IRQHandler+0x4f6>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d102      	bne.n	8004ada <HAL_PCD_IRQHandler+0x4e6>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f005 fe05 	bl	800a6e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695a      	ldr	r2, [r3, #20]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004ae8:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f003 fe30 	bl	8008754 <USB_ReadInterrupts>
 8004af4:	4603      	mov	r3, r0
 8004af6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afe:	f040 80b7 	bne.w	8004c70 <HAL_PCD_IRQHandler+0x67c>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	69fa      	ldr	r2, [r7, #28]
 8004b0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b10:	f023 0301 	bic.w	r3, r3, #1
 8004b14:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2110      	movs	r1, #16
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f002 ff0b 	bl	8007938 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b22:	2300      	movs	r3, #0
 8004b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b26:	e046      	b.n	8004bb6 <HAL_PCD_IRQHandler+0x5c2>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b34:	461a      	mov	r2, r3
 8004b36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b3a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b4c:	0151      	lsls	r1, r2, #5
 8004b4e:	69fa      	ldr	r2, [r7, #28]
 8004b50:	440a      	add	r2, r1
 8004b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b5a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b68:	461a      	mov	r2, r3
 8004b6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b6e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b80:	0151      	lsls	r1, r2, #5
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	440a      	add	r2, r1
 8004b86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b8e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b92:	015a      	lsls	r2, r3, #5
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	4413      	add	r3, r2
 8004b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ba0:	0151      	lsls	r1, r2, #5
 8004ba2:	69fa      	ldr	r2, [r7, #28]
 8004ba4:	440a      	add	r2, r1
 8004ba6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004baa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004bae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d3b3      	bcc.n	8004b28 <HAL_PCD_IRQHandler+0x534>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc6:	69db      	ldr	r3, [r3, #28]
 8004bc8:	69fa      	ldr	r2, [r7, #28]
 8004bca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bce:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004bd2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d016      	beq.n	8004c0a <HAL_PCD_IRQHandler+0x616>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004be6:	69fa      	ldr	r2, [r7, #28]
 8004be8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bec:	f043 030b 	orr.w	r3, r3, #11
 8004bf0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c02:	f043 030b 	orr.w	r3, r3, #11
 8004c06:	6453      	str	r3, [r2, #68]	; 0x44
 8004c08:	e015      	b.n	8004c36 <HAL_PCD_IRQHandler+0x642>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004c1c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004c20:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c30:	f043 030b 	orr.w	r3, r3, #11
 8004c34:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69fa      	ldr	r2, [r7, #28]
 8004c40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c44:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004c48:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f003 fe38 	bl	80088d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	695a      	ldr	r2, [r3, #20]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004c6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f003 fd6d 	bl	8008754 <USB_ReadInterrupts>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c84:	d124      	bne.n	8004cd0 <HAL_PCD_IRQHandler+0x6dc>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f003 fdfd 	bl	800888a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f002 fecb 	bl	8007a30 <USB_GetDevSpeed>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681c      	ldr	r4, [r3, #0]
 8004ca6:	f001 f99d 	bl	8005fe4 <HAL_RCC_GetHCLKFreq>
 8004caa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f002 fbd7 	bl	8007468 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f005 fce9 	bl	800a692 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	695a      	ldr	r2, [r3, #20]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004cce:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f003 fd3d 	bl	8008754 <USB_ReadInterrupts>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d10a      	bne.n	8004cfa <HAL_PCD_IRQHandler+0x706>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f005 fcc6 	bl	800a676 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	695a      	ldr	r2, [r3, #20]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f002 0208 	and.w	r2, r2, #8
 8004cf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f003 fd28 	bl	8008754 <USB_ReadInterrupts>
 8004d04:	4603      	mov	r3, r0
 8004d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0a:	2b80      	cmp	r3, #128	; 0x80
 8004d0c:	d122      	bne.n	8004d54 <HAL_PCD_IRQHandler+0x760>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d1e:	e014      	b.n	8004d4a <HAL_PCD_IRQHandler+0x756>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d24:	4613      	mov	r3, r2
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	4413      	add	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d105      	bne.n	8004d44 <HAL_PCD_IRQHandler+0x750>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fb08 	bl	8005354 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	3301      	adds	r3, #1
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d3e5      	bcc.n	8004d20 <HAL_PCD_IRQHandler+0x72c>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f003 fcfb 	bl	8008754 <USB_ReadInterrupts>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d68:	d13b      	bne.n	8004de2 <HAL_PCD_IRQHandler+0x7ee>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6e:	e02b      	b.n	8004dc8 <HAL_PCD_IRQHandler+0x7d4>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d84:	4613      	mov	r3, r2
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	3340      	adds	r3, #64	; 0x40
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d115      	bne.n	8004dc2 <HAL_PCD_IRQHandler+0x7ce>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004d96:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	da12      	bge.n	8004dc2 <HAL_PCD_IRQHandler+0x7ce>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da0:	4613      	mov	r3, r2
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	4413      	add	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	333f      	adds	r3, #63	; 0x3f
 8004dac:	2201      	movs	r2, #1
 8004dae:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 fac9 	bl	8005354 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d3ce      	bcc.n	8004d70 <HAL_PCD_IRQHandler+0x77c>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695a      	ldr	r2, [r3, #20]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004de0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f003 fcb4 	bl	8008754 <USB_ReadInterrupts>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004df2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004df6:	d155      	bne.n	8004ea4 <HAL_PCD_IRQHandler+0x8b0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004df8:	2301      	movs	r3, #1
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8004dfc:	e045      	b.n	8004e8a <HAL_PCD_IRQHandler+0x896>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e12:	4613      	mov	r3, r2
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d12e      	bne.n	8004e84 <HAL_PCD_IRQHandler+0x890>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004e26:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	da2b      	bge.n	8004e84 <HAL_PCD_IRQHandler+0x890>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004e38:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d121      	bne.n	8004e84 <HAL_PCD_IRQHandler+0x890>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e44:	4613      	mov	r3, r2
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	4413      	add	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004e52:	2201      	movs	r2, #1
 8004e54:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004e5e:	6a3b      	ldr	r3, [r7, #32]
 8004e60:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10a      	bne.n	8004e84 <HAL_PCD_IRQHandler+0x890>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	69fa      	ldr	r2, [r7, #28]
 8004e78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e80:	6053      	str	r3, [r2, #4]
            break;
 8004e82:	e007      	b.n	8004e94 <HAL_PCD_IRQHandler+0x8a0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	3301      	adds	r3, #1
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d3b4      	bcc.n	8004dfe <HAL_PCD_IRQHandler+0x80a>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695a      	ldr	r2, [r3, #20]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004ea2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f003 fc53 	bl	8008754 <USB_ReadInterrupts>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb8:	d10a      	bne.n	8004ed0 <HAL_PCD_IRQHandler+0x8dc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f005 fc6a 	bl	800a794 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	695a      	ldr	r2, [r3, #20]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004ece:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f003 fc3d 	bl	8008754 <USB_ReadInterrupts>
 8004eda:	4603      	mov	r3, r0
 8004edc:	f003 0304 	and.w	r3, r3, #4
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d115      	bne.n	8004f10 <HAL_PCD_IRQHandler+0x91c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d002      	beq.n	8004efc <HAL_PCD_IRQHandler+0x908>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f005 fc5a 	bl	800a7b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6859      	ldr	r1, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	605a      	str	r2, [r3, #4]
 8004f0c:	e000      	b.n	8004f10 <HAL_PCD_IRQHandler+0x91c>
      return;
 8004f0e:	bf00      	nop
    }
  }
}
 8004f10:	3734      	adds	r7, #52	; 0x34
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd90      	pop	{r4, r7, pc}

08004f16 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b082      	sub	sp, #8
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
 8004f1e:	460b      	mov	r3, r1
 8004f20:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_PCD_SetAddress+0x1a>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e013      	b.n	8004f58 <HAL_PCD_SetAddress+0x42>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	78fa      	ldrb	r2, [r7, #3]
 8004f3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	78fa      	ldrb	r2, [r7, #3]
 8004f46:	4611      	mov	r1, r2
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f003 fb9e 	bl	800868a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	4608      	mov	r0, r1
 8004f6a:	4611      	mov	r1, r2
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	4603      	mov	r3, r0
 8004f70:	70fb      	strb	r3, [r7, #3]
 8004f72:	460b      	mov	r3, r1
 8004f74:	803b      	strh	r3, [r7, #0]
 8004f76:	4613      	mov	r3, r2
 8004f78:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004f7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	da0f      	bge.n	8004fa6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f86:	78fb      	ldrb	r3, [r7, #3]
 8004f88:	f003 020f 	and.w	r2, r3, #15
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	4413      	add	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	3338      	adds	r3, #56	; 0x38
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	4413      	add	r3, r2
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	705a      	strb	r2, [r3, #1]
 8004fa4:	e00f      	b.n	8004fc6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fa6:	78fb      	ldrb	r3, [r7, #3]
 8004fa8:	f003 020f 	and.w	r2, r3, #15
 8004fac:	4613      	mov	r3, r2
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	4413      	add	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	4413      	add	r3, r2
 8004fbc:	3304      	adds	r3, #4
 8004fbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004fc6:	78fb      	ldrb	r3, [r7, #3]
 8004fc8:	f003 030f 	and.w	r3, r3, #15
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004fd2:	883a      	ldrh	r2, [r7, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	78ba      	ldrb	r2, [r7, #2]
 8004fdc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	785b      	ldrb	r3, [r3, #1]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d004      	beq.n	8004ff0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004ff0:	78bb      	ldrb	r3, [r7, #2]
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d102      	bne.n	8004ffc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005002:	2b01      	cmp	r3, #1
 8005004:	d101      	bne.n	800500a <HAL_PCD_EP_Open+0xaa>
 8005006:	2302      	movs	r3, #2
 8005008:	e00e      	b.n	8005028 <HAL_PCD_EP_Open+0xc8>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68f9      	ldr	r1, [r7, #12]
 8005018:	4618      	mov	r0, r3
 800501a:	f002 fd2d 	bl	8007a78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005026:	7afb      	ldrb	r3, [r7, #11]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	460b      	mov	r3, r1
 800503a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800503c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005040:	2b00      	cmp	r3, #0
 8005042:	da0f      	bge.n	8005064 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005044:	78fb      	ldrb	r3, [r7, #3]
 8005046:	f003 020f 	and.w	r2, r3, #15
 800504a:	4613      	mov	r3, r2
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	4413      	add	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	3338      	adds	r3, #56	; 0x38
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	4413      	add	r3, r2
 8005058:	3304      	adds	r3, #4
 800505a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2201      	movs	r2, #1
 8005060:	705a      	strb	r2, [r3, #1]
 8005062:	e00f      	b.n	8005084 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005064:	78fb      	ldrb	r3, [r7, #3]
 8005066:	f003 020f 	and.w	r2, r3, #15
 800506a:	4613      	mov	r3, r2
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	4413      	add	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	4413      	add	r3, r2
 800507a:	3304      	adds	r3, #4
 800507c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	b2da      	uxtb	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005096:	2b01      	cmp	r3, #1
 8005098:	d101      	bne.n	800509e <HAL_PCD_EP_Close+0x6e>
 800509a:	2302      	movs	r3, #2
 800509c:	e00e      	b.n	80050bc <HAL_PCD_EP_Close+0x8c>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68f9      	ldr	r1, [r7, #12]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f002 fd69 	bl	8007b84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	607a      	str	r2, [r7, #4]
 80050ce:	603b      	str	r3, [r7, #0]
 80050d0:	460b      	mov	r3, r1
 80050d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050d4:	7afb      	ldrb	r3, [r7, #11]
 80050d6:	f003 020f 	and.w	r2, r3, #15
 80050da:	4613      	mov	r3, r2
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	4413      	add	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4413      	add	r3, r2
 80050ea:	3304      	adds	r3, #4
 80050ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2200      	movs	r2, #0
 80050fe:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	2200      	movs	r2, #0
 8005104:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005106:	7afb      	ldrb	r3, [r7, #11]
 8005108:	f003 030f 	and.w	r3, r3, #15
 800510c:	b2da      	uxtb	r2, r3
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d102      	bne.n	8005120 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	b2db      	uxtb	r3, r3
 800512a:	461a      	mov	r2, r3
 800512c:	6979      	ldr	r1, [r7, #20]
 800512e:	f002 fe05 	bl	8007d3c <USB_EPStartXfer>

  return HAL_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3718      	adds	r7, #24
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	460b      	mov	r3, r1
 8005146:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005148:	78fb      	ldrb	r3, [r7, #3]
 800514a:	f003 020f 	and.w	r2, r3, #15
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	4613      	mov	r3, r2
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800515e:	681b      	ldr	r3, [r3, #0]
}
 8005160:	4618      	mov	r0, r3
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	bc80      	pop	{r7}
 8005168:	4770      	bx	lr

0800516a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b086      	sub	sp, #24
 800516e:	af00      	add	r7, sp, #0
 8005170:	60f8      	str	r0, [r7, #12]
 8005172:	607a      	str	r2, [r7, #4]
 8005174:	603b      	str	r3, [r7, #0]
 8005176:	460b      	mov	r3, r1
 8005178:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800517a:	7afb      	ldrb	r3, [r7, #11]
 800517c:	f003 020f 	and.w	r2, r3, #15
 8005180:	4613      	mov	r3, r2
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	4413      	add	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	3338      	adds	r3, #56	; 0x38
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4413      	add	r3, r2
 800518e:	3304      	adds	r3, #4
 8005190:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	683a      	ldr	r2, [r7, #0]
 800519c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2200      	movs	r2, #0
 80051a2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2201      	movs	r2, #1
 80051a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051aa:	7afb      	ldrb	r3, [r7, #11]
 80051ac:	f003 030f 	and.w	r3, r3, #15
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d102      	bne.n	80051c4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6818      	ldr	r0, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	461a      	mov	r2, r3
 80051d0:	6979      	ldr	r1, [r7, #20]
 80051d2:	f002 fdb3 	bl	8007d3c <USB_EPStartXfer>

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	460b      	mov	r3, r1
 80051ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80051ec:	78fb      	ldrb	r3, [r7, #3]
 80051ee:	f003 020f 	and.w	r2, r3, #15
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d901      	bls.n	80051fe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e050      	b.n	80052a0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80051fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005202:	2b00      	cmp	r3, #0
 8005204:	da0f      	bge.n	8005226 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005206:	78fb      	ldrb	r3, [r7, #3]
 8005208:	f003 020f 	and.w	r2, r3, #15
 800520c:	4613      	mov	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	4413      	add	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	3338      	adds	r3, #56	; 0x38
 8005216:	687a      	ldr	r2, [r7, #4]
 8005218:	4413      	add	r3, r2
 800521a:	3304      	adds	r3, #4
 800521c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2201      	movs	r2, #1
 8005222:	705a      	strb	r2, [r3, #1]
 8005224:	e00d      	b.n	8005242 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005226:	78fa      	ldrb	r2, [r7, #3]
 8005228:	4613      	mov	r3, r2
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	4413      	add	r3, r2
 8005238:	3304      	adds	r3, #4
 800523a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2201      	movs	r2, #1
 8005246:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	b2da      	uxtb	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800525a:	2b01      	cmp	r3, #1
 800525c:	d101      	bne.n	8005262 <HAL_PCD_EP_SetStall+0x82>
 800525e:	2302      	movs	r3, #2
 8005260:	e01e      	b.n	80052a0 <HAL_PCD_EP_SetStall+0xc0>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68f9      	ldr	r1, [r7, #12]
 8005270:	4618      	mov	r0, r3
 8005272:	f003 f938 	bl	80084e6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005276:	78fb      	ldrb	r3, [r7, #3]
 8005278:	f003 030f 	and.w	r3, r3, #15
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10a      	bne.n	8005296 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6818      	ldr	r0, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	b2d9      	uxtb	r1, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005290:	461a      	mov	r2, r3
 8005292:	f003 fb1d 	bl	80088d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	f003 020f 	and.w	r2, r3, #15
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d901      	bls.n	80052c6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e042      	b.n	800534c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80052c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	da0f      	bge.n	80052ee <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052ce:	78fb      	ldrb	r3, [r7, #3]
 80052d0:	f003 020f 	and.w	r2, r3, #15
 80052d4:	4613      	mov	r3, r2
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	3338      	adds	r3, #56	; 0x38
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	4413      	add	r3, r2
 80052e2:	3304      	adds	r3, #4
 80052e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2201      	movs	r2, #1
 80052ea:	705a      	strb	r2, [r3, #1]
 80052ec:	e00f      	b.n	800530e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052ee:	78fb      	ldrb	r3, [r7, #3]
 80052f0:	f003 020f 	and.w	r2, r3, #15
 80052f4:	4613      	mov	r3, r2
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	4413      	add	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	4413      	add	r3, r2
 8005304:	3304      	adds	r3, #4
 8005306:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	b2da      	uxtb	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005326:	2b01      	cmp	r3, #1
 8005328:	d101      	bne.n	800532e <HAL_PCD_EP_ClrStall+0x86>
 800532a:	2302      	movs	r3, #2
 800532c:	e00e      	b.n	800534c <HAL_PCD_EP_ClrStall+0xa4>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68f9      	ldr	r1, [r7, #12]
 800533c:	4618      	mov	r0, r3
 800533e:	f003 f93f 	bl	80085c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	460b      	mov	r3, r1
 800535e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005360:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005364:	2b00      	cmp	r3, #0
 8005366:	da0c      	bge.n	8005382 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005368:	78fb      	ldrb	r3, [r7, #3]
 800536a:	f003 020f 	and.w	r2, r3, #15
 800536e:	4613      	mov	r3, r2
 8005370:	00db      	lsls	r3, r3, #3
 8005372:	4413      	add	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	3338      	adds	r3, #56	; 0x38
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	4413      	add	r3, r2
 800537c:	3304      	adds	r3, #4
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	e00c      	b.n	800539c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005382:	78fb      	ldrb	r3, [r7, #3]
 8005384:	f003 020f 	and.w	r2, r3, #15
 8005388:	4613      	mov	r3, r2
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	4413      	add	r3, r2
 8005398:	3304      	adds	r3, #4
 800539a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68f9      	ldr	r1, [r7, #12]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f002 ff62 	bl	800826c <USB_EPStopXfer>
 80053a8:	4603      	mov	r3, r0
 80053aa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80053ac:	7afb      	ldrb	r3, [r7, #11]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b08a      	sub	sp, #40	; 0x28
 80053ba:	af02      	add	r7, sp, #8
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	4613      	mov	r3, r2
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	4413      	add	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	3338      	adds	r3, #56	; 0x38
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	4413      	add	r3, r2
 80053da:	3304      	adds	r3, #4
 80053dc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	695a      	ldr	r2, [r3, #20]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d901      	bls.n	80053ee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e06c      	b.n	80054c8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	69fa      	ldr	r2, [r7, #28]
 8005400:	429a      	cmp	r2, r3
 8005402:	d902      	bls.n	800540a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	3303      	adds	r3, #3
 800540e:	089b      	lsrs	r3, r3, #2
 8005410:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005412:	e02b      	b.n	800546c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	69fa      	ldr	r2, [r7, #28]
 8005426:	429a      	cmp	r2, r3
 8005428:	d902      	bls.n	8005430 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	3303      	adds	r3, #3
 8005434:	089b      	lsrs	r3, r3, #2
 8005436:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	68d9      	ldr	r1, [r3, #12]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	b2da      	uxtb	r2, r3
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005448:	b2db      	uxtb	r3, r3
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	4603      	mov	r3, r0
 800544e:	6978      	ldr	r0, [r7, #20]
 8005450:	f002 ffb5 	bl	80083be <USB_WritePacket>

    ep->xfer_buff  += len;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	441a      	add	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	695a      	ldr	r2, [r3, #20]
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	441a      	add	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	015a      	lsls	r2, r3, #5
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	4413      	add	r3, r2
 8005474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	429a      	cmp	r2, r3
 8005480:	d809      	bhi.n	8005496 <PCD_WriteEmptyTxFifo+0xe0>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	695a      	ldr	r2, [r3, #20]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800548a:	429a      	cmp	r2, r3
 800548c:	d203      	bcs.n	8005496 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1be      	bne.n	8005414 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	691a      	ldr	r2, [r3, #16]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d811      	bhi.n	80054c6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	2201      	movs	r2, #1
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	43db      	mvns	r3, r3
 80054bc:	6939      	ldr	r1, [r7, #16]
 80054be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054c2:	4013      	ands	r3, r2
 80054c4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3720      	adds	r7, #32
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b088      	sub	sp, #32
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	333c      	adds	r3, #60	; 0x3c
 80054e8:	3304      	adds	r3, #4
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d17b      	bne.n	80055fe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f003 0308 	and.w	r3, r3, #8
 800550c:	2b00      	cmp	r3, #0
 800550e:	d015      	beq.n	800553c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	4a61      	ldr	r2, [pc, #388]	; (8005698 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005514:	4293      	cmp	r3, r2
 8005516:	f240 80b9 	bls.w	800568c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 80b3 	beq.w	800568c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005532:	461a      	mov	r2, r3
 8005534:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005538:	6093      	str	r3, [r2, #8]
 800553a:	e0a7      	b.n	800568c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b00      	cmp	r3, #0
 8005544:	d009      	beq.n	800555a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005552:	461a      	mov	r2, r3
 8005554:	2320      	movs	r3, #32
 8005556:	6093      	str	r3, [r2, #8]
 8005558:	e098      	b.n	800568c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005560:	2b00      	cmp	r3, #0
 8005562:	f040 8093 	bne.w	800568c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	4a4b      	ldr	r2, [pc, #300]	; (8005698 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d90f      	bls.n	800558e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00a      	beq.n	800558e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005584:	461a      	mov	r2, r3
 8005586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800558a:	6093      	str	r3, [r2, #8]
 800558c:	e07e      	b.n	800568c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	4613      	mov	r3, r2
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	4413      	add	r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	4413      	add	r3, r2
 80055a0:	3304      	adds	r3, #4
 80055a2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a1a      	ldr	r2, [r3, #32]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	0159      	lsls	r1, r3, #5
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	440b      	add	r3, r1
 80055b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ba:	1ad2      	subs	r2, r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d114      	bne.n	80055f0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d109      	bne.n	80055e2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6818      	ldr	r0, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80055d8:	461a      	mov	r2, r3
 80055da:	2101      	movs	r1, #1
 80055dc:	f003 f978 	bl	80088d0 <USB_EP0_OutStart>
 80055e0:	e006      	b.n	80055f0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	441a      	add	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	4619      	mov	r1, r3
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f005 f808 	bl	800a60c <HAL_PCD_DataOutStageCallback>
 80055fc:	e046      	b.n	800568c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	4a26      	ldr	r2, [pc, #152]	; (800569c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d124      	bne.n	8005650 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00a      	beq.n	8005626 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	4413      	add	r3, r2
 8005618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800561c:	461a      	mov	r2, r3
 800561e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005622:	6093      	str	r3, [r2, #8]
 8005624:	e032      	b.n	800568c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f003 0320 	and.w	r3, r3, #32
 800562c:	2b00      	cmp	r3, #0
 800562e:	d008      	beq.n	8005642 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563c:	461a      	mov	r2, r3
 800563e:	2320      	movs	r3, #32
 8005640:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	4619      	mov	r1, r3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f004 ffdf 	bl	800a60c <HAL_PCD_DataOutStageCallback>
 800564e:	e01d      	b.n	800568c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d114      	bne.n	8005680 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	4613      	mov	r3, r2
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	4413      	add	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	440b      	add	r3, r1
 8005664:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d108      	bne.n	8005680 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6818      	ldr	r0, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005678:	461a      	mov	r2, r3
 800567a:	2100      	movs	r1, #0
 800567c:	f003 f928 	bl	80088d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	b2db      	uxtb	r3, r3
 8005684:	4619      	mov	r1, r3
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f004 ffc0 	bl	800a60c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3720      	adds	r7, #32
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	4f54300a 	.word	0x4f54300a
 800569c:	4f54310a 	.word	0x4f54310a

080056a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	333c      	adds	r3, #60	; 0x3c
 80056b8:	3304      	adds	r3, #4
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4a15      	ldr	r2, [pc, #84]	; (8005728 <PCD_EP_OutSetupPacket_int+0x88>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d90e      	bls.n	80056f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d009      	beq.n	80056f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ec:	461a      	mov	r2, r3
 80056ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f004 ff77 	bl	800a5e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4a0a      	ldr	r2, [pc, #40]	; (8005728 <PCD_EP_OutSetupPacket_int+0x88>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d90c      	bls.n	800571c <PCD_EP_OutSetupPacket_int+0x7c>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d108      	bne.n	800571c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6818      	ldr	r0, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005714:	461a      	mov	r2, r3
 8005716:	2101      	movs	r1, #1
 8005718:	f003 f8da 	bl	80088d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	4f54300a 	.word	0x4f54300a

0800572c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	460b      	mov	r3, r1
 8005736:	70fb      	strb	r3, [r7, #3]
 8005738:	4613      	mov	r3, r2
 800573a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005744:	78fb      	ldrb	r3, [r7, #3]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d107      	bne.n	800575a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800574a:	883b      	ldrh	r3, [r7, #0]
 800574c:	0419      	lsls	r1, r3, #16
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	430a      	orrs	r2, r1
 8005756:	629a      	str	r2, [r3, #40]	; 0x28
 8005758:	e028      	b.n	80057ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005760:	0c1b      	lsrs	r3, r3, #16
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	4413      	add	r3, r2
 8005766:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005768:	2300      	movs	r3, #0
 800576a:	73fb      	strb	r3, [r7, #15]
 800576c:	e00d      	b.n	800578a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	7bfb      	ldrb	r3, [r7, #15]
 8005774:	3340      	adds	r3, #64	; 0x40
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	0c1b      	lsrs	r3, r3, #16
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	4413      	add	r3, r2
 8005782:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005784:	7bfb      	ldrb	r3, [r7, #15]
 8005786:	3301      	adds	r3, #1
 8005788:	73fb      	strb	r3, [r7, #15]
 800578a:	7bfa      	ldrb	r2, [r7, #15]
 800578c:	78fb      	ldrb	r3, [r7, #3]
 800578e:	3b01      	subs	r3, #1
 8005790:	429a      	cmp	r2, r3
 8005792:	d3ec      	bcc.n	800576e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005794:	883b      	ldrh	r3, [r7, #0]
 8005796:	0418      	lsls	r0, r3, #16
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6819      	ldr	r1, [r3, #0]
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	3b01      	subs	r3, #1
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	4302      	orrs	r2, r0
 80057a4:	3340      	adds	r3, #64	; 0x40
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	440b      	add	r3, r1
 80057aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bc80      	pop	{r7}
 80057b6:	4770      	bx	lr

080057b8 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	460b      	mov	r3, r1
 80057c2:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	887a      	ldrh	r2, [r7, #2]
 80057ca:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bc80      	pop	{r7}
 80057d6:	4770      	bx	lr

080057d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08a      	sub	sp, #40	; 0x28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d101      	bne.n	80057ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e23b      	b.n	8005c62 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d050      	beq.n	8005898 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057f6:	4b9e      	ldr	r3, [pc, #632]	; (8005a70 <HAL_RCC_OscConfig+0x298>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 030c 	and.w	r3, r3, #12
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d00c      	beq.n	800581c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005802:	4b9b      	ldr	r3, [pc, #620]	; (8005a70 <HAL_RCC_OscConfig+0x298>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800580a:	2b08      	cmp	r3, #8
 800580c:	d112      	bne.n	8005834 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800580e:	4b98      	ldr	r3, [pc, #608]	; (8005a70 <HAL_RCC_OscConfig+0x298>)
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800581a:	d10b      	bne.n	8005834 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800581c:	4b94      	ldr	r3, [pc, #592]	; (8005a70 <HAL_RCC_OscConfig+0x298>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d036      	beq.n	8005896 <HAL_RCC_OscConfig+0xbe>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d132      	bne.n	8005896 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e216      	b.n	8005c62 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	4b8e      	ldr	r3, [pc, #568]	; (8005a74 <HAL_RCC_OscConfig+0x29c>)
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d013      	beq.n	800586e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005846:	f7fd f9c9 	bl	8002bdc <HAL_GetTick>
 800584a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800584c:	e008      	b.n	8005860 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800584e:	f7fd f9c5 	bl	8002bdc <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b64      	cmp	r3, #100	; 0x64
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e200      	b.n	8005c62 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005860:	4b83      	ldr	r3, [pc, #524]	; (8005a70 <HAL_RCC_OscConfig+0x298>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0f0      	beq.n	800584e <HAL_RCC_OscConfig+0x76>
 800586c:	e014      	b.n	8005898 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800586e:	f7fd f9b5 	bl	8002bdc <HAL_GetTick>
 8005872:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005874:	e008      	b.n	8005888 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005876:	f7fd f9b1 	bl	8002bdc <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b64      	cmp	r3, #100	; 0x64
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e1ec      	b.n	8005c62 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005888:	4b79      	ldr	r3, [pc, #484]	; (8005a70 <HAL_RCC_OscConfig+0x298>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1f0      	bne.n	8005876 <HAL_RCC_OscConfig+0x9e>
 8005894:	e000      	b.n	8005898 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005896:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d077      	beq.n	8005994 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058a4:	4b72      	ldr	r3, [pc, #456]	; (8005a70 <HAL_RCC_OscConfig+0x298>)
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f003 030c 	and.w	r3, r3, #12
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00b      	beq.n	80058c8 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058b0:	4b6f      	ldr	r3, [pc, #444]	; (8005a70 <HAL_RCC_OscConfig+0x298>)
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058b8:	2b08      	cmp	r3, #8
 80058ba:	d126      	bne.n	800590a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058bc:	4b6c      	ldr	r3, [pc, #432]	; (8005a70 <HAL_RCC_OscConfig+0x298>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d120      	bne.n	800590a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058c8:	4b69      	ldr	r3, [pc, #420]	; (8005a70 <HAL_RCC_OscConfig+0x298>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d005      	beq.n	80058e0 <HAL_RCC_OscConfig+0x108>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d001      	beq.n	80058e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e1c0      	b.n	8005c62 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058e0:	4b63      	ldr	r3, [pc, #396]	; (8005a70 <HAL_RCC_OscConfig+0x298>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	21f8      	movs	r1, #248	; 0xf8
 80058ee:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058f0:	69b9      	ldr	r1, [r7, #24]
 80058f2:	fa91 f1a1 	rbit	r1, r1
 80058f6:	6179      	str	r1, [r7, #20]
  return result;
 80058f8:	6979      	ldr	r1, [r7, #20]
 80058fa:	fab1 f181 	clz	r1, r1
 80058fe:	b2c9      	uxtb	r1, r1
 8005900:	408b      	lsls	r3, r1
 8005902:	495b      	ldr	r1, [pc, #364]	; (8005a70 <HAL_RCC_OscConfig+0x298>)
 8005904:	4313      	orrs	r3, r2
 8005906:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005908:	e044      	b.n	8005994 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d02a      	beq.n	8005968 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005912:	4b59      	ldr	r3, [pc, #356]	; (8005a78 <HAL_RCC_OscConfig+0x2a0>)
 8005914:	2201      	movs	r2, #1
 8005916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005918:	f7fd f960 	bl	8002bdc <HAL_GetTick>
 800591c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005920:	f7fd f95c 	bl	8002bdc <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e197      	b.n	8005c62 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005932:	4b4f      	ldr	r3, [pc, #316]	; (8005a70 <HAL_RCC_OscConfig+0x298>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d0f0      	beq.n	8005920 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800593e:	4b4c      	ldr	r3, [pc, #304]	; (8005a70 <HAL_RCC_OscConfig+0x298>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	21f8      	movs	r1, #248	; 0xf8
 800594c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800594e:	6939      	ldr	r1, [r7, #16]
 8005950:	fa91 f1a1 	rbit	r1, r1
 8005954:	60f9      	str	r1, [r7, #12]
  return result;
 8005956:	68f9      	ldr	r1, [r7, #12]
 8005958:	fab1 f181 	clz	r1, r1
 800595c:	b2c9      	uxtb	r1, r1
 800595e:	408b      	lsls	r3, r1
 8005960:	4943      	ldr	r1, [pc, #268]	; (8005a70 <HAL_RCC_OscConfig+0x298>)
 8005962:	4313      	orrs	r3, r2
 8005964:	600b      	str	r3, [r1, #0]
 8005966:	e015      	b.n	8005994 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005968:	4b43      	ldr	r3, [pc, #268]	; (8005a78 <HAL_RCC_OscConfig+0x2a0>)
 800596a:	2200      	movs	r2, #0
 800596c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800596e:	f7fd f935 	bl	8002bdc <HAL_GetTick>
 8005972:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005974:	e008      	b.n	8005988 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005976:	f7fd f931 	bl	8002bdc <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	2b02      	cmp	r3, #2
 8005982:	d901      	bls.n	8005988 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e16c      	b.n	8005c62 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005988:	4b39      	ldr	r3, [pc, #228]	; (8005a70 <HAL_RCC_OscConfig+0x298>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0302 	and.w	r3, r3, #2
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1f0      	bne.n	8005976 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0308 	and.w	r3, r3, #8
 800599c:	2b00      	cmp	r3, #0
 800599e:	d030      	beq.n	8005a02 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d016      	beq.n	80059d6 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059a8:	4b34      	ldr	r3, [pc, #208]	; (8005a7c <HAL_RCC_OscConfig+0x2a4>)
 80059aa:	2201      	movs	r2, #1
 80059ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059ae:	f7fd f915 	bl	8002bdc <HAL_GetTick>
 80059b2:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059b4:	e008      	b.n	80059c8 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059b6:	f7fd f911 	bl	8002bdc <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d901      	bls.n	80059c8 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e14c      	b.n	8005c62 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059c8:	4b29      	ldr	r3, [pc, #164]	; (8005a70 <HAL_RCC_OscConfig+0x298>)
 80059ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d0f0      	beq.n	80059b6 <HAL_RCC_OscConfig+0x1de>
 80059d4:	e015      	b.n	8005a02 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059d6:	4b29      	ldr	r3, [pc, #164]	; (8005a7c <HAL_RCC_OscConfig+0x2a4>)
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059dc:	f7fd f8fe 	bl	8002bdc <HAL_GetTick>
 80059e0:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059e2:	e008      	b.n	80059f6 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059e4:	f7fd f8fa 	bl	8002bdc <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d901      	bls.n	80059f6 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e135      	b.n	8005c62 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059f6:	4b1e      	ldr	r3, [pc, #120]	; (8005a70 <HAL_RCC_OscConfig+0x298>)
 80059f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059fa:	f003 0302 	and.w	r3, r3, #2
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1f0      	bne.n	80059e4 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0304 	and.w	r3, r3, #4
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 8087 	beq.w	8005b1e <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a10:	2300      	movs	r3, #0
 8005a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a16:	4b16      	ldr	r3, [pc, #88]	; (8005a70 <HAL_RCC_OscConfig+0x298>)
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d110      	bne.n	8005a44 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a22:	2300      	movs	r3, #0
 8005a24:	60bb      	str	r3, [r7, #8]
 8005a26:	4b12      	ldr	r3, [pc, #72]	; (8005a70 <HAL_RCC_OscConfig+0x298>)
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	4a11      	ldr	r2, [pc, #68]	; (8005a70 <HAL_RCC_OscConfig+0x298>)
 8005a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a30:	6413      	str	r3, [r2, #64]	; 0x40
 8005a32:	4b0f      	ldr	r3, [pc, #60]	; (8005a70 <HAL_RCC_OscConfig+0x298>)
 8005a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a3a:	60bb      	str	r3, [r7, #8]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005a44:	4b0e      	ldr	r3, [pc, #56]	; (8005a80 <HAL_RCC_OscConfig+0x2a8>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a0d      	ldr	r2, [pc, #52]	; (8005a80 <HAL_RCC_OscConfig+0x2a8>)
 8005a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a4e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a50:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <HAL_RCC_OscConfig+0x2a8>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d122      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a5c:	4b08      	ldr	r3, [pc, #32]	; (8005a80 <HAL_RCC_OscConfig+0x2a8>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a07      	ldr	r2, [pc, #28]	; (8005a80 <HAL_RCC_OscConfig+0x2a8>)
 8005a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a68:	f7fd f8b8 	bl	8002bdc <HAL_GetTick>
 8005a6c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a6e:	e012      	b.n	8005a96 <HAL_RCC_OscConfig+0x2be>
 8005a70:	40023800 	.word	0x40023800
 8005a74:	40023802 	.word	0x40023802
 8005a78:	42470000 	.word	0x42470000
 8005a7c:	42470e80 	.word	0x42470e80
 8005a80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a84:	f7fd f8aa 	bl	8002bdc <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	6a3b      	ldr	r3, [r7, #32]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e0e5      	b.n	8005c62 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a96:	4b75      	ldr	r3, [pc, #468]	; (8005c6c <HAL_RCC_OscConfig+0x494>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d0f0      	beq.n	8005a84 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	4b72      	ldr	r3, [pc, #456]	; (8005c70 <HAL_RCC_OscConfig+0x498>)
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d015      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ab4:	f7fd f892 	bl	8002bdc <HAL_GetTick>
 8005ab8:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aba:	e00a      	b.n	8005ad2 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005abc:	f7fd f88e 	bl	8002bdc <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e0c7      	b.n	8005c62 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad2:	4b68      	ldr	r3, [pc, #416]	; (8005c74 <HAL_RCC_OscConfig+0x49c>)
 8005ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0ee      	beq.n	8005abc <HAL_RCC_OscConfig+0x2e4>
 8005ade:	e014      	b.n	8005b0a <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ae0:	f7fd f87c 	bl	8002bdc <HAL_GetTick>
 8005ae4:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ae6:	e00a      	b.n	8005afe <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ae8:	f7fd f878 	bl	8002bdc <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e0b1      	b.n	8005c62 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005afe:	4b5d      	ldr	r3, [pc, #372]	; (8005c74 <HAL_RCC_OscConfig+0x49c>)
 8005b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1ee      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d105      	bne.n	8005b1e <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b12:	4b58      	ldr	r3, [pc, #352]	; (8005c74 <HAL_RCC_OscConfig+0x49c>)
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	4a57      	ldr	r2, [pc, #348]	; (8005c74 <HAL_RCC_OscConfig+0x49c>)
 8005b18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 809c 	beq.w	8005c60 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b28:	4b52      	ldr	r3, [pc, #328]	; (8005c74 <HAL_RCC_OscConfig+0x49c>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f003 030c 	and.w	r3, r3, #12
 8005b30:	2b08      	cmp	r3, #8
 8005b32:	d061      	beq.n	8005bf8 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d146      	bne.n	8005bca <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b3c:	4b4e      	ldr	r3, [pc, #312]	; (8005c78 <HAL_RCC_OscConfig+0x4a0>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b42:	f7fd f84b 	bl	8002bdc <HAL_GetTick>
 8005b46:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b48:	e008      	b.n	8005b5c <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b4a:	f7fd f847 	bl	8002bdc <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	2b64      	cmp	r3, #100	; 0x64
 8005b56:	d901      	bls.n	8005b5c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e082      	b.n	8005c62 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b5c:	4b45      	ldr	r3, [pc, #276]	; (8005c74 <HAL_RCC_OscConfig+0x49c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1f0      	bne.n	8005b4a <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b68:	4b42      	ldr	r3, [pc, #264]	; (8005c74 <HAL_RCC_OscConfig+0x49c>)
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	4b43      	ldr	r3, [pc, #268]	; (8005c7c <HAL_RCC_OscConfig+0x4a4>)
 8005b6e:	4013      	ands	r3, r2
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	69d1      	ldr	r1, [r2, #28]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6a12      	ldr	r2, [r2, #32]
 8005b78:	4311      	orrs	r1, r2
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b7e:	0192      	lsls	r2, r2, #6
 8005b80:	4311      	orrs	r1, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005b86:	0612      	lsls	r2, r2, #24
 8005b88:	4311      	orrs	r1, r2
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005b8e:	0852      	lsrs	r2, r2, #1
 8005b90:	3a01      	subs	r2, #1
 8005b92:	0412      	lsls	r2, r2, #16
 8005b94:	430a      	orrs	r2, r1
 8005b96:	4937      	ldr	r1, [pc, #220]	; (8005c74 <HAL_RCC_OscConfig+0x49c>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b9c:	4b36      	ldr	r3, [pc, #216]	; (8005c78 <HAL_RCC_OscConfig+0x4a0>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba2:	f7fd f81b 	bl	8002bdc <HAL_GetTick>
 8005ba6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005baa:	f7fd f817 	bl	8002bdc <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b64      	cmp	r3, #100	; 0x64
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e052      	b.n	8005c62 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bbc:	4b2d      	ldr	r3, [pc, #180]	; (8005c74 <HAL_RCC_OscConfig+0x49c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0f0      	beq.n	8005baa <HAL_RCC_OscConfig+0x3d2>
 8005bc8:	e04a      	b.n	8005c60 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bca:	4b2b      	ldr	r3, [pc, #172]	; (8005c78 <HAL_RCC_OscConfig+0x4a0>)
 8005bcc:	2200      	movs	r2, #0
 8005bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bd0:	f7fd f804 	bl	8002bdc <HAL_GetTick>
 8005bd4:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bd6:	e008      	b.n	8005bea <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bd8:	f7fd f800 	bl	8002bdc <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b64      	cmp	r3, #100	; 0x64
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e03b      	b.n	8005c62 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bea:	4b22      	ldr	r3, [pc, #136]	; (8005c74 <HAL_RCC_OscConfig+0x49c>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1f0      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x400>
 8005bf6:	e033      	b.n	8005c60 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e02e      	b.n	8005c62 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8005c04:	4b1b      	ldr	r3, [pc, #108]	; (8005c74 <HAL_RCC_OscConfig+0x49c>)
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d121      	bne.n	8005c5c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d11a      	bne.n	8005c5c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c32:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d111      	bne.n	8005c5c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c42:	085b      	lsrs	r3, r3, #1
 8005c44:	3b01      	subs	r3, #1
 8005c46:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d107      	bne.n	8005c5c <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c56:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d001      	beq.n	8005c60 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e000      	b.n	8005c62 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3728      	adds	r7, #40	; 0x28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	40007000 	.word	0x40007000
 8005c70:	40023870 	.word	0x40023870
 8005c74:	40023800 	.word	0x40023800
 8005c78:	42470060 	.word	0x42470060
 8005c7c:	f0bc8000 	.word	0xf0bc8000

08005c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e0d2      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c94:	4b6b      	ldr	r3, [pc, #428]	; (8005e44 <HAL_RCC_ClockConfig+0x1c4>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 030f 	and.w	r3, r3, #15
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d90c      	bls.n	8005cbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ca2:	4b68      	ldr	r3, [pc, #416]	; (8005e44 <HAL_RCC_ClockConfig+0x1c4>)
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005caa:	4b66      	ldr	r3, [pc, #408]	; (8005e44 <HAL_RCC_ClockConfig+0x1c4>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d001      	beq.n	8005cbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e0be      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0302 	and.w	r3, r3, #2
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d020      	beq.n	8005d0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0304 	and.w	r3, r3, #4
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d005      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cd4:	4b5c      	ldr	r3, [pc, #368]	; (8005e48 <HAL_RCC_ClockConfig+0x1c8>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	4a5b      	ldr	r2, [pc, #364]	; (8005e48 <HAL_RCC_ClockConfig+0x1c8>)
 8005cda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0308 	and.w	r3, r3, #8
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d005      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8005cec:	4b56      	ldr	r3, [pc, #344]	; (8005e48 <HAL_RCC_ClockConfig+0x1c8>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	4a55      	ldr	r2, [pc, #340]	; (8005e48 <HAL_RCC_ClockConfig+0x1c8>)
 8005cf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005cf6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cf8:	4b53      	ldr	r3, [pc, #332]	; (8005e48 <HAL_RCC_ClockConfig+0x1c8>)
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	4950      	ldr	r1, [pc, #320]	; (8005e48 <HAL_RCC_ClockConfig+0x1c8>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d040      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d107      	bne.n	8005d2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d1e:	4b4a      	ldr	r3, [pc, #296]	; (8005e48 <HAL_RCC_ClockConfig+0x1c8>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d115      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e085      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d107      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d36:	4b44      	ldr	r3, [pc, #272]	; (8005e48 <HAL_RCC_ClockConfig+0x1c8>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d109      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e079      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d46:	4b40      	ldr	r3, [pc, #256]	; (8005e48 <HAL_RCC_ClockConfig+0x1c8>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e071      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d56:	4b3c      	ldr	r3, [pc, #240]	; (8005e48 <HAL_RCC_ClockConfig+0x1c8>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f023 0203 	bic.w	r2, r3, #3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	4939      	ldr	r1, [pc, #228]	; (8005e48 <HAL_RCC_ClockConfig+0x1c8>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d68:	f7fc ff38 	bl	8002bdc <HAL_GetTick>
 8005d6c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d6e:	e00a      	b.n	8005d86 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d70:	f7fc ff34 	bl	8002bdc <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e059      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d86:	4b30      	ldr	r3, [pc, #192]	; (8005e48 <HAL_RCC_ClockConfig+0x1c8>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 020c 	and.w	r2, r3, #12
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d1eb      	bne.n	8005d70 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d98:	4b2a      	ldr	r3, [pc, #168]	; (8005e44 <HAL_RCC_ClockConfig+0x1c4>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 030f 	and.w	r3, r3, #15
 8005da0:	683a      	ldr	r2, [r7, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d20c      	bcs.n	8005dc0 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da6:	4b27      	ldr	r3, [pc, #156]	; (8005e44 <HAL_RCC_ClockConfig+0x1c4>)
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dae:	4b25      	ldr	r3, [pc, #148]	; (8005e44 <HAL_RCC_ClockConfig+0x1c4>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d001      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e03c      	b.n	8005e3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d008      	beq.n	8005dde <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dcc:	4b1e      	ldr	r3, [pc, #120]	; (8005e48 <HAL_RCC_ClockConfig+0x1c8>)
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	491b      	ldr	r1, [pc, #108]	; (8005e48 <HAL_RCC_ClockConfig+0x1c8>)
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0308 	and.w	r3, r3, #8
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d009      	beq.n	8005dfe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dea:	4b17      	ldr	r3, [pc, #92]	; (8005e48 <HAL_RCC_ClockConfig+0x1c8>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	4913      	ldr	r1, [pc, #76]	; (8005e48 <HAL_RCC_ClockConfig+0x1c8>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8005dfe:	f000 f82b 	bl	8005e58 <HAL_RCC_GetSysClockFreq>
 8005e02:	4601      	mov	r1, r0
 8005e04:	4b10      	ldr	r3, [pc, #64]	; (8005e48 <HAL_RCC_ClockConfig+0x1c8>)
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e0c:	22f0      	movs	r2, #240	; 0xf0
 8005e0e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	fa92 f2a2 	rbit	r2, r2
 8005e16:	60fa      	str	r2, [r7, #12]
  return result;
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	fab2 f282 	clz	r2, r2
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	40d3      	lsrs	r3, r2
 8005e22:	4a0a      	ldr	r2, [pc, #40]	; (8005e4c <HAL_RCC_ClockConfig+0x1cc>)
 8005e24:	5cd3      	ldrb	r3, [r2, r3]
 8005e26:	fa21 f303 	lsr.w	r3, r1, r3
 8005e2a:	4a09      	ldr	r2, [pc, #36]	; (8005e50 <HAL_RCC_ClockConfig+0x1d0>)
 8005e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e2e:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <HAL_RCC_ClockConfig+0x1d4>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fc fe90 	bl	8002b58 <HAL_InitTick>

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40023c00 	.word	0x40023c00
 8005e48:	40023800 	.word	0x40023800
 8005e4c:	0800dcdc 	.word	0x0800dcdc
 8005e50:	20000034 	.word	0x20000034
 8005e54:	20000038 	.word	0x20000038

08005e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e5c:	b090      	sub	sp, #64	; 0x40
 8005e5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e60:	2300      	movs	r3, #0
 8005e62:	637b      	str	r3, [r7, #52]	; 0x34
 8005e64:	2300      	movs	r3, #0
 8005e66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e68:	2300      	movs	r3, #0
 8005e6a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e70:	4b59      	ldr	r3, [pc, #356]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f003 030c 	and.w	r3, r3, #12
 8005e78:	2b08      	cmp	r3, #8
 8005e7a:	d00d      	beq.n	8005e98 <HAL_RCC_GetSysClockFreq+0x40>
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	f200 80a2 	bhi.w	8005fc6 <HAL_RCC_GetSysClockFreq+0x16e>
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <HAL_RCC_GetSysClockFreq+0x34>
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d003      	beq.n	8005e92 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e8a:	e09c      	b.n	8005fc6 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e8c:	4b53      	ldr	r3, [pc, #332]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x184>)
 8005e8e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005e90:	e09c      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e92:	4b53      	ldr	r3, [pc, #332]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005e94:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005e96:	e099      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e98:	4b4f      	ldr	r3, [pc, #316]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ea0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ea2:	4b4d      	ldr	r3, [pc, #308]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d027      	beq.n	8005efe <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eae:	4b4a      	ldr	r3, [pc, #296]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	099b      	lsrs	r3, r3, #6
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	623b      	str	r3, [r7, #32]
 8005eb8:	627a      	str	r2, [r7, #36]	; 0x24
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	4b47      	ldr	r3, [pc, #284]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ec4:	fb03 f201 	mul.w	r2, r3, r1
 8005ec8:	2300      	movs	r3, #0
 8005eca:	fb00 f303 	mul.w	r3, r0, r3
 8005ece:	4413      	add	r3, r2
 8005ed0:	4a43      	ldr	r2, [pc, #268]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ed2:	fba0 2102 	umull	r2, r1, r0, r2
 8005ed6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ed8:	62ba      	str	r2, [r7, #40]	; 0x28
 8005eda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005edc:	4413      	add	r3, r2
 8005ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	61bb      	str	r3, [r7, #24]
 8005ee6:	61fa      	str	r2, [r7, #28]
 8005ee8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005eec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005ef0:	f7fa fe26 	bl	8000b40 <__aeabi_uldivmod>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4613      	mov	r3, r2
 8005efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005efc:	e055      	b.n	8005faa <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005efe:	4b36      	ldr	r3, [pc, #216]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	099b      	lsrs	r3, r3, #6
 8005f04:	2200      	movs	r2, #0
 8005f06:	613b      	str	r3, [r7, #16]
 8005f08:	617a      	str	r2, [r7, #20]
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005f10:	f04f 0b00 	mov.w	fp, #0
 8005f14:	4652      	mov	r2, sl
 8005f16:	465b      	mov	r3, fp
 8005f18:	f04f 0000 	mov.w	r0, #0
 8005f1c:	f04f 0100 	mov.w	r1, #0
 8005f20:	0159      	lsls	r1, r3, #5
 8005f22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f26:	0150      	lsls	r0, r2, #5
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	ebb2 080a 	subs.w	r8, r2, sl
 8005f30:	eb63 090b 	sbc.w	r9, r3, fp
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005f40:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005f44:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005f48:	ebb2 0408 	subs.w	r4, r2, r8
 8005f4c:	eb63 0509 	sbc.w	r5, r3, r9
 8005f50:	f04f 0200 	mov.w	r2, #0
 8005f54:	f04f 0300 	mov.w	r3, #0
 8005f58:	00eb      	lsls	r3, r5, #3
 8005f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f5e:	00e2      	lsls	r2, r4, #3
 8005f60:	4614      	mov	r4, r2
 8005f62:	461d      	mov	r5, r3
 8005f64:	eb14 030a 	adds.w	r3, r4, sl
 8005f68:	603b      	str	r3, [r7, #0]
 8005f6a:	eb45 030b 	adc.w	r3, r5, fp
 8005f6e:	607b      	str	r3, [r7, #4]
 8005f70:	f04f 0200 	mov.w	r2, #0
 8005f74:	f04f 0300 	mov.w	r3, #0
 8005f78:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	028b      	lsls	r3, r1, #10
 8005f80:	4620      	mov	r0, r4
 8005f82:	4629      	mov	r1, r5
 8005f84:	4604      	mov	r4, r0
 8005f86:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8005f8a:	4601      	mov	r1, r0
 8005f8c:	028a      	lsls	r2, r1, #10
 8005f8e:	4610      	mov	r0, r2
 8005f90:	4619      	mov	r1, r3
 8005f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f94:	2200      	movs	r2, #0
 8005f96:	60bb      	str	r3, [r7, #8]
 8005f98:	60fa      	str	r2, [r7, #12]
 8005f9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f9e:	f7fa fdcf 	bl	8000b40 <__aeabi_uldivmod>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005faa:	4b0b      	ldr	r3, [pc, #44]	; (8005fd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	0c1b      	lsrs	r3, r3, #16
 8005fb0:	f003 0303 	and.w	r3, r3, #3
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	005b      	lsls	r3, r3, #1
 8005fb8:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005fba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005fc4:	e002      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fc6:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x184>)
 8005fc8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005fca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3740      	adds	r7, #64	; 0x40
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fd8:	40023800 	.word	0x40023800
 8005fdc:	00f42400 	.word	0x00f42400
 8005fe0:	017d7840 	.word	0x017d7840

08005fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fe8:	4b02      	ldr	r3, [pc, #8]	; (8005ff4 <HAL_RCC_GetHCLKFreq+0x10>)
 8005fea:	681b      	ldr	r3, [r3, #0]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bc80      	pop	{r7}
 8005ff2:	4770      	bx	lr
 8005ff4:	20000034 	.word	0x20000034

08005ff8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e07b      	b.n	8006102 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	2b00      	cmp	r3, #0
 8006010:	d108      	bne.n	8006024 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800601a:	d009      	beq.n	8006030 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	61da      	str	r2, [r3, #28]
 8006022:	e005      	b.n	8006030 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d106      	bne.n	8006050 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f7fc fb38 	bl	80026c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2202      	movs	r2, #2
 8006054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006066:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006078:	431a      	orrs	r2, r3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006082:	431a      	orrs	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	431a      	orrs	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	431a      	orrs	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060a0:	431a      	orrs	r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060aa:	431a      	orrs	r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b4:	ea42 0103 	orr.w	r1, r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	430a      	orrs	r2, r1
 80060c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	0c1b      	lsrs	r3, r3, #16
 80060ce:	f003 0104 	and.w	r1, r3, #4
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d6:	f003 0210 	and.w	r2, r3, #16
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69da      	ldr	r2, [r3, #28]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b088      	sub	sp, #32
 800610e:	af00      	add	r7, sp, #0
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	60b9      	str	r1, [r7, #8]
 8006114:	603b      	str	r3, [r7, #0]
 8006116:	4613      	mov	r3, r2
 8006118:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006124:	2b01      	cmp	r3, #1
 8006126:	d101      	bne.n	800612c <HAL_SPI_Transmit+0x22>
 8006128:	2302      	movs	r3, #2
 800612a:	e12d      	b.n	8006388 <HAL_SPI_Transmit+0x27e>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006134:	f7fc fd52 	bl	8002bdc <HAL_GetTick>
 8006138:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800613a:	88fb      	ldrh	r3, [r7, #6]
 800613c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b01      	cmp	r3, #1
 8006148:	d002      	beq.n	8006150 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800614a:	2302      	movs	r3, #2
 800614c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800614e:	e116      	b.n	800637e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <HAL_SPI_Transmit+0x52>
 8006156:	88fb      	ldrh	r3, [r7, #6]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d102      	bne.n	8006162 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006160:	e10d      	b.n	800637e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2203      	movs	r2, #3
 8006166:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	68ba      	ldr	r2, [r7, #8]
 8006174:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	88fa      	ldrh	r2, [r7, #6]
 800617a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	88fa      	ldrh	r2, [r7, #6]
 8006180:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061a8:	d10f      	bne.n	80061ca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d4:	2b40      	cmp	r3, #64	; 0x40
 80061d6:	d007      	beq.n	80061e8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061f0:	d14f      	bne.n	8006292 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d002      	beq.n	8006200 <HAL_SPI_Transmit+0xf6>
 80061fa:	8afb      	ldrh	r3, [r7, #22]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d142      	bne.n	8006286 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006204:	881a      	ldrh	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006210:	1c9a      	adds	r2, r3, #2
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800621a:	b29b      	uxth	r3, r3
 800621c:	3b01      	subs	r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006224:	e02f      	b.n	8006286 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f003 0302 	and.w	r3, r3, #2
 8006230:	2b02      	cmp	r3, #2
 8006232:	d112      	bne.n	800625a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006238:	881a      	ldrh	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006244:	1c9a      	adds	r2, r3, #2
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800624e:	b29b      	uxth	r3, r3
 8006250:	3b01      	subs	r3, #1
 8006252:	b29a      	uxth	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	86da      	strh	r2, [r3, #54]	; 0x36
 8006258:	e015      	b.n	8006286 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800625a:	f7fc fcbf 	bl	8002bdc <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	429a      	cmp	r2, r3
 8006268:	d803      	bhi.n	8006272 <HAL_SPI_Transmit+0x168>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006270:	d102      	bne.n	8006278 <HAL_SPI_Transmit+0x16e>
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d106      	bne.n	8006286 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006284:	e07b      	b.n	800637e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800628a:	b29b      	uxth	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1ca      	bne.n	8006226 <HAL_SPI_Transmit+0x11c>
 8006290:	e050      	b.n	8006334 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <HAL_SPI_Transmit+0x196>
 800629a:	8afb      	ldrh	r3, [r7, #22]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d144      	bne.n	800632a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	330c      	adds	r3, #12
 80062aa:	7812      	ldrb	r2, [r2, #0]
 80062ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b2:	1c5a      	adds	r2, r3, #1
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062bc:	b29b      	uxth	r3, r3
 80062be:	3b01      	subs	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80062c6:	e030      	b.n	800632a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 0302 	and.w	r3, r3, #2
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d113      	bne.n	80062fe <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	330c      	adds	r3, #12
 80062e0:	7812      	ldrb	r2, [r2, #0]
 80062e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80062fc:	e015      	b.n	800632a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062fe:	f7fc fc6d 	bl	8002bdc <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	69bb      	ldr	r3, [r7, #24]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d803      	bhi.n	8006316 <HAL_SPI_Transmit+0x20c>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006314:	d102      	bne.n	800631c <HAL_SPI_Transmit+0x212>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d106      	bne.n	800632a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006328:	e029      	b.n	800637e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800632e:	b29b      	uxth	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1c9      	bne.n	80062c8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	6839      	ldr	r1, [r7, #0]
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f000 fbae 	bl	8006a9a <SPI_EndRxTxTransaction>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2220      	movs	r2, #32
 8006348:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10a      	bne.n	8006368 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006352:	2300      	movs	r3, #0
 8006354:	613b      	str	r3, [r7, #16]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	613b      	str	r3, [r7, #16]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	613b      	str	r3, [r7, #16]
 8006366:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	77fb      	strb	r3, [r7, #31]
 8006374:	e003      	b.n	800637e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006386:	7ffb      	ldrb	r3, [r7, #31]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3720      	adds	r7, #32
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af02      	add	r7, sp, #8
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	603b      	str	r3, [r7, #0]
 800639c:	4613      	mov	r3, r2
 800639e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d002      	beq.n	80063b6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80063b0:	2302      	movs	r3, #2
 80063b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063b4:	e0fb      	b.n	80065ae <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063be:	d112      	bne.n	80063e6 <HAL_SPI_Receive+0x56>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10e      	bne.n	80063e6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2204      	movs	r2, #4
 80063cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80063d0:	88fa      	ldrh	r2, [r7, #6]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	4613      	mov	r3, r2
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	68b9      	ldr	r1, [r7, #8]
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 f8ef 	bl	80065c0 <HAL_SPI_TransmitReceive>
 80063e2:	4603      	mov	r3, r0
 80063e4:	e0e8      	b.n	80065b8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d101      	bne.n	80063f4 <HAL_SPI_Receive+0x64>
 80063f0:	2302      	movs	r3, #2
 80063f2:	e0e1      	b.n	80065b8 <HAL_SPI_Receive+0x228>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063fc:	f7fc fbee 	bl	8002bdc <HAL_GetTick>
 8006400:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <HAL_SPI_Receive+0x7e>
 8006408:	88fb      	ldrh	r3, [r7, #6]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d102      	bne.n	8006414 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006412:	e0cc      	b.n	80065ae <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2204      	movs	r2, #4
 8006418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	88fa      	ldrh	r2, [r7, #6]
 800642c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	88fa      	ldrh	r2, [r7, #6]
 8006432:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2200      	movs	r2, #0
 800643e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800645a:	d10f      	bne.n	800647c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800646a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800647a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006486:	2b40      	cmp	r3, #64	; 0x40
 8006488:	d007      	beq.n	800649a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006498:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d16a      	bne.n	8006578 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80064a2:	e032      	b.n	800650a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d115      	bne.n	80064de <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f103 020c 	add.w	r2, r3, #12
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064be:	7812      	ldrb	r2, [r2, #0]
 80064c0:	b2d2      	uxtb	r2, r2
 80064c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	3b01      	subs	r3, #1
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064dc:	e015      	b.n	800650a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064de:	f7fc fb7d 	bl	8002bdc <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	683a      	ldr	r2, [r7, #0]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d803      	bhi.n	80064f6 <HAL_SPI_Receive+0x166>
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f4:	d102      	bne.n	80064fc <HAL_SPI_Receive+0x16c>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d106      	bne.n	800650a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006508:	e051      	b.n	80065ae <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800650e:	b29b      	uxth	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1c7      	bne.n	80064a4 <HAL_SPI_Receive+0x114>
 8006514:	e035      	b.n	8006582 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b01      	cmp	r3, #1
 8006522:	d113      	bne.n	800654c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652e:	b292      	uxth	r2, r2
 8006530:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006536:	1c9a      	adds	r2, r3, #2
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006540:	b29b      	uxth	r3, r3
 8006542:	3b01      	subs	r3, #1
 8006544:	b29a      	uxth	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	87da      	strh	r2, [r3, #62]	; 0x3e
 800654a:	e015      	b.n	8006578 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800654c:	f7fc fb46 	bl	8002bdc <HAL_GetTick>
 8006550:	4602      	mov	r2, r0
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	429a      	cmp	r2, r3
 800655a:	d803      	bhi.n	8006564 <HAL_SPI_Receive+0x1d4>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006562:	d102      	bne.n	800656a <HAL_SPI_Receive+0x1da>
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d106      	bne.n	8006578 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2201      	movs	r2, #1
 8006572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006576:	e01a      	b.n	80065ae <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1c9      	bne.n	8006516 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	6839      	ldr	r1, [r7, #0]
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f000 fa52 	bl	8006a30 <SPI_EndRxTransaction>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d002      	beq.n	8006598 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2220      	movs	r2, #32
 8006596:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	75fb      	strb	r3, [r7, #23]
 80065a4:	e003      	b.n	80065ae <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80065b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3718      	adds	r7, #24
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b08c      	sub	sp, #48	; 0x30
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
 80065cc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80065ce:	2301      	movs	r3, #1
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d101      	bne.n	80065e6 <HAL_SPI_TransmitReceive+0x26>
 80065e2:	2302      	movs	r3, #2
 80065e4:	e198      	b.n	8006918 <HAL_SPI_TransmitReceive+0x358>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065ee:	f7fc faf5 	bl	8002bdc <HAL_GetTick>
 80065f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006604:	887b      	ldrh	r3, [r7, #2]
 8006606:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006608:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800660c:	2b01      	cmp	r3, #1
 800660e:	d00f      	beq.n	8006630 <HAL_SPI_TransmitReceive+0x70>
 8006610:	69fb      	ldr	r3, [r7, #28]
 8006612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006616:	d107      	bne.n	8006628 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d103      	bne.n	8006628 <HAL_SPI_TransmitReceive+0x68>
 8006620:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006624:	2b04      	cmp	r3, #4
 8006626:	d003      	beq.n	8006630 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006628:	2302      	movs	r3, #2
 800662a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800662e:	e16d      	b.n	800690c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d005      	beq.n	8006642 <HAL_SPI_TransmitReceive+0x82>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <HAL_SPI_TransmitReceive+0x82>
 800663c:	887b      	ldrh	r3, [r7, #2]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d103      	bne.n	800664a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006648:	e160      	b.n	800690c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006650:	b2db      	uxtb	r3, r3
 8006652:	2b04      	cmp	r3, #4
 8006654:	d003      	beq.n	800665e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2205      	movs	r2, #5
 800665a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	887a      	ldrh	r2, [r7, #2]
 800666e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	887a      	ldrh	r2, [r7, #2]
 8006674:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	887a      	ldrh	r2, [r7, #2]
 8006680:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	887a      	ldrh	r2, [r7, #2]
 8006686:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669e:	2b40      	cmp	r3, #64	; 0x40
 80066a0:	d007      	beq.n	80066b2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ba:	d17c      	bne.n	80067b6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d002      	beq.n	80066ca <HAL_SPI_TransmitReceive+0x10a>
 80066c4:	8b7b      	ldrh	r3, [r7, #26]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d16a      	bne.n	80067a0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ce:	881a      	ldrh	r2, [r3, #0]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066da:	1c9a      	adds	r2, r3, #2
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	3b01      	subs	r3, #1
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066ee:	e057      	b.n	80067a0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d11b      	bne.n	8006736 <HAL_SPI_TransmitReceive+0x176>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006702:	b29b      	uxth	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	d016      	beq.n	8006736 <HAL_SPI_TransmitReceive+0x176>
 8006708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670a:	2b01      	cmp	r3, #1
 800670c:	d113      	bne.n	8006736 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006712:	881a      	ldrh	r2, [r3, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671e:	1c9a      	adds	r2, r3, #2
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006728:	b29b      	uxth	r3, r3
 800672a:	3b01      	subs	r3, #1
 800672c:	b29a      	uxth	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006732:	2300      	movs	r3, #0
 8006734:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b01      	cmp	r3, #1
 8006742:	d119      	bne.n	8006778 <HAL_SPI_TransmitReceive+0x1b8>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006748:	b29b      	uxth	r3, r3
 800674a:	2b00      	cmp	r3, #0
 800674c:	d014      	beq.n	8006778 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68da      	ldr	r2, [r3, #12]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006758:	b292      	uxth	r2, r2
 800675a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006760:	1c9a      	adds	r2, r3, #2
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800676a:	b29b      	uxth	r3, r3
 800676c:	3b01      	subs	r3, #1
 800676e:	b29a      	uxth	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006774:	2301      	movs	r3, #1
 8006776:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006778:	f7fc fa30 	bl	8002bdc <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006784:	429a      	cmp	r2, r3
 8006786:	d80b      	bhi.n	80067a0 <HAL_SPI_TransmitReceive+0x1e0>
 8006788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678e:	d007      	beq.n	80067a0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800679e:	e0b5      	b.n	800690c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1a2      	bne.n	80066f0 <HAL_SPI_TransmitReceive+0x130>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d19d      	bne.n	80066f0 <HAL_SPI_TransmitReceive+0x130>
 80067b4:	e080      	b.n	80068b8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <HAL_SPI_TransmitReceive+0x204>
 80067be:	8b7b      	ldrh	r3, [r7, #26]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d16f      	bne.n	80068a4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	330c      	adds	r3, #12
 80067ce:	7812      	ldrb	r2, [r2, #0]
 80067d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067d6:	1c5a      	adds	r2, r3, #1
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80067ea:	e05b      	b.n	80068a4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d11c      	bne.n	8006834 <HAL_SPI_TransmitReceive+0x274>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067fe:	b29b      	uxth	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	d017      	beq.n	8006834 <HAL_SPI_TransmitReceive+0x274>
 8006804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006806:	2b01      	cmp	r3, #1
 8006808:	d114      	bne.n	8006834 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	330c      	adds	r3, #12
 8006814:	7812      	ldrb	r2, [r2, #0]
 8006816:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006826:	b29b      	uxth	r3, r3
 8006828:	3b01      	subs	r3, #1
 800682a:	b29a      	uxth	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006830:	2300      	movs	r3, #0
 8006832:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	2b01      	cmp	r3, #1
 8006840:	d119      	bne.n	8006876 <HAL_SPI_TransmitReceive+0x2b6>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006846:	b29b      	uxth	r3, r3
 8006848:	2b00      	cmp	r3, #0
 800684a:	d014      	beq.n	8006876 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006856:	b2d2      	uxtb	r2, r2
 8006858:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006868:	b29b      	uxth	r3, r3
 800686a:	3b01      	subs	r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006872:	2301      	movs	r3, #1
 8006874:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006876:	f7fc f9b1 	bl	8002bdc <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006882:	429a      	cmp	r2, r3
 8006884:	d803      	bhi.n	800688e <HAL_SPI_TransmitReceive+0x2ce>
 8006886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800688c:	d102      	bne.n	8006894 <HAL_SPI_TransmitReceive+0x2d4>
 800688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006890:	2b00      	cmp	r3, #0
 8006892:	d107      	bne.n	80068a4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80068a2:	e033      	b.n	800690c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d19e      	bne.n	80067ec <HAL_SPI_TransmitReceive+0x22c>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d199      	bne.n	80067ec <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 f8ec 	bl	8006a9a <SPI_EndRxTxTransaction>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d006      	beq.n	80068d6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2220      	movs	r2, #32
 80068d2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80068d4:	e01a      	b.n	800690c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d10a      	bne.n	80068f4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068de:	2300      	movs	r3, #0
 80068e0:	617b      	str	r3, [r7, #20]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	617b      	str	r3, [r7, #20]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	617b      	str	r3, [r7, #20]
 80068f2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006902:	e003      	b.n	800690c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006914:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006918:	4618      	mov	r0, r3
 800691a:	3730      	adds	r7, #48	; 0x30
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	603b      	str	r3, [r7, #0]
 800692c:	4613      	mov	r3, r2
 800692e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006930:	f7fc f954 	bl	8002bdc <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	1a9b      	subs	r3, r3, r2
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	4413      	add	r3, r2
 800693e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006940:	f7fc f94c 	bl	8002bdc <HAL_GetTick>
 8006944:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006946:	4b39      	ldr	r3, [pc, #228]	; (8006a2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	015b      	lsls	r3, r3, #5
 800694c:	0d1b      	lsrs	r3, r3, #20
 800694e:	69fa      	ldr	r2, [r7, #28]
 8006950:	fb02 f303 	mul.w	r3, r2, r3
 8006954:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006956:	e054      	b.n	8006a02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695e:	d050      	beq.n	8006a02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006960:	f7fc f93c 	bl	8002bdc <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	69fa      	ldr	r2, [r7, #28]
 800696c:	429a      	cmp	r2, r3
 800696e:	d902      	bls.n	8006976 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d13d      	bne.n	80069f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006984:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800698e:	d111      	bne.n	80069b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006998:	d004      	beq.n	80069a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069a2:	d107      	bne.n	80069b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069bc:	d10f      	bne.n	80069de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e017      	b.n	8006a22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	bf0c      	ite	eq
 8006a12:	2301      	moveq	r3, #1
 8006a14:	2300      	movne	r3, #0
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	461a      	mov	r2, r3
 8006a1a:	79fb      	ldrb	r3, [r7, #7]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d19b      	bne.n	8006958 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3720      	adds	r7, #32
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20000034 	.word	0x20000034

08006a30 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a44:	d111      	bne.n	8006a6a <SPI_EndRxTransaction+0x3a>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a4e:	d004      	beq.n	8006a5a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a58:	d107      	bne.n	8006a6a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a68:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2200      	movs	r2, #0
 8006a72:	2180      	movs	r1, #128	; 0x80
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f7ff ff53 	bl	8006920 <SPI_WaitFlagStateUntilTimeout>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d007      	beq.n	8006a90 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a84:	f043 0220 	orr.w	r2, r3, #32
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e000      	b.n	8006a92 <SPI_EndRxTransaction+0x62>
  }
  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a9a:	b580      	push	{r7, lr}
 8006a9c:	b086      	sub	sp, #24
 8006a9e:	af02      	add	r7, sp, #8
 8006aa0:	60f8      	str	r0, [r7, #12]
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	2200      	movs	r2, #0
 8006aae:	2180      	movs	r1, #128	; 0x80
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f7ff ff35 	bl	8006920 <SPI_WaitFlagStateUntilTimeout>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d007      	beq.n	8006acc <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac0:	f043 0220 	orr.w	r2, r3, #32
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e000      	b.n	8006ace <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b082      	sub	sp, #8
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e041      	b.n	8006b6c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d106      	bne.n	8006b02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f7fb ffb9 	bl	8002a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2202      	movs	r2, #2
 8006b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	3304      	adds	r3, #4
 8006b12:	4619      	mov	r1, r3
 8006b14:	4610      	mov	r0, r2
 8006b16:	f000 fa8f 	bl	8007038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d001      	beq.n	8006b8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e04e      	b.n	8006c2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2202      	movs	r2, #2
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68da      	ldr	r2, [r3, #12]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0201 	orr.w	r2, r2, #1
 8006ba2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a22      	ldr	r2, [pc, #136]	; (8006c34 <HAL_TIM_Base_Start_IT+0xc0>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d022      	beq.n	8006bf4 <HAL_TIM_Base_Start_IT+0x80>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb6:	d01d      	beq.n	8006bf4 <HAL_TIM_Base_Start_IT+0x80>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a1e      	ldr	r2, [pc, #120]	; (8006c38 <HAL_TIM_Base_Start_IT+0xc4>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d018      	beq.n	8006bf4 <HAL_TIM_Base_Start_IT+0x80>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a1d      	ldr	r2, [pc, #116]	; (8006c3c <HAL_TIM_Base_Start_IT+0xc8>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d013      	beq.n	8006bf4 <HAL_TIM_Base_Start_IT+0x80>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a1b      	ldr	r2, [pc, #108]	; (8006c40 <HAL_TIM_Base_Start_IT+0xcc>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d00e      	beq.n	8006bf4 <HAL_TIM_Base_Start_IT+0x80>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a1a      	ldr	r2, [pc, #104]	; (8006c44 <HAL_TIM_Base_Start_IT+0xd0>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d009      	beq.n	8006bf4 <HAL_TIM_Base_Start_IT+0x80>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a18      	ldr	r2, [pc, #96]	; (8006c48 <HAL_TIM_Base_Start_IT+0xd4>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d004      	beq.n	8006bf4 <HAL_TIM_Base_Start_IT+0x80>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a17      	ldr	r2, [pc, #92]	; (8006c4c <HAL_TIM_Base_Start_IT+0xd8>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d111      	bne.n	8006c18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f003 0307 	and.w	r3, r3, #7
 8006bfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b06      	cmp	r3, #6
 8006c04:	d010      	beq.n	8006c28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f042 0201 	orr.w	r2, r2, #1
 8006c14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c16:	e007      	b.n	8006c28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f042 0201 	orr.w	r2, r2, #1
 8006c26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bc80      	pop	{r7}
 8006c32:	4770      	bx	lr
 8006c34:	40010000 	.word	0x40010000
 8006c38:	40000400 	.word	0x40000400
 8006c3c:	40000800 	.word	0x40000800
 8006c40:	40000c00 	.word	0x40000c00
 8006c44:	40010400 	.word	0x40010400
 8006c48:	40014000 	.word	0x40014000
 8006c4c:	40001800 	.word	0x40001800

08006c50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d122      	bne.n	8006cac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f003 0302 	and.w	r3, r3, #2
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d11b      	bne.n	8006cac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f06f 0202 	mvn.w	r2, #2
 8006c7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	f003 0303 	and.w	r3, r3, #3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d003      	beq.n	8006c9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f9b4 	bl	8007000 <HAL_TIM_IC_CaptureCallback>
 8006c98:	e005      	b.n	8006ca6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f9a7 	bl	8006fee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f9b6 	bl	8007012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	f003 0304 	and.w	r3, r3, #4
 8006cb6:	2b04      	cmp	r3, #4
 8006cb8:	d122      	bne.n	8006d00 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	2b04      	cmp	r3, #4
 8006cc6:	d11b      	bne.n	8006d00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f06f 0204 	mvn.w	r2, #4
 8006cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d003      	beq.n	8006cee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f98a 	bl	8007000 <HAL_TIM_IC_CaptureCallback>
 8006cec:	e005      	b.n	8006cfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f97d 	bl	8006fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f98c 	bl	8007012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	f003 0308 	and.w	r3, r3, #8
 8006d0a:	2b08      	cmp	r3, #8
 8006d0c:	d122      	bne.n	8006d54 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	f003 0308 	and.w	r3, r3, #8
 8006d18:	2b08      	cmp	r3, #8
 8006d1a:	d11b      	bne.n	8006d54 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f06f 0208 	mvn.w	r2, #8
 8006d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2204      	movs	r2, #4
 8006d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	69db      	ldr	r3, [r3, #28]
 8006d32:	f003 0303 	and.w	r3, r3, #3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f960 	bl	8007000 <HAL_TIM_IC_CaptureCallback>
 8006d40:	e005      	b.n	8006d4e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f953 	bl	8006fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f962 	bl	8007012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	f003 0310 	and.w	r3, r3, #16
 8006d5e:	2b10      	cmp	r3, #16
 8006d60:	d122      	bne.n	8006da8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f003 0310 	and.w	r3, r3, #16
 8006d6c:	2b10      	cmp	r3, #16
 8006d6e:	d11b      	bne.n	8006da8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f06f 0210 	mvn.w	r2, #16
 8006d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2208      	movs	r2, #8
 8006d7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d003      	beq.n	8006d96 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f936 	bl	8007000 <HAL_TIM_IC_CaptureCallback>
 8006d94:	e005      	b.n	8006da2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f929 	bl	8006fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f938 	bl	8007012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d10e      	bne.n	8006dd4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d107      	bne.n	8006dd4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f06f 0201 	mvn.w	r2, #1
 8006dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7fa fd46 	bl	8001860 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dde:	2b80      	cmp	r3, #128	; 0x80
 8006de0:	d10e      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dec:	2b80      	cmp	r3, #128	; 0x80
 8006dee:	d107      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fad3 	bl	80073a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e0a:	2b40      	cmp	r3, #64	; 0x40
 8006e0c:	d10e      	bne.n	8006e2c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e18:	2b40      	cmp	r3, #64	; 0x40
 8006e1a:	d107      	bne.n	8006e2c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f8fc 	bl	8007024 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	f003 0320 	and.w	r3, r3, #32
 8006e36:	2b20      	cmp	r3, #32
 8006e38:	d10e      	bne.n	8006e58 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f003 0320 	and.w	r3, r3, #32
 8006e44:	2b20      	cmp	r3, #32
 8006e46:	d107      	bne.n	8006e58 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f06f 0220 	mvn.w	r2, #32
 8006e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fa9e 	bl	8007394 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e58:	bf00      	nop
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d101      	bne.n	8006e7c <HAL_TIM_ConfigClockSource+0x1c>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	e0b4      	b.n	8006fe6 <HAL_TIM_ConfigClockSource+0x186>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2202      	movs	r2, #2
 8006e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ea2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eb4:	d03e      	beq.n	8006f34 <HAL_TIM_ConfigClockSource+0xd4>
 8006eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eba:	f200 8087 	bhi.w	8006fcc <HAL_TIM_ConfigClockSource+0x16c>
 8006ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ec2:	f000 8086 	beq.w	8006fd2 <HAL_TIM_ConfigClockSource+0x172>
 8006ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eca:	d87f      	bhi.n	8006fcc <HAL_TIM_ConfigClockSource+0x16c>
 8006ecc:	2b70      	cmp	r3, #112	; 0x70
 8006ece:	d01a      	beq.n	8006f06 <HAL_TIM_ConfigClockSource+0xa6>
 8006ed0:	2b70      	cmp	r3, #112	; 0x70
 8006ed2:	d87b      	bhi.n	8006fcc <HAL_TIM_ConfigClockSource+0x16c>
 8006ed4:	2b60      	cmp	r3, #96	; 0x60
 8006ed6:	d050      	beq.n	8006f7a <HAL_TIM_ConfigClockSource+0x11a>
 8006ed8:	2b60      	cmp	r3, #96	; 0x60
 8006eda:	d877      	bhi.n	8006fcc <HAL_TIM_ConfigClockSource+0x16c>
 8006edc:	2b50      	cmp	r3, #80	; 0x50
 8006ede:	d03c      	beq.n	8006f5a <HAL_TIM_ConfigClockSource+0xfa>
 8006ee0:	2b50      	cmp	r3, #80	; 0x50
 8006ee2:	d873      	bhi.n	8006fcc <HAL_TIM_ConfigClockSource+0x16c>
 8006ee4:	2b40      	cmp	r3, #64	; 0x40
 8006ee6:	d058      	beq.n	8006f9a <HAL_TIM_ConfigClockSource+0x13a>
 8006ee8:	2b40      	cmp	r3, #64	; 0x40
 8006eea:	d86f      	bhi.n	8006fcc <HAL_TIM_ConfigClockSource+0x16c>
 8006eec:	2b30      	cmp	r3, #48	; 0x30
 8006eee:	d064      	beq.n	8006fba <HAL_TIM_ConfigClockSource+0x15a>
 8006ef0:	2b30      	cmp	r3, #48	; 0x30
 8006ef2:	d86b      	bhi.n	8006fcc <HAL_TIM_ConfigClockSource+0x16c>
 8006ef4:	2b20      	cmp	r3, #32
 8006ef6:	d060      	beq.n	8006fba <HAL_TIM_ConfigClockSource+0x15a>
 8006ef8:	2b20      	cmp	r3, #32
 8006efa:	d867      	bhi.n	8006fcc <HAL_TIM_ConfigClockSource+0x16c>
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d05c      	beq.n	8006fba <HAL_TIM_ConfigClockSource+0x15a>
 8006f00:	2b10      	cmp	r3, #16
 8006f02:	d05a      	beq.n	8006fba <HAL_TIM_ConfigClockSource+0x15a>
 8006f04:	e062      	b.n	8006fcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f16:	f000 f9a4 	bl	8007262 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	609a      	str	r2, [r3, #8]
      break;
 8006f32:	e04f      	b.n	8006fd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f44:	f000 f98d 	bl	8007262 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689a      	ldr	r2, [r3, #8]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f56:	609a      	str	r2, [r3, #8]
      break;
 8006f58:	e03c      	b.n	8006fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f66:	461a      	mov	r2, r3
 8006f68:	f000 f904 	bl	8007174 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2150      	movs	r1, #80	; 0x50
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 f95b 	bl	800722e <TIM_ITRx_SetConfig>
      break;
 8006f78:	e02c      	b.n	8006fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f86:	461a      	mov	r2, r3
 8006f88:	f000 f922 	bl	80071d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2160      	movs	r1, #96	; 0x60
 8006f92:	4618      	mov	r0, r3
 8006f94:	f000 f94b 	bl	800722e <TIM_ITRx_SetConfig>
      break;
 8006f98:	e01c      	b.n	8006fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f000 f8e4 	bl	8007174 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2140      	movs	r1, #64	; 0x40
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f000 f93b 	bl	800722e <TIM_ITRx_SetConfig>
      break;
 8006fb8:	e00c      	b.n	8006fd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	f000 f932 	bl	800722e <TIM_ITRx_SetConfig>
      break;
 8006fca:	e003      	b.n	8006fd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	73fb      	strb	r3, [r7, #15]
      break;
 8006fd0:	e000      	b.n	8006fd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006fd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}

08006fee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b083      	sub	sp, #12
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bc80      	pop	{r7}
 8006ffe:	4770      	bx	lr

08007000 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	bc80      	pop	{r7}
 8007010:	4770      	bx	lr

08007012 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007012:	b480      	push	{r7}
 8007014:	b083      	sub	sp, #12
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800701a:	bf00      	nop
 800701c:	370c      	adds	r7, #12
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr

08007024 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	bc80      	pop	{r7}
 8007034:	4770      	bx	lr
	...

08007038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a3f      	ldr	r2, [pc, #252]	; (8007148 <TIM_Base_SetConfig+0x110>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d013      	beq.n	8007078 <TIM_Base_SetConfig+0x40>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007056:	d00f      	beq.n	8007078 <TIM_Base_SetConfig+0x40>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a3c      	ldr	r2, [pc, #240]	; (800714c <TIM_Base_SetConfig+0x114>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d00b      	beq.n	8007078 <TIM_Base_SetConfig+0x40>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a3b      	ldr	r2, [pc, #236]	; (8007150 <TIM_Base_SetConfig+0x118>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d007      	beq.n	8007078 <TIM_Base_SetConfig+0x40>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a3a      	ldr	r2, [pc, #232]	; (8007154 <TIM_Base_SetConfig+0x11c>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d003      	beq.n	8007078 <TIM_Base_SetConfig+0x40>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a39      	ldr	r2, [pc, #228]	; (8007158 <TIM_Base_SetConfig+0x120>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d108      	bne.n	800708a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	4313      	orrs	r3, r2
 8007088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a2e      	ldr	r2, [pc, #184]	; (8007148 <TIM_Base_SetConfig+0x110>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d02b      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007098:	d027      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4a2b      	ldr	r2, [pc, #172]	; (800714c <TIM_Base_SetConfig+0x114>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d023      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4a2a      	ldr	r2, [pc, #168]	; (8007150 <TIM_Base_SetConfig+0x118>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d01f      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a29      	ldr	r2, [pc, #164]	; (8007154 <TIM_Base_SetConfig+0x11c>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d01b      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a28      	ldr	r2, [pc, #160]	; (8007158 <TIM_Base_SetConfig+0x120>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d017      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a27      	ldr	r2, [pc, #156]	; (800715c <TIM_Base_SetConfig+0x124>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d013      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a26      	ldr	r2, [pc, #152]	; (8007160 <TIM_Base_SetConfig+0x128>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d00f      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a25      	ldr	r2, [pc, #148]	; (8007164 <TIM_Base_SetConfig+0x12c>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00b      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a24      	ldr	r2, [pc, #144]	; (8007168 <TIM_Base_SetConfig+0x130>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d007      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a23      	ldr	r2, [pc, #140]	; (800716c <TIM_Base_SetConfig+0x134>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d003      	beq.n	80070ea <TIM_Base_SetConfig+0xb2>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a22      	ldr	r2, [pc, #136]	; (8007170 <TIM_Base_SetConfig+0x138>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d108      	bne.n	80070fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	4313      	orrs	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a09      	ldr	r2, [pc, #36]	; (8007148 <TIM_Base_SetConfig+0x110>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d003      	beq.n	8007130 <TIM_Base_SetConfig+0xf8>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a0b      	ldr	r2, [pc, #44]	; (8007158 <TIM_Base_SetConfig+0x120>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d103      	bne.n	8007138 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	691a      	ldr	r2, [r3, #16]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	615a      	str	r2, [r3, #20]
}
 800713e:	bf00      	nop
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	bc80      	pop	{r7}
 8007146:	4770      	bx	lr
 8007148:	40010000 	.word	0x40010000
 800714c:	40000400 	.word	0x40000400
 8007150:	40000800 	.word	0x40000800
 8007154:	40000c00 	.word	0x40000c00
 8007158:	40010400 	.word	0x40010400
 800715c:	40014000 	.word	0x40014000
 8007160:	40014400 	.word	0x40014400
 8007164:	40014800 	.word	0x40014800
 8007168:	40001800 	.word	0x40001800
 800716c:	40001c00 	.word	0x40001c00
 8007170:	40002000 	.word	0x40002000

08007174 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6a1b      	ldr	r3, [r3, #32]
 8007184:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	f023 0201 	bic.w	r2, r3, #1
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007198:	693b      	ldr	r3, [r7, #16]
 800719a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800719e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	011b      	lsls	r3, r3, #4
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f023 030a 	bic.w	r3, r3, #10
 80071b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071b2:	697a      	ldr	r2, [r7, #20]
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	697a      	ldr	r2, [r7, #20]
 80071c4:	621a      	str	r2, [r3, #32]
}
 80071c6:	bf00      	nop
 80071c8:	371c      	adds	r7, #28
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bc80      	pop	{r7}
 80071ce:	4770      	bx	lr

080071d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b087      	sub	sp, #28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6a1b      	ldr	r3, [r3, #32]
 80071e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	f023 0210 	bic.w	r2, r3, #16
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	031b      	lsls	r3, r3, #12
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	4313      	orrs	r3, r2
 8007204:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800720c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	011b      	lsls	r3, r3, #4
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	4313      	orrs	r3, r2
 8007216:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	621a      	str	r2, [r3, #32]
}
 8007224:	bf00      	nop
 8007226:	371c      	adds	r7, #28
 8007228:	46bd      	mov	sp, r7
 800722a:	bc80      	pop	{r7}
 800722c:	4770      	bx	lr

0800722e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800722e:	b480      	push	{r7}
 8007230:	b085      	sub	sp, #20
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
 8007236:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007244:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	4313      	orrs	r3, r2
 800724c:	f043 0307 	orr.w	r3, r3, #7
 8007250:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	609a      	str	r2, [r3, #8]
}
 8007258:	bf00      	nop
 800725a:	3714      	adds	r7, #20
 800725c:	46bd      	mov	sp, r7
 800725e:	bc80      	pop	{r7}
 8007260:	4770      	bx	lr

08007262 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007262:	b480      	push	{r7}
 8007264:	b087      	sub	sp, #28
 8007266:	af00      	add	r7, sp, #0
 8007268:	60f8      	str	r0, [r7, #12]
 800726a:	60b9      	str	r1, [r7, #8]
 800726c:	607a      	str	r2, [r7, #4]
 800726e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800727c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	021a      	lsls	r2, r3, #8
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	431a      	orrs	r2, r3
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	4313      	orrs	r3, r2
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	4313      	orrs	r3, r2
 800728e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	609a      	str	r2, [r3, #8]
}
 8007296:	bf00      	nop
 8007298:	371c      	adds	r7, #28
 800729a:	46bd      	mov	sp, r7
 800729c:	bc80      	pop	{r7}
 800729e:	4770      	bx	lr

080072a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d101      	bne.n	80072b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072b4:	2302      	movs	r3, #2
 80072b6:	e05a      	b.n	800736e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2202      	movs	r2, #2
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a20      	ldr	r2, [pc, #128]	; (8007378 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d022      	beq.n	8007342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007304:	d01d      	beq.n	8007342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a1c      	ldr	r2, [pc, #112]	; (800737c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d018      	beq.n	8007342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a1a      	ldr	r2, [pc, #104]	; (8007380 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d013      	beq.n	8007342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a19      	ldr	r2, [pc, #100]	; (8007384 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d00e      	beq.n	8007342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a17      	ldr	r2, [pc, #92]	; (8007388 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d009      	beq.n	8007342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a16      	ldr	r2, [pc, #88]	; (800738c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d004      	beq.n	8007342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a14      	ldr	r2, [pc, #80]	; (8007390 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d10c      	bne.n	800735c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007348:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	4313      	orrs	r3, r2
 8007352:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	bc80      	pop	{r7}
 8007376:	4770      	bx	lr
 8007378:	40010000 	.word	0x40010000
 800737c:	40000400 	.word	0x40000400
 8007380:	40000800 	.word	0x40000800
 8007384:	40000c00 	.word	0x40000c00
 8007388:	40010400 	.word	0x40010400
 800738c:	40014000 	.word	0x40014000
 8007390:	40001800 	.word	0x40001800

08007394 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007394:	b480      	push	{r7}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bc80      	pop	{r7}
 80073a4:	4770      	bx	lr

080073a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b083      	sub	sp, #12
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073ae:	bf00      	nop
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bc80      	pop	{r7}
 80073b6:	4770      	bx	lr

080073b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073b8:	b084      	sub	sp, #16
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b084      	sub	sp, #16
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	f107 001c 	add.w	r0, r7, #28
 80073c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d122      	bne.n	8007416 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80073e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80073f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d105      	bne.n	800740a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f001 fabc 	bl	8008988 <USB_CoreReset>
 8007410:	4603      	mov	r3, r0
 8007412:	73fb      	strb	r3, [r7, #15]
 8007414:	e010      	b.n	8007438 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f001 fab0 	bl	8008988 <USB_CoreReset>
 8007428:	4603      	mov	r3, r0
 800742a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007430:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	2b01      	cmp	r3, #1
 800743c:	d10b      	bne.n	8007456 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f043 0206 	orr.w	r2, r3, #6
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	f043 0220 	orr.w	r2, r3, #32
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007456:	7bfb      	ldrb	r3, [r7, #15]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007462:	b004      	add	sp, #16
 8007464:	4770      	bx	lr
	...

08007468 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007468:	b480      	push	{r7}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	4613      	mov	r3, r2
 8007474:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007476:	79fb      	ldrb	r3, [r7, #7]
 8007478:	2b02      	cmp	r3, #2
 800747a:	d165      	bne.n	8007548 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	4a41      	ldr	r2, [pc, #260]	; (8007584 <USB_SetTurnaroundTime+0x11c>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d906      	bls.n	8007492 <USB_SetTurnaroundTime+0x2a>
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	4a40      	ldr	r2, [pc, #256]	; (8007588 <USB_SetTurnaroundTime+0x120>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d202      	bcs.n	8007492 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800748c:	230f      	movs	r3, #15
 800748e:	617b      	str	r3, [r7, #20]
 8007490:	e062      	b.n	8007558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	4a3c      	ldr	r2, [pc, #240]	; (8007588 <USB_SetTurnaroundTime+0x120>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d306      	bcc.n	80074a8 <USB_SetTurnaroundTime+0x40>
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	4a3b      	ldr	r2, [pc, #236]	; (800758c <USB_SetTurnaroundTime+0x124>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d202      	bcs.n	80074a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80074a2:	230e      	movs	r3, #14
 80074a4:	617b      	str	r3, [r7, #20]
 80074a6:	e057      	b.n	8007558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	4a38      	ldr	r2, [pc, #224]	; (800758c <USB_SetTurnaroundTime+0x124>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d306      	bcc.n	80074be <USB_SetTurnaroundTime+0x56>
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	4a37      	ldr	r2, [pc, #220]	; (8007590 <USB_SetTurnaroundTime+0x128>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d202      	bcs.n	80074be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80074b8:	230d      	movs	r3, #13
 80074ba:	617b      	str	r3, [r7, #20]
 80074bc:	e04c      	b.n	8007558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	4a33      	ldr	r2, [pc, #204]	; (8007590 <USB_SetTurnaroundTime+0x128>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d306      	bcc.n	80074d4 <USB_SetTurnaroundTime+0x6c>
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	4a32      	ldr	r2, [pc, #200]	; (8007594 <USB_SetTurnaroundTime+0x12c>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d802      	bhi.n	80074d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80074ce:	230c      	movs	r3, #12
 80074d0:	617b      	str	r3, [r7, #20]
 80074d2:	e041      	b.n	8007558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	4a2f      	ldr	r2, [pc, #188]	; (8007594 <USB_SetTurnaroundTime+0x12c>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d906      	bls.n	80074ea <USB_SetTurnaroundTime+0x82>
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	4a2e      	ldr	r2, [pc, #184]	; (8007598 <USB_SetTurnaroundTime+0x130>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d802      	bhi.n	80074ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80074e4:	230b      	movs	r3, #11
 80074e6:	617b      	str	r3, [r7, #20]
 80074e8:	e036      	b.n	8007558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	4a2a      	ldr	r2, [pc, #168]	; (8007598 <USB_SetTurnaroundTime+0x130>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d906      	bls.n	8007500 <USB_SetTurnaroundTime+0x98>
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	4a29      	ldr	r2, [pc, #164]	; (800759c <USB_SetTurnaroundTime+0x134>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d802      	bhi.n	8007500 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80074fa:	230a      	movs	r3, #10
 80074fc:	617b      	str	r3, [r7, #20]
 80074fe:	e02b      	b.n	8007558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	4a26      	ldr	r2, [pc, #152]	; (800759c <USB_SetTurnaroundTime+0x134>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d906      	bls.n	8007516 <USB_SetTurnaroundTime+0xae>
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	4a25      	ldr	r2, [pc, #148]	; (80075a0 <USB_SetTurnaroundTime+0x138>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d202      	bcs.n	8007516 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007510:	2309      	movs	r3, #9
 8007512:	617b      	str	r3, [r7, #20]
 8007514:	e020      	b.n	8007558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	4a21      	ldr	r2, [pc, #132]	; (80075a0 <USB_SetTurnaroundTime+0x138>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d306      	bcc.n	800752c <USB_SetTurnaroundTime+0xc4>
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	4a20      	ldr	r2, [pc, #128]	; (80075a4 <USB_SetTurnaroundTime+0x13c>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d802      	bhi.n	800752c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007526:	2308      	movs	r3, #8
 8007528:	617b      	str	r3, [r7, #20]
 800752a:	e015      	b.n	8007558 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	4a1d      	ldr	r2, [pc, #116]	; (80075a4 <USB_SetTurnaroundTime+0x13c>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d906      	bls.n	8007542 <USB_SetTurnaroundTime+0xda>
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	4a1c      	ldr	r2, [pc, #112]	; (80075a8 <USB_SetTurnaroundTime+0x140>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d202      	bcs.n	8007542 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800753c:	2307      	movs	r3, #7
 800753e:	617b      	str	r3, [r7, #20]
 8007540:	e00a      	b.n	8007558 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007542:	2306      	movs	r3, #6
 8007544:	617b      	str	r3, [r7, #20]
 8007546:	e007      	b.n	8007558 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007548:	79fb      	ldrb	r3, [r7, #7]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d102      	bne.n	8007554 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800754e:	2309      	movs	r3, #9
 8007550:	617b      	str	r3, [r7, #20]
 8007552:	e001      	b.n	8007558 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007554:	2309      	movs	r3, #9
 8007556:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	68da      	ldr	r2, [r3, #12]
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	029b      	lsls	r3, r3, #10
 800756c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007570:	431a      	orrs	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	371c      	adds	r7, #28
 800757c:	46bd      	mov	sp, r7
 800757e:	bc80      	pop	{r7}
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	00d8acbf 	.word	0x00d8acbf
 8007588:	00e4e1c0 	.word	0x00e4e1c0
 800758c:	00f42400 	.word	0x00f42400
 8007590:	01067380 	.word	0x01067380
 8007594:	011a499f 	.word	0x011a499f
 8007598:	01312cff 	.word	0x01312cff
 800759c:	014ca43f 	.word	0x014ca43f
 80075a0:	016e3600 	.word	0x016e3600
 80075a4:	01a6ab1f 	.word	0x01a6ab1f
 80075a8:	01e84800 	.word	0x01e84800

080075ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	f043 0201 	orr.w	r2, r3, #1
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bc80      	pop	{r7}
 80075ca:	4770      	bx	lr

080075cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f023 0201 	bic.w	r2, r3, #1
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bc80      	pop	{r7}
 80075ea:	4770      	bx	lr

080075ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	460b      	mov	r3, r1
 80075f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80075f8:	2300      	movs	r3, #0
 80075fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007608:	78fb      	ldrb	r3, [r7, #3]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d115      	bne.n	800763a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800761a:	2001      	movs	r0, #1
 800761c:	f7fb fae8 	bl	8002bf0 <HAL_Delay>
      ms++;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	3301      	adds	r3, #1
 8007624:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 f922 	bl	8008870 <USB_GetMode>
 800762c:	4603      	mov	r3, r0
 800762e:	2b01      	cmp	r3, #1
 8007630:	d01e      	beq.n	8007670 <USB_SetCurrentMode+0x84>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2b31      	cmp	r3, #49	; 0x31
 8007636:	d9f0      	bls.n	800761a <USB_SetCurrentMode+0x2e>
 8007638:	e01a      	b.n	8007670 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800763a:	78fb      	ldrb	r3, [r7, #3]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d115      	bne.n	800766c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800764c:	2001      	movs	r0, #1
 800764e:	f7fb facf 	bl	8002bf0 <HAL_Delay>
      ms++;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	3301      	adds	r3, #1
 8007656:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f001 f909 	bl	8008870 <USB_GetMode>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	d005      	beq.n	8007670 <USB_SetCurrentMode+0x84>
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b31      	cmp	r3, #49	; 0x31
 8007668:	d9f0      	bls.n	800764c <USB_SetCurrentMode+0x60>
 800766a:	e001      	b.n	8007670 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e005      	b.n	800767c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2b32      	cmp	r3, #50	; 0x32
 8007674:	d101      	bne.n	800767a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	e000      	b.n	800767c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007684:	b084      	sub	sp, #16
 8007686:	b580      	push	{r7, lr}
 8007688:	b086      	sub	sp, #24
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800769e:	2300      	movs	r3, #0
 80076a0:	613b      	str	r3, [r7, #16]
 80076a2:	e009      	b.n	80076b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	3340      	adds	r3, #64	; 0x40
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	2200      	movs	r2, #0
 80076b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	3301      	adds	r3, #1
 80076b6:	613b      	str	r3, [r7, #16]
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	2b0e      	cmp	r3, #14
 80076bc:	d9f2      	bls.n	80076a4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80076be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d11c      	bne.n	80076fe <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076d2:	f043 0302 	orr.w	r3, r3, #2
 80076d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	639a      	str	r2, [r3, #56]	; 0x38
 80076fc:	e00b      	b.n	8007716 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007702:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800771c:	461a      	mov	r2, r3
 800771e:	2300      	movs	r3, #0
 8007720:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007724:	2b01      	cmp	r3, #1
 8007726:	d10c      	bne.n	8007742 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772a:	2b00      	cmp	r3, #0
 800772c:	d104      	bne.n	8007738 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800772e:	2100      	movs	r1, #0
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f965 	bl	8007a00 <USB_SetDevSpeed>
 8007736:	e008      	b.n	800774a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007738:	2101      	movs	r1, #1
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f960 	bl	8007a00 <USB_SetDevSpeed>
 8007740:	e003      	b.n	800774a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007742:	2103      	movs	r1, #3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f95b 	bl	8007a00 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800774a:	2110      	movs	r1, #16
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f8f3 	bl	8007938 <USB_FlushTxFifo>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f91f 	bl	80079a0 <USB_FlushRxFifo>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d001      	beq.n	800776c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007772:	461a      	mov	r2, r3
 8007774:	2300      	movs	r3, #0
 8007776:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800777e:	461a      	mov	r2, r3
 8007780:	2300      	movs	r3, #0
 8007782:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778a:	461a      	mov	r2, r3
 800778c:	2300      	movs	r3, #0
 800778e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007790:	2300      	movs	r3, #0
 8007792:	613b      	str	r3, [r7, #16]
 8007794:	e043      	b.n	800781e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	015a      	lsls	r2, r3, #5
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	4413      	add	r3, r2
 800779e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077ac:	d118      	bne.n	80077e0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d10a      	bne.n	80077ca <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c0:	461a      	mov	r2, r3
 80077c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80077c6:	6013      	str	r3, [r2, #0]
 80077c8:	e013      	b.n	80077f2 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	015a      	lsls	r2, r3, #5
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	4413      	add	r3, r2
 80077d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d6:	461a      	mov	r2, r3
 80077d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80077dc:	6013      	str	r3, [r2, #0]
 80077de:	e008      	b.n	80077f2 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ec:	461a      	mov	r2, r3
 80077ee:	2300      	movs	r3, #0
 80077f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	015a      	lsls	r2, r3, #5
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	4413      	add	r3, r2
 80077fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077fe:	461a      	mov	r2, r3
 8007800:	2300      	movs	r3, #0
 8007802:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007810:	461a      	mov	r2, r3
 8007812:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007816:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	3301      	adds	r3, #1
 800781c:	613b      	str	r3, [r7, #16]
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	693a      	ldr	r2, [r7, #16]
 8007822:	429a      	cmp	r2, r3
 8007824:	d3b7      	bcc.n	8007796 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007826:	2300      	movs	r3, #0
 8007828:	613b      	str	r3, [r7, #16]
 800782a:	e043      	b.n	80078b4 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4413      	add	r3, r2
 8007834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800783e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007842:	d118      	bne.n	8007876 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10a      	bne.n	8007860 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	015a      	lsls	r2, r3, #5
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	4413      	add	r3, r2
 8007852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007856:	461a      	mov	r2, r3
 8007858:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800785c:	6013      	str	r3, [r2, #0]
 800785e:	e013      	b.n	8007888 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	4413      	add	r3, r2
 8007868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800786c:	461a      	mov	r2, r3
 800786e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	e008      	b.n	8007888 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	015a      	lsls	r2, r3, #5
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	4413      	add	r3, r2
 800787e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007882:	461a      	mov	r2, r3
 8007884:	2300      	movs	r3, #0
 8007886:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007894:	461a      	mov	r2, r3
 8007896:	2300      	movs	r3, #0
 8007898:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a6:	461a      	mov	r2, r3
 80078a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	3301      	adds	r3, #1
 80078b2:	613b      	str	r3, [r7, #16]
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d3b7      	bcc.n	800782c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80078dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80078de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d105      	bne.n	80078f0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	f043 0210 	orr.w	r2, r3, #16
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	699a      	ldr	r2, [r3, #24]
 80078f4:	4b0f      	ldr	r3, [pc, #60]	; (8007934 <USB_DevInit+0x2b0>)
 80078f6:	4313      	orrs	r3, r2
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80078fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d005      	beq.n	800790e <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	f043 0208 	orr.w	r2, r3, #8
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800790e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007910:	2b01      	cmp	r3, #1
 8007912:	d107      	bne.n	8007924 <USB_DevInit+0x2a0>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800791c:	f043 0304 	orr.w	r3, r3, #4
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007924:	7dfb      	ldrb	r3, [r7, #23]
}
 8007926:	4618      	mov	r0, r3
 8007928:	3718      	adds	r7, #24
 800792a:	46bd      	mov	sp, r7
 800792c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007930:	b004      	add	sp, #16
 8007932:	4770      	bx	lr
 8007934:	803c3800 	.word	0x803c3800

08007938 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007942:	2300      	movs	r3, #0
 8007944:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	3301      	adds	r3, #1
 800794a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	4a13      	ldr	r2, [pc, #76]	; (800799c <USB_FlushTxFifo+0x64>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d901      	bls.n	8007958 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e01b      	b.n	8007990 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	2b00      	cmp	r3, #0
 800795e:	daf2      	bge.n	8007946 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007960:	2300      	movs	r3, #0
 8007962:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	019b      	lsls	r3, r3, #6
 8007968:	f043 0220 	orr.w	r2, r3, #32
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	3301      	adds	r3, #1
 8007974:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	4a08      	ldr	r2, [pc, #32]	; (800799c <USB_FlushTxFifo+0x64>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d901      	bls.n	8007982 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800797e:	2303      	movs	r3, #3
 8007980:	e006      	b.n	8007990 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	f003 0320 	and.w	r3, r3, #32
 800798a:	2b20      	cmp	r3, #32
 800798c:	d0f0      	beq.n	8007970 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	bc80      	pop	{r7}
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	00030d40 	.word	0x00030d40

080079a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079a8:	2300      	movs	r3, #0
 80079aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	3301      	adds	r3, #1
 80079b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	4a11      	ldr	r2, [pc, #68]	; (80079fc <USB_FlushRxFifo+0x5c>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d901      	bls.n	80079be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e018      	b.n	80079f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	daf2      	bge.n	80079ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2210      	movs	r2, #16
 80079ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	3301      	adds	r3, #1
 80079d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	4a08      	ldr	r2, [pc, #32]	; (80079fc <USB_FlushRxFifo+0x5c>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d901      	bls.n	80079e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e006      	b.n	80079f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	f003 0310 	and.w	r3, r3, #16
 80079ea:	2b10      	cmp	r3, #16
 80079ec:	d0f0      	beq.n	80079d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bc80      	pop	{r7}
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	00030d40 	.word	0x00030d40

08007a00 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	78fb      	ldrb	r3, [r7, #3]
 8007a1a:	68f9      	ldr	r1, [r7, #12]
 8007a1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a20:	4313      	orrs	r3, r2
 8007a22:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3714      	adds	r7, #20
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bc80      	pop	{r7}
 8007a2e:	4770      	bx	lr

08007a30 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f003 0306 	and.w	r3, r3, #6
 8007a48:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d102      	bne.n	8007a56 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007a50:	2300      	movs	r3, #0
 8007a52:	75fb      	strb	r3, [r7, #23]
 8007a54:	e00a      	b.n	8007a6c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d002      	beq.n	8007a62 <USB_GetDevSpeed+0x32>
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2b06      	cmp	r3, #6
 8007a60:	d102      	bne.n	8007a68 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007a62:	2302      	movs	r3, #2
 8007a64:	75fb      	strb	r3, [r7, #23]
 8007a66:	e001      	b.n	8007a6c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007a68:	230f      	movs	r3, #15
 8007a6a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	371c      	adds	r7, #28
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bc80      	pop	{r7}
 8007a76:	4770      	bx	lr

08007a78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	785b      	ldrb	r3, [r3, #1]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d13a      	bne.n	8007b0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a9a:	69da      	ldr	r2, [r3, #28]
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	f003 030f 	and.w	r3, r3, #15
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	68f9      	ldr	r1, [r7, #12]
 8007aae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	015a      	lsls	r2, r3, #5
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4413      	add	r3, r2
 8007abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d155      	bne.n	8007b78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	791b      	ldrb	r3, [r3, #4]
 8007ae6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007ae8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	059b      	lsls	r3, r3, #22
 8007aee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007af0:	4313      	orrs	r3, r2
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	0151      	lsls	r1, r2, #5
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	440a      	add	r2, r1
 8007afa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b06:	6013      	str	r3, [r2, #0]
 8007b08:	e036      	b.n	8007b78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b10:	69da      	ldr	r2, [r3, #28]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	f003 030f 	and.w	r3, r3, #15
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007b20:	041b      	lsls	r3, r3, #16
 8007b22:	68f9      	ldr	r1, [r7, #12]
 8007b24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d11a      	bne.n	8007b78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	015a      	lsls	r2, r3, #5
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	4413      	add	r3, r2
 8007b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	791b      	ldrb	r3, [r3, #4]
 8007b5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007b5e:	430b      	orrs	r3, r1
 8007b60:	4313      	orrs	r3, r2
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	0151      	lsls	r1, r2, #5
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	440a      	add	r2, r1
 8007b6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bc80      	pop	{r7}
 8007b82:	4770      	bx	lr

08007b84 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	785b      	ldrb	r3, [r3, #1]
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d161      	bne.n	8007c64 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bb6:	d11f      	bne.n	8007bf8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	015a      	lsls	r2, r3, #5
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	0151      	lsls	r1, r2, #5
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	440a      	add	r2, r1
 8007bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007bd6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	015a      	lsls	r2, r3, #5
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	4413      	add	r3, r2
 8007be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	0151      	lsls	r1, r2, #5
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	440a      	add	r2, r1
 8007bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bf2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bf6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	f003 030f 	and.w	r3, r3, #15
 8007c08:	2101      	movs	r1, #1
 8007c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	43db      	mvns	r3, r3
 8007c12:	68f9      	ldr	r1, [r7, #12]
 8007c14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c18:	4013      	ands	r3, r2
 8007c1a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c22:	69da      	ldr	r2, [r3, #28]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	f003 030f 	and.w	r3, r3, #15
 8007c2c:	2101      	movs	r1, #1
 8007c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	43db      	mvns	r3, r3
 8007c36:	68f9      	ldr	r1, [r7, #12]
 8007c38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	015a      	lsls	r2, r3, #5
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4413      	add	r3, r2
 8007c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	0159      	lsls	r1, r3, #5
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	440b      	add	r3, r1
 8007c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	4b35      	ldr	r3, [pc, #212]	; (8007d34 <USB_DeactivateEndpoint+0x1b0>)
 8007c5e:	4013      	ands	r3, r2
 8007c60:	600b      	str	r3, [r1, #0]
 8007c62:	e060      	b.n	8007d26 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	015a      	lsls	r2, r3, #5
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c7a:	d11f      	bne.n	8007cbc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	015a      	lsls	r2, r3, #5
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	4413      	add	r3, r2
 8007c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	0151      	lsls	r1, r2, #5
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	440a      	add	r2, r1
 8007c92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c9a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	015a      	lsls	r2, r3, #5
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	0151      	lsls	r1, r2, #5
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	440a      	add	r2, r1
 8007cb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	f003 030f 	and.w	r3, r3, #15
 8007ccc:	2101      	movs	r1, #1
 8007cce:	fa01 f303 	lsl.w	r3, r1, r3
 8007cd2:	041b      	lsls	r3, r3, #16
 8007cd4:	43db      	mvns	r3, r3
 8007cd6:	68f9      	ldr	r1, [r7, #12]
 8007cd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cdc:	4013      	ands	r3, r2
 8007cde:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce6:	69da      	ldr	r2, [r3, #28]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	f003 030f 	and.w	r3, r3, #15
 8007cf0:	2101      	movs	r1, #1
 8007cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8007cf6:	041b      	lsls	r3, r3, #16
 8007cf8:	43db      	mvns	r3, r3
 8007cfa:	68f9      	ldr	r1, [r7, #12]
 8007cfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d00:	4013      	ands	r3, r2
 8007d02:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	0159      	lsls	r1, r3, #5
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	440b      	add	r3, r1
 8007d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d1e:	4619      	mov	r1, r3
 8007d20:	4b05      	ldr	r3, [pc, #20]	; (8007d38 <USB_DeactivateEndpoint+0x1b4>)
 8007d22:	4013      	ands	r3, r2
 8007d24:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bc80      	pop	{r7}
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	ec337800 	.word	0xec337800
 8007d38:	eff37800 	.word	0xeff37800

08007d3c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b08a      	sub	sp, #40	; 0x28
 8007d40:	af02      	add	r7, sp, #8
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	4613      	mov	r3, r2
 8007d48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	785b      	ldrb	r3, [r3, #1]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	f040 817a 	bne.w	8008052 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d132      	bne.n	8007dcc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	015a      	lsls	r2, r3, #5
 8007d6a:	69fb      	ldr	r3, [r7, #28]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	69ba      	ldr	r2, [r7, #24]
 8007d76:	0151      	lsls	r1, r2, #5
 8007d78:	69fa      	ldr	r2, [r7, #28]
 8007d7a:	440a      	add	r2, r1
 8007d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	69ba      	ldr	r2, [r7, #24]
 8007d9a:	0151      	lsls	r1, r2, #5
 8007d9c:	69fa      	ldr	r2, [r7, #28]
 8007d9e:	440a      	add	r2, r1
 8007da0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007da4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007da8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	0151      	lsls	r1, r2, #5
 8007dbc:	69fa      	ldr	r2, [r7, #28]
 8007dbe:	440a      	add	r2, r1
 8007dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dc4:	0cdb      	lsrs	r3, r3, #19
 8007dc6:	04db      	lsls	r3, r3, #19
 8007dc8:	6113      	str	r3, [r2, #16]
 8007dca:	e092      	b.n	8007ef2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007dcc:	69bb      	ldr	r3, [r7, #24]
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	69ba      	ldr	r2, [r7, #24]
 8007ddc:	0151      	lsls	r1, r2, #5
 8007dde:	69fa      	ldr	r2, [r7, #28]
 8007de0:	440a      	add	r2, r1
 8007de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007de6:	0cdb      	lsrs	r3, r3, #19
 8007de8:	04db      	lsls	r3, r3, #19
 8007dea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	69ba      	ldr	r2, [r7, #24]
 8007dfc:	0151      	lsls	r1, r2, #5
 8007dfe:	69fa      	ldr	r2, [r7, #28]
 8007e00:	440a      	add	r2, r1
 8007e02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e06:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e0a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e0e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d11a      	bne.n	8007e4c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	691a      	ldr	r2, [r3, #16]
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d903      	bls.n	8007e2a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	689a      	ldr	r2, [r3, #8]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	015a      	lsls	r2, r3, #5
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	4413      	add	r3, r2
 8007e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	69ba      	ldr	r2, [r7, #24]
 8007e3a:	0151      	lsls	r1, r2, #5
 8007e3c:	69fa      	ldr	r2, [r7, #28]
 8007e3e:	440a      	add	r2, r1
 8007e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e48:	6113      	str	r3, [r2, #16]
 8007e4a:	e01b      	b.n	8007e84 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	015a      	lsls	r2, r3, #5
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e58:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	6919      	ldr	r1, [r3, #16]
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	440b      	add	r3, r1
 8007e64:	1e59      	subs	r1, r3, #1
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e6e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007e70:	4ba2      	ldr	r3, [pc, #648]	; (80080fc <USB_EPStartXfer+0x3c0>)
 8007e72:	400b      	ands	r3, r1
 8007e74:	69b9      	ldr	r1, [r7, #24]
 8007e76:	0148      	lsls	r0, r1, #5
 8007e78:	69f9      	ldr	r1, [r7, #28]
 8007e7a:	4401      	add	r1, r0
 8007e7c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007e80:	4313      	orrs	r3, r2
 8007e82:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	015a      	lsls	r2, r3, #5
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e90:	691a      	ldr	r2, [r3, #16]
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e9a:	69b9      	ldr	r1, [r7, #24]
 8007e9c:	0148      	lsls	r0, r1, #5
 8007e9e:	69f9      	ldr	r1, [r7, #28]
 8007ea0:	4401      	add	r1, r0
 8007ea2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	791b      	ldrb	r3, [r3, #4]
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d11f      	bne.n	8007ef2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	015a      	lsls	r2, r3, #5
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	4413      	add	r3, r2
 8007eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	69ba      	ldr	r2, [r7, #24]
 8007ec2:	0151      	lsls	r1, r2, #5
 8007ec4:	69fa      	ldr	r2, [r7, #28]
 8007ec6:	440a      	add	r2, r1
 8007ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ecc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007ed0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	015a      	lsls	r2, r3, #5
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	4413      	add	r3, r2
 8007eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	0151      	lsls	r1, r2, #5
 8007ee4:	69fa      	ldr	r2, [r7, #28]
 8007ee6:	440a      	add	r2, r1
 8007ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ef0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007ef2:	79fb      	ldrb	r3, [r7, #7]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d14b      	bne.n	8007f90 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d009      	beq.n	8007f14 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	791b      	ldrb	r3, [r3, #4]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d128      	bne.n	8007f6e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d110      	bne.n	8007f4e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	69ba      	ldr	r2, [r7, #24]
 8007f3c:	0151      	lsls	r1, r2, #5
 8007f3e:	69fa      	ldr	r2, [r7, #28]
 8007f40:	440a      	add	r2, r1
 8007f42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f4a:	6013      	str	r3, [r2, #0]
 8007f4c:	e00f      	b.n	8007f6e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	015a      	lsls	r2, r3, #5
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	4413      	add	r3, r2
 8007f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	69ba      	ldr	r2, [r7, #24]
 8007f5e:	0151      	lsls	r1, r2, #5
 8007f60:	69fa      	ldr	r2, [r7, #28]
 8007f62:	440a      	add	r2, r1
 8007f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f6c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	0151      	lsls	r1, r2, #5
 8007f80:	69fa      	ldr	r2, [r7, #28]
 8007f82:	440a      	add	r2, r1
 8007f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f8c:	6013      	str	r3, [r2, #0]
 8007f8e:	e165      	b.n	800825c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	69ba      	ldr	r2, [r7, #24]
 8007fa0:	0151      	lsls	r1, r2, #5
 8007fa2:	69fa      	ldr	r2, [r7, #28]
 8007fa4:	440a      	add	r2, r1
 8007fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007faa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007fae:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	791b      	ldrb	r3, [r3, #4]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d015      	beq.n	8007fe4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f000 814d 	beq.w	800825c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	f003 030f 	and.w	r3, r3, #15
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8007fd8:	69f9      	ldr	r1, [r7, #28]
 8007fda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	634b      	str	r3, [r1, #52]	; 0x34
 8007fe2:	e13b      	b.n	800825c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d110      	bne.n	8008016 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	015a      	lsls	r2, r3, #5
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	69ba      	ldr	r2, [r7, #24]
 8008004:	0151      	lsls	r1, r2, #5
 8008006:	69fa      	ldr	r2, [r7, #28]
 8008008:	440a      	add	r2, r1
 800800a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800800e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008012:	6013      	str	r3, [r2, #0]
 8008014:	e00f      	b.n	8008036 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	4413      	add	r3, r2
 800801e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	69ba      	ldr	r2, [r7, #24]
 8008026:	0151      	lsls	r1, r2, #5
 8008028:	69fa      	ldr	r2, [r7, #28]
 800802a:	440a      	add	r2, r1
 800802c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008034:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	68d9      	ldr	r1, [r3, #12]
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	781a      	ldrb	r2, [r3, #0]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	b298      	uxth	r0, r3
 8008044:	79fb      	ldrb	r3, [r7, #7]
 8008046:	9300      	str	r3, [sp, #0]
 8008048:	4603      	mov	r3, r0
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f000 f9b7 	bl	80083be <USB_WritePacket>
 8008050:	e104      	b.n	800825c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	015a      	lsls	r2, r3, #5
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	4413      	add	r3, r2
 800805a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	69ba      	ldr	r2, [r7, #24]
 8008062:	0151      	lsls	r1, r2, #5
 8008064:	69fa      	ldr	r2, [r7, #28]
 8008066:	440a      	add	r2, r1
 8008068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800806c:	0cdb      	lsrs	r3, r3, #19
 800806e:	04db      	lsls	r3, r3, #19
 8008070:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	015a      	lsls	r2, r3, #5
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	4413      	add	r3, r2
 800807a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	69ba      	ldr	r2, [r7, #24]
 8008082:	0151      	lsls	r1, r2, #5
 8008084:	69fa      	ldr	r2, [r7, #28]
 8008086:	440a      	add	r2, r1
 8008088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800808c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008090:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008094:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d131      	bne.n	8008100 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	689a      	ldr	r2, [r3, #8]
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	689a      	ldr	r2, [r3, #8]
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080c0:	691a      	ldr	r2, [r3, #16]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080ca:	69b9      	ldr	r1, [r7, #24]
 80080cc:	0148      	lsls	r0, r1, #5
 80080ce:	69f9      	ldr	r1, [r7, #28]
 80080d0:	4401      	add	r1, r0
 80080d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80080d6:	4313      	orrs	r3, r2
 80080d8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	015a      	lsls	r2, r3, #5
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	4413      	add	r3, r2
 80080e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	69ba      	ldr	r2, [r7, #24]
 80080ea:	0151      	lsls	r1, r2, #5
 80080ec:	69fa      	ldr	r2, [r7, #28]
 80080ee:	440a      	add	r2, r1
 80080f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080f8:	6113      	str	r3, [r2, #16]
 80080fa:	e061      	b.n	80081c0 <USB_EPStartXfer+0x484>
 80080fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d123      	bne.n	8008150 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	015a      	lsls	r2, r3, #5
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	4413      	add	r3, r2
 8008110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008114:	691a      	ldr	r2, [r3, #16]
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800811e:	69b9      	ldr	r1, [r7, #24]
 8008120:	0148      	lsls	r0, r1, #5
 8008122:	69f9      	ldr	r1, [r7, #28]
 8008124:	4401      	add	r1, r0
 8008126:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800812a:	4313      	orrs	r3, r2
 800812c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	4413      	add	r3, r2
 8008136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	69ba      	ldr	r2, [r7, #24]
 800813e:	0151      	lsls	r1, r2, #5
 8008140:	69fa      	ldr	r2, [r7, #28]
 8008142:	440a      	add	r2, r1
 8008144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008148:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800814c:	6113      	str	r3, [r2, #16]
 800814e:	e037      	b.n	80081c0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	691a      	ldr	r2, [r3, #16]
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	4413      	add	r3, r2
 800815a:	1e5a      	subs	r2, r3, #1
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	fbb2 f3f3 	udiv	r3, r2, r3
 8008164:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	8afa      	ldrh	r2, [r7, #22]
 800816c:	fb03 f202 	mul.w	r2, r3, r2
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	015a      	lsls	r2, r3, #5
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	4413      	add	r3, r2
 800817c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008180:	691a      	ldr	r2, [r3, #16]
 8008182:	8afb      	ldrh	r3, [r7, #22]
 8008184:	04d9      	lsls	r1, r3, #19
 8008186:	4b38      	ldr	r3, [pc, #224]	; (8008268 <USB_EPStartXfer+0x52c>)
 8008188:	400b      	ands	r3, r1
 800818a:	69b9      	ldr	r1, [r7, #24]
 800818c:	0148      	lsls	r0, r1, #5
 800818e:	69f9      	ldr	r1, [r7, #28]
 8008190:	4401      	add	r1, r0
 8008192:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008196:	4313      	orrs	r3, r2
 8008198:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a6:	691a      	ldr	r2, [r3, #16]
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	6a1b      	ldr	r3, [r3, #32]
 80081ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081b0:	69b9      	ldr	r1, [r7, #24]
 80081b2:	0148      	lsls	r0, r1, #5
 80081b4:	69f9      	ldr	r1, [r7, #28]
 80081b6:	4401      	add	r1, r0
 80081b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80081bc:	4313      	orrs	r3, r2
 80081be:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80081c0:	79fb      	ldrb	r3, [r7, #7]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d10d      	bne.n	80081e2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d009      	beq.n	80081e2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	68d9      	ldr	r1, [r3, #12]
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	015a      	lsls	r2, r3, #5
 80081d6:	69fb      	ldr	r3, [r7, #28]
 80081d8:	4413      	add	r3, r2
 80081da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081de:	460a      	mov	r2, r1
 80081e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	791b      	ldrb	r3, [r3, #4]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d128      	bne.n	800823c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d110      	bne.n	800821c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	015a      	lsls	r2, r3, #5
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	4413      	add	r3, r2
 8008202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	69ba      	ldr	r2, [r7, #24]
 800820a:	0151      	lsls	r1, r2, #5
 800820c:	69fa      	ldr	r2, [r7, #28]
 800820e:	440a      	add	r2, r1
 8008210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008214:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008218:	6013      	str	r3, [r2, #0]
 800821a:	e00f      	b.n	800823c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	4413      	add	r3, r2
 8008224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	69ba      	ldr	r2, [r7, #24]
 800822c:	0151      	lsls	r1, r2, #5
 800822e:	69fa      	ldr	r2, [r7, #28]
 8008230:	440a      	add	r2, r1
 8008232:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800823a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	4413      	add	r3, r2
 8008244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	69ba      	ldr	r2, [r7, #24]
 800824c:	0151      	lsls	r1, r2, #5
 800824e:	69fa      	ldr	r2, [r7, #28]
 8008250:	440a      	add	r2, r1
 8008252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008256:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800825a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3720      	adds	r7, #32
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	1ff80000 	.word	0x1ff80000

0800826c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800826c:	b480      	push	{r7}
 800826e:	b087      	sub	sp, #28
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008276:	2300      	movs	r3, #0
 8008278:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	785b      	ldrb	r3, [r3, #1]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d14a      	bne.n	8008320 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	015a      	lsls	r2, r3, #5
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	4413      	add	r3, r2
 8008294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800829e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082a2:	f040 8086 	bne.w	80083b2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	015a      	lsls	r2, r3, #5
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	4413      	add	r3, r2
 80082b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	7812      	ldrb	r2, [r2, #0]
 80082ba:	0151      	lsls	r1, r2, #5
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	440a      	add	r2, r1
 80082c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80082c8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	7812      	ldrb	r2, [r2, #0]
 80082de:	0151      	lsls	r1, r2, #5
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	440a      	add	r2, r1
 80082e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	3301      	adds	r3, #1
 80082f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d902      	bls.n	8008304 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	75fb      	strb	r3, [r7, #23]
          break;
 8008302:	e056      	b.n	80083b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	015a      	lsls	r2, r3, #5
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	4413      	add	r3, r2
 800830e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008318:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800831c:	d0e7      	beq.n	80082ee <USB_EPStopXfer+0x82>
 800831e:	e048      	b.n	80083b2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	015a      	lsls	r2, r3, #5
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	4413      	add	r3, r2
 800832a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008334:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008338:	d13b      	bne.n	80083b2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	015a      	lsls	r2, r3, #5
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	4413      	add	r3, r2
 8008344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	683a      	ldr	r2, [r7, #0]
 800834c:	7812      	ldrb	r2, [r2, #0]
 800834e:	0151      	lsls	r1, r2, #5
 8008350:	693a      	ldr	r2, [r7, #16]
 8008352:	440a      	add	r2, r1
 8008354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008358:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800835c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	015a      	lsls	r2, r3, #5
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	4413      	add	r3, r2
 8008368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	7812      	ldrb	r2, [r2, #0]
 8008372:	0151      	lsls	r1, r2, #5
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	440a      	add	r2, r1
 8008378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800837c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008380:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	3301      	adds	r3, #1
 8008386:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f242 7210 	movw	r2, #10000	; 0x2710
 800838e:	4293      	cmp	r3, r2
 8008390:	d902      	bls.n	8008398 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008392:	2301      	movs	r3, #1
 8008394:	75fb      	strb	r3, [r7, #23]
          break;
 8008396:	e00c      	b.n	80083b2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083b0:	d0e7      	beq.n	8008382 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80083b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	371c      	adds	r7, #28
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bc80      	pop	{r7}
 80083bc:	4770      	bx	lr

080083be <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80083be:	b480      	push	{r7}
 80083c0:	b089      	sub	sp, #36	; 0x24
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	60f8      	str	r0, [r7, #12]
 80083c6:	60b9      	str	r1, [r7, #8]
 80083c8:	4611      	mov	r1, r2
 80083ca:	461a      	mov	r2, r3
 80083cc:	460b      	mov	r3, r1
 80083ce:	71fb      	strb	r3, [r7, #7]
 80083d0:	4613      	mov	r3, r2
 80083d2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80083dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d123      	bne.n	800842c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80083e4:	88bb      	ldrh	r3, [r7, #4]
 80083e6:	3303      	adds	r3, #3
 80083e8:	089b      	lsrs	r3, r3, #2
 80083ea:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80083ec:	2300      	movs	r3, #0
 80083ee:	61bb      	str	r3, [r7, #24]
 80083f0:	e018      	b.n	8008424 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80083f2:	79fb      	ldrb	r3, [r7, #7]
 80083f4:	031a      	lsls	r2, r3, #12
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	4413      	add	r3, r2
 80083fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083fe:	461a      	mov	r2, r3
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	3301      	adds	r3, #1
 800840a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	3301      	adds	r3, #1
 8008410:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	3301      	adds	r3, #1
 8008416:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	3301      	adds	r3, #1
 800841c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	3301      	adds	r3, #1
 8008422:	61bb      	str	r3, [r7, #24]
 8008424:	69ba      	ldr	r2, [r7, #24]
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	429a      	cmp	r2, r3
 800842a:	d3e2      	bcc.n	80083f2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800842c:	2300      	movs	r3, #0
}
 800842e:	4618      	mov	r0, r3
 8008430:	3724      	adds	r7, #36	; 0x24
 8008432:	46bd      	mov	sp, r7
 8008434:	bc80      	pop	{r7}
 8008436:	4770      	bx	lr

08008438 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008438:	b480      	push	{r7}
 800843a:	b08b      	sub	sp, #44	; 0x2c
 800843c:	af00      	add	r7, sp, #0
 800843e:	60f8      	str	r0, [r7, #12]
 8008440:	60b9      	str	r1, [r7, #8]
 8008442:	4613      	mov	r3, r2
 8008444:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800844e:	88fb      	ldrh	r3, [r7, #6]
 8008450:	089b      	lsrs	r3, r3, #2
 8008452:	b29b      	uxth	r3, r3
 8008454:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008456:	88fb      	ldrh	r3, [r7, #6]
 8008458:	f003 0303 	and.w	r3, r3, #3
 800845c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800845e:	2300      	movs	r3, #0
 8008460:	623b      	str	r3, [r7, #32]
 8008462:	e014      	b.n	800848e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008464:	69bb      	ldr	r3, [r7, #24]
 8008466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	3301      	adds	r3, #1
 8008474:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008478:	3301      	adds	r3, #1
 800847a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847e:	3301      	adds	r3, #1
 8008480:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008484:	3301      	adds	r3, #1
 8008486:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008488:	6a3b      	ldr	r3, [r7, #32]
 800848a:	3301      	adds	r3, #1
 800848c:	623b      	str	r3, [r7, #32]
 800848e:	6a3a      	ldr	r2, [r7, #32]
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	429a      	cmp	r2, r3
 8008494:	d3e6      	bcc.n	8008464 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008496:	8bfb      	ldrh	r3, [r7, #30]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d01e      	beq.n	80084da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800849c:	2300      	movs	r3, #0
 800849e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80084a0:	69bb      	ldr	r3, [r7, #24]
 80084a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084a6:	461a      	mov	r2, r3
 80084a8:	f107 0310 	add.w	r3, r7, #16
 80084ac:	6812      	ldr	r2, [r2, #0]
 80084ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	6a3b      	ldr	r3, [r7, #32]
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	00db      	lsls	r3, r3, #3
 80084b8:	fa22 f303 	lsr.w	r3, r2, r3
 80084bc:	b2da      	uxtb	r2, r3
 80084be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c0:	701a      	strb	r2, [r3, #0]
      i++;
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	3301      	adds	r3, #1
 80084c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80084c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ca:	3301      	adds	r3, #1
 80084cc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80084ce:	8bfb      	ldrh	r3, [r7, #30]
 80084d0:	3b01      	subs	r3, #1
 80084d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80084d4:	8bfb      	ldrh	r3, [r7, #30]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1ea      	bne.n	80084b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80084dc:	4618      	mov	r0, r3
 80084de:	372c      	adds	r7, #44	; 0x2c
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bc80      	pop	{r7}
 80084e4:	4770      	bx	lr

080084e6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b085      	sub	sp, #20
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	785b      	ldrb	r3, [r3, #1]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d12c      	bne.n	800855c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	4413      	add	r3, r2
 800850a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	db12      	blt.n	800853a <USB_EPSetStall+0x54>
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00f      	beq.n	800853a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	015a      	lsls	r2, r3, #5
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	4413      	add	r3, r2
 8008522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	0151      	lsls	r1, r2, #5
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	440a      	add	r2, r1
 8008530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008534:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008538:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	015a      	lsls	r2, r3, #5
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	4413      	add	r3, r2
 8008542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68ba      	ldr	r2, [r7, #8]
 800854a:	0151      	lsls	r1, r2, #5
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	440a      	add	r2, r1
 8008550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008554:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008558:	6013      	str	r3, [r2, #0]
 800855a:	e02b      	b.n	80085b4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4413      	add	r3, r2
 8008564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	db12      	blt.n	8008594 <USB_EPSetStall+0xae>
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00f      	beq.n	8008594 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	015a      	lsls	r2, r3, #5
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	4413      	add	r3, r2
 800857c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	0151      	lsls	r1, r2, #5
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	440a      	add	r2, r1
 800858a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800858e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008592:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	015a      	lsls	r2, r3, #5
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	4413      	add	r3, r2
 800859c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	0151      	lsls	r1, r2, #5
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	440a      	add	r2, r1
 80085aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3714      	adds	r7, #20
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bc80      	pop	{r7}
 80085be:	4770      	bx	lr

080085c0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	785b      	ldrb	r3, [r3, #1]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d128      	bne.n	800862e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	015a      	lsls	r2, r3, #5
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	4413      	add	r3, r2
 80085e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	0151      	lsls	r1, r2, #5
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	440a      	add	r2, r1
 80085f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	791b      	ldrb	r3, [r3, #4]
 8008600:	2b03      	cmp	r3, #3
 8008602:	d003      	beq.n	800860c <USB_EPClearStall+0x4c>
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	791b      	ldrb	r3, [r3, #4]
 8008608:	2b02      	cmp	r3, #2
 800860a:	d138      	bne.n	800867e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	015a      	lsls	r2, r3, #5
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	4413      	add	r3, r2
 8008614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	0151      	lsls	r1, r2, #5
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	440a      	add	r2, r1
 8008622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800862a:	6013      	str	r3, [r2, #0]
 800862c:	e027      	b.n	800867e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	4413      	add	r3, r2
 8008636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68ba      	ldr	r2, [r7, #8]
 800863e:	0151      	lsls	r1, r2, #5
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	440a      	add	r2, r1
 8008644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008648:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800864c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	791b      	ldrb	r3, [r3, #4]
 8008652:	2b03      	cmp	r3, #3
 8008654:	d003      	beq.n	800865e <USB_EPClearStall+0x9e>
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	791b      	ldrb	r3, [r3, #4]
 800865a:	2b02      	cmp	r3, #2
 800865c:	d10f      	bne.n	800867e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	015a      	lsls	r2, r3, #5
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	4413      	add	r3, r2
 8008666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	0151      	lsls	r1, r2, #5
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	440a      	add	r2, r1
 8008674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800867c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	bc80      	pop	{r7}
 8008688:	4770      	bx	lr

0800868a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800868a:	b480      	push	{r7}
 800868c:	b085      	sub	sp, #20
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	460b      	mov	r3, r1
 8008694:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086a8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80086ac:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	78fb      	ldrb	r3, [r7, #3]
 80086b8:	011b      	lsls	r3, r3, #4
 80086ba:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80086be:	68f9      	ldr	r1, [r7, #12]
 80086c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086c4:	4313      	orrs	r3, r2
 80086c6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bc80      	pop	{r7}
 80086d2:	4770      	bx	lr

080086d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80086ee:	f023 0303 	bic.w	r3, r3, #3
 80086f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008702:	f023 0302 	bic.w	r3, r3, #2
 8008706:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	bc80      	pop	{r7}
 8008712:	4770      	bx	lr

08008714 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800872e:	f023 0303 	bic.w	r3, r3, #3
 8008732:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008742:	f043 0302 	orr.w	r3, r3, #2
 8008746:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	bc80      	pop	{r7}
 8008752:	4770      	bx	lr

08008754 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008754:	b480      	push	{r7}
 8008756:	b085      	sub	sp, #20
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	4013      	ands	r3, r2
 800876a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800876c:	68fb      	ldr	r3, [r7, #12]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3714      	adds	r7, #20
 8008772:	46bd      	mov	sp, r7
 8008774:	bc80      	pop	{r7}
 8008776:	4770      	bx	lr

08008778 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008794:	69db      	ldr	r3, [r3, #28]
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	4013      	ands	r3, r2
 800879a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	0c1b      	lsrs	r3, r3, #16
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3714      	adds	r7, #20
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bc80      	pop	{r7}
 80087a8:	4770      	bx	lr

080087aa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b085      	sub	sp, #20
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087c6:	69db      	ldr	r3, [r3, #28]
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	4013      	ands	r3, r2
 80087cc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	b29b      	uxth	r3, r3
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3714      	adds	r7, #20
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bc80      	pop	{r7}
 80087da:	4770      	bx	lr

080087dc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	460b      	mov	r3, r1
 80087e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80087ec:	78fb      	ldrb	r3, [r7, #3]
 80087ee:	015a      	lsls	r2, r3, #5
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	4413      	add	r3, r2
 80087f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	4013      	ands	r3, r2
 8008808:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800880a:	68bb      	ldr	r3, [r7, #8]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	bc80      	pop	{r7}
 8008814:	4770      	bx	lr

08008816 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008816:	b480      	push	{r7}
 8008818:	b087      	sub	sp, #28
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	460b      	mov	r3, r1
 8008820:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008838:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800883a:	78fb      	ldrb	r3, [r7, #3]
 800883c:	f003 030f 	and.w	r3, r3, #15
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	fa22 f303 	lsr.w	r3, r2, r3
 8008846:	01db      	lsls	r3, r3, #7
 8008848:	b2db      	uxtb	r3, r3
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	4313      	orrs	r3, r2
 800884e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008850:	78fb      	ldrb	r3, [r7, #3]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	4413      	add	r3, r2
 8008858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	693a      	ldr	r2, [r7, #16]
 8008860:	4013      	ands	r3, r2
 8008862:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008864:	68bb      	ldr	r3, [r7, #8]
}
 8008866:	4618      	mov	r0, r3
 8008868:	371c      	adds	r7, #28
 800886a:	46bd      	mov	sp, r7
 800886c:	bc80      	pop	{r7}
 800886e:	4770      	bx	lr

08008870 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	695b      	ldr	r3, [r3, #20]
 800887c:	f003 0301 	and.w	r3, r3, #1
}
 8008880:	4618      	mov	r0, r3
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	bc80      	pop	{r7}
 8008888:	4770      	bx	lr

0800888a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800888a:	b480      	push	{r7}
 800888c:	b085      	sub	sp, #20
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088a4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80088a8:	f023 0307 	bic.w	r3, r3, #7
 80088ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3714      	adds	r7, #20
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bc80      	pop	{r7}
 80088cc:	4770      	bx	lr
	...

080088d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b087      	sub	sp, #28
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	460b      	mov	r3, r1
 80088da:	607a      	str	r2, [r7, #4]
 80088dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	333c      	adds	r3, #60	; 0x3c
 80088e6:	3304      	adds	r3, #4
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	4a25      	ldr	r2, [pc, #148]	; (8008984 <USB_EP0_OutStart+0xb4>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d90a      	bls.n	800890a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008900:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008904:	d101      	bne.n	800890a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	e037      	b.n	800897a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008910:	461a      	mov	r2, r3
 8008912:	2300      	movs	r3, #0
 8008914:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891c:	691b      	ldr	r3, [r3, #16]
 800891e:	697a      	ldr	r2, [r7, #20]
 8008920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008924:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008928:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008938:	f043 0318 	orr.w	r3, r3, #24
 800893c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800894c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008950:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008952:	7afb      	ldrb	r3, [r7, #11]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d10f      	bne.n	8008978 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800895e:	461a      	mov	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008972:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008976:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	371c      	adds	r7, #28
 800897e:	46bd      	mov	sp, r7
 8008980:	bc80      	pop	{r7}
 8008982:	4770      	bx	lr
 8008984:	4f54300a 	.word	0x4f54300a

08008988 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008990:	2300      	movs	r3, #0
 8008992:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	3301      	adds	r3, #1
 8008998:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	4a12      	ldr	r2, [pc, #72]	; (80089e8 <USB_CoreReset+0x60>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d901      	bls.n	80089a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e01b      	b.n	80089de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	daf2      	bge.n	8008994 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80089ae:	2300      	movs	r3, #0
 80089b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	f043 0201 	orr.w	r2, r3, #1
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	3301      	adds	r3, #1
 80089c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	4a08      	ldr	r2, [pc, #32]	; (80089e8 <USB_CoreReset+0x60>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d901      	bls.n	80089d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e006      	b.n	80089de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	f003 0301 	and.w	r3, r3, #1
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d0f0      	beq.n	80089be <USB_CoreReset+0x36>

  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bc80      	pop	{r7}
 80089e6:	4770      	bx	lr
 80089e8:	00030d40 	.word	0x00030d40

080089ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	460b      	mov	r3, r1
 80089f6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80089f8:	2300      	movs	r3, #0
 80089fa:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	7c1b      	ldrb	r3, [r3, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d115      	bne.n	8008a30 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a08:	2202      	movs	r2, #2
 8008a0a:	2181      	movs	r1, #129	; 0x81
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f001 ff42 	bl	800a896 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2201      	movs	r2, #1
 8008a16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a1c:	2202      	movs	r2, #2
 8008a1e:	2101      	movs	r1, #1
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f001 ff38 	bl	800a896 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2201      	movs	r2, #1
 8008a2a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008a2e:	e012      	b.n	8008a56 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008a30:	2340      	movs	r3, #64	; 0x40
 8008a32:	2202      	movs	r2, #2
 8008a34:	2181      	movs	r1, #129	; 0x81
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f001 ff2d 	bl	800a896 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008a42:	2340      	movs	r3, #64	; 0x40
 8008a44:	2202      	movs	r2, #2
 8008a46:	2101      	movs	r1, #1
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f001 ff24 	bl	800a896 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2201      	movs	r2, #1
 8008a52:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008a56:	2308      	movs	r3, #8
 8008a58:	2203      	movs	r2, #3
 8008a5a:	2182      	movs	r1, #130	; 0x82
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f001 ff1a 	bl	800a896 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008a68:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008a6c:	f002 f866 	bl	800ab3c <malloc>
 8008a70:	4603      	mov	r3, r0
 8008a72:	461a      	mov	r2, r3
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d102      	bne.n	8008a8a <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8008a84:	2301      	movs	r3, #1
 8008a86:	73fb      	strb	r3, [r7, #15]
 8008a88:	e026      	b.n	8008ad8 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a90:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	7c1b      	ldrb	r3, [r3, #16]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d109      	bne.n	8008ac8 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008aba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008abe:	2101      	movs	r1, #1
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f001 ffd8 	bl	800aa76 <USBD_LL_PrepareReceive>
 8008ac6:	e007      	b.n	8008ad8 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ace:	2340      	movs	r3, #64	; 0x40
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f001 ffcf 	bl	800aa76 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	460b      	mov	r3, r1
 8008aec:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008aee:	2300      	movs	r3, #0
 8008af0:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008af2:	2181      	movs	r1, #129	; 0x81
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f001 fef4 	bl	800a8e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008b00:	2101      	movs	r1, #1
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f001 feed 	bl	800a8e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008b10:	2182      	movs	r1, #130	; 0x82
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f001 fee5 	bl	800a8e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00e      	beq.n	8008b46 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f002 f807 	bl	800ab4c <free>
    pdev->pClassData = NULL;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b086      	sub	sp, #24
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b60:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008b66:	2300      	movs	r3, #0
 8008b68:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d039      	beq.n	8008bee <USBD_CDC_Setup+0x9e>
 8008b7a:	2b20      	cmp	r3, #32
 8008b7c:	d17f      	bne.n	8008c7e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	88db      	ldrh	r3, [r3, #6]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d029      	beq.n	8008bda <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	b25b      	sxtb	r3, r3
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	da11      	bge.n	8008bb4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	683a      	ldr	r2, [r7, #0]
 8008b9a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008b9c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	88d2      	ldrh	r2, [r2, #6]
 8008ba2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008ba4:	6939      	ldr	r1, [r7, #16]
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	88db      	ldrh	r3, [r3, #6]
 8008baa:	461a      	mov	r2, r3
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f001 fa42 	bl	800a036 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008bb2:	e06b      	b.n	8008c8c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	785a      	ldrb	r2, [r3, #1]
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	88db      	ldrh	r3, [r3, #6]
 8008bc2:	b2da      	uxtb	r2, r3
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008bca:	6939      	ldr	r1, [r7, #16]
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	88db      	ldrh	r3, [r3, #6]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f001 fa5d 	bl	800a092 <USBD_CtlPrepareRx>
      break;
 8008bd8:	e058      	b.n	8008c8c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	683a      	ldr	r2, [r7, #0]
 8008be4:	7850      	ldrb	r0, [r2, #1]
 8008be6:	2200      	movs	r2, #0
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	4798      	blx	r3
      break;
 8008bec:	e04e      	b.n	8008c8c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	785b      	ldrb	r3, [r3, #1]
 8008bf2:	2b0b      	cmp	r3, #11
 8008bf4:	d02e      	beq.n	8008c54 <USBD_CDC_Setup+0x104>
 8008bf6:	2b0b      	cmp	r3, #11
 8008bf8:	dc38      	bgt.n	8008c6c <USBD_CDC_Setup+0x11c>
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d002      	beq.n	8008c04 <USBD_CDC_Setup+0xb4>
 8008bfe:	2b0a      	cmp	r3, #10
 8008c00:	d014      	beq.n	8008c2c <USBD_CDC_Setup+0xdc>
 8008c02:	e033      	b.n	8008c6c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c0a:	2b03      	cmp	r3, #3
 8008c0c:	d107      	bne.n	8008c1e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008c0e:	f107 030c 	add.w	r3, r7, #12
 8008c12:	2202      	movs	r2, #2
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f001 fa0d 	bl	800a036 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c1c:	e02e      	b.n	8008c7c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f001 f99e 	bl	8009f62 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c26:	2302      	movs	r3, #2
 8008c28:	75fb      	strb	r3, [r7, #23]
          break;
 8008c2a:	e027      	b.n	8008c7c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c32:	2b03      	cmp	r3, #3
 8008c34:	d107      	bne.n	8008c46 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008c36:	f107 030f 	add.w	r3, r7, #15
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f001 f9f9 	bl	800a036 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c44:	e01a      	b.n	8008c7c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f001 f98a 	bl	8009f62 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c4e:	2302      	movs	r3, #2
 8008c50:	75fb      	strb	r3, [r7, #23]
          break;
 8008c52:	e013      	b.n	8008c7c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c5a:	2b03      	cmp	r3, #3
 8008c5c:	d00d      	beq.n	8008c7a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008c5e:	6839      	ldr	r1, [r7, #0]
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f001 f97e 	bl	8009f62 <USBD_CtlError>
            ret = USBD_FAIL;
 8008c66:	2302      	movs	r3, #2
 8008c68:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008c6a:	e006      	b.n	8008c7a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f001 f977 	bl	8009f62 <USBD_CtlError>
          ret = USBD_FAIL;
 8008c74:	2302      	movs	r3, #2
 8008c76:	75fb      	strb	r3, [r7, #23]
          break;
 8008c78:	e000      	b.n	8008c7c <USBD_CDC_Setup+0x12c>
          break;
 8008c7a:	bf00      	nop
      }
      break;
 8008c7c:	e006      	b.n	8008c8c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008c7e:	6839      	ldr	r1, [r7, #0]
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f001 f96e 	bl	8009f62 <USBD_CtlError>
      ret = USBD_FAIL;
 8008c86:	2302      	movs	r3, #2
 8008c88:	75fb      	strb	r3, [r7, #23]
      break;
 8008c8a:	bf00      	nop
  }

  return ret;
 8008c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3718      	adds	r7, #24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b084      	sub	sp, #16
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ca8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008cb0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d03a      	beq.n	8008d32 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008cbc:	78fa      	ldrb	r2, [r7, #3]
 8008cbe:	6879      	ldr	r1, [r7, #4]
 8008cc0:	4613      	mov	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	440b      	add	r3, r1
 8008cca:	331c      	adds	r3, #28
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d029      	beq.n	8008d26 <USBD_CDC_DataIn+0x90>
 8008cd2:	78fa      	ldrb	r2, [r7, #3]
 8008cd4:	6879      	ldr	r1, [r7, #4]
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4413      	add	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	440b      	add	r3, r1
 8008ce0:	331c      	adds	r3, #28
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	78f9      	ldrb	r1, [r7, #3]
 8008ce6:	68b8      	ldr	r0, [r7, #8]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	00db      	lsls	r3, r3, #3
 8008cec:	440b      	add	r3, r1
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4403      	add	r3, r0
 8008cf2:	3344      	adds	r3, #68	; 0x44
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	fbb2 f1f3 	udiv	r1, r2, r3
 8008cfa:	fb01 f303 	mul.w	r3, r1, r3
 8008cfe:	1ad3      	subs	r3, r2, r3
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d110      	bne.n	8008d26 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008d04:	78fa      	ldrb	r2, [r7, #3]
 8008d06:	6879      	ldr	r1, [r7, #4]
 8008d08:	4613      	mov	r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	440b      	add	r3, r1
 8008d12:	331c      	adds	r3, #28
 8008d14:	2200      	movs	r2, #0
 8008d16:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008d18:	78f9      	ldrb	r1, [r7, #3]
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f001 fe86 	bl	800aa30 <USBD_LL_Transmit>
 8008d24:	e003      	b.n	8008d2e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	e000      	b.n	8008d34 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008d32:	2302      	movs	r3, #2
  }
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	460b      	mov	r3, r1
 8008d46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d4e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008d50:	78fb      	ldrb	r3, [r7, #3]
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f001 feb1 	bl	800aabc <USBD_LL_GetRxDataSize>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d00d      	beq.n	8008d88 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008d80:	4611      	mov	r1, r2
 8008d82:	4798      	blx	r3

    return USBD_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	e000      	b.n	8008d8a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8008d88:	2302      	movs	r3, #2
  }
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3710      	adds	r7, #16
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b084      	sub	sp, #16
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d015      	beq.n	8008dd8 <USBD_CDC_EP0_RxReady+0x46>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008db2:	2bff      	cmp	r3, #255	; 0xff
 8008db4:	d010      	beq.n	8008dd8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008dc4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008dcc:	b292      	uxth	r2, r2
 8008dce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	22ff      	movs	r2, #255	; 0xff
 8008dd4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
	...

08008de4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2243      	movs	r2, #67	; 0x43
 8008df0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008df2:	4b03      	ldr	r3, [pc, #12]	; (8008e00 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bc80      	pop	{r7}
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	200000c8 	.word	0x200000c8

08008e04 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2243      	movs	r2, #67	; 0x43
 8008e10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8008e12:	4b03      	ldr	r3, [pc, #12]	; (8008e20 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bc80      	pop	{r7}
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	20000084 	.word	0x20000084

08008e24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b083      	sub	sp, #12
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2243      	movs	r2, #67	; 0x43
 8008e30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8008e32:	4b03      	ldr	r3, [pc, #12]	; (8008e40 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bc80      	pop	{r7}
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	2000010c 	.word	0x2000010c

08008e44 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	220a      	movs	r2, #10
 8008e50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8008e52:	4b03      	ldr	r3, [pc, #12]	; (8008e60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bc80      	pop	{r7}
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	20000040 	.word	0x20000040

08008e64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008e6e:	2302      	movs	r3, #2
 8008e70:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d005      	beq.n	8008e84 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3714      	adds	r7, #20
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bc80      	pop	{r7}
 8008e8e:	4770      	bx	lr

08008e90 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b087      	sub	sp, #28
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ea4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	68ba      	ldr	r2, [r7, #8]
 8008eaa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008eae:	88fa      	ldrh	r2, [r7, #6]
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	371c      	adds	r7, #28
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bc80      	pop	{r7}
 8008ec0:	4770      	bx	lr

08008ec2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008ec2:	b480      	push	{r7}
 8008ec4:	b085      	sub	sp, #20
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ed2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3714      	adds	r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bc80      	pop	{r7}
 8008ee6:	4770      	bx	lr

08008ee8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ef6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d01c      	beq.n	8008f3c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d115      	bne.n	8008f38 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	2181      	movs	r1, #129	; 0x81
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f001 fd7e 	bl	800aa30 <USBD_LL_Transmit>

      return USBD_OK;
 8008f34:	2300      	movs	r3, #0
 8008f36:	e002      	b.n	8008f3e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e000      	b.n	8008f3e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008f3c:	2302      	movs	r3, #2
  }
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b084      	sub	sp, #16
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f54:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d017      	beq.n	8008f90 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	7c1b      	ldrb	r3, [r3, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d109      	bne.n	8008f7c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f72:	2101      	movs	r1, #1
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f001 fd7e 	bl	800aa76 <USBD_LL_PrepareReceive>
 8008f7a:	e007      	b.n	8008f8c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f82:	2340      	movs	r3, #64	; 0x40
 8008f84:	2101      	movs	r1, #1
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f001 fd75 	bl	800aa76 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	e000      	b.n	8008f92 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008f90:	2302      	movs	r3, #2
  }
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b084      	sub	sp, #16
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	60f8      	str	r0, [r7, #12]
 8008fa2:	60b9      	str	r1, [r7, #8]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d101      	bne.n	8008fb2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008fae:	2302      	movs	r3, #2
 8008fb0:	e01a      	b.n	8008fe8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d003      	beq.n	8008fc4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d003      	beq.n	8008fd2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	79fa      	ldrb	r2, [r7, #7]
 8008fde:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f001 fbf3 	bl	800a7cc <USBD_LL_Init>

  return USBD_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d006      	beq.n	8009012 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800900c:	2300      	movs	r3, #0
 800900e:	73fb      	strb	r3, [r7, #15]
 8009010:	e001      	b.n	8009016 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009012:	2302      	movs	r3, #2
 8009014:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009016:	7bfb      	ldrb	r3, [r7, #15]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3714      	adds	r7, #20
 800901c:	46bd      	mov	sp, r7
 800901e:	bc80      	pop	{r7}
 8009020:	4770      	bx	lr

08009022 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b082      	sub	sp, #8
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f001 fc18 	bl	800a860 <USBD_LL_Start>

  return USBD_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800903a:	b480      	push	{r7}
 800903c:	b083      	sub	sp, #12
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	bc80      	pop	{r7}
 800904c:	4770      	bx	lr

0800904e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b084      	sub	sp, #16
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
 8009056:	460b      	mov	r3, r1
 8009058:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800905a:	2302      	movs	r3, #2
 800905c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00c      	beq.n	8009082 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	78fa      	ldrb	r2, [r7, #3]
 8009072:	4611      	mov	r1, r2
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	4798      	blx	r3
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d101      	bne.n	8009082 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009082:	7bfb      	ldrb	r3, [r7, #15]
}
 8009084:	4618      	mov	r0, r3
 8009086:	3710      	adds	r7, #16
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
 8009094:	460b      	mov	r3, r1
 8009096:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	78fa      	ldrb	r2, [r7, #3]
 80090a2:	4611      	mov	r1, r2
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	4798      	blx	r3

  return USBD_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b082      	sub	sp, #8
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80090c2:	6839      	ldr	r1, [r7, #0]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f000 ff10 	bl	8009eea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80090d8:	461a      	mov	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80090e6:	f003 031f 	and.w	r3, r3, #31
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d016      	beq.n	800911c <USBD_LL_SetupStage+0x6a>
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	d81c      	bhi.n	800912c <USBD_LL_SetupStage+0x7a>
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d002      	beq.n	80090fc <USBD_LL_SetupStage+0x4a>
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d008      	beq.n	800910c <USBD_LL_SetupStage+0x5a>
 80090fa:	e017      	b.n	800912c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009102:	4619      	mov	r1, r3
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 fa03 	bl	8009510 <USBD_StdDevReq>
      break;
 800910a:	e01a      	b.n	8009142 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009112:	4619      	mov	r1, r3
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 fa65 	bl	80095e4 <USBD_StdItfReq>
      break;
 800911a:	e012      	b.n	8009142 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009122:	4619      	mov	r1, r3
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 faa5 	bl	8009674 <USBD_StdEPReq>
      break;
 800912a:	e00a      	b.n	8009142 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009132:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009136:	b2db      	uxtb	r3, r3
 8009138:	4619      	mov	r1, r3
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f001 fbf0 	bl	800a920 <USBD_LL_StallEP>
      break;
 8009140:	bf00      	nop
  }

  return USBD_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	60f8      	str	r0, [r7, #12]
 8009154:	460b      	mov	r3, r1
 8009156:	607a      	str	r2, [r7, #4]
 8009158:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800915a:	7afb      	ldrb	r3, [r7, #11]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d14b      	bne.n	80091f8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009166:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800916e:	2b03      	cmp	r3, #3
 8009170:	d134      	bne.n	80091dc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	68da      	ldr	r2, [r3, #12]
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	429a      	cmp	r2, r3
 800917c:	d919      	bls.n	80091b2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	68da      	ldr	r2, [r3, #12]
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	1ad2      	subs	r2, r2, r3
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	68da      	ldr	r2, [r3, #12]
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009194:	429a      	cmp	r2, r3
 8009196:	d203      	bcs.n	80091a0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800919c:	b29b      	uxth	r3, r3
 800919e:	e002      	b.n	80091a6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	461a      	mov	r2, r3
 80091a8:	6879      	ldr	r1, [r7, #4]
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f000 ff8f 	bl	800a0ce <USBD_CtlContinueRx>
 80091b0:	e038      	b.n	8009224 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00a      	beq.n	80091d4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80091c4:	2b03      	cmp	r3, #3
 80091c6:	d105      	bne.n	80091d4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f000 ff8c 	bl	800a0f2 <USBD_CtlSendStatus>
 80091da:	e023      	b.n	8009224 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091e2:	2b05      	cmp	r3, #5
 80091e4:	d11e      	bne.n	8009224 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80091ee:	2100      	movs	r1, #0
 80091f0:	68f8      	ldr	r0, [r7, #12]
 80091f2:	f001 fb95 	bl	800a920 <USBD_LL_StallEP>
 80091f6:	e015      	b.n	8009224 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00d      	beq.n	8009220 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800920a:	2b03      	cmp	r3, #3
 800920c:	d108      	bne.n	8009220 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	7afa      	ldrb	r2, [r7, #11]
 8009218:	4611      	mov	r1, r2
 800921a:	68f8      	ldr	r0, [r7, #12]
 800921c:	4798      	blx	r3
 800921e:	e001      	b.n	8009224 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009220:	2302      	movs	r3, #2
 8009222:	e000      	b.n	8009226 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3718      	adds	r7, #24
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b086      	sub	sp, #24
 8009232:	af00      	add	r7, sp, #0
 8009234:	60f8      	str	r0, [r7, #12]
 8009236:	460b      	mov	r3, r1
 8009238:	607a      	str	r2, [r7, #4]
 800923a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800923c:	7afb      	ldrb	r3, [r7, #11]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d17f      	bne.n	8009342 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	3314      	adds	r3, #20
 8009246:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800924e:	2b02      	cmp	r3, #2
 8009250:	d15c      	bne.n	800930c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	68da      	ldr	r2, [r3, #12]
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	429a      	cmp	r2, r3
 800925c:	d915      	bls.n	800928a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	68da      	ldr	r2, [r3, #12]
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	691b      	ldr	r3, [r3, #16]
 8009266:	1ad2      	subs	r2, r2, r3
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	b29b      	uxth	r3, r3
 8009272:	461a      	mov	r2, r3
 8009274:	6879      	ldr	r1, [r7, #4]
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f000 fef9 	bl	800a06e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800927c:	2300      	movs	r3, #0
 800927e:	2200      	movs	r2, #0
 8009280:	2100      	movs	r1, #0
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f001 fbf7 	bl	800aa76 <USBD_LL_PrepareReceive>
 8009288:	e04e      	b.n	8009328 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	6912      	ldr	r2, [r2, #16]
 8009292:	fbb3 f1f2 	udiv	r1, r3, r2
 8009296:	fb01 f202 	mul.w	r2, r1, r2
 800929a:	1a9b      	subs	r3, r3, r2
 800929c:	2b00      	cmp	r3, #0
 800929e:	d11c      	bne.n	80092da <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	689a      	ldr	r2, [r3, #8]
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d316      	bcc.n	80092da <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	689a      	ldr	r2, [r3, #8]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80092b6:	429a      	cmp	r2, r3
 80092b8:	d20f      	bcs.n	80092da <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80092ba:	2200      	movs	r2, #0
 80092bc:	2100      	movs	r1, #0
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	f000 fed5 	bl	800a06e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092cc:	2300      	movs	r3, #0
 80092ce:	2200      	movs	r2, #0
 80092d0:	2100      	movs	r1, #0
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f001 fbcf 	bl	800aa76 <USBD_LL_PrepareReceive>
 80092d8:	e026      	b.n	8009328 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00a      	beq.n	80092fc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80092ec:	2b03      	cmp	r3, #3
 80092ee:	d105      	bne.n	80092fc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80092fc:	2180      	movs	r1, #128	; 0x80
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f001 fb0e 	bl	800a920 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f000 ff07 	bl	800a118 <USBD_CtlReceiveStatus>
 800930a:	e00d      	b.n	8009328 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009312:	2b04      	cmp	r3, #4
 8009314:	d004      	beq.n	8009320 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800931c:	2b00      	cmp	r3, #0
 800931e:	d103      	bne.n	8009328 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009320:	2180      	movs	r1, #128	; 0x80
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f001 fafc 	bl	800a920 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800932e:	2b01      	cmp	r3, #1
 8009330:	d11d      	bne.n	800936e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f7ff fe81 	bl	800903a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009340:	e015      	b.n	800936e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009348:	695b      	ldr	r3, [r3, #20]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00d      	beq.n	800936a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009354:	2b03      	cmp	r3, #3
 8009356:	d108      	bne.n	800936a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800935e:	695b      	ldr	r3, [r3, #20]
 8009360:	7afa      	ldrb	r2, [r7, #11]
 8009362:	4611      	mov	r1, r2
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	4798      	blx	r3
 8009368:	e001      	b.n	800936e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800936a:	2302      	movs	r3, #2
 800936c:	e000      	b.n	8009370 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3718      	adds	r7, #24
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009380:	2340      	movs	r3, #64	; 0x40
 8009382:	2200      	movs	r2, #0
 8009384:	2100      	movs	r1, #0
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f001 fa85 	bl	800a896 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2240      	movs	r2, #64	; 0x40
 8009398:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800939c:	2340      	movs	r3, #64	; 0x40
 800939e:	2200      	movs	r2, #0
 80093a0:	2180      	movs	r1, #128	; 0x80
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f001 fa77 	bl	800a896 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2240      	movs	r2, #64	; 0x40
 80093b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d009      	beq.n	80093f0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	6852      	ldr	r2, [r2, #4]
 80093e8:	b2d2      	uxtb	r2, r2
 80093ea:	4611      	mov	r1, r2
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	4798      	blx	r3
  }

  return USBD_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b083      	sub	sp, #12
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
 8009402:	460b      	mov	r3, r1
 8009404:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	78fa      	ldrb	r2, [r7, #3]
 800940a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	bc80      	pop	{r7}
 8009416:	4770      	bx	lr

08009418 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2204      	movs	r2, #4
 8009430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009434:	2300      	movs	r3, #0
}
 8009436:	4618      	mov	r0, r3
 8009438:	370c      	adds	r7, #12
 800943a:	46bd      	mov	sp, r7
 800943c:	bc80      	pop	{r7}
 800943e:	4770      	bx	lr

08009440 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800944e:	2b04      	cmp	r3, #4
 8009450:	d105      	bne.n	800945e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	bc80      	pop	{r7}
 8009468:	4770      	bx	lr

0800946a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b082      	sub	sp, #8
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009478:	2b03      	cmp	r3, #3
 800947a:	d10b      	bne.n	8009494 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009482:	69db      	ldr	r3, [r3, #28]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d005      	beq.n	8009494 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800948e:	69db      	ldr	r3, [r3, #28]
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800949e:	b480      	push	{r7}
 80094a0:	b083      	sub	sp, #12
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
 80094a6:	460b      	mov	r3, r1
 80094a8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bc80      	pop	{r7}
 80094b4:	4770      	bx	lr

080094b6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80094b6:	b480      	push	{r7}
 80094b8:	b083      	sub	sp, #12
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
 80094be:	460b      	mov	r3, r1
 80094c0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bc80      	pop	{r7}
 80094cc:	4770      	bx	lr

080094ce <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80094ce:	b480      	push	{r7}
 80094d0:	b083      	sub	sp, #12
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	bc80      	pop	{r7}
 80094e0:	4770      	bx	lr

080094e2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b082      	sub	sp, #8
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2201      	movs	r2, #1
 80094ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	6852      	ldr	r2, [r2, #4]
 80094fe:	b2d2      	uxtb	r2, r2
 8009500:	4611      	mov	r1, r2
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	4798      	blx	r3

  return USBD_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009526:	2b40      	cmp	r3, #64	; 0x40
 8009528:	d005      	beq.n	8009536 <USBD_StdDevReq+0x26>
 800952a:	2b40      	cmp	r3, #64	; 0x40
 800952c:	d84f      	bhi.n	80095ce <USBD_StdDevReq+0xbe>
 800952e:	2b00      	cmp	r3, #0
 8009530:	d009      	beq.n	8009546 <USBD_StdDevReq+0x36>
 8009532:	2b20      	cmp	r3, #32
 8009534:	d14b      	bne.n	80095ce <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	6839      	ldr	r1, [r7, #0]
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	4798      	blx	r3
      break;
 8009544:	e048      	b.n	80095d8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	785b      	ldrb	r3, [r3, #1]
 800954a:	2b09      	cmp	r3, #9
 800954c:	d839      	bhi.n	80095c2 <USBD_StdDevReq+0xb2>
 800954e:	a201      	add	r2, pc, #4	; (adr r2, 8009554 <USBD_StdDevReq+0x44>)
 8009550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009554:	080095a5 	.word	0x080095a5
 8009558:	080095b9 	.word	0x080095b9
 800955c:	080095c3 	.word	0x080095c3
 8009560:	080095af 	.word	0x080095af
 8009564:	080095c3 	.word	0x080095c3
 8009568:	08009587 	.word	0x08009587
 800956c:	0800957d 	.word	0x0800957d
 8009570:	080095c3 	.word	0x080095c3
 8009574:	0800959b 	.word	0x0800959b
 8009578:	08009591 	.word	0x08009591
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800957c:	6839      	ldr	r1, [r7, #0]
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f000 f9dc 	bl	800993c <USBD_GetDescriptor>
          break;
 8009584:	e022      	b.n	80095cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009586:	6839      	ldr	r1, [r7, #0]
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 fb3f 	bl	8009c0c <USBD_SetAddress>
          break;
 800958e:	e01d      	b.n	80095cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009590:	6839      	ldr	r1, [r7, #0]
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 fb7e 	bl	8009c94 <USBD_SetConfig>
          break;
 8009598:	e018      	b.n	80095cc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800959a:	6839      	ldr	r1, [r7, #0]
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fc07 	bl	8009db0 <USBD_GetConfig>
          break;
 80095a2:	e013      	b.n	80095cc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80095a4:	6839      	ldr	r1, [r7, #0]
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 fc37 	bl	8009e1a <USBD_GetStatus>
          break;
 80095ac:	e00e      	b.n	80095cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80095ae:	6839      	ldr	r1, [r7, #0]
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 fc65 	bl	8009e80 <USBD_SetFeature>
          break;
 80095b6:	e009      	b.n	80095cc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 fc74 	bl	8009ea8 <USBD_ClrFeature>
          break;
 80095c0:	e004      	b.n	80095cc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80095c2:	6839      	ldr	r1, [r7, #0]
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fccc 	bl	8009f62 <USBD_CtlError>
          break;
 80095ca:	bf00      	nop
      }
      break;
 80095cc:	e004      	b.n	80095d8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80095ce:	6839      	ldr	r1, [r7, #0]
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 fcc6 	bl	8009f62 <USBD_CtlError>
      break;
 80095d6:	bf00      	nop
  }

  return ret;
 80095d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop

080095e4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80095ee:	2300      	movs	r3, #0
 80095f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095fa:	2b40      	cmp	r3, #64	; 0x40
 80095fc:	d005      	beq.n	800960a <USBD_StdItfReq+0x26>
 80095fe:	2b40      	cmp	r3, #64	; 0x40
 8009600:	d82e      	bhi.n	8009660 <USBD_StdItfReq+0x7c>
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <USBD_StdItfReq+0x26>
 8009606:	2b20      	cmp	r3, #32
 8009608:	d12a      	bne.n	8009660 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009610:	3b01      	subs	r3, #1
 8009612:	2b02      	cmp	r3, #2
 8009614:	d81d      	bhi.n	8009652 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	889b      	ldrh	r3, [r3, #4]
 800961a:	b2db      	uxtb	r3, r3
 800961c:	2b01      	cmp	r3, #1
 800961e:	d813      	bhi.n	8009648 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	4798      	blx	r3
 800962e:	4603      	mov	r3, r0
 8009630:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	88db      	ldrh	r3, [r3, #6]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d110      	bne.n	800965c <USBD_StdItfReq+0x78>
 800963a:	7bfb      	ldrb	r3, [r7, #15]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d10d      	bne.n	800965c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fd56 	bl	800a0f2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009646:	e009      	b.n	800965c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009648:	6839      	ldr	r1, [r7, #0]
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fc89 	bl	8009f62 <USBD_CtlError>
          break;
 8009650:	e004      	b.n	800965c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009652:	6839      	ldr	r1, [r7, #0]
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fc84 	bl	8009f62 <USBD_CtlError>
          break;
 800965a:	e000      	b.n	800965e <USBD_StdItfReq+0x7a>
          break;
 800965c:	bf00      	nop
      }
      break;
 800965e:	e004      	b.n	800966a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009660:	6839      	ldr	r1, [r7, #0]
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fc7d 	bl	8009f62 <USBD_CtlError>
      break;
 8009668:	bf00      	nop
  }

  return USBD_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	889b      	ldrh	r3, [r3, #4]
 8009686:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009690:	2b40      	cmp	r3, #64	; 0x40
 8009692:	d007      	beq.n	80096a4 <USBD_StdEPReq+0x30>
 8009694:	2b40      	cmp	r3, #64	; 0x40
 8009696:	f200 8146 	bhi.w	8009926 <USBD_StdEPReq+0x2b2>
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00a      	beq.n	80096b4 <USBD_StdEPReq+0x40>
 800969e:	2b20      	cmp	r3, #32
 80096a0:	f040 8141 	bne.w	8009926 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	6839      	ldr	r1, [r7, #0]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	4798      	blx	r3
      break;
 80096b2:	e13d      	b.n	8009930 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096bc:	2b20      	cmp	r3, #32
 80096be:	d10a      	bne.n	80096d6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	6839      	ldr	r1, [r7, #0]
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	4798      	blx	r3
 80096ce:	4603      	mov	r3, r0
 80096d0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80096d2:	7bfb      	ldrb	r3, [r7, #15]
 80096d4:	e12d      	b.n	8009932 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	785b      	ldrb	r3, [r3, #1]
 80096da:	2b03      	cmp	r3, #3
 80096dc:	d007      	beq.n	80096ee <USBD_StdEPReq+0x7a>
 80096de:	2b03      	cmp	r3, #3
 80096e0:	f300 811b 	bgt.w	800991a <USBD_StdEPReq+0x2a6>
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d072      	beq.n	80097ce <USBD_StdEPReq+0x15a>
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d03a      	beq.n	8009762 <USBD_StdEPReq+0xee>
 80096ec:	e115      	b.n	800991a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	d002      	beq.n	80096fe <USBD_StdEPReq+0x8a>
 80096f8:	2b03      	cmp	r3, #3
 80096fa:	d015      	beq.n	8009728 <USBD_StdEPReq+0xb4>
 80096fc:	e02b      	b.n	8009756 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096fe:	7bbb      	ldrb	r3, [r7, #14]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00c      	beq.n	800971e <USBD_StdEPReq+0xaa>
 8009704:	7bbb      	ldrb	r3, [r7, #14]
 8009706:	2b80      	cmp	r3, #128	; 0x80
 8009708:	d009      	beq.n	800971e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800970a:	7bbb      	ldrb	r3, [r7, #14]
 800970c:	4619      	mov	r1, r3
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f001 f906 	bl	800a920 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009714:	2180      	movs	r1, #128	; 0x80
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f001 f902 	bl	800a920 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800971c:	e020      	b.n	8009760 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800971e:	6839      	ldr	r1, [r7, #0]
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fc1e 	bl	8009f62 <USBD_CtlError>
              break;
 8009726:	e01b      	b.n	8009760 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	885b      	ldrh	r3, [r3, #2]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10e      	bne.n	800974e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009730:	7bbb      	ldrb	r3, [r7, #14]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00b      	beq.n	800974e <USBD_StdEPReq+0xda>
 8009736:	7bbb      	ldrb	r3, [r7, #14]
 8009738:	2b80      	cmp	r3, #128	; 0x80
 800973a:	d008      	beq.n	800974e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	88db      	ldrh	r3, [r3, #6]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d104      	bne.n	800974e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009744:	7bbb      	ldrb	r3, [r7, #14]
 8009746:	4619      	mov	r1, r3
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f001 f8e9 	bl	800a920 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 fccf 	bl	800a0f2 <USBD_CtlSendStatus>

              break;
 8009754:	e004      	b.n	8009760 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009756:	6839      	ldr	r1, [r7, #0]
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 fc02 	bl	8009f62 <USBD_CtlError>
              break;
 800975e:	bf00      	nop
          }
          break;
 8009760:	e0e0      	b.n	8009924 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009768:	2b02      	cmp	r3, #2
 800976a:	d002      	beq.n	8009772 <USBD_StdEPReq+0xfe>
 800976c:	2b03      	cmp	r3, #3
 800976e:	d015      	beq.n	800979c <USBD_StdEPReq+0x128>
 8009770:	e026      	b.n	80097c0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009772:	7bbb      	ldrb	r3, [r7, #14]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00c      	beq.n	8009792 <USBD_StdEPReq+0x11e>
 8009778:	7bbb      	ldrb	r3, [r7, #14]
 800977a:	2b80      	cmp	r3, #128	; 0x80
 800977c:	d009      	beq.n	8009792 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800977e:	7bbb      	ldrb	r3, [r7, #14]
 8009780:	4619      	mov	r1, r3
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f001 f8cc 	bl	800a920 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009788:	2180      	movs	r1, #128	; 0x80
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f001 f8c8 	bl	800a920 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009790:	e01c      	b.n	80097cc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009792:	6839      	ldr	r1, [r7, #0]
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 fbe4 	bl	8009f62 <USBD_CtlError>
              break;
 800979a:	e017      	b.n	80097cc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	885b      	ldrh	r3, [r3, #2]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d112      	bne.n	80097ca <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80097a4:	7bbb      	ldrb	r3, [r7, #14]
 80097a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d004      	beq.n	80097b8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80097ae:	7bbb      	ldrb	r3, [r7, #14]
 80097b0:	4619      	mov	r1, r3
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f001 f8d3 	bl	800a95e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fc9a 	bl	800a0f2 <USBD_CtlSendStatus>
              }
              break;
 80097be:	e004      	b.n	80097ca <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80097c0:	6839      	ldr	r1, [r7, #0]
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fbcd 	bl	8009f62 <USBD_CtlError>
              break;
 80097c8:	e000      	b.n	80097cc <USBD_StdEPReq+0x158>
              break;
 80097ca:	bf00      	nop
          }
          break;
 80097cc:	e0aa      	b.n	8009924 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	d002      	beq.n	80097de <USBD_StdEPReq+0x16a>
 80097d8:	2b03      	cmp	r3, #3
 80097da:	d032      	beq.n	8009842 <USBD_StdEPReq+0x1ce>
 80097dc:	e097      	b.n	800990e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097de:	7bbb      	ldrb	r3, [r7, #14]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d007      	beq.n	80097f4 <USBD_StdEPReq+0x180>
 80097e4:	7bbb      	ldrb	r3, [r7, #14]
 80097e6:	2b80      	cmp	r3, #128	; 0x80
 80097e8:	d004      	beq.n	80097f4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80097ea:	6839      	ldr	r1, [r7, #0]
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 fbb8 	bl	8009f62 <USBD_CtlError>
                break;
 80097f2:	e091      	b.n	8009918 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	da0b      	bge.n	8009814 <USBD_StdEPReq+0x1a0>
 80097fc:	7bbb      	ldrb	r3, [r7, #14]
 80097fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009802:	4613      	mov	r3, r2
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	3310      	adds	r3, #16
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	4413      	add	r3, r2
 8009810:	3304      	adds	r3, #4
 8009812:	e00b      	b.n	800982c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009814:	7bbb      	ldrb	r3, [r7, #14]
 8009816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800981a:	4613      	mov	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4413      	add	r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	4413      	add	r3, r2
 800982a:	3304      	adds	r3, #4
 800982c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	2200      	movs	r2, #0
 8009832:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	2202      	movs	r2, #2
 8009838:	4619      	mov	r1, r3
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fbfb 	bl	800a036 <USBD_CtlSendData>
              break;
 8009840:	e06a      	b.n	8009918 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009842:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009846:	2b00      	cmp	r3, #0
 8009848:	da11      	bge.n	800986e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800984a:	7bbb      	ldrb	r3, [r7, #14]
 800984c:	f003 020f 	and.w	r2, r3, #15
 8009850:	6879      	ldr	r1, [r7, #4]
 8009852:	4613      	mov	r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4413      	add	r3, r2
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	440b      	add	r3, r1
 800985c:	3318      	adds	r3, #24
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d117      	bne.n	8009894 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009864:	6839      	ldr	r1, [r7, #0]
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fb7b 	bl	8009f62 <USBD_CtlError>
                  break;
 800986c:	e054      	b.n	8009918 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800986e:	7bbb      	ldrb	r3, [r7, #14]
 8009870:	f003 020f 	and.w	r2, r3, #15
 8009874:	6879      	ldr	r1, [r7, #4]
 8009876:	4613      	mov	r3, r2
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4413      	add	r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	440b      	add	r3, r1
 8009880:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d104      	bne.n	8009894 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800988a:	6839      	ldr	r1, [r7, #0]
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 fb68 	bl	8009f62 <USBD_CtlError>
                  break;
 8009892:	e041      	b.n	8009918 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009894:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009898:	2b00      	cmp	r3, #0
 800989a:	da0b      	bge.n	80098b4 <USBD_StdEPReq+0x240>
 800989c:	7bbb      	ldrb	r3, [r7, #14]
 800989e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098a2:	4613      	mov	r3, r2
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	4413      	add	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	3310      	adds	r3, #16
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	4413      	add	r3, r2
 80098b0:	3304      	adds	r3, #4
 80098b2:	e00b      	b.n	80098cc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80098b4:	7bbb      	ldrb	r3, [r7, #14]
 80098b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80098ba:	4613      	mov	r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	4413      	add	r3, r2
 80098ca:	3304      	adds	r3, #4
 80098cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80098ce:	7bbb      	ldrb	r3, [r7, #14]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d002      	beq.n	80098da <USBD_StdEPReq+0x266>
 80098d4:	7bbb      	ldrb	r3, [r7, #14]
 80098d6:	2b80      	cmp	r3, #128	; 0x80
 80098d8:	d103      	bne.n	80098e2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	2200      	movs	r2, #0
 80098de:	601a      	str	r2, [r3, #0]
 80098e0:	e00e      	b.n	8009900 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80098e2:	7bbb      	ldrb	r3, [r7, #14]
 80098e4:	4619      	mov	r1, r3
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f001 f858 	bl	800a99c <USBD_LL_IsStallEP>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d003      	beq.n	80098fa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	2201      	movs	r2, #1
 80098f6:	601a      	str	r2, [r3, #0]
 80098f8:	e002      	b.n	8009900 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	2200      	movs	r2, #0
 80098fe:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	2202      	movs	r2, #2
 8009904:	4619      	mov	r1, r3
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 fb95 	bl	800a036 <USBD_CtlSendData>
              break;
 800990c:	e004      	b.n	8009918 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800990e:	6839      	ldr	r1, [r7, #0]
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 fb26 	bl	8009f62 <USBD_CtlError>
              break;
 8009916:	bf00      	nop
          }
          break;
 8009918:	e004      	b.n	8009924 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800991a:	6839      	ldr	r1, [r7, #0]
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 fb20 	bl	8009f62 <USBD_CtlError>
          break;
 8009922:	bf00      	nop
      }
      break;
 8009924:	e004      	b.n	8009930 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009926:	6839      	ldr	r1, [r7, #0]
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 fb1a 	bl	8009f62 <USBD_CtlError>
      break;
 800992e:	bf00      	nop
  }

  return ret;
 8009930:	7bfb      	ldrb	r3, [r7, #15]
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
	...

0800993c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009946:	2300      	movs	r3, #0
 8009948:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800994a:	2300      	movs	r3, #0
 800994c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800994e:	2300      	movs	r3, #0
 8009950:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	885b      	ldrh	r3, [r3, #2]
 8009956:	0a1b      	lsrs	r3, r3, #8
 8009958:	b29b      	uxth	r3, r3
 800995a:	3b01      	subs	r3, #1
 800995c:	2b06      	cmp	r3, #6
 800995e:	f200 8128 	bhi.w	8009bb2 <USBD_GetDescriptor+0x276>
 8009962:	a201      	add	r2, pc, #4	; (adr r2, 8009968 <USBD_GetDescriptor+0x2c>)
 8009964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009968:	08009985 	.word	0x08009985
 800996c:	0800999d 	.word	0x0800999d
 8009970:	080099dd 	.word	0x080099dd
 8009974:	08009bb3 	.word	0x08009bb3
 8009978:	08009bb3 	.word	0x08009bb3
 800997c:	08009b53 	.word	0x08009b53
 8009980:	08009b7f 	.word	0x08009b7f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	7c12      	ldrb	r2, [r2, #16]
 8009990:	f107 0108 	add.w	r1, r7, #8
 8009994:	4610      	mov	r0, r2
 8009996:	4798      	blx	r3
 8009998:	60f8      	str	r0, [r7, #12]
      break;
 800999a:	e112      	b.n	8009bc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	7c1b      	ldrb	r3, [r3, #16]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10d      	bne.n	80099c0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ac:	f107 0208 	add.w	r2, r7, #8
 80099b0:	4610      	mov	r0, r2
 80099b2:	4798      	blx	r3
 80099b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	3301      	adds	r3, #1
 80099ba:	2202      	movs	r2, #2
 80099bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80099be:	e100      	b.n	8009bc2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c8:	f107 0208 	add.w	r2, r7, #8
 80099cc:	4610      	mov	r0, r2
 80099ce:	4798      	blx	r3
 80099d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	3301      	adds	r3, #1
 80099d6:	2202      	movs	r2, #2
 80099d8:	701a      	strb	r2, [r3, #0]
      break;
 80099da:	e0f2      	b.n	8009bc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	885b      	ldrh	r3, [r3, #2]
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	2b05      	cmp	r3, #5
 80099e4:	f200 80ac 	bhi.w	8009b40 <USBD_GetDescriptor+0x204>
 80099e8:	a201      	add	r2, pc, #4	; (adr r2, 80099f0 <USBD_GetDescriptor+0xb4>)
 80099ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ee:	bf00      	nop
 80099f0:	08009a09 	.word	0x08009a09
 80099f4:	08009a3d 	.word	0x08009a3d
 80099f8:	08009a71 	.word	0x08009a71
 80099fc:	08009aa5 	.word	0x08009aa5
 8009a00:	08009ad9 	.word	0x08009ad9
 8009a04:	08009b0d 	.word	0x08009b0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d00b      	beq.n	8009a2c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	7c12      	ldrb	r2, [r2, #16]
 8009a20:	f107 0108 	add.w	r1, r7, #8
 8009a24:	4610      	mov	r0, r2
 8009a26:	4798      	blx	r3
 8009a28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a2a:	e091      	b.n	8009b50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a2c:	6839      	ldr	r1, [r7, #0]
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 fa97 	bl	8009f62 <USBD_CtlError>
            err++;
 8009a34:	7afb      	ldrb	r3, [r7, #11]
 8009a36:	3301      	adds	r3, #1
 8009a38:	72fb      	strb	r3, [r7, #11]
          break;
 8009a3a:	e089      	b.n	8009b50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00b      	beq.n	8009a60 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	7c12      	ldrb	r2, [r2, #16]
 8009a54:	f107 0108 	add.w	r1, r7, #8
 8009a58:	4610      	mov	r0, r2
 8009a5a:	4798      	blx	r3
 8009a5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a5e:	e077      	b.n	8009b50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a60:	6839      	ldr	r1, [r7, #0]
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fa7d 	bl	8009f62 <USBD_CtlError>
            err++;
 8009a68:	7afb      	ldrb	r3, [r7, #11]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a6e:	e06f      	b.n	8009b50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00b      	beq.n	8009a94 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	7c12      	ldrb	r2, [r2, #16]
 8009a88:	f107 0108 	add.w	r1, r7, #8
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	4798      	blx	r3
 8009a90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a92:	e05d      	b.n	8009b50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fa63 	bl	8009f62 <USBD_CtlError>
            err++;
 8009a9c:	7afb      	ldrb	r3, [r7, #11]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	72fb      	strb	r3, [r7, #11]
          break;
 8009aa2:	e055      	b.n	8009b50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00b      	beq.n	8009ac8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ab6:	691b      	ldr	r3, [r3, #16]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	7c12      	ldrb	r2, [r2, #16]
 8009abc:	f107 0108 	add.w	r1, r7, #8
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	4798      	blx	r3
 8009ac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ac6:	e043      	b.n	8009b50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ac8:	6839      	ldr	r1, [r7, #0]
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 fa49 	bl	8009f62 <USBD_CtlError>
            err++;
 8009ad0:	7afb      	ldrb	r3, [r7, #11]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ad6:	e03b      	b.n	8009b50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ade:	695b      	ldr	r3, [r3, #20]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00b      	beq.n	8009afc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009aea:	695b      	ldr	r3, [r3, #20]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	7c12      	ldrb	r2, [r2, #16]
 8009af0:	f107 0108 	add.w	r1, r7, #8
 8009af4:	4610      	mov	r0, r2
 8009af6:	4798      	blx	r3
 8009af8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009afa:	e029      	b.n	8009b50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009afc:	6839      	ldr	r1, [r7, #0]
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fa2f 	bl	8009f62 <USBD_CtlError>
            err++;
 8009b04:	7afb      	ldrb	r3, [r7, #11]
 8009b06:	3301      	adds	r3, #1
 8009b08:	72fb      	strb	r3, [r7, #11]
          break;
 8009b0a:	e021      	b.n	8009b50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b12:	699b      	ldr	r3, [r3, #24]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00b      	beq.n	8009b30 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009b1e:	699b      	ldr	r3, [r3, #24]
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	7c12      	ldrb	r2, [r2, #16]
 8009b24:	f107 0108 	add.w	r1, r7, #8
 8009b28:	4610      	mov	r0, r2
 8009b2a:	4798      	blx	r3
 8009b2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b2e:	e00f      	b.n	8009b50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009b30:	6839      	ldr	r1, [r7, #0]
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 fa15 	bl	8009f62 <USBD_CtlError>
            err++;
 8009b38:	7afb      	ldrb	r3, [r7, #11]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b3e:	e007      	b.n	8009b50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009b40:	6839      	ldr	r1, [r7, #0]
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 fa0d 	bl	8009f62 <USBD_CtlError>
          err++;
 8009b48:	7afb      	ldrb	r3, [r7, #11]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009b4e:	e038      	b.n	8009bc2 <USBD_GetDescriptor+0x286>
 8009b50:	e037      	b.n	8009bc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	7c1b      	ldrb	r3, [r3, #16]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d109      	bne.n	8009b6e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b62:	f107 0208 	add.w	r2, r7, #8
 8009b66:	4610      	mov	r0, r2
 8009b68:	4798      	blx	r3
 8009b6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b6c:	e029      	b.n	8009bc2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009b6e:	6839      	ldr	r1, [r7, #0]
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 f9f6 	bl	8009f62 <USBD_CtlError>
        err++;
 8009b76:	7afb      	ldrb	r3, [r7, #11]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	72fb      	strb	r3, [r7, #11]
      break;
 8009b7c:	e021      	b.n	8009bc2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	7c1b      	ldrb	r3, [r3, #16]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d10d      	bne.n	8009ba2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b8e:	f107 0208 	add.w	r2, r7, #8
 8009b92:	4610      	mov	r0, r2
 8009b94:	4798      	blx	r3
 8009b96:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	3301      	adds	r3, #1
 8009b9c:	2207      	movs	r2, #7
 8009b9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ba0:	e00f      	b.n	8009bc2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009ba2:	6839      	ldr	r1, [r7, #0]
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 f9dc 	bl	8009f62 <USBD_CtlError>
        err++;
 8009baa:	7afb      	ldrb	r3, [r7, #11]
 8009bac:	3301      	adds	r3, #1
 8009bae:	72fb      	strb	r3, [r7, #11]
      break;
 8009bb0:	e007      	b.n	8009bc2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009bb2:	6839      	ldr	r1, [r7, #0]
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 f9d4 	bl	8009f62 <USBD_CtlError>
      err++;
 8009bba:	7afb      	ldrb	r3, [r7, #11]
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	72fb      	strb	r3, [r7, #11]
      break;
 8009bc0:	bf00      	nop
  }

  if (err != 0U)
 8009bc2:	7afb      	ldrb	r3, [r7, #11]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d11c      	bne.n	8009c02 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009bc8:	893b      	ldrh	r3, [r7, #8]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d011      	beq.n	8009bf2 <USBD_GetDescriptor+0x2b6>
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	88db      	ldrh	r3, [r3, #6]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00d      	beq.n	8009bf2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	88da      	ldrh	r2, [r3, #6]
 8009bda:	893b      	ldrh	r3, [r7, #8]
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	bf28      	it	cs
 8009be0:	4613      	movcs	r3, r2
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009be6:	893b      	ldrh	r3, [r7, #8]
 8009be8:	461a      	mov	r2, r3
 8009bea:	68f9      	ldr	r1, [r7, #12]
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 fa22 	bl	800a036 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	88db      	ldrh	r3, [r3, #6]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d104      	bne.n	8009c04 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f000 fa79 	bl	800a0f2 <USBD_CtlSendStatus>
 8009c00:	e000      	b.n	8009c04 <USBD_GetDescriptor+0x2c8>
    return;
 8009c02:	bf00      	nop
    }
  }
}
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop

08009c0c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	889b      	ldrh	r3, [r3, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d130      	bne.n	8009c80 <USBD_SetAddress+0x74>
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	88db      	ldrh	r3, [r3, #6]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d12c      	bne.n	8009c80 <USBD_SetAddress+0x74>
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	885b      	ldrh	r3, [r3, #2]
 8009c2a:	2b7f      	cmp	r3, #127	; 0x7f
 8009c2c:	d828      	bhi.n	8009c80 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	885b      	ldrh	r3, [r3, #2]
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c40:	2b03      	cmp	r3, #3
 8009c42:	d104      	bne.n	8009c4e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f98b 	bl	8009f62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c4c:	e01d      	b.n	8009c8a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	7bfa      	ldrb	r2, [r7, #15]
 8009c52:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c56:	7bfb      	ldrb	r3, [r7, #15]
 8009c58:	4619      	mov	r1, r3
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f000 fec9 	bl	800a9f2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 fa46 	bl	800a0f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c66:	7bfb      	ldrb	r3, [r7, #15]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d004      	beq.n	8009c76 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2202      	movs	r2, #2
 8009c70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c74:	e009      	b.n	8009c8a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c7e:	e004      	b.n	8009c8a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c80:	6839      	ldr	r1, [r7, #0]
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 f96d 	bl	8009f62 <USBD_CtlError>
  }
}
 8009c88:	bf00      	nop
 8009c8a:	bf00      	nop
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}
	...

08009c94 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	885b      	ldrh	r3, [r3, #2]
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	4b41      	ldr	r3, [pc, #260]	; (8009dac <USBD_SetConfig+0x118>)
 8009ca6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ca8:	4b40      	ldr	r3, [pc, #256]	; (8009dac <USBD_SetConfig+0x118>)
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d904      	bls.n	8009cba <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009cb0:	6839      	ldr	r1, [r7, #0]
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 f955 	bl	8009f62 <USBD_CtlError>
 8009cb8:	e075      	b.n	8009da6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d002      	beq.n	8009cca <USBD_SetConfig+0x36>
 8009cc4:	2b03      	cmp	r3, #3
 8009cc6:	d023      	beq.n	8009d10 <USBD_SetConfig+0x7c>
 8009cc8:	e062      	b.n	8009d90 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009cca:	4b38      	ldr	r3, [pc, #224]	; (8009dac <USBD_SetConfig+0x118>)
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d01a      	beq.n	8009d08 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009cd2:	4b36      	ldr	r3, [pc, #216]	; (8009dac <USBD_SetConfig+0x118>)
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2203      	movs	r2, #3
 8009ce0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009ce4:	4b31      	ldr	r3, [pc, #196]	; (8009dac <USBD_SetConfig+0x118>)
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	4619      	mov	r1, r3
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f7ff f9af 	bl	800904e <USBD_SetClassConfig>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	d104      	bne.n	8009d00 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f932 	bl	8009f62 <USBD_CtlError>
            return;
 8009cfe:	e052      	b.n	8009da6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f9f6 	bl	800a0f2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009d06:	e04e      	b.n	8009da6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 f9f2 	bl	800a0f2 <USBD_CtlSendStatus>
        break;
 8009d0e:	e04a      	b.n	8009da6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009d10:	4b26      	ldr	r3, [pc, #152]	; (8009dac <USBD_SetConfig+0x118>)
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d112      	bne.n	8009d3e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2202      	movs	r2, #2
 8009d1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009d20:	4b22      	ldr	r3, [pc, #136]	; (8009dac <USBD_SetConfig+0x118>)
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	461a      	mov	r2, r3
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009d2a:	4b20      	ldr	r3, [pc, #128]	; (8009dac <USBD_SetConfig+0x118>)
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f7ff f9ab 	bl	800908c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 f9db 	bl	800a0f2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009d3c:	e033      	b.n	8009da6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009d3e:	4b1b      	ldr	r3, [pc, #108]	; (8009dac <USBD_SetConfig+0x118>)
 8009d40:	781b      	ldrb	r3, [r3, #0]
 8009d42:	461a      	mov	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d01d      	beq.n	8009d88 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	4619      	mov	r1, r3
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f7ff f999 	bl	800908c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009d5a:	4b14      	ldr	r3, [pc, #80]	; (8009dac <USBD_SetConfig+0x118>)
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	461a      	mov	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009d64:	4b11      	ldr	r3, [pc, #68]	; (8009dac <USBD_SetConfig+0x118>)
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7ff f96f 	bl	800904e <USBD_SetClassConfig>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d104      	bne.n	8009d80 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009d76:	6839      	ldr	r1, [r7, #0]
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 f8f2 	bl	8009f62 <USBD_CtlError>
            return;
 8009d7e:	e012      	b.n	8009da6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 f9b6 	bl	800a0f2 <USBD_CtlSendStatus>
        break;
 8009d86:	e00e      	b.n	8009da6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 f9b2 	bl	800a0f2 <USBD_CtlSendStatus>
        break;
 8009d8e:	e00a      	b.n	8009da6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009d90:	6839      	ldr	r1, [r7, #0]
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f8e5 	bl	8009f62 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009d98:	4b04      	ldr	r3, [pc, #16]	; (8009dac <USBD_SetConfig+0x118>)
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f7ff f974 	bl	800908c <USBD_ClrClassConfig>
        break;
 8009da4:	bf00      	nop
    }
  }
}
 8009da6:	3708      	adds	r7, #8
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	200005f4 	.word	0x200005f4

08009db0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b082      	sub	sp, #8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	88db      	ldrh	r3, [r3, #6]
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d004      	beq.n	8009dcc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009dc2:	6839      	ldr	r1, [r7, #0]
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 f8cc 	bl	8009f62 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009dca:	e022      	b.n	8009e12 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	dc02      	bgt.n	8009ddc <USBD_GetConfig+0x2c>
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	dc03      	bgt.n	8009de2 <USBD_GetConfig+0x32>
 8009dda:	e015      	b.n	8009e08 <USBD_GetConfig+0x58>
 8009ddc:	2b03      	cmp	r3, #3
 8009dde:	d00b      	beq.n	8009df8 <USBD_GetConfig+0x48>
 8009de0:	e012      	b.n	8009e08 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2200      	movs	r2, #0
 8009de6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	3308      	adds	r3, #8
 8009dec:	2201      	movs	r2, #1
 8009dee:	4619      	mov	r1, r3
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 f920 	bl	800a036 <USBD_CtlSendData>
        break;
 8009df6:	e00c      	b.n	8009e12 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	3304      	adds	r3, #4
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	4619      	mov	r1, r3
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 f918 	bl	800a036 <USBD_CtlSendData>
        break;
 8009e06:	e004      	b.n	8009e12 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009e08:	6839      	ldr	r1, [r7, #0]
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f8a9 	bl	8009f62 <USBD_CtlError>
        break;
 8009e10:	bf00      	nop
}
 8009e12:	bf00      	nop
 8009e14:	3708      	adds	r7, #8
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b082      	sub	sp, #8
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
 8009e22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d81e      	bhi.n	8009e6e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	88db      	ldrh	r3, [r3, #6]
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d004      	beq.n	8009e42 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009e38:	6839      	ldr	r1, [r7, #0]
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f000 f891 	bl	8009f62 <USBD_CtlError>
        break;
 8009e40:	e01a      	b.n	8009e78 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2201      	movs	r2, #1
 8009e46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d005      	beq.n	8009e5e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	68db      	ldr	r3, [r3, #12]
 8009e56:	f043 0202 	orr.w	r2, r3, #2
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	330c      	adds	r3, #12
 8009e62:	2202      	movs	r2, #2
 8009e64:	4619      	mov	r1, r3
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f8e5 	bl	800a036 <USBD_CtlSendData>
      break;
 8009e6c:	e004      	b.n	8009e78 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009e6e:	6839      	ldr	r1, [r7, #0]
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 f876 	bl	8009f62 <USBD_CtlError>
      break;
 8009e76:	bf00      	nop
  }
}
 8009e78:	bf00      	nop
 8009e7a:	3708      	adds	r7, #8
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	885b      	ldrh	r3, [r3, #2]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d106      	bne.n	8009ea0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2201      	movs	r2, #1
 8009e96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 f929 	bl	800a0f2 <USBD_CtlSendStatus>
  }
}
 8009ea0:	bf00      	nop
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	2b02      	cmp	r3, #2
 8009ebc:	d80b      	bhi.n	8009ed6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	885b      	ldrh	r3, [r3, #2]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d10c      	bne.n	8009ee0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 f90f 	bl	800a0f2 <USBD_CtlSendStatus>
      }
      break;
 8009ed4:	e004      	b.n	8009ee0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009ed6:	6839      	ldr	r1, [r7, #0]
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f000 f842 	bl	8009f62 <USBD_CtlError>
      break;
 8009ede:	e000      	b.n	8009ee2 <USBD_ClrFeature+0x3a>
      break;
 8009ee0:	bf00      	nop
  }
}
 8009ee2:	bf00      	nop
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009eea:	b480      	push	{r7}
 8009eec:	b083      	sub	sp, #12
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	781a      	ldrb	r2, [r3, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	785a      	ldrb	r2, [r3, #1]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	3302      	adds	r3, #2
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	3303      	adds	r3, #3
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	021b      	lsls	r3, r3, #8
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	4413      	add	r3, r2
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	3304      	adds	r3, #4
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	3305      	adds	r3, #5
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	021b      	lsls	r3, r3, #8
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	4413      	add	r3, r2
 8009f36:	b29a      	uxth	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	3306      	adds	r3, #6
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	3307      	adds	r3, #7
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	021b      	lsls	r3, r3, #8
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	4413      	add	r3, r2
 8009f52:	b29a      	uxth	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	80da      	strh	r2, [r3, #6]

}
 8009f58:	bf00      	nop
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bc80      	pop	{r7}
 8009f60:	4770      	bx	lr

08009f62 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b082      	sub	sp, #8
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009f6c:	2180      	movs	r1, #128	; 0x80
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 fcd6 	bl	800a920 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009f74:	2100      	movs	r1, #0
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fcd2 	bl	800a920 <USBD_LL_StallEP>
}
 8009f7c:	bf00      	nop
 8009f7e:	3708      	adds	r7, #8
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b086      	sub	sp, #24
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009f90:	2300      	movs	r3, #0
 8009f92:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d032      	beq.n	800a000 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f000 f834 	bl	800a008 <USBD_GetLen>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	005b      	lsls	r3, r3, #1
 8009fa8:	b29a      	uxth	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009fae:	7dfb      	ldrb	r3, [r7, #23]
 8009fb0:	1c5a      	adds	r2, r3, #1
 8009fb2:	75fa      	strb	r2, [r7, #23]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	4413      	add	r3, r2
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	7812      	ldrb	r2, [r2, #0]
 8009fbe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009fc0:	7dfb      	ldrb	r3, [r7, #23]
 8009fc2:	1c5a      	adds	r2, r3, #1
 8009fc4:	75fa      	strb	r2, [r7, #23]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	4413      	add	r3, r2
 8009fcc:	2203      	movs	r2, #3
 8009fce:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009fd0:	e012      	b.n	8009ff8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	1c5a      	adds	r2, r3, #1
 8009fd6:	60fa      	str	r2, [r7, #12]
 8009fd8:	7dfa      	ldrb	r2, [r7, #23]
 8009fda:	1c51      	adds	r1, r2, #1
 8009fdc:	75f9      	strb	r1, [r7, #23]
 8009fde:	4611      	mov	r1, r2
 8009fe0:	68ba      	ldr	r2, [r7, #8]
 8009fe2:	440a      	add	r2, r1
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009fe8:	7dfb      	ldrb	r3, [r7, #23]
 8009fea:	1c5a      	adds	r2, r3, #1
 8009fec:	75fa      	strb	r2, [r7, #23]
 8009fee:	461a      	mov	r2, r3
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d1e8      	bne.n	8009fd2 <USBD_GetString+0x4e>
    }
  }
}
 800a000:	bf00      	nop
 800a002:	3718      	adds	r7, #24
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a010:	2300      	movs	r3, #0
 800a012:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a014:	e005      	b.n	800a022 <USBD_GetLen+0x1a>
  {
    len++;
 800a016:	7bfb      	ldrb	r3, [r7, #15]
 800a018:	3301      	adds	r3, #1
 800a01a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	3301      	adds	r3, #1
 800a020:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d1f5      	bne.n	800a016 <USBD_GetLen+0xe>
  }

  return len;
 800a02a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3714      	adds	r7, #20
 800a030:	46bd      	mov	sp, r7
 800a032:	bc80      	pop	{r7}
 800a034:	4770      	bx	lr

0800a036 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b084      	sub	sp, #16
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	60f8      	str	r0, [r7, #12]
 800a03e:	60b9      	str	r1, [r7, #8]
 800a040:	4613      	mov	r3, r2
 800a042:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2202      	movs	r2, #2
 800a048:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a04c:	88fa      	ldrh	r2, [r7, #6]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a052:	88fa      	ldrh	r2, [r7, #6]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a058:	88fb      	ldrh	r3, [r7, #6]
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	2100      	movs	r1, #0
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f000 fce6 	bl	800aa30 <USBD_LL_Transmit>

  return USBD_OK;
 800a064:	2300      	movs	r3, #0
}
 800a066:	4618      	mov	r0, r3
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a06e:	b580      	push	{r7, lr}
 800a070:	b084      	sub	sp, #16
 800a072:	af00      	add	r7, sp, #0
 800a074:	60f8      	str	r0, [r7, #12]
 800a076:	60b9      	str	r1, [r7, #8]
 800a078:	4613      	mov	r3, r2
 800a07a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a07c:	88fb      	ldrh	r3, [r7, #6]
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	2100      	movs	r1, #0
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f000 fcd4 	bl	800aa30 <USBD_LL_Transmit>

  return USBD_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b084      	sub	sp, #16
 800a096:	af00      	add	r7, sp, #0
 800a098:	60f8      	str	r0, [r7, #12]
 800a09a:	60b9      	str	r1, [r7, #8]
 800a09c:	4613      	mov	r3, r2
 800a09e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2203      	movs	r2, #3
 800a0a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a0a8:	88fa      	ldrh	r2, [r7, #6]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a0b0:	88fa      	ldrh	r2, [r7, #6]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0b8:	88fb      	ldrh	r3, [r7, #6]
 800a0ba:	68ba      	ldr	r2, [r7, #8]
 800a0bc:	2100      	movs	r1, #0
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f000 fcd9 	bl	800aa76 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b084      	sub	sp, #16
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	60f8      	str	r0, [r7, #12]
 800a0d6:	60b9      	str	r1, [r7, #8]
 800a0d8:	4613      	mov	r3, r2
 800a0da:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0dc:	88fb      	ldrh	r3, [r7, #6]
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	2100      	movs	r1, #0
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	f000 fcc7 	bl	800aa76 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a0f2:	b580      	push	{r7, lr}
 800a0f4:	b082      	sub	sp, #8
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2204      	movs	r2, #4
 800a0fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a102:	2300      	movs	r3, #0
 800a104:	2200      	movs	r2, #0
 800a106:	2100      	movs	r1, #0
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 fc91 	bl	800aa30 <USBD_LL_Transmit>

  return USBD_OK;
 800a10e:	2300      	movs	r3, #0
}
 800a110:	4618      	mov	r0, r3
 800a112:	3708      	adds	r7, #8
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2205      	movs	r2, #5
 800a124:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a128:	2300      	movs	r3, #0
 800a12a:	2200      	movs	r2, #0
 800a12c:	2100      	movs	r1, #0
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fca1 	bl	800aa76 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3708      	adds	r7, #8
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
	...

0800a140 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a144:	2200      	movs	r2, #0
 800a146:	4912      	ldr	r1, [pc, #72]	; (800a190 <MX_USB_DEVICE_Init+0x50>)
 800a148:	4812      	ldr	r0, [pc, #72]	; (800a194 <MX_USB_DEVICE_Init+0x54>)
 800a14a:	f7fe ff26 	bl	8008f9a <USBD_Init>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d001      	beq.n	800a158 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a154:	f7f8 fa79 	bl	800264a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a158:	490f      	ldr	r1, [pc, #60]	; (800a198 <MX_USB_DEVICE_Init+0x58>)
 800a15a:	480e      	ldr	r0, [pc, #56]	; (800a194 <MX_USB_DEVICE_Init+0x54>)
 800a15c:	f7fe ff48 	bl	8008ff0 <USBD_RegisterClass>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d001      	beq.n	800a16a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a166:	f7f8 fa70 	bl	800264a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a16a:	490c      	ldr	r1, [pc, #48]	; (800a19c <MX_USB_DEVICE_Init+0x5c>)
 800a16c:	4809      	ldr	r0, [pc, #36]	; (800a194 <MX_USB_DEVICE_Init+0x54>)
 800a16e:	f7fe fe79 	bl	8008e64 <USBD_CDC_RegisterInterface>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d001      	beq.n	800a17c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a178:	f7f8 fa67 	bl	800264a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a17c:	4805      	ldr	r0, [pc, #20]	; (800a194 <MX_USB_DEVICE_Init+0x54>)
 800a17e:	f7fe ff50 	bl	8009022 <USBD_Start>
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d001      	beq.n	800a18c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a188:	f7f8 fa5f 	bl	800264a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a18c:	bf00      	nop
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	20000160 	.word	0x20000160
 800a194:	200005f8 	.word	0x200005f8
 800a198:	2000004c 	.word	0x2000004c
 800a19c:	20000150 	.word	0x20000150

0800a1a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	4905      	ldr	r1, [pc, #20]	; (800a1bc <CDC_Init_FS+0x1c>)
 800a1a8:	4805      	ldr	r0, [pc, #20]	; (800a1c0 <CDC_Init_FS+0x20>)
 800a1aa:	f7fe fe71 	bl	8008e90 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a1ae:	4905      	ldr	r1, [pc, #20]	; (800a1c4 <CDC_Init_FS+0x24>)
 800a1b0:	4803      	ldr	r0, [pc, #12]	; (800a1c0 <CDC_Init_FS+0x20>)
 800a1b2:	f7fe fe86 	bl	8008ec2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a1b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	20000cbc 	.word	0x20000cbc
 800a1c0:	200005f8 	.word	0x200005f8
 800a1c4:	200008bc 	.word	0x200008bc

0800a1c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a1cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	bc80      	pop	{r7}
 800a1d4:	4770      	bx	lr
	...

0800a1d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	4603      	mov	r3, r0
 800a1e0:	6039      	str	r1, [r7, #0]
 800a1e2:	71fb      	strb	r3, [r7, #7]
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a1e8:	79fb      	ldrb	r3, [r7, #7]
 800a1ea:	2b23      	cmp	r3, #35	; 0x23
 800a1ec:	d84a      	bhi.n	800a284 <CDC_Control_FS+0xac>
 800a1ee:	a201      	add	r2, pc, #4	; (adr r2, 800a1f4 <CDC_Control_FS+0x1c>)
 800a1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f4:	0800a285 	.word	0x0800a285
 800a1f8:	0800a285 	.word	0x0800a285
 800a1fc:	0800a285 	.word	0x0800a285
 800a200:	0800a285 	.word	0x0800a285
 800a204:	0800a285 	.word	0x0800a285
 800a208:	0800a285 	.word	0x0800a285
 800a20c:	0800a285 	.word	0x0800a285
 800a210:	0800a285 	.word	0x0800a285
 800a214:	0800a285 	.word	0x0800a285
 800a218:	0800a285 	.word	0x0800a285
 800a21c:	0800a285 	.word	0x0800a285
 800a220:	0800a285 	.word	0x0800a285
 800a224:	0800a285 	.word	0x0800a285
 800a228:	0800a285 	.word	0x0800a285
 800a22c:	0800a285 	.word	0x0800a285
 800a230:	0800a285 	.word	0x0800a285
 800a234:	0800a285 	.word	0x0800a285
 800a238:	0800a285 	.word	0x0800a285
 800a23c:	0800a285 	.word	0x0800a285
 800a240:	0800a285 	.word	0x0800a285
 800a244:	0800a285 	.word	0x0800a285
 800a248:	0800a285 	.word	0x0800a285
 800a24c:	0800a285 	.word	0x0800a285
 800a250:	0800a285 	.word	0x0800a285
 800a254:	0800a285 	.word	0x0800a285
 800a258:	0800a285 	.word	0x0800a285
 800a25c:	0800a285 	.word	0x0800a285
 800a260:	0800a285 	.word	0x0800a285
 800a264:	0800a285 	.word	0x0800a285
 800a268:	0800a285 	.word	0x0800a285
 800a26c:	0800a285 	.word	0x0800a285
 800a270:	0800a285 	.word	0x0800a285
 800a274:	0800a285 	.word	0x0800a285
 800a278:	0800a285 	.word	0x0800a285
 800a27c:	0800a285 	.word	0x0800a285
 800a280:	0800a285 	.word	0x0800a285
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a284:	bf00      	nop
  }

  return (USBD_OK);
 800a286:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a288:	4618      	mov	r0, r3
 800a28a:	370c      	adds	r7, #12
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bc80      	pop	{r7}
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop

0800a294 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a29e:	6879      	ldr	r1, [r7, #4]
 800a2a0:	4805      	ldr	r0, [pc, #20]	; (800a2b8 <CDC_Receive_FS+0x24>)
 800a2a2:	f7fe fe0e 	bl	8008ec2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a2a6:	4804      	ldr	r0, [pc, #16]	; (800a2b8 <CDC_Receive_FS+0x24>)
 800a2a8:	f7fe fe4d 	bl	8008f46 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a2ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3708      	adds	r7, #8
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	200005f8 	.word	0x200005f8

0800a2bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a2cc:	4b0d      	ldr	r3, [pc, #52]	; (800a304 <CDC_Transmit_FS+0x48>)
 800a2ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d001      	beq.n	800a2e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e00b      	b.n	800a2fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a2e2:	887b      	ldrh	r3, [r7, #2]
 800a2e4:	461a      	mov	r2, r3
 800a2e6:	6879      	ldr	r1, [r7, #4]
 800a2e8:	4806      	ldr	r0, [pc, #24]	; (800a304 <CDC_Transmit_FS+0x48>)
 800a2ea:	f7fe fdd1 	bl	8008e90 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a2ee:	4805      	ldr	r0, [pc, #20]	; (800a304 <CDC_Transmit_FS+0x48>)
 800a2f0:	f7fe fdfa 	bl	8008ee8 <USBD_CDC_TransmitPacket>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	200005f8 	.word	0x200005f8

0800a308 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	4603      	mov	r3, r0
 800a310:	6039      	str	r1, [r7, #0]
 800a312:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	2212      	movs	r2, #18
 800a318:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a31a:	4b03      	ldr	r3, [pc, #12]	; (800a328 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	bc80      	pop	{r7}
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	2000017c 	.word	0x2000017c

0800a32c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
 800a332:	4603      	mov	r3, r0
 800a334:	6039      	str	r1, [r7, #0]
 800a336:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	2204      	movs	r2, #4
 800a33c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a33e:	4b03      	ldr	r3, [pc, #12]	; (800a34c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a340:	4618      	mov	r0, r3
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	bc80      	pop	{r7}
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	20000190 	.word	0x20000190

0800a350 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	4603      	mov	r3, r0
 800a358:	6039      	str	r1, [r7, #0]
 800a35a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a35c:	79fb      	ldrb	r3, [r7, #7]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d105      	bne.n	800a36e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a362:	683a      	ldr	r2, [r7, #0]
 800a364:	4907      	ldr	r1, [pc, #28]	; (800a384 <USBD_FS_ProductStrDescriptor+0x34>)
 800a366:	4808      	ldr	r0, [pc, #32]	; (800a388 <USBD_FS_ProductStrDescriptor+0x38>)
 800a368:	f7ff fe0c 	bl	8009f84 <USBD_GetString>
 800a36c:	e004      	b.n	800a378 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	4904      	ldr	r1, [pc, #16]	; (800a384 <USBD_FS_ProductStrDescriptor+0x34>)
 800a372:	4805      	ldr	r0, [pc, #20]	; (800a388 <USBD_FS_ProductStrDescriptor+0x38>)
 800a374:	f7ff fe06 	bl	8009f84 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a378:	4b02      	ldr	r3, [pc, #8]	; (800a384 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	200010bc 	.word	0x200010bc
 800a388:	0800d894 	.word	0x0800d894

0800a38c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	4603      	mov	r3, r0
 800a394:	6039      	str	r1, [r7, #0]
 800a396:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a398:	683a      	ldr	r2, [r7, #0]
 800a39a:	4904      	ldr	r1, [pc, #16]	; (800a3ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a39c:	4804      	ldr	r0, [pc, #16]	; (800a3b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a39e:	f7ff fdf1 	bl	8009f84 <USBD_GetString>
  return USBD_StrDesc;
 800a3a2:	4b02      	ldr	r3, [pc, #8]	; (800a3ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3708      	adds	r7, #8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	200010bc 	.word	0x200010bc
 800a3b0:	0800d8ac 	.word	0x0800d8ac

0800a3b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	6039      	str	r1, [r7, #0]
 800a3be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	221a      	movs	r2, #26
 800a3c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a3c6:	f000 f843 	bl	800a450 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a3ca:	4b02      	ldr	r3, [pc, #8]	; (800a3d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	20000194 	.word	0x20000194

0800a3d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b082      	sub	sp, #8
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	4603      	mov	r3, r0
 800a3e0:	6039      	str	r1, [r7, #0]
 800a3e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a3e4:	79fb      	ldrb	r3, [r7, #7]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d105      	bne.n	800a3f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a3ea:	683a      	ldr	r2, [r7, #0]
 800a3ec:	4907      	ldr	r1, [pc, #28]	; (800a40c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a3ee:	4808      	ldr	r0, [pc, #32]	; (800a410 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a3f0:	f7ff fdc8 	bl	8009f84 <USBD_GetString>
 800a3f4:	e004      	b.n	800a400 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	4904      	ldr	r1, [pc, #16]	; (800a40c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a3fa:	4805      	ldr	r0, [pc, #20]	; (800a410 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a3fc:	f7ff fdc2 	bl	8009f84 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a400:	4b02      	ldr	r3, [pc, #8]	; (800a40c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a402:	4618      	mov	r0, r3
 800a404:	3708      	adds	r7, #8
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	200010bc 	.word	0x200010bc
 800a410:	0800d8c0 	.word	0x0800d8c0

0800a414 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	4603      	mov	r3, r0
 800a41c:	6039      	str	r1, [r7, #0]
 800a41e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a420:	79fb      	ldrb	r3, [r7, #7]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d105      	bne.n	800a432 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a426:	683a      	ldr	r2, [r7, #0]
 800a428:	4907      	ldr	r1, [pc, #28]	; (800a448 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a42a:	4808      	ldr	r0, [pc, #32]	; (800a44c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a42c:	f7ff fdaa 	bl	8009f84 <USBD_GetString>
 800a430:	e004      	b.n	800a43c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a432:	683a      	ldr	r2, [r7, #0]
 800a434:	4904      	ldr	r1, [pc, #16]	; (800a448 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a436:	4805      	ldr	r0, [pc, #20]	; (800a44c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a438:	f7ff fda4 	bl	8009f84 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a43c:	4b02      	ldr	r3, [pc, #8]	; (800a448 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3708      	adds	r7, #8
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
 800a446:	bf00      	nop
 800a448:	200010bc 	.word	0x200010bc
 800a44c:	0800d8cc 	.word	0x0800d8cc

0800a450 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b084      	sub	sp, #16
 800a454:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a456:	4b0f      	ldr	r3, [pc, #60]	; (800a494 <Get_SerialNum+0x44>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a45c:	4b0e      	ldr	r3, [pc, #56]	; (800a498 <Get_SerialNum+0x48>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a462:	4b0e      	ldr	r3, [pc, #56]	; (800a49c <Get_SerialNum+0x4c>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4413      	add	r3, r2
 800a46e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d009      	beq.n	800a48a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a476:	2208      	movs	r2, #8
 800a478:	4909      	ldr	r1, [pc, #36]	; (800a4a0 <Get_SerialNum+0x50>)
 800a47a:	68f8      	ldr	r0, [r7, #12]
 800a47c:	f000 f814 	bl	800a4a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a480:	2204      	movs	r2, #4
 800a482:	4908      	ldr	r1, [pc, #32]	; (800a4a4 <Get_SerialNum+0x54>)
 800a484:	68b8      	ldr	r0, [r7, #8]
 800a486:	f000 f80f 	bl	800a4a8 <IntToUnicode>
  }
}
 800a48a:	bf00      	nop
 800a48c:	3710      	adds	r7, #16
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	1fff7a10 	.word	0x1fff7a10
 800a498:	1fff7a14 	.word	0x1fff7a14
 800a49c:	1fff7a18 	.word	0x1fff7a18
 800a4a0:	20000196 	.word	0x20000196
 800a4a4:	200001a6 	.word	0x200001a6

0800a4a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b087      	sub	sp, #28
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	75fb      	strb	r3, [r7, #23]
 800a4be:	e027      	b.n	800a510 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	0f1b      	lsrs	r3, r3, #28
 800a4c4:	2b09      	cmp	r3, #9
 800a4c6:	d80b      	bhi.n	800a4e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	0f1b      	lsrs	r3, r3, #28
 800a4cc:	b2da      	uxtb	r2, r3
 800a4ce:	7dfb      	ldrb	r3, [r7, #23]
 800a4d0:	005b      	lsls	r3, r3, #1
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	440b      	add	r3, r1
 800a4d8:	3230      	adds	r2, #48	; 0x30
 800a4da:	b2d2      	uxtb	r2, r2
 800a4dc:	701a      	strb	r2, [r3, #0]
 800a4de:	e00a      	b.n	800a4f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	0f1b      	lsrs	r3, r3, #28
 800a4e4:	b2da      	uxtb	r2, r3
 800a4e6:	7dfb      	ldrb	r3, [r7, #23]
 800a4e8:	005b      	lsls	r3, r3, #1
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	440b      	add	r3, r1
 800a4f0:	3237      	adds	r2, #55	; 0x37
 800a4f2:	b2d2      	uxtb	r2, r2
 800a4f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	011b      	lsls	r3, r3, #4
 800a4fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a4fc:	7dfb      	ldrb	r3, [r7, #23]
 800a4fe:	005b      	lsls	r3, r3, #1
 800a500:	3301      	adds	r3, #1
 800a502:	68ba      	ldr	r2, [r7, #8]
 800a504:	4413      	add	r3, r2
 800a506:	2200      	movs	r2, #0
 800a508:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a50a:	7dfb      	ldrb	r3, [r7, #23]
 800a50c:	3301      	adds	r3, #1
 800a50e:	75fb      	strb	r3, [r7, #23]
 800a510:	7dfa      	ldrb	r2, [r7, #23]
 800a512:	79fb      	ldrb	r3, [r7, #7]
 800a514:	429a      	cmp	r2, r3
 800a516:	d3d3      	bcc.n	800a4c0 <IntToUnicode+0x18>
  }
}
 800a518:	bf00      	nop
 800a51a:	bf00      	nop
 800a51c:	371c      	adds	r7, #28
 800a51e:	46bd      	mov	sp, r7
 800a520:	bc80      	pop	{r7}
 800a522:	4770      	bx	lr

0800a524 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b08a      	sub	sp, #40	; 0x28
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a52c:	f107 0314 	add.w	r3, r7, #20
 800a530:	2200      	movs	r2, #0
 800a532:	601a      	str	r2, [r3, #0]
 800a534:	605a      	str	r2, [r3, #4]
 800a536:	609a      	str	r2, [r3, #8]
 800a538:	60da      	str	r2, [r3, #12]
 800a53a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a544:	d147      	bne.n	800a5d6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a546:	2300      	movs	r3, #0
 800a548:	613b      	str	r3, [r7, #16]
 800a54a:	4b25      	ldr	r3, [pc, #148]	; (800a5e0 <HAL_PCD_MspInit+0xbc>)
 800a54c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a54e:	4a24      	ldr	r2, [pc, #144]	; (800a5e0 <HAL_PCD_MspInit+0xbc>)
 800a550:	f043 0301 	orr.w	r3, r3, #1
 800a554:	6313      	str	r3, [r2, #48]	; 0x30
 800a556:	4b22      	ldr	r3, [pc, #136]	; (800a5e0 <HAL_PCD_MspInit+0xbc>)
 800a558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a55a:	f003 0301 	and.w	r3, r3, #1
 800a55e:	613b      	str	r3, [r7, #16]
 800a560:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a562:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a568:	2300      	movs	r3, #0
 800a56a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a56c:	2300      	movs	r3, #0
 800a56e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a570:	f107 0314 	add.w	r3, r7, #20
 800a574:	4619      	mov	r1, r3
 800a576:	481b      	ldr	r0, [pc, #108]	; (800a5e4 <HAL_PCD_MspInit+0xc0>)
 800a578:	f7f9 fd2e 	bl	8003fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a57c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a582:	2302      	movs	r3, #2
 800a584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a586:	2300      	movs	r3, #0
 800a588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a58a:	2303      	movs	r3, #3
 800a58c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a58e:	230a      	movs	r3, #10
 800a590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a592:	f107 0314 	add.w	r3, r7, #20
 800a596:	4619      	mov	r1, r3
 800a598:	4812      	ldr	r0, [pc, #72]	; (800a5e4 <HAL_PCD_MspInit+0xc0>)
 800a59a:	f7f9 fd1d 	bl	8003fd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a59e:	4b10      	ldr	r3, [pc, #64]	; (800a5e0 <HAL_PCD_MspInit+0xbc>)
 800a5a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5a2:	4a0f      	ldr	r2, [pc, #60]	; (800a5e0 <HAL_PCD_MspInit+0xbc>)
 800a5a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5a8:	6353      	str	r3, [r2, #52]	; 0x34
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	60fb      	str	r3, [r7, #12]
 800a5ae:	4b0c      	ldr	r3, [pc, #48]	; (800a5e0 <HAL_PCD_MspInit+0xbc>)
 800a5b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5b2:	4a0b      	ldr	r2, [pc, #44]	; (800a5e0 <HAL_PCD_MspInit+0xbc>)
 800a5b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a5b8:	6453      	str	r3, [r2, #68]	; 0x44
 800a5ba:	4b09      	ldr	r3, [pc, #36]	; (800a5e0 <HAL_PCD_MspInit+0xbc>)
 800a5bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5c2:	60fb      	str	r3, [r7, #12]
 800a5c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	2043      	movs	r0, #67	; 0x43
 800a5cc:	f7f9 fccd 	bl	8003f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a5d0:	2043      	movs	r0, #67	; 0x43
 800a5d2:	f7f9 fce6 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a5d6:	bf00      	nop
 800a5d8:	3728      	adds	r7, #40	; 0x28
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	40023800 	.word	0x40023800
 800a5e4:	40020000 	.word	0x40020000

0800a5e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	4610      	mov	r0, r2
 800a600:	f7fe fd57 	bl	80090b2 <USBD_LL_SetupStage>
}
 800a604:	bf00      	nop
 800a606:	3708      	adds	r7, #8
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	460b      	mov	r3, r1
 800a616:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 800a61e:	78fa      	ldrb	r2, [r7, #3]
 800a620:	6879      	ldr	r1, [r7, #4]
 800a622:	4613      	mov	r3, r2
 800a624:	00db      	lsls	r3, r3, #3
 800a626:	4413      	add	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	440b      	add	r3, r1
 800a62c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	78fb      	ldrb	r3, [r7, #3]
 800a634:	4619      	mov	r1, r3
 800a636:	f7fe fd89 	bl	800914c <USBD_LL_DataOutStage>
}
 800a63a:	bf00      	nop
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b082      	sub	sp, #8
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
 800a64a:	460b      	mov	r3, r1
 800a64c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 800a654:	78fa      	ldrb	r2, [r7, #3]
 800a656:	6879      	ldr	r1, [r7, #4]
 800a658:	4613      	mov	r3, r2
 800a65a:	00db      	lsls	r3, r3, #3
 800a65c:	4413      	add	r3, r2
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	440b      	add	r3, r1
 800a662:	3348      	adds	r3, #72	; 0x48
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	78fb      	ldrb	r3, [r7, #3]
 800a668:	4619      	mov	r1, r3
 800a66a:	f7fe fde0 	bl	800922e <USBD_LL_DataInStage>
}
 800a66e:	bf00      	nop
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b082      	sub	sp, #8
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800a684:	4618      	mov	r0, r3
 800a686:	f7fe fef0 	bl	800946a <USBD_LL_SOF>
}
 800a68a:	bf00      	nop
 800a68c:	3708      	adds	r7, #8
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a692:	b580      	push	{r7, lr}
 800a694:	b084      	sub	sp, #16
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a69a:	2301      	movs	r3, #1
 800a69c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	691b      	ldr	r3, [r3, #16]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d102      	bne.n	800a6ac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	73fb      	strb	r3, [r7, #15]
 800a6aa:	e008      	b.n	800a6be <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	691b      	ldr	r3, [r3, #16]
 800a6b0:	2b02      	cmp	r3, #2
 800a6b2:	d102      	bne.n	800a6ba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	73fb      	strb	r3, [r7, #15]
 800a6b8:	e001      	b.n	800a6be <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a6ba:	f7f7 ffc6 	bl	800264a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800a6c4:	7bfa      	ldrb	r2, [r7, #15]
 800a6c6:	4611      	mov	r1, r2
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7fe fe96 	bl	80093fa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f7fe fe4f 	bl	8009378 <USBD_LL_Reset>
}
 800a6da:	bf00      	nop
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
	...

0800a6e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7fe fe90 	bl	8009418 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	6812      	ldr	r2, [r2, #0]
 800a706:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a70a:	f043 0301 	orr.w	r3, r3, #1
 800a70e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6a1b      	ldr	r3, [r3, #32]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d005      	beq.n	800a724 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a718:	4b04      	ldr	r3, [pc, #16]	; (800a72c <HAL_PCD_SuspendCallback+0x48>)
 800a71a:	691b      	ldr	r3, [r3, #16]
 800a71c:	4a03      	ldr	r2, [pc, #12]	; (800a72c <HAL_PCD_SuspendCallback+0x48>)
 800a71e:	f043 0306 	orr.w	r3, r3, #6
 800a722:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a724:	bf00      	nop
 800a726:	3708      	adds	r7, #8
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	e000ed00 	.word	0xe000ed00

0800a730 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800a73e:	4618      	mov	r0, r3
 800a740:	f7fe fe7e 	bl	8009440 <USBD_LL_Resume>
}
 800a744:	bf00      	nop
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b082      	sub	sp, #8
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	460b      	mov	r3, r1
 800a756:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800a75e:	78fa      	ldrb	r2, [r7, #3]
 800a760:	4611      	mov	r1, r2
 800a762:	4618      	mov	r0, r3
 800a764:	f7fe fea7 	bl	80094b6 <USBD_LL_IsoOUTIncomplete>
}
 800a768:	bf00      	nop
 800a76a:	3708      	adds	r7, #8
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	460b      	mov	r3, r1
 800a77a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800a782:	78fa      	ldrb	r2, [r7, #3]
 800a784:	4611      	mov	r1, r2
 800a786:	4618      	mov	r0, r3
 800a788:	f7fe fe89 	bl	800949e <USBD_LL_IsoINIncomplete>
}
 800a78c:	bf00      	nop
 800a78e:	3708      	adds	r7, #8
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7fe fe93 	bl	80094ce <USBD_LL_DevConnected>
}
 800a7a8:	bf00      	nop
 800a7aa:	3708      	adds	r7, #8
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7fe fe8f 	bl	80094e2 <USBD_LL_DevDisconnected>
}
 800a7c4:	bf00      	nop
 800a7c6:	3708      	adds	r7, #8
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d139      	bne.n	800a850 <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a7dc:	4a1f      	ldr	r2, [pc, #124]	; (800a85c <USBD_LL_Init+0x90>)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
  pdev->pData = &hpcd_USB_OTG_FS;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4a1d      	ldr	r2, [pc, #116]	; (800a85c <USBD_LL_Init+0x90>)
 800a7e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a7ec:	4b1b      	ldr	r3, [pc, #108]	; (800a85c <USBD_LL_Init+0x90>)
 800a7ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a7f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a7f4:	4b19      	ldr	r3, [pc, #100]	; (800a85c <USBD_LL_Init+0x90>)
 800a7f6:	2204      	movs	r2, #4
 800a7f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a7fa:	4b18      	ldr	r3, [pc, #96]	; (800a85c <USBD_LL_Init+0x90>)
 800a7fc:	2202      	movs	r2, #2
 800a7fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a800:	4b16      	ldr	r3, [pc, #88]	; (800a85c <USBD_LL_Init+0x90>)
 800a802:	2200      	movs	r2, #0
 800a804:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a806:	4b15      	ldr	r3, [pc, #84]	; (800a85c <USBD_LL_Init+0x90>)
 800a808:	2202      	movs	r2, #2
 800a80a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a80c:	4b13      	ldr	r3, [pc, #76]	; (800a85c <USBD_LL_Init+0x90>)
 800a80e:	2200      	movs	r2, #0
 800a810:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a812:	4b12      	ldr	r3, [pc, #72]	; (800a85c <USBD_LL_Init+0x90>)
 800a814:	2200      	movs	r2, #0
 800a816:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a818:	4b10      	ldr	r3, [pc, #64]	; (800a85c <USBD_LL_Init+0x90>)
 800a81a:	2201      	movs	r2, #1
 800a81c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a81e:	4b0f      	ldr	r3, [pc, #60]	; (800a85c <USBD_LL_Init+0x90>)
 800a820:	2200      	movs	r2, #0
 800a822:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a824:	480d      	ldr	r0, [pc, #52]	; (800a85c <USBD_LL_Init+0x90>)
 800a826:	f7f9 fda6 	bl	8004376 <HAL_PCD_Init>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d001      	beq.n	800a834 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800a830:	f7f7 ff0b 	bl	800264a <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a834:	2180      	movs	r1, #128	; 0x80
 800a836:	4809      	ldr	r0, [pc, #36]	; (800a85c <USBD_LL_Init+0x90>)
 800a838:	f7fa ffbe 	bl	80057b8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a83c:	2240      	movs	r2, #64	; 0x40
 800a83e:	2100      	movs	r1, #0
 800a840:	4806      	ldr	r0, [pc, #24]	; (800a85c <USBD_LL_Init+0x90>)
 800a842:	f7fa ff73 	bl	800572c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a846:	2280      	movs	r2, #128	; 0x80
 800a848:	2101      	movs	r1, #1
 800a84a:	4804      	ldr	r0, [pc, #16]	; (800a85c <USBD_LL_Init+0x90>)
 800a84c:	f7fa ff6e 	bl	800572c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	3708      	adds	r7, #8
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
 800a85a:	bf00      	nop
 800a85c:	200012bc 	.word	0x200012bc

0800a860 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a868:	2300      	movs	r3, #0
 800a86a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a86c:	2300      	movs	r3, #0
 800a86e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a876:	4618      	mov	r0, r3
 800a878:	f7f9 fe9a 	bl	80045b0 <HAL_PCD_Start>
 800a87c:	4603      	mov	r3, r0
 800a87e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a880:	7bfb      	ldrb	r3, [r7, #15]
 800a882:	4618      	mov	r0, r3
 800a884:	f000 f92e 	bl	800aae4 <USBD_Get_USB_Status>
 800a888:	4603      	mov	r3, r0
 800a88a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a88c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3710      	adds	r7, #16
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b084      	sub	sp, #16
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
 800a89e:	4608      	mov	r0, r1
 800a8a0:	4611      	mov	r1, r2
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	70fb      	strb	r3, [r7, #3]
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	70bb      	strb	r3, [r7, #2]
 800a8ac:	4613      	mov	r3, r2
 800a8ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a8be:	78bb      	ldrb	r3, [r7, #2]
 800a8c0:	883a      	ldrh	r2, [r7, #0]
 800a8c2:	78f9      	ldrb	r1, [r7, #3]
 800a8c4:	f7fa fb4c 	bl	8004f60 <HAL_PCD_EP_Open>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8cc:	7bfb      	ldrb	r3, [r7, #15]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f000 f908 	bl	800aae4 <USBD_Get_USB_Status>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b084      	sub	sp, #16
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a8fc:	78fa      	ldrb	r2, [r7, #3]
 800a8fe:	4611      	mov	r1, r2
 800a900:	4618      	mov	r0, r3
 800a902:	f7fa fb95 	bl	8005030 <HAL_PCD_EP_Close>
 800a906:	4603      	mov	r3, r0
 800a908:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a90a:	7bfb      	ldrb	r3, [r7, #15]
 800a90c:	4618      	mov	r0, r3
 800a90e:	f000 f8e9 	bl	800aae4 <USBD_Get_USB_Status>
 800a912:	4603      	mov	r3, r0
 800a914:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a916:	7bbb      	ldrb	r3, [r7, #14]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	460b      	mov	r3, r1
 800a92a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a92c:	2300      	movs	r3, #0
 800a92e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a930:	2300      	movs	r3, #0
 800a932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a93a:	78fa      	ldrb	r2, [r7, #3]
 800a93c:	4611      	mov	r1, r2
 800a93e:	4618      	mov	r0, r3
 800a940:	f7fa fc4e 	bl	80051e0 <HAL_PCD_EP_SetStall>
 800a944:	4603      	mov	r3, r0
 800a946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a948:	7bfb      	ldrb	r3, [r7, #15]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f000 f8ca 	bl	800aae4 <USBD_Get_USB_Status>
 800a950:	4603      	mov	r3, r0
 800a952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a954:	7bbb      	ldrb	r3, [r7, #14]
}
 800a956:	4618      	mov	r0, r3
 800a958:	3710      	adds	r7, #16
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b084      	sub	sp, #16
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
 800a966:	460b      	mov	r3, r1
 800a968:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a96a:	2300      	movs	r3, #0
 800a96c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a96e:	2300      	movs	r3, #0
 800a970:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a978:	78fa      	ldrb	r2, [r7, #3]
 800a97a:	4611      	mov	r1, r2
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7fa fc93 	bl	80052a8 <HAL_PCD_EP_ClrStall>
 800a982:	4603      	mov	r3, r0
 800a984:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a986:	7bfb      	ldrb	r3, [r7, #15]
 800a988:	4618      	mov	r0, r3
 800a98a:	f000 f8ab 	bl	800aae4 <USBD_Get_USB_Status>
 800a98e:	4603      	mov	r3, r0
 800a990:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a992:	7bbb      	ldrb	r3, [r7, #14]
}
 800a994:	4618      	mov	r0, r3
 800a996:	3710      	adds	r7, #16
 800a998:	46bd      	mov	sp, r7
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a9b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	da0b      	bge.n	800a9d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a9b8:	78fb      	ldrb	r3, [r7, #3]
 800a9ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9be:	68f9      	ldr	r1, [r7, #12]
 800a9c0:	4613      	mov	r3, r2
 800a9c2:	00db      	lsls	r3, r3, #3
 800a9c4:	4413      	add	r3, r2
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	440b      	add	r3, r1
 800a9ca:	333e      	adds	r3, #62	; 0x3e
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	e00b      	b.n	800a9e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a9d0:	78fb      	ldrb	r3, [r7, #3]
 800a9d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9d6:	68f9      	ldr	r1, [r7, #12]
 800a9d8:	4613      	mov	r3, r2
 800a9da:	00db      	lsls	r3, r3, #3
 800a9dc:	4413      	add	r3, r2
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	440b      	add	r3, r1
 800a9e2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a9e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3714      	adds	r7, #20
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bc80      	pop	{r7}
 800a9f0:	4770      	bx	lr

0800a9f2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a9f2:	b580      	push	{r7, lr}
 800a9f4:	b084      	sub	sp, #16
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa02:	2300      	movs	r3, #0
 800aa04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa0c:	78fa      	ldrb	r2, [r7, #3]
 800aa0e:	4611      	mov	r1, r2
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7fa fa80 	bl	8004f16 <HAL_PCD_SetAddress>
 800aa16:	4603      	mov	r3, r0
 800aa18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa1a:	7bfb      	ldrb	r3, [r7, #15]
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f000 f861 	bl	800aae4 <USBD_Get_USB_Status>
 800aa22:	4603      	mov	r3, r0
 800aa24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa26:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b086      	sub	sp, #24
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	607a      	str	r2, [r7, #4]
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	72fb      	strb	r3, [r7, #11]
 800aa40:	4613      	mov	r3, r2
 800aa42:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa44:	2300      	movs	r3, #0
 800aa46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa48:	2300      	movs	r3, #0
 800aa4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa52:	893b      	ldrh	r3, [r7, #8]
 800aa54:	7af9      	ldrb	r1, [r7, #11]
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	f7fa fb87 	bl	800516a <HAL_PCD_EP_Transmit>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa60:	7dfb      	ldrb	r3, [r7, #23]
 800aa62:	4618      	mov	r0, r3
 800aa64:	f000 f83e 	bl	800aae4 <USBD_Get_USB_Status>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aa6c:	7dbb      	ldrb	r3, [r7, #22]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3718      	adds	r7, #24
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b086      	sub	sp, #24
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	60f8      	str	r0, [r7, #12]
 800aa7e:	607a      	str	r2, [r7, #4]
 800aa80:	461a      	mov	r2, r3
 800aa82:	460b      	mov	r3, r1
 800aa84:	72fb      	strb	r3, [r7, #11]
 800aa86:	4613      	mov	r3, r2
 800aa88:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa98:	893b      	ldrh	r3, [r7, #8]
 800aa9a:	7af9      	ldrb	r1, [r7, #11]
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	f7fa fb11 	bl	80050c4 <HAL_PCD_EP_Receive>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaa6:	7dfb      	ldrb	r3, [r7, #23]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f000 f81b 	bl	800aae4 <USBD_Get_USB_Status>
 800aaae:	4603      	mov	r3, r0
 800aab0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aab2:	7dbb      	ldrb	r3, [r7, #22]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3718      	adds	r7, #24
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	460b      	mov	r3, r1
 800aac6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aace:	78fa      	ldrb	r2, [r7, #3]
 800aad0:	4611      	mov	r1, r2
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7fa fb32 	bl	800513c <HAL_PCD_EP_GetRxCount>
 800aad8:	4603      	mov	r3, r0
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
	...

0800aae4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b085      	sub	sp, #20
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aaf2:	79fb      	ldrb	r3, [r7, #7]
 800aaf4:	2b03      	cmp	r3, #3
 800aaf6:	d817      	bhi.n	800ab28 <USBD_Get_USB_Status+0x44>
 800aaf8:	a201      	add	r2, pc, #4	; (adr r2, 800ab00 <USBD_Get_USB_Status+0x1c>)
 800aafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aafe:	bf00      	nop
 800ab00:	0800ab11 	.word	0x0800ab11
 800ab04:	0800ab17 	.word	0x0800ab17
 800ab08:	0800ab1d 	.word	0x0800ab1d
 800ab0c:	0800ab23 	.word	0x0800ab23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ab10:	2300      	movs	r3, #0
 800ab12:	73fb      	strb	r3, [r7, #15]
    break;
 800ab14:	e00b      	b.n	800ab2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab16:	2302      	movs	r3, #2
 800ab18:	73fb      	strb	r3, [r7, #15]
    break;
 800ab1a:	e008      	b.n	800ab2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	73fb      	strb	r3, [r7, #15]
    break;
 800ab20:	e005      	b.n	800ab2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ab22:	2302      	movs	r3, #2
 800ab24:	73fb      	strb	r3, [r7, #15]
    break;
 800ab26:	e002      	b.n	800ab2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ab28:	2302      	movs	r3, #2
 800ab2a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab2c:	bf00      	nop
  }
  return usb_status;
 800ab2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3714      	adds	r7, #20
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bc80      	pop	{r7}
 800ab38:	4770      	bx	lr
 800ab3a:	bf00      	nop

0800ab3c <malloc>:
 800ab3c:	4b02      	ldr	r3, [pc, #8]	; (800ab48 <malloc+0xc>)
 800ab3e:	4601      	mov	r1, r0
 800ab40:	6818      	ldr	r0, [r3, #0]
 800ab42:	f000 b82b 	b.w	800ab9c <_malloc_r>
 800ab46:	bf00      	nop
 800ab48:	20000208 	.word	0x20000208

0800ab4c <free>:
 800ab4c:	4b02      	ldr	r3, [pc, #8]	; (800ab58 <free+0xc>)
 800ab4e:	4601      	mov	r1, r0
 800ab50:	6818      	ldr	r0, [r3, #0]
 800ab52:	f001 bd1d 	b.w	800c590 <_free_r>
 800ab56:	bf00      	nop
 800ab58:	20000208 	.word	0x20000208

0800ab5c <sbrk_aligned>:
 800ab5c:	b570      	push	{r4, r5, r6, lr}
 800ab5e:	4e0e      	ldr	r6, [pc, #56]	; (800ab98 <sbrk_aligned+0x3c>)
 800ab60:	460c      	mov	r4, r1
 800ab62:	6831      	ldr	r1, [r6, #0]
 800ab64:	4605      	mov	r5, r0
 800ab66:	b911      	cbnz	r1, 800ab6e <sbrk_aligned+0x12>
 800ab68:	f000 fe48 	bl	800b7fc <_sbrk_r>
 800ab6c:	6030      	str	r0, [r6, #0]
 800ab6e:	4621      	mov	r1, r4
 800ab70:	4628      	mov	r0, r5
 800ab72:	f000 fe43 	bl	800b7fc <_sbrk_r>
 800ab76:	1c43      	adds	r3, r0, #1
 800ab78:	d00a      	beq.n	800ab90 <sbrk_aligned+0x34>
 800ab7a:	1cc4      	adds	r4, r0, #3
 800ab7c:	f024 0403 	bic.w	r4, r4, #3
 800ab80:	42a0      	cmp	r0, r4
 800ab82:	d007      	beq.n	800ab94 <sbrk_aligned+0x38>
 800ab84:	1a21      	subs	r1, r4, r0
 800ab86:	4628      	mov	r0, r5
 800ab88:	f000 fe38 	bl	800b7fc <_sbrk_r>
 800ab8c:	3001      	adds	r0, #1
 800ab8e:	d101      	bne.n	800ab94 <sbrk_aligned+0x38>
 800ab90:	f04f 34ff 	mov.w	r4, #4294967295
 800ab94:	4620      	mov	r0, r4
 800ab96:	bd70      	pop	{r4, r5, r6, pc}
 800ab98:	200017c4 	.word	0x200017c4

0800ab9c <_malloc_r>:
 800ab9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aba0:	1ccd      	adds	r5, r1, #3
 800aba2:	f025 0503 	bic.w	r5, r5, #3
 800aba6:	3508      	adds	r5, #8
 800aba8:	2d0c      	cmp	r5, #12
 800abaa:	bf38      	it	cc
 800abac:	250c      	movcc	r5, #12
 800abae:	2d00      	cmp	r5, #0
 800abb0:	4607      	mov	r7, r0
 800abb2:	db01      	blt.n	800abb8 <_malloc_r+0x1c>
 800abb4:	42a9      	cmp	r1, r5
 800abb6:	d905      	bls.n	800abc4 <_malloc_r+0x28>
 800abb8:	230c      	movs	r3, #12
 800abba:	2600      	movs	r6, #0
 800abbc:	603b      	str	r3, [r7, #0]
 800abbe:	4630      	mov	r0, r6
 800abc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abc4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ac98 <_malloc_r+0xfc>
 800abc8:	f000 f868 	bl	800ac9c <__malloc_lock>
 800abcc:	f8d8 3000 	ldr.w	r3, [r8]
 800abd0:	461c      	mov	r4, r3
 800abd2:	bb5c      	cbnz	r4, 800ac2c <_malloc_r+0x90>
 800abd4:	4629      	mov	r1, r5
 800abd6:	4638      	mov	r0, r7
 800abd8:	f7ff ffc0 	bl	800ab5c <sbrk_aligned>
 800abdc:	1c43      	adds	r3, r0, #1
 800abde:	4604      	mov	r4, r0
 800abe0:	d155      	bne.n	800ac8e <_malloc_r+0xf2>
 800abe2:	f8d8 4000 	ldr.w	r4, [r8]
 800abe6:	4626      	mov	r6, r4
 800abe8:	2e00      	cmp	r6, #0
 800abea:	d145      	bne.n	800ac78 <_malloc_r+0xdc>
 800abec:	2c00      	cmp	r4, #0
 800abee:	d048      	beq.n	800ac82 <_malloc_r+0xe6>
 800abf0:	6823      	ldr	r3, [r4, #0]
 800abf2:	4631      	mov	r1, r6
 800abf4:	4638      	mov	r0, r7
 800abf6:	eb04 0903 	add.w	r9, r4, r3
 800abfa:	f000 fdff 	bl	800b7fc <_sbrk_r>
 800abfe:	4581      	cmp	r9, r0
 800ac00:	d13f      	bne.n	800ac82 <_malloc_r+0xe6>
 800ac02:	6821      	ldr	r1, [r4, #0]
 800ac04:	4638      	mov	r0, r7
 800ac06:	1a6d      	subs	r5, r5, r1
 800ac08:	4629      	mov	r1, r5
 800ac0a:	f7ff ffa7 	bl	800ab5c <sbrk_aligned>
 800ac0e:	3001      	adds	r0, #1
 800ac10:	d037      	beq.n	800ac82 <_malloc_r+0xe6>
 800ac12:	6823      	ldr	r3, [r4, #0]
 800ac14:	442b      	add	r3, r5
 800ac16:	6023      	str	r3, [r4, #0]
 800ac18:	f8d8 3000 	ldr.w	r3, [r8]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d038      	beq.n	800ac92 <_malloc_r+0xf6>
 800ac20:	685a      	ldr	r2, [r3, #4]
 800ac22:	42a2      	cmp	r2, r4
 800ac24:	d12b      	bne.n	800ac7e <_malloc_r+0xe2>
 800ac26:	2200      	movs	r2, #0
 800ac28:	605a      	str	r2, [r3, #4]
 800ac2a:	e00f      	b.n	800ac4c <_malloc_r+0xb0>
 800ac2c:	6822      	ldr	r2, [r4, #0]
 800ac2e:	1b52      	subs	r2, r2, r5
 800ac30:	d41f      	bmi.n	800ac72 <_malloc_r+0xd6>
 800ac32:	2a0b      	cmp	r2, #11
 800ac34:	d917      	bls.n	800ac66 <_malloc_r+0xca>
 800ac36:	1961      	adds	r1, r4, r5
 800ac38:	42a3      	cmp	r3, r4
 800ac3a:	6025      	str	r5, [r4, #0]
 800ac3c:	bf18      	it	ne
 800ac3e:	6059      	strne	r1, [r3, #4]
 800ac40:	6863      	ldr	r3, [r4, #4]
 800ac42:	bf08      	it	eq
 800ac44:	f8c8 1000 	streq.w	r1, [r8]
 800ac48:	5162      	str	r2, [r4, r5]
 800ac4a:	604b      	str	r3, [r1, #4]
 800ac4c:	4638      	mov	r0, r7
 800ac4e:	f104 060b 	add.w	r6, r4, #11
 800ac52:	f000 f829 	bl	800aca8 <__malloc_unlock>
 800ac56:	f026 0607 	bic.w	r6, r6, #7
 800ac5a:	1d23      	adds	r3, r4, #4
 800ac5c:	1af2      	subs	r2, r6, r3
 800ac5e:	d0ae      	beq.n	800abbe <_malloc_r+0x22>
 800ac60:	1b9b      	subs	r3, r3, r6
 800ac62:	50a3      	str	r3, [r4, r2]
 800ac64:	e7ab      	b.n	800abbe <_malloc_r+0x22>
 800ac66:	42a3      	cmp	r3, r4
 800ac68:	6862      	ldr	r2, [r4, #4]
 800ac6a:	d1dd      	bne.n	800ac28 <_malloc_r+0x8c>
 800ac6c:	f8c8 2000 	str.w	r2, [r8]
 800ac70:	e7ec      	b.n	800ac4c <_malloc_r+0xb0>
 800ac72:	4623      	mov	r3, r4
 800ac74:	6864      	ldr	r4, [r4, #4]
 800ac76:	e7ac      	b.n	800abd2 <_malloc_r+0x36>
 800ac78:	4634      	mov	r4, r6
 800ac7a:	6876      	ldr	r6, [r6, #4]
 800ac7c:	e7b4      	b.n	800abe8 <_malloc_r+0x4c>
 800ac7e:	4613      	mov	r3, r2
 800ac80:	e7cc      	b.n	800ac1c <_malloc_r+0x80>
 800ac82:	230c      	movs	r3, #12
 800ac84:	4638      	mov	r0, r7
 800ac86:	603b      	str	r3, [r7, #0]
 800ac88:	f000 f80e 	bl	800aca8 <__malloc_unlock>
 800ac8c:	e797      	b.n	800abbe <_malloc_r+0x22>
 800ac8e:	6025      	str	r5, [r4, #0]
 800ac90:	e7dc      	b.n	800ac4c <_malloc_r+0xb0>
 800ac92:	605b      	str	r3, [r3, #4]
 800ac94:	deff      	udf	#255	; 0xff
 800ac96:	bf00      	nop
 800ac98:	200017c0 	.word	0x200017c0

0800ac9c <__malloc_lock>:
 800ac9c:	4801      	ldr	r0, [pc, #4]	; (800aca4 <__malloc_lock+0x8>)
 800ac9e:	f000 bdfa 	b.w	800b896 <__retarget_lock_acquire_recursive>
 800aca2:	bf00      	nop
 800aca4:	20001908 	.word	0x20001908

0800aca8 <__malloc_unlock>:
 800aca8:	4801      	ldr	r0, [pc, #4]	; (800acb0 <__malloc_unlock+0x8>)
 800acaa:	f000 bdf5 	b.w	800b898 <__retarget_lock_release_recursive>
 800acae:	bf00      	nop
 800acb0:	20001908 	.word	0x20001908

0800acb4 <__cvt>:
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acba:	461f      	mov	r7, r3
 800acbc:	bfbb      	ittet	lt
 800acbe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800acc2:	461f      	movlt	r7, r3
 800acc4:	2300      	movge	r3, #0
 800acc6:	232d      	movlt	r3, #45	; 0x2d
 800acc8:	b088      	sub	sp, #32
 800acca:	4614      	mov	r4, r2
 800accc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800acce:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800acd0:	7013      	strb	r3, [r2, #0]
 800acd2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800acd4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800acd8:	f023 0820 	bic.w	r8, r3, #32
 800acdc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ace0:	d005      	beq.n	800acee <__cvt+0x3a>
 800ace2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ace6:	d100      	bne.n	800acea <__cvt+0x36>
 800ace8:	3501      	adds	r5, #1
 800acea:	2302      	movs	r3, #2
 800acec:	e000      	b.n	800acf0 <__cvt+0x3c>
 800acee:	2303      	movs	r3, #3
 800acf0:	aa07      	add	r2, sp, #28
 800acf2:	9204      	str	r2, [sp, #16]
 800acf4:	aa06      	add	r2, sp, #24
 800acf6:	e9cd a202 	strd	sl, r2, [sp, #8]
 800acfa:	e9cd 3500 	strd	r3, r5, [sp]
 800acfe:	4622      	mov	r2, r4
 800ad00:	463b      	mov	r3, r7
 800ad02:	f000 fe61 	bl	800b9c8 <_dtoa_r>
 800ad06:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ad0a:	4606      	mov	r6, r0
 800ad0c:	d102      	bne.n	800ad14 <__cvt+0x60>
 800ad0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad10:	07db      	lsls	r3, r3, #31
 800ad12:	d522      	bpl.n	800ad5a <__cvt+0xa6>
 800ad14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ad18:	eb06 0905 	add.w	r9, r6, r5
 800ad1c:	d110      	bne.n	800ad40 <__cvt+0x8c>
 800ad1e:	7833      	ldrb	r3, [r6, #0]
 800ad20:	2b30      	cmp	r3, #48	; 0x30
 800ad22:	d10a      	bne.n	800ad3a <__cvt+0x86>
 800ad24:	2200      	movs	r2, #0
 800ad26:	2300      	movs	r3, #0
 800ad28:	4620      	mov	r0, r4
 800ad2a:	4639      	mov	r1, r7
 800ad2c:	f7f5 fe78 	bl	8000a20 <__aeabi_dcmpeq>
 800ad30:	b918      	cbnz	r0, 800ad3a <__cvt+0x86>
 800ad32:	f1c5 0501 	rsb	r5, r5, #1
 800ad36:	f8ca 5000 	str.w	r5, [sl]
 800ad3a:	f8da 3000 	ldr.w	r3, [sl]
 800ad3e:	4499      	add	r9, r3
 800ad40:	2200      	movs	r2, #0
 800ad42:	2300      	movs	r3, #0
 800ad44:	4620      	mov	r0, r4
 800ad46:	4639      	mov	r1, r7
 800ad48:	f7f5 fe6a 	bl	8000a20 <__aeabi_dcmpeq>
 800ad4c:	b108      	cbz	r0, 800ad52 <__cvt+0x9e>
 800ad4e:	f8cd 901c 	str.w	r9, [sp, #28]
 800ad52:	2230      	movs	r2, #48	; 0x30
 800ad54:	9b07      	ldr	r3, [sp, #28]
 800ad56:	454b      	cmp	r3, r9
 800ad58:	d307      	bcc.n	800ad6a <__cvt+0xb6>
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	9b07      	ldr	r3, [sp, #28]
 800ad5e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ad60:	1b9b      	subs	r3, r3, r6
 800ad62:	6013      	str	r3, [r2, #0]
 800ad64:	b008      	add	sp, #32
 800ad66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad6a:	1c59      	adds	r1, r3, #1
 800ad6c:	9107      	str	r1, [sp, #28]
 800ad6e:	701a      	strb	r2, [r3, #0]
 800ad70:	e7f0      	b.n	800ad54 <__cvt+0xa0>

0800ad72 <__exponent>:
 800ad72:	4603      	mov	r3, r0
 800ad74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad76:	2900      	cmp	r1, #0
 800ad78:	f803 2b02 	strb.w	r2, [r3], #2
 800ad7c:	bfb6      	itet	lt
 800ad7e:	222d      	movlt	r2, #45	; 0x2d
 800ad80:	222b      	movge	r2, #43	; 0x2b
 800ad82:	4249      	neglt	r1, r1
 800ad84:	2909      	cmp	r1, #9
 800ad86:	7042      	strb	r2, [r0, #1]
 800ad88:	dd2a      	ble.n	800ade0 <__exponent+0x6e>
 800ad8a:	f10d 0207 	add.w	r2, sp, #7
 800ad8e:	4617      	mov	r7, r2
 800ad90:	260a      	movs	r6, #10
 800ad92:	fb91 f5f6 	sdiv	r5, r1, r6
 800ad96:	4694      	mov	ip, r2
 800ad98:	fb06 1415 	mls	r4, r6, r5, r1
 800ad9c:	3430      	adds	r4, #48	; 0x30
 800ad9e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ada2:	460c      	mov	r4, r1
 800ada4:	2c63      	cmp	r4, #99	; 0x63
 800ada6:	4629      	mov	r1, r5
 800ada8:	f102 32ff 	add.w	r2, r2, #4294967295
 800adac:	dcf1      	bgt.n	800ad92 <__exponent+0x20>
 800adae:	3130      	adds	r1, #48	; 0x30
 800adb0:	f1ac 0402 	sub.w	r4, ip, #2
 800adb4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800adb8:	4622      	mov	r2, r4
 800adba:	1c41      	adds	r1, r0, #1
 800adbc:	42ba      	cmp	r2, r7
 800adbe:	d30a      	bcc.n	800add6 <__exponent+0x64>
 800adc0:	f10d 0209 	add.w	r2, sp, #9
 800adc4:	eba2 020c 	sub.w	r2, r2, ip
 800adc8:	42bc      	cmp	r4, r7
 800adca:	bf88      	it	hi
 800adcc:	2200      	movhi	r2, #0
 800adce:	4413      	add	r3, r2
 800add0:	1a18      	subs	r0, r3, r0
 800add2:	b003      	add	sp, #12
 800add4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800add6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800adda:	f801 5f01 	strb.w	r5, [r1, #1]!
 800adde:	e7ed      	b.n	800adbc <__exponent+0x4a>
 800ade0:	2330      	movs	r3, #48	; 0x30
 800ade2:	3130      	adds	r1, #48	; 0x30
 800ade4:	7083      	strb	r3, [r0, #2]
 800ade6:	70c1      	strb	r1, [r0, #3]
 800ade8:	1d03      	adds	r3, r0, #4
 800adea:	e7f1      	b.n	800add0 <__exponent+0x5e>

0800adec <_printf_float>:
 800adec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf0:	b091      	sub	sp, #68	; 0x44
 800adf2:	460c      	mov	r4, r1
 800adf4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800adf8:	4616      	mov	r6, r2
 800adfa:	461f      	mov	r7, r3
 800adfc:	4605      	mov	r5, r0
 800adfe:	f000 fcc5 	bl	800b78c <_localeconv_r>
 800ae02:	6803      	ldr	r3, [r0, #0]
 800ae04:	4618      	mov	r0, r3
 800ae06:	9309      	str	r3, [sp, #36]	; 0x24
 800ae08:	f7f5 f9de 	bl	80001c8 <strlen>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	930e      	str	r3, [sp, #56]	; 0x38
 800ae10:	f8d8 3000 	ldr.w	r3, [r8]
 800ae14:	900a      	str	r0, [sp, #40]	; 0x28
 800ae16:	3307      	adds	r3, #7
 800ae18:	f023 0307 	bic.w	r3, r3, #7
 800ae1c:	f103 0208 	add.w	r2, r3, #8
 800ae20:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ae24:	f8d4 b000 	ldr.w	fp, [r4]
 800ae28:	f8c8 2000 	str.w	r2, [r8]
 800ae2c:	e9d3 a800 	ldrd	sl, r8, [r3]
 800ae30:	4652      	mov	r2, sl
 800ae32:	4643      	mov	r3, r8
 800ae34:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ae38:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800ae3c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae42:	4650      	mov	r0, sl
 800ae44:	4b9c      	ldr	r3, [pc, #624]	; (800b0b8 <_printf_float+0x2cc>)
 800ae46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae48:	f7f5 fe1c 	bl	8000a84 <__aeabi_dcmpun>
 800ae4c:	bb70      	cbnz	r0, 800aeac <_printf_float+0xc0>
 800ae4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae52:	4650      	mov	r0, sl
 800ae54:	4b98      	ldr	r3, [pc, #608]	; (800b0b8 <_printf_float+0x2cc>)
 800ae56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae58:	f7f5 fdf6 	bl	8000a48 <__aeabi_dcmple>
 800ae5c:	bb30      	cbnz	r0, 800aeac <_printf_float+0xc0>
 800ae5e:	2200      	movs	r2, #0
 800ae60:	2300      	movs	r3, #0
 800ae62:	4650      	mov	r0, sl
 800ae64:	4641      	mov	r1, r8
 800ae66:	f7f5 fde5 	bl	8000a34 <__aeabi_dcmplt>
 800ae6a:	b110      	cbz	r0, 800ae72 <_printf_float+0x86>
 800ae6c:	232d      	movs	r3, #45	; 0x2d
 800ae6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae72:	4a92      	ldr	r2, [pc, #584]	; (800b0bc <_printf_float+0x2d0>)
 800ae74:	4b92      	ldr	r3, [pc, #584]	; (800b0c0 <_printf_float+0x2d4>)
 800ae76:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ae7a:	bf94      	ite	ls
 800ae7c:	4690      	movls	r8, r2
 800ae7e:	4698      	movhi	r8, r3
 800ae80:	2303      	movs	r3, #3
 800ae82:	f04f 0a00 	mov.w	sl, #0
 800ae86:	6123      	str	r3, [r4, #16]
 800ae88:	f02b 0304 	bic.w	r3, fp, #4
 800ae8c:	6023      	str	r3, [r4, #0]
 800ae8e:	4633      	mov	r3, r6
 800ae90:	4621      	mov	r1, r4
 800ae92:	4628      	mov	r0, r5
 800ae94:	9700      	str	r7, [sp, #0]
 800ae96:	aa0f      	add	r2, sp, #60	; 0x3c
 800ae98:	f000 f9d6 	bl	800b248 <_printf_common>
 800ae9c:	3001      	adds	r0, #1
 800ae9e:	f040 8090 	bne.w	800afc2 <_printf_float+0x1d6>
 800aea2:	f04f 30ff 	mov.w	r0, #4294967295
 800aea6:	b011      	add	sp, #68	; 0x44
 800aea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeac:	4652      	mov	r2, sl
 800aeae:	4643      	mov	r3, r8
 800aeb0:	4650      	mov	r0, sl
 800aeb2:	4641      	mov	r1, r8
 800aeb4:	f7f5 fde6 	bl	8000a84 <__aeabi_dcmpun>
 800aeb8:	b148      	cbz	r0, 800aece <_printf_float+0xe2>
 800aeba:	f1b8 0f00 	cmp.w	r8, #0
 800aebe:	bfb8      	it	lt
 800aec0:	232d      	movlt	r3, #45	; 0x2d
 800aec2:	4a80      	ldr	r2, [pc, #512]	; (800b0c4 <_printf_float+0x2d8>)
 800aec4:	bfb8      	it	lt
 800aec6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aeca:	4b7f      	ldr	r3, [pc, #508]	; (800b0c8 <_printf_float+0x2dc>)
 800aecc:	e7d3      	b.n	800ae76 <_printf_float+0x8a>
 800aece:	6863      	ldr	r3, [r4, #4]
 800aed0:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800aed4:	1c5a      	adds	r2, r3, #1
 800aed6:	d142      	bne.n	800af5e <_printf_float+0x172>
 800aed8:	2306      	movs	r3, #6
 800aeda:	6063      	str	r3, [r4, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	9206      	str	r2, [sp, #24]
 800aee0:	aa0e      	add	r2, sp, #56	; 0x38
 800aee2:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800aee6:	aa0d      	add	r2, sp, #52	; 0x34
 800aee8:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800aeec:	9203      	str	r2, [sp, #12]
 800aeee:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800aef2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800aef6:	6023      	str	r3, [r4, #0]
 800aef8:	6863      	ldr	r3, [r4, #4]
 800aefa:	4652      	mov	r2, sl
 800aefc:	9300      	str	r3, [sp, #0]
 800aefe:	4628      	mov	r0, r5
 800af00:	4643      	mov	r3, r8
 800af02:	910b      	str	r1, [sp, #44]	; 0x2c
 800af04:	f7ff fed6 	bl	800acb4 <__cvt>
 800af08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af0a:	4680      	mov	r8, r0
 800af0c:	2947      	cmp	r1, #71	; 0x47
 800af0e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800af10:	d108      	bne.n	800af24 <_printf_float+0x138>
 800af12:	1cc8      	adds	r0, r1, #3
 800af14:	db02      	blt.n	800af1c <_printf_float+0x130>
 800af16:	6863      	ldr	r3, [r4, #4]
 800af18:	4299      	cmp	r1, r3
 800af1a:	dd40      	ble.n	800af9e <_printf_float+0x1b2>
 800af1c:	f1a9 0902 	sub.w	r9, r9, #2
 800af20:	fa5f f989 	uxtb.w	r9, r9
 800af24:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800af28:	d81f      	bhi.n	800af6a <_printf_float+0x17e>
 800af2a:	464a      	mov	r2, r9
 800af2c:	3901      	subs	r1, #1
 800af2e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800af32:	910d      	str	r1, [sp, #52]	; 0x34
 800af34:	f7ff ff1d 	bl	800ad72 <__exponent>
 800af38:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af3a:	4682      	mov	sl, r0
 800af3c:	1813      	adds	r3, r2, r0
 800af3e:	2a01      	cmp	r2, #1
 800af40:	6123      	str	r3, [r4, #16]
 800af42:	dc02      	bgt.n	800af4a <_printf_float+0x15e>
 800af44:	6822      	ldr	r2, [r4, #0]
 800af46:	07d2      	lsls	r2, r2, #31
 800af48:	d501      	bpl.n	800af4e <_printf_float+0x162>
 800af4a:	3301      	adds	r3, #1
 800af4c:	6123      	str	r3, [r4, #16]
 800af4e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800af52:	2b00      	cmp	r3, #0
 800af54:	d09b      	beq.n	800ae8e <_printf_float+0xa2>
 800af56:	232d      	movs	r3, #45	; 0x2d
 800af58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af5c:	e797      	b.n	800ae8e <_printf_float+0xa2>
 800af5e:	2947      	cmp	r1, #71	; 0x47
 800af60:	d1bc      	bne.n	800aedc <_printf_float+0xf0>
 800af62:	2b00      	cmp	r3, #0
 800af64:	d1ba      	bne.n	800aedc <_printf_float+0xf0>
 800af66:	2301      	movs	r3, #1
 800af68:	e7b7      	b.n	800aeda <_printf_float+0xee>
 800af6a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800af6e:	d118      	bne.n	800afa2 <_printf_float+0x1b6>
 800af70:	2900      	cmp	r1, #0
 800af72:	6863      	ldr	r3, [r4, #4]
 800af74:	dd0b      	ble.n	800af8e <_printf_float+0x1a2>
 800af76:	6121      	str	r1, [r4, #16]
 800af78:	b913      	cbnz	r3, 800af80 <_printf_float+0x194>
 800af7a:	6822      	ldr	r2, [r4, #0]
 800af7c:	07d0      	lsls	r0, r2, #31
 800af7e:	d502      	bpl.n	800af86 <_printf_float+0x19a>
 800af80:	3301      	adds	r3, #1
 800af82:	440b      	add	r3, r1
 800af84:	6123      	str	r3, [r4, #16]
 800af86:	f04f 0a00 	mov.w	sl, #0
 800af8a:	65a1      	str	r1, [r4, #88]	; 0x58
 800af8c:	e7df      	b.n	800af4e <_printf_float+0x162>
 800af8e:	b913      	cbnz	r3, 800af96 <_printf_float+0x1aa>
 800af90:	6822      	ldr	r2, [r4, #0]
 800af92:	07d2      	lsls	r2, r2, #31
 800af94:	d501      	bpl.n	800af9a <_printf_float+0x1ae>
 800af96:	3302      	adds	r3, #2
 800af98:	e7f4      	b.n	800af84 <_printf_float+0x198>
 800af9a:	2301      	movs	r3, #1
 800af9c:	e7f2      	b.n	800af84 <_printf_float+0x198>
 800af9e:	f04f 0967 	mov.w	r9, #103	; 0x67
 800afa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afa4:	4299      	cmp	r1, r3
 800afa6:	db05      	blt.n	800afb4 <_printf_float+0x1c8>
 800afa8:	6823      	ldr	r3, [r4, #0]
 800afaa:	6121      	str	r1, [r4, #16]
 800afac:	07d8      	lsls	r0, r3, #31
 800afae:	d5ea      	bpl.n	800af86 <_printf_float+0x19a>
 800afb0:	1c4b      	adds	r3, r1, #1
 800afb2:	e7e7      	b.n	800af84 <_printf_float+0x198>
 800afb4:	2900      	cmp	r1, #0
 800afb6:	bfcc      	ite	gt
 800afb8:	2201      	movgt	r2, #1
 800afba:	f1c1 0202 	rsble	r2, r1, #2
 800afbe:	4413      	add	r3, r2
 800afc0:	e7e0      	b.n	800af84 <_printf_float+0x198>
 800afc2:	6823      	ldr	r3, [r4, #0]
 800afc4:	055a      	lsls	r2, r3, #21
 800afc6:	d407      	bmi.n	800afd8 <_printf_float+0x1ec>
 800afc8:	6923      	ldr	r3, [r4, #16]
 800afca:	4642      	mov	r2, r8
 800afcc:	4631      	mov	r1, r6
 800afce:	4628      	mov	r0, r5
 800afd0:	47b8      	blx	r7
 800afd2:	3001      	adds	r0, #1
 800afd4:	d12b      	bne.n	800b02e <_printf_float+0x242>
 800afd6:	e764      	b.n	800aea2 <_printf_float+0xb6>
 800afd8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800afdc:	f240 80dd 	bls.w	800b19a <_printf_float+0x3ae>
 800afe0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800afe4:	2200      	movs	r2, #0
 800afe6:	2300      	movs	r3, #0
 800afe8:	f7f5 fd1a 	bl	8000a20 <__aeabi_dcmpeq>
 800afec:	2800      	cmp	r0, #0
 800afee:	d033      	beq.n	800b058 <_printf_float+0x26c>
 800aff0:	2301      	movs	r3, #1
 800aff2:	4631      	mov	r1, r6
 800aff4:	4628      	mov	r0, r5
 800aff6:	4a35      	ldr	r2, [pc, #212]	; (800b0cc <_printf_float+0x2e0>)
 800aff8:	47b8      	blx	r7
 800affa:	3001      	adds	r0, #1
 800affc:	f43f af51 	beq.w	800aea2 <_printf_float+0xb6>
 800b000:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b004:	429a      	cmp	r2, r3
 800b006:	db02      	blt.n	800b00e <_printf_float+0x222>
 800b008:	6823      	ldr	r3, [r4, #0]
 800b00a:	07d8      	lsls	r0, r3, #31
 800b00c:	d50f      	bpl.n	800b02e <_printf_float+0x242>
 800b00e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b012:	4631      	mov	r1, r6
 800b014:	4628      	mov	r0, r5
 800b016:	47b8      	blx	r7
 800b018:	3001      	adds	r0, #1
 800b01a:	f43f af42 	beq.w	800aea2 <_printf_float+0xb6>
 800b01e:	f04f 0800 	mov.w	r8, #0
 800b022:	f104 091a 	add.w	r9, r4, #26
 800b026:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b028:	3b01      	subs	r3, #1
 800b02a:	4543      	cmp	r3, r8
 800b02c:	dc09      	bgt.n	800b042 <_printf_float+0x256>
 800b02e:	6823      	ldr	r3, [r4, #0]
 800b030:	079b      	lsls	r3, r3, #30
 800b032:	f100 8104 	bmi.w	800b23e <_printf_float+0x452>
 800b036:	68e0      	ldr	r0, [r4, #12]
 800b038:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b03a:	4298      	cmp	r0, r3
 800b03c:	bfb8      	it	lt
 800b03e:	4618      	movlt	r0, r3
 800b040:	e731      	b.n	800aea6 <_printf_float+0xba>
 800b042:	2301      	movs	r3, #1
 800b044:	464a      	mov	r2, r9
 800b046:	4631      	mov	r1, r6
 800b048:	4628      	mov	r0, r5
 800b04a:	47b8      	blx	r7
 800b04c:	3001      	adds	r0, #1
 800b04e:	f43f af28 	beq.w	800aea2 <_printf_float+0xb6>
 800b052:	f108 0801 	add.w	r8, r8, #1
 800b056:	e7e6      	b.n	800b026 <_printf_float+0x23a>
 800b058:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	dc38      	bgt.n	800b0d0 <_printf_float+0x2e4>
 800b05e:	2301      	movs	r3, #1
 800b060:	4631      	mov	r1, r6
 800b062:	4628      	mov	r0, r5
 800b064:	4a19      	ldr	r2, [pc, #100]	; (800b0cc <_printf_float+0x2e0>)
 800b066:	47b8      	blx	r7
 800b068:	3001      	adds	r0, #1
 800b06a:	f43f af1a 	beq.w	800aea2 <_printf_float+0xb6>
 800b06e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800b072:	4313      	orrs	r3, r2
 800b074:	d102      	bne.n	800b07c <_printf_float+0x290>
 800b076:	6823      	ldr	r3, [r4, #0]
 800b078:	07d9      	lsls	r1, r3, #31
 800b07a:	d5d8      	bpl.n	800b02e <_printf_float+0x242>
 800b07c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b080:	4631      	mov	r1, r6
 800b082:	4628      	mov	r0, r5
 800b084:	47b8      	blx	r7
 800b086:	3001      	adds	r0, #1
 800b088:	f43f af0b 	beq.w	800aea2 <_printf_float+0xb6>
 800b08c:	f04f 0900 	mov.w	r9, #0
 800b090:	f104 0a1a 	add.w	sl, r4, #26
 800b094:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b096:	425b      	negs	r3, r3
 800b098:	454b      	cmp	r3, r9
 800b09a:	dc01      	bgt.n	800b0a0 <_printf_float+0x2b4>
 800b09c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b09e:	e794      	b.n	800afca <_printf_float+0x1de>
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	4652      	mov	r2, sl
 800b0a4:	4631      	mov	r1, r6
 800b0a6:	4628      	mov	r0, r5
 800b0a8:	47b8      	blx	r7
 800b0aa:	3001      	adds	r0, #1
 800b0ac:	f43f aef9 	beq.w	800aea2 <_printf_float+0xb6>
 800b0b0:	f109 0901 	add.w	r9, r9, #1
 800b0b4:	e7ee      	b.n	800b094 <_printf_float+0x2a8>
 800b0b6:	bf00      	nop
 800b0b8:	7fefffff 	.word	0x7fefffff
 800b0bc:	0800dcec 	.word	0x0800dcec
 800b0c0:	0800dcf0 	.word	0x0800dcf0
 800b0c4:	0800dcf4 	.word	0x0800dcf4
 800b0c8:	0800dcf8 	.word	0x0800dcf8
 800b0cc:	0800dcfc 	.word	0x0800dcfc
 800b0d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	bfa8      	it	ge
 800b0d8:	461a      	movge	r2, r3
 800b0da:	2a00      	cmp	r2, #0
 800b0dc:	4691      	mov	r9, r2
 800b0de:	dc37      	bgt.n	800b150 <_printf_float+0x364>
 800b0e0:	f04f 0b00 	mov.w	fp, #0
 800b0e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0e8:	f104 021a 	add.w	r2, r4, #26
 800b0ec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b0f0:	ebaa 0309 	sub.w	r3, sl, r9
 800b0f4:	455b      	cmp	r3, fp
 800b0f6:	dc33      	bgt.n	800b160 <_printf_float+0x374>
 800b0f8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	db3b      	blt.n	800b178 <_printf_float+0x38c>
 800b100:	6823      	ldr	r3, [r4, #0]
 800b102:	07da      	lsls	r2, r3, #31
 800b104:	d438      	bmi.n	800b178 <_printf_float+0x38c>
 800b106:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800b10a:	eba2 0903 	sub.w	r9, r2, r3
 800b10e:	eba2 020a 	sub.w	r2, r2, sl
 800b112:	4591      	cmp	r9, r2
 800b114:	bfa8      	it	ge
 800b116:	4691      	movge	r9, r2
 800b118:	f1b9 0f00 	cmp.w	r9, #0
 800b11c:	dc34      	bgt.n	800b188 <_printf_float+0x39c>
 800b11e:	f04f 0800 	mov.w	r8, #0
 800b122:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b126:	f104 0a1a 	add.w	sl, r4, #26
 800b12a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b12e:	1a9b      	subs	r3, r3, r2
 800b130:	eba3 0309 	sub.w	r3, r3, r9
 800b134:	4543      	cmp	r3, r8
 800b136:	f77f af7a 	ble.w	800b02e <_printf_float+0x242>
 800b13a:	2301      	movs	r3, #1
 800b13c:	4652      	mov	r2, sl
 800b13e:	4631      	mov	r1, r6
 800b140:	4628      	mov	r0, r5
 800b142:	47b8      	blx	r7
 800b144:	3001      	adds	r0, #1
 800b146:	f43f aeac 	beq.w	800aea2 <_printf_float+0xb6>
 800b14a:	f108 0801 	add.w	r8, r8, #1
 800b14e:	e7ec      	b.n	800b12a <_printf_float+0x33e>
 800b150:	4613      	mov	r3, r2
 800b152:	4631      	mov	r1, r6
 800b154:	4642      	mov	r2, r8
 800b156:	4628      	mov	r0, r5
 800b158:	47b8      	blx	r7
 800b15a:	3001      	adds	r0, #1
 800b15c:	d1c0      	bne.n	800b0e0 <_printf_float+0x2f4>
 800b15e:	e6a0      	b.n	800aea2 <_printf_float+0xb6>
 800b160:	2301      	movs	r3, #1
 800b162:	4631      	mov	r1, r6
 800b164:	4628      	mov	r0, r5
 800b166:	920b      	str	r2, [sp, #44]	; 0x2c
 800b168:	47b8      	blx	r7
 800b16a:	3001      	adds	r0, #1
 800b16c:	f43f ae99 	beq.w	800aea2 <_printf_float+0xb6>
 800b170:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b172:	f10b 0b01 	add.w	fp, fp, #1
 800b176:	e7b9      	b.n	800b0ec <_printf_float+0x300>
 800b178:	4631      	mov	r1, r6
 800b17a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b17e:	4628      	mov	r0, r5
 800b180:	47b8      	blx	r7
 800b182:	3001      	adds	r0, #1
 800b184:	d1bf      	bne.n	800b106 <_printf_float+0x31a>
 800b186:	e68c      	b.n	800aea2 <_printf_float+0xb6>
 800b188:	464b      	mov	r3, r9
 800b18a:	4631      	mov	r1, r6
 800b18c:	4628      	mov	r0, r5
 800b18e:	eb08 020a 	add.w	r2, r8, sl
 800b192:	47b8      	blx	r7
 800b194:	3001      	adds	r0, #1
 800b196:	d1c2      	bne.n	800b11e <_printf_float+0x332>
 800b198:	e683      	b.n	800aea2 <_printf_float+0xb6>
 800b19a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b19c:	2a01      	cmp	r2, #1
 800b19e:	dc01      	bgt.n	800b1a4 <_printf_float+0x3b8>
 800b1a0:	07db      	lsls	r3, r3, #31
 800b1a2:	d539      	bpl.n	800b218 <_printf_float+0x42c>
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	4642      	mov	r2, r8
 800b1a8:	4631      	mov	r1, r6
 800b1aa:	4628      	mov	r0, r5
 800b1ac:	47b8      	blx	r7
 800b1ae:	3001      	adds	r0, #1
 800b1b0:	f43f ae77 	beq.w	800aea2 <_printf_float+0xb6>
 800b1b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1b8:	4631      	mov	r1, r6
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	47b8      	blx	r7
 800b1be:	3001      	adds	r0, #1
 800b1c0:	f43f ae6f 	beq.w	800aea2 <_printf_float+0xb6>
 800b1c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800b1d0:	f7f5 fc26 	bl	8000a20 <__aeabi_dcmpeq>
 800b1d4:	b9d8      	cbnz	r0, 800b20e <_printf_float+0x422>
 800b1d6:	f109 33ff 	add.w	r3, r9, #4294967295
 800b1da:	f108 0201 	add.w	r2, r8, #1
 800b1de:	4631      	mov	r1, r6
 800b1e0:	4628      	mov	r0, r5
 800b1e2:	47b8      	blx	r7
 800b1e4:	3001      	adds	r0, #1
 800b1e6:	d10e      	bne.n	800b206 <_printf_float+0x41a>
 800b1e8:	e65b      	b.n	800aea2 <_printf_float+0xb6>
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	464a      	mov	r2, r9
 800b1ee:	4631      	mov	r1, r6
 800b1f0:	4628      	mov	r0, r5
 800b1f2:	47b8      	blx	r7
 800b1f4:	3001      	adds	r0, #1
 800b1f6:	f43f ae54 	beq.w	800aea2 <_printf_float+0xb6>
 800b1fa:	f108 0801 	add.w	r8, r8, #1
 800b1fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b200:	3b01      	subs	r3, #1
 800b202:	4543      	cmp	r3, r8
 800b204:	dcf1      	bgt.n	800b1ea <_printf_float+0x3fe>
 800b206:	4653      	mov	r3, sl
 800b208:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b20c:	e6de      	b.n	800afcc <_printf_float+0x1e0>
 800b20e:	f04f 0800 	mov.w	r8, #0
 800b212:	f104 091a 	add.w	r9, r4, #26
 800b216:	e7f2      	b.n	800b1fe <_printf_float+0x412>
 800b218:	2301      	movs	r3, #1
 800b21a:	4642      	mov	r2, r8
 800b21c:	e7df      	b.n	800b1de <_printf_float+0x3f2>
 800b21e:	2301      	movs	r3, #1
 800b220:	464a      	mov	r2, r9
 800b222:	4631      	mov	r1, r6
 800b224:	4628      	mov	r0, r5
 800b226:	47b8      	blx	r7
 800b228:	3001      	adds	r0, #1
 800b22a:	f43f ae3a 	beq.w	800aea2 <_printf_float+0xb6>
 800b22e:	f108 0801 	add.w	r8, r8, #1
 800b232:	68e3      	ldr	r3, [r4, #12]
 800b234:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b236:	1a5b      	subs	r3, r3, r1
 800b238:	4543      	cmp	r3, r8
 800b23a:	dcf0      	bgt.n	800b21e <_printf_float+0x432>
 800b23c:	e6fb      	b.n	800b036 <_printf_float+0x24a>
 800b23e:	f04f 0800 	mov.w	r8, #0
 800b242:	f104 0919 	add.w	r9, r4, #25
 800b246:	e7f4      	b.n	800b232 <_printf_float+0x446>

0800b248 <_printf_common>:
 800b248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b24c:	4616      	mov	r6, r2
 800b24e:	4699      	mov	r9, r3
 800b250:	688a      	ldr	r2, [r1, #8]
 800b252:	690b      	ldr	r3, [r1, #16]
 800b254:	4607      	mov	r7, r0
 800b256:	4293      	cmp	r3, r2
 800b258:	bfb8      	it	lt
 800b25a:	4613      	movlt	r3, r2
 800b25c:	6033      	str	r3, [r6, #0]
 800b25e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b262:	460c      	mov	r4, r1
 800b264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b268:	b10a      	cbz	r2, 800b26e <_printf_common+0x26>
 800b26a:	3301      	adds	r3, #1
 800b26c:	6033      	str	r3, [r6, #0]
 800b26e:	6823      	ldr	r3, [r4, #0]
 800b270:	0699      	lsls	r1, r3, #26
 800b272:	bf42      	ittt	mi
 800b274:	6833      	ldrmi	r3, [r6, #0]
 800b276:	3302      	addmi	r3, #2
 800b278:	6033      	strmi	r3, [r6, #0]
 800b27a:	6825      	ldr	r5, [r4, #0]
 800b27c:	f015 0506 	ands.w	r5, r5, #6
 800b280:	d106      	bne.n	800b290 <_printf_common+0x48>
 800b282:	f104 0a19 	add.w	sl, r4, #25
 800b286:	68e3      	ldr	r3, [r4, #12]
 800b288:	6832      	ldr	r2, [r6, #0]
 800b28a:	1a9b      	subs	r3, r3, r2
 800b28c:	42ab      	cmp	r3, r5
 800b28e:	dc2b      	bgt.n	800b2e8 <_printf_common+0xa0>
 800b290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b294:	1e13      	subs	r3, r2, #0
 800b296:	6822      	ldr	r2, [r4, #0]
 800b298:	bf18      	it	ne
 800b29a:	2301      	movne	r3, #1
 800b29c:	0692      	lsls	r2, r2, #26
 800b29e:	d430      	bmi.n	800b302 <_printf_common+0xba>
 800b2a0:	4649      	mov	r1, r9
 800b2a2:	4638      	mov	r0, r7
 800b2a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2a8:	47c0      	blx	r8
 800b2aa:	3001      	adds	r0, #1
 800b2ac:	d023      	beq.n	800b2f6 <_printf_common+0xae>
 800b2ae:	6823      	ldr	r3, [r4, #0]
 800b2b0:	6922      	ldr	r2, [r4, #16]
 800b2b2:	f003 0306 	and.w	r3, r3, #6
 800b2b6:	2b04      	cmp	r3, #4
 800b2b8:	bf14      	ite	ne
 800b2ba:	2500      	movne	r5, #0
 800b2bc:	6833      	ldreq	r3, [r6, #0]
 800b2be:	f04f 0600 	mov.w	r6, #0
 800b2c2:	bf08      	it	eq
 800b2c4:	68e5      	ldreq	r5, [r4, #12]
 800b2c6:	f104 041a 	add.w	r4, r4, #26
 800b2ca:	bf08      	it	eq
 800b2cc:	1aed      	subeq	r5, r5, r3
 800b2ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b2d2:	bf08      	it	eq
 800b2d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	bfc4      	itt	gt
 800b2dc:	1a9b      	subgt	r3, r3, r2
 800b2de:	18ed      	addgt	r5, r5, r3
 800b2e0:	42b5      	cmp	r5, r6
 800b2e2:	d11a      	bne.n	800b31a <_printf_common+0xd2>
 800b2e4:	2000      	movs	r0, #0
 800b2e6:	e008      	b.n	800b2fa <_printf_common+0xb2>
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	4652      	mov	r2, sl
 800b2ec:	4649      	mov	r1, r9
 800b2ee:	4638      	mov	r0, r7
 800b2f0:	47c0      	blx	r8
 800b2f2:	3001      	adds	r0, #1
 800b2f4:	d103      	bne.n	800b2fe <_printf_common+0xb6>
 800b2f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b2fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2fe:	3501      	adds	r5, #1
 800b300:	e7c1      	b.n	800b286 <_printf_common+0x3e>
 800b302:	2030      	movs	r0, #48	; 0x30
 800b304:	18e1      	adds	r1, r4, r3
 800b306:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b30a:	1c5a      	adds	r2, r3, #1
 800b30c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b310:	4422      	add	r2, r4
 800b312:	3302      	adds	r3, #2
 800b314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b318:	e7c2      	b.n	800b2a0 <_printf_common+0x58>
 800b31a:	2301      	movs	r3, #1
 800b31c:	4622      	mov	r2, r4
 800b31e:	4649      	mov	r1, r9
 800b320:	4638      	mov	r0, r7
 800b322:	47c0      	blx	r8
 800b324:	3001      	adds	r0, #1
 800b326:	d0e6      	beq.n	800b2f6 <_printf_common+0xae>
 800b328:	3601      	adds	r6, #1
 800b32a:	e7d9      	b.n	800b2e0 <_printf_common+0x98>

0800b32c <_printf_i>:
 800b32c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b330:	7e0f      	ldrb	r7, [r1, #24]
 800b332:	4691      	mov	r9, r2
 800b334:	2f78      	cmp	r7, #120	; 0x78
 800b336:	4680      	mov	r8, r0
 800b338:	460c      	mov	r4, r1
 800b33a:	469a      	mov	sl, r3
 800b33c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b33e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b342:	d807      	bhi.n	800b354 <_printf_i+0x28>
 800b344:	2f62      	cmp	r7, #98	; 0x62
 800b346:	d80a      	bhi.n	800b35e <_printf_i+0x32>
 800b348:	2f00      	cmp	r7, #0
 800b34a:	f000 80d5 	beq.w	800b4f8 <_printf_i+0x1cc>
 800b34e:	2f58      	cmp	r7, #88	; 0x58
 800b350:	f000 80c1 	beq.w	800b4d6 <_printf_i+0x1aa>
 800b354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b358:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b35c:	e03a      	b.n	800b3d4 <_printf_i+0xa8>
 800b35e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b362:	2b15      	cmp	r3, #21
 800b364:	d8f6      	bhi.n	800b354 <_printf_i+0x28>
 800b366:	a101      	add	r1, pc, #4	; (adr r1, 800b36c <_printf_i+0x40>)
 800b368:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b36c:	0800b3c5 	.word	0x0800b3c5
 800b370:	0800b3d9 	.word	0x0800b3d9
 800b374:	0800b355 	.word	0x0800b355
 800b378:	0800b355 	.word	0x0800b355
 800b37c:	0800b355 	.word	0x0800b355
 800b380:	0800b355 	.word	0x0800b355
 800b384:	0800b3d9 	.word	0x0800b3d9
 800b388:	0800b355 	.word	0x0800b355
 800b38c:	0800b355 	.word	0x0800b355
 800b390:	0800b355 	.word	0x0800b355
 800b394:	0800b355 	.word	0x0800b355
 800b398:	0800b4df 	.word	0x0800b4df
 800b39c:	0800b405 	.word	0x0800b405
 800b3a0:	0800b499 	.word	0x0800b499
 800b3a4:	0800b355 	.word	0x0800b355
 800b3a8:	0800b355 	.word	0x0800b355
 800b3ac:	0800b501 	.word	0x0800b501
 800b3b0:	0800b355 	.word	0x0800b355
 800b3b4:	0800b405 	.word	0x0800b405
 800b3b8:	0800b355 	.word	0x0800b355
 800b3bc:	0800b355 	.word	0x0800b355
 800b3c0:	0800b4a1 	.word	0x0800b4a1
 800b3c4:	682b      	ldr	r3, [r5, #0]
 800b3c6:	1d1a      	adds	r2, r3, #4
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	602a      	str	r2, [r5, #0]
 800b3cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e0a0      	b.n	800b51a <_printf_i+0x1ee>
 800b3d8:	6820      	ldr	r0, [r4, #0]
 800b3da:	682b      	ldr	r3, [r5, #0]
 800b3dc:	0607      	lsls	r7, r0, #24
 800b3de:	f103 0104 	add.w	r1, r3, #4
 800b3e2:	6029      	str	r1, [r5, #0]
 800b3e4:	d501      	bpl.n	800b3ea <_printf_i+0xbe>
 800b3e6:	681e      	ldr	r6, [r3, #0]
 800b3e8:	e003      	b.n	800b3f2 <_printf_i+0xc6>
 800b3ea:	0646      	lsls	r6, r0, #25
 800b3ec:	d5fb      	bpl.n	800b3e6 <_printf_i+0xba>
 800b3ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b3f2:	2e00      	cmp	r6, #0
 800b3f4:	da03      	bge.n	800b3fe <_printf_i+0xd2>
 800b3f6:	232d      	movs	r3, #45	; 0x2d
 800b3f8:	4276      	negs	r6, r6
 800b3fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3fe:	230a      	movs	r3, #10
 800b400:	4859      	ldr	r0, [pc, #356]	; (800b568 <_printf_i+0x23c>)
 800b402:	e012      	b.n	800b42a <_printf_i+0xfe>
 800b404:	682b      	ldr	r3, [r5, #0]
 800b406:	6820      	ldr	r0, [r4, #0]
 800b408:	1d19      	adds	r1, r3, #4
 800b40a:	6029      	str	r1, [r5, #0]
 800b40c:	0605      	lsls	r5, r0, #24
 800b40e:	d501      	bpl.n	800b414 <_printf_i+0xe8>
 800b410:	681e      	ldr	r6, [r3, #0]
 800b412:	e002      	b.n	800b41a <_printf_i+0xee>
 800b414:	0641      	lsls	r1, r0, #25
 800b416:	d5fb      	bpl.n	800b410 <_printf_i+0xe4>
 800b418:	881e      	ldrh	r6, [r3, #0]
 800b41a:	2f6f      	cmp	r7, #111	; 0x6f
 800b41c:	bf0c      	ite	eq
 800b41e:	2308      	moveq	r3, #8
 800b420:	230a      	movne	r3, #10
 800b422:	4851      	ldr	r0, [pc, #324]	; (800b568 <_printf_i+0x23c>)
 800b424:	2100      	movs	r1, #0
 800b426:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b42a:	6865      	ldr	r5, [r4, #4]
 800b42c:	2d00      	cmp	r5, #0
 800b42e:	bfa8      	it	ge
 800b430:	6821      	ldrge	r1, [r4, #0]
 800b432:	60a5      	str	r5, [r4, #8]
 800b434:	bfa4      	itt	ge
 800b436:	f021 0104 	bicge.w	r1, r1, #4
 800b43a:	6021      	strge	r1, [r4, #0]
 800b43c:	b90e      	cbnz	r6, 800b442 <_printf_i+0x116>
 800b43e:	2d00      	cmp	r5, #0
 800b440:	d04b      	beq.n	800b4da <_printf_i+0x1ae>
 800b442:	4615      	mov	r5, r2
 800b444:	fbb6 f1f3 	udiv	r1, r6, r3
 800b448:	fb03 6711 	mls	r7, r3, r1, r6
 800b44c:	5dc7      	ldrb	r7, [r0, r7]
 800b44e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b452:	4637      	mov	r7, r6
 800b454:	42bb      	cmp	r3, r7
 800b456:	460e      	mov	r6, r1
 800b458:	d9f4      	bls.n	800b444 <_printf_i+0x118>
 800b45a:	2b08      	cmp	r3, #8
 800b45c:	d10b      	bne.n	800b476 <_printf_i+0x14a>
 800b45e:	6823      	ldr	r3, [r4, #0]
 800b460:	07de      	lsls	r6, r3, #31
 800b462:	d508      	bpl.n	800b476 <_printf_i+0x14a>
 800b464:	6923      	ldr	r3, [r4, #16]
 800b466:	6861      	ldr	r1, [r4, #4]
 800b468:	4299      	cmp	r1, r3
 800b46a:	bfde      	ittt	le
 800b46c:	2330      	movle	r3, #48	; 0x30
 800b46e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b472:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b476:	1b52      	subs	r2, r2, r5
 800b478:	6122      	str	r2, [r4, #16]
 800b47a:	464b      	mov	r3, r9
 800b47c:	4621      	mov	r1, r4
 800b47e:	4640      	mov	r0, r8
 800b480:	f8cd a000 	str.w	sl, [sp]
 800b484:	aa03      	add	r2, sp, #12
 800b486:	f7ff fedf 	bl	800b248 <_printf_common>
 800b48a:	3001      	adds	r0, #1
 800b48c:	d14a      	bne.n	800b524 <_printf_i+0x1f8>
 800b48e:	f04f 30ff 	mov.w	r0, #4294967295
 800b492:	b004      	add	sp, #16
 800b494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b498:	6823      	ldr	r3, [r4, #0]
 800b49a:	f043 0320 	orr.w	r3, r3, #32
 800b49e:	6023      	str	r3, [r4, #0]
 800b4a0:	2778      	movs	r7, #120	; 0x78
 800b4a2:	4832      	ldr	r0, [pc, #200]	; (800b56c <_printf_i+0x240>)
 800b4a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b4a8:	6823      	ldr	r3, [r4, #0]
 800b4aa:	6829      	ldr	r1, [r5, #0]
 800b4ac:	061f      	lsls	r7, r3, #24
 800b4ae:	f851 6b04 	ldr.w	r6, [r1], #4
 800b4b2:	d402      	bmi.n	800b4ba <_printf_i+0x18e>
 800b4b4:	065f      	lsls	r7, r3, #25
 800b4b6:	bf48      	it	mi
 800b4b8:	b2b6      	uxthmi	r6, r6
 800b4ba:	07df      	lsls	r7, r3, #31
 800b4bc:	bf48      	it	mi
 800b4be:	f043 0320 	orrmi.w	r3, r3, #32
 800b4c2:	6029      	str	r1, [r5, #0]
 800b4c4:	bf48      	it	mi
 800b4c6:	6023      	strmi	r3, [r4, #0]
 800b4c8:	b91e      	cbnz	r6, 800b4d2 <_printf_i+0x1a6>
 800b4ca:	6823      	ldr	r3, [r4, #0]
 800b4cc:	f023 0320 	bic.w	r3, r3, #32
 800b4d0:	6023      	str	r3, [r4, #0]
 800b4d2:	2310      	movs	r3, #16
 800b4d4:	e7a6      	b.n	800b424 <_printf_i+0xf8>
 800b4d6:	4824      	ldr	r0, [pc, #144]	; (800b568 <_printf_i+0x23c>)
 800b4d8:	e7e4      	b.n	800b4a4 <_printf_i+0x178>
 800b4da:	4615      	mov	r5, r2
 800b4dc:	e7bd      	b.n	800b45a <_printf_i+0x12e>
 800b4de:	682b      	ldr	r3, [r5, #0]
 800b4e0:	6826      	ldr	r6, [r4, #0]
 800b4e2:	1d18      	adds	r0, r3, #4
 800b4e4:	6961      	ldr	r1, [r4, #20]
 800b4e6:	6028      	str	r0, [r5, #0]
 800b4e8:	0635      	lsls	r5, r6, #24
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	d501      	bpl.n	800b4f2 <_printf_i+0x1c6>
 800b4ee:	6019      	str	r1, [r3, #0]
 800b4f0:	e002      	b.n	800b4f8 <_printf_i+0x1cc>
 800b4f2:	0670      	lsls	r0, r6, #25
 800b4f4:	d5fb      	bpl.n	800b4ee <_printf_i+0x1c2>
 800b4f6:	8019      	strh	r1, [r3, #0]
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	4615      	mov	r5, r2
 800b4fc:	6123      	str	r3, [r4, #16]
 800b4fe:	e7bc      	b.n	800b47a <_printf_i+0x14e>
 800b500:	682b      	ldr	r3, [r5, #0]
 800b502:	2100      	movs	r1, #0
 800b504:	1d1a      	adds	r2, r3, #4
 800b506:	602a      	str	r2, [r5, #0]
 800b508:	681d      	ldr	r5, [r3, #0]
 800b50a:	6862      	ldr	r2, [r4, #4]
 800b50c:	4628      	mov	r0, r5
 800b50e:	f000 f9c4 	bl	800b89a <memchr>
 800b512:	b108      	cbz	r0, 800b518 <_printf_i+0x1ec>
 800b514:	1b40      	subs	r0, r0, r5
 800b516:	6060      	str	r0, [r4, #4]
 800b518:	6863      	ldr	r3, [r4, #4]
 800b51a:	6123      	str	r3, [r4, #16]
 800b51c:	2300      	movs	r3, #0
 800b51e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b522:	e7aa      	b.n	800b47a <_printf_i+0x14e>
 800b524:	462a      	mov	r2, r5
 800b526:	4649      	mov	r1, r9
 800b528:	4640      	mov	r0, r8
 800b52a:	6923      	ldr	r3, [r4, #16]
 800b52c:	47d0      	blx	sl
 800b52e:	3001      	adds	r0, #1
 800b530:	d0ad      	beq.n	800b48e <_printf_i+0x162>
 800b532:	6823      	ldr	r3, [r4, #0]
 800b534:	079b      	lsls	r3, r3, #30
 800b536:	d413      	bmi.n	800b560 <_printf_i+0x234>
 800b538:	68e0      	ldr	r0, [r4, #12]
 800b53a:	9b03      	ldr	r3, [sp, #12]
 800b53c:	4298      	cmp	r0, r3
 800b53e:	bfb8      	it	lt
 800b540:	4618      	movlt	r0, r3
 800b542:	e7a6      	b.n	800b492 <_printf_i+0x166>
 800b544:	2301      	movs	r3, #1
 800b546:	4632      	mov	r2, r6
 800b548:	4649      	mov	r1, r9
 800b54a:	4640      	mov	r0, r8
 800b54c:	47d0      	blx	sl
 800b54e:	3001      	adds	r0, #1
 800b550:	d09d      	beq.n	800b48e <_printf_i+0x162>
 800b552:	3501      	adds	r5, #1
 800b554:	68e3      	ldr	r3, [r4, #12]
 800b556:	9903      	ldr	r1, [sp, #12]
 800b558:	1a5b      	subs	r3, r3, r1
 800b55a:	42ab      	cmp	r3, r5
 800b55c:	dcf2      	bgt.n	800b544 <_printf_i+0x218>
 800b55e:	e7eb      	b.n	800b538 <_printf_i+0x20c>
 800b560:	2500      	movs	r5, #0
 800b562:	f104 0619 	add.w	r6, r4, #25
 800b566:	e7f5      	b.n	800b554 <_printf_i+0x228>
 800b568:	0800dcfe 	.word	0x0800dcfe
 800b56c:	0800dd0f 	.word	0x0800dd0f

0800b570 <std>:
 800b570:	2300      	movs	r3, #0
 800b572:	b510      	push	{r4, lr}
 800b574:	4604      	mov	r4, r0
 800b576:	e9c0 3300 	strd	r3, r3, [r0]
 800b57a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b57e:	6083      	str	r3, [r0, #8]
 800b580:	8181      	strh	r1, [r0, #12]
 800b582:	6643      	str	r3, [r0, #100]	; 0x64
 800b584:	81c2      	strh	r2, [r0, #14]
 800b586:	6183      	str	r3, [r0, #24]
 800b588:	4619      	mov	r1, r3
 800b58a:	2208      	movs	r2, #8
 800b58c:	305c      	adds	r0, #92	; 0x5c
 800b58e:	f000 f8f4 	bl	800b77a <memset>
 800b592:	4b0d      	ldr	r3, [pc, #52]	; (800b5c8 <std+0x58>)
 800b594:	6224      	str	r4, [r4, #32]
 800b596:	6263      	str	r3, [r4, #36]	; 0x24
 800b598:	4b0c      	ldr	r3, [pc, #48]	; (800b5cc <std+0x5c>)
 800b59a:	62a3      	str	r3, [r4, #40]	; 0x28
 800b59c:	4b0c      	ldr	r3, [pc, #48]	; (800b5d0 <std+0x60>)
 800b59e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b5a0:	4b0c      	ldr	r3, [pc, #48]	; (800b5d4 <std+0x64>)
 800b5a2:	6323      	str	r3, [r4, #48]	; 0x30
 800b5a4:	4b0c      	ldr	r3, [pc, #48]	; (800b5d8 <std+0x68>)
 800b5a6:	429c      	cmp	r4, r3
 800b5a8:	d006      	beq.n	800b5b8 <std+0x48>
 800b5aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b5ae:	4294      	cmp	r4, r2
 800b5b0:	d002      	beq.n	800b5b8 <std+0x48>
 800b5b2:	33d0      	adds	r3, #208	; 0xd0
 800b5b4:	429c      	cmp	r4, r3
 800b5b6:	d105      	bne.n	800b5c4 <std+0x54>
 800b5b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5c0:	f000 b968 	b.w	800b894 <__retarget_lock_init_recursive>
 800b5c4:	bd10      	pop	{r4, pc}
 800b5c6:	bf00      	nop
 800b5c8:	0800b6f5 	.word	0x0800b6f5
 800b5cc:	0800b717 	.word	0x0800b717
 800b5d0:	0800b74f 	.word	0x0800b74f
 800b5d4:	0800b773 	.word	0x0800b773
 800b5d8:	200017c8 	.word	0x200017c8

0800b5dc <stdio_exit_handler>:
 800b5dc:	4a02      	ldr	r2, [pc, #8]	; (800b5e8 <stdio_exit_handler+0xc>)
 800b5de:	4903      	ldr	r1, [pc, #12]	; (800b5ec <stdio_exit_handler+0x10>)
 800b5e0:	4803      	ldr	r0, [pc, #12]	; (800b5f0 <stdio_exit_handler+0x14>)
 800b5e2:	f000 b869 	b.w	800b6b8 <_fwalk_sglue>
 800b5e6:	bf00      	nop
 800b5e8:	200001b0 	.word	0x200001b0
 800b5ec:	0800ce15 	.word	0x0800ce15
 800b5f0:	200001bc 	.word	0x200001bc

0800b5f4 <cleanup_stdio>:
 800b5f4:	6841      	ldr	r1, [r0, #4]
 800b5f6:	4b0c      	ldr	r3, [pc, #48]	; (800b628 <cleanup_stdio+0x34>)
 800b5f8:	b510      	push	{r4, lr}
 800b5fa:	4299      	cmp	r1, r3
 800b5fc:	4604      	mov	r4, r0
 800b5fe:	d001      	beq.n	800b604 <cleanup_stdio+0x10>
 800b600:	f001 fc08 	bl	800ce14 <_fflush_r>
 800b604:	68a1      	ldr	r1, [r4, #8]
 800b606:	4b09      	ldr	r3, [pc, #36]	; (800b62c <cleanup_stdio+0x38>)
 800b608:	4299      	cmp	r1, r3
 800b60a:	d002      	beq.n	800b612 <cleanup_stdio+0x1e>
 800b60c:	4620      	mov	r0, r4
 800b60e:	f001 fc01 	bl	800ce14 <_fflush_r>
 800b612:	68e1      	ldr	r1, [r4, #12]
 800b614:	4b06      	ldr	r3, [pc, #24]	; (800b630 <cleanup_stdio+0x3c>)
 800b616:	4299      	cmp	r1, r3
 800b618:	d004      	beq.n	800b624 <cleanup_stdio+0x30>
 800b61a:	4620      	mov	r0, r4
 800b61c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b620:	f001 bbf8 	b.w	800ce14 <_fflush_r>
 800b624:	bd10      	pop	{r4, pc}
 800b626:	bf00      	nop
 800b628:	200017c8 	.word	0x200017c8
 800b62c:	20001830 	.word	0x20001830
 800b630:	20001898 	.word	0x20001898

0800b634 <global_stdio_init.part.0>:
 800b634:	b510      	push	{r4, lr}
 800b636:	4b0b      	ldr	r3, [pc, #44]	; (800b664 <global_stdio_init.part.0+0x30>)
 800b638:	4c0b      	ldr	r4, [pc, #44]	; (800b668 <global_stdio_init.part.0+0x34>)
 800b63a:	4a0c      	ldr	r2, [pc, #48]	; (800b66c <global_stdio_init.part.0+0x38>)
 800b63c:	4620      	mov	r0, r4
 800b63e:	601a      	str	r2, [r3, #0]
 800b640:	2104      	movs	r1, #4
 800b642:	2200      	movs	r2, #0
 800b644:	f7ff ff94 	bl	800b570 <std>
 800b648:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b64c:	2201      	movs	r2, #1
 800b64e:	2109      	movs	r1, #9
 800b650:	f7ff ff8e 	bl	800b570 <std>
 800b654:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b658:	2202      	movs	r2, #2
 800b65a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b65e:	2112      	movs	r1, #18
 800b660:	f7ff bf86 	b.w	800b570 <std>
 800b664:	20001900 	.word	0x20001900
 800b668:	200017c8 	.word	0x200017c8
 800b66c:	0800b5dd 	.word	0x0800b5dd

0800b670 <__sfp_lock_acquire>:
 800b670:	4801      	ldr	r0, [pc, #4]	; (800b678 <__sfp_lock_acquire+0x8>)
 800b672:	f000 b910 	b.w	800b896 <__retarget_lock_acquire_recursive>
 800b676:	bf00      	nop
 800b678:	20001909 	.word	0x20001909

0800b67c <__sfp_lock_release>:
 800b67c:	4801      	ldr	r0, [pc, #4]	; (800b684 <__sfp_lock_release+0x8>)
 800b67e:	f000 b90b 	b.w	800b898 <__retarget_lock_release_recursive>
 800b682:	bf00      	nop
 800b684:	20001909 	.word	0x20001909

0800b688 <__sinit>:
 800b688:	b510      	push	{r4, lr}
 800b68a:	4604      	mov	r4, r0
 800b68c:	f7ff fff0 	bl	800b670 <__sfp_lock_acquire>
 800b690:	6a23      	ldr	r3, [r4, #32]
 800b692:	b11b      	cbz	r3, 800b69c <__sinit+0x14>
 800b694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b698:	f7ff bff0 	b.w	800b67c <__sfp_lock_release>
 800b69c:	4b04      	ldr	r3, [pc, #16]	; (800b6b0 <__sinit+0x28>)
 800b69e:	6223      	str	r3, [r4, #32]
 800b6a0:	4b04      	ldr	r3, [pc, #16]	; (800b6b4 <__sinit+0x2c>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d1f5      	bne.n	800b694 <__sinit+0xc>
 800b6a8:	f7ff ffc4 	bl	800b634 <global_stdio_init.part.0>
 800b6ac:	e7f2      	b.n	800b694 <__sinit+0xc>
 800b6ae:	bf00      	nop
 800b6b0:	0800b5f5 	.word	0x0800b5f5
 800b6b4:	20001900 	.word	0x20001900

0800b6b8 <_fwalk_sglue>:
 800b6b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6bc:	4607      	mov	r7, r0
 800b6be:	4688      	mov	r8, r1
 800b6c0:	4614      	mov	r4, r2
 800b6c2:	2600      	movs	r6, #0
 800b6c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6c8:	f1b9 0901 	subs.w	r9, r9, #1
 800b6cc:	d505      	bpl.n	800b6da <_fwalk_sglue+0x22>
 800b6ce:	6824      	ldr	r4, [r4, #0]
 800b6d0:	2c00      	cmp	r4, #0
 800b6d2:	d1f7      	bne.n	800b6c4 <_fwalk_sglue+0xc>
 800b6d4:	4630      	mov	r0, r6
 800b6d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6da:	89ab      	ldrh	r3, [r5, #12]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d907      	bls.n	800b6f0 <_fwalk_sglue+0x38>
 800b6e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	d003      	beq.n	800b6f0 <_fwalk_sglue+0x38>
 800b6e8:	4629      	mov	r1, r5
 800b6ea:	4638      	mov	r0, r7
 800b6ec:	47c0      	blx	r8
 800b6ee:	4306      	orrs	r6, r0
 800b6f0:	3568      	adds	r5, #104	; 0x68
 800b6f2:	e7e9      	b.n	800b6c8 <_fwalk_sglue+0x10>

0800b6f4 <__sread>:
 800b6f4:	b510      	push	{r4, lr}
 800b6f6:	460c      	mov	r4, r1
 800b6f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6fc:	f000 f86c 	bl	800b7d8 <_read_r>
 800b700:	2800      	cmp	r0, #0
 800b702:	bfab      	itete	ge
 800b704:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b706:	89a3      	ldrhlt	r3, [r4, #12]
 800b708:	181b      	addge	r3, r3, r0
 800b70a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b70e:	bfac      	ite	ge
 800b710:	6563      	strge	r3, [r4, #84]	; 0x54
 800b712:	81a3      	strhlt	r3, [r4, #12]
 800b714:	bd10      	pop	{r4, pc}

0800b716 <__swrite>:
 800b716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b71a:	461f      	mov	r7, r3
 800b71c:	898b      	ldrh	r3, [r1, #12]
 800b71e:	4605      	mov	r5, r0
 800b720:	05db      	lsls	r3, r3, #23
 800b722:	460c      	mov	r4, r1
 800b724:	4616      	mov	r6, r2
 800b726:	d505      	bpl.n	800b734 <__swrite+0x1e>
 800b728:	2302      	movs	r3, #2
 800b72a:	2200      	movs	r2, #0
 800b72c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b730:	f000 f840 	bl	800b7b4 <_lseek_r>
 800b734:	89a3      	ldrh	r3, [r4, #12]
 800b736:	4632      	mov	r2, r6
 800b738:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b73c:	81a3      	strh	r3, [r4, #12]
 800b73e:	4628      	mov	r0, r5
 800b740:	463b      	mov	r3, r7
 800b742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b74a:	f000 b867 	b.w	800b81c <_write_r>

0800b74e <__sseek>:
 800b74e:	b510      	push	{r4, lr}
 800b750:	460c      	mov	r4, r1
 800b752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b756:	f000 f82d 	bl	800b7b4 <_lseek_r>
 800b75a:	1c43      	adds	r3, r0, #1
 800b75c:	89a3      	ldrh	r3, [r4, #12]
 800b75e:	bf15      	itete	ne
 800b760:	6560      	strne	r0, [r4, #84]	; 0x54
 800b762:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b766:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b76a:	81a3      	strheq	r3, [r4, #12]
 800b76c:	bf18      	it	ne
 800b76e:	81a3      	strhne	r3, [r4, #12]
 800b770:	bd10      	pop	{r4, pc}

0800b772 <__sclose>:
 800b772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b776:	f000 b80d 	b.w	800b794 <_close_r>

0800b77a <memset>:
 800b77a:	4603      	mov	r3, r0
 800b77c:	4402      	add	r2, r0
 800b77e:	4293      	cmp	r3, r2
 800b780:	d100      	bne.n	800b784 <memset+0xa>
 800b782:	4770      	bx	lr
 800b784:	f803 1b01 	strb.w	r1, [r3], #1
 800b788:	e7f9      	b.n	800b77e <memset+0x4>
	...

0800b78c <_localeconv_r>:
 800b78c:	4800      	ldr	r0, [pc, #0]	; (800b790 <_localeconv_r+0x4>)
 800b78e:	4770      	bx	lr
 800b790:	200002fc 	.word	0x200002fc

0800b794 <_close_r>:
 800b794:	b538      	push	{r3, r4, r5, lr}
 800b796:	2300      	movs	r3, #0
 800b798:	4d05      	ldr	r5, [pc, #20]	; (800b7b0 <_close_r+0x1c>)
 800b79a:	4604      	mov	r4, r0
 800b79c:	4608      	mov	r0, r1
 800b79e:	602b      	str	r3, [r5, #0]
 800b7a0:	f7f7 f8b0 	bl	8002904 <_close>
 800b7a4:	1c43      	adds	r3, r0, #1
 800b7a6:	d102      	bne.n	800b7ae <_close_r+0x1a>
 800b7a8:	682b      	ldr	r3, [r5, #0]
 800b7aa:	b103      	cbz	r3, 800b7ae <_close_r+0x1a>
 800b7ac:	6023      	str	r3, [r4, #0]
 800b7ae:	bd38      	pop	{r3, r4, r5, pc}
 800b7b0:	20001904 	.word	0x20001904

0800b7b4 <_lseek_r>:
 800b7b4:	b538      	push	{r3, r4, r5, lr}
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	4608      	mov	r0, r1
 800b7ba:	4611      	mov	r1, r2
 800b7bc:	2200      	movs	r2, #0
 800b7be:	4d05      	ldr	r5, [pc, #20]	; (800b7d4 <_lseek_r+0x20>)
 800b7c0:	602a      	str	r2, [r5, #0]
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	f7f7 f8c2 	bl	800294c <_lseek>
 800b7c8:	1c43      	adds	r3, r0, #1
 800b7ca:	d102      	bne.n	800b7d2 <_lseek_r+0x1e>
 800b7cc:	682b      	ldr	r3, [r5, #0]
 800b7ce:	b103      	cbz	r3, 800b7d2 <_lseek_r+0x1e>
 800b7d0:	6023      	str	r3, [r4, #0]
 800b7d2:	bd38      	pop	{r3, r4, r5, pc}
 800b7d4:	20001904 	.word	0x20001904

0800b7d8 <_read_r>:
 800b7d8:	b538      	push	{r3, r4, r5, lr}
 800b7da:	4604      	mov	r4, r0
 800b7dc:	4608      	mov	r0, r1
 800b7de:	4611      	mov	r1, r2
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	4d05      	ldr	r5, [pc, #20]	; (800b7f8 <_read_r+0x20>)
 800b7e4:	602a      	str	r2, [r5, #0]
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	f7f7 f853 	bl	8002892 <_read>
 800b7ec:	1c43      	adds	r3, r0, #1
 800b7ee:	d102      	bne.n	800b7f6 <_read_r+0x1e>
 800b7f0:	682b      	ldr	r3, [r5, #0]
 800b7f2:	b103      	cbz	r3, 800b7f6 <_read_r+0x1e>
 800b7f4:	6023      	str	r3, [r4, #0]
 800b7f6:	bd38      	pop	{r3, r4, r5, pc}
 800b7f8:	20001904 	.word	0x20001904

0800b7fc <_sbrk_r>:
 800b7fc:	b538      	push	{r3, r4, r5, lr}
 800b7fe:	2300      	movs	r3, #0
 800b800:	4d05      	ldr	r5, [pc, #20]	; (800b818 <_sbrk_r+0x1c>)
 800b802:	4604      	mov	r4, r0
 800b804:	4608      	mov	r0, r1
 800b806:	602b      	str	r3, [r5, #0]
 800b808:	f7f7 f8ac 	bl	8002964 <_sbrk>
 800b80c:	1c43      	adds	r3, r0, #1
 800b80e:	d102      	bne.n	800b816 <_sbrk_r+0x1a>
 800b810:	682b      	ldr	r3, [r5, #0]
 800b812:	b103      	cbz	r3, 800b816 <_sbrk_r+0x1a>
 800b814:	6023      	str	r3, [r4, #0]
 800b816:	bd38      	pop	{r3, r4, r5, pc}
 800b818:	20001904 	.word	0x20001904

0800b81c <_write_r>:
 800b81c:	b538      	push	{r3, r4, r5, lr}
 800b81e:	4604      	mov	r4, r0
 800b820:	4608      	mov	r0, r1
 800b822:	4611      	mov	r1, r2
 800b824:	2200      	movs	r2, #0
 800b826:	4d05      	ldr	r5, [pc, #20]	; (800b83c <_write_r+0x20>)
 800b828:	602a      	str	r2, [r5, #0]
 800b82a:	461a      	mov	r2, r3
 800b82c:	f7f7 f84e 	bl	80028cc <_write>
 800b830:	1c43      	adds	r3, r0, #1
 800b832:	d102      	bne.n	800b83a <_write_r+0x1e>
 800b834:	682b      	ldr	r3, [r5, #0]
 800b836:	b103      	cbz	r3, 800b83a <_write_r+0x1e>
 800b838:	6023      	str	r3, [r4, #0]
 800b83a:	bd38      	pop	{r3, r4, r5, pc}
 800b83c:	20001904 	.word	0x20001904

0800b840 <__errno>:
 800b840:	4b01      	ldr	r3, [pc, #4]	; (800b848 <__errno+0x8>)
 800b842:	6818      	ldr	r0, [r3, #0]
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	20000208 	.word	0x20000208

0800b84c <__libc_init_array>:
 800b84c:	b570      	push	{r4, r5, r6, lr}
 800b84e:	2600      	movs	r6, #0
 800b850:	4d0c      	ldr	r5, [pc, #48]	; (800b884 <__libc_init_array+0x38>)
 800b852:	4c0d      	ldr	r4, [pc, #52]	; (800b888 <__libc_init_array+0x3c>)
 800b854:	1b64      	subs	r4, r4, r5
 800b856:	10a4      	asrs	r4, r4, #2
 800b858:	42a6      	cmp	r6, r4
 800b85a:	d109      	bne.n	800b870 <__libc_init_array+0x24>
 800b85c:	f002 f806 	bl	800d86c <_init>
 800b860:	2600      	movs	r6, #0
 800b862:	4d0a      	ldr	r5, [pc, #40]	; (800b88c <__libc_init_array+0x40>)
 800b864:	4c0a      	ldr	r4, [pc, #40]	; (800b890 <__libc_init_array+0x44>)
 800b866:	1b64      	subs	r4, r4, r5
 800b868:	10a4      	asrs	r4, r4, #2
 800b86a:	42a6      	cmp	r6, r4
 800b86c:	d105      	bne.n	800b87a <__libc_init_array+0x2e>
 800b86e:	bd70      	pop	{r4, r5, r6, pc}
 800b870:	f855 3b04 	ldr.w	r3, [r5], #4
 800b874:	4798      	blx	r3
 800b876:	3601      	adds	r6, #1
 800b878:	e7ee      	b.n	800b858 <__libc_init_array+0xc>
 800b87a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b87e:	4798      	blx	r3
 800b880:	3601      	adds	r6, #1
 800b882:	e7f2      	b.n	800b86a <__libc_init_array+0x1e>
 800b884:	0800e064 	.word	0x0800e064
 800b888:	0800e064 	.word	0x0800e064
 800b88c:	0800e064 	.word	0x0800e064
 800b890:	0800e068 	.word	0x0800e068

0800b894 <__retarget_lock_init_recursive>:
 800b894:	4770      	bx	lr

0800b896 <__retarget_lock_acquire_recursive>:
 800b896:	4770      	bx	lr

0800b898 <__retarget_lock_release_recursive>:
 800b898:	4770      	bx	lr

0800b89a <memchr>:
 800b89a:	4603      	mov	r3, r0
 800b89c:	b510      	push	{r4, lr}
 800b89e:	b2c9      	uxtb	r1, r1
 800b8a0:	4402      	add	r2, r0
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	d101      	bne.n	800b8ac <memchr+0x12>
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	e003      	b.n	800b8b4 <memchr+0x1a>
 800b8ac:	7804      	ldrb	r4, [r0, #0]
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	428c      	cmp	r4, r1
 800b8b2:	d1f6      	bne.n	800b8a2 <memchr+0x8>
 800b8b4:	bd10      	pop	{r4, pc}

0800b8b6 <quorem>:
 800b8b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ba:	6903      	ldr	r3, [r0, #16]
 800b8bc:	690c      	ldr	r4, [r1, #16]
 800b8be:	4607      	mov	r7, r0
 800b8c0:	42a3      	cmp	r3, r4
 800b8c2:	db7f      	blt.n	800b9c4 <quorem+0x10e>
 800b8c4:	3c01      	subs	r4, #1
 800b8c6:	f100 0514 	add.w	r5, r0, #20
 800b8ca:	f101 0814 	add.w	r8, r1, #20
 800b8ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b8d2:	9301      	str	r3, [sp, #4]
 800b8d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b8d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b8dc:	3301      	adds	r3, #1
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b8e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b8e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b8ec:	d331      	bcc.n	800b952 <quorem+0x9c>
 800b8ee:	f04f 0e00 	mov.w	lr, #0
 800b8f2:	4640      	mov	r0, r8
 800b8f4:	46ac      	mov	ip, r5
 800b8f6:	46f2      	mov	sl, lr
 800b8f8:	f850 2b04 	ldr.w	r2, [r0], #4
 800b8fc:	b293      	uxth	r3, r2
 800b8fe:	fb06 e303 	mla	r3, r6, r3, lr
 800b902:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b906:	0c1a      	lsrs	r2, r3, #16
 800b908:	b29b      	uxth	r3, r3
 800b90a:	fb06 220e 	mla	r2, r6, lr, r2
 800b90e:	ebaa 0303 	sub.w	r3, sl, r3
 800b912:	f8dc a000 	ldr.w	sl, [ip]
 800b916:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b91a:	fa1f fa8a 	uxth.w	sl, sl
 800b91e:	4453      	add	r3, sl
 800b920:	f8dc a000 	ldr.w	sl, [ip]
 800b924:	b292      	uxth	r2, r2
 800b926:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b92a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b92e:	b29b      	uxth	r3, r3
 800b930:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b934:	4581      	cmp	r9, r0
 800b936:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b93a:	f84c 3b04 	str.w	r3, [ip], #4
 800b93e:	d2db      	bcs.n	800b8f8 <quorem+0x42>
 800b940:	f855 300b 	ldr.w	r3, [r5, fp]
 800b944:	b92b      	cbnz	r3, 800b952 <quorem+0x9c>
 800b946:	9b01      	ldr	r3, [sp, #4]
 800b948:	3b04      	subs	r3, #4
 800b94a:	429d      	cmp	r5, r3
 800b94c:	461a      	mov	r2, r3
 800b94e:	d32d      	bcc.n	800b9ac <quorem+0xf6>
 800b950:	613c      	str	r4, [r7, #16]
 800b952:	4638      	mov	r0, r7
 800b954:	f001 f8de 	bl	800cb14 <__mcmp>
 800b958:	2800      	cmp	r0, #0
 800b95a:	db23      	blt.n	800b9a4 <quorem+0xee>
 800b95c:	4629      	mov	r1, r5
 800b95e:	2000      	movs	r0, #0
 800b960:	3601      	adds	r6, #1
 800b962:	f858 2b04 	ldr.w	r2, [r8], #4
 800b966:	f8d1 c000 	ldr.w	ip, [r1]
 800b96a:	b293      	uxth	r3, r2
 800b96c:	1ac3      	subs	r3, r0, r3
 800b96e:	0c12      	lsrs	r2, r2, #16
 800b970:	fa1f f08c 	uxth.w	r0, ip
 800b974:	4403      	add	r3, r0
 800b976:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b97a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b97e:	b29b      	uxth	r3, r3
 800b980:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b984:	45c1      	cmp	r9, r8
 800b986:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b98a:	f841 3b04 	str.w	r3, [r1], #4
 800b98e:	d2e8      	bcs.n	800b962 <quorem+0xac>
 800b990:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b994:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b998:	b922      	cbnz	r2, 800b9a4 <quorem+0xee>
 800b99a:	3b04      	subs	r3, #4
 800b99c:	429d      	cmp	r5, r3
 800b99e:	461a      	mov	r2, r3
 800b9a0:	d30a      	bcc.n	800b9b8 <quorem+0x102>
 800b9a2:	613c      	str	r4, [r7, #16]
 800b9a4:	4630      	mov	r0, r6
 800b9a6:	b003      	add	sp, #12
 800b9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ac:	6812      	ldr	r2, [r2, #0]
 800b9ae:	3b04      	subs	r3, #4
 800b9b0:	2a00      	cmp	r2, #0
 800b9b2:	d1cd      	bne.n	800b950 <quorem+0x9a>
 800b9b4:	3c01      	subs	r4, #1
 800b9b6:	e7c8      	b.n	800b94a <quorem+0x94>
 800b9b8:	6812      	ldr	r2, [r2, #0]
 800b9ba:	3b04      	subs	r3, #4
 800b9bc:	2a00      	cmp	r2, #0
 800b9be:	d1f0      	bne.n	800b9a2 <quorem+0xec>
 800b9c0:	3c01      	subs	r4, #1
 800b9c2:	e7eb      	b.n	800b99c <quorem+0xe6>
 800b9c4:	2000      	movs	r0, #0
 800b9c6:	e7ee      	b.n	800b9a6 <quorem+0xf0>

0800b9c8 <_dtoa_r>:
 800b9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9cc:	4616      	mov	r6, r2
 800b9ce:	461f      	mov	r7, r3
 800b9d0:	69c4      	ldr	r4, [r0, #28]
 800b9d2:	b099      	sub	sp, #100	; 0x64
 800b9d4:	4605      	mov	r5, r0
 800b9d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b9da:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b9de:	b974      	cbnz	r4, 800b9fe <_dtoa_r+0x36>
 800b9e0:	2010      	movs	r0, #16
 800b9e2:	f7ff f8ab 	bl	800ab3c <malloc>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	61e8      	str	r0, [r5, #28]
 800b9ea:	b920      	cbnz	r0, 800b9f6 <_dtoa_r+0x2e>
 800b9ec:	21ef      	movs	r1, #239	; 0xef
 800b9ee:	4bac      	ldr	r3, [pc, #688]	; (800bca0 <_dtoa_r+0x2d8>)
 800b9f0:	48ac      	ldr	r0, [pc, #688]	; (800bca4 <_dtoa_r+0x2dc>)
 800b9f2:	f001 fa45 	bl	800ce80 <__assert_func>
 800b9f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9fa:	6004      	str	r4, [r0, #0]
 800b9fc:	60c4      	str	r4, [r0, #12]
 800b9fe:	69eb      	ldr	r3, [r5, #28]
 800ba00:	6819      	ldr	r1, [r3, #0]
 800ba02:	b151      	cbz	r1, 800ba1a <_dtoa_r+0x52>
 800ba04:	685a      	ldr	r2, [r3, #4]
 800ba06:	2301      	movs	r3, #1
 800ba08:	4093      	lsls	r3, r2
 800ba0a:	604a      	str	r2, [r1, #4]
 800ba0c:	608b      	str	r3, [r1, #8]
 800ba0e:	4628      	mov	r0, r5
 800ba10:	f000 fe46 	bl	800c6a0 <_Bfree>
 800ba14:	2200      	movs	r2, #0
 800ba16:	69eb      	ldr	r3, [r5, #28]
 800ba18:	601a      	str	r2, [r3, #0]
 800ba1a:	1e3b      	subs	r3, r7, #0
 800ba1c:	bfaf      	iteee	ge
 800ba1e:	2300      	movge	r3, #0
 800ba20:	2201      	movlt	r2, #1
 800ba22:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ba26:	9305      	strlt	r3, [sp, #20]
 800ba28:	bfa8      	it	ge
 800ba2a:	f8c8 3000 	strge.w	r3, [r8]
 800ba2e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800ba32:	4b9d      	ldr	r3, [pc, #628]	; (800bca8 <_dtoa_r+0x2e0>)
 800ba34:	bfb8      	it	lt
 800ba36:	f8c8 2000 	strlt.w	r2, [r8]
 800ba3a:	ea33 0309 	bics.w	r3, r3, r9
 800ba3e:	d119      	bne.n	800ba74 <_dtoa_r+0xac>
 800ba40:	f242 730f 	movw	r3, #9999	; 0x270f
 800ba44:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ba46:	6013      	str	r3, [r2, #0]
 800ba48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba4c:	4333      	orrs	r3, r6
 800ba4e:	f000 8589 	beq.w	800c564 <_dtoa_r+0xb9c>
 800ba52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ba54:	b953      	cbnz	r3, 800ba6c <_dtoa_r+0xa4>
 800ba56:	4b95      	ldr	r3, [pc, #596]	; (800bcac <_dtoa_r+0x2e4>)
 800ba58:	e023      	b.n	800baa2 <_dtoa_r+0xda>
 800ba5a:	4b95      	ldr	r3, [pc, #596]	; (800bcb0 <_dtoa_r+0x2e8>)
 800ba5c:	9303      	str	r3, [sp, #12]
 800ba5e:	3308      	adds	r3, #8
 800ba60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ba62:	6013      	str	r3, [r2, #0]
 800ba64:	9803      	ldr	r0, [sp, #12]
 800ba66:	b019      	add	sp, #100	; 0x64
 800ba68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba6c:	4b8f      	ldr	r3, [pc, #572]	; (800bcac <_dtoa_r+0x2e4>)
 800ba6e:	9303      	str	r3, [sp, #12]
 800ba70:	3303      	adds	r3, #3
 800ba72:	e7f5      	b.n	800ba60 <_dtoa_r+0x98>
 800ba74:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ba78:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800ba7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ba80:	2200      	movs	r2, #0
 800ba82:	2300      	movs	r3, #0
 800ba84:	f7f4 ffcc 	bl	8000a20 <__aeabi_dcmpeq>
 800ba88:	4680      	mov	r8, r0
 800ba8a:	b160      	cbz	r0, 800baa6 <_dtoa_r+0xde>
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800ba90:	6013      	str	r3, [r2, #0]
 800ba92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	f000 8562 	beq.w	800c55e <_dtoa_r+0xb96>
 800ba9a:	4b86      	ldr	r3, [pc, #536]	; (800bcb4 <_dtoa_r+0x2ec>)
 800ba9c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800ba9e:	6013      	str	r3, [r2, #0]
 800baa0:	3b01      	subs	r3, #1
 800baa2:	9303      	str	r3, [sp, #12]
 800baa4:	e7de      	b.n	800ba64 <_dtoa_r+0x9c>
 800baa6:	ab16      	add	r3, sp, #88	; 0x58
 800baa8:	9301      	str	r3, [sp, #4]
 800baaa:	ab17      	add	r3, sp, #92	; 0x5c
 800baac:	9300      	str	r3, [sp, #0]
 800baae:	4628      	mov	r0, r5
 800bab0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bab4:	f001 f8d6 	bl	800cc64 <__d2b>
 800bab8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800babc:	4682      	mov	sl, r0
 800babe:	2c00      	cmp	r4, #0
 800bac0:	d07e      	beq.n	800bbc0 <_dtoa_r+0x1f8>
 800bac2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bac6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bac8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800bacc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bad0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bad4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bad8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800badc:	4619      	mov	r1, r3
 800bade:	2200      	movs	r2, #0
 800bae0:	4b75      	ldr	r3, [pc, #468]	; (800bcb8 <_dtoa_r+0x2f0>)
 800bae2:	f7f4 fb7d 	bl	80001e0 <__aeabi_dsub>
 800bae6:	a368      	add	r3, pc, #416	; (adr r3, 800bc88 <_dtoa_r+0x2c0>)
 800bae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baec:	f7f4 fd30 	bl	8000550 <__aeabi_dmul>
 800baf0:	a367      	add	r3, pc, #412	; (adr r3, 800bc90 <_dtoa_r+0x2c8>)
 800baf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf6:	f7f4 fb75 	bl	80001e4 <__adddf3>
 800bafa:	4606      	mov	r6, r0
 800bafc:	4620      	mov	r0, r4
 800bafe:	460f      	mov	r7, r1
 800bb00:	f7f4 fcbc 	bl	800047c <__aeabi_i2d>
 800bb04:	a364      	add	r3, pc, #400	; (adr r3, 800bc98 <_dtoa_r+0x2d0>)
 800bb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0a:	f7f4 fd21 	bl	8000550 <__aeabi_dmul>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	460b      	mov	r3, r1
 800bb12:	4630      	mov	r0, r6
 800bb14:	4639      	mov	r1, r7
 800bb16:	f7f4 fb65 	bl	80001e4 <__adddf3>
 800bb1a:	4606      	mov	r6, r0
 800bb1c:	460f      	mov	r7, r1
 800bb1e:	f7f4 ffc7 	bl	8000ab0 <__aeabi_d2iz>
 800bb22:	2200      	movs	r2, #0
 800bb24:	4683      	mov	fp, r0
 800bb26:	2300      	movs	r3, #0
 800bb28:	4630      	mov	r0, r6
 800bb2a:	4639      	mov	r1, r7
 800bb2c:	f7f4 ff82 	bl	8000a34 <__aeabi_dcmplt>
 800bb30:	b148      	cbz	r0, 800bb46 <_dtoa_r+0x17e>
 800bb32:	4658      	mov	r0, fp
 800bb34:	f7f4 fca2 	bl	800047c <__aeabi_i2d>
 800bb38:	4632      	mov	r2, r6
 800bb3a:	463b      	mov	r3, r7
 800bb3c:	f7f4 ff70 	bl	8000a20 <__aeabi_dcmpeq>
 800bb40:	b908      	cbnz	r0, 800bb46 <_dtoa_r+0x17e>
 800bb42:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bb46:	f1bb 0f16 	cmp.w	fp, #22
 800bb4a:	d857      	bhi.n	800bbfc <_dtoa_r+0x234>
 800bb4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bb50:	4b5a      	ldr	r3, [pc, #360]	; (800bcbc <_dtoa_r+0x2f4>)
 800bb52:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bb56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb5a:	f7f4 ff6b 	bl	8000a34 <__aeabi_dcmplt>
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	d04e      	beq.n	800bc00 <_dtoa_r+0x238>
 800bb62:	2300      	movs	r3, #0
 800bb64:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bb68:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb6a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bb6c:	1b1b      	subs	r3, r3, r4
 800bb6e:	1e5a      	subs	r2, r3, #1
 800bb70:	bf46      	itte	mi
 800bb72:	f1c3 0901 	rsbmi	r9, r3, #1
 800bb76:	2300      	movmi	r3, #0
 800bb78:	f04f 0900 	movpl.w	r9, #0
 800bb7c:	9209      	str	r2, [sp, #36]	; 0x24
 800bb7e:	bf48      	it	mi
 800bb80:	9309      	strmi	r3, [sp, #36]	; 0x24
 800bb82:	f1bb 0f00 	cmp.w	fp, #0
 800bb86:	db3d      	blt.n	800bc04 <_dtoa_r+0x23c>
 800bb88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb8a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800bb8e:	445b      	add	r3, fp
 800bb90:	9309      	str	r3, [sp, #36]	; 0x24
 800bb92:	2300      	movs	r3, #0
 800bb94:	930a      	str	r3, [sp, #40]	; 0x28
 800bb96:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bb98:	2b09      	cmp	r3, #9
 800bb9a:	d867      	bhi.n	800bc6c <_dtoa_r+0x2a4>
 800bb9c:	2b05      	cmp	r3, #5
 800bb9e:	bfc4      	itt	gt
 800bba0:	3b04      	subgt	r3, #4
 800bba2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800bba4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bba6:	bfc8      	it	gt
 800bba8:	2400      	movgt	r4, #0
 800bbaa:	f1a3 0302 	sub.w	r3, r3, #2
 800bbae:	bfd8      	it	le
 800bbb0:	2401      	movle	r4, #1
 800bbb2:	2b03      	cmp	r3, #3
 800bbb4:	f200 8086 	bhi.w	800bcc4 <_dtoa_r+0x2fc>
 800bbb8:	e8df f003 	tbb	[pc, r3]
 800bbbc:	5637392c 	.word	0x5637392c
 800bbc0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800bbc4:	441c      	add	r4, r3
 800bbc6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800bbca:	2b20      	cmp	r3, #32
 800bbcc:	bfc1      	itttt	gt
 800bbce:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bbd2:	fa09 f903 	lslgt.w	r9, r9, r3
 800bbd6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800bbda:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bbde:	bfd6      	itet	le
 800bbe0:	f1c3 0320 	rsble	r3, r3, #32
 800bbe4:	ea49 0003 	orrgt.w	r0, r9, r3
 800bbe8:	fa06 f003 	lslle.w	r0, r6, r3
 800bbec:	f7f4 fc36 	bl	800045c <__aeabi_ui2d>
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bbf6:	3c01      	subs	r4, #1
 800bbf8:	9213      	str	r2, [sp, #76]	; 0x4c
 800bbfa:	e76f      	b.n	800badc <_dtoa_r+0x114>
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e7b3      	b.n	800bb68 <_dtoa_r+0x1a0>
 800bc00:	900f      	str	r0, [sp, #60]	; 0x3c
 800bc02:	e7b2      	b.n	800bb6a <_dtoa_r+0x1a2>
 800bc04:	f1cb 0300 	rsb	r3, fp, #0
 800bc08:	930a      	str	r3, [sp, #40]	; 0x28
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	eba9 090b 	sub.w	r9, r9, fp
 800bc10:	930e      	str	r3, [sp, #56]	; 0x38
 800bc12:	e7c0      	b.n	800bb96 <_dtoa_r+0x1ce>
 800bc14:	2300      	movs	r3, #0
 800bc16:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	dc55      	bgt.n	800bcca <_dtoa_r+0x302>
 800bc1e:	2301      	movs	r3, #1
 800bc20:	461a      	mov	r2, r3
 800bc22:	9306      	str	r3, [sp, #24]
 800bc24:	9308      	str	r3, [sp, #32]
 800bc26:	9223      	str	r2, [sp, #140]	; 0x8c
 800bc28:	e00b      	b.n	800bc42 <_dtoa_r+0x27a>
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	e7f3      	b.n	800bc16 <_dtoa_r+0x24e>
 800bc2e:	2300      	movs	r3, #0
 800bc30:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bc34:	445b      	add	r3, fp
 800bc36:	9306      	str	r3, [sp, #24]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	9308      	str	r3, [sp, #32]
 800bc3e:	bfb8      	it	lt
 800bc40:	2301      	movlt	r3, #1
 800bc42:	2100      	movs	r1, #0
 800bc44:	2204      	movs	r2, #4
 800bc46:	69e8      	ldr	r0, [r5, #28]
 800bc48:	f102 0614 	add.w	r6, r2, #20
 800bc4c:	429e      	cmp	r6, r3
 800bc4e:	d940      	bls.n	800bcd2 <_dtoa_r+0x30a>
 800bc50:	6041      	str	r1, [r0, #4]
 800bc52:	4628      	mov	r0, r5
 800bc54:	f000 fce4 	bl	800c620 <_Balloc>
 800bc58:	9003      	str	r0, [sp, #12]
 800bc5a:	2800      	cmp	r0, #0
 800bc5c:	d13c      	bne.n	800bcd8 <_dtoa_r+0x310>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	f240 11af 	movw	r1, #431	; 0x1af
 800bc64:	4b16      	ldr	r3, [pc, #88]	; (800bcc0 <_dtoa_r+0x2f8>)
 800bc66:	e6c3      	b.n	800b9f0 <_dtoa_r+0x28>
 800bc68:	2301      	movs	r3, #1
 800bc6a:	e7e1      	b.n	800bc30 <_dtoa_r+0x268>
 800bc6c:	2401      	movs	r4, #1
 800bc6e:	2300      	movs	r3, #0
 800bc70:	940b      	str	r4, [sp, #44]	; 0x2c
 800bc72:	9322      	str	r3, [sp, #136]	; 0x88
 800bc74:	f04f 33ff 	mov.w	r3, #4294967295
 800bc78:	2200      	movs	r2, #0
 800bc7a:	9306      	str	r3, [sp, #24]
 800bc7c:	9308      	str	r3, [sp, #32]
 800bc7e:	2312      	movs	r3, #18
 800bc80:	e7d1      	b.n	800bc26 <_dtoa_r+0x25e>
 800bc82:	bf00      	nop
 800bc84:	f3af 8000 	nop.w
 800bc88:	636f4361 	.word	0x636f4361
 800bc8c:	3fd287a7 	.word	0x3fd287a7
 800bc90:	8b60c8b3 	.word	0x8b60c8b3
 800bc94:	3fc68a28 	.word	0x3fc68a28
 800bc98:	509f79fb 	.word	0x509f79fb
 800bc9c:	3fd34413 	.word	0x3fd34413
 800bca0:	0800dd2d 	.word	0x0800dd2d
 800bca4:	0800dd44 	.word	0x0800dd44
 800bca8:	7ff00000 	.word	0x7ff00000
 800bcac:	0800dd29 	.word	0x0800dd29
 800bcb0:	0800dd20 	.word	0x0800dd20
 800bcb4:	0800dcfd 	.word	0x0800dcfd
 800bcb8:	3ff80000 	.word	0x3ff80000
 800bcbc:	0800de30 	.word	0x0800de30
 800bcc0:	0800dd9c 	.word	0x0800dd9c
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bcc8:	e7d4      	b.n	800bc74 <_dtoa_r+0x2ac>
 800bcca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bccc:	9306      	str	r3, [sp, #24]
 800bcce:	9308      	str	r3, [sp, #32]
 800bcd0:	e7b7      	b.n	800bc42 <_dtoa_r+0x27a>
 800bcd2:	3101      	adds	r1, #1
 800bcd4:	0052      	lsls	r2, r2, #1
 800bcd6:	e7b7      	b.n	800bc48 <_dtoa_r+0x280>
 800bcd8:	69eb      	ldr	r3, [r5, #28]
 800bcda:	9a03      	ldr	r2, [sp, #12]
 800bcdc:	601a      	str	r2, [r3, #0]
 800bcde:	9b08      	ldr	r3, [sp, #32]
 800bce0:	2b0e      	cmp	r3, #14
 800bce2:	f200 80a8 	bhi.w	800be36 <_dtoa_r+0x46e>
 800bce6:	2c00      	cmp	r4, #0
 800bce8:	f000 80a5 	beq.w	800be36 <_dtoa_r+0x46e>
 800bcec:	f1bb 0f00 	cmp.w	fp, #0
 800bcf0:	dd34      	ble.n	800bd5c <_dtoa_r+0x394>
 800bcf2:	4b9a      	ldr	r3, [pc, #616]	; (800bf5c <_dtoa_r+0x594>)
 800bcf4:	f00b 020f 	and.w	r2, fp, #15
 800bcf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bcfc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bd00:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bd04:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bd08:	ea4f 142b 	mov.w	r4, fp, asr #4
 800bd0c:	d016      	beq.n	800bd3c <_dtoa_r+0x374>
 800bd0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd12:	4b93      	ldr	r3, [pc, #588]	; (800bf60 <_dtoa_r+0x598>)
 800bd14:	2703      	movs	r7, #3
 800bd16:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bd1a:	f7f4 fd43 	bl	80007a4 <__aeabi_ddiv>
 800bd1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd22:	f004 040f 	and.w	r4, r4, #15
 800bd26:	4e8e      	ldr	r6, [pc, #568]	; (800bf60 <_dtoa_r+0x598>)
 800bd28:	b954      	cbnz	r4, 800bd40 <_dtoa_r+0x378>
 800bd2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bd2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd32:	f7f4 fd37 	bl	80007a4 <__aeabi_ddiv>
 800bd36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd3a:	e029      	b.n	800bd90 <_dtoa_r+0x3c8>
 800bd3c:	2702      	movs	r7, #2
 800bd3e:	e7f2      	b.n	800bd26 <_dtoa_r+0x35e>
 800bd40:	07e1      	lsls	r1, r4, #31
 800bd42:	d508      	bpl.n	800bd56 <_dtoa_r+0x38e>
 800bd44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bd48:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bd4c:	f7f4 fc00 	bl	8000550 <__aeabi_dmul>
 800bd50:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bd54:	3701      	adds	r7, #1
 800bd56:	1064      	asrs	r4, r4, #1
 800bd58:	3608      	adds	r6, #8
 800bd5a:	e7e5      	b.n	800bd28 <_dtoa_r+0x360>
 800bd5c:	f000 80a5 	beq.w	800beaa <_dtoa_r+0x4e2>
 800bd60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bd64:	f1cb 0400 	rsb	r4, fp, #0
 800bd68:	4b7c      	ldr	r3, [pc, #496]	; (800bf5c <_dtoa_r+0x594>)
 800bd6a:	f004 020f 	and.w	r2, r4, #15
 800bd6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd76:	f7f4 fbeb 	bl	8000550 <__aeabi_dmul>
 800bd7a:	2702      	movs	r7, #2
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd82:	4e77      	ldr	r6, [pc, #476]	; (800bf60 <_dtoa_r+0x598>)
 800bd84:	1124      	asrs	r4, r4, #4
 800bd86:	2c00      	cmp	r4, #0
 800bd88:	f040 8084 	bne.w	800be94 <_dtoa_r+0x4cc>
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d1d2      	bne.n	800bd36 <_dtoa_r+0x36e>
 800bd90:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bd94:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bd98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f000 8087 	beq.w	800beae <_dtoa_r+0x4e6>
 800bda0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bda4:	2200      	movs	r2, #0
 800bda6:	4b6f      	ldr	r3, [pc, #444]	; (800bf64 <_dtoa_r+0x59c>)
 800bda8:	f7f4 fe44 	bl	8000a34 <__aeabi_dcmplt>
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d07e      	beq.n	800beae <_dtoa_r+0x4e6>
 800bdb0:	9b08      	ldr	r3, [sp, #32]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d07b      	beq.n	800beae <_dtoa_r+0x4e6>
 800bdb6:	9b06      	ldr	r3, [sp, #24]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	dd38      	ble.n	800be2e <_dtoa_r+0x466>
 800bdbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	4b69      	ldr	r3, [pc, #420]	; (800bf68 <_dtoa_r+0x5a0>)
 800bdc4:	f7f4 fbc4 	bl	8000550 <__aeabi_dmul>
 800bdc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bdcc:	9c06      	ldr	r4, [sp, #24]
 800bdce:	f10b 38ff 	add.w	r8, fp, #4294967295
 800bdd2:	3701      	adds	r7, #1
 800bdd4:	4638      	mov	r0, r7
 800bdd6:	f7f4 fb51 	bl	800047c <__aeabi_i2d>
 800bdda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdde:	f7f4 fbb7 	bl	8000550 <__aeabi_dmul>
 800bde2:	2200      	movs	r2, #0
 800bde4:	4b61      	ldr	r3, [pc, #388]	; (800bf6c <_dtoa_r+0x5a4>)
 800bde6:	f7f4 f9fd 	bl	80001e4 <__adddf3>
 800bdea:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bdee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bdf2:	9611      	str	r6, [sp, #68]	; 0x44
 800bdf4:	2c00      	cmp	r4, #0
 800bdf6:	d15d      	bne.n	800beb4 <_dtoa_r+0x4ec>
 800bdf8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	4b5c      	ldr	r3, [pc, #368]	; (800bf70 <_dtoa_r+0x5a8>)
 800be00:	f7f4 f9ee 	bl	80001e0 <__aeabi_dsub>
 800be04:	4602      	mov	r2, r0
 800be06:	460b      	mov	r3, r1
 800be08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be0c:	4633      	mov	r3, r6
 800be0e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800be10:	f7f4 fe2e 	bl	8000a70 <__aeabi_dcmpgt>
 800be14:	2800      	cmp	r0, #0
 800be16:	f040 8295 	bne.w	800c344 <_dtoa_r+0x97c>
 800be1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800be20:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800be24:	f7f4 fe06 	bl	8000a34 <__aeabi_dcmplt>
 800be28:	2800      	cmp	r0, #0
 800be2a:	f040 8289 	bne.w	800c340 <_dtoa_r+0x978>
 800be2e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800be32:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800be36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be38:	2b00      	cmp	r3, #0
 800be3a:	f2c0 8151 	blt.w	800c0e0 <_dtoa_r+0x718>
 800be3e:	f1bb 0f0e 	cmp.w	fp, #14
 800be42:	f300 814d 	bgt.w	800c0e0 <_dtoa_r+0x718>
 800be46:	4b45      	ldr	r3, [pc, #276]	; (800bf5c <_dtoa_r+0x594>)
 800be48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800be4c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800be50:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800be54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800be56:	2b00      	cmp	r3, #0
 800be58:	f280 80da 	bge.w	800c010 <_dtoa_r+0x648>
 800be5c:	9b08      	ldr	r3, [sp, #32]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	f300 80d6 	bgt.w	800c010 <_dtoa_r+0x648>
 800be64:	f040 826b 	bne.w	800c33e <_dtoa_r+0x976>
 800be68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be6c:	2200      	movs	r2, #0
 800be6e:	4b40      	ldr	r3, [pc, #256]	; (800bf70 <_dtoa_r+0x5a8>)
 800be70:	f7f4 fb6e 	bl	8000550 <__aeabi_dmul>
 800be74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be78:	f7f4 fdf0 	bl	8000a5c <__aeabi_dcmpge>
 800be7c:	9c08      	ldr	r4, [sp, #32]
 800be7e:	4626      	mov	r6, r4
 800be80:	2800      	cmp	r0, #0
 800be82:	f040 8241 	bne.w	800c308 <_dtoa_r+0x940>
 800be86:	2331      	movs	r3, #49	; 0x31
 800be88:	9f03      	ldr	r7, [sp, #12]
 800be8a:	f10b 0b01 	add.w	fp, fp, #1
 800be8e:	f807 3b01 	strb.w	r3, [r7], #1
 800be92:	e23d      	b.n	800c310 <_dtoa_r+0x948>
 800be94:	07e2      	lsls	r2, r4, #31
 800be96:	d505      	bpl.n	800bea4 <_dtoa_r+0x4dc>
 800be98:	e9d6 2300 	ldrd	r2, r3, [r6]
 800be9c:	f7f4 fb58 	bl	8000550 <__aeabi_dmul>
 800bea0:	2301      	movs	r3, #1
 800bea2:	3701      	adds	r7, #1
 800bea4:	1064      	asrs	r4, r4, #1
 800bea6:	3608      	adds	r6, #8
 800bea8:	e76d      	b.n	800bd86 <_dtoa_r+0x3be>
 800beaa:	2702      	movs	r7, #2
 800beac:	e770      	b.n	800bd90 <_dtoa_r+0x3c8>
 800beae:	46d8      	mov	r8, fp
 800beb0:	9c08      	ldr	r4, [sp, #32]
 800beb2:	e78f      	b.n	800bdd4 <_dtoa_r+0x40c>
 800beb4:	9903      	ldr	r1, [sp, #12]
 800beb6:	4b29      	ldr	r3, [pc, #164]	; (800bf5c <_dtoa_r+0x594>)
 800beb8:	4421      	add	r1, r4
 800beba:	9112      	str	r1, [sp, #72]	; 0x48
 800bebc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bebe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bec2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800bec6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800beca:	2900      	cmp	r1, #0
 800becc:	d054      	beq.n	800bf78 <_dtoa_r+0x5b0>
 800bece:	2000      	movs	r0, #0
 800bed0:	4928      	ldr	r1, [pc, #160]	; (800bf74 <_dtoa_r+0x5ac>)
 800bed2:	f7f4 fc67 	bl	80007a4 <__aeabi_ddiv>
 800bed6:	463b      	mov	r3, r7
 800bed8:	4632      	mov	r2, r6
 800beda:	f7f4 f981 	bl	80001e0 <__aeabi_dsub>
 800bede:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bee2:	9f03      	ldr	r7, [sp, #12]
 800bee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bee8:	f7f4 fde2 	bl	8000ab0 <__aeabi_d2iz>
 800beec:	4604      	mov	r4, r0
 800beee:	f7f4 fac5 	bl	800047c <__aeabi_i2d>
 800bef2:	4602      	mov	r2, r0
 800bef4:	460b      	mov	r3, r1
 800bef6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800befa:	f7f4 f971 	bl	80001e0 <__aeabi_dsub>
 800befe:	4602      	mov	r2, r0
 800bf00:	460b      	mov	r3, r1
 800bf02:	3430      	adds	r4, #48	; 0x30
 800bf04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bf08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bf0c:	f807 4b01 	strb.w	r4, [r7], #1
 800bf10:	f7f4 fd90 	bl	8000a34 <__aeabi_dcmplt>
 800bf14:	2800      	cmp	r0, #0
 800bf16:	d173      	bne.n	800c000 <_dtoa_r+0x638>
 800bf18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	4911      	ldr	r1, [pc, #68]	; (800bf64 <_dtoa_r+0x59c>)
 800bf20:	f7f4 f95e 	bl	80001e0 <__aeabi_dsub>
 800bf24:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bf28:	f7f4 fd84 	bl	8000a34 <__aeabi_dcmplt>
 800bf2c:	2800      	cmp	r0, #0
 800bf2e:	f040 80b6 	bne.w	800c09e <_dtoa_r+0x6d6>
 800bf32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf34:	429f      	cmp	r7, r3
 800bf36:	f43f af7a 	beq.w	800be2e <_dtoa_r+0x466>
 800bf3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bf3e:	2200      	movs	r2, #0
 800bf40:	4b09      	ldr	r3, [pc, #36]	; (800bf68 <_dtoa_r+0x5a0>)
 800bf42:	f7f4 fb05 	bl	8000550 <__aeabi_dmul>
 800bf46:	2200      	movs	r2, #0
 800bf48:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bf4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf50:	4b05      	ldr	r3, [pc, #20]	; (800bf68 <_dtoa_r+0x5a0>)
 800bf52:	f7f4 fafd 	bl	8000550 <__aeabi_dmul>
 800bf56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf5a:	e7c3      	b.n	800bee4 <_dtoa_r+0x51c>
 800bf5c:	0800de30 	.word	0x0800de30
 800bf60:	0800de08 	.word	0x0800de08
 800bf64:	3ff00000 	.word	0x3ff00000
 800bf68:	40240000 	.word	0x40240000
 800bf6c:	401c0000 	.word	0x401c0000
 800bf70:	40140000 	.word	0x40140000
 800bf74:	3fe00000 	.word	0x3fe00000
 800bf78:	4630      	mov	r0, r6
 800bf7a:	4639      	mov	r1, r7
 800bf7c:	f7f4 fae8 	bl	8000550 <__aeabi_dmul>
 800bf80:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bf82:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bf86:	9c03      	ldr	r4, [sp, #12]
 800bf88:	9314      	str	r3, [sp, #80]	; 0x50
 800bf8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf8e:	f7f4 fd8f 	bl	8000ab0 <__aeabi_d2iz>
 800bf92:	9015      	str	r0, [sp, #84]	; 0x54
 800bf94:	f7f4 fa72 	bl	800047c <__aeabi_i2d>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfa0:	f7f4 f91e 	bl	80001e0 <__aeabi_dsub>
 800bfa4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bfa6:	4606      	mov	r6, r0
 800bfa8:	3330      	adds	r3, #48	; 0x30
 800bfaa:	f804 3b01 	strb.w	r3, [r4], #1
 800bfae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bfb0:	460f      	mov	r7, r1
 800bfb2:	429c      	cmp	r4, r3
 800bfb4:	f04f 0200 	mov.w	r2, #0
 800bfb8:	d124      	bne.n	800c004 <_dtoa_r+0x63c>
 800bfba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bfbe:	4baf      	ldr	r3, [pc, #700]	; (800c27c <_dtoa_r+0x8b4>)
 800bfc0:	f7f4 f910 	bl	80001e4 <__adddf3>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	460b      	mov	r3, r1
 800bfc8:	4630      	mov	r0, r6
 800bfca:	4639      	mov	r1, r7
 800bfcc:	f7f4 fd50 	bl	8000a70 <__aeabi_dcmpgt>
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	d163      	bne.n	800c09c <_dtoa_r+0x6d4>
 800bfd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bfd8:	2000      	movs	r0, #0
 800bfda:	49a8      	ldr	r1, [pc, #672]	; (800c27c <_dtoa_r+0x8b4>)
 800bfdc:	f7f4 f900 	bl	80001e0 <__aeabi_dsub>
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	460b      	mov	r3, r1
 800bfe4:	4630      	mov	r0, r6
 800bfe6:	4639      	mov	r1, r7
 800bfe8:	f7f4 fd24 	bl	8000a34 <__aeabi_dcmplt>
 800bfec:	2800      	cmp	r0, #0
 800bfee:	f43f af1e 	beq.w	800be2e <_dtoa_r+0x466>
 800bff2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800bff4:	1e7b      	subs	r3, r7, #1
 800bff6:	9314      	str	r3, [sp, #80]	; 0x50
 800bff8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800bffc:	2b30      	cmp	r3, #48	; 0x30
 800bffe:	d0f8      	beq.n	800bff2 <_dtoa_r+0x62a>
 800c000:	46c3      	mov	fp, r8
 800c002:	e03b      	b.n	800c07c <_dtoa_r+0x6b4>
 800c004:	4b9e      	ldr	r3, [pc, #632]	; (800c280 <_dtoa_r+0x8b8>)
 800c006:	f7f4 faa3 	bl	8000550 <__aeabi_dmul>
 800c00a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c00e:	e7bc      	b.n	800bf8a <_dtoa_r+0x5c2>
 800c010:	9f03      	ldr	r7, [sp, #12]
 800c012:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c016:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c01a:	4640      	mov	r0, r8
 800c01c:	4649      	mov	r1, r9
 800c01e:	f7f4 fbc1 	bl	80007a4 <__aeabi_ddiv>
 800c022:	f7f4 fd45 	bl	8000ab0 <__aeabi_d2iz>
 800c026:	4604      	mov	r4, r0
 800c028:	f7f4 fa28 	bl	800047c <__aeabi_i2d>
 800c02c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c030:	f7f4 fa8e 	bl	8000550 <__aeabi_dmul>
 800c034:	4602      	mov	r2, r0
 800c036:	460b      	mov	r3, r1
 800c038:	4640      	mov	r0, r8
 800c03a:	4649      	mov	r1, r9
 800c03c:	f7f4 f8d0 	bl	80001e0 <__aeabi_dsub>
 800c040:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c044:	f807 6b01 	strb.w	r6, [r7], #1
 800c048:	9e03      	ldr	r6, [sp, #12]
 800c04a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c04e:	1bbe      	subs	r6, r7, r6
 800c050:	45b4      	cmp	ip, r6
 800c052:	4602      	mov	r2, r0
 800c054:	460b      	mov	r3, r1
 800c056:	d136      	bne.n	800c0c6 <_dtoa_r+0x6fe>
 800c058:	f7f4 f8c4 	bl	80001e4 <__adddf3>
 800c05c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c060:	4680      	mov	r8, r0
 800c062:	4689      	mov	r9, r1
 800c064:	f7f4 fd04 	bl	8000a70 <__aeabi_dcmpgt>
 800c068:	bb58      	cbnz	r0, 800c0c2 <_dtoa_r+0x6fa>
 800c06a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c06e:	4640      	mov	r0, r8
 800c070:	4649      	mov	r1, r9
 800c072:	f7f4 fcd5 	bl	8000a20 <__aeabi_dcmpeq>
 800c076:	b108      	cbz	r0, 800c07c <_dtoa_r+0x6b4>
 800c078:	07e3      	lsls	r3, r4, #31
 800c07a:	d422      	bmi.n	800c0c2 <_dtoa_r+0x6fa>
 800c07c:	4651      	mov	r1, sl
 800c07e:	4628      	mov	r0, r5
 800c080:	f000 fb0e 	bl	800c6a0 <_Bfree>
 800c084:	2300      	movs	r3, #0
 800c086:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c088:	703b      	strb	r3, [r7, #0]
 800c08a:	f10b 0301 	add.w	r3, fp, #1
 800c08e:	6013      	str	r3, [r2, #0]
 800c090:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c092:	2b00      	cmp	r3, #0
 800c094:	f43f ace6 	beq.w	800ba64 <_dtoa_r+0x9c>
 800c098:	601f      	str	r7, [r3, #0]
 800c09a:	e4e3      	b.n	800ba64 <_dtoa_r+0x9c>
 800c09c:	4627      	mov	r7, r4
 800c09e:	463b      	mov	r3, r7
 800c0a0:	461f      	mov	r7, r3
 800c0a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c0a6:	2a39      	cmp	r2, #57	; 0x39
 800c0a8:	d107      	bne.n	800c0ba <_dtoa_r+0x6f2>
 800c0aa:	9a03      	ldr	r2, [sp, #12]
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d1f7      	bne.n	800c0a0 <_dtoa_r+0x6d8>
 800c0b0:	2230      	movs	r2, #48	; 0x30
 800c0b2:	9903      	ldr	r1, [sp, #12]
 800c0b4:	f108 0801 	add.w	r8, r8, #1
 800c0b8:	700a      	strb	r2, [r1, #0]
 800c0ba:	781a      	ldrb	r2, [r3, #0]
 800c0bc:	3201      	adds	r2, #1
 800c0be:	701a      	strb	r2, [r3, #0]
 800c0c0:	e79e      	b.n	800c000 <_dtoa_r+0x638>
 800c0c2:	46d8      	mov	r8, fp
 800c0c4:	e7eb      	b.n	800c09e <_dtoa_r+0x6d6>
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	4b6d      	ldr	r3, [pc, #436]	; (800c280 <_dtoa_r+0x8b8>)
 800c0ca:	f7f4 fa41 	bl	8000550 <__aeabi_dmul>
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	4680      	mov	r8, r0
 800c0d4:	4689      	mov	r9, r1
 800c0d6:	f7f4 fca3 	bl	8000a20 <__aeabi_dcmpeq>
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	d09b      	beq.n	800c016 <_dtoa_r+0x64e>
 800c0de:	e7cd      	b.n	800c07c <_dtoa_r+0x6b4>
 800c0e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c0e2:	2a00      	cmp	r2, #0
 800c0e4:	f000 80c4 	beq.w	800c270 <_dtoa_r+0x8a8>
 800c0e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c0ea:	2a01      	cmp	r2, #1
 800c0ec:	f300 80a8 	bgt.w	800c240 <_dtoa_r+0x878>
 800c0f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c0f2:	2a00      	cmp	r2, #0
 800c0f4:	f000 80a0 	beq.w	800c238 <_dtoa_r+0x870>
 800c0f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c0fc:	464f      	mov	r7, r9
 800c0fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c102:	2101      	movs	r1, #1
 800c104:	441a      	add	r2, r3
 800c106:	4628      	mov	r0, r5
 800c108:	4499      	add	r9, r3
 800c10a:	9209      	str	r2, [sp, #36]	; 0x24
 800c10c:	f000 fb7e 	bl	800c80c <__i2b>
 800c110:	4606      	mov	r6, r0
 800c112:	b15f      	cbz	r7, 800c12c <_dtoa_r+0x764>
 800c114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c116:	2b00      	cmp	r3, #0
 800c118:	dd08      	ble.n	800c12c <_dtoa_r+0x764>
 800c11a:	42bb      	cmp	r3, r7
 800c11c:	bfa8      	it	ge
 800c11e:	463b      	movge	r3, r7
 800c120:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c122:	eba9 0903 	sub.w	r9, r9, r3
 800c126:	1aff      	subs	r7, r7, r3
 800c128:	1ad3      	subs	r3, r2, r3
 800c12a:	9309      	str	r3, [sp, #36]	; 0x24
 800c12c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c12e:	b1f3      	cbz	r3, 800c16e <_dtoa_r+0x7a6>
 800c130:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c132:	2b00      	cmp	r3, #0
 800c134:	f000 80a0 	beq.w	800c278 <_dtoa_r+0x8b0>
 800c138:	2c00      	cmp	r4, #0
 800c13a:	dd10      	ble.n	800c15e <_dtoa_r+0x796>
 800c13c:	4631      	mov	r1, r6
 800c13e:	4622      	mov	r2, r4
 800c140:	4628      	mov	r0, r5
 800c142:	f000 fc21 	bl	800c988 <__pow5mult>
 800c146:	4652      	mov	r2, sl
 800c148:	4601      	mov	r1, r0
 800c14a:	4606      	mov	r6, r0
 800c14c:	4628      	mov	r0, r5
 800c14e:	f000 fb73 	bl	800c838 <__multiply>
 800c152:	4680      	mov	r8, r0
 800c154:	4651      	mov	r1, sl
 800c156:	4628      	mov	r0, r5
 800c158:	f000 faa2 	bl	800c6a0 <_Bfree>
 800c15c:	46c2      	mov	sl, r8
 800c15e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c160:	1b1a      	subs	r2, r3, r4
 800c162:	d004      	beq.n	800c16e <_dtoa_r+0x7a6>
 800c164:	4651      	mov	r1, sl
 800c166:	4628      	mov	r0, r5
 800c168:	f000 fc0e 	bl	800c988 <__pow5mult>
 800c16c:	4682      	mov	sl, r0
 800c16e:	2101      	movs	r1, #1
 800c170:	4628      	mov	r0, r5
 800c172:	f000 fb4b 	bl	800c80c <__i2b>
 800c176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c178:	4604      	mov	r4, r0
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	f340 8082 	ble.w	800c284 <_dtoa_r+0x8bc>
 800c180:	461a      	mov	r2, r3
 800c182:	4601      	mov	r1, r0
 800c184:	4628      	mov	r0, r5
 800c186:	f000 fbff 	bl	800c988 <__pow5mult>
 800c18a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c18c:	4604      	mov	r4, r0
 800c18e:	2b01      	cmp	r3, #1
 800c190:	dd7b      	ble.n	800c28a <_dtoa_r+0x8c2>
 800c192:	f04f 0800 	mov.w	r8, #0
 800c196:	6923      	ldr	r3, [r4, #16]
 800c198:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c19c:	6918      	ldr	r0, [r3, #16]
 800c19e:	f000 fae7 	bl	800c770 <__hi0bits>
 800c1a2:	f1c0 0020 	rsb	r0, r0, #32
 800c1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1a8:	4418      	add	r0, r3
 800c1aa:	f010 001f 	ands.w	r0, r0, #31
 800c1ae:	f000 8092 	beq.w	800c2d6 <_dtoa_r+0x90e>
 800c1b2:	f1c0 0320 	rsb	r3, r0, #32
 800c1b6:	2b04      	cmp	r3, #4
 800c1b8:	f340 8085 	ble.w	800c2c6 <_dtoa_r+0x8fe>
 800c1bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1be:	f1c0 001c 	rsb	r0, r0, #28
 800c1c2:	4403      	add	r3, r0
 800c1c4:	4481      	add	r9, r0
 800c1c6:	4407      	add	r7, r0
 800c1c8:	9309      	str	r3, [sp, #36]	; 0x24
 800c1ca:	f1b9 0f00 	cmp.w	r9, #0
 800c1ce:	dd05      	ble.n	800c1dc <_dtoa_r+0x814>
 800c1d0:	4651      	mov	r1, sl
 800c1d2:	464a      	mov	r2, r9
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	f000 fc31 	bl	800ca3c <__lshift>
 800c1da:	4682      	mov	sl, r0
 800c1dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	dd05      	ble.n	800c1ee <_dtoa_r+0x826>
 800c1e2:	4621      	mov	r1, r4
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	4628      	mov	r0, r5
 800c1e8:	f000 fc28 	bl	800ca3c <__lshift>
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d072      	beq.n	800c2da <_dtoa_r+0x912>
 800c1f4:	4621      	mov	r1, r4
 800c1f6:	4650      	mov	r0, sl
 800c1f8:	f000 fc8c 	bl	800cb14 <__mcmp>
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	da6c      	bge.n	800c2da <_dtoa_r+0x912>
 800c200:	2300      	movs	r3, #0
 800c202:	4651      	mov	r1, sl
 800c204:	220a      	movs	r2, #10
 800c206:	4628      	mov	r0, r5
 800c208:	f000 fa6c 	bl	800c6e4 <__multadd>
 800c20c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c20e:	4682      	mov	sl, r0
 800c210:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c214:	2b00      	cmp	r3, #0
 800c216:	f000 81ac 	beq.w	800c572 <_dtoa_r+0xbaa>
 800c21a:	2300      	movs	r3, #0
 800c21c:	4631      	mov	r1, r6
 800c21e:	220a      	movs	r2, #10
 800c220:	4628      	mov	r0, r5
 800c222:	f000 fa5f 	bl	800c6e4 <__multadd>
 800c226:	9b06      	ldr	r3, [sp, #24]
 800c228:	4606      	mov	r6, r0
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	f300 8093 	bgt.w	800c356 <_dtoa_r+0x98e>
 800c230:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c232:	2b02      	cmp	r3, #2
 800c234:	dc59      	bgt.n	800c2ea <_dtoa_r+0x922>
 800c236:	e08e      	b.n	800c356 <_dtoa_r+0x98e>
 800c238:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c23a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c23e:	e75d      	b.n	800c0fc <_dtoa_r+0x734>
 800c240:	9b08      	ldr	r3, [sp, #32]
 800c242:	1e5c      	subs	r4, r3, #1
 800c244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c246:	42a3      	cmp	r3, r4
 800c248:	bfbf      	itttt	lt
 800c24a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c24c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800c24e:	1ae3      	sublt	r3, r4, r3
 800c250:	18d2      	addlt	r2, r2, r3
 800c252:	bfa8      	it	ge
 800c254:	1b1c      	subge	r4, r3, r4
 800c256:	9b08      	ldr	r3, [sp, #32]
 800c258:	bfbe      	ittt	lt
 800c25a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c25c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800c25e:	2400      	movlt	r4, #0
 800c260:	2b00      	cmp	r3, #0
 800c262:	bfb5      	itete	lt
 800c264:	eba9 0703 	sublt.w	r7, r9, r3
 800c268:	464f      	movge	r7, r9
 800c26a:	2300      	movlt	r3, #0
 800c26c:	9b08      	ldrge	r3, [sp, #32]
 800c26e:	e747      	b.n	800c100 <_dtoa_r+0x738>
 800c270:	464f      	mov	r7, r9
 800c272:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c274:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c276:	e74c      	b.n	800c112 <_dtoa_r+0x74a>
 800c278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c27a:	e773      	b.n	800c164 <_dtoa_r+0x79c>
 800c27c:	3fe00000 	.word	0x3fe00000
 800c280:	40240000 	.word	0x40240000
 800c284:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c286:	2b01      	cmp	r3, #1
 800c288:	dc18      	bgt.n	800c2bc <_dtoa_r+0x8f4>
 800c28a:	9b04      	ldr	r3, [sp, #16]
 800c28c:	b9b3      	cbnz	r3, 800c2bc <_dtoa_r+0x8f4>
 800c28e:	9b05      	ldr	r3, [sp, #20]
 800c290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c294:	b993      	cbnz	r3, 800c2bc <_dtoa_r+0x8f4>
 800c296:	9b05      	ldr	r3, [sp, #20]
 800c298:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c29c:	0d1b      	lsrs	r3, r3, #20
 800c29e:	051b      	lsls	r3, r3, #20
 800c2a0:	b17b      	cbz	r3, 800c2c2 <_dtoa_r+0x8fa>
 800c2a2:	f04f 0801 	mov.w	r8, #1
 800c2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2a8:	f109 0901 	add.w	r9, r9, #1
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	9309      	str	r3, [sp, #36]	; 0x24
 800c2b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	f47f af6f 	bne.w	800c196 <_dtoa_r+0x7ce>
 800c2b8:	2001      	movs	r0, #1
 800c2ba:	e774      	b.n	800c1a6 <_dtoa_r+0x7de>
 800c2bc:	f04f 0800 	mov.w	r8, #0
 800c2c0:	e7f6      	b.n	800c2b0 <_dtoa_r+0x8e8>
 800c2c2:	4698      	mov	r8, r3
 800c2c4:	e7f4      	b.n	800c2b0 <_dtoa_r+0x8e8>
 800c2c6:	d080      	beq.n	800c1ca <_dtoa_r+0x802>
 800c2c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2ca:	331c      	adds	r3, #28
 800c2cc:	441a      	add	r2, r3
 800c2ce:	4499      	add	r9, r3
 800c2d0:	441f      	add	r7, r3
 800c2d2:	9209      	str	r2, [sp, #36]	; 0x24
 800c2d4:	e779      	b.n	800c1ca <_dtoa_r+0x802>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	e7f6      	b.n	800c2c8 <_dtoa_r+0x900>
 800c2da:	9b08      	ldr	r3, [sp, #32]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	dc34      	bgt.n	800c34a <_dtoa_r+0x982>
 800c2e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c2e2:	2b02      	cmp	r3, #2
 800c2e4:	dd31      	ble.n	800c34a <_dtoa_r+0x982>
 800c2e6:	9b08      	ldr	r3, [sp, #32]
 800c2e8:	9306      	str	r3, [sp, #24]
 800c2ea:	9b06      	ldr	r3, [sp, #24]
 800c2ec:	b963      	cbnz	r3, 800c308 <_dtoa_r+0x940>
 800c2ee:	4621      	mov	r1, r4
 800c2f0:	2205      	movs	r2, #5
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	f000 f9f6 	bl	800c6e4 <__multadd>
 800c2f8:	4601      	mov	r1, r0
 800c2fa:	4604      	mov	r4, r0
 800c2fc:	4650      	mov	r0, sl
 800c2fe:	f000 fc09 	bl	800cb14 <__mcmp>
 800c302:	2800      	cmp	r0, #0
 800c304:	f73f adbf 	bgt.w	800be86 <_dtoa_r+0x4be>
 800c308:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c30a:	9f03      	ldr	r7, [sp, #12]
 800c30c:	ea6f 0b03 	mvn.w	fp, r3
 800c310:	f04f 0800 	mov.w	r8, #0
 800c314:	4621      	mov	r1, r4
 800c316:	4628      	mov	r0, r5
 800c318:	f000 f9c2 	bl	800c6a0 <_Bfree>
 800c31c:	2e00      	cmp	r6, #0
 800c31e:	f43f aead 	beq.w	800c07c <_dtoa_r+0x6b4>
 800c322:	f1b8 0f00 	cmp.w	r8, #0
 800c326:	d005      	beq.n	800c334 <_dtoa_r+0x96c>
 800c328:	45b0      	cmp	r8, r6
 800c32a:	d003      	beq.n	800c334 <_dtoa_r+0x96c>
 800c32c:	4641      	mov	r1, r8
 800c32e:	4628      	mov	r0, r5
 800c330:	f000 f9b6 	bl	800c6a0 <_Bfree>
 800c334:	4631      	mov	r1, r6
 800c336:	4628      	mov	r0, r5
 800c338:	f000 f9b2 	bl	800c6a0 <_Bfree>
 800c33c:	e69e      	b.n	800c07c <_dtoa_r+0x6b4>
 800c33e:	2400      	movs	r4, #0
 800c340:	4626      	mov	r6, r4
 800c342:	e7e1      	b.n	800c308 <_dtoa_r+0x940>
 800c344:	46c3      	mov	fp, r8
 800c346:	4626      	mov	r6, r4
 800c348:	e59d      	b.n	800be86 <_dtoa_r+0x4be>
 800c34a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	f000 80c8 	beq.w	800c4e2 <_dtoa_r+0xb1a>
 800c352:	9b08      	ldr	r3, [sp, #32]
 800c354:	9306      	str	r3, [sp, #24]
 800c356:	2f00      	cmp	r7, #0
 800c358:	dd05      	ble.n	800c366 <_dtoa_r+0x99e>
 800c35a:	4631      	mov	r1, r6
 800c35c:	463a      	mov	r2, r7
 800c35e:	4628      	mov	r0, r5
 800c360:	f000 fb6c 	bl	800ca3c <__lshift>
 800c364:	4606      	mov	r6, r0
 800c366:	f1b8 0f00 	cmp.w	r8, #0
 800c36a:	d05b      	beq.n	800c424 <_dtoa_r+0xa5c>
 800c36c:	4628      	mov	r0, r5
 800c36e:	6871      	ldr	r1, [r6, #4]
 800c370:	f000 f956 	bl	800c620 <_Balloc>
 800c374:	4607      	mov	r7, r0
 800c376:	b928      	cbnz	r0, 800c384 <_dtoa_r+0x9bc>
 800c378:	4602      	mov	r2, r0
 800c37a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c37e:	4b81      	ldr	r3, [pc, #516]	; (800c584 <_dtoa_r+0xbbc>)
 800c380:	f7ff bb36 	b.w	800b9f0 <_dtoa_r+0x28>
 800c384:	6932      	ldr	r2, [r6, #16]
 800c386:	f106 010c 	add.w	r1, r6, #12
 800c38a:	3202      	adds	r2, #2
 800c38c:	0092      	lsls	r2, r2, #2
 800c38e:	300c      	adds	r0, #12
 800c390:	f000 fd68 	bl	800ce64 <memcpy>
 800c394:	2201      	movs	r2, #1
 800c396:	4639      	mov	r1, r7
 800c398:	4628      	mov	r0, r5
 800c39a:	f000 fb4f 	bl	800ca3c <__lshift>
 800c39e:	46b0      	mov	r8, r6
 800c3a0:	4606      	mov	r6, r0
 800c3a2:	9b03      	ldr	r3, [sp, #12]
 800c3a4:	9a03      	ldr	r2, [sp, #12]
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	9308      	str	r3, [sp, #32]
 800c3aa:	9b06      	ldr	r3, [sp, #24]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3b0:	9b04      	ldr	r3, [sp, #16]
 800c3b2:	f003 0301 	and.w	r3, r3, #1
 800c3b6:	930a      	str	r3, [sp, #40]	; 0x28
 800c3b8:	9b08      	ldr	r3, [sp, #32]
 800c3ba:	4621      	mov	r1, r4
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	4650      	mov	r0, sl
 800c3c0:	9304      	str	r3, [sp, #16]
 800c3c2:	f7ff fa78 	bl	800b8b6 <quorem>
 800c3c6:	4641      	mov	r1, r8
 800c3c8:	9006      	str	r0, [sp, #24]
 800c3ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c3ce:	4650      	mov	r0, sl
 800c3d0:	f000 fba0 	bl	800cb14 <__mcmp>
 800c3d4:	4632      	mov	r2, r6
 800c3d6:	9009      	str	r0, [sp, #36]	; 0x24
 800c3d8:	4621      	mov	r1, r4
 800c3da:	4628      	mov	r0, r5
 800c3dc:	f000 fbb6 	bl	800cb4c <__mdiff>
 800c3e0:	68c2      	ldr	r2, [r0, #12]
 800c3e2:	4607      	mov	r7, r0
 800c3e4:	bb02      	cbnz	r2, 800c428 <_dtoa_r+0xa60>
 800c3e6:	4601      	mov	r1, r0
 800c3e8:	4650      	mov	r0, sl
 800c3ea:	f000 fb93 	bl	800cb14 <__mcmp>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	4639      	mov	r1, r7
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	920c      	str	r2, [sp, #48]	; 0x30
 800c3f6:	f000 f953 	bl	800c6a0 <_Bfree>
 800c3fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c3fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c3fe:	9f08      	ldr	r7, [sp, #32]
 800c400:	ea43 0102 	orr.w	r1, r3, r2
 800c404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c406:	4319      	orrs	r1, r3
 800c408:	d110      	bne.n	800c42c <_dtoa_r+0xa64>
 800c40a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c40e:	d029      	beq.n	800c464 <_dtoa_r+0xa9c>
 800c410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c412:	2b00      	cmp	r3, #0
 800c414:	dd02      	ble.n	800c41c <_dtoa_r+0xa54>
 800c416:	9b06      	ldr	r3, [sp, #24]
 800c418:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c41c:	9b04      	ldr	r3, [sp, #16]
 800c41e:	f883 9000 	strb.w	r9, [r3]
 800c422:	e777      	b.n	800c314 <_dtoa_r+0x94c>
 800c424:	4630      	mov	r0, r6
 800c426:	e7ba      	b.n	800c39e <_dtoa_r+0x9d6>
 800c428:	2201      	movs	r2, #1
 800c42a:	e7e1      	b.n	800c3f0 <_dtoa_r+0xa28>
 800c42c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c42e:	2b00      	cmp	r3, #0
 800c430:	db04      	blt.n	800c43c <_dtoa_r+0xa74>
 800c432:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c434:	430b      	orrs	r3, r1
 800c436:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c438:	430b      	orrs	r3, r1
 800c43a:	d120      	bne.n	800c47e <_dtoa_r+0xab6>
 800c43c:	2a00      	cmp	r2, #0
 800c43e:	dded      	ble.n	800c41c <_dtoa_r+0xa54>
 800c440:	4651      	mov	r1, sl
 800c442:	2201      	movs	r2, #1
 800c444:	4628      	mov	r0, r5
 800c446:	f000 faf9 	bl	800ca3c <__lshift>
 800c44a:	4621      	mov	r1, r4
 800c44c:	4682      	mov	sl, r0
 800c44e:	f000 fb61 	bl	800cb14 <__mcmp>
 800c452:	2800      	cmp	r0, #0
 800c454:	dc03      	bgt.n	800c45e <_dtoa_r+0xa96>
 800c456:	d1e1      	bne.n	800c41c <_dtoa_r+0xa54>
 800c458:	f019 0f01 	tst.w	r9, #1
 800c45c:	d0de      	beq.n	800c41c <_dtoa_r+0xa54>
 800c45e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c462:	d1d8      	bne.n	800c416 <_dtoa_r+0xa4e>
 800c464:	2339      	movs	r3, #57	; 0x39
 800c466:	9a04      	ldr	r2, [sp, #16]
 800c468:	7013      	strb	r3, [r2, #0]
 800c46a:	463b      	mov	r3, r7
 800c46c:	461f      	mov	r7, r3
 800c46e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c472:	3b01      	subs	r3, #1
 800c474:	2a39      	cmp	r2, #57	; 0x39
 800c476:	d06b      	beq.n	800c550 <_dtoa_r+0xb88>
 800c478:	3201      	adds	r2, #1
 800c47a:	701a      	strb	r2, [r3, #0]
 800c47c:	e74a      	b.n	800c314 <_dtoa_r+0x94c>
 800c47e:	2a00      	cmp	r2, #0
 800c480:	dd07      	ble.n	800c492 <_dtoa_r+0xaca>
 800c482:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c486:	d0ed      	beq.n	800c464 <_dtoa_r+0xa9c>
 800c488:	9a04      	ldr	r2, [sp, #16]
 800c48a:	f109 0301 	add.w	r3, r9, #1
 800c48e:	7013      	strb	r3, [r2, #0]
 800c490:	e740      	b.n	800c314 <_dtoa_r+0x94c>
 800c492:	9b08      	ldr	r3, [sp, #32]
 800c494:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c496:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d042      	beq.n	800c524 <_dtoa_r+0xb5c>
 800c49e:	4651      	mov	r1, sl
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	220a      	movs	r2, #10
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	f000 f91d 	bl	800c6e4 <__multadd>
 800c4aa:	45b0      	cmp	r8, r6
 800c4ac:	4682      	mov	sl, r0
 800c4ae:	f04f 0300 	mov.w	r3, #0
 800c4b2:	f04f 020a 	mov.w	r2, #10
 800c4b6:	4641      	mov	r1, r8
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	d107      	bne.n	800c4cc <_dtoa_r+0xb04>
 800c4bc:	f000 f912 	bl	800c6e4 <__multadd>
 800c4c0:	4680      	mov	r8, r0
 800c4c2:	4606      	mov	r6, r0
 800c4c4:	9b08      	ldr	r3, [sp, #32]
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	9308      	str	r3, [sp, #32]
 800c4ca:	e775      	b.n	800c3b8 <_dtoa_r+0x9f0>
 800c4cc:	f000 f90a 	bl	800c6e4 <__multadd>
 800c4d0:	4631      	mov	r1, r6
 800c4d2:	4680      	mov	r8, r0
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	220a      	movs	r2, #10
 800c4d8:	4628      	mov	r0, r5
 800c4da:	f000 f903 	bl	800c6e4 <__multadd>
 800c4de:	4606      	mov	r6, r0
 800c4e0:	e7f0      	b.n	800c4c4 <_dtoa_r+0xafc>
 800c4e2:	9b08      	ldr	r3, [sp, #32]
 800c4e4:	9306      	str	r3, [sp, #24]
 800c4e6:	9f03      	ldr	r7, [sp, #12]
 800c4e8:	4621      	mov	r1, r4
 800c4ea:	4650      	mov	r0, sl
 800c4ec:	f7ff f9e3 	bl	800b8b6 <quorem>
 800c4f0:	9b03      	ldr	r3, [sp, #12]
 800c4f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c4f6:	f807 9b01 	strb.w	r9, [r7], #1
 800c4fa:	1afa      	subs	r2, r7, r3
 800c4fc:	9b06      	ldr	r3, [sp, #24]
 800c4fe:	4293      	cmp	r3, r2
 800c500:	dd07      	ble.n	800c512 <_dtoa_r+0xb4a>
 800c502:	4651      	mov	r1, sl
 800c504:	2300      	movs	r3, #0
 800c506:	220a      	movs	r2, #10
 800c508:	4628      	mov	r0, r5
 800c50a:	f000 f8eb 	bl	800c6e4 <__multadd>
 800c50e:	4682      	mov	sl, r0
 800c510:	e7ea      	b.n	800c4e8 <_dtoa_r+0xb20>
 800c512:	9b06      	ldr	r3, [sp, #24]
 800c514:	f04f 0800 	mov.w	r8, #0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	bfcc      	ite	gt
 800c51c:	461f      	movgt	r7, r3
 800c51e:	2701      	movle	r7, #1
 800c520:	9b03      	ldr	r3, [sp, #12]
 800c522:	441f      	add	r7, r3
 800c524:	4651      	mov	r1, sl
 800c526:	2201      	movs	r2, #1
 800c528:	4628      	mov	r0, r5
 800c52a:	f000 fa87 	bl	800ca3c <__lshift>
 800c52e:	4621      	mov	r1, r4
 800c530:	4682      	mov	sl, r0
 800c532:	f000 faef 	bl	800cb14 <__mcmp>
 800c536:	2800      	cmp	r0, #0
 800c538:	dc97      	bgt.n	800c46a <_dtoa_r+0xaa2>
 800c53a:	d102      	bne.n	800c542 <_dtoa_r+0xb7a>
 800c53c:	f019 0f01 	tst.w	r9, #1
 800c540:	d193      	bne.n	800c46a <_dtoa_r+0xaa2>
 800c542:	463b      	mov	r3, r7
 800c544:	461f      	mov	r7, r3
 800c546:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c54a:	2a30      	cmp	r2, #48	; 0x30
 800c54c:	d0fa      	beq.n	800c544 <_dtoa_r+0xb7c>
 800c54e:	e6e1      	b.n	800c314 <_dtoa_r+0x94c>
 800c550:	9a03      	ldr	r2, [sp, #12]
 800c552:	429a      	cmp	r2, r3
 800c554:	d18a      	bne.n	800c46c <_dtoa_r+0xaa4>
 800c556:	2331      	movs	r3, #49	; 0x31
 800c558:	f10b 0b01 	add.w	fp, fp, #1
 800c55c:	e797      	b.n	800c48e <_dtoa_r+0xac6>
 800c55e:	4b0a      	ldr	r3, [pc, #40]	; (800c588 <_dtoa_r+0xbc0>)
 800c560:	f7ff ba9f 	b.w	800baa2 <_dtoa_r+0xda>
 800c564:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c566:	2b00      	cmp	r3, #0
 800c568:	f47f aa77 	bne.w	800ba5a <_dtoa_r+0x92>
 800c56c:	4b07      	ldr	r3, [pc, #28]	; (800c58c <_dtoa_r+0xbc4>)
 800c56e:	f7ff ba98 	b.w	800baa2 <_dtoa_r+0xda>
 800c572:	9b06      	ldr	r3, [sp, #24]
 800c574:	2b00      	cmp	r3, #0
 800c576:	dcb6      	bgt.n	800c4e6 <_dtoa_r+0xb1e>
 800c578:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c57a:	2b02      	cmp	r3, #2
 800c57c:	f73f aeb5 	bgt.w	800c2ea <_dtoa_r+0x922>
 800c580:	e7b1      	b.n	800c4e6 <_dtoa_r+0xb1e>
 800c582:	bf00      	nop
 800c584:	0800dd9c 	.word	0x0800dd9c
 800c588:	0800dcfc 	.word	0x0800dcfc
 800c58c:	0800dd20 	.word	0x0800dd20

0800c590 <_free_r>:
 800c590:	b538      	push	{r3, r4, r5, lr}
 800c592:	4605      	mov	r5, r0
 800c594:	2900      	cmp	r1, #0
 800c596:	d040      	beq.n	800c61a <_free_r+0x8a>
 800c598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c59c:	1f0c      	subs	r4, r1, #4
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	bfb8      	it	lt
 800c5a2:	18e4      	addlt	r4, r4, r3
 800c5a4:	f7fe fb7a 	bl	800ac9c <__malloc_lock>
 800c5a8:	4a1c      	ldr	r2, [pc, #112]	; (800c61c <_free_r+0x8c>)
 800c5aa:	6813      	ldr	r3, [r2, #0]
 800c5ac:	b933      	cbnz	r3, 800c5bc <_free_r+0x2c>
 800c5ae:	6063      	str	r3, [r4, #4]
 800c5b0:	6014      	str	r4, [r2, #0]
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5b8:	f7fe bb76 	b.w	800aca8 <__malloc_unlock>
 800c5bc:	42a3      	cmp	r3, r4
 800c5be:	d908      	bls.n	800c5d2 <_free_r+0x42>
 800c5c0:	6820      	ldr	r0, [r4, #0]
 800c5c2:	1821      	adds	r1, r4, r0
 800c5c4:	428b      	cmp	r3, r1
 800c5c6:	bf01      	itttt	eq
 800c5c8:	6819      	ldreq	r1, [r3, #0]
 800c5ca:	685b      	ldreq	r3, [r3, #4]
 800c5cc:	1809      	addeq	r1, r1, r0
 800c5ce:	6021      	streq	r1, [r4, #0]
 800c5d0:	e7ed      	b.n	800c5ae <_free_r+0x1e>
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	685b      	ldr	r3, [r3, #4]
 800c5d6:	b10b      	cbz	r3, 800c5dc <_free_r+0x4c>
 800c5d8:	42a3      	cmp	r3, r4
 800c5da:	d9fa      	bls.n	800c5d2 <_free_r+0x42>
 800c5dc:	6811      	ldr	r1, [r2, #0]
 800c5de:	1850      	adds	r0, r2, r1
 800c5e0:	42a0      	cmp	r0, r4
 800c5e2:	d10b      	bne.n	800c5fc <_free_r+0x6c>
 800c5e4:	6820      	ldr	r0, [r4, #0]
 800c5e6:	4401      	add	r1, r0
 800c5e8:	1850      	adds	r0, r2, r1
 800c5ea:	4283      	cmp	r3, r0
 800c5ec:	6011      	str	r1, [r2, #0]
 800c5ee:	d1e0      	bne.n	800c5b2 <_free_r+0x22>
 800c5f0:	6818      	ldr	r0, [r3, #0]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	4408      	add	r0, r1
 800c5f6:	6010      	str	r0, [r2, #0]
 800c5f8:	6053      	str	r3, [r2, #4]
 800c5fa:	e7da      	b.n	800c5b2 <_free_r+0x22>
 800c5fc:	d902      	bls.n	800c604 <_free_r+0x74>
 800c5fe:	230c      	movs	r3, #12
 800c600:	602b      	str	r3, [r5, #0]
 800c602:	e7d6      	b.n	800c5b2 <_free_r+0x22>
 800c604:	6820      	ldr	r0, [r4, #0]
 800c606:	1821      	adds	r1, r4, r0
 800c608:	428b      	cmp	r3, r1
 800c60a:	bf01      	itttt	eq
 800c60c:	6819      	ldreq	r1, [r3, #0]
 800c60e:	685b      	ldreq	r3, [r3, #4]
 800c610:	1809      	addeq	r1, r1, r0
 800c612:	6021      	streq	r1, [r4, #0]
 800c614:	6063      	str	r3, [r4, #4]
 800c616:	6054      	str	r4, [r2, #4]
 800c618:	e7cb      	b.n	800c5b2 <_free_r+0x22>
 800c61a:	bd38      	pop	{r3, r4, r5, pc}
 800c61c:	200017c0 	.word	0x200017c0

0800c620 <_Balloc>:
 800c620:	b570      	push	{r4, r5, r6, lr}
 800c622:	69c6      	ldr	r6, [r0, #28]
 800c624:	4604      	mov	r4, r0
 800c626:	460d      	mov	r5, r1
 800c628:	b976      	cbnz	r6, 800c648 <_Balloc+0x28>
 800c62a:	2010      	movs	r0, #16
 800c62c:	f7fe fa86 	bl	800ab3c <malloc>
 800c630:	4602      	mov	r2, r0
 800c632:	61e0      	str	r0, [r4, #28]
 800c634:	b920      	cbnz	r0, 800c640 <_Balloc+0x20>
 800c636:	216b      	movs	r1, #107	; 0x6b
 800c638:	4b17      	ldr	r3, [pc, #92]	; (800c698 <_Balloc+0x78>)
 800c63a:	4818      	ldr	r0, [pc, #96]	; (800c69c <_Balloc+0x7c>)
 800c63c:	f000 fc20 	bl	800ce80 <__assert_func>
 800c640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c644:	6006      	str	r6, [r0, #0]
 800c646:	60c6      	str	r6, [r0, #12]
 800c648:	69e6      	ldr	r6, [r4, #28]
 800c64a:	68f3      	ldr	r3, [r6, #12]
 800c64c:	b183      	cbz	r3, 800c670 <_Balloc+0x50>
 800c64e:	69e3      	ldr	r3, [r4, #28]
 800c650:	68db      	ldr	r3, [r3, #12]
 800c652:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c656:	b9b8      	cbnz	r0, 800c688 <_Balloc+0x68>
 800c658:	2101      	movs	r1, #1
 800c65a:	fa01 f605 	lsl.w	r6, r1, r5
 800c65e:	1d72      	adds	r2, r6, #5
 800c660:	4620      	mov	r0, r4
 800c662:	0092      	lsls	r2, r2, #2
 800c664:	f000 fc2a 	bl	800cebc <_calloc_r>
 800c668:	b160      	cbz	r0, 800c684 <_Balloc+0x64>
 800c66a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c66e:	e00e      	b.n	800c68e <_Balloc+0x6e>
 800c670:	2221      	movs	r2, #33	; 0x21
 800c672:	2104      	movs	r1, #4
 800c674:	4620      	mov	r0, r4
 800c676:	f000 fc21 	bl	800cebc <_calloc_r>
 800c67a:	69e3      	ldr	r3, [r4, #28]
 800c67c:	60f0      	str	r0, [r6, #12]
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d1e4      	bne.n	800c64e <_Balloc+0x2e>
 800c684:	2000      	movs	r0, #0
 800c686:	bd70      	pop	{r4, r5, r6, pc}
 800c688:	6802      	ldr	r2, [r0, #0]
 800c68a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c68e:	2300      	movs	r3, #0
 800c690:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c694:	e7f7      	b.n	800c686 <_Balloc+0x66>
 800c696:	bf00      	nop
 800c698:	0800dd2d 	.word	0x0800dd2d
 800c69c:	0800ddad 	.word	0x0800ddad

0800c6a0 <_Bfree>:
 800c6a0:	b570      	push	{r4, r5, r6, lr}
 800c6a2:	69c6      	ldr	r6, [r0, #28]
 800c6a4:	4605      	mov	r5, r0
 800c6a6:	460c      	mov	r4, r1
 800c6a8:	b976      	cbnz	r6, 800c6c8 <_Bfree+0x28>
 800c6aa:	2010      	movs	r0, #16
 800c6ac:	f7fe fa46 	bl	800ab3c <malloc>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	61e8      	str	r0, [r5, #28]
 800c6b4:	b920      	cbnz	r0, 800c6c0 <_Bfree+0x20>
 800c6b6:	218f      	movs	r1, #143	; 0x8f
 800c6b8:	4b08      	ldr	r3, [pc, #32]	; (800c6dc <_Bfree+0x3c>)
 800c6ba:	4809      	ldr	r0, [pc, #36]	; (800c6e0 <_Bfree+0x40>)
 800c6bc:	f000 fbe0 	bl	800ce80 <__assert_func>
 800c6c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6c4:	6006      	str	r6, [r0, #0]
 800c6c6:	60c6      	str	r6, [r0, #12]
 800c6c8:	b13c      	cbz	r4, 800c6da <_Bfree+0x3a>
 800c6ca:	69eb      	ldr	r3, [r5, #28]
 800c6cc:	6862      	ldr	r2, [r4, #4]
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c6d4:	6021      	str	r1, [r4, #0]
 800c6d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c6da:	bd70      	pop	{r4, r5, r6, pc}
 800c6dc:	0800dd2d 	.word	0x0800dd2d
 800c6e0:	0800ddad 	.word	0x0800ddad

0800c6e4 <__multadd>:
 800c6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6e8:	4607      	mov	r7, r0
 800c6ea:	460c      	mov	r4, r1
 800c6ec:	461e      	mov	r6, r3
 800c6ee:	2000      	movs	r0, #0
 800c6f0:	690d      	ldr	r5, [r1, #16]
 800c6f2:	f101 0c14 	add.w	ip, r1, #20
 800c6f6:	f8dc 3000 	ldr.w	r3, [ip]
 800c6fa:	3001      	adds	r0, #1
 800c6fc:	b299      	uxth	r1, r3
 800c6fe:	fb02 6101 	mla	r1, r2, r1, r6
 800c702:	0c1e      	lsrs	r6, r3, #16
 800c704:	0c0b      	lsrs	r3, r1, #16
 800c706:	fb02 3306 	mla	r3, r2, r6, r3
 800c70a:	b289      	uxth	r1, r1
 800c70c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c710:	4285      	cmp	r5, r0
 800c712:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c716:	f84c 1b04 	str.w	r1, [ip], #4
 800c71a:	dcec      	bgt.n	800c6f6 <__multadd+0x12>
 800c71c:	b30e      	cbz	r6, 800c762 <__multadd+0x7e>
 800c71e:	68a3      	ldr	r3, [r4, #8]
 800c720:	42ab      	cmp	r3, r5
 800c722:	dc19      	bgt.n	800c758 <__multadd+0x74>
 800c724:	6861      	ldr	r1, [r4, #4]
 800c726:	4638      	mov	r0, r7
 800c728:	3101      	adds	r1, #1
 800c72a:	f7ff ff79 	bl	800c620 <_Balloc>
 800c72e:	4680      	mov	r8, r0
 800c730:	b928      	cbnz	r0, 800c73e <__multadd+0x5a>
 800c732:	4602      	mov	r2, r0
 800c734:	21ba      	movs	r1, #186	; 0xba
 800c736:	4b0c      	ldr	r3, [pc, #48]	; (800c768 <__multadd+0x84>)
 800c738:	480c      	ldr	r0, [pc, #48]	; (800c76c <__multadd+0x88>)
 800c73a:	f000 fba1 	bl	800ce80 <__assert_func>
 800c73e:	6922      	ldr	r2, [r4, #16]
 800c740:	f104 010c 	add.w	r1, r4, #12
 800c744:	3202      	adds	r2, #2
 800c746:	0092      	lsls	r2, r2, #2
 800c748:	300c      	adds	r0, #12
 800c74a:	f000 fb8b 	bl	800ce64 <memcpy>
 800c74e:	4621      	mov	r1, r4
 800c750:	4638      	mov	r0, r7
 800c752:	f7ff ffa5 	bl	800c6a0 <_Bfree>
 800c756:	4644      	mov	r4, r8
 800c758:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c75c:	3501      	adds	r5, #1
 800c75e:	615e      	str	r6, [r3, #20]
 800c760:	6125      	str	r5, [r4, #16]
 800c762:	4620      	mov	r0, r4
 800c764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c768:	0800dd9c 	.word	0x0800dd9c
 800c76c:	0800ddad 	.word	0x0800ddad

0800c770 <__hi0bits>:
 800c770:	0c02      	lsrs	r2, r0, #16
 800c772:	0412      	lsls	r2, r2, #16
 800c774:	4603      	mov	r3, r0
 800c776:	b9ca      	cbnz	r2, 800c7ac <__hi0bits+0x3c>
 800c778:	0403      	lsls	r3, r0, #16
 800c77a:	2010      	movs	r0, #16
 800c77c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c780:	bf04      	itt	eq
 800c782:	021b      	lsleq	r3, r3, #8
 800c784:	3008      	addeq	r0, #8
 800c786:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c78a:	bf04      	itt	eq
 800c78c:	011b      	lsleq	r3, r3, #4
 800c78e:	3004      	addeq	r0, #4
 800c790:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c794:	bf04      	itt	eq
 800c796:	009b      	lsleq	r3, r3, #2
 800c798:	3002      	addeq	r0, #2
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	db05      	blt.n	800c7aa <__hi0bits+0x3a>
 800c79e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800c7a2:	f100 0001 	add.w	r0, r0, #1
 800c7a6:	bf08      	it	eq
 800c7a8:	2020      	moveq	r0, #32
 800c7aa:	4770      	bx	lr
 800c7ac:	2000      	movs	r0, #0
 800c7ae:	e7e5      	b.n	800c77c <__hi0bits+0xc>

0800c7b0 <__lo0bits>:
 800c7b0:	6803      	ldr	r3, [r0, #0]
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	f013 0007 	ands.w	r0, r3, #7
 800c7b8:	d00b      	beq.n	800c7d2 <__lo0bits+0x22>
 800c7ba:	07d9      	lsls	r1, r3, #31
 800c7bc:	d421      	bmi.n	800c802 <__lo0bits+0x52>
 800c7be:	0798      	lsls	r0, r3, #30
 800c7c0:	bf49      	itett	mi
 800c7c2:	085b      	lsrmi	r3, r3, #1
 800c7c4:	089b      	lsrpl	r3, r3, #2
 800c7c6:	2001      	movmi	r0, #1
 800c7c8:	6013      	strmi	r3, [r2, #0]
 800c7ca:	bf5c      	itt	pl
 800c7cc:	2002      	movpl	r0, #2
 800c7ce:	6013      	strpl	r3, [r2, #0]
 800c7d0:	4770      	bx	lr
 800c7d2:	b299      	uxth	r1, r3
 800c7d4:	b909      	cbnz	r1, 800c7da <__lo0bits+0x2a>
 800c7d6:	2010      	movs	r0, #16
 800c7d8:	0c1b      	lsrs	r3, r3, #16
 800c7da:	b2d9      	uxtb	r1, r3
 800c7dc:	b909      	cbnz	r1, 800c7e2 <__lo0bits+0x32>
 800c7de:	3008      	adds	r0, #8
 800c7e0:	0a1b      	lsrs	r3, r3, #8
 800c7e2:	0719      	lsls	r1, r3, #28
 800c7e4:	bf04      	itt	eq
 800c7e6:	091b      	lsreq	r3, r3, #4
 800c7e8:	3004      	addeq	r0, #4
 800c7ea:	0799      	lsls	r1, r3, #30
 800c7ec:	bf04      	itt	eq
 800c7ee:	089b      	lsreq	r3, r3, #2
 800c7f0:	3002      	addeq	r0, #2
 800c7f2:	07d9      	lsls	r1, r3, #31
 800c7f4:	d403      	bmi.n	800c7fe <__lo0bits+0x4e>
 800c7f6:	085b      	lsrs	r3, r3, #1
 800c7f8:	f100 0001 	add.w	r0, r0, #1
 800c7fc:	d003      	beq.n	800c806 <__lo0bits+0x56>
 800c7fe:	6013      	str	r3, [r2, #0]
 800c800:	4770      	bx	lr
 800c802:	2000      	movs	r0, #0
 800c804:	4770      	bx	lr
 800c806:	2020      	movs	r0, #32
 800c808:	4770      	bx	lr
	...

0800c80c <__i2b>:
 800c80c:	b510      	push	{r4, lr}
 800c80e:	460c      	mov	r4, r1
 800c810:	2101      	movs	r1, #1
 800c812:	f7ff ff05 	bl	800c620 <_Balloc>
 800c816:	4602      	mov	r2, r0
 800c818:	b928      	cbnz	r0, 800c826 <__i2b+0x1a>
 800c81a:	f240 1145 	movw	r1, #325	; 0x145
 800c81e:	4b04      	ldr	r3, [pc, #16]	; (800c830 <__i2b+0x24>)
 800c820:	4804      	ldr	r0, [pc, #16]	; (800c834 <__i2b+0x28>)
 800c822:	f000 fb2d 	bl	800ce80 <__assert_func>
 800c826:	2301      	movs	r3, #1
 800c828:	6144      	str	r4, [r0, #20]
 800c82a:	6103      	str	r3, [r0, #16]
 800c82c:	bd10      	pop	{r4, pc}
 800c82e:	bf00      	nop
 800c830:	0800dd9c 	.word	0x0800dd9c
 800c834:	0800ddad 	.word	0x0800ddad

0800c838 <__multiply>:
 800c838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c83c:	4691      	mov	r9, r2
 800c83e:	690a      	ldr	r2, [r1, #16]
 800c840:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c844:	460c      	mov	r4, r1
 800c846:	429a      	cmp	r2, r3
 800c848:	bfbe      	ittt	lt
 800c84a:	460b      	movlt	r3, r1
 800c84c:	464c      	movlt	r4, r9
 800c84e:	4699      	movlt	r9, r3
 800c850:	6927      	ldr	r7, [r4, #16]
 800c852:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c856:	68a3      	ldr	r3, [r4, #8]
 800c858:	6861      	ldr	r1, [r4, #4]
 800c85a:	eb07 060a 	add.w	r6, r7, sl
 800c85e:	42b3      	cmp	r3, r6
 800c860:	b085      	sub	sp, #20
 800c862:	bfb8      	it	lt
 800c864:	3101      	addlt	r1, #1
 800c866:	f7ff fedb 	bl	800c620 <_Balloc>
 800c86a:	b930      	cbnz	r0, 800c87a <__multiply+0x42>
 800c86c:	4602      	mov	r2, r0
 800c86e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c872:	4b43      	ldr	r3, [pc, #268]	; (800c980 <__multiply+0x148>)
 800c874:	4843      	ldr	r0, [pc, #268]	; (800c984 <__multiply+0x14c>)
 800c876:	f000 fb03 	bl	800ce80 <__assert_func>
 800c87a:	f100 0514 	add.w	r5, r0, #20
 800c87e:	462b      	mov	r3, r5
 800c880:	2200      	movs	r2, #0
 800c882:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c886:	4543      	cmp	r3, r8
 800c888:	d321      	bcc.n	800c8ce <__multiply+0x96>
 800c88a:	f104 0314 	add.w	r3, r4, #20
 800c88e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c892:	f109 0314 	add.w	r3, r9, #20
 800c896:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c89a:	9202      	str	r2, [sp, #8]
 800c89c:	1b3a      	subs	r2, r7, r4
 800c89e:	3a15      	subs	r2, #21
 800c8a0:	f022 0203 	bic.w	r2, r2, #3
 800c8a4:	3204      	adds	r2, #4
 800c8a6:	f104 0115 	add.w	r1, r4, #21
 800c8aa:	428f      	cmp	r7, r1
 800c8ac:	bf38      	it	cc
 800c8ae:	2204      	movcc	r2, #4
 800c8b0:	9201      	str	r2, [sp, #4]
 800c8b2:	9a02      	ldr	r2, [sp, #8]
 800c8b4:	9303      	str	r3, [sp, #12]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d80c      	bhi.n	800c8d4 <__multiply+0x9c>
 800c8ba:	2e00      	cmp	r6, #0
 800c8bc:	dd03      	ble.n	800c8c6 <__multiply+0x8e>
 800c8be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d05a      	beq.n	800c97c <__multiply+0x144>
 800c8c6:	6106      	str	r6, [r0, #16]
 800c8c8:	b005      	add	sp, #20
 800c8ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ce:	f843 2b04 	str.w	r2, [r3], #4
 800c8d2:	e7d8      	b.n	800c886 <__multiply+0x4e>
 800c8d4:	f8b3 a000 	ldrh.w	sl, [r3]
 800c8d8:	f1ba 0f00 	cmp.w	sl, #0
 800c8dc:	d023      	beq.n	800c926 <__multiply+0xee>
 800c8de:	46a9      	mov	r9, r5
 800c8e0:	f04f 0c00 	mov.w	ip, #0
 800c8e4:	f104 0e14 	add.w	lr, r4, #20
 800c8e8:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c8ec:	f8d9 1000 	ldr.w	r1, [r9]
 800c8f0:	fa1f fb82 	uxth.w	fp, r2
 800c8f4:	b289      	uxth	r1, r1
 800c8f6:	fb0a 110b 	mla	r1, sl, fp, r1
 800c8fa:	4461      	add	r1, ip
 800c8fc:	f8d9 c000 	ldr.w	ip, [r9]
 800c900:	0c12      	lsrs	r2, r2, #16
 800c902:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c906:	fb0a c202 	mla	r2, sl, r2, ip
 800c90a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c90e:	b289      	uxth	r1, r1
 800c910:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c914:	4577      	cmp	r7, lr
 800c916:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c91a:	f849 1b04 	str.w	r1, [r9], #4
 800c91e:	d8e3      	bhi.n	800c8e8 <__multiply+0xb0>
 800c920:	9a01      	ldr	r2, [sp, #4]
 800c922:	f845 c002 	str.w	ip, [r5, r2]
 800c926:	9a03      	ldr	r2, [sp, #12]
 800c928:	3304      	adds	r3, #4
 800c92a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c92e:	f1b9 0f00 	cmp.w	r9, #0
 800c932:	d021      	beq.n	800c978 <__multiply+0x140>
 800c934:	46ae      	mov	lr, r5
 800c936:	f04f 0a00 	mov.w	sl, #0
 800c93a:	6829      	ldr	r1, [r5, #0]
 800c93c:	f104 0c14 	add.w	ip, r4, #20
 800c940:	f8bc b000 	ldrh.w	fp, [ip]
 800c944:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c948:	b289      	uxth	r1, r1
 800c94a:	fb09 220b 	mla	r2, r9, fp, r2
 800c94e:	4452      	add	r2, sl
 800c950:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c954:	f84e 1b04 	str.w	r1, [lr], #4
 800c958:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c95c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c960:	f8be 1000 	ldrh.w	r1, [lr]
 800c964:	4567      	cmp	r7, ip
 800c966:	fb09 110a 	mla	r1, r9, sl, r1
 800c96a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c96e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c972:	d8e5      	bhi.n	800c940 <__multiply+0x108>
 800c974:	9a01      	ldr	r2, [sp, #4]
 800c976:	50a9      	str	r1, [r5, r2]
 800c978:	3504      	adds	r5, #4
 800c97a:	e79a      	b.n	800c8b2 <__multiply+0x7a>
 800c97c:	3e01      	subs	r6, #1
 800c97e:	e79c      	b.n	800c8ba <__multiply+0x82>
 800c980:	0800dd9c 	.word	0x0800dd9c
 800c984:	0800ddad 	.word	0x0800ddad

0800c988 <__pow5mult>:
 800c988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c98c:	4615      	mov	r5, r2
 800c98e:	f012 0203 	ands.w	r2, r2, #3
 800c992:	4606      	mov	r6, r0
 800c994:	460f      	mov	r7, r1
 800c996:	d007      	beq.n	800c9a8 <__pow5mult+0x20>
 800c998:	4c25      	ldr	r4, [pc, #148]	; (800ca30 <__pow5mult+0xa8>)
 800c99a:	3a01      	subs	r2, #1
 800c99c:	2300      	movs	r3, #0
 800c99e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c9a2:	f7ff fe9f 	bl	800c6e4 <__multadd>
 800c9a6:	4607      	mov	r7, r0
 800c9a8:	10ad      	asrs	r5, r5, #2
 800c9aa:	d03d      	beq.n	800ca28 <__pow5mult+0xa0>
 800c9ac:	69f4      	ldr	r4, [r6, #28]
 800c9ae:	b97c      	cbnz	r4, 800c9d0 <__pow5mult+0x48>
 800c9b0:	2010      	movs	r0, #16
 800c9b2:	f7fe f8c3 	bl	800ab3c <malloc>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	61f0      	str	r0, [r6, #28]
 800c9ba:	b928      	cbnz	r0, 800c9c8 <__pow5mult+0x40>
 800c9bc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c9c0:	4b1c      	ldr	r3, [pc, #112]	; (800ca34 <__pow5mult+0xac>)
 800c9c2:	481d      	ldr	r0, [pc, #116]	; (800ca38 <__pow5mult+0xb0>)
 800c9c4:	f000 fa5c 	bl	800ce80 <__assert_func>
 800c9c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c9cc:	6004      	str	r4, [r0, #0]
 800c9ce:	60c4      	str	r4, [r0, #12]
 800c9d0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c9d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c9d8:	b94c      	cbnz	r4, 800c9ee <__pow5mult+0x66>
 800c9da:	f240 2171 	movw	r1, #625	; 0x271
 800c9de:	4630      	mov	r0, r6
 800c9e0:	f7ff ff14 	bl	800c80c <__i2b>
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	f8c8 0008 	str.w	r0, [r8, #8]
 800c9ec:	6003      	str	r3, [r0, #0]
 800c9ee:	f04f 0900 	mov.w	r9, #0
 800c9f2:	07eb      	lsls	r3, r5, #31
 800c9f4:	d50a      	bpl.n	800ca0c <__pow5mult+0x84>
 800c9f6:	4639      	mov	r1, r7
 800c9f8:	4622      	mov	r2, r4
 800c9fa:	4630      	mov	r0, r6
 800c9fc:	f7ff ff1c 	bl	800c838 <__multiply>
 800ca00:	4680      	mov	r8, r0
 800ca02:	4639      	mov	r1, r7
 800ca04:	4630      	mov	r0, r6
 800ca06:	f7ff fe4b 	bl	800c6a0 <_Bfree>
 800ca0a:	4647      	mov	r7, r8
 800ca0c:	106d      	asrs	r5, r5, #1
 800ca0e:	d00b      	beq.n	800ca28 <__pow5mult+0xa0>
 800ca10:	6820      	ldr	r0, [r4, #0]
 800ca12:	b938      	cbnz	r0, 800ca24 <__pow5mult+0x9c>
 800ca14:	4622      	mov	r2, r4
 800ca16:	4621      	mov	r1, r4
 800ca18:	4630      	mov	r0, r6
 800ca1a:	f7ff ff0d 	bl	800c838 <__multiply>
 800ca1e:	6020      	str	r0, [r4, #0]
 800ca20:	f8c0 9000 	str.w	r9, [r0]
 800ca24:	4604      	mov	r4, r0
 800ca26:	e7e4      	b.n	800c9f2 <__pow5mult+0x6a>
 800ca28:	4638      	mov	r0, r7
 800ca2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca2e:	bf00      	nop
 800ca30:	0800def8 	.word	0x0800def8
 800ca34:	0800dd2d 	.word	0x0800dd2d
 800ca38:	0800ddad 	.word	0x0800ddad

0800ca3c <__lshift>:
 800ca3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca40:	460c      	mov	r4, r1
 800ca42:	4607      	mov	r7, r0
 800ca44:	4691      	mov	r9, r2
 800ca46:	6923      	ldr	r3, [r4, #16]
 800ca48:	6849      	ldr	r1, [r1, #4]
 800ca4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca4e:	68a3      	ldr	r3, [r4, #8]
 800ca50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca54:	f108 0601 	add.w	r6, r8, #1
 800ca58:	42b3      	cmp	r3, r6
 800ca5a:	db0b      	blt.n	800ca74 <__lshift+0x38>
 800ca5c:	4638      	mov	r0, r7
 800ca5e:	f7ff fddf 	bl	800c620 <_Balloc>
 800ca62:	4605      	mov	r5, r0
 800ca64:	b948      	cbnz	r0, 800ca7a <__lshift+0x3e>
 800ca66:	4602      	mov	r2, r0
 800ca68:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ca6c:	4b27      	ldr	r3, [pc, #156]	; (800cb0c <__lshift+0xd0>)
 800ca6e:	4828      	ldr	r0, [pc, #160]	; (800cb10 <__lshift+0xd4>)
 800ca70:	f000 fa06 	bl	800ce80 <__assert_func>
 800ca74:	3101      	adds	r1, #1
 800ca76:	005b      	lsls	r3, r3, #1
 800ca78:	e7ee      	b.n	800ca58 <__lshift+0x1c>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	f100 0114 	add.w	r1, r0, #20
 800ca80:	f100 0210 	add.w	r2, r0, #16
 800ca84:	4618      	mov	r0, r3
 800ca86:	4553      	cmp	r3, sl
 800ca88:	db33      	blt.n	800caf2 <__lshift+0xb6>
 800ca8a:	6920      	ldr	r0, [r4, #16]
 800ca8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca90:	f104 0314 	add.w	r3, r4, #20
 800ca94:	f019 091f 	ands.w	r9, r9, #31
 800ca98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ca9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800caa0:	d02b      	beq.n	800cafa <__lshift+0xbe>
 800caa2:	468a      	mov	sl, r1
 800caa4:	2200      	movs	r2, #0
 800caa6:	f1c9 0e20 	rsb	lr, r9, #32
 800caaa:	6818      	ldr	r0, [r3, #0]
 800caac:	fa00 f009 	lsl.w	r0, r0, r9
 800cab0:	4310      	orrs	r0, r2
 800cab2:	f84a 0b04 	str.w	r0, [sl], #4
 800cab6:	f853 2b04 	ldr.w	r2, [r3], #4
 800caba:	459c      	cmp	ip, r3
 800cabc:	fa22 f20e 	lsr.w	r2, r2, lr
 800cac0:	d8f3      	bhi.n	800caaa <__lshift+0x6e>
 800cac2:	ebac 0304 	sub.w	r3, ip, r4
 800cac6:	3b15      	subs	r3, #21
 800cac8:	f023 0303 	bic.w	r3, r3, #3
 800cacc:	3304      	adds	r3, #4
 800cace:	f104 0015 	add.w	r0, r4, #21
 800cad2:	4584      	cmp	ip, r0
 800cad4:	bf38      	it	cc
 800cad6:	2304      	movcc	r3, #4
 800cad8:	50ca      	str	r2, [r1, r3]
 800cada:	b10a      	cbz	r2, 800cae0 <__lshift+0xa4>
 800cadc:	f108 0602 	add.w	r6, r8, #2
 800cae0:	3e01      	subs	r6, #1
 800cae2:	4638      	mov	r0, r7
 800cae4:	4621      	mov	r1, r4
 800cae6:	612e      	str	r6, [r5, #16]
 800cae8:	f7ff fdda 	bl	800c6a0 <_Bfree>
 800caec:	4628      	mov	r0, r5
 800caee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caf2:	f842 0f04 	str.w	r0, [r2, #4]!
 800caf6:	3301      	adds	r3, #1
 800caf8:	e7c5      	b.n	800ca86 <__lshift+0x4a>
 800cafa:	3904      	subs	r1, #4
 800cafc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb00:	459c      	cmp	ip, r3
 800cb02:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb06:	d8f9      	bhi.n	800cafc <__lshift+0xc0>
 800cb08:	e7ea      	b.n	800cae0 <__lshift+0xa4>
 800cb0a:	bf00      	nop
 800cb0c:	0800dd9c 	.word	0x0800dd9c
 800cb10:	0800ddad 	.word	0x0800ddad

0800cb14 <__mcmp>:
 800cb14:	4603      	mov	r3, r0
 800cb16:	690a      	ldr	r2, [r1, #16]
 800cb18:	6900      	ldr	r0, [r0, #16]
 800cb1a:	b530      	push	{r4, r5, lr}
 800cb1c:	1a80      	subs	r0, r0, r2
 800cb1e:	d10d      	bne.n	800cb3c <__mcmp+0x28>
 800cb20:	3314      	adds	r3, #20
 800cb22:	3114      	adds	r1, #20
 800cb24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cb28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cb2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cb30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cb34:	4295      	cmp	r5, r2
 800cb36:	d002      	beq.n	800cb3e <__mcmp+0x2a>
 800cb38:	d304      	bcc.n	800cb44 <__mcmp+0x30>
 800cb3a:	2001      	movs	r0, #1
 800cb3c:	bd30      	pop	{r4, r5, pc}
 800cb3e:	42a3      	cmp	r3, r4
 800cb40:	d3f4      	bcc.n	800cb2c <__mcmp+0x18>
 800cb42:	e7fb      	b.n	800cb3c <__mcmp+0x28>
 800cb44:	f04f 30ff 	mov.w	r0, #4294967295
 800cb48:	e7f8      	b.n	800cb3c <__mcmp+0x28>
	...

0800cb4c <__mdiff>:
 800cb4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb50:	460d      	mov	r5, r1
 800cb52:	4607      	mov	r7, r0
 800cb54:	4611      	mov	r1, r2
 800cb56:	4628      	mov	r0, r5
 800cb58:	4614      	mov	r4, r2
 800cb5a:	f7ff ffdb 	bl	800cb14 <__mcmp>
 800cb5e:	1e06      	subs	r6, r0, #0
 800cb60:	d111      	bne.n	800cb86 <__mdiff+0x3a>
 800cb62:	4631      	mov	r1, r6
 800cb64:	4638      	mov	r0, r7
 800cb66:	f7ff fd5b 	bl	800c620 <_Balloc>
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	b928      	cbnz	r0, 800cb7a <__mdiff+0x2e>
 800cb6e:	f240 2137 	movw	r1, #567	; 0x237
 800cb72:	4b3a      	ldr	r3, [pc, #232]	; (800cc5c <__mdiff+0x110>)
 800cb74:	483a      	ldr	r0, [pc, #232]	; (800cc60 <__mdiff+0x114>)
 800cb76:	f000 f983 	bl	800ce80 <__assert_func>
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800cb80:	4610      	mov	r0, r2
 800cb82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb86:	bfa4      	itt	ge
 800cb88:	4623      	movge	r3, r4
 800cb8a:	462c      	movge	r4, r5
 800cb8c:	4638      	mov	r0, r7
 800cb8e:	6861      	ldr	r1, [r4, #4]
 800cb90:	bfa6      	itte	ge
 800cb92:	461d      	movge	r5, r3
 800cb94:	2600      	movge	r6, #0
 800cb96:	2601      	movlt	r6, #1
 800cb98:	f7ff fd42 	bl	800c620 <_Balloc>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	b918      	cbnz	r0, 800cba8 <__mdiff+0x5c>
 800cba0:	f240 2145 	movw	r1, #581	; 0x245
 800cba4:	4b2d      	ldr	r3, [pc, #180]	; (800cc5c <__mdiff+0x110>)
 800cba6:	e7e5      	b.n	800cb74 <__mdiff+0x28>
 800cba8:	f102 0814 	add.w	r8, r2, #20
 800cbac:	46c2      	mov	sl, r8
 800cbae:	f04f 0c00 	mov.w	ip, #0
 800cbb2:	6927      	ldr	r7, [r4, #16]
 800cbb4:	60c6      	str	r6, [r0, #12]
 800cbb6:	692e      	ldr	r6, [r5, #16]
 800cbb8:	f104 0014 	add.w	r0, r4, #20
 800cbbc:	f105 0914 	add.w	r9, r5, #20
 800cbc0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800cbc4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cbc8:	3410      	adds	r4, #16
 800cbca:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800cbce:	f859 3b04 	ldr.w	r3, [r9], #4
 800cbd2:	fa1f f18b 	uxth.w	r1, fp
 800cbd6:	4461      	add	r1, ip
 800cbd8:	fa1f fc83 	uxth.w	ip, r3
 800cbdc:	0c1b      	lsrs	r3, r3, #16
 800cbde:	eba1 010c 	sub.w	r1, r1, ip
 800cbe2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cbe6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800cbea:	b289      	uxth	r1, r1
 800cbec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800cbf0:	454e      	cmp	r6, r9
 800cbf2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800cbf6:	f84a 1b04 	str.w	r1, [sl], #4
 800cbfa:	d8e6      	bhi.n	800cbca <__mdiff+0x7e>
 800cbfc:	1b73      	subs	r3, r6, r5
 800cbfe:	3b15      	subs	r3, #21
 800cc00:	f023 0303 	bic.w	r3, r3, #3
 800cc04:	3515      	adds	r5, #21
 800cc06:	3304      	adds	r3, #4
 800cc08:	42ae      	cmp	r6, r5
 800cc0a:	bf38      	it	cc
 800cc0c:	2304      	movcc	r3, #4
 800cc0e:	4418      	add	r0, r3
 800cc10:	4443      	add	r3, r8
 800cc12:	461e      	mov	r6, r3
 800cc14:	4605      	mov	r5, r0
 800cc16:	4575      	cmp	r5, lr
 800cc18:	d30e      	bcc.n	800cc38 <__mdiff+0xec>
 800cc1a:	f10e 0103 	add.w	r1, lr, #3
 800cc1e:	1a09      	subs	r1, r1, r0
 800cc20:	f021 0103 	bic.w	r1, r1, #3
 800cc24:	3803      	subs	r0, #3
 800cc26:	4586      	cmp	lr, r0
 800cc28:	bf38      	it	cc
 800cc2a:	2100      	movcc	r1, #0
 800cc2c:	440b      	add	r3, r1
 800cc2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc32:	b189      	cbz	r1, 800cc58 <__mdiff+0x10c>
 800cc34:	6117      	str	r7, [r2, #16]
 800cc36:	e7a3      	b.n	800cb80 <__mdiff+0x34>
 800cc38:	f855 8b04 	ldr.w	r8, [r5], #4
 800cc3c:	fa1f f188 	uxth.w	r1, r8
 800cc40:	4461      	add	r1, ip
 800cc42:	140c      	asrs	r4, r1, #16
 800cc44:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cc48:	b289      	uxth	r1, r1
 800cc4a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800cc4e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800cc52:	f846 1b04 	str.w	r1, [r6], #4
 800cc56:	e7de      	b.n	800cc16 <__mdiff+0xca>
 800cc58:	3f01      	subs	r7, #1
 800cc5a:	e7e8      	b.n	800cc2e <__mdiff+0xe2>
 800cc5c:	0800dd9c 	.word	0x0800dd9c
 800cc60:	0800ddad 	.word	0x0800ddad

0800cc64 <__d2b>:
 800cc64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc66:	2101      	movs	r1, #1
 800cc68:	4617      	mov	r7, r2
 800cc6a:	461c      	mov	r4, r3
 800cc6c:	9e08      	ldr	r6, [sp, #32]
 800cc6e:	f7ff fcd7 	bl	800c620 <_Balloc>
 800cc72:	4605      	mov	r5, r0
 800cc74:	b930      	cbnz	r0, 800cc84 <__d2b+0x20>
 800cc76:	4602      	mov	r2, r0
 800cc78:	f240 310f 	movw	r1, #783	; 0x30f
 800cc7c:	4b22      	ldr	r3, [pc, #136]	; (800cd08 <__d2b+0xa4>)
 800cc7e:	4823      	ldr	r0, [pc, #140]	; (800cd0c <__d2b+0xa8>)
 800cc80:	f000 f8fe 	bl	800ce80 <__assert_func>
 800cc84:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800cc88:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800cc8c:	bb24      	cbnz	r4, 800ccd8 <__d2b+0x74>
 800cc8e:	2f00      	cmp	r7, #0
 800cc90:	9301      	str	r3, [sp, #4]
 800cc92:	d026      	beq.n	800cce2 <__d2b+0x7e>
 800cc94:	4668      	mov	r0, sp
 800cc96:	9700      	str	r7, [sp, #0]
 800cc98:	f7ff fd8a 	bl	800c7b0 <__lo0bits>
 800cc9c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cca0:	b1e8      	cbz	r0, 800ccde <__d2b+0x7a>
 800cca2:	f1c0 0320 	rsb	r3, r0, #32
 800cca6:	fa02 f303 	lsl.w	r3, r2, r3
 800ccaa:	430b      	orrs	r3, r1
 800ccac:	40c2      	lsrs	r2, r0
 800ccae:	616b      	str	r3, [r5, #20]
 800ccb0:	9201      	str	r2, [sp, #4]
 800ccb2:	9b01      	ldr	r3, [sp, #4]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	bf14      	ite	ne
 800ccb8:	2102      	movne	r1, #2
 800ccba:	2101      	moveq	r1, #1
 800ccbc:	61ab      	str	r3, [r5, #24]
 800ccbe:	6129      	str	r1, [r5, #16]
 800ccc0:	b1bc      	cbz	r4, 800ccf2 <__d2b+0x8e>
 800ccc2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ccc6:	4404      	add	r4, r0
 800ccc8:	6034      	str	r4, [r6, #0]
 800ccca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ccce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccd0:	6018      	str	r0, [r3, #0]
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	b003      	add	sp, #12
 800ccd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ccdc:	e7d7      	b.n	800cc8e <__d2b+0x2a>
 800ccde:	6169      	str	r1, [r5, #20]
 800cce0:	e7e7      	b.n	800ccb2 <__d2b+0x4e>
 800cce2:	a801      	add	r0, sp, #4
 800cce4:	f7ff fd64 	bl	800c7b0 <__lo0bits>
 800cce8:	9b01      	ldr	r3, [sp, #4]
 800ccea:	2101      	movs	r1, #1
 800ccec:	616b      	str	r3, [r5, #20]
 800ccee:	3020      	adds	r0, #32
 800ccf0:	e7e5      	b.n	800ccbe <__d2b+0x5a>
 800ccf2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ccf6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800ccfa:	6030      	str	r0, [r6, #0]
 800ccfc:	6918      	ldr	r0, [r3, #16]
 800ccfe:	f7ff fd37 	bl	800c770 <__hi0bits>
 800cd02:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800cd06:	e7e2      	b.n	800ccce <__d2b+0x6a>
 800cd08:	0800dd9c 	.word	0x0800dd9c
 800cd0c:	0800ddad 	.word	0x0800ddad

0800cd10 <__sflush_r>:
 800cd10:	898a      	ldrh	r2, [r1, #12]
 800cd12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd14:	4605      	mov	r5, r0
 800cd16:	0710      	lsls	r0, r2, #28
 800cd18:	460c      	mov	r4, r1
 800cd1a:	d457      	bmi.n	800cdcc <__sflush_r+0xbc>
 800cd1c:	684b      	ldr	r3, [r1, #4]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	dc04      	bgt.n	800cd2c <__sflush_r+0x1c>
 800cd22:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	dc01      	bgt.n	800cd2c <__sflush_r+0x1c>
 800cd28:	2000      	movs	r0, #0
 800cd2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd2e:	2e00      	cmp	r6, #0
 800cd30:	d0fa      	beq.n	800cd28 <__sflush_r+0x18>
 800cd32:	2300      	movs	r3, #0
 800cd34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd38:	682f      	ldr	r7, [r5, #0]
 800cd3a:	6a21      	ldr	r1, [r4, #32]
 800cd3c:	602b      	str	r3, [r5, #0]
 800cd3e:	d032      	beq.n	800cda6 <__sflush_r+0x96>
 800cd40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd42:	89a3      	ldrh	r3, [r4, #12]
 800cd44:	075a      	lsls	r2, r3, #29
 800cd46:	d505      	bpl.n	800cd54 <__sflush_r+0x44>
 800cd48:	6863      	ldr	r3, [r4, #4]
 800cd4a:	1ac0      	subs	r0, r0, r3
 800cd4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd4e:	b10b      	cbz	r3, 800cd54 <__sflush_r+0x44>
 800cd50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd52:	1ac0      	subs	r0, r0, r3
 800cd54:	2300      	movs	r3, #0
 800cd56:	4602      	mov	r2, r0
 800cd58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	6a21      	ldr	r1, [r4, #32]
 800cd5e:	47b0      	blx	r6
 800cd60:	1c43      	adds	r3, r0, #1
 800cd62:	89a3      	ldrh	r3, [r4, #12]
 800cd64:	d106      	bne.n	800cd74 <__sflush_r+0x64>
 800cd66:	6829      	ldr	r1, [r5, #0]
 800cd68:	291d      	cmp	r1, #29
 800cd6a:	d82b      	bhi.n	800cdc4 <__sflush_r+0xb4>
 800cd6c:	4a28      	ldr	r2, [pc, #160]	; (800ce10 <__sflush_r+0x100>)
 800cd6e:	410a      	asrs	r2, r1
 800cd70:	07d6      	lsls	r6, r2, #31
 800cd72:	d427      	bmi.n	800cdc4 <__sflush_r+0xb4>
 800cd74:	2200      	movs	r2, #0
 800cd76:	6062      	str	r2, [r4, #4]
 800cd78:	6922      	ldr	r2, [r4, #16]
 800cd7a:	04d9      	lsls	r1, r3, #19
 800cd7c:	6022      	str	r2, [r4, #0]
 800cd7e:	d504      	bpl.n	800cd8a <__sflush_r+0x7a>
 800cd80:	1c42      	adds	r2, r0, #1
 800cd82:	d101      	bne.n	800cd88 <__sflush_r+0x78>
 800cd84:	682b      	ldr	r3, [r5, #0]
 800cd86:	b903      	cbnz	r3, 800cd8a <__sflush_r+0x7a>
 800cd88:	6560      	str	r0, [r4, #84]	; 0x54
 800cd8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd8c:	602f      	str	r7, [r5, #0]
 800cd8e:	2900      	cmp	r1, #0
 800cd90:	d0ca      	beq.n	800cd28 <__sflush_r+0x18>
 800cd92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd96:	4299      	cmp	r1, r3
 800cd98:	d002      	beq.n	800cda0 <__sflush_r+0x90>
 800cd9a:	4628      	mov	r0, r5
 800cd9c:	f7ff fbf8 	bl	800c590 <_free_r>
 800cda0:	2000      	movs	r0, #0
 800cda2:	6360      	str	r0, [r4, #52]	; 0x34
 800cda4:	e7c1      	b.n	800cd2a <__sflush_r+0x1a>
 800cda6:	2301      	movs	r3, #1
 800cda8:	4628      	mov	r0, r5
 800cdaa:	47b0      	blx	r6
 800cdac:	1c41      	adds	r1, r0, #1
 800cdae:	d1c8      	bne.n	800cd42 <__sflush_r+0x32>
 800cdb0:	682b      	ldr	r3, [r5, #0]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d0c5      	beq.n	800cd42 <__sflush_r+0x32>
 800cdb6:	2b1d      	cmp	r3, #29
 800cdb8:	d001      	beq.n	800cdbe <__sflush_r+0xae>
 800cdba:	2b16      	cmp	r3, #22
 800cdbc:	d101      	bne.n	800cdc2 <__sflush_r+0xb2>
 800cdbe:	602f      	str	r7, [r5, #0]
 800cdc0:	e7b2      	b.n	800cd28 <__sflush_r+0x18>
 800cdc2:	89a3      	ldrh	r3, [r4, #12]
 800cdc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdc8:	81a3      	strh	r3, [r4, #12]
 800cdca:	e7ae      	b.n	800cd2a <__sflush_r+0x1a>
 800cdcc:	690f      	ldr	r7, [r1, #16]
 800cdce:	2f00      	cmp	r7, #0
 800cdd0:	d0aa      	beq.n	800cd28 <__sflush_r+0x18>
 800cdd2:	0793      	lsls	r3, r2, #30
 800cdd4:	bf18      	it	ne
 800cdd6:	2300      	movne	r3, #0
 800cdd8:	680e      	ldr	r6, [r1, #0]
 800cdda:	bf08      	it	eq
 800cddc:	694b      	ldreq	r3, [r1, #20]
 800cdde:	1bf6      	subs	r6, r6, r7
 800cde0:	600f      	str	r7, [r1, #0]
 800cde2:	608b      	str	r3, [r1, #8]
 800cde4:	2e00      	cmp	r6, #0
 800cde6:	dd9f      	ble.n	800cd28 <__sflush_r+0x18>
 800cde8:	4633      	mov	r3, r6
 800cdea:	463a      	mov	r2, r7
 800cdec:	4628      	mov	r0, r5
 800cdee:	6a21      	ldr	r1, [r4, #32]
 800cdf0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800cdf4:	47e0      	blx	ip
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	dc06      	bgt.n	800ce08 <__sflush_r+0xf8>
 800cdfa:	89a3      	ldrh	r3, [r4, #12]
 800cdfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ce00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce04:	81a3      	strh	r3, [r4, #12]
 800ce06:	e790      	b.n	800cd2a <__sflush_r+0x1a>
 800ce08:	4407      	add	r7, r0
 800ce0a:	1a36      	subs	r6, r6, r0
 800ce0c:	e7ea      	b.n	800cde4 <__sflush_r+0xd4>
 800ce0e:	bf00      	nop
 800ce10:	dfbffffe 	.word	0xdfbffffe

0800ce14 <_fflush_r>:
 800ce14:	b538      	push	{r3, r4, r5, lr}
 800ce16:	690b      	ldr	r3, [r1, #16]
 800ce18:	4605      	mov	r5, r0
 800ce1a:	460c      	mov	r4, r1
 800ce1c:	b913      	cbnz	r3, 800ce24 <_fflush_r+0x10>
 800ce1e:	2500      	movs	r5, #0
 800ce20:	4628      	mov	r0, r5
 800ce22:	bd38      	pop	{r3, r4, r5, pc}
 800ce24:	b118      	cbz	r0, 800ce2e <_fflush_r+0x1a>
 800ce26:	6a03      	ldr	r3, [r0, #32]
 800ce28:	b90b      	cbnz	r3, 800ce2e <_fflush_r+0x1a>
 800ce2a:	f7fe fc2d 	bl	800b688 <__sinit>
 800ce2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d0f3      	beq.n	800ce1e <_fflush_r+0xa>
 800ce36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce38:	07d0      	lsls	r0, r2, #31
 800ce3a:	d404      	bmi.n	800ce46 <_fflush_r+0x32>
 800ce3c:	0599      	lsls	r1, r3, #22
 800ce3e:	d402      	bmi.n	800ce46 <_fflush_r+0x32>
 800ce40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce42:	f7fe fd28 	bl	800b896 <__retarget_lock_acquire_recursive>
 800ce46:	4628      	mov	r0, r5
 800ce48:	4621      	mov	r1, r4
 800ce4a:	f7ff ff61 	bl	800cd10 <__sflush_r>
 800ce4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce50:	4605      	mov	r5, r0
 800ce52:	07da      	lsls	r2, r3, #31
 800ce54:	d4e4      	bmi.n	800ce20 <_fflush_r+0xc>
 800ce56:	89a3      	ldrh	r3, [r4, #12]
 800ce58:	059b      	lsls	r3, r3, #22
 800ce5a:	d4e1      	bmi.n	800ce20 <_fflush_r+0xc>
 800ce5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce5e:	f7fe fd1b 	bl	800b898 <__retarget_lock_release_recursive>
 800ce62:	e7dd      	b.n	800ce20 <_fflush_r+0xc>

0800ce64 <memcpy>:
 800ce64:	440a      	add	r2, r1
 800ce66:	4291      	cmp	r1, r2
 800ce68:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce6c:	d100      	bne.n	800ce70 <memcpy+0xc>
 800ce6e:	4770      	bx	lr
 800ce70:	b510      	push	{r4, lr}
 800ce72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce76:	4291      	cmp	r1, r2
 800ce78:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce7c:	d1f9      	bne.n	800ce72 <memcpy+0xe>
 800ce7e:	bd10      	pop	{r4, pc}

0800ce80 <__assert_func>:
 800ce80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce82:	4614      	mov	r4, r2
 800ce84:	461a      	mov	r2, r3
 800ce86:	4b09      	ldr	r3, [pc, #36]	; (800ceac <__assert_func+0x2c>)
 800ce88:	4605      	mov	r5, r0
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	68d8      	ldr	r0, [r3, #12]
 800ce8e:	b14c      	cbz	r4, 800cea4 <__assert_func+0x24>
 800ce90:	4b07      	ldr	r3, [pc, #28]	; (800ceb0 <__assert_func+0x30>)
 800ce92:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce96:	9100      	str	r1, [sp, #0]
 800ce98:	462b      	mov	r3, r5
 800ce9a:	4906      	ldr	r1, [pc, #24]	; (800ceb4 <__assert_func+0x34>)
 800ce9c:	f000 f842 	bl	800cf24 <fiprintf>
 800cea0:	f000 f852 	bl	800cf48 <abort>
 800cea4:	4b04      	ldr	r3, [pc, #16]	; (800ceb8 <__assert_func+0x38>)
 800cea6:	461c      	mov	r4, r3
 800cea8:	e7f3      	b.n	800ce92 <__assert_func+0x12>
 800ceaa:	bf00      	nop
 800ceac:	20000208 	.word	0x20000208
 800ceb0:	0800df0e 	.word	0x0800df0e
 800ceb4:	0800df1b 	.word	0x0800df1b
 800ceb8:	0800df49 	.word	0x0800df49

0800cebc <_calloc_r>:
 800cebc:	b570      	push	{r4, r5, r6, lr}
 800cebe:	fba1 5402 	umull	r5, r4, r1, r2
 800cec2:	b934      	cbnz	r4, 800ced2 <_calloc_r+0x16>
 800cec4:	4629      	mov	r1, r5
 800cec6:	f7fd fe69 	bl	800ab9c <_malloc_r>
 800ceca:	4606      	mov	r6, r0
 800cecc:	b928      	cbnz	r0, 800ceda <_calloc_r+0x1e>
 800cece:	4630      	mov	r0, r6
 800ced0:	bd70      	pop	{r4, r5, r6, pc}
 800ced2:	220c      	movs	r2, #12
 800ced4:	2600      	movs	r6, #0
 800ced6:	6002      	str	r2, [r0, #0]
 800ced8:	e7f9      	b.n	800cece <_calloc_r+0x12>
 800ceda:	462a      	mov	r2, r5
 800cedc:	4621      	mov	r1, r4
 800cede:	f7fe fc4c 	bl	800b77a <memset>
 800cee2:	e7f4      	b.n	800cece <_calloc_r+0x12>

0800cee4 <__ascii_mbtowc>:
 800cee4:	b082      	sub	sp, #8
 800cee6:	b901      	cbnz	r1, 800ceea <__ascii_mbtowc+0x6>
 800cee8:	a901      	add	r1, sp, #4
 800ceea:	b142      	cbz	r2, 800cefe <__ascii_mbtowc+0x1a>
 800ceec:	b14b      	cbz	r3, 800cf02 <__ascii_mbtowc+0x1e>
 800ceee:	7813      	ldrb	r3, [r2, #0]
 800cef0:	600b      	str	r3, [r1, #0]
 800cef2:	7812      	ldrb	r2, [r2, #0]
 800cef4:	1e10      	subs	r0, r2, #0
 800cef6:	bf18      	it	ne
 800cef8:	2001      	movne	r0, #1
 800cefa:	b002      	add	sp, #8
 800cefc:	4770      	bx	lr
 800cefe:	4610      	mov	r0, r2
 800cf00:	e7fb      	b.n	800cefa <__ascii_mbtowc+0x16>
 800cf02:	f06f 0001 	mvn.w	r0, #1
 800cf06:	e7f8      	b.n	800cefa <__ascii_mbtowc+0x16>

0800cf08 <__ascii_wctomb>:
 800cf08:	4603      	mov	r3, r0
 800cf0a:	4608      	mov	r0, r1
 800cf0c:	b141      	cbz	r1, 800cf20 <__ascii_wctomb+0x18>
 800cf0e:	2aff      	cmp	r2, #255	; 0xff
 800cf10:	d904      	bls.n	800cf1c <__ascii_wctomb+0x14>
 800cf12:	228a      	movs	r2, #138	; 0x8a
 800cf14:	f04f 30ff 	mov.w	r0, #4294967295
 800cf18:	601a      	str	r2, [r3, #0]
 800cf1a:	4770      	bx	lr
 800cf1c:	2001      	movs	r0, #1
 800cf1e:	700a      	strb	r2, [r1, #0]
 800cf20:	4770      	bx	lr
	...

0800cf24 <fiprintf>:
 800cf24:	b40e      	push	{r1, r2, r3}
 800cf26:	b503      	push	{r0, r1, lr}
 800cf28:	4601      	mov	r1, r0
 800cf2a:	ab03      	add	r3, sp, #12
 800cf2c:	4805      	ldr	r0, [pc, #20]	; (800cf44 <fiprintf+0x20>)
 800cf2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf32:	6800      	ldr	r0, [r0, #0]
 800cf34:	9301      	str	r3, [sp, #4]
 800cf36:	f000 f835 	bl	800cfa4 <_vfiprintf_r>
 800cf3a:	b002      	add	sp, #8
 800cf3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf40:	b003      	add	sp, #12
 800cf42:	4770      	bx	lr
 800cf44:	20000208 	.word	0x20000208

0800cf48 <abort>:
 800cf48:	2006      	movs	r0, #6
 800cf4a:	b508      	push	{r3, lr}
 800cf4c:	f000 fa02 	bl	800d354 <raise>
 800cf50:	2001      	movs	r0, #1
 800cf52:	f7f5 fc94 	bl	800287e <_exit>

0800cf56 <__sfputc_r>:
 800cf56:	6893      	ldr	r3, [r2, #8]
 800cf58:	b410      	push	{r4}
 800cf5a:	3b01      	subs	r3, #1
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	6093      	str	r3, [r2, #8]
 800cf60:	da07      	bge.n	800cf72 <__sfputc_r+0x1c>
 800cf62:	6994      	ldr	r4, [r2, #24]
 800cf64:	42a3      	cmp	r3, r4
 800cf66:	db01      	blt.n	800cf6c <__sfputc_r+0x16>
 800cf68:	290a      	cmp	r1, #10
 800cf6a:	d102      	bne.n	800cf72 <__sfputc_r+0x1c>
 800cf6c:	bc10      	pop	{r4}
 800cf6e:	f000 b933 	b.w	800d1d8 <__swbuf_r>
 800cf72:	6813      	ldr	r3, [r2, #0]
 800cf74:	1c58      	adds	r0, r3, #1
 800cf76:	6010      	str	r0, [r2, #0]
 800cf78:	7019      	strb	r1, [r3, #0]
 800cf7a:	4608      	mov	r0, r1
 800cf7c:	bc10      	pop	{r4}
 800cf7e:	4770      	bx	lr

0800cf80 <__sfputs_r>:
 800cf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf82:	4606      	mov	r6, r0
 800cf84:	460f      	mov	r7, r1
 800cf86:	4614      	mov	r4, r2
 800cf88:	18d5      	adds	r5, r2, r3
 800cf8a:	42ac      	cmp	r4, r5
 800cf8c:	d101      	bne.n	800cf92 <__sfputs_r+0x12>
 800cf8e:	2000      	movs	r0, #0
 800cf90:	e007      	b.n	800cfa2 <__sfputs_r+0x22>
 800cf92:	463a      	mov	r2, r7
 800cf94:	4630      	mov	r0, r6
 800cf96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf9a:	f7ff ffdc 	bl	800cf56 <__sfputc_r>
 800cf9e:	1c43      	adds	r3, r0, #1
 800cfa0:	d1f3      	bne.n	800cf8a <__sfputs_r+0xa>
 800cfa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cfa4 <_vfiprintf_r>:
 800cfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa8:	460d      	mov	r5, r1
 800cfaa:	4614      	mov	r4, r2
 800cfac:	4698      	mov	r8, r3
 800cfae:	4606      	mov	r6, r0
 800cfb0:	b09d      	sub	sp, #116	; 0x74
 800cfb2:	b118      	cbz	r0, 800cfbc <_vfiprintf_r+0x18>
 800cfb4:	6a03      	ldr	r3, [r0, #32]
 800cfb6:	b90b      	cbnz	r3, 800cfbc <_vfiprintf_r+0x18>
 800cfb8:	f7fe fb66 	bl	800b688 <__sinit>
 800cfbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfbe:	07d9      	lsls	r1, r3, #31
 800cfc0:	d405      	bmi.n	800cfce <_vfiprintf_r+0x2a>
 800cfc2:	89ab      	ldrh	r3, [r5, #12]
 800cfc4:	059a      	lsls	r2, r3, #22
 800cfc6:	d402      	bmi.n	800cfce <_vfiprintf_r+0x2a>
 800cfc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfca:	f7fe fc64 	bl	800b896 <__retarget_lock_acquire_recursive>
 800cfce:	89ab      	ldrh	r3, [r5, #12]
 800cfd0:	071b      	lsls	r3, r3, #28
 800cfd2:	d501      	bpl.n	800cfd8 <_vfiprintf_r+0x34>
 800cfd4:	692b      	ldr	r3, [r5, #16]
 800cfd6:	b99b      	cbnz	r3, 800d000 <_vfiprintf_r+0x5c>
 800cfd8:	4629      	mov	r1, r5
 800cfda:	4630      	mov	r0, r6
 800cfdc:	f000 f93a 	bl	800d254 <__swsetup_r>
 800cfe0:	b170      	cbz	r0, 800d000 <_vfiprintf_r+0x5c>
 800cfe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfe4:	07dc      	lsls	r4, r3, #31
 800cfe6:	d504      	bpl.n	800cff2 <_vfiprintf_r+0x4e>
 800cfe8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfec:	b01d      	add	sp, #116	; 0x74
 800cfee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cff2:	89ab      	ldrh	r3, [r5, #12]
 800cff4:	0598      	lsls	r0, r3, #22
 800cff6:	d4f7      	bmi.n	800cfe8 <_vfiprintf_r+0x44>
 800cff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cffa:	f7fe fc4d 	bl	800b898 <__retarget_lock_release_recursive>
 800cffe:	e7f3      	b.n	800cfe8 <_vfiprintf_r+0x44>
 800d000:	2300      	movs	r3, #0
 800d002:	9309      	str	r3, [sp, #36]	; 0x24
 800d004:	2320      	movs	r3, #32
 800d006:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d00a:	2330      	movs	r3, #48	; 0x30
 800d00c:	f04f 0901 	mov.w	r9, #1
 800d010:	f8cd 800c 	str.w	r8, [sp, #12]
 800d014:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800d1c4 <_vfiprintf_r+0x220>
 800d018:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d01c:	4623      	mov	r3, r4
 800d01e:	469a      	mov	sl, r3
 800d020:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d024:	b10a      	cbz	r2, 800d02a <_vfiprintf_r+0x86>
 800d026:	2a25      	cmp	r2, #37	; 0x25
 800d028:	d1f9      	bne.n	800d01e <_vfiprintf_r+0x7a>
 800d02a:	ebba 0b04 	subs.w	fp, sl, r4
 800d02e:	d00b      	beq.n	800d048 <_vfiprintf_r+0xa4>
 800d030:	465b      	mov	r3, fp
 800d032:	4622      	mov	r2, r4
 800d034:	4629      	mov	r1, r5
 800d036:	4630      	mov	r0, r6
 800d038:	f7ff ffa2 	bl	800cf80 <__sfputs_r>
 800d03c:	3001      	adds	r0, #1
 800d03e:	f000 80a9 	beq.w	800d194 <_vfiprintf_r+0x1f0>
 800d042:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d044:	445a      	add	r2, fp
 800d046:	9209      	str	r2, [sp, #36]	; 0x24
 800d048:	f89a 3000 	ldrb.w	r3, [sl]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	f000 80a1 	beq.w	800d194 <_vfiprintf_r+0x1f0>
 800d052:	2300      	movs	r3, #0
 800d054:	f04f 32ff 	mov.w	r2, #4294967295
 800d058:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d05c:	f10a 0a01 	add.w	sl, sl, #1
 800d060:	9304      	str	r3, [sp, #16]
 800d062:	9307      	str	r3, [sp, #28]
 800d064:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d068:	931a      	str	r3, [sp, #104]	; 0x68
 800d06a:	4654      	mov	r4, sl
 800d06c:	2205      	movs	r2, #5
 800d06e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d072:	4854      	ldr	r0, [pc, #336]	; (800d1c4 <_vfiprintf_r+0x220>)
 800d074:	f7fe fc11 	bl	800b89a <memchr>
 800d078:	9a04      	ldr	r2, [sp, #16]
 800d07a:	b9d8      	cbnz	r0, 800d0b4 <_vfiprintf_r+0x110>
 800d07c:	06d1      	lsls	r1, r2, #27
 800d07e:	bf44      	itt	mi
 800d080:	2320      	movmi	r3, #32
 800d082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d086:	0713      	lsls	r3, r2, #28
 800d088:	bf44      	itt	mi
 800d08a:	232b      	movmi	r3, #43	; 0x2b
 800d08c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d090:	f89a 3000 	ldrb.w	r3, [sl]
 800d094:	2b2a      	cmp	r3, #42	; 0x2a
 800d096:	d015      	beq.n	800d0c4 <_vfiprintf_r+0x120>
 800d098:	4654      	mov	r4, sl
 800d09a:	2000      	movs	r0, #0
 800d09c:	f04f 0c0a 	mov.w	ip, #10
 800d0a0:	9a07      	ldr	r2, [sp, #28]
 800d0a2:	4621      	mov	r1, r4
 800d0a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0a8:	3b30      	subs	r3, #48	; 0x30
 800d0aa:	2b09      	cmp	r3, #9
 800d0ac:	d94d      	bls.n	800d14a <_vfiprintf_r+0x1a6>
 800d0ae:	b1b0      	cbz	r0, 800d0de <_vfiprintf_r+0x13a>
 800d0b0:	9207      	str	r2, [sp, #28]
 800d0b2:	e014      	b.n	800d0de <_vfiprintf_r+0x13a>
 800d0b4:	eba0 0308 	sub.w	r3, r0, r8
 800d0b8:	fa09 f303 	lsl.w	r3, r9, r3
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	46a2      	mov	sl, r4
 800d0c0:	9304      	str	r3, [sp, #16]
 800d0c2:	e7d2      	b.n	800d06a <_vfiprintf_r+0xc6>
 800d0c4:	9b03      	ldr	r3, [sp, #12]
 800d0c6:	1d19      	adds	r1, r3, #4
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	9103      	str	r1, [sp, #12]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	bfbb      	ittet	lt
 800d0d0:	425b      	neglt	r3, r3
 800d0d2:	f042 0202 	orrlt.w	r2, r2, #2
 800d0d6:	9307      	strge	r3, [sp, #28]
 800d0d8:	9307      	strlt	r3, [sp, #28]
 800d0da:	bfb8      	it	lt
 800d0dc:	9204      	strlt	r2, [sp, #16]
 800d0de:	7823      	ldrb	r3, [r4, #0]
 800d0e0:	2b2e      	cmp	r3, #46	; 0x2e
 800d0e2:	d10c      	bne.n	800d0fe <_vfiprintf_r+0x15a>
 800d0e4:	7863      	ldrb	r3, [r4, #1]
 800d0e6:	2b2a      	cmp	r3, #42	; 0x2a
 800d0e8:	d134      	bne.n	800d154 <_vfiprintf_r+0x1b0>
 800d0ea:	9b03      	ldr	r3, [sp, #12]
 800d0ec:	3402      	adds	r4, #2
 800d0ee:	1d1a      	adds	r2, r3, #4
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	9203      	str	r2, [sp, #12]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	bfb8      	it	lt
 800d0f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0fc:	9305      	str	r3, [sp, #20]
 800d0fe:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d1c8 <_vfiprintf_r+0x224>
 800d102:	2203      	movs	r2, #3
 800d104:	4650      	mov	r0, sl
 800d106:	7821      	ldrb	r1, [r4, #0]
 800d108:	f7fe fbc7 	bl	800b89a <memchr>
 800d10c:	b138      	cbz	r0, 800d11e <_vfiprintf_r+0x17a>
 800d10e:	2240      	movs	r2, #64	; 0x40
 800d110:	9b04      	ldr	r3, [sp, #16]
 800d112:	eba0 000a 	sub.w	r0, r0, sl
 800d116:	4082      	lsls	r2, r0
 800d118:	4313      	orrs	r3, r2
 800d11a:	3401      	adds	r4, #1
 800d11c:	9304      	str	r3, [sp, #16]
 800d11e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d122:	2206      	movs	r2, #6
 800d124:	4829      	ldr	r0, [pc, #164]	; (800d1cc <_vfiprintf_r+0x228>)
 800d126:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d12a:	f7fe fbb6 	bl	800b89a <memchr>
 800d12e:	2800      	cmp	r0, #0
 800d130:	d03f      	beq.n	800d1b2 <_vfiprintf_r+0x20e>
 800d132:	4b27      	ldr	r3, [pc, #156]	; (800d1d0 <_vfiprintf_r+0x22c>)
 800d134:	bb1b      	cbnz	r3, 800d17e <_vfiprintf_r+0x1da>
 800d136:	9b03      	ldr	r3, [sp, #12]
 800d138:	3307      	adds	r3, #7
 800d13a:	f023 0307 	bic.w	r3, r3, #7
 800d13e:	3308      	adds	r3, #8
 800d140:	9303      	str	r3, [sp, #12]
 800d142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d144:	443b      	add	r3, r7
 800d146:	9309      	str	r3, [sp, #36]	; 0x24
 800d148:	e768      	b.n	800d01c <_vfiprintf_r+0x78>
 800d14a:	460c      	mov	r4, r1
 800d14c:	2001      	movs	r0, #1
 800d14e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d152:	e7a6      	b.n	800d0a2 <_vfiprintf_r+0xfe>
 800d154:	2300      	movs	r3, #0
 800d156:	f04f 0c0a 	mov.w	ip, #10
 800d15a:	4619      	mov	r1, r3
 800d15c:	3401      	adds	r4, #1
 800d15e:	9305      	str	r3, [sp, #20]
 800d160:	4620      	mov	r0, r4
 800d162:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d166:	3a30      	subs	r2, #48	; 0x30
 800d168:	2a09      	cmp	r2, #9
 800d16a:	d903      	bls.n	800d174 <_vfiprintf_r+0x1d0>
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d0c6      	beq.n	800d0fe <_vfiprintf_r+0x15a>
 800d170:	9105      	str	r1, [sp, #20]
 800d172:	e7c4      	b.n	800d0fe <_vfiprintf_r+0x15a>
 800d174:	4604      	mov	r4, r0
 800d176:	2301      	movs	r3, #1
 800d178:	fb0c 2101 	mla	r1, ip, r1, r2
 800d17c:	e7f0      	b.n	800d160 <_vfiprintf_r+0x1bc>
 800d17e:	ab03      	add	r3, sp, #12
 800d180:	9300      	str	r3, [sp, #0]
 800d182:	462a      	mov	r2, r5
 800d184:	4630      	mov	r0, r6
 800d186:	4b13      	ldr	r3, [pc, #76]	; (800d1d4 <_vfiprintf_r+0x230>)
 800d188:	a904      	add	r1, sp, #16
 800d18a:	f7fd fe2f 	bl	800adec <_printf_float>
 800d18e:	4607      	mov	r7, r0
 800d190:	1c78      	adds	r0, r7, #1
 800d192:	d1d6      	bne.n	800d142 <_vfiprintf_r+0x19e>
 800d194:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d196:	07d9      	lsls	r1, r3, #31
 800d198:	d405      	bmi.n	800d1a6 <_vfiprintf_r+0x202>
 800d19a:	89ab      	ldrh	r3, [r5, #12]
 800d19c:	059a      	lsls	r2, r3, #22
 800d19e:	d402      	bmi.n	800d1a6 <_vfiprintf_r+0x202>
 800d1a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1a2:	f7fe fb79 	bl	800b898 <__retarget_lock_release_recursive>
 800d1a6:	89ab      	ldrh	r3, [r5, #12]
 800d1a8:	065b      	lsls	r3, r3, #25
 800d1aa:	f53f af1d 	bmi.w	800cfe8 <_vfiprintf_r+0x44>
 800d1ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1b0:	e71c      	b.n	800cfec <_vfiprintf_r+0x48>
 800d1b2:	ab03      	add	r3, sp, #12
 800d1b4:	9300      	str	r3, [sp, #0]
 800d1b6:	462a      	mov	r2, r5
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	4b06      	ldr	r3, [pc, #24]	; (800d1d4 <_vfiprintf_r+0x230>)
 800d1bc:	a904      	add	r1, sp, #16
 800d1be:	f7fe f8b5 	bl	800b32c <_printf_i>
 800d1c2:	e7e4      	b.n	800d18e <_vfiprintf_r+0x1ea>
 800d1c4:	0800e04b 	.word	0x0800e04b
 800d1c8:	0800e051 	.word	0x0800e051
 800d1cc:	0800e055 	.word	0x0800e055
 800d1d0:	0800aded 	.word	0x0800aded
 800d1d4:	0800cf81 	.word	0x0800cf81

0800d1d8 <__swbuf_r>:
 800d1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1da:	460e      	mov	r6, r1
 800d1dc:	4614      	mov	r4, r2
 800d1de:	4605      	mov	r5, r0
 800d1e0:	b118      	cbz	r0, 800d1ea <__swbuf_r+0x12>
 800d1e2:	6a03      	ldr	r3, [r0, #32]
 800d1e4:	b90b      	cbnz	r3, 800d1ea <__swbuf_r+0x12>
 800d1e6:	f7fe fa4f 	bl	800b688 <__sinit>
 800d1ea:	69a3      	ldr	r3, [r4, #24]
 800d1ec:	60a3      	str	r3, [r4, #8]
 800d1ee:	89a3      	ldrh	r3, [r4, #12]
 800d1f0:	071a      	lsls	r2, r3, #28
 800d1f2:	d525      	bpl.n	800d240 <__swbuf_r+0x68>
 800d1f4:	6923      	ldr	r3, [r4, #16]
 800d1f6:	b31b      	cbz	r3, 800d240 <__swbuf_r+0x68>
 800d1f8:	6823      	ldr	r3, [r4, #0]
 800d1fa:	6922      	ldr	r2, [r4, #16]
 800d1fc:	b2f6      	uxtb	r6, r6
 800d1fe:	1a98      	subs	r0, r3, r2
 800d200:	6963      	ldr	r3, [r4, #20]
 800d202:	4637      	mov	r7, r6
 800d204:	4283      	cmp	r3, r0
 800d206:	dc04      	bgt.n	800d212 <__swbuf_r+0x3a>
 800d208:	4621      	mov	r1, r4
 800d20a:	4628      	mov	r0, r5
 800d20c:	f7ff fe02 	bl	800ce14 <_fflush_r>
 800d210:	b9e0      	cbnz	r0, 800d24c <__swbuf_r+0x74>
 800d212:	68a3      	ldr	r3, [r4, #8]
 800d214:	3b01      	subs	r3, #1
 800d216:	60a3      	str	r3, [r4, #8]
 800d218:	6823      	ldr	r3, [r4, #0]
 800d21a:	1c5a      	adds	r2, r3, #1
 800d21c:	6022      	str	r2, [r4, #0]
 800d21e:	701e      	strb	r6, [r3, #0]
 800d220:	6962      	ldr	r2, [r4, #20]
 800d222:	1c43      	adds	r3, r0, #1
 800d224:	429a      	cmp	r2, r3
 800d226:	d004      	beq.n	800d232 <__swbuf_r+0x5a>
 800d228:	89a3      	ldrh	r3, [r4, #12]
 800d22a:	07db      	lsls	r3, r3, #31
 800d22c:	d506      	bpl.n	800d23c <__swbuf_r+0x64>
 800d22e:	2e0a      	cmp	r6, #10
 800d230:	d104      	bne.n	800d23c <__swbuf_r+0x64>
 800d232:	4621      	mov	r1, r4
 800d234:	4628      	mov	r0, r5
 800d236:	f7ff fded 	bl	800ce14 <_fflush_r>
 800d23a:	b938      	cbnz	r0, 800d24c <__swbuf_r+0x74>
 800d23c:	4638      	mov	r0, r7
 800d23e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d240:	4621      	mov	r1, r4
 800d242:	4628      	mov	r0, r5
 800d244:	f000 f806 	bl	800d254 <__swsetup_r>
 800d248:	2800      	cmp	r0, #0
 800d24a:	d0d5      	beq.n	800d1f8 <__swbuf_r+0x20>
 800d24c:	f04f 37ff 	mov.w	r7, #4294967295
 800d250:	e7f4      	b.n	800d23c <__swbuf_r+0x64>
	...

0800d254 <__swsetup_r>:
 800d254:	b538      	push	{r3, r4, r5, lr}
 800d256:	4b2a      	ldr	r3, [pc, #168]	; (800d300 <__swsetup_r+0xac>)
 800d258:	4605      	mov	r5, r0
 800d25a:	6818      	ldr	r0, [r3, #0]
 800d25c:	460c      	mov	r4, r1
 800d25e:	b118      	cbz	r0, 800d268 <__swsetup_r+0x14>
 800d260:	6a03      	ldr	r3, [r0, #32]
 800d262:	b90b      	cbnz	r3, 800d268 <__swsetup_r+0x14>
 800d264:	f7fe fa10 	bl	800b688 <__sinit>
 800d268:	89a3      	ldrh	r3, [r4, #12]
 800d26a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d26e:	0718      	lsls	r0, r3, #28
 800d270:	d422      	bmi.n	800d2b8 <__swsetup_r+0x64>
 800d272:	06d9      	lsls	r1, r3, #27
 800d274:	d407      	bmi.n	800d286 <__swsetup_r+0x32>
 800d276:	2309      	movs	r3, #9
 800d278:	602b      	str	r3, [r5, #0]
 800d27a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d27e:	f04f 30ff 	mov.w	r0, #4294967295
 800d282:	81a3      	strh	r3, [r4, #12]
 800d284:	e034      	b.n	800d2f0 <__swsetup_r+0x9c>
 800d286:	0758      	lsls	r0, r3, #29
 800d288:	d512      	bpl.n	800d2b0 <__swsetup_r+0x5c>
 800d28a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d28c:	b141      	cbz	r1, 800d2a0 <__swsetup_r+0x4c>
 800d28e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d292:	4299      	cmp	r1, r3
 800d294:	d002      	beq.n	800d29c <__swsetup_r+0x48>
 800d296:	4628      	mov	r0, r5
 800d298:	f7ff f97a 	bl	800c590 <_free_r>
 800d29c:	2300      	movs	r3, #0
 800d29e:	6363      	str	r3, [r4, #52]	; 0x34
 800d2a0:	89a3      	ldrh	r3, [r4, #12]
 800d2a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d2a6:	81a3      	strh	r3, [r4, #12]
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	6063      	str	r3, [r4, #4]
 800d2ac:	6923      	ldr	r3, [r4, #16]
 800d2ae:	6023      	str	r3, [r4, #0]
 800d2b0:	89a3      	ldrh	r3, [r4, #12]
 800d2b2:	f043 0308 	orr.w	r3, r3, #8
 800d2b6:	81a3      	strh	r3, [r4, #12]
 800d2b8:	6923      	ldr	r3, [r4, #16]
 800d2ba:	b94b      	cbnz	r3, 800d2d0 <__swsetup_r+0x7c>
 800d2bc:	89a3      	ldrh	r3, [r4, #12]
 800d2be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d2c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2c6:	d003      	beq.n	800d2d0 <__swsetup_r+0x7c>
 800d2c8:	4621      	mov	r1, r4
 800d2ca:	4628      	mov	r0, r5
 800d2cc:	f000 f883 	bl	800d3d6 <__smakebuf_r>
 800d2d0:	89a0      	ldrh	r0, [r4, #12]
 800d2d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2d6:	f010 0301 	ands.w	r3, r0, #1
 800d2da:	d00a      	beq.n	800d2f2 <__swsetup_r+0x9e>
 800d2dc:	2300      	movs	r3, #0
 800d2de:	60a3      	str	r3, [r4, #8]
 800d2e0:	6963      	ldr	r3, [r4, #20]
 800d2e2:	425b      	negs	r3, r3
 800d2e4:	61a3      	str	r3, [r4, #24]
 800d2e6:	6923      	ldr	r3, [r4, #16]
 800d2e8:	b943      	cbnz	r3, 800d2fc <__swsetup_r+0xa8>
 800d2ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d2ee:	d1c4      	bne.n	800d27a <__swsetup_r+0x26>
 800d2f0:	bd38      	pop	{r3, r4, r5, pc}
 800d2f2:	0781      	lsls	r1, r0, #30
 800d2f4:	bf58      	it	pl
 800d2f6:	6963      	ldrpl	r3, [r4, #20]
 800d2f8:	60a3      	str	r3, [r4, #8]
 800d2fa:	e7f4      	b.n	800d2e6 <__swsetup_r+0x92>
 800d2fc:	2000      	movs	r0, #0
 800d2fe:	e7f7      	b.n	800d2f0 <__swsetup_r+0x9c>
 800d300:	20000208 	.word	0x20000208

0800d304 <_raise_r>:
 800d304:	291f      	cmp	r1, #31
 800d306:	b538      	push	{r3, r4, r5, lr}
 800d308:	4604      	mov	r4, r0
 800d30a:	460d      	mov	r5, r1
 800d30c:	d904      	bls.n	800d318 <_raise_r+0x14>
 800d30e:	2316      	movs	r3, #22
 800d310:	6003      	str	r3, [r0, #0]
 800d312:	f04f 30ff 	mov.w	r0, #4294967295
 800d316:	bd38      	pop	{r3, r4, r5, pc}
 800d318:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d31a:	b112      	cbz	r2, 800d322 <_raise_r+0x1e>
 800d31c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d320:	b94b      	cbnz	r3, 800d336 <_raise_r+0x32>
 800d322:	4620      	mov	r0, r4
 800d324:	f000 f830 	bl	800d388 <_getpid_r>
 800d328:	462a      	mov	r2, r5
 800d32a:	4601      	mov	r1, r0
 800d32c:	4620      	mov	r0, r4
 800d32e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d332:	f000 b817 	b.w	800d364 <_kill_r>
 800d336:	2b01      	cmp	r3, #1
 800d338:	d00a      	beq.n	800d350 <_raise_r+0x4c>
 800d33a:	1c59      	adds	r1, r3, #1
 800d33c:	d103      	bne.n	800d346 <_raise_r+0x42>
 800d33e:	2316      	movs	r3, #22
 800d340:	6003      	str	r3, [r0, #0]
 800d342:	2001      	movs	r0, #1
 800d344:	e7e7      	b.n	800d316 <_raise_r+0x12>
 800d346:	2400      	movs	r4, #0
 800d348:	4628      	mov	r0, r5
 800d34a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d34e:	4798      	blx	r3
 800d350:	2000      	movs	r0, #0
 800d352:	e7e0      	b.n	800d316 <_raise_r+0x12>

0800d354 <raise>:
 800d354:	4b02      	ldr	r3, [pc, #8]	; (800d360 <raise+0xc>)
 800d356:	4601      	mov	r1, r0
 800d358:	6818      	ldr	r0, [r3, #0]
 800d35a:	f7ff bfd3 	b.w	800d304 <_raise_r>
 800d35e:	bf00      	nop
 800d360:	20000208 	.word	0x20000208

0800d364 <_kill_r>:
 800d364:	b538      	push	{r3, r4, r5, lr}
 800d366:	2300      	movs	r3, #0
 800d368:	4d06      	ldr	r5, [pc, #24]	; (800d384 <_kill_r+0x20>)
 800d36a:	4604      	mov	r4, r0
 800d36c:	4608      	mov	r0, r1
 800d36e:	4611      	mov	r1, r2
 800d370:	602b      	str	r3, [r5, #0]
 800d372:	f7f5 fa74 	bl	800285e <_kill>
 800d376:	1c43      	adds	r3, r0, #1
 800d378:	d102      	bne.n	800d380 <_kill_r+0x1c>
 800d37a:	682b      	ldr	r3, [r5, #0]
 800d37c:	b103      	cbz	r3, 800d380 <_kill_r+0x1c>
 800d37e:	6023      	str	r3, [r4, #0]
 800d380:	bd38      	pop	{r3, r4, r5, pc}
 800d382:	bf00      	nop
 800d384:	20001904 	.word	0x20001904

0800d388 <_getpid_r>:
 800d388:	f7f5 ba62 	b.w	8002850 <_getpid>

0800d38c <__swhatbuf_r>:
 800d38c:	b570      	push	{r4, r5, r6, lr}
 800d38e:	460c      	mov	r4, r1
 800d390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d394:	4615      	mov	r5, r2
 800d396:	2900      	cmp	r1, #0
 800d398:	461e      	mov	r6, r3
 800d39a:	b096      	sub	sp, #88	; 0x58
 800d39c:	da0c      	bge.n	800d3b8 <__swhatbuf_r+0x2c>
 800d39e:	89a3      	ldrh	r3, [r4, #12]
 800d3a0:	2100      	movs	r1, #0
 800d3a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d3a6:	bf0c      	ite	eq
 800d3a8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d3ac:	2340      	movne	r3, #64	; 0x40
 800d3ae:	2000      	movs	r0, #0
 800d3b0:	6031      	str	r1, [r6, #0]
 800d3b2:	602b      	str	r3, [r5, #0]
 800d3b4:	b016      	add	sp, #88	; 0x58
 800d3b6:	bd70      	pop	{r4, r5, r6, pc}
 800d3b8:	466a      	mov	r2, sp
 800d3ba:	f000 f849 	bl	800d450 <_fstat_r>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	dbed      	blt.n	800d39e <__swhatbuf_r+0x12>
 800d3c2:	9901      	ldr	r1, [sp, #4]
 800d3c4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d3c8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d3cc:	4259      	negs	r1, r3
 800d3ce:	4159      	adcs	r1, r3
 800d3d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3d4:	e7eb      	b.n	800d3ae <__swhatbuf_r+0x22>

0800d3d6 <__smakebuf_r>:
 800d3d6:	898b      	ldrh	r3, [r1, #12]
 800d3d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d3da:	079d      	lsls	r5, r3, #30
 800d3dc:	4606      	mov	r6, r0
 800d3de:	460c      	mov	r4, r1
 800d3e0:	d507      	bpl.n	800d3f2 <__smakebuf_r+0x1c>
 800d3e2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d3e6:	6023      	str	r3, [r4, #0]
 800d3e8:	6123      	str	r3, [r4, #16]
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	6163      	str	r3, [r4, #20]
 800d3ee:	b002      	add	sp, #8
 800d3f0:	bd70      	pop	{r4, r5, r6, pc}
 800d3f2:	466a      	mov	r2, sp
 800d3f4:	ab01      	add	r3, sp, #4
 800d3f6:	f7ff ffc9 	bl	800d38c <__swhatbuf_r>
 800d3fa:	9900      	ldr	r1, [sp, #0]
 800d3fc:	4605      	mov	r5, r0
 800d3fe:	4630      	mov	r0, r6
 800d400:	f7fd fbcc 	bl	800ab9c <_malloc_r>
 800d404:	b948      	cbnz	r0, 800d41a <__smakebuf_r+0x44>
 800d406:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d40a:	059a      	lsls	r2, r3, #22
 800d40c:	d4ef      	bmi.n	800d3ee <__smakebuf_r+0x18>
 800d40e:	f023 0303 	bic.w	r3, r3, #3
 800d412:	f043 0302 	orr.w	r3, r3, #2
 800d416:	81a3      	strh	r3, [r4, #12]
 800d418:	e7e3      	b.n	800d3e2 <__smakebuf_r+0xc>
 800d41a:	89a3      	ldrh	r3, [r4, #12]
 800d41c:	6020      	str	r0, [r4, #0]
 800d41e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d422:	81a3      	strh	r3, [r4, #12]
 800d424:	9b00      	ldr	r3, [sp, #0]
 800d426:	6120      	str	r0, [r4, #16]
 800d428:	6163      	str	r3, [r4, #20]
 800d42a:	9b01      	ldr	r3, [sp, #4]
 800d42c:	b15b      	cbz	r3, 800d446 <__smakebuf_r+0x70>
 800d42e:	4630      	mov	r0, r6
 800d430:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d434:	f000 f81e 	bl	800d474 <_isatty_r>
 800d438:	b128      	cbz	r0, 800d446 <__smakebuf_r+0x70>
 800d43a:	89a3      	ldrh	r3, [r4, #12]
 800d43c:	f023 0303 	bic.w	r3, r3, #3
 800d440:	f043 0301 	orr.w	r3, r3, #1
 800d444:	81a3      	strh	r3, [r4, #12]
 800d446:	89a3      	ldrh	r3, [r4, #12]
 800d448:	431d      	orrs	r5, r3
 800d44a:	81a5      	strh	r5, [r4, #12]
 800d44c:	e7cf      	b.n	800d3ee <__smakebuf_r+0x18>
	...

0800d450 <_fstat_r>:
 800d450:	b538      	push	{r3, r4, r5, lr}
 800d452:	2300      	movs	r3, #0
 800d454:	4d06      	ldr	r5, [pc, #24]	; (800d470 <_fstat_r+0x20>)
 800d456:	4604      	mov	r4, r0
 800d458:	4608      	mov	r0, r1
 800d45a:	4611      	mov	r1, r2
 800d45c:	602b      	str	r3, [r5, #0]
 800d45e:	f7f5 fa5c 	bl	800291a <_fstat>
 800d462:	1c43      	adds	r3, r0, #1
 800d464:	d102      	bne.n	800d46c <_fstat_r+0x1c>
 800d466:	682b      	ldr	r3, [r5, #0]
 800d468:	b103      	cbz	r3, 800d46c <_fstat_r+0x1c>
 800d46a:	6023      	str	r3, [r4, #0]
 800d46c:	bd38      	pop	{r3, r4, r5, pc}
 800d46e:	bf00      	nop
 800d470:	20001904 	.word	0x20001904

0800d474 <_isatty_r>:
 800d474:	b538      	push	{r3, r4, r5, lr}
 800d476:	2300      	movs	r3, #0
 800d478:	4d05      	ldr	r5, [pc, #20]	; (800d490 <_isatty_r+0x1c>)
 800d47a:	4604      	mov	r4, r0
 800d47c:	4608      	mov	r0, r1
 800d47e:	602b      	str	r3, [r5, #0]
 800d480:	f7f5 fa5a 	bl	8002938 <_isatty>
 800d484:	1c43      	adds	r3, r0, #1
 800d486:	d102      	bne.n	800d48e <_isatty_r+0x1a>
 800d488:	682b      	ldr	r3, [r5, #0]
 800d48a:	b103      	cbz	r3, 800d48e <_isatty_r+0x1a>
 800d48c:	6023      	str	r3, [r4, #0]
 800d48e:	bd38      	pop	{r3, r4, r5, pc}
 800d490:	20001904 	.word	0x20001904

0800d494 <log>:
 800d494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d496:	4604      	mov	r4, r0
 800d498:	460d      	mov	r5, r1
 800d49a:	f000 f835 	bl	800d508 <__ieee754_log>
 800d49e:	4622      	mov	r2, r4
 800d4a0:	4606      	mov	r6, r0
 800d4a2:	460f      	mov	r7, r1
 800d4a4:	462b      	mov	r3, r5
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	4629      	mov	r1, r5
 800d4aa:	f7f3 faeb 	bl	8000a84 <__aeabi_dcmpun>
 800d4ae:	b998      	cbnz	r0, 800d4d8 <log+0x44>
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	4629      	mov	r1, r5
 800d4b8:	f7f3 fada 	bl	8000a70 <__aeabi_dcmpgt>
 800d4bc:	b960      	cbnz	r0, 800d4d8 <log+0x44>
 800d4be:	2200      	movs	r2, #0
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	4629      	mov	r1, r5
 800d4c6:	f7f3 faab 	bl	8000a20 <__aeabi_dcmpeq>
 800d4ca:	b140      	cbz	r0, 800d4de <log+0x4a>
 800d4cc:	f7fe f9b8 	bl	800b840 <__errno>
 800d4d0:	2322      	movs	r3, #34	; 0x22
 800d4d2:	2600      	movs	r6, #0
 800d4d4:	4f06      	ldr	r7, [pc, #24]	; (800d4f0 <log+0x5c>)
 800d4d6:	6003      	str	r3, [r0, #0]
 800d4d8:	4630      	mov	r0, r6
 800d4da:	4639      	mov	r1, r7
 800d4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4de:	f7fe f9af 	bl	800b840 <__errno>
 800d4e2:	2321      	movs	r3, #33	; 0x21
 800d4e4:	6003      	str	r3, [r0, #0]
 800d4e6:	4803      	ldr	r0, [pc, #12]	; (800d4f4 <log+0x60>)
 800d4e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d4ec:	f000 b804 	b.w	800d4f8 <nan>
 800d4f0:	fff00000 	.word	0xfff00000
 800d4f4:	0800df49 	.word	0x0800df49

0800d4f8 <nan>:
 800d4f8:	2000      	movs	r0, #0
 800d4fa:	4901      	ldr	r1, [pc, #4]	; (800d500 <nan+0x8>)
 800d4fc:	4770      	bx	lr
 800d4fe:	bf00      	nop
 800d500:	7ff80000 	.word	0x7ff80000
 800d504:	00000000 	.word	0x00000000

0800d508 <__ieee754_log>:
 800d508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d50c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d510:	4602      	mov	r2, r0
 800d512:	460b      	mov	r3, r1
 800d514:	460d      	mov	r5, r1
 800d516:	b087      	sub	sp, #28
 800d518:	da24      	bge.n	800d564 <__ieee754_log+0x5c>
 800d51a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800d51e:	4304      	orrs	r4, r0
 800d520:	d108      	bne.n	800d534 <__ieee754_log+0x2c>
 800d522:	2200      	movs	r2, #0
 800d524:	2300      	movs	r3, #0
 800d526:	2000      	movs	r0, #0
 800d528:	49cb      	ldr	r1, [pc, #812]	; (800d858 <__ieee754_log+0x350>)
 800d52a:	f7f3 f93b 	bl	80007a4 <__aeabi_ddiv>
 800d52e:	b007      	add	sp, #28
 800d530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d534:	2900      	cmp	r1, #0
 800d536:	da04      	bge.n	800d542 <__ieee754_log+0x3a>
 800d538:	f7f2 fe52 	bl	80001e0 <__aeabi_dsub>
 800d53c:	2200      	movs	r2, #0
 800d53e:	2300      	movs	r3, #0
 800d540:	e7f3      	b.n	800d52a <__ieee754_log+0x22>
 800d542:	2200      	movs	r2, #0
 800d544:	4bc5      	ldr	r3, [pc, #788]	; (800d85c <__ieee754_log+0x354>)
 800d546:	f7f3 f803 	bl	8000550 <__aeabi_dmul>
 800d54a:	460b      	mov	r3, r1
 800d54c:	460d      	mov	r5, r1
 800d54e:	4602      	mov	r2, r0
 800d550:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800d554:	48c2      	ldr	r0, [pc, #776]	; (800d860 <__ieee754_log+0x358>)
 800d556:	4285      	cmp	r5, r0
 800d558:	dd06      	ble.n	800d568 <__ieee754_log+0x60>
 800d55a:	4610      	mov	r0, r2
 800d55c:	4619      	mov	r1, r3
 800d55e:	f7f2 fe41 	bl	80001e4 <__adddf3>
 800d562:	e7e4      	b.n	800d52e <__ieee754_log+0x26>
 800d564:	2100      	movs	r1, #0
 800d566:	e7f5      	b.n	800d554 <__ieee754_log+0x4c>
 800d568:	152c      	asrs	r4, r5, #20
 800d56a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800d56e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d572:	440c      	add	r4, r1
 800d574:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800d578:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800d57c:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
 800d580:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
 800d584:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800d588:	ea41 0305 	orr.w	r3, r1, r5
 800d58c:	4610      	mov	r0, r2
 800d58e:	4619      	mov	r1, r3
 800d590:	2200      	movs	r2, #0
 800d592:	4bb4      	ldr	r3, [pc, #720]	; (800d864 <__ieee754_log+0x35c>)
 800d594:	f7f2 fe24 	bl	80001e0 <__aeabi_dsub>
 800d598:	1cab      	adds	r3, r5, #2
 800d59a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d59e:	2b02      	cmp	r3, #2
 800d5a0:	4682      	mov	sl, r0
 800d5a2:	468b      	mov	fp, r1
 800d5a4:	f04f 0200 	mov.w	r2, #0
 800d5a8:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800d5ac:	dc53      	bgt.n	800d656 <__ieee754_log+0x14e>
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	f7f3 fa36 	bl	8000a20 <__aeabi_dcmpeq>
 800d5b4:	b1d0      	cbz	r0, 800d5ec <__ieee754_log+0xe4>
 800d5b6:	2c00      	cmp	r4, #0
 800d5b8:	f000 8122 	beq.w	800d800 <__ieee754_log+0x2f8>
 800d5bc:	4620      	mov	r0, r4
 800d5be:	f7f2 ff5d 	bl	800047c <__aeabi_i2d>
 800d5c2:	a391      	add	r3, pc, #580	; (adr r3, 800d808 <__ieee754_log+0x300>)
 800d5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c8:	4606      	mov	r6, r0
 800d5ca:	460f      	mov	r7, r1
 800d5cc:	f7f2 ffc0 	bl	8000550 <__aeabi_dmul>
 800d5d0:	a38f      	add	r3, pc, #572	; (adr r3, 800d810 <__ieee754_log+0x308>)
 800d5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5d6:	4604      	mov	r4, r0
 800d5d8:	460d      	mov	r5, r1
 800d5da:	4630      	mov	r0, r6
 800d5dc:	4639      	mov	r1, r7
 800d5de:	f7f2 ffb7 	bl	8000550 <__aeabi_dmul>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	4629      	mov	r1, r5
 800d5ea:	e7b8      	b.n	800d55e <__ieee754_log+0x56>
 800d5ec:	a38a      	add	r3, pc, #552	; (adr r3, 800d818 <__ieee754_log+0x310>)
 800d5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5f2:	4650      	mov	r0, sl
 800d5f4:	4659      	mov	r1, fp
 800d5f6:	f7f2 ffab 	bl	8000550 <__aeabi_dmul>
 800d5fa:	4602      	mov	r2, r0
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	2000      	movs	r0, #0
 800d600:	4999      	ldr	r1, [pc, #612]	; (800d868 <__ieee754_log+0x360>)
 800d602:	f7f2 fded 	bl	80001e0 <__aeabi_dsub>
 800d606:	4652      	mov	r2, sl
 800d608:	4606      	mov	r6, r0
 800d60a:	460f      	mov	r7, r1
 800d60c:	465b      	mov	r3, fp
 800d60e:	4650      	mov	r0, sl
 800d610:	4659      	mov	r1, fp
 800d612:	f7f2 ff9d 	bl	8000550 <__aeabi_dmul>
 800d616:	4602      	mov	r2, r0
 800d618:	460b      	mov	r3, r1
 800d61a:	4630      	mov	r0, r6
 800d61c:	4639      	mov	r1, r7
 800d61e:	f7f2 ff97 	bl	8000550 <__aeabi_dmul>
 800d622:	4606      	mov	r6, r0
 800d624:	460f      	mov	r7, r1
 800d626:	b914      	cbnz	r4, 800d62e <__ieee754_log+0x126>
 800d628:	4632      	mov	r2, r6
 800d62a:	463b      	mov	r3, r7
 800d62c:	e0a2      	b.n	800d774 <__ieee754_log+0x26c>
 800d62e:	4620      	mov	r0, r4
 800d630:	f7f2 ff24 	bl	800047c <__aeabi_i2d>
 800d634:	a374      	add	r3, pc, #464	; (adr r3, 800d808 <__ieee754_log+0x300>)
 800d636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63a:	4680      	mov	r8, r0
 800d63c:	4689      	mov	r9, r1
 800d63e:	f7f2 ff87 	bl	8000550 <__aeabi_dmul>
 800d642:	a373      	add	r3, pc, #460	; (adr r3, 800d810 <__ieee754_log+0x308>)
 800d644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d648:	4604      	mov	r4, r0
 800d64a:	460d      	mov	r5, r1
 800d64c:	4640      	mov	r0, r8
 800d64e:	4649      	mov	r1, r9
 800d650:	f7f2 ff7e 	bl	8000550 <__aeabi_dmul>
 800d654:	e0a7      	b.n	800d7a6 <__ieee754_log+0x29e>
 800d656:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d65a:	f7f2 fdc3 	bl	80001e4 <__adddf3>
 800d65e:	4602      	mov	r2, r0
 800d660:	460b      	mov	r3, r1
 800d662:	4650      	mov	r0, sl
 800d664:	4659      	mov	r1, fp
 800d666:	f7f3 f89d 	bl	80007a4 <__aeabi_ddiv>
 800d66a:	e9cd 0100 	strd	r0, r1, [sp]
 800d66e:	4620      	mov	r0, r4
 800d670:	f7f2 ff04 	bl	800047c <__aeabi_i2d>
 800d674:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d678:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d67c:	4610      	mov	r0, r2
 800d67e:	4619      	mov	r1, r3
 800d680:	f7f2 ff66 	bl	8000550 <__aeabi_dmul>
 800d684:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800d688:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800d68c:	4602      	mov	r2, r0
 800d68e:	9305      	str	r3, [sp, #20]
 800d690:	460b      	mov	r3, r1
 800d692:	4606      	mov	r6, r0
 800d694:	460f      	mov	r7, r1
 800d696:	f7f2 ff5b 	bl	8000550 <__aeabi_dmul>
 800d69a:	a361      	add	r3, pc, #388	; (adr r3, 800d820 <__ieee754_log+0x318>)
 800d69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a0:	4680      	mov	r8, r0
 800d6a2:	4689      	mov	r9, r1
 800d6a4:	f7f2 ff54 	bl	8000550 <__aeabi_dmul>
 800d6a8:	a35f      	add	r3, pc, #380	; (adr r3, 800d828 <__ieee754_log+0x320>)
 800d6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ae:	f7f2 fd99 	bl	80001e4 <__adddf3>
 800d6b2:	4642      	mov	r2, r8
 800d6b4:	464b      	mov	r3, r9
 800d6b6:	f7f2 ff4b 	bl	8000550 <__aeabi_dmul>
 800d6ba:	a35d      	add	r3, pc, #372	; (adr r3, 800d830 <__ieee754_log+0x328>)
 800d6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c0:	f7f2 fd90 	bl	80001e4 <__adddf3>
 800d6c4:	4642      	mov	r2, r8
 800d6c6:	464b      	mov	r3, r9
 800d6c8:	f7f2 ff42 	bl	8000550 <__aeabi_dmul>
 800d6cc:	a35a      	add	r3, pc, #360	; (adr r3, 800d838 <__ieee754_log+0x330>)
 800d6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6d2:	f7f2 fd87 	bl	80001e4 <__adddf3>
 800d6d6:	4632      	mov	r2, r6
 800d6d8:	463b      	mov	r3, r7
 800d6da:	f7f2 ff39 	bl	8000550 <__aeabi_dmul>
 800d6de:	a358      	add	r3, pc, #352	; (adr r3, 800d840 <__ieee754_log+0x338>)
 800d6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e4:	4606      	mov	r6, r0
 800d6e6:	460f      	mov	r7, r1
 800d6e8:	4640      	mov	r0, r8
 800d6ea:	4649      	mov	r1, r9
 800d6ec:	f7f2 ff30 	bl	8000550 <__aeabi_dmul>
 800d6f0:	a355      	add	r3, pc, #340	; (adr r3, 800d848 <__ieee754_log+0x340>)
 800d6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f6:	f7f2 fd75 	bl	80001e4 <__adddf3>
 800d6fa:	4642      	mov	r2, r8
 800d6fc:	464b      	mov	r3, r9
 800d6fe:	f7f2 ff27 	bl	8000550 <__aeabi_dmul>
 800d702:	a353      	add	r3, pc, #332	; (adr r3, 800d850 <__ieee754_log+0x348>)
 800d704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d708:	f7f2 fd6c 	bl	80001e4 <__adddf3>
 800d70c:	4642      	mov	r2, r8
 800d70e:	464b      	mov	r3, r9
 800d710:	f7f2 ff1e 	bl	8000550 <__aeabi_dmul>
 800d714:	460b      	mov	r3, r1
 800d716:	4602      	mov	r2, r0
 800d718:	4639      	mov	r1, r7
 800d71a:	4630      	mov	r0, r6
 800d71c:	f7f2 fd62 	bl	80001e4 <__adddf3>
 800d720:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800d724:	9b05      	ldr	r3, [sp, #20]
 800d726:	3551      	adds	r5, #81	; 0x51
 800d728:	431d      	orrs	r5, r3
 800d72a:	2d00      	cmp	r5, #0
 800d72c:	4680      	mov	r8, r0
 800d72e:	4689      	mov	r9, r1
 800d730:	dd48      	ble.n	800d7c4 <__ieee754_log+0x2bc>
 800d732:	2200      	movs	r2, #0
 800d734:	4b4c      	ldr	r3, [pc, #304]	; (800d868 <__ieee754_log+0x360>)
 800d736:	4650      	mov	r0, sl
 800d738:	4659      	mov	r1, fp
 800d73a:	f7f2 ff09 	bl	8000550 <__aeabi_dmul>
 800d73e:	4652      	mov	r2, sl
 800d740:	465b      	mov	r3, fp
 800d742:	f7f2 ff05 	bl	8000550 <__aeabi_dmul>
 800d746:	4602      	mov	r2, r0
 800d748:	460b      	mov	r3, r1
 800d74a:	4606      	mov	r6, r0
 800d74c:	460f      	mov	r7, r1
 800d74e:	4640      	mov	r0, r8
 800d750:	4649      	mov	r1, r9
 800d752:	f7f2 fd47 	bl	80001e4 <__adddf3>
 800d756:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d75a:	f7f2 fef9 	bl	8000550 <__aeabi_dmul>
 800d75e:	4680      	mov	r8, r0
 800d760:	4689      	mov	r9, r1
 800d762:	b964      	cbnz	r4, 800d77e <__ieee754_log+0x276>
 800d764:	4602      	mov	r2, r0
 800d766:	460b      	mov	r3, r1
 800d768:	4630      	mov	r0, r6
 800d76a:	4639      	mov	r1, r7
 800d76c:	f7f2 fd38 	bl	80001e0 <__aeabi_dsub>
 800d770:	4602      	mov	r2, r0
 800d772:	460b      	mov	r3, r1
 800d774:	4650      	mov	r0, sl
 800d776:	4659      	mov	r1, fp
 800d778:	f7f2 fd32 	bl	80001e0 <__aeabi_dsub>
 800d77c:	e6d7      	b.n	800d52e <__ieee754_log+0x26>
 800d77e:	a322      	add	r3, pc, #136	; (adr r3, 800d808 <__ieee754_log+0x300>)
 800d780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d784:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d788:	f7f2 fee2 	bl	8000550 <__aeabi_dmul>
 800d78c:	a320      	add	r3, pc, #128	; (adr r3, 800d810 <__ieee754_log+0x308>)
 800d78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d792:	4604      	mov	r4, r0
 800d794:	460d      	mov	r5, r1
 800d796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d79a:	f7f2 fed9 	bl	8000550 <__aeabi_dmul>
 800d79e:	4642      	mov	r2, r8
 800d7a0:	464b      	mov	r3, r9
 800d7a2:	f7f2 fd1f 	bl	80001e4 <__adddf3>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	4630      	mov	r0, r6
 800d7ac:	4639      	mov	r1, r7
 800d7ae:	f7f2 fd17 	bl	80001e0 <__aeabi_dsub>
 800d7b2:	4652      	mov	r2, sl
 800d7b4:	465b      	mov	r3, fp
 800d7b6:	f7f2 fd13 	bl	80001e0 <__aeabi_dsub>
 800d7ba:	4602      	mov	r2, r0
 800d7bc:	460b      	mov	r3, r1
 800d7be:	4620      	mov	r0, r4
 800d7c0:	4629      	mov	r1, r5
 800d7c2:	e7d9      	b.n	800d778 <__ieee754_log+0x270>
 800d7c4:	4602      	mov	r2, r0
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	4650      	mov	r0, sl
 800d7ca:	4659      	mov	r1, fp
 800d7cc:	f7f2 fd08 	bl	80001e0 <__aeabi_dsub>
 800d7d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7d4:	f7f2 febc 	bl	8000550 <__aeabi_dmul>
 800d7d8:	4606      	mov	r6, r0
 800d7da:	460f      	mov	r7, r1
 800d7dc:	2c00      	cmp	r4, #0
 800d7de:	f43f af23 	beq.w	800d628 <__ieee754_log+0x120>
 800d7e2:	a309      	add	r3, pc, #36	; (adr r3, 800d808 <__ieee754_log+0x300>)
 800d7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7ec:	f7f2 feb0 	bl	8000550 <__aeabi_dmul>
 800d7f0:	a307      	add	r3, pc, #28	; (adr r3, 800d810 <__ieee754_log+0x308>)
 800d7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f6:	4604      	mov	r4, r0
 800d7f8:	460d      	mov	r5, r1
 800d7fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7fe:	e727      	b.n	800d650 <__ieee754_log+0x148>
 800d800:	2000      	movs	r0, #0
 800d802:	2100      	movs	r1, #0
 800d804:	e693      	b.n	800d52e <__ieee754_log+0x26>
 800d806:	bf00      	nop
 800d808:	fee00000 	.word	0xfee00000
 800d80c:	3fe62e42 	.word	0x3fe62e42
 800d810:	35793c76 	.word	0x35793c76
 800d814:	3dea39ef 	.word	0x3dea39ef
 800d818:	55555555 	.word	0x55555555
 800d81c:	3fd55555 	.word	0x3fd55555
 800d820:	df3e5244 	.word	0xdf3e5244
 800d824:	3fc2f112 	.word	0x3fc2f112
 800d828:	96cb03de 	.word	0x96cb03de
 800d82c:	3fc74664 	.word	0x3fc74664
 800d830:	94229359 	.word	0x94229359
 800d834:	3fd24924 	.word	0x3fd24924
 800d838:	55555593 	.word	0x55555593
 800d83c:	3fe55555 	.word	0x3fe55555
 800d840:	d078c69f 	.word	0xd078c69f
 800d844:	3fc39a09 	.word	0x3fc39a09
 800d848:	1d8e78af 	.word	0x1d8e78af
 800d84c:	3fcc71c5 	.word	0x3fcc71c5
 800d850:	9997fa04 	.word	0x9997fa04
 800d854:	3fd99999 	.word	0x3fd99999
 800d858:	c3500000 	.word	0xc3500000
 800d85c:	43500000 	.word	0x43500000
 800d860:	7fefffff 	.word	0x7fefffff
 800d864:	3ff00000 	.word	0x3ff00000
 800d868:	3fe00000 	.word	0x3fe00000

0800d86c <_init>:
 800d86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d86e:	bf00      	nop
 800d870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d872:	bc08      	pop	{r3}
 800d874:	469e      	mov	lr, r3
 800d876:	4770      	bx	lr

0800d878 <_fini>:
 800d878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d87a:	bf00      	nop
 800d87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d87e:	bc08      	pop	{r3}
 800d880:	469e      	mov	lr, r3
 800d882:	4770      	bx	lr
