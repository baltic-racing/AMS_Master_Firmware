
AMS_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d2c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000078c  08008eb8  08008eb8  00018eb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009644  08009644  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  08009644  08009644  00019644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800964c  0800964c  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800964c  0800964c  0001964c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009650  08009650  00019650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000238  20000000  08009654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000820  20000238  0800988c  00020238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a58  0800988c  00020a58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020261  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f60  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003344  00000000  00000000  00033204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  00036548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dcb  00000000  00000000  00037750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020da0  00000000  00000000  0003851b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015c39  00000000  00000000  000592bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bee62  00000000  00000000  0006eef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c30  00000000  00000000  0012dd58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00133988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000238 	.word	0x20000238
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008e9c 	.word	0x08008e9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000023c 	.word	0x2000023c
 80001c4:	08008e9c 	.word	0x08008e9c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2uiz>:
 8000b00:	004a      	lsls	r2, r1, #1
 8000b02:	d211      	bcs.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b04:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b08:	d211      	bcs.n	8000b2e <__aeabi_d2uiz+0x2e>
 8000b0a:	d50d      	bpl.n	8000b28 <__aeabi_d2uiz+0x28>
 8000b0c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b10:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b14:	d40e      	bmi.n	8000b34 <__aeabi_d2uiz+0x34>
 8000b16:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b1e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b22:	fa23 f002 	lsr.w	r0, r3, r2
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_d2uiz+0x3a>
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b972 	b.w	8000e3c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	460d      	mov	r5, r1
 8000b78:	4604      	mov	r4, r0
 8000b7a:	468e      	mov	lr, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d14c      	bne.n	8000c1a <__udivmoddi4+0xaa>
 8000b80:	428a      	cmp	r2, r1
 8000b82:	4694      	mov	ip, r2
 8000b84:	d967      	bls.n	8000c56 <__udivmoddi4+0xe6>
 8000b86:	fab2 f382 	clz	r3, r2
 8000b8a:	b153      	cbz	r3, 8000ba2 <__udivmoddi4+0x32>
 8000b8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b90:	f1c3 0220 	rsb	r2, r3, #32
 8000b94:	fa01 fe03 	lsl.w	lr, r1, r3
 8000b98:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9c:	ea42 0e0e 	orr.w	lr, r2, lr
 8000ba0:	409c      	lsls	r4, r3
 8000ba2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba6:	fbbe f1f7 	udiv	r1, lr, r7
 8000baa:	fa1f f58c 	uxth.w	r5, ip
 8000bae:	fb07 ee11 	mls	lr, r7, r1, lr
 8000bb2:	fb01 f005 	mul.w	r0, r1, r5
 8000bb6:	0c22      	lsrs	r2, r4, #16
 8000bb8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000bbc:	4290      	cmp	r0, r2
 8000bbe:	d90a      	bls.n	8000bd6 <__udivmoddi4+0x66>
 8000bc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc4:	f101 3eff 	add.w	lr, r1, #4294967295
 8000bc8:	f080 8119 	bcs.w	8000dfe <__udivmoddi4+0x28e>
 8000bcc:	4290      	cmp	r0, r2
 8000bce:	f240 8116 	bls.w	8000dfe <__udivmoddi4+0x28e>
 8000bd2:	3902      	subs	r1, #2
 8000bd4:	4462      	add	r2, ip
 8000bd6:	1a12      	subs	r2, r2, r0
 8000bd8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bdc:	fb07 2210 	mls	r2, r7, r0, r2
 8000be0:	fb00 f505 	mul.w	r5, r0, r5
 8000be4:	b2a4      	uxth	r4, r4
 8000be6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bea:	42a5      	cmp	r5, r4
 8000bec:	d90a      	bls.n	8000c04 <__udivmoddi4+0x94>
 8000bee:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf6:	f080 8104 	bcs.w	8000e02 <__udivmoddi4+0x292>
 8000bfa:	42a5      	cmp	r5, r4
 8000bfc:	f240 8101 	bls.w	8000e02 <__udivmoddi4+0x292>
 8000c00:	4464      	add	r4, ip
 8000c02:	3802      	subs	r0, #2
 8000c04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c08:	2100      	movs	r1, #0
 8000c0a:	1b64      	subs	r4, r4, r5
 8000c0c:	b11e      	cbz	r6, 8000c16 <__udivmoddi4+0xa6>
 8000c0e:	40dc      	lsrs	r4, r3
 8000c10:	2300      	movs	r3, #0
 8000c12:	e9c6 4300 	strd	r4, r3, [r6]
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0xc0>
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	f000 80ea 	beq.w	8000df8 <__udivmoddi4+0x288>
 8000c24:	2100      	movs	r1, #0
 8000c26:	e9c6 0500 	strd	r0, r5, [r6]
 8000c2a:	4608      	mov	r0, r1
 8000c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c30:	fab3 f183 	clz	r1, r3
 8000c34:	2900      	cmp	r1, #0
 8000c36:	d148      	bne.n	8000cca <__udivmoddi4+0x15a>
 8000c38:	42ab      	cmp	r3, r5
 8000c3a:	d302      	bcc.n	8000c42 <__udivmoddi4+0xd2>
 8000c3c:	4282      	cmp	r2, r0
 8000c3e:	f200 80f8 	bhi.w	8000e32 <__udivmoddi4+0x2c2>
 8000c42:	1a84      	subs	r4, r0, r2
 8000c44:	eb65 0203 	sbc.w	r2, r5, r3
 8000c48:	2001      	movs	r0, #1
 8000c4a:	4696      	mov	lr, r2
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	d0e2      	beq.n	8000c16 <__udivmoddi4+0xa6>
 8000c50:	e9c6 4e00 	strd	r4, lr, [r6]
 8000c54:	e7df      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000c56:	b902      	cbnz	r2, 8000c5a <__udivmoddi4+0xea>
 8000c58:	deff      	udf	#255	; 0xff
 8000c5a:	fab2 f382 	clz	r3, r2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f040 808e 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c64:	1a88      	subs	r0, r1, r2
 8000c66:	2101      	movs	r1, #1
 8000c68:	0c17      	lsrs	r7, r2, #16
 8000c6a:	fa1f fe82 	uxth.w	lr, r2
 8000c6e:	fbb0 f5f7 	udiv	r5, r0, r7
 8000c72:	fb07 0015 	mls	r0, r7, r5, r0
 8000c76:	0c22      	lsrs	r2, r4, #16
 8000c78:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c7c:	fb0e f005 	mul.w	r0, lr, r5
 8000c80:	4290      	cmp	r0, r2
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x126>
 8000c84:	eb1c 0202 	adds.w	r2, ip, r2
 8000c88:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c8c:	d202      	bcs.n	8000c94 <__udivmoddi4+0x124>
 8000c8e:	4290      	cmp	r0, r2
 8000c90:	f200 80cc 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c94:	4645      	mov	r5, r8
 8000c96:	1a12      	subs	r2, r2, r0
 8000c98:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c9c:	fb07 2210 	mls	r2, r7, r0, r2
 8000ca0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ca4:	b2a4      	uxth	r4, r4
 8000ca6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x150>
 8000cae:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x14e>
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	f200 80b4 	bhi.w	8000e26 <__udivmoddi4+0x2b6>
 8000cbe:	4610      	mov	r0, r2
 8000cc0:	eba4 040e 	sub.w	r4, r4, lr
 8000cc4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cc8:	e7a0      	b.n	8000c0c <__udivmoddi4+0x9c>
 8000cca:	f1c1 0720 	rsb	r7, r1, #32
 8000cce:	408b      	lsls	r3, r1
 8000cd0:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cd4:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cd8:	fa25 fa07 	lsr.w	sl, r5, r7
 8000cdc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ce0:	fbba f8f9 	udiv	r8, sl, r9
 8000ce4:	408d      	lsls	r5, r1
 8000ce6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cea:	fb09 aa18 	mls	sl, r9, r8, sl
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	432b      	orrs	r3, r5
 8000cf4:	fa00 f501 	lsl.w	r5, r0, r1
 8000cf8:	fb08 f00e 	mul.w	r0, r8, lr
 8000cfc:	0c1c      	lsrs	r4, r3, #16
 8000cfe:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d02:	42a0      	cmp	r0, r4
 8000d04:	fa02 f201 	lsl.w	r2, r2, r1
 8000d08:	d90b      	bls.n	8000d22 <__udivmoddi4+0x1b2>
 8000d0a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d0e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d12:	f080 8086 	bcs.w	8000e22 <__udivmoddi4+0x2b2>
 8000d16:	42a0      	cmp	r0, r4
 8000d18:	f240 8083 	bls.w	8000e22 <__udivmoddi4+0x2b2>
 8000d1c:	f1a8 0802 	sub.w	r8, r8, #2
 8000d20:	4464      	add	r4, ip
 8000d22:	1a24      	subs	r4, r4, r0
 8000d24:	b298      	uxth	r0, r3
 8000d26:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d2a:	fb09 4413 	mls	r4, r9, r3, r4
 8000d2e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d32:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x1dc>
 8000d3a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d42:	d26a      	bcs.n	8000e1a <__udivmoddi4+0x2aa>
 8000d44:	45a6      	cmp	lr, r4
 8000d46:	d968      	bls.n	8000e1a <__udivmoddi4+0x2aa>
 8000d48:	3b02      	subs	r3, #2
 8000d4a:	4464      	add	r4, ip
 8000d4c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000d50:	fba0 9302 	umull	r9, r3, r0, r2
 8000d54:	eba4 040e 	sub.w	r4, r4, lr
 8000d58:	429c      	cmp	r4, r3
 8000d5a:	46c8      	mov	r8, r9
 8000d5c:	469e      	mov	lr, r3
 8000d5e:	d354      	bcc.n	8000e0a <__udivmoddi4+0x29a>
 8000d60:	d051      	beq.n	8000e06 <__udivmoddi4+0x296>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d067      	beq.n	8000e36 <__udivmoddi4+0x2c6>
 8000d66:	ebb5 0308 	subs.w	r3, r5, r8
 8000d6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d6e:	40cb      	lsrs	r3, r1
 8000d70:	fa04 f707 	lsl.w	r7, r4, r7
 8000d74:	431f      	orrs	r7, r3
 8000d76:	40cc      	lsrs	r4, r1
 8000d78:	e9c6 7400 	strd	r7, r4, [r6]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e74a      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0020 	rsb	r0, r3, #32
 8000d88:	40c1      	lsrs	r1, r0
 8000d8a:	409d      	lsls	r5, r3
 8000d8c:	fa24 f000 	lsr.w	r0, r4, r0
 8000d90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d94:	4328      	orrs	r0, r5
 8000d96:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d9a:	fb07 1115 	mls	r1, r7, r5, r1
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	0c02      	lsrs	r2, r0, #16
 8000da4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000da8:	fb05 f10e 	mul.w	r1, r5, lr
 8000dac:	4291      	cmp	r1, r2
 8000dae:	fa04 f403 	lsl.w	r4, r4, r3
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x256>
 8000db4:	eb1c 0202 	adds.w	r2, ip, r2
 8000db8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dbc:	d22f      	bcs.n	8000e1e <__udivmoddi4+0x2ae>
 8000dbe:	4291      	cmp	r1, r2
 8000dc0:	d92d      	bls.n	8000e1e <__udivmoddi4+0x2ae>
 8000dc2:	3d02      	subs	r5, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a52      	subs	r2, r2, r1
 8000dc8:	fbb2 f1f7 	udiv	r1, r2, r7
 8000dcc:	fb07 2211 	mls	r2, r7, r1, r2
 8000dd0:	b280      	uxth	r0, r0
 8000dd2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000dd6:	fb01 f20e 	mul.w	r2, r1, lr
 8000dda:	4282      	cmp	r2, r0
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x280>
 8000dde:	eb1c 0000 	adds.w	r0, ip, r0
 8000de2:	f101 38ff 	add.w	r8, r1, #4294967295
 8000de6:	d216      	bcs.n	8000e16 <__udivmoddi4+0x2a6>
 8000de8:	4282      	cmp	r2, r0
 8000dea:	d914      	bls.n	8000e16 <__udivmoddi4+0x2a6>
 8000dec:	3902      	subs	r1, #2
 8000dee:	4460      	add	r0, ip
 8000df0:	1a80      	subs	r0, r0, r2
 8000df2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000df6:	e73a      	b.n	8000c6e <__udivmoddi4+0xfe>
 8000df8:	4631      	mov	r1, r6
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e70b      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000dfe:	4671      	mov	r1, lr
 8000e00:	e6e9      	b.n	8000bd6 <__udivmoddi4+0x66>
 8000e02:	4610      	mov	r0, r2
 8000e04:	e6fe      	b.n	8000c04 <__udivmoddi4+0x94>
 8000e06:	454d      	cmp	r5, r9
 8000e08:	d2ab      	bcs.n	8000d62 <__udivmoddi4+0x1f2>
 8000e0a:	ebb9 0802 	subs.w	r8, r9, r2
 8000e0e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000e12:	3801      	subs	r0, #1
 8000e14:	e7a5      	b.n	8000d62 <__udivmoddi4+0x1f2>
 8000e16:	4641      	mov	r1, r8
 8000e18:	e7ea      	b.n	8000df0 <__udivmoddi4+0x280>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	e796      	b.n	8000d4c <__udivmoddi4+0x1dc>
 8000e1e:	4645      	mov	r5, r8
 8000e20:	e7d1      	b.n	8000dc6 <__udivmoddi4+0x256>
 8000e22:	46d0      	mov	r8, sl
 8000e24:	e77d      	b.n	8000d22 <__udivmoddi4+0x1b2>
 8000e26:	4464      	add	r4, ip
 8000e28:	3802      	subs	r0, #2
 8000e2a:	e749      	b.n	8000cc0 <__udivmoddi4+0x150>
 8000e2c:	3d02      	subs	r5, #2
 8000e2e:	4462      	add	r2, ip
 8000e30:	e731      	b.n	8000c96 <__udivmoddi4+0x126>
 8000e32:	4608      	mov	r0, r1
 8000e34:	e70a      	b.n	8000c4c <__udivmoddi4+0xdc>
 8000e36:	4631      	mov	r1, r6
 8000e38:	e6ed      	b.n	8000c16 <__udivmoddi4+0xa6>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <spi_write_array>:
 * @param len length of the data array
 * @param data pointer to the data array
 */

static inline void spi_write_array(uint8_t len, uint8_t data[])
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi3, data, len, HAL_MAX_DELAY);
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
 8000e54:	6839      	ldr	r1, [r7, #0]
 8000e56:	4803      	ldr	r0, [pc, #12]	; (8000e64 <spi_write_array+0x24>)
 8000e58:	f003 fd47 	bl	80048ea <HAL_SPI_Transmit>
}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000360 	.word	0x20000360

08000e68 <spi_write_read>:
 * @param tx_len length of the data array to be transmitted
 * @param rx_data pointer to the data array to be received
 * @param rx_len length of the data array to be received
 */
static inline void spi_write_read(uint8_t tx_Data[], uint8_t tx_len, uint8_t *rx_data, uint8_t rx_len)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	461a      	mov	r2, r3
 8000e74:	460b      	mov	r3, r1
 8000e76:	72fb      	strb	r3, [r7, #11]
 8000e78:	4613      	mov	r3, r2
 8000e7a:	72bb      	strb	r3, [r7, #10]
  HAL_SPI_Transmit(&hspi3, tx_Data, tx_len, HAL_MAX_DELAY);
 8000e7c:	7afb      	ldrb	r3, [r7, #11]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295
 8000e84:	68f9      	ldr	r1, [r7, #12]
 8000e86:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <spi_write_read+0x3c>)
 8000e88:	f003 fd2f 	bl	80048ea <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3, rx_data, rx_len, HAL_MAX_DELAY);
 8000e8c:	7abb      	ldrb	r3, [r7, #10]
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	f04f 33ff 	mov.w	r3, #4294967295
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	4803      	ldr	r0, [pc, #12]	; (8000ea4 <spi_write_read+0x3c>)
 8000e98:	f003 fe6a 	bl	8004b70 <HAL_SPI_Receive>

}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000360 	.word	0x20000360

08000ea8 <LTC6811_initialize>:
uint8_t wakeup = 0x00;

/*@brief Initializes all command variables
 */
void LTC6811_initialize()
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af02      	add	r7, sp, #8
  set_adc(MD_NORMAL, DCP_DISABLED, CELL_CH_ALL, AUX_CH_ALL, CHST_SC);
 8000eae:	2301      	movs	r3, #1
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	2002      	movs	r0, #2
 8000eba:	f000 f81f 	bl	8000efc <set_adc>
  //set_selftest(MD_NORMAL, ST_1);
}
 8000ebe:	bf00      	nop
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <wakeup_idle>:

void wakeup_idle()
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ece:	4808      	ldr	r0, [pc, #32]	; (8000ef0 <wakeup_idle+0x2c>)
 8000ed0:	f002 ff2e 	bl	8003d30 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4906      	ldr	r1, [pc, #24]	; (8000ef4 <wakeup_idle+0x30>)
 8000eda:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <wakeup_idle+0x34>)
 8000edc:	f003 fd05 	bl	80048ea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee6:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <wakeup_idle+0x2c>)
 8000ee8:	f002 ff22 	bl	8003d30 <HAL_GPIO_WritePin>
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40020000 	.word	0x40020000
 8000ef4:	2000025a 	.word	0x2000025a
 8000ef8:	20000360 	.word	0x20000360

08000efc <set_adc>:
			|-----------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|
			|ADCV:	    |   0   |   1   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CH[2] | CH[1] | CH[0] |
			|ADAX:	    |   1   |   0   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CHG[2]| CHG[1]| CHG[0]|
 ******************************************************************************************************************/
void set_adc(uint8_t MD, uint8_t DCP, uint8_t CH, uint8_t CHG, uint8_t CHST)
{
 8000efc:	b490      	push	{r4, r7}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4604      	mov	r4, r0
 8000f04:	4608      	mov	r0, r1
 8000f06:	4611      	mov	r1, r2
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4623      	mov	r3, r4
 8000f0c:	71fb      	strb	r3, [r7, #7]
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71bb      	strb	r3, [r7, #6]
 8000f12:	460b      	mov	r3, r1
 8000f14:	717b      	strb	r3, [r7, #5]
 8000f16:	4613      	mov	r3, r2
 8000f18:	713b      	strb	r3, [r7, #4]
  uint8_t md_bits;

  md_bits = (MD & 0x02) >> 1;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	105b      	asrs	r3, r3, #1
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]
  ADCV[0] = md_bits | 0x02;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b18      	ldr	r3, [pc, #96]	; (8000f90 <set_adc+0x94>)
 8000f30:	701a      	strb	r2, [r3, #0]
  md_bits = (MD & 0x01) << 7;
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	01db      	lsls	r3, r3, #7
 8000f36:	73fb      	strb	r3, [r7, #15]
  ADCV[1] = md_bits | 0x60 | (DCP << 4) | CH;
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	797b      	ldrb	r3, [r7, #5]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <set_adc+0x94>)
 8000f52:	705a      	strb	r2, [r3, #1]

  md_bits = (MD & 0x02) >> 1;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	105b      	asrs	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
  ADAX[0] = md_bits | 0x04;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <set_adc+0x98>)
 8000f6a:	701a      	strb	r2, [r3, #0]
  md_bits = (MD & 0x01) << 7;
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	01db      	lsls	r3, r3, #7
 8000f70:	73fb      	strb	r3, [r7, #15]
  ADAX[1] = md_bits | 0x60 | CHG;
 8000f72:	7bfa      	ldrb	r2, [r7, #15]
 8000f74:	793b      	ldrb	r3, [r7, #4]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <set_adc+0x98>)
 8000f82:	705a      	strb	r2, [r3, #1]
  md_bits = (MD & 0x02) >> 1;
  ADSTAT[0] = md_bits | 0x04;
  md_bits = (MD & 0x01) << 7;
  ADSTAT[1] = md_bits | 0x68 | CHST;
  */
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc90      	pop	{r4, r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000254 	.word	0x20000254
 8000f94:	20000258 	.word	0x20000258

08000f98 <LTC6811_adcv>:
 | CH     | Determines which cell channels are converted |
 | DCP    | Determines if Discharge is Permitted	     |

***********************************************************************************************/
void LTC6811_adcv()
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;
	//1
	cmd[0] = ADCV[0];
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <LTC6811_adcv+0x74>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADCV[1];
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <LTC6811_adcv+0x74>)
 8000fa6:	785b      	ldrb	r3, [r3, #1]
 8000fa8:	707b      	strb	r3, [r7, #1]
	//2
	temp_pec = pec15_calc(2, ADCV);
 8000faa:	4918      	ldr	r1, [pc, #96]	; (800100c <LTC6811_adcv+0x74>)
 8000fac:	2002      	movs	r0, #2
 8000fae:	f000 fc45 	bl	800183c <pec15_calc>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	70fb      	strb	r3, [r7, #3]
	//3
	wakeup_idle();
 8000fc6:	f7ff ff7d 	bl	8000ec4 <wakeup_idle>
	//4
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd0:	480f      	ldr	r0, [pc, #60]	; (8001010 <LTC6811_adcv+0x78>)
 8000fd2:	f002 fead 	bl	8003d30 <HAL_GPIO_WritePin>
	spi_write_array(4, cmd);
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4619      	mov	r1, r3
 8000fda:	2004      	movs	r0, #4
 8000fdc:	f7ff ff30 	bl	8000e40 <spi_write_array>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fe6:	480a      	ldr	r0, [pc, #40]	; (8001010 <LTC6811_adcv+0x78>)
 8000fe8:	f002 fea2 	bl	8003d30 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000fec:	2301      	movs	r3, #1
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4908      	ldr	r1, [pc, #32]	; (8001014 <LTC6811_adcv+0x7c>)
 8000ff2:	4809      	ldr	r0, [pc, #36]	; (8001018 <LTC6811_adcv+0x80>)
 8000ff4:	f003 fc79 	bl	80048ea <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4905      	ldr	r1, [pc, #20]	; (8001014 <LTC6811_adcv+0x7c>)
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <LTC6811_adcv+0x80>)
 8001000:	f003 fc73 	bl	80048ea <HAL_SPI_Transmit>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000254 	.word	0x20000254
 8001010:	40020000 	.word	0x40020000
 8001014:	2000025a 	.word	0x2000025a
 8001018:	20000360 	.word	0x20000360

0800101c <LTC6811_adax>:
 | MD     | Determines the filter corner of the ADC      |
 | CHG    | Determines which GPIO channels are converted |

*********************************************************************************************************/
void LTC6811_adax()
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
	uint8_t cmd[4];
	uint16_t temp_pec;

	//1
	cmd[0] = ADAX[0];
 8001022:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <LTC6811_adax+0x74>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	703b      	strb	r3, [r7, #0]
	cmd[1] = ADAX[1];
 8001028:	4b19      	ldr	r3, [pc, #100]	; (8001090 <LTC6811_adax+0x74>)
 800102a:	785b      	ldrb	r3, [r3, #1]
 800102c:	707b      	strb	r3, [r7, #1]
	//2
	temp_pec = pec15_calc(2, ADAX);
 800102e:	4918      	ldr	r1, [pc, #96]	; (8001090 <LTC6811_adax+0x74>)
 8001030:	2002      	movs	r0, #2
 8001032:	f000 fc03 	bl	800183c <pec15_calc>
 8001036:	4603      	mov	r3, r0
 8001038:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t)(temp_pec >> 8);
 800103a:	88fb      	ldrh	r3, [r7, #6]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	b29b      	uxth	r3, r3
 8001040:	b2db      	uxtb	r3, r3
 8001042:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t)(temp_pec);
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	70fb      	strb	r3, [r7, #3]
	//3
	wakeup_idle();
 800104a:	f7ff ff3b 	bl	8000ec4 <wakeup_idle>
	//4
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001054:	480f      	ldr	r0, [pc, #60]	; (8001094 <LTC6811_adax+0x78>)
 8001056:	f002 fe6b 	bl	8003d30 <HAL_GPIO_WritePin>
	spi_write_array(4, cmd);
 800105a:	463b      	mov	r3, r7
 800105c:	4619      	mov	r1, r3
 800105e:	2004      	movs	r0, #4
 8001060:	f7ff feee 	bl	8000e40 <spi_write_array>
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800106a:	480a      	ldr	r0, [pc, #40]	; (8001094 <LTC6811_adax+0x78>)
 800106c:	f002 fe60 	bl	8003d30 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 8001070:	2301      	movs	r3, #1
 8001072:	2201      	movs	r2, #1
 8001074:	4908      	ldr	r1, [pc, #32]	; (8001098 <LTC6811_adax+0x7c>)
 8001076:	4809      	ldr	r0, [pc, #36]	; (800109c <LTC6811_adax+0x80>)
 8001078:	f003 fc37 	bl	80048ea <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 800107c:	2301      	movs	r3, #1
 800107e:	2201      	movs	r2, #1
 8001080:	4905      	ldr	r1, [pc, #20]	; (8001098 <LTC6811_adax+0x7c>)
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <LTC6811_adax+0x80>)
 8001084:	f003 fc31 	bl	80048ea <HAL_SPI_Transmit>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000258 	.word	0x20000258
 8001094:	40020000 	.word	0x40020000
 8001098:	2000025a 	.word	0x2000025a
 800109c:	20000360 	.word	0x20000360

080010a0 <LTC6811_wrcfg>:


void LTC6811_wrcfg(uint8_t nIC, uint8_t config [][6])

{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
	const uint8_t BYTES_IN_REG = 6;
 80010ac:	2306      	movs	r3, #6
 80010ae:	753b      	strb	r3, [r7, #20]
	const uint8_t CMD_LEN = 4 + (8 * nIC);
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	3304      	adds	r3, #4
 80010b8:	74fb      	strb	r3, [r7, #19]

	uint16_t temp_pec;
	uint8_t current_ic;
	uint8_t WRCFG_index = 4;
 80010ba:	2304      	movs	r3, #4
 80010bc:	75bb      	strb	r3, [r7, #22]
	uint8_t *WRCFG;


	WRCFG = (uint8_t *)malloc(CMD_LEN * sizeof(uint8_t));
 80010be:	7cfb      	ldrb	r3, [r7, #19]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f005 f853 	bl	800616c <malloc>
 80010c6:	4603      	mov	r3, r0
 80010c8:	60fb      	str	r3, [r7, #12]

	for(current_ic = 0; current_ic < nIC; current_ic++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	75fb      	strb	r3, [r7, #23]
 80010ce:	e03f      	b.n	8001150 <LTC6811_wrcfg+0xb0>
	{
		for(uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80010d0:	2300      	movs	r3, #0
 80010d2:	757b      	strb	r3, [r7, #21]
 80010d4:	e013      	b.n	80010fe <LTC6811_wrcfg+0x5e>
		{
			WRCFG[WRCFG_index] = config[current_ic][current_byte];
 80010d6:	7dfa      	ldrb	r2, [r7, #23]
 80010d8:	4613      	mov	r3, r2
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	461a      	mov	r2, r3
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	1899      	adds	r1, r3, r2
 80010e6:	7d7a      	ldrb	r2, [r7, #21]
 80010e8:	7dbb      	ldrb	r3, [r7, #22]
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	4403      	add	r3, r0
 80010ee:	5c8a      	ldrb	r2, [r1, r2]
 80010f0:	701a      	strb	r2, [r3, #0]
			WRCFG_index++;
 80010f2:	7dbb      	ldrb	r3, [r7, #22]
 80010f4:	3301      	adds	r3, #1
 80010f6:	75bb      	strb	r3, [r7, #22]
		for(uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80010f8:	7d7b      	ldrb	r3, [r7, #21]
 80010fa:	3301      	adds	r3, #1
 80010fc:	757b      	strb	r3, [r7, #21]
 80010fe:	7d7a      	ldrb	r2, [r7, #21]
 8001100:	7d3b      	ldrb	r3, [r7, #20]
 8001102:	429a      	cmp	r2, r3
 8001104:	d3e7      	bcc.n	80010d6 <LTC6811_wrcfg+0x36>
		}

		temp_pec = (uint16_t)pec15_calc(BYTES_IN_REG, &config[current_ic][0]);
 8001106:	7dfa      	ldrb	r2, [r7, #23]
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	461a      	mov	r2, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	4413      	add	r3, r2
 8001116:	461a      	mov	r2, r3
 8001118:	7d3b      	ldrb	r3, [r7, #20]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fb8d 	bl	800183c <pec15_calc>
 8001122:	4603      	mov	r3, r0
 8001124:	817b      	strh	r3, [r7, #10]
		WRCFG[WRCFG_index] = (uint8_t)(temp_pec >> 8);
 8001126:	897b      	ldrh	r3, [r7, #10]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	b299      	uxth	r1, r3
 800112c:	7dbb      	ldrb	r3, [r7, #22]
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	b2ca      	uxtb	r2, r1
 8001134:	701a      	strb	r2, [r3, #0]
		WRCFG[WRCFG_index + 1] = (uint8_t)temp_pec;
 8001136:	7dbb      	ldrb	r3, [r7, #22]
 8001138:	3301      	adds	r3, #1
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	4413      	add	r3, r2
 800113e:	897a      	ldrh	r2, [r7, #10]
 8001140:	b2d2      	uxtb	r2, r2
 8001142:	701a      	strb	r2, [r3, #0]
		WRCFG_index += 2;
 8001144:	7dbb      	ldrb	r3, [r7, #22]
 8001146:	3302      	adds	r3, #2
 8001148:	75bb      	strb	r3, [r7, #22]
	for(current_ic = 0; current_ic < nIC; current_ic++)
 800114a:	7dfb      	ldrb	r3, [r7, #23]
 800114c:	3301      	adds	r3, #1
 800114e:	75fb      	strb	r3, [r7, #23]
 8001150:	7dfa      	ldrb	r2, [r7, #23]
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	429a      	cmp	r2, r3
 8001156:	d3bb      	bcc.n	80010d0 <LTC6811_wrcfg+0x30>
	}

	wakeup_idle();
 8001158:	f7ff feb4 	bl	8000ec4 <wakeup_idle>

	for(current_ic = 0; current_ic < nIC; current_ic++)
 800115c:	2300      	movs	r3, #0
 800115e:	75fb      	strb	r3, [r7, #23]
 8001160:	e045      	b.n	80011ee <LTC6811_wrcfg+0x14e>
	{
	    WRCFG[0] = 0x80 + (current_ic << 3); //Setting address
 8001162:	7dfb      	ldrb	r3, [r7, #23]
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	b2db      	uxtb	r3, r3
 8001168:	3b80      	subs	r3, #128	; 0x80
 800116a:	b2da      	uxtb	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	701a      	strb	r2, [r3, #0]
	    WRCFG[1] = 0x01;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3301      	adds	r3, #1
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
	    temp_pec = pec15_calc(2, WRCFG);
 8001178:	68f9      	ldr	r1, [r7, #12]
 800117a:	2002      	movs	r0, #2
 800117c:	f000 fb5e 	bl	800183c <pec15_calc>
 8001180:	4603      	mov	r3, r0
 8001182:	817b      	strh	r3, [r7, #10]
	    WRCFG[2] = (uint8_t)(temp_pec >> 8);
 8001184:	897b      	ldrh	r3, [r7, #10]
 8001186:	0a1b      	lsrs	r3, r3, #8
 8001188:	b29a      	uxth	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	3302      	adds	r3, #2
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	701a      	strb	r2, [r3, #0]
	    WRCFG[3] = (uint8_t)(temp_pec);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3303      	adds	r3, #3
 8001196:	897a      	ldrh	r2, [r7, #10]
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a2:	4818      	ldr	r0, [pc, #96]	; (8001204 <LTC6811_wrcfg+0x164>)
 80011a4:	f002 fdc4 	bl	8003d30 <HAL_GPIO_WritePin>
		spi_write_array(4, WRCFG);
 80011a8:	68f9      	ldr	r1, [r7, #12]
 80011aa:	2004      	movs	r0, #4
 80011ac:	f7ff fe48 	bl	8000e40 <spi_write_array>
		spi_write_array(8, &WRCFG[4 + (8 * current_ic)]);
 80011b0:	7dfb      	ldrb	r3, [r7, #23]
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	3304      	adds	r3, #4
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	2008      	movs	r0, #8
 80011c0:	f7ff fe3e 	bl	8000e40 <spi_write_array>
		HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ca:	480e      	ldr	r0, [pc, #56]	; (8001204 <LTC6811_wrcfg+0x164>)
 80011cc:	f002 fdb0 	bl	8003d30 <HAL_GPIO_WritePin>


		HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 80011d0:	2301      	movs	r3, #1
 80011d2:	2201      	movs	r2, #1
 80011d4:	490c      	ldr	r1, [pc, #48]	; (8001208 <LTC6811_wrcfg+0x168>)
 80011d6:	480d      	ldr	r0, [pc, #52]	; (800120c <LTC6811_wrcfg+0x16c>)
 80011d8:	f003 fb87 	bl	80048ea <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi3, &wakeup, 1, 1);
 80011dc:	2301      	movs	r3, #1
 80011de:	2201      	movs	r2, #1
 80011e0:	4909      	ldr	r1, [pc, #36]	; (8001208 <LTC6811_wrcfg+0x168>)
 80011e2:	480a      	ldr	r0, [pc, #40]	; (800120c <LTC6811_wrcfg+0x16c>)
 80011e4:	f003 fb81 	bl	80048ea <HAL_SPI_Transmit>
	for(current_ic = 0; current_ic < nIC; current_ic++)
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	3301      	adds	r3, #1
 80011ec:	75fb      	strb	r3, [r7, #23]
 80011ee:	7dfa      	ldrb	r2, [r7, #23]
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d3b5      	bcc.n	8001162 <LTC6811_wrcfg+0xc2>

	}

	free(WRCFG);
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f004 ffc0 	bl	800617c <free>
}
 80011fc:	bf00      	nop
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40020000 	.word	0x40020000
 8001208:	2000025a 	.word	0x2000025a
 800120c:	20000360 	.word	0x20000360

08001210 <LTC6811_rdcv>:
	HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
}
*/

uint8_t LTC6811_rdcv(uint8_t reg, uint8_t nIC, uint16_t cell_codes[][12])
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	603a      	str	r2, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
 800121c:	460b      	mov	r3, r1
 800121e:	71bb      	strb	r3, [r7, #6]
	const uint8_t NUM_RX_BYT = 8;
 8001220:	2308      	movs	r3, #8
 8001222:	76bb      	strb	r3, [r7, #26]
	const uint8_t BYT_IN_REG = 6;
 8001224:	2306      	movs	r3, #6
 8001226:	767b      	strb	r3, [r7, #25]
	const uint8_t CELL_IN_REG = 3;
 8001228:	2303      	movs	r3, #3
 800122a:	763b      	strb	r3, [r7, #24]

	uint8_t pec_error = 0; //pec Error wenn -1
 800122c:	2300      	movs	r3, #0
 800122e:	77fb      	strb	r3, [r7, #31]
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	77bb      	strb	r3, [r7, #30]
	uint8_t *cell_data;
	cell_data = (uint8_t *)malloc((NUM_RX_BYT * nIC) * sizeof(uint8_t));
 8001234:	7ebb      	ldrb	r3, [r7, #26]
 8001236:	79ba      	ldrb	r2, [r7, #6]
 8001238:	fb02 f303 	mul.w	r3, r2, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f004 ff95 	bl	800616c <malloc>
 8001242:	4603      	mov	r3, r0
 8001244:	617b      	str	r3, [r7, #20]

	for(uint8_t cell_reg = 1; cell_reg < 5; cell_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001246:	2301      	movs	r3, #1
 8001248:	777b      	strb	r3, [r7, #29]
 800124a:	e068      	b.n	800131e <LTC6811_rdcv+0x10e>
	{
		data_counter = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	77bb      	strb	r3, [r7, #30]
		LTC6811_rdcv_reg(cell_reg, nIC, cell_data);
 8001250:	79b9      	ldrb	r1, [r7, #6]
 8001252:	7f7b      	ldrb	r3, [r7, #29]
 8001254:	697a      	ldr	r2, [r7, #20]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f86c 	bl	8001334 <LTC6811_rdcv_reg>

		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 800125c:	2300      	movs	r3, #0
 800125e:	773b      	strb	r3, [r7, #28]
 8001260:	e056      	b.n	8001310 <LTC6811_rdcv+0x100>
		{
			 // current_ic is used as an IC counter
			for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 8001262:	2300      	movs	r3, #0
 8001264:	76fb      	strb	r3, [r7, #27]
 8001266:	e026      	b.n	80012b6 <LTC6811_rdcv+0xa6>
			{
				uint16_t parsed_cell = cell_data[data_counter] | (cell_data[data_counter + 1] << 8);
 8001268:	7fbb      	ldrb	r3, [r7, #30]
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	4413      	add	r3, r2
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b21a      	sxth	r2, r3
 8001272:	7fbb      	ldrb	r3, [r7, #30]
 8001274:	3301      	adds	r3, #1
 8001276:	6979      	ldr	r1, [r7, #20]
 8001278:	440b      	add	r3, r1
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	021b      	lsls	r3, r3, #8
 800127e:	b21b      	sxth	r3, r3
 8001280:	4313      	orrs	r3, r2
 8001282:	b21b      	sxth	r3, r3
 8001284:	81fb      	strh	r3, [r7, #14]
				cell_codes[current_ic][current_cell + ((cell_reg - 1) * CELL_IN_REG)] = parsed_cell;
 8001286:	7f3a      	ldrb	r2, [r7, #28]
 8001288:	4613      	mov	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4413      	add	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	461a      	mov	r2, r3
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	4413      	add	r3, r2
 8001296:	7ef9      	ldrb	r1, [r7, #27]
 8001298:	7f7a      	ldrb	r2, [r7, #29]
 800129a:	3a01      	subs	r2, #1
 800129c:	7e38      	ldrb	r0, [r7, #24]
 800129e:	fb00 f202 	mul.w	r2, r0, r2
 80012a2:	440a      	add	r2, r1
 80012a4:	89f9      	ldrh	r1, [r7, #14]
 80012a6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter = data_counter + 2;
 80012aa:	7fbb      	ldrb	r3, [r7, #30]
 80012ac:	3302      	adds	r3, #2
 80012ae:	77bb      	strb	r3, [r7, #30]
			for(uint8_t current_cell = 0; current_cell < CELL_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 80012b0:	7efb      	ldrb	r3, [r7, #27]
 80012b2:	3301      	adds	r3, #1
 80012b4:	76fb      	strb	r3, [r7, #27]
 80012b6:	7efa      	ldrb	r2, [r7, #27]
 80012b8:	7e3b      	ldrb	r3, [r7, #24]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d3d4      	bcc.n	8001268 <LTC6811_rdcv+0x58>
			}
			received_pec = (cell_data[data_counter] << 8) + cell_data[data_counter + 1];
 80012be:	7fbb      	ldrb	r3, [r7, #30]
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	4413      	add	r3, r2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	7fbb      	ldrb	r3, [r7, #30]
 80012ce:	3301      	adds	r3, #1
 80012d0:	6979      	ldr	r1, [r7, #20]
 80012d2:	440b      	add	r3, r1
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	4413      	add	r3, r2
 80012da:	827b      	strh	r3, [r7, #18]
			data_pec = pec15_calc(BYT_IN_REG, &cell_data[current_ic * NUM_RX_BYT]);
 80012dc:	7f3b      	ldrb	r3, [r7, #28]
 80012de:	7eba      	ldrb	r2, [r7, #26]
 80012e0:	fb02 f303 	mul.w	r3, r2, r3
 80012e4:	461a      	mov	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	441a      	add	r2, r3
 80012ea:	7e7b      	ldrb	r3, [r7, #25]
 80012ec:	4611      	mov	r1, r2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 faa4 	bl	800183c <pec15_calc>
 80012f4:	4603      	mov	r3, r0
 80012f6:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 80012f8:	8a7a      	ldrh	r2, [r7, #18]
 80012fa:	8a3b      	ldrh	r3, [r7, #16]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d001      	beq.n	8001304 <LTC6811_rdcv+0xf4>
			{
			  pec_error = -1;
 8001300:	23ff      	movs	r3, #255	; 0xff
 8001302:	77fb      	strb	r3, [r7, #31]
			}
			data_counter = data_counter + 2;
 8001304:	7fbb      	ldrb	r3, [r7, #30]
 8001306:	3302      	adds	r3, #2
 8001308:	77bb      	strb	r3, [r7, #30]
		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 800130a:	7f3b      	ldrb	r3, [r7, #28]
 800130c:	3301      	adds	r3, #1
 800130e:	773b      	strb	r3, [r7, #28]
 8001310:	7f3a      	ldrb	r2, [r7, #28]
 8001312:	79bb      	ldrb	r3, [r7, #6]
 8001314:	429a      	cmp	r2, r3
 8001316:	d3a4      	bcc.n	8001262 <LTC6811_rdcv+0x52>
	for(uint8_t cell_reg = 1; cell_reg < 5; cell_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001318:	7f7b      	ldrb	r3, [r7, #29]
 800131a:	3301      	adds	r3, #1
 800131c:	777b      	strb	r3, [r7, #29]
 800131e:	7f7b      	ldrb	r3, [r7, #29]
 8001320:	2b04      	cmp	r3, #4
 8001322:	d993      	bls.n	800124c <LTC6811_rdcv+0x3c>
		}
	}

	free(cell_data);
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f004 ff29 	bl	800617c <free>
	return(pec_error);
 800132a:	7ffb      	ldrb	r3, [r7, #31]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <LTC6811_rdcv_reg>:

void LTC6811_rdcv_reg(uint8_t reg, uint8_t nIC, uint8_t *data)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	603a      	str	r2, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	460b      	mov	r3, r1
 8001342:	71bb      	strb	r3, [r7, #6]
	uint8_t RDCV[4];
	uint16_t temp_pec;

	switch(reg){
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	3b01      	subs	r3, #1
 8001348:	2b03      	cmp	r3, #3
 800134a:	d817      	bhi.n	800137c <LTC6811_rdcv_reg+0x48>
 800134c:	a201      	add	r2, pc, #4	; (adr r2, 8001354 <LTC6811_rdcv_reg+0x20>)
 800134e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001352:	bf00      	nop
 8001354:	08001365 	.word	0x08001365
 8001358:	0800136b 	.word	0x0800136b
 800135c:	08001371 	.word	0x08001371
 8001360:	08001377 	.word	0x08001377
		case 1: RDCV[1] = 0x04; break;
 8001364:	2304      	movs	r3, #4
 8001366:	727b      	strb	r3, [r7, #9]
 8001368:	e008      	b.n	800137c <LTC6811_rdcv_reg+0x48>
		case 2: RDCV[1] = 0x06; break;
 800136a:	2306      	movs	r3, #6
 800136c:	727b      	strb	r3, [r7, #9]
 800136e:	e005      	b.n	800137c <LTC6811_rdcv_reg+0x48>
		case 3: RDCV[1] = 0x08; break;
 8001370:	2308      	movs	r3, #8
 8001372:	727b      	strb	r3, [r7, #9]
 8001374:	e002      	b.n	800137c <LTC6811_rdcv_reg+0x48>
		case 4: RDCV[1] = 0x0a; break;
 8001376:	230a      	movs	r3, #10
 8001378:	727b      	strb	r3, [r7, #9]
 800137a:	bf00      	nop
	}

	wakeup_idle();
 800137c:	f7ff fda2 	bl	8000ec4 <wakeup_idle>

    //Register A-D = reg 1-4
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	e02f      	b.n	80013e6 <LTC6811_rdcv_reg+0xb2>
    {
    	RDCV[0] = 0x80 + (current_ic << 3);
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	b2db      	uxtb	r3, r3
 800138c:	3b80      	subs	r3, #128	; 0x80
 800138e:	b2db      	uxtb	r3, r3
 8001390:	723b      	strb	r3, [r7, #8]
        temp_pec = pec15_calc(2, RDCV);
 8001392:	f107 0308 	add.w	r3, r7, #8
 8001396:	4619      	mov	r1, r3
 8001398:	2002      	movs	r0, #2
 800139a:	f000 fa4f 	bl	800183c <pec15_calc>
 800139e:	4603      	mov	r3, r0
 80013a0:	81bb      	strh	r3, [r7, #12]
        RDCV[2] = (uint8_t)(temp_pec >> 8);
 80013a2:	89bb      	ldrh	r3, [r7, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	72bb      	strb	r3, [r7, #10]
        RDCV[3] = (uint8_t)(temp_pec);
 80013ac:	89bb      	ldrh	r3, [r7, #12]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b8:	480f      	ldr	r0, [pc, #60]	; (80013f8 <LTC6811_rdcv_reg+0xc4>)
 80013ba:	f002 fcb9 	bl	8003d30 <HAL_GPIO_WritePin>
        spi_write_read(RDCV, 4, &data[current_ic * 8], 8);
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	461a      	mov	r2, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	441a      	add	r2, r3
 80013c8:	f107 0008 	add.w	r0, r7, #8
 80013cc:	2308      	movs	r3, #8
 80013ce:	2104      	movs	r1, #4
 80013d0:	f7ff fd4a 	bl	8000e68 <spi_write_read>
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013da:	4807      	ldr	r0, [pc, #28]	; (80013f8 <LTC6811_rdcv_reg+0xc4>)
 80013dc:	f002 fca8 	bl	8003d30 <HAL_GPIO_WritePin>
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	3301      	adds	r3, #1
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d3cb      	bcc.n	8001386 <LTC6811_rdcv_reg+0x52>
    }
}
 80013ee:	bf00      	nop
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40020000 	.word	0x40020000

080013fc <LTC6811_rdaux>:

int8_t LTC6811_rdaux(uint8_t reg, uint8_t nIC, uint16_t aux_codes[][6])
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	603a      	str	r2, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	460b      	mov	r3, r1
 800140a:	71bb      	strb	r3, [r7, #6]
	const uint8_t NUM_RX_BYT = 8;
 800140c:	2308      	movs	r3, #8
 800140e:	76bb      	strb	r3, [r7, #26]
	const uint8_t BYT_IN_REG = 6;
 8001410:	2306      	movs	r3, #6
 8001412:	767b      	strb	r3, [r7, #25]
	const uint8_t AUX_IN_REG = 3;
 8001414:	2303      	movs	r3, #3
 8001416:	763b      	strb	r3, [r7, #24]

	uint8_t pec_error = 0; //pec Error wenn -1
 8001418:	2300      	movs	r3, #0
 800141a:	77fb      	strb	r3, [r7, #31]
	uint16_t received_pec;
	uint16_t data_pec;
	uint8_t data_counter = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	77bb      	strb	r3, [r7, #30]
	uint8_t *aux_data;

	aux_data = (uint8_t *)malloc((NUM_RX_BYT * nIC) * sizeof(uint8_t));
 8001420:	7ebb      	ldrb	r3, [r7, #26]
 8001422:	79ba      	ldrb	r2, [r7, #6]
 8001424:	fb02 f303 	mul.w	r3, r2, r3
 8001428:	4618      	mov	r0, r3
 800142a:	f004 fe9f 	bl	800616c <malloc>
 800142e:	4603      	mov	r3, r0
 8001430:	617b      	str	r3, [r7, #20]

	for(uint8_t aux_reg = 1; aux_reg < AUX_IN_REG; aux_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001432:	2301      	movs	r3, #1
 8001434:	777b      	strb	r3, [r7, #29]
 8001436:	e068      	b.n	800150a <LTC6811_rdaux+0x10e>
	{
		data_counter = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	77bb      	strb	r3, [r7, #30]
		LTC6811_rdaux_reg(aux_reg, nIC, aux_data);
 800143c:	79b9      	ldrb	r1, [r7, #6]
 800143e:	7f7b      	ldrb	r3, [r7, #29]
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f86e 	bl	8001524 <LTC6811_rdaux_reg>

		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 8001448:	2300      	movs	r3, #0
 800144a:	773b      	strb	r3, [r7, #28]
 800144c:	e056      	b.n	80014fc <LTC6811_rdaux+0x100>
		{
			 // current_ic is used as an IC counter
			for(uint8_t current_cell = 0; current_cell < AUX_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 800144e:	2300      	movs	r3, #0
 8001450:	76fb      	strb	r3, [r7, #27]
 8001452:	e026      	b.n	80014a2 <LTC6811_rdaux+0xa6>
			{
				uint16_t parsed_cell = aux_data[data_counter] | (aux_data[data_counter + 1] << 8);
 8001454:	7fbb      	ldrb	r3, [r7, #30]
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	4413      	add	r3, r2
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b21a      	sxth	r2, r3
 800145e:	7fbb      	ldrb	r3, [r7, #30]
 8001460:	3301      	adds	r3, #1
 8001462:	6979      	ldr	r1, [r7, #20]
 8001464:	440b      	add	r3, r1
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	b21b      	sxth	r3, r3
 8001470:	81fb      	strh	r3, [r7, #14]
				aux_codes[current_ic][current_cell + ((aux_reg - 1) * AUX_IN_REG)] = parsed_cell;
 8001472:	7f3a      	ldrb	r2, [r7, #28]
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	461a      	mov	r2, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	4413      	add	r3, r2
 8001482:	7ef9      	ldrb	r1, [r7, #27]
 8001484:	7f7a      	ldrb	r2, [r7, #29]
 8001486:	3a01      	subs	r2, #1
 8001488:	7e38      	ldrb	r0, [r7, #24]
 800148a:	fb00 f202 	mul.w	r2, r0, r2
 800148e:	440a      	add	r2, r1
 8001490:	89f9      	ldrh	r1, [r7, #14]
 8001492:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				data_counter += 2;
 8001496:	7fbb      	ldrb	r3, [r7, #30]
 8001498:	3302      	adds	r3, #2
 800149a:	77bb      	strb	r3, [r7, #30]
			for(uint8_t current_cell = 0; current_cell < AUX_IN_REG; current_cell++)	// This loop parses the read back data. Loops once for each cell voltages in the register
 800149c:	7efb      	ldrb	r3, [r7, #27]
 800149e:	3301      	adds	r3, #1
 80014a0:	76fb      	strb	r3, [r7, #27]
 80014a2:	7efa      	ldrb	r2, [r7, #27]
 80014a4:	7e3b      	ldrb	r3, [r7, #24]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d3d4      	bcc.n	8001454 <LTC6811_rdaux+0x58>
			}
			received_pec = (aux_data[data_counter] << 8) + aux_data[data_counter + 1];
 80014aa:	7fbb      	ldrb	r3, [r7, #30]
 80014ac:	697a      	ldr	r2, [r7, #20]
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	7fbb      	ldrb	r3, [r7, #30]
 80014ba:	3301      	adds	r3, #1
 80014bc:	6979      	ldr	r1, [r7, #20]
 80014be:	440b      	add	r3, r1
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	4413      	add	r3, r2
 80014c6:	827b      	strh	r3, [r7, #18]
			data_pec = pec15_calc(BYT_IN_REG, &aux_data[current_ic * NUM_RX_BYT]);
 80014c8:	7f3b      	ldrb	r3, [r7, #28]
 80014ca:	7eba      	ldrb	r2, [r7, #26]
 80014cc:	fb02 f303 	mul.w	r3, r2, r3
 80014d0:	461a      	mov	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	441a      	add	r2, r3
 80014d6:	7e7b      	ldrb	r3, [r7, #25]
 80014d8:	4611      	mov	r1, r2
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f9ae 	bl	800183c <pec15_calc>
 80014e0:	4603      	mov	r3, r0
 80014e2:	823b      	strh	r3, [r7, #16]
			if (received_pec != data_pec)
 80014e4:	8a7a      	ldrh	r2, [r7, #18]
 80014e6:	8a3b      	ldrh	r3, [r7, #16]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d001      	beq.n	80014f0 <LTC6811_rdaux+0xf4>
			{
			  pec_error = -1;
 80014ec:	23ff      	movs	r3, #255	; 0xff
 80014ee:	77fb      	strb	r3, [r7, #31]
			}
			data_counter += 2;
 80014f0:	7fbb      	ldrb	r3, [r7, #30]
 80014f2:	3302      	adds	r3, #2
 80014f4:	77bb      	strb	r3, [r7, #30]
		for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)	// executes for every LTC6804 in the stack.
 80014f6:	7f3b      	ldrb	r3, [r7, #28]
 80014f8:	3301      	adds	r3, #1
 80014fa:	773b      	strb	r3, [r7, #28]
 80014fc:	7f3a      	ldrb	r2, [r7, #28]
 80014fe:	79bb      	ldrb	r3, [r7, #6]
 8001500:	429a      	cmp	r2, r3
 8001502:	d3a4      	bcc.n	800144e <LTC6811_rdaux+0x52>
	for(uint8_t aux_reg = 1; aux_reg < AUX_IN_REG; aux_reg++)	//executes once for each of the LTC6804 cell voltage registers
 8001504:	7f7b      	ldrb	r3, [r7, #29]
 8001506:	3301      	adds	r3, #1
 8001508:	777b      	strb	r3, [r7, #29]
 800150a:	7f7a      	ldrb	r2, [r7, #29]
 800150c:	7e3b      	ldrb	r3, [r7, #24]
 800150e:	429a      	cmp	r2, r3
 8001510:	d392      	bcc.n	8001438 <LTC6811_rdaux+0x3c>
		}
	}

	free(aux_data);
 8001512:	6978      	ldr	r0, [r7, #20]
 8001514:	f004 fe32 	bl	800617c <free>
	return(pec_error);
 8001518:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3720      	adds	r7, #32
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <LTC6811_rdaux_reg>:

void LTC6811_rdaux_reg(uint8_t reg, uint8_t nIC, uint8_t *data)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	603a      	str	r2, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
 8001530:	460b      	mov	r3, r1
 8001532:	71bb      	strb	r3, [r7, #6]
	uint8_t RDAUX[4];
	uint16_t temp_pec;

	switch(reg){
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d002      	beq.n	8001540 <LTC6811_rdaux_reg+0x1c>
 800153a:	2b02      	cmp	r3, #2
 800153c:	d003      	beq.n	8001546 <LTC6811_rdaux_reg+0x22>
 800153e:	e005      	b.n	800154c <LTC6811_rdaux_reg+0x28>
		case 1: RDAUX[1] = 0xC; break;
 8001540:	230c      	movs	r3, #12
 8001542:	727b      	strb	r3, [r7, #9]
 8001544:	e002      	b.n	800154c <LTC6811_rdaux_reg+0x28>
		case 2: RDAUX[1] = 0xE; break;
 8001546:	230e      	movs	r3, #14
 8001548:	727b      	strb	r3, [r7, #9]
 800154a:	bf00      	nop
	}

	wakeup_idle();
 800154c:	f7ff fcba 	bl	8000ec4 <wakeup_idle>

    //Register A-D = reg 1-4
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 8001550:	2300      	movs	r3, #0
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e02f      	b.n	80015b6 <LTC6811_rdaux_reg+0x92>
    {
    	RDAUX[0] = 0x80 + (current_ic << 3);
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	3b80      	subs	r3, #128	; 0x80
 800155e:	b2db      	uxtb	r3, r3
 8001560:	723b      	strb	r3, [r7, #8]
        temp_pec = pec15_calc(2, RDAUX);
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	4619      	mov	r1, r3
 8001568:	2002      	movs	r0, #2
 800156a:	f000 f967 	bl	800183c <pec15_calc>
 800156e:	4603      	mov	r3, r0
 8001570:	81bb      	strh	r3, [r7, #12]
        RDAUX[2] = (uint8_t)(temp_pec >> 8);
 8001572:	89bb      	ldrh	r3, [r7, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	b29b      	uxth	r3, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	72bb      	strb	r3, [r7, #10]
        RDAUX[3] = (uint8_t)(temp_pec);
 800157c:	89bb      	ldrh	r3, [r7, #12]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	72fb      	strb	r3, [r7, #11]
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001582:	2200      	movs	r2, #0
 8001584:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001588:	480f      	ldr	r0, [pc, #60]	; (80015c8 <LTC6811_rdaux_reg+0xa4>)
 800158a:	f002 fbd1 	bl	8003d30 <HAL_GPIO_WritePin>
        spi_write_read(RDAUX, 4, &data[current_ic * 8], 8);
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	461a      	mov	r2, r3
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	441a      	add	r2, r3
 8001598:	f107 0008 	add.w	r0, r7, #8
 800159c:	2308      	movs	r3, #8
 800159e:	2104      	movs	r1, #4
 80015a0:	f7ff fc62 	bl	8000e68 <spi_write_read>
        HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015aa:	4807      	ldr	r0, [pc, #28]	; (80015c8 <LTC6811_rdaux_reg+0xa4>)
 80015ac:	f002 fbc0 	bl	8003d30 <HAL_GPIO_WritePin>
    for(uint8_t current_ic = 0; current_ic < nIC; current_ic++)
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	3301      	adds	r3, #1
 80015b4:	73fb      	strb	r3, [r7, #15]
 80015b6:	7bfa      	ldrb	r2, [r7, #15]
 80015b8:	79bb      	ldrb	r3, [r7, #6]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d3cb      	bcc.n	8001556 <LTC6811_rdaux_reg+0x32>
    }
}
 80015be:	bf00      	nop
 80015c0:	bf00      	nop
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40020000 	.word	0x40020000

080015cc <LTC6811_rdstatb>:



int8_t LTC6811_rdstatb(uint8_t total_ic, uint16_t OV_flag[] ,uint16_t UV_flag[], uint8_t r_statb[][6])
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08c      	sub	sp, #48	; 0x30
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	4603      	mov	r3, r0
 80015da:	73fb      	strb	r3, [r7, #15]
  const uint8_t BYTES_IN_REG = 8;
 80015dc:	2308      	movs	r3, #8
 80015de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  uint8_t cmd[4];
  uint8_t *rx_data;
  int8_t pec_error = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint16_t data_pec;
  uint16_t received_pec;
  rx_data = (uint8_t *)malloc((8 * total_ic) * sizeof(uint8_t));
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	4618      	mov	r0, r3
 80015ee:	f004 fdbd 	bl	800616c <malloc>
 80015f2:	4603      	mov	r3, r0
 80015f4:	61fb      	str	r3, [r7, #28]
  //1
  cmd[0] = 0x00;
 80015f6:	2300      	movs	r3, #0
 80015f8:	753b      	strb	r3, [r7, #20]
  cmd[1] = 0x12;
 80015fa:	2312      	movs	r3, #18
 80015fc:	757b      	strb	r3, [r7, #21]

  //2
  wakeup_idle(); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 80015fe:	f7ff fc61 	bl	8000ec4 <wakeup_idle>
  //3
  for (int current_ic = 0; current_ic < total_ic; current_ic++)
 8001602:	2300      	movs	r3, #0
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
 8001606:	e030      	b.n	800166a <LTC6811_rdstatb+0x9e>
  {
    cmd[0] = 0x80 + (current_ic << 3); //Setting address
 8001608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160a:	b2db      	uxtb	r3, r3
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	3b80      	subs	r3, #128	; 0x80
 8001612:	b2db      	uxtb	r3, r3
 8001614:	753b      	strb	r3, [r7, #20]
    data_pec = pec15_calc(2, cmd);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	2002      	movs	r0, #2
 800161e:	f000 f90d 	bl	800183c <pec15_calc>
 8001622:	4603      	mov	r3, r0
 8001624:	833b      	strh	r3, [r7, #24]
    cmd[2] = (uint8_t)(data_pec >> 8);
 8001626:	8b3b      	ldrh	r3, [r7, #24]
 8001628:	0a1b      	lsrs	r3, r3, #8
 800162a:	b29b      	uxth	r3, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	75bb      	strb	r3, [r7, #22]
    cmd[3] = (uint8_t)(data_pec);
 8001630:	8b3b      	ldrh	r3, [r7, #24]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	75fb      	strb	r3, [r7, #23]
    HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800163c:	487e      	ldr	r0, [pc, #504]	; (8001838 <LTC6811_rdstatb+0x26c>)
 800163e:	f002 fb77 	bl	8003d30 <HAL_GPIO_WritePin>
    spi_write_read(cmd, 4, &rx_data[current_ic * 8], 8);
 8001642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	461a      	mov	r2, r3
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	441a      	add	r2, r3
 800164c:	f107 0014 	add.w	r0, r7, #20
 8001650:	2308      	movs	r3, #8
 8001652:	2104      	movs	r1, #4
 8001654:	f7ff fc08 	bl	8000e68 <spi_write_read>
    HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 8001658:	2201      	movs	r2, #1
 800165a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800165e:	4876      	ldr	r0, [pc, #472]	; (8001838 <LTC6811_rdstatb+0x26c>)
 8001660:	f002 fb66 	bl	8003d30 <HAL_GPIO_WritePin>
  for (int current_ic = 0; current_ic < total_ic; current_ic++)
 8001664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001666:	3301      	adds	r3, #1
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
 800166a:	7bfb      	ldrb	r3, [r7, #15]
 800166c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800166e:	429a      	cmp	r2, r3
 8001670:	dbca      	blt.n	8001608 <LTC6811_rdstatb+0x3c>
  }

  for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++) //executes for each LTC6804 in the stack
 8001672:	2300      	movs	r3, #0
 8001674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001678:	e0cf      	b.n	800181a <LTC6811_rdstatb+0x24e>
  {
	  uint8_t i =0;
 800167a:	2300      	movs	r3, #0
 800167c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		  }
	  }
*/

    //4.a
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8001680:	2300      	movs	r3, #0
 8001682:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001686:	e01d      	b.n	80016c4 <LTC6811_rdstatb+0xf8>
    {
      r_statb[current_ic][current_byte] = rx_data[current_byte + (current_ic * BYTES_IN_REG)];
 8001688:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800168c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001690:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 8001694:	fb01 f303 	mul.w	r3, r1, r3
 8001698:	4413      	add	r3, r2
 800169a:	461a      	mov	r2, r3
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	1899      	adds	r1, r3, r2
 80016a0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	461a      	mov	r2, r3
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	441a      	add	r2, r3
 80016b2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016b6:	7809      	ldrb	r1, [r1, #0]
 80016b8:	54d1      	strb	r1, [r2, r3]
    for (uint8_t current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 80016ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80016be:	3301      	adds	r3, #1
 80016c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80016c4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80016c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d3db      	bcc.n	8001688 <LTC6811_rdstatb+0xbc>
    }

    for (uint8_t byte = 2; byte < 5; byte++)
 80016d0:	2302      	movs	r3, #2
 80016d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80016d6:	e067      	b.n	80017a8 <LTC6811_rdstatb+0x1dc>
   	  {
   		  for (uint8_t bit = 0; bit < 8; bit+=2)
 80016d8:	2300      	movs	r3, #0
 80016da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80016de:	e05a      	b.n	8001796 <LTC6811_rdstatb+0x1ca>
   		  {
   			  OV_flag[current_ic] |= ((r_statb[current_ic][byte]>>(bit +1))&1)<<i;
 80016e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	4413      	add	r3, r2
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	b219      	sxth	r1, r3
 80016ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80016f2:	4613      	mov	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4413      	add	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	461a      	mov	r2, r3
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	441a      	add	r2, r3
 8001700:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001704:	5cd3      	ldrb	r3, [r2, r3]
 8001706:	461a      	mov	r2, r3
 8001708:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800170c:	3301      	adds	r3, #1
 800170e:	fa42 f303 	asr.w	r3, r2, r3
 8001712:	f003 0201 	and.w	r2, r3, #1
 8001716:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	b21b      	sxth	r3, r3
 8001720:	430b      	orrs	r3, r1
 8001722:	b219      	sxth	r1, r3
 8001724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	4413      	add	r3, r2
 800172e:	b28a      	uxth	r2, r1
 8001730:	801a      	strh	r2, [r3, #0]
   			  UV_flag[current_ic] |= (((r_statb[current_ic][byte])>>(bit))&1)<<i;
 8001732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4413      	add	r3, r2
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	b219      	sxth	r1, r3
 8001740:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	461a      	mov	r2, r3
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	441a      	add	r2, r3
 8001752:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001756:	5cd3      	ldrb	r3, [r2, r3]
 8001758:	461a      	mov	r2, r3
 800175a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800175e:	fa42 f303 	asr.w	r3, r2, r3
 8001762:	f003 0201 	and.w	r2, r3, #1
 8001766:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	b21b      	sxth	r3, r3
 8001770:	430b      	orrs	r3, r1
 8001772:	b219      	sxth	r1, r3
 8001774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	b28a      	uxth	r2, r1
 8001780:	801a      	strh	r2, [r3, #0]
   			  i++;
 8001782:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001786:	3301      	adds	r3, #1
 8001788:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   		  for (uint8_t bit = 0; bit < 8; bit+=2)
 800178c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001790:	3302      	adds	r3, #2
 8001792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001796:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800179a:	2b07      	cmp	r3, #7
 800179c:	d9a0      	bls.n	80016e0 <LTC6811_rdstatb+0x114>
    for (uint8_t byte = 2; byte < 5; byte++)
 800179e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017a2:	3301      	adds	r3, #1
 80017a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80017a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017ac:	2b04      	cmp	r3, #4
 80017ae:	d993      	bls.n	80016d8 <LTC6811_rdstatb+0x10c>
   		  }
   	  }
    //4.b
    received_pec = (r_statb[current_ic][6] << 8) + r_statb[current_ic][7];
 80017b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	461a      	mov	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	4413      	add	r3, r2
 80017c2:	799b      	ldrb	r3, [r3, #6]
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	b299      	uxth	r1, r3
 80017ca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80017ce:	4613      	mov	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	4413      	add	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	461a      	mov	r2, r3
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	79db      	ldrb	r3, [r3, #7]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	440b      	add	r3, r1
 80017e2:	837b      	strh	r3, [r7, #26]
    data_pec = pec15_calc(6, &r_statb[current_ic][0]);
 80017e4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80017e8:	4613      	mov	r3, r2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4413      	add	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	461a      	mov	r2, r3
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	4413      	add	r3, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	2006      	movs	r0, #6
 80017fa:	f000 f81f 	bl	800183c <pec15_calc>
 80017fe:	4603      	mov	r3, r0
 8001800:	833b      	strh	r3, [r7, #24]
    if (received_pec != data_pec)
 8001802:	8b7a      	ldrh	r2, [r7, #26]
 8001804:	8b3b      	ldrh	r3, [r7, #24]
 8001806:	429a      	cmp	r2, r3
 8001808:	d002      	beq.n	8001810 <LTC6811_rdstatb+0x244>
    {
      pec_error = -1;
 800180a:	23ff      	movs	r3, #255	; 0xff
 800180c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  for (uint8_t current_ic = 0; current_ic < total_ic; current_ic++) //executes for each LTC6804 in the stack
 8001810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001814:	3301      	adds	r3, #1
 8001816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800181a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	429a      	cmp	r2, r3
 8001822:	f4ff af2a 	bcc.w	800167a <LTC6811_rdstatb+0xae>
    }
  }
  free(rx_data);
 8001826:	69f8      	ldr	r0, [r7, #28]
 8001828:	f004 fca8 	bl	800617c <free>
  //5
  return (pec_error);
 800182c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8001830:	4618      	mov	r0, r3
 8001832:	3730      	adds	r7, #48	; 0x30
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40020000 	.word	0x40020000

0800183c <pec15_calc>:
}
*/

//char *data uint8_t *data , uint8_t len
uint16_t pec15_calc(uint8_t len, uint8_t *data)
 {
 800183c:	b480      	push	{r7}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	71fb      	strb	r3, [r7, #7]
 uint16_t remainder, address;

 remainder = 16;//PEC seed
 8001848:	2310      	movs	r3, #16
 800184a:	82fb      	strh	r3, [r7, #22]
 for (int i = 0; i < len; i++)
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	e018      	b.n	8001884 <pec15_calc+0x48>
 {
 address = ((remainder >> 7) ^ data[i]) & 0xff;//calculate PEC table address
 8001852:	8afb      	ldrh	r3, [r7, #22]
 8001854:	09db      	lsrs	r3, r3, #7
 8001856:	b29a      	uxth	r2, r3
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	6839      	ldr	r1, [r7, #0]
 800185c:	440b      	add	r3, r1
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	b29b      	uxth	r3, r3
 8001862:	4053      	eors	r3, r2
 8001864:	b29b      	uxth	r3, r3
 8001866:	b2db      	uxtb	r3, r3
 8001868:	81fb      	strh	r3, [r7, #14]
 remainder = (remainder << 8 ) ^ pec15Table[address];
 800186a:	8afb      	ldrh	r3, [r7, #22]
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	b29a      	uxth	r2, r3
 8001870:	89fb      	ldrh	r3, [r7, #14]
 8001872:	490a      	ldr	r1, [pc, #40]	; (800189c <pec15_calc+0x60>)
 8001874:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001878:	b29b      	uxth	r3, r3
 800187a:	4053      	eors	r3, r2
 800187c:	82fb      	strh	r3, [r7, #22]
 for (int i = 0; i < len; i++)
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	3301      	adds	r3, #1
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	429a      	cmp	r2, r3
 800188a:	dbe2      	blt.n	8001852 <pec15_calc+0x16>
 }
 return (remainder*2);//The CRC15 has a 0 in the LSB so the final value must be multiplied by 2
 800188c:	8afb      	ldrh	r3, [r7, #22]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	b29b      	uxth	r3, r3
 }
 8001892:	4618      	mov	r0, r3
 8001894:	371c      	adds	r7, #28
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	08008ec4 	.word	0x08008ec4

080018a0 <HAL_TIM_PeriodElapsedCallback>:
 * HLCK 96 MHz
 * APB1 48 MHz
 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

CAN_interrupt();
 80018a8:	f000 fa46 	bl	8001d38 <CAN_interrupt>
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
   {
 80018b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018b6:	b089      	sub	sp, #36	; 0x24
 80018b8:	af06      	add	r7, sp, #24
 80018ba:	6078      	str	r0, [r7, #4]
    CAN_RX(hcan1);
 80018bc:	4e08      	ldr	r6, [pc, #32]	; (80018e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80018be:	466d      	mov	r5, sp
 80018c0:	f106 0410 	add.w	r4, r6, #16
 80018c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80018d0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80018d4:	f000 fb2a 	bl	8001f2c <CAN_RX>
   }
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018e0:	20000308 	.word	0x20000308

080018e4 <BMS_init>:


void BMS_init()
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	LTC6811_initialize();
 80018e8:	f7ff fade 	bl	8000ea8 <LTC6811_initialize>
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <BMS>:

void BMS()		// Battery Management System function for main loop.
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
	uint8_t pec = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	713b      	strb	r3, [r7, #4]
	static uint8_t selTemp = 0;
	uint16_t VOV = MAX_VOLTAGE/16;					// Formeln aus Datenblatt S.65
 80018fa:	f640 1385 	movw	r3, #2437	; 0x985
 80018fe:	807b      	strh	r3, [r7, #2]
	uint16_t VUV = (MIN_VOLTAGE/16)-1;
 8001900:	f240 7352 	movw	r3, #1874	; 0x752
 8001904:	803b      	strh	r3, [r7, #0]


	for (uint8_t i = 0; i < NUM_STACK; i++)
 8001906:	2300      	movs	r3, #0
 8001908:	71fb      	strb	r3, [r7, #7]
 800190a:	e0b2      	b.n	8001a72 <BMS+0x182>
		cfg[i][5] = 0x00 | (OV_flag[i]>>8);
		*/

		//Balancing without flags

		cfg[i][0] = 0x3C | ((selTemp << 6) & 0xC0);		//cfg : Databytes in config register of the LTC6811
 800190c:	4b84      	ldr	r3, [pc, #528]	; (8001b20 <BMS+0x230>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	019b      	lsls	r3, r3, #6
 8001912:	b25b      	sxtb	r3, r3
 8001914:	f043 033c 	orr.w	r3, r3, #60	; 0x3c
 8001918:	b25b      	sxtb	r3, r3
 800191a:	79fa      	ldrb	r2, [r7, #7]
 800191c:	b2d8      	uxtb	r0, r3
 800191e:	4981      	ldr	r1, [pc, #516]	; (8001b24 <BMS+0x234>)
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	440b      	add	r3, r1
 800192a:	4602      	mov	r2, r0
 800192c:	701a      	strb	r2, [r3, #0]
		cfg[i][1] = 0x00;
 800192e:	79fa      	ldrb	r2, [r7, #7]
 8001930:	497c      	ldr	r1, [pc, #496]	; (8001b24 <BMS+0x234>)
 8001932:	4613      	mov	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4413      	add	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	440b      	add	r3, r1
 800193c:	3301      	adds	r3, #1
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
		cfg[i][2] = 0x00;
 8001942:	79fa      	ldrb	r2, [r7, #7]
 8001944:	4977      	ldr	r1, [pc, #476]	; (8001b24 <BMS+0x234>)
 8001946:	4613      	mov	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	440b      	add	r3, r1
 8001950:	3302      	adds	r3, #2
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
		cfg[i][3] = 0x00;
 8001956:	79fa      	ldrb	r2, [r7, #7]
 8001958:	4972      	ldr	r1, [pc, #456]	; (8001b24 <BMS+0x234>)
 800195a:	4613      	mov	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4413      	add	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	440b      	add	r3, r1
 8001964:	3303      	adds	r3, #3
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
		cfg[i][4] = 0x00;
 800196a:	79fa      	ldrb	r2, [r7, #7]
 800196c:	496d      	ldr	r1, [pc, #436]	; (8001b24 <BMS+0x234>)
 800196e:	4613      	mov	r3, r2
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	4413      	add	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	440b      	add	r3, r1
 8001978:	3304      	adds	r3, #4
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
		cfg[i][5] = 0x00;
 800197e:	79fa      	ldrb	r2, [r7, #7]
 8001980:	4968      	ldr	r1, [pc, #416]	; (8001b24 <BMS+0x234>)
 8001982:	4613      	mov	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4413      	add	r3, r2
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	440b      	add	r3, r1
 800198c:	3305      	adds	r3, #5
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]

		if(balancing)
 8001992:	4b65      	ldr	r3, [pc, #404]	; (8001b28 <BMS+0x238>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d068      	beq.n	8001a6c <BMS+0x17c>
		{
			if(selTemp < 3)
 800199a:	4b61      	ldr	r3, [pc, #388]	; (8001b20 <BMS+0x230>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d864      	bhi.n	8001a6c <BMS+0x17c>
			{
				for(uint8_t j = 0; j < 8; j++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	71bb      	strb	r3, [r7, #6]
 80019a6:	e02b      	b.n	8001a00 <BMS+0x110>
				{
					if(cellVoltages[i * NUM_STACK + j] - MAX_VOLTAGE > balanceMargin)cfg[i][4] |= 1 << j;
 80019a8:	79fa      	ldrb	r2, [r7, #7]
 80019aa:	79bb      	ldrb	r3, [r7, #6]
 80019ac:	4413      	add	r3, r2
 80019ae:	4a5f      	ldr	r2, [pc, #380]	; (8001b2c <BMS+0x23c>)
 80019b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019b4:	f5a3 4318 	sub.w	r3, r3, #38912	; 0x9800
 80019b8:	3b58      	subs	r3, #88	; 0x58
 80019ba:	4a5d      	ldr	r2, [pc, #372]	; (8001b30 <BMS+0x240>)
 80019bc:	8812      	ldrh	r2, [r2, #0]
 80019be:	4293      	cmp	r3, r2
 80019c0:	dd1b      	ble.n	80019fa <BMS+0x10a>
 80019c2:	79fa      	ldrb	r2, [r7, #7]
 80019c4:	4957      	ldr	r1, [pc, #348]	; (8001b24 <BMS+0x234>)
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	440b      	add	r3, r1
 80019d0:	3304      	adds	r3, #4
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	b25a      	sxtb	r2, r3
 80019d6:	79bb      	ldrb	r3, [r7, #6]
 80019d8:	2101      	movs	r1, #1
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	b25b      	sxtb	r3, r3
 80019e0:	4313      	orrs	r3, r2
 80019e2:	b25b      	sxtb	r3, r3
 80019e4:	79fa      	ldrb	r2, [r7, #7]
 80019e6:	b2d8      	uxtb	r0, r3
 80019e8:	494e      	ldr	r1, [pc, #312]	; (8001b24 <BMS+0x234>)
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	440b      	add	r3, r1
 80019f4:	3304      	adds	r3, #4
 80019f6:	4602      	mov	r2, r0
 80019f8:	701a      	strb	r2, [r3, #0]
				for(uint8_t j = 0; j < 8; j++)
 80019fa:	79bb      	ldrb	r3, [r7, #6]
 80019fc:	3301      	adds	r3, #1
 80019fe:	71bb      	strb	r3, [r7, #6]
 8001a00:	79bb      	ldrb	r3, [r7, #6]
 8001a02:	2b07      	cmp	r3, #7
 8001a04:	d9d0      	bls.n	80019a8 <BMS+0xb8>
				}
				for(uint8_t j = 0; j < 3; j++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	717b      	strb	r3, [r7, #5]
 8001a0a:	e02c      	b.n	8001a66 <BMS+0x176>
				{
					if(cellVoltages[i * NUM_STACK + j + 8] - MAX_VOLTAGE > balanceMargin)cfg[i][5] |= 1 << j;
 8001a0c:	79fa      	ldrb	r2, [r7, #7]
 8001a0e:	797b      	ldrb	r3, [r7, #5]
 8001a10:	4413      	add	r3, r2
 8001a12:	3308      	adds	r3, #8
 8001a14:	4a45      	ldr	r2, [pc, #276]	; (8001b2c <BMS+0x23c>)
 8001a16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a1a:	f5a3 4318 	sub.w	r3, r3, #38912	; 0x9800
 8001a1e:	3b58      	subs	r3, #88	; 0x58
 8001a20:	4a43      	ldr	r2, [pc, #268]	; (8001b30 <BMS+0x240>)
 8001a22:	8812      	ldrh	r2, [r2, #0]
 8001a24:	4293      	cmp	r3, r2
 8001a26:	dd1b      	ble.n	8001a60 <BMS+0x170>
 8001a28:	79fa      	ldrb	r2, [r7, #7]
 8001a2a:	493e      	ldr	r1, [pc, #248]	; (8001b24 <BMS+0x234>)
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	4413      	add	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	440b      	add	r3, r1
 8001a36:	3305      	adds	r3, #5
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	b25a      	sxtb	r2, r3
 8001a3c:	797b      	ldrb	r3, [r7, #5]
 8001a3e:	2101      	movs	r1, #1
 8001a40:	fa01 f303 	lsl.w	r3, r1, r3
 8001a44:	b25b      	sxtb	r3, r3
 8001a46:	4313      	orrs	r3, r2
 8001a48:	b25b      	sxtb	r3, r3
 8001a4a:	79fa      	ldrb	r2, [r7, #7]
 8001a4c:	b2d8      	uxtb	r0, r3
 8001a4e:	4935      	ldr	r1, [pc, #212]	; (8001b24 <BMS+0x234>)
 8001a50:	4613      	mov	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	440b      	add	r3, r1
 8001a5a:	3305      	adds	r3, #5
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	701a      	strb	r2, [r3, #0]
				for(uint8_t j = 0; j < 3; j++)
 8001a60:	797b      	ldrb	r3, [r7, #5]
 8001a62:	3301      	adds	r3, #1
 8001a64:	717b      	strb	r3, [r7, #5]
 8001a66:	797b      	ldrb	r3, [r7, #5]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d9cf      	bls.n	8001a0c <BMS+0x11c>
	for (uint8_t i = 0; i < NUM_STACK; i++)
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	71fb      	strb	r3, [r7, #7]
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f43f af49 	beq.w	800190c <BMS+0x1c>
	/*
	LTC6811_clrstat();
	HAL_Delay(3);
*/

	LTC6811_wrcfg(NUM_STACK, (uint8_t(*)[6])cfg);		// Write config
 8001a7a:	492a      	ldr	r1, [pc, #168]	; (8001b24 <BMS+0x234>)
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	f7ff fb0f 	bl	80010a0 <LTC6811_wrcfg>
	HAL_Delay(3);
 8001a82:	2003      	movs	r0, #3
 8001a84:	f001 f90c 	bl	8002ca0 <HAL_Delay>

	//wakeup_idle();									// read config
	//LTC6811_rdcfg();
	//HAL_Delay(3);

	LTC6811_adcv();										// measure voltages
 8001a88:	f7ff fa86 	bl	8000f98 <LTC6811_adcv>
	HAL_Delay(3);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f001 f907 	bl	8002ca0 <HAL_Delay>

	pec += LTC6811_rdcv(0, NUM_STACK, (uint16_t(*)[12])cellVoltages);	//read voltages
 8001a92:	4a26      	ldr	r2, [pc, #152]	; (8001b2c <BMS+0x23c>)
 8001a94:	2101      	movs	r1, #1
 8001a96:	2000      	movs	r0, #0
 8001a98:	f7ff fbba 	bl	8001210 <LTC6811_rdcv>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	793b      	ldrb	r3, [r7, #4]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	713b      	strb	r3, [r7, #4]
	HAL_Delay(3);
 8001aa6:	2003      	movs	r0, #3
 8001aa8:	f001 f8fa 	bl	8002ca0 <HAL_Delay>

	//CAN_interrupt();

	LTC6811_adax();										// measure 3 celltemp
 8001aac:	f7ff fab6 	bl	800101c <LTC6811_adax>
	HAL_Delay(3);
 8001ab0:	2003      	movs	r0, #3
 8001ab2:	f001 f8f5 	bl	8002ca0 <HAL_Delay>

	pec += LTC6811_rdaux(0, NUM_STACK, (uint16_t(*)[6])slaveGPIOs);	// read celltemp
 8001ab6:	4a1f      	ldr	r2, [pc, #124]	; (8001b34 <BMS+0x244>)
 8001ab8:	2101      	movs	r1, #1
 8001aba:	2000      	movs	r0, #0
 8001abc:	f7ff fc9e 	bl	80013fc <LTC6811_rdaux>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	793b      	ldrb	r3, [r7, #4]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	713b      	strb	r3, [r7, #4]
	HAL_Delay(3);
 8001aca:	2003      	movs	r0, #3
 8001acc:	f001 f8e8 	bl	8002ca0 <HAL_Delay>

	//CAN_interrupt();

	pec += LTC6811_rdstatb(NUM_STACK, OV_flag, UV_flag, r_statb);
 8001ad0:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <BMS+0x248>)
 8001ad2:	4a1a      	ldr	r2, [pc, #104]	; (8001b3c <BMS+0x24c>)
 8001ad4:	491a      	ldr	r1, [pc, #104]	; (8001b40 <BMS+0x250>)
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f7ff fd78 	bl	80015cc <LTC6811_rdstatb>
 8001adc:	4603      	mov	r3, r0
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	793b      	ldrb	r3, [r7, #4]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	713b      	strb	r3, [r7, #4]
	HAL_Delay(3);
 8001ae6:	2003      	movs	r0, #3
 8001ae8:	f001 f8da 	bl	8002ca0 <HAL_Delay>


	convertVoltage();
 8001aec:	f000 f82c 	bl	8001b48 <convertVoltage>

	convertTemperature(selTemp);
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <BMS+0x230>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 f97d 	bl	8001df4 <convertTemperature>

	wakeup_idle();
	LTC6811_rdstat();
*/

	if (selTemp < 3)		// Variable for cycling the multiplexers for temp measurement.
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <BMS+0x230>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d806      	bhi.n	8001b10 <BMS+0x220>
	{
		selTemp++;
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <BMS+0x230>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <BMS+0x230>)
 8001b0c:	701a      	strb	r2, [r3, #0]
	else
		selTemp = 0;



}
 8001b0e:	e002      	b.n	8001b16 <BMS+0x226>
		selTemp = 0;
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <BMS+0x230>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200002e0 	.word	0x200002e0
 8001b24:	20000274 	.word	0x20000274
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	2000025c 	.word	0x2000025c
 8001b30:	20000002 	.word	0x20000002
 8001b34:	2000027c 	.word	0x2000027c
 8001b38:	200002c8 	.word	0x200002c8
 8001b3c:	200002c4 	.word	0x200002c4
 8001b40:	200002c0 	.word	0x200002c0
 8001b44:	00000000 	.word	0x00000000

08001b48 <convertVoltage>:

void convertVoltage()		//convert and sort Voltages
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b09b      	sub	sp, #108	; 0x6c
 8001b4c:	af00      	add	r7, sp, #0
	double voltage[NUM_CELLS];
	uint16_t cell_max = cellVoltages[0];
 8001b4e:	4b46      	ldr	r3, [pc, #280]	; (8001c68 <convertVoltage+0x120>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	uint16_t cell_min = cellVoltages[0];
 8001b56:	4b44      	ldr	r3, [pc, #272]	; (8001c68 <convertVoltage+0x120>)
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8001b64:	e073      	b.n	8001c4e <convertVoltage+0x106>
	{

		for(uint8_t i = 0; i < 12; i++)
 8001b66:	2300      	movs	r3, #0
 8001b68:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 8001b6c:	e066      	b.n	8001c3c <convertVoltage+0xf4>
		{
			if(cellVoltages[i + k * 12] > cell_max) cell_max = cellVoltages[i + k * 12];
 8001b6e:	f897 1062 	ldrb.w	r1, [r7, #98]	; 0x62
 8001b72:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	440b      	add	r3, r1
 8001b80:	4a39      	ldr	r2, [pc, #228]	; (8001c68 <convertVoltage+0x120>)
 8001b82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b86:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d20e      	bcs.n	8001bac <convertVoltage+0x64>
 8001b8e:	f897 1062 	ldrb.w	r1, [r7, #98]	; 0x62
 8001b92:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	4a31      	ldr	r2, [pc, #196]	; (8001c68 <convertVoltage+0x120>)
 8001ba2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ba6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001baa:	e01d      	b.n	8001be8 <convertVoltage+0xa0>
			else if(cellVoltages[i + k * 12] < cell_min) cell_min = cellVoltages[i + k * 12];
 8001bac:	f897 1062 	ldrb.w	r1, [r7, #98]	; 0x62
 8001bb0:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	4413      	add	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	4a2a      	ldr	r2, [pc, #168]	; (8001c68 <convertVoltage+0x120>)
 8001bc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bc4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d90d      	bls.n	8001be8 <convertVoltage+0xa0>
 8001bcc:	f897 1062 	ldrb.w	r1, [r7, #98]	; 0x62
 8001bd0:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	4a22      	ldr	r2, [pc, #136]	; (8001c68 <convertVoltage+0x120>)
 8001be0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001be4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

			voltage[i + k * 12] = (double)cellVoltages[i + k * 12]/10000;
 8001be8:	f897 1062 	ldrb.w	r1, [r7, #98]	; 0x62
 8001bec:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	4a1b      	ldr	r2, [pc, #108]	; (8001c68 <convertVoltage+0x120>)
 8001bfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fc2b 	bl	800045c <__aeabi_ui2d>
 8001c06:	f897 4062 	ldrb.w	r4, [r7, #98]	; 0x62
 8001c0a:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8001c0e:	4613      	mov	r3, r2
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	4413      	add	r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	441c      	add	r4, r3
 8001c18:	a311      	add	r3, pc, #68	; (adr r3, 8001c60 <convertVoltage+0x118>)
 8001c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1e:	f7fe fdc1 	bl	80007a4 <__aeabi_ddiv>
 8001c22:	4602      	mov	r2, r0
 8001c24:	460b      	mov	r3, r1
 8001c26:	00e1      	lsls	r1, r4, #3
 8001c28:	3168      	adds	r1, #104	; 0x68
 8001c2a:	4439      	add	r1, r7
 8001c2c:	3968      	subs	r1, #104	; 0x68
 8001c2e:	e9c1 2300 	strd	r2, r3, [r1]
		for(uint8_t i = 0; i < 12; i++)
 8001c32:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001c36:	3301      	adds	r3, #1
 8001c38:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 8001c3c:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001c40:	2b0b      	cmp	r3, #11
 8001c42:	d994      	bls.n	8001b6e <convertVoltage+0x26>
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001c44:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001c48:	3301      	adds	r3, #1
 8001c4a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8001c4e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d087      	beq.n	8001b66 <convertVoltage+0x1e>
			//printf(" Stack %d Cell %d = %.4f V \r\n", k, i, voltage[i + k * 12]);
		}
	}

}
 8001c56:	bf00      	nop
 8001c58:	bf00      	nop
 8001c5a:	376c      	adds	r7, #108	; 0x6c
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd90      	pop	{r4, r7, pc}
 8001c60:	00000000 	.word	0x00000000
 8001c64:	40c38800 	.word	0x40c38800
 8001c68:	2000025c 	.word	0x2000025c
 8001c6c:	00000000 	.word	0x00000000

08001c70 <calculateTemperature>:


uint16_t calculateTemperature(uint16_t voltageCode, uint16_t referenceCode)		//convert temp
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	460a      	mov	r2, r1
 8001c7a:	80fb      	strh	r3, [r7, #6]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	80bb      	strh	r3, [r7, #4]
	if(referenceCode - voltageCode != 0)
 8001c80:	88ba      	ldrh	r2, [r7, #4]
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d03e      	beq.n	8001d06 <calculateTemperature+0x96>
	{
		uint32_t convert_R = (voltageCode * 100000)/(referenceCode - voltageCode);
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	4a29      	ldr	r2, [pc, #164]	; (8001d30 <calculateTemperature+0xc0>)
 8001c8c:	fb03 f202 	mul.w	r2, r3, r2
 8001c90:	88b9      	ldrh	r1, [r7, #4]
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	1acb      	subs	r3, r1, r3
 8001c96:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c9a:	60fb      	str	r3, [r7, #12]
		return 1.0 / ((1.0 / 298.15) - (log(10000.0 / convert_R) / 3435.0)) - 273.15;
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f7fe fbdd 	bl	800045c <__aeabi_ui2d>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	a11a      	add	r1, pc, #104	; (adr r1, 8001d10 <calculateTemperature+0xa0>)
 8001ca8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cac:	f7fe fd7a 	bl	80007a4 <__aeabi_ddiv>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f006 ff04 	bl	8008ac4 <log>
 8001cbc:	a316      	add	r3, pc, #88	; (adr r3, 8001d18 <calculateTemperature+0xa8>)
 8001cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc2:	f7fe fd6f 	bl	80007a4 <__aeabi_ddiv>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	a115      	add	r1, pc, #84	; (adr r1, 8001d20 <calculateTemperature+0xb0>)
 8001ccc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cd0:	f7fe fa86 	bl	80001e0 <__aeabi_dsub>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	f04f 0000 	mov.w	r0, #0
 8001cdc:	4915      	ldr	r1, [pc, #84]	; (8001d34 <calculateTemperature+0xc4>)
 8001cde:	f7fe fd61 	bl	80007a4 <__aeabi_ddiv>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	a30f      	add	r3, pc, #60	; (adr r3, 8001d28 <calculateTemperature+0xb8>)
 8001cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf0:	f7fe fa76 	bl	80001e0 <__aeabi_dsub>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4610      	mov	r0, r2
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	f7fe ff00 	bl	8000b00 <__aeabi_d2uiz>
 8001d00:	4603      	mov	r3, r0
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	e000      	b.n	8001d08 <calculateTemperature+0x98>
	}
	else
		return 0x00;
 8001d06:	2300      	movs	r3, #0


}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	00000000 	.word	0x00000000
 8001d14:	40c38800 	.word	0x40c38800
 8001d18:	00000000 	.word	0x00000000
 8001d1c:	40aad600 	.word	0x40aad600
 8001d20:	dcb5db83 	.word	0xdcb5db83
 8001d24:	3f6b79e1 	.word	0x3f6b79e1
 8001d28:	66666666 	.word	0x66666666
 8001d2c:	40711266 	.word	0x40711266
 8001d30:	000186a0 	.word	0x000186a0
 8001d34:	3ff00000 	.word	0x3ff00000

08001d38 <CAN_interrupt>:

void CAN_interrupt()
{
 8001d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d3c:	b086      	sub	sp, #24
 8001d3e:	af00      	add	r7, sp, #0

if (HAL_GetTick()>= last10 + 10)
 8001d40:	f000 ffa4 	bl	8002c8c <HAL_GetTick>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2200      	movs	r2, #0
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	617a      	str	r2, [r7, #20]
 8001d4c:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <CAN_interrupt+0xa8>)
 8001d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d52:	f112 080a 	adds.w	r8, r2, #10
 8001d56:	f143 0900 	adc.w	r9, r3, #0
 8001d5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4541      	cmp	r1, r8
 8001d62:	eb73 0309 	sbcs.w	r3, r3, r9
 8001d66:	d30c      	bcc.n	8001d82 <CAN_interrupt+0x4a>
		{
			CAN_100();
 8001d68:	f000 f90e 	bl	8001f88 <CAN_100>
			last10 = HAL_GetTick();
 8001d6c:	f000 ff8e 	bl	8002c8c <HAL_GetTick>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2200      	movs	r2, #0
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	60fa      	str	r2, [r7, #12]
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <CAN_interrupt+0xa8>)
 8001d7a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001d7e:	e9c3 1200 	strd	r1, r2, [r3]

		}
if (HAL_GetTick()>= last100 + 100)
 8001d82:	f000 ff83 	bl	8002c8c <HAL_GetTick>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2200      	movs	r2, #0
 8001d8a:	469a      	mov	sl, r3
 8001d8c:	4693      	mov	fp, r2
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <CAN_interrupt+0xac>)
 8001d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d94:	f112 0464 	adds.w	r4, r2, #100	; 0x64
 8001d98:	f143 0500 	adc.w	r5, r3, #0
 8001d9c:	45a2      	cmp	sl, r4
 8001d9e:	eb7b 0305 	sbcs.w	r3, fp, r5
 8001da2:	d318      	bcc.n	8001dd6 <CAN_interrupt+0x9e>
		{
			CAN_10(AMS2_databytes[8]);
 8001da4:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <CAN_interrupt+0xb0>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 f913 	bl	8001fd4 <CAN_10>

			HAL_GPIO_TogglePin(GPIOA, WDI_Pin);		// toggle watchdog
 8001dae:	2110      	movs	r1, #16
 8001db0:	480e      	ldr	r0, [pc, #56]	; (8001dec <CAN_interrupt+0xb4>)
 8001db2:	f001 ffd5 	bl	8003d60 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOC, LED_GN_Pin);	// toggle LED
 8001db6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dba:	480d      	ldr	r0, [pc, #52]	; (8001df0 <CAN_interrupt+0xb8>)
 8001dbc:	f001 ffd0 	bl	8003d60 <HAL_GPIO_TogglePin>
			last100 = HAL_GetTick();
 8001dc0:	f000 ff64 	bl	8002c8c <HAL_GetTick>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	603b      	str	r3, [r7, #0]
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <CAN_interrupt+0xac>)
 8001dce:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001dd2:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}
 8001dd6:	bf00      	nop
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001de0:	200002d0 	.word	0x200002d0
 8001de4:	200002d8 	.word	0x200002d8
 8001de8:	200002a0 	.word	0x200002a0
 8001dec:	40020000 	.word	0x40020000
 8001df0:	40020800 	.word	0x40020800

08001df4 <convertTemperature>:


void convertTemperature(uint8_t selTemp)		// sort temp
{
 8001df4:	b5b0      	push	{r4, r5, r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
*/

	//min und max Werte noch finden


	uint8_t indexOffset[12] = {9, 4, 11, 7, 6, 1, 0, 3, 10, 2, 5, 8};
 8001dfe:	4a2e      	ldr	r2, [pc, #184]	; (8001eb8 <convertTemperature+0xc4>)
 8001e00:	f107 0308 	add.w	r3, r7, #8
 8001e04:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	75fb      	strb	r3, [r7, #23]
 8001e0e:	e037      	b.n	8001e80 <convertTemperature+0x8c>
	{
			for(uint8_t j = 0; j < 3; j++)
 8001e10:	2300      	movs	r3, #0
 8001e12:	75bb      	strb	r3, [r7, #22]
 8001e14:	e02e      	b.n	8001e74 <convertTemperature+0x80>
			{
				temperature[k * NUM_CELLS_STACK + indexOffset[j + selTemp * 3]] = calculateTemperature(slaveGPIOs[j + k * 6], slaveGPIOs[5 + k * NUM_GPIO_STACK]);
 8001e16:	7db9      	ldrb	r1, [r7, #22]
 8001e18:	7dfa      	ldrb	r2, [r7, #23]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4413      	add	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	440b      	add	r3, r1
 8001e24:	4a25      	ldr	r2, [pc, #148]	; (8001ebc <convertTemperature+0xc8>)
 8001e26:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8001e2a:	7dfa      	ldrb	r2, [r7, #23]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	4413      	add	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	3305      	adds	r3, #5
 8001e36:	4a21      	ldr	r2, [pc, #132]	; (8001ebc <convertTemperature+0xc8>)
 8001e38:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8001e3c:	7dfa      	ldrb	r2, [r7, #23]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	461c      	mov	r4, r3
 8001e48:	7db9      	ldrb	r1, [r7, #22]
 8001e4a:	79fa      	ldrb	r2, [r7, #7]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	440b      	add	r3, r1
 8001e54:	3318      	adds	r3, #24
 8001e56:	443b      	add	r3, r7
 8001e58:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001e5c:	441c      	add	r4, r3
 8001e5e:	4629      	mov	r1, r5
 8001e60:	f7ff ff06 	bl	8001c70 <calculateTemperature>
 8001e64:	4603      	mov	r3, r0
 8001e66:	461a      	mov	r2, r3
 8001e68:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <convertTemperature+0xcc>)
 8001e6a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			for(uint8_t j = 0; j < 3; j++)
 8001e6e:	7dbb      	ldrb	r3, [r7, #22]
 8001e70:	3301      	adds	r3, #1
 8001e72:	75bb      	strb	r3, [r7, #22]
 8001e74:	7dbb      	ldrb	r3, [r7, #22]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d9cd      	bls.n	8001e16 <convertTemperature+0x22>
	for(uint8_t k = 0; k < NUM_STACK; k++)
 8001e7a:	7dfb      	ldrb	r3, [r7, #23]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	75fb      	strb	r3, [r7, #23]
 8001e80:	7dfb      	ldrb	r3, [r7, #23]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d0c4      	beq.n	8001e10 <convertTemperature+0x1c>
			}
	}

	if(selTemp == 3)
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d111      	bne.n	8001eb0 <convertTemperature+0xbc>
	{
		for(uint8_t k = 0; k < NUM_STACK; k++)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	757b      	strb	r3, [r7, #21]
 8001e90:	e00b      	b.n	8001eaa <convertTemperature+0xb6>
		{
			for(uint8_t i = 0; i < NUM_CELLS; i++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	753b      	strb	r3, [r7, #20]
 8001e96:	e002      	b.n	8001e9e <convertTemperature+0xaa>
 8001e98:	7d3b      	ldrb	r3, [r7, #20]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	753b      	strb	r3, [r7, #20]
 8001e9e:	7d3b      	ldrb	r3, [r7, #20]
 8001ea0:	2b0b      	cmp	r3, #11
 8001ea2:	d9f9      	bls.n	8001e98 <convertTemperature+0xa4>
		for(uint8_t k = 0; k < NUM_STACK; k++)
 8001ea4:	7d7b      	ldrb	r3, [r7, #21]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	757b      	strb	r3, [r7, #21]
 8001eaa:	7d7b      	ldrb	r3, [r7, #21]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <convertTemperature+0x9e>
				//printf(" Stack %d Temperature %d = %d degC \r\n", k, i, temperature[k * NUM_STACK + i]);
			}
		}
	}

}
 8001eb0:	bf00      	nop
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb8:	08008eb8 	.word	0x08008eb8
 8001ebc:	2000027c 	.word	0x2000027c
 8001ec0:	20000288 	.word	0x20000288

08001ec4 <CAN_TX>:

uint32_t RxFifo;

	// transmit CAN Message
void CAN_TX(CAN_HandleTypeDef hcan, CAN_TxHeaderTypeDef TxHeader, uint8_t* TxData)
{
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	b5b0      	push	{r4, r5, r7, lr}
 8001ec8:	b090      	sub	sp, #64	; 0x40
 8001eca:	af0e      	add	r7, sp, #56	; 0x38
 8001ecc:	f107 0418 	add.w	r4, r7, #24
 8001ed0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t TxMailbox;
	if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8001eda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001edc:	f107 0018 	add.w	r0, r7, #24
 8001ee0:	f001 f841 	bl	8002f66 <HAL_CAN_AddTxMessage>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d018      	beq.n	8001f1c <CAN_TX+0x58>
	{
		CAN_TX(hcan, TxHeader, TxData);		//retry when failed
 8001eea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eec:	930c      	str	r3, [sp, #48]	; 0x30
 8001eee:	ad06      	add	r5, sp, #24
 8001ef0:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001ef4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001efc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f00:	466d      	mov	r5, sp
 8001f02:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001f06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f12:	f107 0318 	add.w	r3, r7, #24
 8001f16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f18:	f7ff ffd4 	bl	8001ec4 <CAN_TX>
	}
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001f26:	b004      	add	sp, #16
 8001f28:	4770      	bx	lr
	...

08001f2c <CAN_RX>:

	// receive CAN Message
void CAN_RX(CAN_HandleTypeDef hcan)
{
 8001f2c:	b084      	sub	sp, #16
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b08a      	sub	sp, #40	; 0x28
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8001f38:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];


	if (HAL_CAN_GetRxMessage(&hcan, RxFifo, &RxHeader, RxData) != HAL_OK)
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <CAN_RX+0x50>)
 8001f3e:	6819      	ldr	r1, [r3, #0]
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	f107 020c 	add.w	r2, r7, #12
 8001f46:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001f4a:	f001 f8db 	bl	8003104 <HAL_CAN_GetRxMessage>
	{

	}

	if( RxHeader.StdId == 0x500)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001f54:	d10b      	bne.n	8001f6e <CAN_RX+0x42>
	{

		DIC0_databytes[8] = RxData[8];
 8001f56:	7b3a      	ldrb	r2, [r7, #12]
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <CAN_RX+0x54>)
 8001f5a:	721a      	strb	r2, [r3, #8]

		AIR_Logic(DIC0_databytes[0], AMS3_databytes[0], DIC0_databytes[1]);
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <CAN_RX+0x54>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	4a08      	ldr	r2, [pc, #32]	; (8001f84 <CAN_RX+0x58>)
 8001f62:	7811      	ldrb	r1, [r2, #0]
 8001f64:	4a06      	ldr	r2, [pc, #24]	; (8001f80 <CAN_RX+0x54>)
 8001f66:	7852      	ldrb	r2, [r2, #1]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 f9db 	bl	8002324 <AIR_Logic>

	}

	// hier kann man weitere Nachrichten zum Empfangen hinzufügen

}
 8001f6e:	bf00      	nop
 8001f70:	3728      	adds	r7, #40	; 0x28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f78:	b004      	add	sp, #16
 8001f7a:	4770      	bx	lr
 8001f7c:	20000304 	.word	0x20000304
 8001f80:	200002fc 	.word	0x200002fc
 8001f84:	200002ec 	.word	0x200002ec

08001f88 <CAN_100>:




void CAN_100()		// CAN Messages transmitted with 100 Hz
{
 8001f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f8a:	b08f      	sub	sp, #60	; 0x3c
 8001f8c:	af0e      	add	r7, sp, #56	; 0x38

	CAN_TX(hcan1, AMS0_header, AMS0_databytes);
 8001f8e:	4e0e      	ldr	r6, [pc, #56]	; (8001fc8 <CAN_100+0x40>)
 8001f90:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <CAN_100+0x44>)
 8001f92:	930c      	str	r3, [sp, #48]	; 0x30
 8001f94:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <CAN_100+0x48>)
 8001f96:	ac06      	add	r4, sp, #24
 8001f98:	461d      	mov	r5, r3
 8001f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001fa2:	e884 0003 	stmia.w	r4, {r0, r1}
 8001fa6:	466d      	mov	r5, sp
 8001fa8:	f106 0410 	add.w	r4, r6, #16
 8001fac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fb8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001fbc:	f7ff ff82 	bl	8001ec4 <CAN_TX>
}
 8001fc0:	bf00      	nop
 8001fc2:	3704      	adds	r7, #4
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fc8:	20000308 	.word	0x20000308
 8001fcc:	200002e4 	.word	0x200002e4
 8001fd0:	20000004 	.word	0x20000004

08001fd4 <CAN_10>:

void CAN_10(uint8_t bms_data[])		// CAN Messages transmitted with 10 Hz
{
 8001fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fd6:	b091      	sub	sp, #68	; 0x44
 8001fd8:	af0e      	add	r7, sp, #56	; 0x38
 8001fda:	6078      	str	r0, [r7, #4]
	CAN_TX(hcan1, AMS1_header, AMS1_databytes);
 8001fdc:	4e27      	ldr	r6, [pc, #156]	; (800207c <CAN_10+0xa8>)
 8001fde:	4b28      	ldr	r3, [pc, #160]	; (8002080 <CAN_10+0xac>)
 8001fe0:	930c      	str	r3, [sp, #48]	; 0x30
 8001fe2:	4b28      	ldr	r3, [pc, #160]	; (8002084 <CAN_10+0xb0>)
 8001fe4:	ac06      	add	r4, sp, #24
 8001fe6:	461d      	mov	r5, r3
 8001fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fec:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ff0:	e884 0003 	stmia.w	r4, {r0, r1}
 8001ff4:	466d      	mov	r5, sp
 8001ff6:	f106 0410 	add.w	r4, r6, #16
 8001ffa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ffc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ffe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002002:	e885 0003 	stmia.w	r5, {r0, r1}
 8002006:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800200a:	f7ff ff5b 	bl	8001ec4 <CAN_TX>
	CAN_TX(hcan1, AMS2_header, bms_data);
 800200e:	4e1b      	ldr	r6, [pc, #108]	; (800207c <CAN_10+0xa8>)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	930c      	str	r3, [sp, #48]	; 0x30
 8002014:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <CAN_10+0xb4>)
 8002016:	ac06      	add	r4, sp, #24
 8002018:	461d      	mov	r5, r3
 800201a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800201c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800201e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002022:	e884 0003 	stmia.w	r4, {r0, r1}
 8002026:	466d      	mov	r5, sp
 8002028:	f106 0410 	add.w	r4, r6, #16
 800202c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002030:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002034:	e885 0003 	stmia.w	r5, {r0, r1}
 8002038:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800203c:	f7ff ff42 	bl	8001ec4 <CAN_TX>
	CAN_TX(hcan1, AMS3_header, AMS3_databytes);
 8002040:	4e0e      	ldr	r6, [pc, #56]	; (800207c <CAN_10+0xa8>)
 8002042:	4b12      	ldr	r3, [pc, #72]	; (800208c <CAN_10+0xb8>)
 8002044:	930c      	str	r3, [sp, #48]	; 0x30
 8002046:	4b12      	ldr	r3, [pc, #72]	; (8002090 <CAN_10+0xbc>)
 8002048:	ac06      	add	r4, sp, #24
 800204a:	461d      	mov	r5, r3
 800204c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800204e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002050:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002054:	e884 0003 	stmia.w	r4, {r0, r1}
 8002058:	466d      	mov	r5, sp
 800205a:	f106 0410 	add.w	r4, r6, #16
 800205e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002062:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002066:	e885 0003 	stmia.w	r5, {r0, r1}
 800206a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800206e:	f7ff ff29 	bl	8001ec4 <CAN_TX>
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800207a:	bf00      	nop
 800207c:	20000308 	.word	0x20000308
 8002080:	200002f4 	.word	0x200002f4
 8002084:	2000001c 	.word	0x2000001c
 8002088:	20000034 	.word	0x20000034
 800208c:	200002ec 	.word	0x200002ec
 8002090:	2000004c 	.word	0x2000004c

08002094 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */
AMS3_databytes[0]=0;
 8002098:	4b28      	ldr	r3, [pc, #160]	; (800213c <MX_CAN1_Init+0xa8>)
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
AMS3_databytes[1]=0;
 800209e:	4b27      	ldr	r3, [pc, #156]	; (800213c <MX_CAN1_Init+0xa8>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	705a      	strb	r2, [r3, #1]
AMS3_databytes[2]=0;
 80020a4:	4b25      	ldr	r3, [pc, #148]	; (800213c <MX_CAN1_Init+0xa8>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	709a      	strb	r2, [r3, #2]
AMS3_databytes[3]=0;
 80020aa:	4b24      	ldr	r3, [pc, #144]	; (800213c <MX_CAN1_Init+0xa8>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	70da      	strb	r2, [r3, #3]
AMS3_databytes[4]=0;
 80020b0:	4b22      	ldr	r3, [pc, #136]	; (800213c <MX_CAN1_Init+0xa8>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	711a      	strb	r2, [r3, #4]
AMS3_databytes[5]=0;
 80020b6:	4b21      	ldr	r3, [pc, #132]	; (800213c <MX_CAN1_Init+0xa8>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	715a      	strb	r2, [r3, #5]
AMS3_databytes[6]=0;
 80020bc:	4b1f      	ldr	r3, [pc, #124]	; (800213c <MX_CAN1_Init+0xa8>)
 80020be:	2200      	movs	r2, #0
 80020c0:	719a      	strb	r2, [r3, #6]
AMS3_databytes[7]=0;
 80020c2:	4b1e      	ldr	r3, [pc, #120]	; (800213c <MX_CAN1_Init+0xa8>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	71da      	strb	r2, [r3, #7]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80020c8:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <MX_CAN1_Init+0xac>)
 80020ca:	4a1e      	ldr	r2, [pc, #120]	; (8002144 <MX_CAN1_Init+0xb0>)
 80020cc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80020ce:	4b1c      	ldr	r3, [pc, #112]	; (8002140 <MX_CAN1_Init+0xac>)
 80020d0:	2204      	movs	r2, #4
 80020d2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80020d4:	4b1a      	ldr	r3, [pc, #104]	; (8002140 <MX_CAN1_Init+0xac>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80020da:	4b19      	ldr	r3, [pc, #100]	; (8002140 <MX_CAN1_Init+0xac>)
 80020dc:	2200      	movs	r2, #0
 80020de:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 80020e0:	4b17      	ldr	r3, [pc, #92]	; (8002140 <MX_CAN1_Init+0xac>)
 80020e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020e6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80020e8:	4b15      	ldr	r3, [pc, #84]	; (8002140 <MX_CAN1_Init+0xac>)
 80020ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80020ee:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80020f0:	4b13      	ldr	r3, [pc, #76]	; (8002140 <MX_CAN1_Init+0xac>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80020f6:	4b12      	ldr	r3, [pc, #72]	; (8002140 <MX_CAN1_Init+0xac>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80020fc:	4b10      	ldr	r3, [pc, #64]	; (8002140 <MX_CAN1_Init+0xac>)
 80020fe:	2200      	movs	r2, #0
 8002100:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002102:	4b0f      	ldr	r3, [pc, #60]	; (8002140 <MX_CAN1_Init+0xac>)
 8002104:	2200      	movs	r2, #0
 8002106:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002108:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <MX_CAN1_Init+0xac>)
 800210a:	2200      	movs	r2, #0
 800210c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800210e:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <MX_CAN1_Init+0xac>)
 8002110:	2200      	movs	r2, #0
 8002112:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002114:	480a      	ldr	r0, [pc, #40]	; (8002140 <MX_CAN1_Init+0xac>)
 8002116:	f000 fde7 	bl	8002ce8 <HAL_CAN_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_CAN1_Init+0x90>
  {
    Error_Handler();
 8002120:	f000 fa71 	bl	8002606 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8002124:	2102      	movs	r1, #2
 8002126:	4806      	ldr	r0, [pc, #24]	; (8002140 <MX_CAN1_Init+0xac>)
 8002128:	f001 f90d 	bl	8003346 <HAL_CAN_ActivateNotification>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_CAN1_Init+0xa2>
    {
  	  Error_Handler();
 8002132:	f000 fa68 	bl	8002606 <Error_Handler>
    }
  /* USER CODE END CAN1_Init 2 */

}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200002ec 	.word	0x200002ec
 8002140:	20000308 	.word	0x20000308
 8002144:	40006400 	.word	0x40006400

08002148 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800214c:	4b17      	ldr	r3, [pc, #92]	; (80021ac <MX_CAN2_Init+0x64>)
 800214e:	4a18      	ldr	r2, [pc, #96]	; (80021b0 <MX_CAN2_Init+0x68>)
 8002150:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 4;
 8002152:	4b16      	ldr	r3, [pc, #88]	; (80021ac <MX_CAN2_Init+0x64>)
 8002154:	2204      	movs	r2, #4
 8002156:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002158:	4b14      	ldr	r3, [pc, #80]	; (80021ac <MX_CAN2_Init+0x64>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800215e:	4b13      	ldr	r3, [pc, #76]	; (80021ac <MX_CAN2_Init+0x64>)
 8002160:	2200      	movs	r2, #0
 8002162:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_3TQ;
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <MX_CAN2_Init+0x64>)
 8002166:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800216a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800216c:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <MX_CAN2_Init+0x64>)
 800216e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002172:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002174:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <MX_CAN2_Init+0x64>)
 8002176:	2200      	movs	r2, #0
 8002178:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800217a:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <MX_CAN2_Init+0x64>)
 800217c:	2200      	movs	r2, #0
 800217e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002180:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <MX_CAN2_Init+0x64>)
 8002182:	2200      	movs	r2, #0
 8002184:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <MX_CAN2_Init+0x64>)
 8002188:	2200      	movs	r2, #0
 800218a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800218c:	4b07      	ldr	r3, [pc, #28]	; (80021ac <MX_CAN2_Init+0x64>)
 800218e:	2200      	movs	r2, #0
 8002190:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <MX_CAN2_Init+0x64>)
 8002194:	2200      	movs	r2, #0
 8002196:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002198:	4804      	ldr	r0, [pc, #16]	; (80021ac <MX_CAN2_Init+0x64>)
 800219a:	f000 fda5 	bl	8002ce8 <HAL_CAN_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80021a4:	f000 fa2f 	bl	8002606 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000330 	.word	0x20000330
 80021b0:	40006800 	.word	0x40006800

080021b4 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08c      	sub	sp, #48	; 0x30
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 031c 	add.w	r3, r7, #28
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a4f      	ldr	r2, [pc, #316]	; (8002310 <HAL_CAN_MspInit+0x15c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d146      	bne.n	8002264 <HAL_CAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80021d6:	4b4f      	ldr	r3, [pc, #316]	; (8002314 <HAL_CAN_MspInit+0x160>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	3301      	adds	r3, #1
 80021dc:	4a4d      	ldr	r2, [pc, #308]	; (8002314 <HAL_CAN_MspInit+0x160>)
 80021de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80021e0:	4b4c      	ldr	r3, [pc, #304]	; (8002314 <HAL_CAN_MspInit+0x160>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d10d      	bne.n	8002204 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80021e8:	2300      	movs	r3, #0
 80021ea:	61bb      	str	r3, [r7, #24]
 80021ec:	4b4a      	ldr	r3, [pc, #296]	; (8002318 <HAL_CAN_MspInit+0x164>)
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	4a49      	ldr	r2, [pc, #292]	; (8002318 <HAL_CAN_MspInit+0x164>)
 80021f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021f6:	6413      	str	r3, [r2, #64]	; 0x40
 80021f8:	4b47      	ldr	r3, [pc, #284]	; (8002318 <HAL_CAN_MspInit+0x164>)
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002200:	61bb      	str	r3, [r7, #24]
 8002202:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	4b43      	ldr	r3, [pc, #268]	; (8002318 <HAL_CAN_MspInit+0x164>)
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	4a42      	ldr	r2, [pc, #264]	; (8002318 <HAL_CAN_MspInit+0x164>)
 800220e:	f043 0302 	orr.w	r3, r3, #2
 8002212:	6313      	str	r3, [r2, #48]	; 0x30
 8002214:	4b40      	ldr	r3, [pc, #256]	; (8002318 <HAL_CAN_MspInit+0x164>)
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002220:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222e:	2303      	movs	r3, #3
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002232:	2309      	movs	r3, #9
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002236:	f107 031c 	add.w	r3, r7, #28
 800223a:	4619      	mov	r1, r3
 800223c:	4837      	ldr	r0, [pc, #220]	; (800231c <HAL_CAN_MspInit+0x168>)
 800223e:	f001 fbd9 	bl	80039f4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2100      	movs	r1, #0
 8002246:	2013      	movs	r0, #19
 8002248:	f001 fb9d 	bl	8003986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800224c:	2013      	movs	r0, #19
 800224e:	f001 fbb6 	bl	80039be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002252:	2200      	movs	r2, #0
 8002254:	2100      	movs	r1, #0
 8002256:	2014      	movs	r0, #20
 8002258:	f001 fb95 	bl	8003986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800225c:	2014      	movs	r0, #20
 800225e:	f001 fbae 	bl	80039be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8002262:	e050      	b.n	8002306 <HAL_CAN_MspInit+0x152>
  else if(canHandle->Instance==CAN2)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a2d      	ldr	r2, [pc, #180]	; (8002320 <HAL_CAN_MspInit+0x16c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d14b      	bne.n	8002306 <HAL_CAN_MspInit+0x152>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	4b29      	ldr	r3, [pc, #164]	; (8002318 <HAL_CAN_MspInit+0x164>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	4a28      	ldr	r2, [pc, #160]	; (8002318 <HAL_CAN_MspInit+0x164>)
 8002278:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800227c:	6413      	str	r3, [r2, #64]	; 0x40
 800227e:	4b26      	ldr	r3, [pc, #152]	; (8002318 <HAL_CAN_MspInit+0x164>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800228a:	4b22      	ldr	r3, [pc, #136]	; (8002314 <HAL_CAN_MspInit+0x160>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	3301      	adds	r3, #1
 8002290:	4a20      	ldr	r2, [pc, #128]	; (8002314 <HAL_CAN_MspInit+0x160>)
 8002292:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002294:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <HAL_CAN_MspInit+0x160>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d10d      	bne.n	80022b8 <HAL_CAN_MspInit+0x104>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_CAN_MspInit+0x164>)
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	4a1c      	ldr	r2, [pc, #112]	; (8002318 <HAL_CAN_MspInit+0x164>)
 80022a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022aa:	6413      	str	r3, [r2, #64]	; 0x40
 80022ac:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <HAL_CAN_MspInit+0x164>)
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b8:	2300      	movs	r3, #0
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	4b16      	ldr	r3, [pc, #88]	; (8002318 <HAL_CAN_MspInit+0x164>)
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	4a15      	ldr	r2, [pc, #84]	; (8002318 <HAL_CAN_MspInit+0x164>)
 80022c2:	f043 0302 	orr.w	r3, r3, #2
 80022c6:	6313      	str	r3, [r2, #48]	; 0x30
 80022c8:	4b13      	ldr	r3, [pc, #76]	; (8002318 <HAL_CAN_MspInit+0x164>)
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	60bb      	str	r3, [r7, #8]
 80022d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80022d4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80022d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e2:	2303      	movs	r3, #3
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80022e6:	2309      	movs	r3, #9
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ea:	f107 031c 	add.w	r3, r7, #28
 80022ee:	4619      	mov	r1, r3
 80022f0:	480a      	ldr	r0, [pc, #40]	; (800231c <HAL_CAN_MspInit+0x168>)
 80022f2:	f001 fb7f 	bl	80039f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80022f6:	2200      	movs	r2, #0
 80022f8:	2100      	movs	r1, #0
 80022fa:	2040      	movs	r0, #64	; 0x40
 80022fc:	f001 fb43 	bl	8003986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002300:	2040      	movs	r0, #64	; 0x40
 8002302:	f001 fb5c 	bl	80039be <HAL_NVIC_EnableIRQ>
}
 8002306:	bf00      	nop
 8002308:	3730      	adds	r7, #48	; 0x30
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40006400 	.word	0x40006400
 8002314:	20000358 	.word	0x20000358
 8002318:	40023800 	.word	0x40023800
 800231c:	40020400 	.word	0x40020400
 8002320:	40006800 	.word	0x40006800

08002324 <AIR_Logic>:
	// returns 0 if open
	return HAL_GPIO_ReadPin(GPIOC,AIR_N_INT_Pin);
}

void AIR_Logic(uint8_t ts_on, uint8_t ts_ready, uint8_t ts_start)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
 800232e:	460b      	mov	r3, r1
 8002330:	71bb      	strb	r3, [r7, #6]
 8002332:	4613      	mov	r3, r2
 8002334:	717b      	strb	r3, [r7, #5]

	 if (error == 0)
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <AIR_Logic+0x4c>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d113      	bne.n	8002366 <AIR_Logic+0x42>
	 {
		 if (ts_on>= 1)
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d007      	beq.n	8002354 <AIR_Logic+0x30>
		 {

			 HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_SET);
 8002344:	2201      	movs	r2, #1
 8002346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800234a:	480a      	ldr	r0, [pc, #40]	; (8002374 <AIR_Logic+0x50>)
 800234c:	f001 fcf0 	bl	8003d30 <HAL_GPIO_WritePin>
			 ts_ready = 1;
 8002350:	2301      	movs	r3, #1
 8002352:	71bb      	strb	r3, [r7, #6]

		 }

		 if (ts_start>= 1)
 8002354:	797b      	ldrb	r3, [r7, #5]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d005      	beq.n	8002366 <AIR_Logic+0x42>
		 {
			 HAL_GPIO_WritePin(GPIOC,AIR_P_SW_Pin, GPIO_PIN_SET);
 800235a:	2201      	movs	r2, #1
 800235c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002360:	4805      	ldr	r0, [pc, #20]	; (8002378 <AIR_Logic+0x54>)
 8002362:	f001 fce5 	bl	8003d30 <HAL_GPIO_WritePin>
		 }
	}
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	2000035c 	.word	0x2000035c
 8002374:	40020400 	.word	0x40020400
 8002378:	40020800 	.word	0x40020800

0800237c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08a      	sub	sp, #40	; 0x28
 8002380:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
 8002390:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	613b      	str	r3, [r7, #16]
 8002396:	4b5e      	ldr	r3, [pc, #376]	; (8002510 <MX_GPIO_Init+0x194>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4a5d      	ldr	r2, [pc, #372]	; (8002510 <MX_GPIO_Init+0x194>)
 800239c:	f043 0304 	orr.w	r3, r3, #4
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4b5b      	ldr	r3, [pc, #364]	; (8002510 <MX_GPIO_Init+0x194>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	4b57      	ldr	r3, [pc, #348]	; (8002510 <MX_GPIO_Init+0x194>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a56      	ldr	r2, [pc, #344]	; (8002510 <MX_GPIO_Init+0x194>)
 80023b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b54      	ldr	r3, [pc, #336]	; (8002510 <MX_GPIO_Init+0x194>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	4b50      	ldr	r3, [pc, #320]	; (8002510 <MX_GPIO_Init+0x194>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a4f      	ldr	r2, [pc, #316]	; (8002510 <MX_GPIO_Init+0x194>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b4d      	ldr	r3, [pc, #308]	; (8002510 <MX_GPIO_Init+0x194>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	4b49      	ldr	r3, [pc, #292]	; (8002510 <MX_GPIO_Init+0x194>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a48      	ldr	r2, [pc, #288]	; (8002510 <MX_GPIO_Init+0x194>)
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b46      	ldr	r3, [pc, #280]	; (8002510 <MX_GPIO_Init+0x194>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	603b      	str	r3, [r7, #0]
 8002406:	4b42      	ldr	r3, [pc, #264]	; (8002510 <MX_GPIO_Init+0x194>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	4a41      	ldr	r2, [pc, #260]	; (8002510 <MX_GPIO_Init+0x194>)
 800240c:	f043 0308 	orr.w	r3, r3, #8
 8002410:	6313      	str	r3, [r2, #48]	; 0x30
 8002412:	4b3f      	ldr	r3, [pc, #252]	; (8002510 <MX_GPIO_Init+0x194>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GN_Pin|LED_YW_Pin|LED_RD_Pin|AIR_P_SW_Pin, GPIO_PIN_RESET);
 800241e:	2200      	movs	r2, #0
 8002420:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8002424:	483b      	ldr	r0, [pc, #236]	; (8002514 <MX_GPIO_Init+0x198>)
 8002426:	f001 fc83 	bl	8003d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WDI_Pin|SPI3_CS_Pin, GPIO_PIN_RESET);
 800242a:	2200      	movs	r2, #0
 800242c:	f248 0110 	movw	r1, #32784	; 0x8010
 8002430:	4839      	ldr	r0, [pc, #228]	; (8002518 <MX_GPIO_Init+0x19c>)
 8002432:	f001 fc7d 	bl	8003d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SC_OPEN_GPIO_Port, SC_OPEN_Pin, GPIO_PIN_SET);
 8002436:	2201      	movs	r2, #1
 8002438:	2180      	movs	r1, #128	; 0x80
 800243a:	4837      	ldr	r0, [pc, #220]	; (8002518 <MX_GPIO_Init+0x19c>)
 800243c:	f001 fc78 	bl	8003d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TS_ACTIVATE_GPIO_Port, TS_ACTIVATE_Pin, GPIO_PIN_RESET);
 8002440:	2200      	movs	r2, #0
 8002442:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002446:	4835      	ldr	r0, [pc, #212]	; (800251c <MX_GPIO_Init+0x1a0>)
 8002448:	f001 fc72 	bl	8003d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_GN_Pin|LED_YW_Pin|LED_RD_Pin|AIR_P_SW_Pin;
 800244c:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8002450:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002452:	2301      	movs	r3, #1
 8002454:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245a:	2300      	movs	r3, #0
 800245c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800245e:	f107 0314 	add.w	r3, r7, #20
 8002462:	4619      	mov	r1, r3
 8002464:	482b      	ldr	r0, [pc, #172]	; (8002514 <MX_GPIO_Init+0x198>)
 8002466:	f001 fac5 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = V_VEHI_Pin|V_ACCU_Pin|SC_CLOSING_Pin|SC_STATE_Pin
 800246a:	23f3      	movs	r3, #243	; 0xf3
 800246c:	617b      	str	r3, [r7, #20]
                          |AIR_N_ACT_Pin|AIR_N_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	4619      	mov	r1, r3
 800247c:	4825      	ldr	r0, [pc, #148]	; (8002514 <MX_GPIO_Init+0x198>)
 800247e:	f001 fab9 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = IMD_STATE_Pin|IMD_SAFE_Pin|SC_OPENING_Pin;
 8002482:	2368      	movs	r3, #104	; 0x68
 8002484:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002486:	2300      	movs	r3, #0
 8002488:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248e:	f107 0314 	add.w	r3, r7, #20
 8002492:	4619      	mov	r1, r3
 8002494:	4820      	ldr	r0, [pc, #128]	; (8002518 <MX_GPIO_Init+0x19c>)
 8002496:	f001 faad 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = WDI_Pin|SC_OPEN_Pin|SPI3_CS_Pin;
 800249a:	f248 0390 	movw	r3, #32912	; 0x8090
 800249e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a0:	2301      	movs	r3, #1
 80024a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a8:	2300      	movs	r3, #0
 80024aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ac:	f107 0314 	add.w	r3, r7, #20
 80024b0:	4619      	mov	r1, r3
 80024b2:	4819      	ldr	r0, [pc, #100]	; (8002518 <MX_GPIO_Init+0x19c>)
 80024b4:	f001 fa9e 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TS_ACTIVATE_Pin;
 80024b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024be:	2301      	movs	r3, #1
 80024c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TS_ACTIVATE_GPIO_Port, &GPIO_InitStruct);
 80024ca:	f107 0314 	add.w	r3, r7, #20
 80024ce:	4619      	mov	r1, r3
 80024d0:	4812      	ldr	r0, [pc, #72]	; (800251c <MX_GPIO_Init+0x1a0>)
 80024d2:	f001 fa8f 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DANGER_V_Pin|AIR_P_ACT_Pin|AIR_P_INT_Pin;
 80024d6:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 80024da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024dc:	2300      	movs	r3, #0
 80024de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	4619      	mov	r1, r3
 80024ea:	480c      	ldr	r0, [pc, #48]	; (800251c <MX_GPIO_Init+0x1a0>)
 80024ec:	f001 fa82 	bl	80039f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PCHRG_ACT_Pin;
 80024f0:	2304      	movs	r3, #4
 80024f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PCHRG_ACT_GPIO_Port, &GPIO_InitStruct);
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	4619      	mov	r1, r3
 8002502:	4807      	ldr	r0, [pc, #28]	; (8002520 <MX_GPIO_Init+0x1a4>)
 8002504:	f001 fa76 	bl	80039f4 <HAL_GPIO_Init>

}
 8002508:	bf00      	nop
 800250a:	3728      	adds	r7, #40	; 0x28
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40023800 	.word	0x40023800
 8002514:	40020800 	.word	0x40020800
 8002518:	40020000 	.word	0x40020000
 800251c:	40020400 	.word	0x40020400
 8002520:	40020c00 	.word	0x40020c00

08002524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002528:	f000 fb4c 	bl	8002bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800252c:	f000 f824 	bl	8002578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002530:	f7ff ff24 	bl	800237c <MX_GPIO_Init>
  MX_SPI3_Init();
 8002534:	f000 f86c 	bl	8002610 <MX_SPI3_Init>
  MX_TIM2_Init();
 8002538:	f000 fa24 	bl	8002984 <MX_TIM2_Init>
  MX_CAN1_Init();
 800253c:	f7ff fdaa 	bl	8002094 <MX_CAN1_Init>
  MX_CAN2_Init();
 8002540:	f7ff fe02 	bl	8002148 <MX_CAN2_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002544:	f000 fa90 	bl	8002a68 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  // Start timer
  HAL_TIM_Base_Start_IT(&htim2);
 8002548:	4809      	ldr	r0, [pc, #36]	; (8002570 <main+0x4c>)
 800254a:	f002 ff03 	bl	8005354 <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan1);
 800254e:	4809      	ldr	r0, [pc, #36]	; (8002574 <main+0x50>)
 8002550:	f000 fcc5 	bl	8002ede <HAL_CAN_Start>
  BMS_init();
 8002554:	f7ff f9c6 	bl	80018e4 <BMS_init>





    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8002558:	2102      	movs	r1, #2
 800255a:	4806      	ldr	r0, [pc, #24]	; (8002574 <main+0x50>)
 800255c:	f000 fef3 	bl	8003346 <HAL_CAN_ActivateNotification>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <main+0x46>
    {
  	  Error_Handler();
 8002566:	f000 f84e 	bl	8002606 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 BMS();
 800256a:	f7ff f9c1 	bl	80018f0 <BMS>
 800256e:	e7fc      	b.n	800256a <main+0x46>
 8002570:	200003bc 	.word	0x200003bc
 8002574:	20000308 	.word	0x20000308

08002578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b092      	sub	sp, #72	; 0x48
 800257c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800257e:	f107 0318 	add.w	r3, r7, #24
 8002582:	2230      	movs	r2, #48	; 0x30
 8002584:	2100      	movs	r1, #0
 8002586:	4618      	mov	r0, r3
 8002588:	f004 fc0f 	bl	8006daa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800258c:	1d3b      	adds	r3, r7, #4
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	605a      	str	r2, [r3, #4]
 8002594:	609a      	str	r2, [r3, #8]
 8002596:	60da      	str	r2, [r3, #12]
 8002598:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800259a:	2302      	movs	r3, #2
 800259c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800259e:	2301      	movs	r3, #1
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025a2:	2310      	movs	r3, #16
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025a6:	2302      	movs	r3, #2
 80025a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025aa:	2300      	movs	r3, #0
 80025ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 80025ae:	2308      	movs	r3, #8
 80025b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 80025b2:	23c0      	movs	r3, #192	; 0xc0
 80025b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80025b6:	2304      	movs	r3, #4
 80025b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80025ba:	2308      	movs	r3, #8
 80025bc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025be:	f107 0318 	add.w	r3, r7, #24
 80025c2:	4618      	mov	r0, r3
 80025c4:	f001 fd02 	bl	8003fcc <HAL_RCC_OscConfig>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80025ce:	f000 f81a 	bl	8002606 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025d2:	230f      	movs	r3, #15
 80025d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025d6:	2302      	movs	r3, #2
 80025d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80025ea:	1d3b      	adds	r3, r7, #4
 80025ec:	2103      	movs	r1, #3
 80025ee:	4618      	mov	r0, r3
 80025f0:	f001 ff40 	bl	8004474 <HAL_RCC_ClockConfig>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <SystemClock_Config+0x86>
  {
    Error_Handler();
 80025fa:	f000 f804 	bl	8002606 <Error_Handler>
  }
}
 80025fe:	bf00      	nop
 8002600:	3748      	adds	r7, #72	; 0x48
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800260a:	b672      	cpsid	i
}
 800260c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800260e:	e7fe      	b.n	800260e <Error_Handler+0x8>

08002610 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002614:	4b17      	ldr	r3, [pc, #92]	; (8002674 <MX_SPI3_Init+0x64>)
 8002616:	4a18      	ldr	r2, [pc, #96]	; (8002678 <MX_SPI3_Init+0x68>)
 8002618:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800261a:	4b16      	ldr	r3, [pc, #88]	; (8002674 <MX_SPI3_Init+0x64>)
 800261c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002620:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002622:	4b14      	ldr	r3, [pc, #80]	; (8002674 <MX_SPI3_Init+0x64>)
 8002624:	2200      	movs	r2, #0
 8002626:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002628:	4b12      	ldr	r3, [pc, #72]	; (8002674 <MX_SPI3_Init+0x64>)
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800262e:	4b11      	ldr	r3, [pc, #68]	; (8002674 <MX_SPI3_Init+0x64>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002634:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <MX_SPI3_Init+0x64>)
 8002636:	2200      	movs	r2, #0
 8002638:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <MX_SPI3_Init+0x64>)
 800263c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002640:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002642:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <MX_SPI3_Init+0x64>)
 8002644:	2220      	movs	r2, #32
 8002646:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002648:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <MX_SPI3_Init+0x64>)
 800264a:	2200      	movs	r2, #0
 800264c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <MX_SPI3_Init+0x64>)
 8002650:	2200      	movs	r2, #0
 8002652:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002654:	4b07      	ldr	r3, [pc, #28]	; (8002674 <MX_SPI3_Init+0x64>)
 8002656:	2200      	movs	r2, #0
 8002658:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <MX_SPI3_Init+0x64>)
 800265c:	220a      	movs	r2, #10
 800265e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002660:	4804      	ldr	r0, [pc, #16]	; (8002674 <MX_SPI3_Init+0x64>)
 8002662:	f002 f8b9 	bl	80047d8 <HAL_SPI_Init>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800266c:	f7ff ffcb 	bl	8002606 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002670:	bf00      	nop
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000360 	.word	0x20000360
 8002678:	40003c00 	.word	0x40003c00

0800267c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b08a      	sub	sp, #40	; 0x28
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	605a      	str	r2, [r3, #4]
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	60da      	str	r2, [r3, #12]
 8002692:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a19      	ldr	r2, [pc, #100]	; (8002700 <HAL_SPI_MspInit+0x84>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d12c      	bne.n	80026f8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	4b18      	ldr	r3, [pc, #96]	; (8002704 <HAL_SPI_MspInit+0x88>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	4a17      	ldr	r2, [pc, #92]	; (8002704 <HAL_SPI_MspInit+0x88>)
 80026a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ac:	6413      	str	r3, [r2, #64]	; 0x40
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <HAL_SPI_MspInit+0x88>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	4b11      	ldr	r3, [pc, #68]	; (8002704 <HAL_SPI_MspInit+0x88>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	4a10      	ldr	r2, [pc, #64]	; (8002704 <HAL_SPI_MspInit+0x88>)
 80026c4:	f043 0304 	orr.w	r3, r3, #4
 80026c8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ca:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <HAL_SPI_MspInit+0x88>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80026d6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80026da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026dc:	2302      	movs	r3, #2
 80026de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e4:	2303      	movs	r3, #3
 80026e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026e8:	2306      	movs	r3, #6
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ec:	f107 0314 	add.w	r3, r7, #20
 80026f0:	4619      	mov	r1, r3
 80026f2:	4805      	ldr	r0, [pc, #20]	; (8002708 <HAL_SPI_MspInit+0x8c>)
 80026f4:	f001 f97e 	bl	80039f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80026f8:	bf00      	nop
 80026fa:	3728      	adds	r7, #40	; 0x28
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40003c00 	.word	0x40003c00
 8002704:	40023800 	.word	0x40023800
 8002708:	40020800 	.word	0x40020800

0800270c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <HAL_MspInit+0x48>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	4a0e      	ldr	r2, [pc, #56]	; (8002754 <HAL_MspInit+0x48>)
 800271c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002720:	6453      	str	r3, [r2, #68]	; 0x44
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <HAL_MspInit+0x48>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272a:	607b      	str	r3, [r7, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	603b      	str	r3, [r7, #0]
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <HAL_MspInit+0x48>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	4a07      	ldr	r2, [pc, #28]	; (8002754 <HAL_MspInit+0x48>)
 8002738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273c:	6413      	str	r3, [r2, #64]	; 0x40
 800273e:	4b05      	ldr	r3, [pc, #20]	; (8002754 <HAL_MspInit+0x48>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr
 8002754:	40023800 	.word	0x40023800

08002758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800275c:	e7fe      	b.n	800275c <NMI_Handler+0x4>

0800275e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002762:	e7fe      	b.n	8002762 <HardFault_Handler+0x4>

08002764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002768:	e7fe      	b.n	8002768 <MemManage_Handler+0x4>

0800276a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800276e:	e7fe      	b.n	800276e <BusFault_Handler+0x4>

08002770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002774:	e7fe      	b.n	8002774 <UsageFault_Handler+0x4>

08002776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr

08002782 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr

0800278e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800278e:	b480      	push	{r7}
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr

0800279a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800279e:	f000 fa63 	bl	8002c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80027ac:	4802      	ldr	r0, [pc, #8]	; (80027b8 <CAN1_TX_IRQHandler+0x10>)
 80027ae:	f000 fdef 	bl	8003390 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000308 	.word	0x20000308

080027bc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80027c0:	4802      	ldr	r0, [pc, #8]	; (80027cc <CAN1_RX0_IRQHandler+0x10>)
 80027c2:	f000 fde5 	bl	8003390 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80027c6:	bf00      	nop
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000308 	.word	0x20000308

080027d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027d4:	4802      	ldr	r0, [pc, #8]	; (80027e0 <TIM2_IRQHandler+0x10>)
 80027d6:	f002 fe2b 	bl	8005430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	200003bc 	.word	0x200003bc

080027e4 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80027e8:	4802      	ldr	r0, [pc, #8]	; (80027f4 <CAN2_RX0_IRQHandler+0x10>)
 80027ea:	f000 fdd1 	bl	8003390 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000330 	.word	0x20000330

080027f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return 1;
 80027fc:	2301      	movs	r3, #1
}
 80027fe:	4618      	mov	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	bc80      	pop	{r7}
 8002804:	4770      	bx	lr

08002806 <_kill>:

int _kill(int pid, int sig)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
 800280e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002810:	f004 fb2e 	bl	8006e70 <__errno>
 8002814:	4603      	mov	r3, r0
 8002816:	2216      	movs	r2, #22
 8002818:	601a      	str	r2, [r3, #0]
  return -1;
 800281a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800281e:	4618      	mov	r0, r3
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <_exit>:

void _exit (int status)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800282e:	f04f 31ff 	mov.w	r1, #4294967295
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff ffe7 	bl	8002806 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002838:	e7fe      	b.n	8002838 <_exit+0x12>

0800283a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b086      	sub	sp, #24
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e00a      	b.n	8002862 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800284c:	f3af 8000 	nop.w
 8002850:	4601      	mov	r1, r0
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	60ba      	str	r2, [r7, #8]
 8002858:	b2ca      	uxtb	r2, r1
 800285a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	3301      	adds	r3, #1
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	429a      	cmp	r2, r3
 8002868:	dbf0      	blt.n	800284c <_read+0x12>
  }

  return len;
 800286a:	687b      	ldr	r3, [r7, #4]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	e009      	b.n	800289a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	60ba      	str	r2, [r7, #8]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	3301      	adds	r3, #1
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	429a      	cmp	r2, r3
 80028a0:	dbf1      	blt.n	8002886 <_write+0x12>
    //ITM_SendChar(*ptr++); //Diese Zeile kann gelöscht werden wenn kein printf über SWV mehr gewollt ist
  }
  return len;
 80028a2:	687b      	ldr	r3, [r7, #4]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3718      	adds	r7, #24
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <_close>:

int _close(int file)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
 80028ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028d2:	605a      	str	r2, [r3, #4]
  return 0;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <_isatty>:

int _isatty(int file)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028e8:	2301      	movs	r3, #1
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002914:	4a14      	ldr	r2, [pc, #80]	; (8002968 <_sbrk+0x5c>)
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <_sbrk+0x60>)
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002920:	4b13      	ldr	r3, [pc, #76]	; (8002970 <_sbrk+0x64>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d102      	bne.n	800292e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <_sbrk+0x64>)
 800292a:	4a12      	ldr	r2, [pc, #72]	; (8002974 <_sbrk+0x68>)
 800292c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <_sbrk+0x64>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4413      	add	r3, r2
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	429a      	cmp	r2, r3
 800293a:	d207      	bcs.n	800294c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800293c:	f004 fa98 	bl	8006e70 <__errno>
 8002940:	4603      	mov	r3, r0
 8002942:	220c      	movs	r2, #12
 8002944:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002946:	f04f 33ff 	mov.w	r3, #4294967295
 800294a:	e009      	b.n	8002960 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800294c:	4b08      	ldr	r3, [pc, #32]	; (8002970 <_sbrk+0x64>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002952:	4b07      	ldr	r3, [pc, #28]	; (8002970 <_sbrk+0x64>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4413      	add	r3, r2
 800295a:	4a05      	ldr	r2, [pc, #20]	; (8002970 <_sbrk+0x64>)
 800295c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800295e:	68fb      	ldr	r3, [r7, #12]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	2000c000 	.word	0x2000c000
 800296c:	00000400 	.word	0x00000400
 8002970:	200003b8 	.word	0x200003b8
 8002974:	20000a58 	.word	0x20000a58

08002978 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800298a:	f107 0308 	add.w	r3, r7, #8
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	609a      	str	r2, [r3, #8]
 8002996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002998:	463b      	mov	r3, r7
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029a0:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029aa:	222f      	movs	r2, #47	; 0x2f
 80029ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ae:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80029b4:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80029ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029bc:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029be:	2200      	movs	r2, #0
 80029c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029c2:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029c8:	4813      	ldr	r0, [pc, #76]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029ca:	f002 fc74 	bl	80052b6 <HAL_TIM_Base_Init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80029d4:	f7ff fe17 	bl	8002606 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029de:	f107 0308 	add.w	r3, r7, #8
 80029e2:	4619      	mov	r1, r3
 80029e4:	480c      	ldr	r0, [pc, #48]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029e6:	f002 fe2b 	bl	8005640 <HAL_TIM_ConfigClockSource>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80029f0:	f7ff fe09 	bl	8002606 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029f4:	2300      	movs	r3, #0
 80029f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f8:	2300      	movs	r3, #0
 80029fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029fc:	463b      	mov	r3, r7
 80029fe:	4619      	mov	r1, r3
 8002a00:	4805      	ldr	r0, [pc, #20]	; (8002a18 <MX_TIM2_Init+0x94>)
 8002a02:	f003 f83d 	bl	8005a80 <HAL_TIMEx_MasterConfigSynchronization>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002a0c:	f7ff fdfb 	bl	8002606 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a10:	bf00      	nop
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	200003bc 	.word	0x200003bc

08002a1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2c:	d115      	bne.n	8002a5a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <HAL_TIM_Base_MspInit+0x48>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a0b      	ldr	r2, [pc, #44]	; (8002a64 <HAL_TIM_Base_MspInit+0x48>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <HAL_TIM_Base_MspInit+0x48>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	201c      	movs	r0, #28
 8002a50:	f000 ff99 	bl	8003986 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a54:	201c      	movs	r0, #28
 8002a56:	f000 ffb2 	bl	80039be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800

08002a68 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002a6c:	4b12      	ldr	r3, [pc, #72]	; (8002ab8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002a6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002a72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002a74:	4b10      	ldr	r3, [pc, #64]	; (8002ab8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002a76:	2204      	movs	r2, #4
 8002a78:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002a7a:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002a80:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002a86:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002a88:	2202      	movs	r2, #2
 8002a8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002a92:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002a98:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002a9e:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002aa4:	4804      	ldr	r0, [pc, #16]	; (8002ab8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8002aa6:	f001 f974 	bl	8003d92 <HAL_PCD_Init>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8002ab0:	f7ff fda9 	bl	8002606 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002ab4:	bf00      	nop
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000404 	.word	0x20000404

08002abc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	; 0x28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	f107 0314 	add.w	r3, r7, #20
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	605a      	str	r2, [r3, #4]
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	60da      	str	r2, [r3, #12]
 8002ad2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002adc:	d13f      	bne.n	8002b5e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	4b21      	ldr	r3, [pc, #132]	; (8002b68 <HAL_PCD_MspInit+0xac>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	4a20      	ldr	r2, [pc, #128]	; (8002b68 <HAL_PCD_MspInit+0xac>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	6313      	str	r3, [r2, #48]	; 0x30
 8002aee:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <HAL_PCD_MspInit+0xac>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b08:	f107 0314 	add.w	r3, r7, #20
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4817      	ldr	r0, [pc, #92]	; (8002b6c <HAL_PCD_MspInit+0xb0>)
 8002b10:	f000 ff70 	bl	80039f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002b14:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b22:	2303      	movs	r3, #3
 8002b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002b26:	230a      	movs	r3, #10
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	4619      	mov	r1, r3
 8002b30:	480e      	ldr	r0, [pc, #56]	; (8002b6c <HAL_PCD_MspInit+0xb0>)
 8002b32:	f000 ff5f 	bl	80039f4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002b36:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <HAL_PCD_MspInit+0xac>)
 8002b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3a:	4a0b      	ldr	r2, [pc, #44]	; (8002b68 <HAL_PCD_MspInit+0xac>)
 8002b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b40:	6353      	str	r3, [r2, #52]	; 0x34
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <HAL_PCD_MspInit+0xac>)
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	4a07      	ldr	r2, [pc, #28]	; (8002b68 <HAL_PCD_MspInit+0xac>)
 8002b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b50:	6453      	str	r3, [r2, #68]	; 0x44
 8002b52:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <HAL_PCD_MspInit+0xac>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002b5e:	bf00      	nop
 8002b60:	3728      	adds	r7, #40	; 0x28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40023800 	.word	0x40023800
 8002b6c:	40020000 	.word	0x40020000

08002b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ba8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8002b74:	f7ff ff00 	bl	8002978 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b78:	480c      	ldr	r0, [pc, #48]	; (8002bac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b7a:	490d      	ldr	r1, [pc, #52]	; (8002bb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b7c:	4a0d      	ldr	r2, [pc, #52]	; (8002bb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b80:	e002      	b.n	8002b88 <LoopCopyDataInit>

08002b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b86:	3304      	adds	r3, #4

08002b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b8c:	d3f9      	bcc.n	8002b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b8e:	4a0a      	ldr	r2, [pc, #40]	; (8002bb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b90:	4c0a      	ldr	r4, [pc, #40]	; (8002bbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b94:	e001      	b.n	8002b9a <LoopFillZerobss>

08002b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b98:	3204      	adds	r2, #4

08002b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b9c:	d3fb      	bcc.n	8002b96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002b9e:	f004 f96d 	bl	8006e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ba2:	f7ff fcbf 	bl	8002524 <main>
  bx  lr    
 8002ba6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ba8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8002bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bb0:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8002bb4:	08009654 	.word	0x08009654
  ldr r2, =_sbss
 8002bb8:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8002bbc:	20000a58 	.word	0x20000a58

08002bc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bc0:	e7fe      	b.n	8002bc0 <ADC_IRQHandler>
	...

08002bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bc8:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <HAL_Init+0x40>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a0d      	ldr	r2, [pc, #52]	; (8002c04 <HAL_Init+0x40>)
 8002bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bd4:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <HAL_Init+0x40>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a0a      	ldr	r2, [pc, #40]	; (8002c04 <HAL_Init+0x40>)
 8002bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002be0:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <HAL_Init+0x40>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a07      	ldr	r2, [pc, #28]	; (8002c04 <HAL_Init+0x40>)
 8002be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bec:	2003      	movs	r0, #3
 8002bee:	f000 febf 	bl	8003970 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bf2:	200f      	movs	r0, #15
 8002bf4:	f000 f808 	bl	8002c08 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002bf8:	f7ff fd88 	bl	800270c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40023c00 	.word	0x40023c00

08002c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c10:	4b12      	ldr	r3, [pc, #72]	; (8002c5c <HAL_InitTick+0x54>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	4b12      	ldr	r3, [pc, #72]	; (8002c60 <HAL_InitTick+0x58>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fed7 	bl	80039da <HAL_SYSTICK_Config>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e00e      	b.n	8002c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b0f      	cmp	r3, #15
 8002c3a:	d80a      	bhi.n	8002c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	f04f 30ff 	mov.w	r0, #4294967295
 8002c44:	f000 fe9f 	bl	8003986 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c48:	4a06      	ldr	r2, [pc, #24]	; (8002c64 <HAL_InitTick+0x5c>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	e000      	b.n	8002c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	20000064 	.word	0x20000064
 8002c60:	2000006c 	.word	0x2000006c
 8002c64:	20000068 	.word	0x20000068

08002c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_IncTick+0x1c>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_IncTick+0x20>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4413      	add	r3, r2
 8002c78:	4a03      	ldr	r2, [pc, #12]	; (8002c88 <HAL_IncTick+0x20>)
 8002c7a:	6013      	str	r3, [r2, #0]
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr
 8002c84:	2000006c 	.word	0x2000006c
 8002c88:	20000908 	.word	0x20000908

08002c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c90:	4b02      	ldr	r3, [pc, #8]	; (8002c9c <HAL_GetTick+0x10>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr
 8002c9c:	20000908 	.word	0x20000908

08002ca0 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ca8:	f7ff fff0 	bl	8002c8c <HAL_GetTick>
 8002cac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb8:	d005      	beq.n	8002cc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cba:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <HAL_Delay+0x44>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cc6:	bf00      	nop
 8002cc8:	f7ff ffe0 	bl	8002c8c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d8f7      	bhi.n	8002cc8 <HAL_Delay+0x28>
  {
  }
}
 8002cd8:	bf00      	nop
 8002cda:	bf00      	nop
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	2000006c 	.word	0x2000006c

08002ce8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e0ed      	b.n	8002ed6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d102      	bne.n	8002d0c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff fa54 	bl	80021b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0201 	orr.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d1c:	f7ff ffb6 	bl	8002c8c <HAL_GetTick>
 8002d20:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d22:	e012      	b.n	8002d4a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d24:	f7ff ffb2 	bl	8002c8c <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b0a      	cmp	r3, #10
 8002d30:	d90b      	bls.n	8002d4a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2205      	movs	r2, #5
 8002d42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e0c5      	b.n	8002ed6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d0e5      	beq.n	8002d24 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0202 	bic.w	r2, r2, #2
 8002d66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d68:	f7ff ff90 	bl	8002c8c <HAL_GetTick>
 8002d6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d6e:	e012      	b.n	8002d96 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d70:	f7ff ff8c 	bl	8002c8c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b0a      	cmp	r3, #10
 8002d7c:	d90b      	bls.n	8002d96 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2205      	movs	r2, #5
 8002d8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e09f      	b.n	8002ed6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1e5      	bne.n	8002d70 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	7e1b      	ldrb	r3, [r3, #24]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d108      	bne.n	8002dbe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e007      	b.n	8002dce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	7e5b      	ldrb	r3, [r3, #25]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d108      	bne.n	8002de8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	e007      	b.n	8002df8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7e9b      	ldrb	r3, [r3, #26]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d108      	bne.n	8002e12 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0220 	orr.w	r2, r2, #32
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	e007      	b.n	8002e22 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0220 	bic.w	r2, r2, #32
 8002e20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	7edb      	ldrb	r3, [r3, #27]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d108      	bne.n	8002e3c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0210 	bic.w	r2, r2, #16
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	e007      	b.n	8002e4c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0210 	orr.w	r2, r2, #16
 8002e4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	7f1b      	ldrb	r3, [r3, #28]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d108      	bne.n	8002e66 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0208 	orr.w	r2, r2, #8
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	e007      	b.n	8002e76 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0208 	bic.w	r2, r2, #8
 8002e74:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	7f5b      	ldrb	r3, [r3, #29]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d108      	bne.n	8002e90 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0204 	orr.w	r2, r2, #4
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	e007      	b.n	8002ea0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f022 0204 	bic.w	r2, r2, #4
 8002e9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	ea42 0103 	orr.w	r1, r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	1e5a      	subs	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d12e      	bne.n	8002f50 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0201 	bic.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f0a:	f7ff febf 	bl	8002c8c <HAL_GetTick>
 8002f0e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f10:	e012      	b.n	8002f38 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f12:	f7ff febb 	bl	8002c8c <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b0a      	cmp	r3, #10
 8002f1e:	d90b      	bls.n	8002f38 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2205      	movs	r2, #5
 8002f30:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e012      	b.n	8002f5e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1e5      	bne.n	8002f12 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	e006      	b.n	8002f5e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
  }
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}

08002f66 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b089      	sub	sp, #36	; 0x24
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
 8002f72:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f7a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f84:	7ffb      	ldrb	r3, [r7, #31]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d003      	beq.n	8002f92 <HAL_CAN_AddTxMessage+0x2c>
 8002f8a:	7ffb      	ldrb	r3, [r7, #31]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	f040 80ad 	bne.w	80030ec <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10a      	bne.n	8002fb2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d105      	bne.n	8002fb2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 8095 	beq.w	80030dc <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	0e1b      	lsrs	r3, r3, #24
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10d      	bne.n	8002fea <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002fd8:	68f9      	ldr	r1, [r7, #12]
 8002fda:	6809      	ldr	r1, [r1, #0]
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	3318      	adds	r3, #24
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	440b      	add	r3, r1
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	e00f      	b.n	800300a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ff4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ffa:	68f9      	ldr	r1, [r7, #12]
 8002ffc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002ffe:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	3318      	adds	r3, #24
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	440b      	add	r3, r1
 8003008:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6819      	ldr	r1, [r3, #0]
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	3318      	adds	r3, #24
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	440b      	add	r3, r1
 800301a:	3304      	adds	r3, #4
 800301c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	7d1b      	ldrb	r3, [r3, #20]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d111      	bne.n	800304a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	3318      	adds	r3, #24
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	4413      	add	r3, r2
 8003032:	3304      	adds	r3, #4
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	6811      	ldr	r1, [r2, #0]
 800303a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	3318      	adds	r3, #24
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	440b      	add	r3, r1
 8003046:	3304      	adds	r3, #4
 8003048:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3307      	adds	r3, #7
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	061a      	lsls	r2, r3, #24
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3306      	adds	r3, #6
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	041b      	lsls	r3, r3, #16
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3305      	adds	r3, #5
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	021b      	lsls	r3, r3, #8
 8003064:	4313      	orrs	r3, r2
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	3204      	adds	r2, #4
 800306a:	7812      	ldrb	r2, [r2, #0]
 800306c:	4610      	mov	r0, r2
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	6811      	ldr	r1, [r2, #0]
 8003072:	ea43 0200 	orr.w	r2, r3, r0
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	440b      	add	r3, r1
 800307c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003080:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3303      	adds	r3, #3
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	061a      	lsls	r2, r3, #24
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3302      	adds	r3, #2
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	041b      	lsls	r3, r3, #16
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3301      	adds	r3, #1
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	021b      	lsls	r3, r3, #8
 800309c:	4313      	orrs	r3, r2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	7812      	ldrb	r2, [r2, #0]
 80030a2:	4610      	mov	r0, r2
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	6811      	ldr	r1, [r2, #0]
 80030a8:	ea43 0200 	orr.w	r2, r3, r0
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	440b      	add	r3, r1
 80030b2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80030b6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	3318      	adds	r3, #24
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	4413      	add	r3, r2
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	6811      	ldr	r1, [r2, #0]
 80030ca:	f043 0201 	orr.w	r2, r3, #1
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	3318      	adds	r3, #24
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	440b      	add	r3, r1
 80030d6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	e00e      	b.n	80030fa <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e006      	b.n	80030fa <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
  }
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3724      	adds	r7, #36	; 0x24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003118:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800311a:	7dfb      	ldrb	r3, [r7, #23]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d003      	beq.n	8003128 <HAL_CAN_GetRxMessage+0x24>
 8003120:	7dfb      	ldrb	r3, [r7, #23]
 8003122:	2b02      	cmp	r3, #2
 8003124:	f040 8103 	bne.w	800332e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10e      	bne.n	800314c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0303 	and.w	r3, r3, #3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d116      	bne.n	800316a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0f7      	b.n	800333c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d107      	bne.n	800316a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e0e8      	b.n	800333c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	331b      	adds	r3, #27
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	4413      	add	r3, r2
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0204 	and.w	r2, r3, #4
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10c      	bne.n	80031a2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	331b      	adds	r3, #27
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	4413      	add	r3, r2
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	0d5b      	lsrs	r3, r3, #21
 8003198:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	e00b      	b.n	80031ba <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	331b      	adds	r3, #27
 80031aa:	011b      	lsls	r3, r3, #4
 80031ac:	4413      	add	r3, r2
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	08db      	lsrs	r3, r3, #3
 80031b2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	331b      	adds	r3, #27
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	4413      	add	r3, r2
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0202 	and.w	r2, r3, #2
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	331b      	adds	r3, #27
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	4413      	add	r3, r2
 80031dc:	3304      	adds	r3, #4
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2208      	movs	r2, #8
 80031ec:	611a      	str	r2, [r3, #16]
 80031ee:	e00b      	b.n	8003208 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	331b      	adds	r3, #27
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	4413      	add	r3, r2
 80031fc:	3304      	adds	r3, #4
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 020f 	and.w	r2, r3, #15
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	331b      	adds	r3, #27
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	4413      	add	r3, r2
 8003214:	3304      	adds	r3, #4
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	0a1b      	lsrs	r3, r3, #8
 800321a:	b2da      	uxtb	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	331b      	adds	r3, #27
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	4413      	add	r3, r2
 800322c:	3304      	adds	r3, #4
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	0c1b      	lsrs	r3, r3, #16
 8003232:	b29a      	uxth	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	011b      	lsls	r3, r3, #4
 8003240:	4413      	add	r3, r2
 8003242:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	b2da      	uxtb	r2, r3
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	4413      	add	r3, r2
 8003258:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	0a1a      	lsrs	r2, r3, #8
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	3301      	adds	r3, #1
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	4413      	add	r3, r2
 8003272:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	0c1a      	lsrs	r2, r3, #16
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	3302      	adds	r3, #2
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	4413      	add	r3, r2
 800328c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	0e1a      	lsrs	r2, r3, #24
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	3303      	adds	r3, #3
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	4413      	add	r3, r2
 80032a6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	3304      	adds	r3, #4
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	011b      	lsls	r3, r3, #4
 80032bc:	4413      	add	r3, r2
 80032be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	0a1a      	lsrs	r2, r3, #8
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	3305      	adds	r3, #5
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	0c1a      	lsrs	r2, r3, #16
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	3306      	adds	r3, #6
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	0e1a      	lsrs	r2, r3, #24
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	3307      	adds	r3, #7
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d108      	bne.n	800331a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0220 	orr.w	r2, r2, #32
 8003316:	60da      	str	r2, [r3, #12]
 8003318:	e007      	b.n	800332a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 0220 	orr.w	r2, r2, #32
 8003328:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	e006      	b.n	800333c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
  }
}
 800333c:	4618      	mov	r0, r3
 800333e:	371c      	adds	r7, #28
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003356:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003358:	7bfb      	ldrb	r3, [r7, #15]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d002      	beq.n	8003364 <HAL_CAN_ActivateNotification+0x1e>
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d109      	bne.n	8003378 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6959      	ldr	r1, [r3, #20]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	e006      	b.n	8003386 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
  }
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08a      	sub	sp, #40	; 0x28
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003398:	2300      	movs	r3, #0
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80033cc:	6a3b      	ldr	r3, [r7, #32]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d07c      	beq.n	80034d0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d023      	beq.n	8003428 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2201      	movs	r2, #1
 80033e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f983 	bl	80036fe <HAL_CAN_TxMailbox0CompleteCallback>
 80033f8:	e016      	b.n	8003428 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d004      	beq.n	800340e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
 800340c:	e00c      	b.n	8003428 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d004      	beq.n	8003422 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800341e:	627b      	str	r3, [r7, #36]	; 0x24
 8003420:	e002      	b.n	8003428 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f986 	bl	8003734 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342e:	2b00      	cmp	r3, #0
 8003430:	d024      	beq.n	800347c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f44f 7280 	mov.w	r2, #256	; 0x100
 800343a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f962 	bl	8003710 <HAL_CAN_TxMailbox1CompleteCallback>
 800344c:	e016      	b.n	800347c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003454:	2b00      	cmp	r3, #0
 8003456:	d004      	beq.n	8003462 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
 8003460:	e00c      	b.n	800347c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003468:	2b00      	cmp	r3, #0
 800346a:	d004      	beq.n	8003476 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800346c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
 8003474:	e002      	b.n	800347c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f965 	bl	8003746 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d024      	beq.n	80034d0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800348e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f941 	bl	8003722 <HAL_CAN_TxMailbox2CompleteCallback>
 80034a0:	e016      	b.n	80034d0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d004      	beq.n	80034b6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
 80034b4:	e00c      	b.n	80034d0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d004      	beq.n	80034ca <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
 80034c8:	e002      	b.n	80034d0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f944 	bl	8003758 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	f003 0308 	and.w	r3, r3, #8
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00c      	beq.n	80034f4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d007      	beq.n	80034f4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2210      	movs	r2, #16
 80034f2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00b      	beq.n	8003516 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d006      	beq.n	8003516 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2208      	movs	r2, #8
 800350e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f92a 	bl	800376a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d009      	beq.n	8003534 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	2b00      	cmp	r3, #0
 800352c:	d002      	beq.n	8003534 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7fe f9c0 	bl	80018b4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00c      	beq.n	8003558 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b00      	cmp	r3, #0
 8003546:	d007      	beq.n	8003558 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800354e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2210      	movs	r2, #16
 8003556:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	f003 0320 	and.w	r3, r3, #32
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00b      	beq.n	800357a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b00      	cmp	r3, #0
 800356a:	d006      	beq.n	800357a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2208      	movs	r2, #8
 8003572:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f000 f90a 	bl	800378e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	f003 0310 	and.w	r3, r3, #16
 8003580:	2b00      	cmp	r3, #0
 8003582:	d009      	beq.n	8003598 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d002      	beq.n	8003598 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f8f2 	bl	800377c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00b      	beq.n	80035ba <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d006      	beq.n	80035ba <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2210      	movs	r2, #16
 80035b2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f8f3 	bl	80037a0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00b      	beq.n	80035dc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d006      	beq.n	80035dc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2208      	movs	r2, #8
 80035d4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f8eb 	bl	80037b2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d07b      	beq.n	80036de <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d072      	beq.n	80036d6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d008      	beq.n	800360c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003612:	2b00      	cmp	r3, #0
 8003614:	d008      	beq.n	8003628 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	f043 0302 	orr.w	r3, r3, #2
 8003626:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362e:	2b00      	cmp	r3, #0
 8003630:	d008      	beq.n	8003644 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	f043 0304 	orr.w	r3, r3, #4
 8003642:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800364a:	2b00      	cmp	r3, #0
 800364c:	d043      	beq.n	80036d6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003654:	2b00      	cmp	r3, #0
 8003656:	d03e      	beq.n	80036d6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800365e:	2b60      	cmp	r3, #96	; 0x60
 8003660:	d02b      	beq.n	80036ba <HAL_CAN_IRQHandler+0x32a>
 8003662:	2b60      	cmp	r3, #96	; 0x60
 8003664:	d82e      	bhi.n	80036c4 <HAL_CAN_IRQHandler+0x334>
 8003666:	2b50      	cmp	r3, #80	; 0x50
 8003668:	d022      	beq.n	80036b0 <HAL_CAN_IRQHandler+0x320>
 800366a:	2b50      	cmp	r3, #80	; 0x50
 800366c:	d82a      	bhi.n	80036c4 <HAL_CAN_IRQHandler+0x334>
 800366e:	2b40      	cmp	r3, #64	; 0x40
 8003670:	d019      	beq.n	80036a6 <HAL_CAN_IRQHandler+0x316>
 8003672:	2b40      	cmp	r3, #64	; 0x40
 8003674:	d826      	bhi.n	80036c4 <HAL_CAN_IRQHandler+0x334>
 8003676:	2b30      	cmp	r3, #48	; 0x30
 8003678:	d010      	beq.n	800369c <HAL_CAN_IRQHandler+0x30c>
 800367a:	2b30      	cmp	r3, #48	; 0x30
 800367c:	d822      	bhi.n	80036c4 <HAL_CAN_IRQHandler+0x334>
 800367e:	2b10      	cmp	r3, #16
 8003680:	d002      	beq.n	8003688 <HAL_CAN_IRQHandler+0x2f8>
 8003682:	2b20      	cmp	r3, #32
 8003684:	d005      	beq.n	8003692 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003686:	e01d      	b.n	80036c4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	f043 0308 	orr.w	r3, r3, #8
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003690:	e019      	b.n	80036c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	f043 0310 	orr.w	r3, r3, #16
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800369a:	e014      	b.n	80036c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	f043 0320 	orr.w	r3, r3, #32
 80036a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036a4:	e00f      	b.n	80036c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80036a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036ae:	e00a      	b.n	80036c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036b8:	e005      	b.n	80036c6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036c2:	e000      	b.n	80036c6 <HAL_CAN_IRQHandler+0x336>
            break;
 80036c4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699a      	ldr	r2, [r3, #24]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80036d4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2204      	movs	r2, #4
 80036dc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f867 	bl	80037c4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80036f6:	bf00      	nop
 80036f8:	3728      	adds	r7, #40	; 0x28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr

08003710 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	bc80      	pop	{r7}
 8003720:	4770      	bx	lr

08003722 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr

08003734 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	bc80      	pop	{r7}
 8003744:	4770      	bx	lr

08003746 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	bc80      	pop	{r7}
 8003756:	4770      	bx	lr

08003758 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr

0800376a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr

0800377c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr

0800378e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr

080037a0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr

080037b2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr

080037c4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr
	...

080037d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <__NVIC_SetPriorityGrouping+0x44>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037f4:	4013      	ands	r3, r2
 80037f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003800:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800380a:	4a04      	ldr	r2, [pc, #16]	; (800381c <__NVIC_SetPriorityGrouping+0x44>)
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	60d3      	str	r3, [r2, #12]
}
 8003810:	bf00      	nop
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <__NVIC_GetPriorityGrouping+0x18>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	0a1b      	lsrs	r3, r3, #8
 800382a:	f003 0307 	and.w	r3, r3, #7
}
 800382e:	4618      	mov	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384a:	2b00      	cmp	r3, #0
 800384c:	db0b      	blt.n	8003866 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	f003 021f 	and.w	r2, r3, #31
 8003854:	4906      	ldr	r1, [pc, #24]	; (8003870 <__NVIC_EnableIRQ+0x34>)
 8003856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	2001      	movs	r0, #1
 800385e:	fa00 f202 	lsl.w	r2, r0, r2
 8003862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr
 8003870:	e000e100 	.word	0xe000e100

08003874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	6039      	str	r1, [r7, #0]
 800387e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003884:	2b00      	cmp	r3, #0
 8003886:	db0a      	blt.n	800389e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	b2da      	uxtb	r2, r3
 800388c:	490c      	ldr	r1, [pc, #48]	; (80038c0 <__NVIC_SetPriority+0x4c>)
 800388e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003892:	0112      	lsls	r2, r2, #4
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	440b      	add	r3, r1
 8003898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800389c:	e00a      	b.n	80038b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	4908      	ldr	r1, [pc, #32]	; (80038c4 <__NVIC_SetPriority+0x50>)
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	3b04      	subs	r3, #4
 80038ac:	0112      	lsls	r2, r2, #4
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	440b      	add	r3, r1
 80038b2:	761a      	strb	r2, [r3, #24]
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	e000e100 	.word	0xe000e100
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b089      	sub	sp, #36	; 0x24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f1c3 0307 	rsb	r3, r3, #7
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	bf28      	it	cs
 80038e6:	2304      	movcs	r3, #4
 80038e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3304      	adds	r3, #4
 80038ee:	2b06      	cmp	r3, #6
 80038f0:	d902      	bls.n	80038f8 <NVIC_EncodePriority+0x30>
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	3b03      	subs	r3, #3
 80038f6:	e000      	b.n	80038fa <NVIC_EncodePriority+0x32>
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43da      	mvns	r2, r3
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	401a      	ands	r2, r3
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003910:	f04f 31ff 	mov.w	r1, #4294967295
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	fa01 f303 	lsl.w	r3, r1, r3
 800391a:	43d9      	mvns	r1, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003920:	4313      	orrs	r3, r2
         );
}
 8003922:	4618      	mov	r0, r3
 8003924:	3724      	adds	r7, #36	; 0x24
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr

0800392c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3b01      	subs	r3, #1
 8003938:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800393c:	d301      	bcc.n	8003942 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800393e:	2301      	movs	r3, #1
 8003940:	e00f      	b.n	8003962 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003942:	4a0a      	ldr	r2, [pc, #40]	; (800396c <SysTick_Config+0x40>)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3b01      	subs	r3, #1
 8003948:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800394a:	210f      	movs	r1, #15
 800394c:	f04f 30ff 	mov.w	r0, #4294967295
 8003950:	f7ff ff90 	bl	8003874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <SysTick_Config+0x40>)
 8003956:	2200      	movs	r2, #0
 8003958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800395a:	4b04      	ldr	r3, [pc, #16]	; (800396c <SysTick_Config+0x40>)
 800395c:	2207      	movs	r2, #7
 800395e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	e000e010 	.word	0xe000e010

08003970 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff ff2d 	bl	80037d8 <__NVIC_SetPriorityGrouping>
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003986:	b580      	push	{r7, lr}
 8003988:	b086      	sub	sp, #24
 800398a:	af00      	add	r7, sp, #0
 800398c:	4603      	mov	r3, r0
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607a      	str	r2, [r7, #4]
 8003992:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003994:	2300      	movs	r3, #0
 8003996:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003998:	f7ff ff42 	bl	8003820 <__NVIC_GetPriorityGrouping>
 800399c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	68b9      	ldr	r1, [r7, #8]
 80039a2:	6978      	ldr	r0, [r7, #20]
 80039a4:	f7ff ff90 	bl	80038c8 <NVIC_EncodePriority>
 80039a8:	4602      	mov	r2, r0
 80039aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ae:	4611      	mov	r1, r2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7ff ff5f 	bl	8003874 <__NVIC_SetPriority>
}
 80039b6:	bf00      	nop
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	4603      	mov	r3, r0
 80039c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff ff35 	bl	800383c <__NVIC_EnableIRQ>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff ffa2 	bl	800392c <SysTick_Config>
 80039e8:	4603      	mov	r3, r0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
	...

080039f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b087      	sub	sp, #28
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a02:	e16f      	b.n	8003ce4 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	2101      	movs	r1, #1
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a10:	4013      	ands	r3, r2
 8003a12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 8161 	beq.w	8003cde <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d005      	beq.n	8003a34 <HAL_GPIO_Init+0x40>
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 0303 	and.w	r3, r3, #3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d130      	bne.n	8003a96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	2203      	movs	r2, #3
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43db      	mvns	r3, r3
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4013      	ands	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	091b      	lsrs	r3, r3, #4
 8003a80:	f003 0201 	and.w	r2, r3, #1
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f003 0303 	and.w	r3, r3, #3
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d017      	beq.n	8003ad2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	2203      	movs	r2, #3
 8003aae:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d123      	bne.n	8003b26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	08da      	lsrs	r2, r3, #3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3208      	adds	r2, #8
 8003ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	220f      	movs	r2, #15
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4013      	ands	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	08da      	lsrs	r2, r3, #3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3208      	adds	r2, #8
 8003b20:	6939      	ldr	r1, [r7, #16]
 8003b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	2203      	movs	r2, #3
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	43db      	mvns	r3, r3
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f003 0203 	and.w	r2, r3, #3
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 80bb 	beq.w	8003cde <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b68:	2300      	movs	r3, #0
 8003b6a:	60bb      	str	r3, [r7, #8]
 8003b6c:	4b64      	ldr	r3, [pc, #400]	; (8003d00 <HAL_GPIO_Init+0x30c>)
 8003b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b70:	4a63      	ldr	r2, [pc, #396]	; (8003d00 <HAL_GPIO_Init+0x30c>)
 8003b72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b76:	6453      	str	r3, [r2, #68]	; 0x44
 8003b78:	4b61      	ldr	r3, [pc, #388]	; (8003d00 <HAL_GPIO_Init+0x30c>)
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b84:	4a5f      	ldr	r2, [pc, #380]	; (8003d04 <HAL_GPIO_Init+0x310>)
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	089b      	lsrs	r3, r3, #2
 8003b8a:	3302      	adds	r3, #2
 8003b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	220f      	movs	r2, #15
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a57      	ldr	r2, [pc, #348]	; (8003d08 <HAL_GPIO_Init+0x314>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d031      	beq.n	8003c14 <HAL_GPIO_Init+0x220>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a56      	ldr	r2, [pc, #344]	; (8003d0c <HAL_GPIO_Init+0x318>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d02b      	beq.n	8003c10 <HAL_GPIO_Init+0x21c>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a55      	ldr	r2, [pc, #340]	; (8003d10 <HAL_GPIO_Init+0x31c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d025      	beq.n	8003c0c <HAL_GPIO_Init+0x218>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a54      	ldr	r2, [pc, #336]	; (8003d14 <HAL_GPIO_Init+0x320>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d01f      	beq.n	8003c08 <HAL_GPIO_Init+0x214>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a53      	ldr	r2, [pc, #332]	; (8003d18 <HAL_GPIO_Init+0x324>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d019      	beq.n	8003c04 <HAL_GPIO_Init+0x210>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a52      	ldr	r2, [pc, #328]	; (8003d1c <HAL_GPIO_Init+0x328>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d013      	beq.n	8003c00 <HAL_GPIO_Init+0x20c>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a51      	ldr	r2, [pc, #324]	; (8003d20 <HAL_GPIO_Init+0x32c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00d      	beq.n	8003bfc <HAL_GPIO_Init+0x208>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a50      	ldr	r2, [pc, #320]	; (8003d24 <HAL_GPIO_Init+0x330>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d007      	beq.n	8003bf8 <HAL_GPIO_Init+0x204>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a4f      	ldr	r2, [pc, #316]	; (8003d28 <HAL_GPIO_Init+0x334>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d101      	bne.n	8003bf4 <HAL_GPIO_Init+0x200>
 8003bf0:	2308      	movs	r3, #8
 8003bf2:	e010      	b.n	8003c16 <HAL_GPIO_Init+0x222>
 8003bf4:	2309      	movs	r3, #9
 8003bf6:	e00e      	b.n	8003c16 <HAL_GPIO_Init+0x222>
 8003bf8:	2307      	movs	r3, #7
 8003bfa:	e00c      	b.n	8003c16 <HAL_GPIO_Init+0x222>
 8003bfc:	2306      	movs	r3, #6
 8003bfe:	e00a      	b.n	8003c16 <HAL_GPIO_Init+0x222>
 8003c00:	2305      	movs	r3, #5
 8003c02:	e008      	b.n	8003c16 <HAL_GPIO_Init+0x222>
 8003c04:	2304      	movs	r3, #4
 8003c06:	e006      	b.n	8003c16 <HAL_GPIO_Init+0x222>
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e004      	b.n	8003c16 <HAL_GPIO_Init+0x222>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e002      	b.n	8003c16 <HAL_GPIO_Init+0x222>
 8003c10:	2301      	movs	r3, #1
 8003c12:	e000      	b.n	8003c16 <HAL_GPIO_Init+0x222>
 8003c14:	2300      	movs	r3, #0
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	f002 0203 	and.w	r2, r2, #3
 8003c1c:	0092      	lsls	r2, r2, #2
 8003c1e:	4093      	lsls	r3, r2
 8003c20:	461a      	mov	r2, r3
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c28:	4936      	ldr	r1, [pc, #216]	; (8003d04 <HAL_GPIO_Init+0x310>)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	089b      	lsrs	r3, r3, #2
 8003c2e:	3302      	adds	r3, #2
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c36:	4b3d      	ldr	r3, [pc, #244]	; (8003d2c <HAL_GPIO_Init+0x338>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4013      	ands	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003c5a:	4a34      	ldr	r2, [pc, #208]	; (8003d2c <HAL_GPIO_Init+0x338>)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c60:	4b32      	ldr	r3, [pc, #200]	; (8003d2c <HAL_GPIO_Init+0x338>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003c84:	4a29      	ldr	r2, [pc, #164]	; (8003d2c <HAL_GPIO_Init+0x338>)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c8a:	4b28      	ldr	r3, [pc, #160]	; (8003d2c <HAL_GPIO_Init+0x338>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	43db      	mvns	r3, r3
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4013      	ands	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003cae:	4a1f      	ldr	r2, [pc, #124]	; (8003d2c <HAL_GPIO_Init+0x338>)
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cb4:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <HAL_GPIO_Init+0x338>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003cd8:	4a14      	ldr	r2, [pc, #80]	; (8003d2c <HAL_GPIO_Init+0x338>)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	fa22 f303 	lsr.w	r3, r2, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f47f ae88 	bne.w	8003a04 <HAL_GPIO_Init+0x10>
  }
}
 8003cf4:	bf00      	nop
 8003cf6:	bf00      	nop
 8003cf8:	371c      	adds	r7, #28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bc80      	pop	{r7}
 8003cfe:	4770      	bx	lr
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40013800 	.word	0x40013800
 8003d08:	40020000 	.word	0x40020000
 8003d0c:	40020400 	.word	0x40020400
 8003d10:	40020800 	.word	0x40020800
 8003d14:	40020c00 	.word	0x40020c00
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	40021400 	.word	0x40021400
 8003d20:	40021800 	.word	0x40021800
 8003d24:	40021c00 	.word	0x40021c00
 8003d28:	40022000 	.word	0x40022000
 8003d2c:	40013c00 	.word	0x40013c00

08003d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	807b      	strh	r3, [r7, #2]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d40:	787b      	ldrb	r3, [r7, #1]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d46:	887a      	ldrh	r2, [r7, #2]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d4c:	e003      	b.n	8003d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d4e:	887b      	ldrh	r3, [r7, #2]
 8003d50:	041a      	lsls	r2, r3, #16
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	619a      	str	r2, [r3, #24]
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr

08003d60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d72:	887a      	ldrh	r2, [r7, #2]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4013      	ands	r3, r2
 8003d78:	041a      	lsls	r2, r3, #16
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	43d9      	mvns	r1, r3
 8003d7e:	887b      	ldrh	r3, [r7, #2]
 8003d80:	400b      	ands	r3, r1
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	619a      	str	r2, [r3, #24]
}
 8003d88:	bf00      	nop
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr

08003d92 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d94:	b08f      	sub	sp, #60	; 0x3c
 8003d96:	af0a      	add	r7, sp, #40	; 0x28
 8003d98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e10f      	b.n	8003fc4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fe fe7c 	bl	8002abc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d102      	bne.n	8003dde <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f001 ff2f 	bl	8005c46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	603b      	str	r3, [r7, #0]
 8003dee:	687e      	ldr	r6, [r7, #4]
 8003df0:	466d      	mov	r5, sp
 8003df2:	f106 0410 	add.w	r4, r6, #16
 8003df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dfe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e02:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e06:	1d33      	adds	r3, r6, #4
 8003e08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e0a:	6838      	ldr	r0, [r7, #0]
 8003e0c:	f001 fec4 	bl	8005b98 <USB_CoreInit>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d005      	beq.n	8003e22 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2202      	movs	r2, #2
 8003e1a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e0d0      	b.n	8003fc4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2100      	movs	r1, #0
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f001 ff1c 	bl	8005c66 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e2e:	2300      	movs	r3, #0
 8003e30:	73fb      	strb	r3, [r7, #15]
 8003e32:	e04a      	b.n	8003eca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e34:	7bfa      	ldrb	r2, [r7, #15]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	333d      	adds	r3, #61	; 0x3d
 8003e44:	2201      	movs	r2, #1
 8003e46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e48:	7bfa      	ldrb	r2, [r7, #15]
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	4413      	add	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	333c      	adds	r3, #60	; 0x3c
 8003e58:	7bfa      	ldrb	r2, [r7, #15]
 8003e5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e5c:	7bfa      	ldrb	r2, [r7, #15]
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
 8003e60:	b298      	uxth	r0, r3
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	3356      	adds	r3, #86	; 0x56
 8003e70:	4602      	mov	r2, r0
 8003e72:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e74:	7bfa      	ldrb	r2, [r7, #15]
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	3340      	adds	r3, #64	; 0x40
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e88:	7bfa      	ldrb	r2, [r7, #15]
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	3344      	adds	r3, #68	; 0x44
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e9c:	7bfa      	ldrb	r2, [r7, #15]
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	3348      	adds	r3, #72	; 0x48
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003eb0:	7bfa      	ldrb	r2, [r7, #15]
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	334c      	adds	r3, #76	; 0x4c
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
 8003eca:	7bfa      	ldrb	r2, [r7, #15]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d3af      	bcc.n	8003e34 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	73fb      	strb	r3, [r7, #15]
 8003ed8:	e044      	b.n	8003f64 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003eda:	7bfa      	ldrb	r2, [r7, #15]
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003eec:	2200      	movs	r2, #0
 8003eee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ef0:	7bfa      	ldrb	r2, [r7, #15]
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	4413      	add	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003f02:	7bfa      	ldrb	r2, [r7, #15]
 8003f04:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f06:	7bfa      	ldrb	r2, [r7, #15]
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	4413      	add	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	440b      	add	r3, r1
 8003f14:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003f18:	2200      	movs	r2, #0
 8003f1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f1c:	7bfa      	ldrb	r2, [r7, #15]
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	4613      	mov	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	440b      	add	r3, r1
 8003f2a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f32:	7bfa      	ldrb	r2, [r7, #15]
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	4613      	mov	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	440b      	add	r3, r1
 8003f40:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f48:	7bfa      	ldrb	r2, [r7, #15]
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	4413      	add	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	440b      	add	r3, r1
 8003f56:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
 8003f60:	3301      	adds	r3, #1
 8003f62:	73fb      	strb	r3, [r7, #15]
 8003f64:	7bfa      	ldrb	r2, [r7, #15]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d3b5      	bcc.n	8003eda <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	687e      	ldr	r6, [r7, #4]
 8003f76:	466d      	mov	r5, sp
 8003f78:	f106 0410 	add.w	r4, r6, #16
 8003f7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f84:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f88:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f8c:	1d33      	adds	r3, r6, #4
 8003f8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f90:	6838      	ldr	r0, [r7, #0]
 8003f92:	f001 feb5 	bl	8005d00 <USB_DevInit>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e00d      	b.n	8003fc4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f002 f875 	bl	80060ac <USB_DevDisconnect>

  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003fcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08a      	sub	sp, #40	; 0x28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e23b      	b.n	8004456 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d050      	beq.n	800408c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fea:	4b9e      	ldr	r3, [pc, #632]	; (8004264 <HAL_RCC_OscConfig+0x298>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d00c      	beq.n	8004010 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ff6:	4b9b      	ldr	r3, [pc, #620]	; (8004264 <HAL_RCC_OscConfig+0x298>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d112      	bne.n	8004028 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004002:	4b98      	ldr	r3, [pc, #608]	; (8004264 <HAL_RCC_OscConfig+0x298>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800400a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800400e:	d10b      	bne.n	8004028 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004010:	4b94      	ldr	r3, [pc, #592]	; (8004264 <HAL_RCC_OscConfig+0x298>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d036      	beq.n	800408a <HAL_RCC_OscConfig+0xbe>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d132      	bne.n	800408a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e216      	b.n	8004456 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	4b8e      	ldr	r3, [pc, #568]	; (8004268 <HAL_RCC_OscConfig+0x29c>)
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d013      	beq.n	8004062 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403a:	f7fe fe27 	bl	8002c8c <HAL_GetTick>
 800403e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004042:	f7fe fe23 	bl	8002c8c <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b64      	cmp	r3, #100	; 0x64
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e200      	b.n	8004456 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004054:	4b83      	ldr	r3, [pc, #524]	; (8004264 <HAL_RCC_OscConfig+0x298>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0f0      	beq.n	8004042 <HAL_RCC_OscConfig+0x76>
 8004060:	e014      	b.n	800408c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004062:	f7fe fe13 	bl	8002c8c <HAL_GetTick>
 8004066:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800406a:	f7fe fe0f 	bl	8002c8c <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b64      	cmp	r3, #100	; 0x64
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e1ec      	b.n	8004456 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407c:	4b79      	ldr	r3, [pc, #484]	; (8004264 <HAL_RCC_OscConfig+0x298>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1f0      	bne.n	800406a <HAL_RCC_OscConfig+0x9e>
 8004088:	e000      	b.n	800408c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800408a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d077      	beq.n	8004188 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004098:	4b72      	ldr	r3, [pc, #456]	; (8004264 <HAL_RCC_OscConfig+0x298>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	f003 030c 	and.w	r3, r3, #12
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00b      	beq.n	80040bc <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040a4:	4b6f      	ldr	r3, [pc, #444]	; (8004264 <HAL_RCC_OscConfig+0x298>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d126      	bne.n	80040fe <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040b0:	4b6c      	ldr	r3, [pc, #432]	; (8004264 <HAL_RCC_OscConfig+0x298>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d120      	bne.n	80040fe <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040bc:	4b69      	ldr	r3, [pc, #420]	; (8004264 <HAL_RCC_OscConfig+0x298>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_RCC_OscConfig+0x108>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e1c0      	b.n	8004456 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d4:	4b63      	ldr	r3, [pc, #396]	; (8004264 <HAL_RCC_OscConfig+0x298>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	21f8      	movs	r1, #248	; 0xf8
 80040e2:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e4:	69b9      	ldr	r1, [r7, #24]
 80040e6:	fa91 f1a1 	rbit	r1, r1
 80040ea:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040ec:	6979      	ldr	r1, [r7, #20]
 80040ee:	fab1 f181 	clz	r1, r1
 80040f2:	b2c9      	uxtb	r1, r1
 80040f4:	408b      	lsls	r3, r1
 80040f6:	495b      	ldr	r1, [pc, #364]	; (8004264 <HAL_RCC_OscConfig+0x298>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040fc:	e044      	b.n	8004188 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d02a      	beq.n	800415c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004106:	4b59      	ldr	r3, [pc, #356]	; (800426c <HAL_RCC_OscConfig+0x2a0>)
 8004108:	2201      	movs	r2, #1
 800410a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410c:	f7fe fdbe 	bl	8002c8c <HAL_GetTick>
 8004110:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004114:	f7fe fdba 	bl	8002c8c <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e197      	b.n	8004456 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004126:	4b4f      	ldr	r3, [pc, #316]	; (8004264 <HAL_RCC_OscConfig+0x298>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0f0      	beq.n	8004114 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004132:	4b4c      	ldr	r3, [pc, #304]	; (8004264 <HAL_RCC_OscConfig+0x298>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	21f8      	movs	r1, #248	; 0xf8
 8004140:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004142:	6939      	ldr	r1, [r7, #16]
 8004144:	fa91 f1a1 	rbit	r1, r1
 8004148:	60f9      	str	r1, [r7, #12]
  return result;
 800414a:	68f9      	ldr	r1, [r7, #12]
 800414c:	fab1 f181 	clz	r1, r1
 8004150:	b2c9      	uxtb	r1, r1
 8004152:	408b      	lsls	r3, r1
 8004154:	4943      	ldr	r1, [pc, #268]	; (8004264 <HAL_RCC_OscConfig+0x298>)
 8004156:	4313      	orrs	r3, r2
 8004158:	600b      	str	r3, [r1, #0]
 800415a:	e015      	b.n	8004188 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800415c:	4b43      	ldr	r3, [pc, #268]	; (800426c <HAL_RCC_OscConfig+0x2a0>)
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004162:	f7fe fd93 	bl	8002c8c <HAL_GetTick>
 8004166:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800416a:	f7fe fd8f 	bl	8002c8c <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e16c      	b.n	8004456 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417c:	4b39      	ldr	r3, [pc, #228]	; (8004264 <HAL_RCC_OscConfig+0x298>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1f0      	bne.n	800416a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d030      	beq.n	80041f6 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d016      	beq.n	80041ca <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800419c:	4b34      	ldr	r3, [pc, #208]	; (8004270 <HAL_RCC_OscConfig+0x2a4>)
 800419e:	2201      	movs	r2, #1
 80041a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a2:	f7fe fd73 	bl	8002c8c <HAL_GetTick>
 80041a6:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041a8:	e008      	b.n	80041bc <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041aa:	f7fe fd6f 	bl	8002c8c <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e14c      	b.n	8004456 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041bc:	4b29      	ldr	r3, [pc, #164]	; (8004264 <HAL_RCC_OscConfig+0x298>)
 80041be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d0f0      	beq.n	80041aa <HAL_RCC_OscConfig+0x1de>
 80041c8:	e015      	b.n	80041f6 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ca:	4b29      	ldr	r3, [pc, #164]	; (8004270 <HAL_RCC_OscConfig+0x2a4>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d0:	f7fe fd5c 	bl	8002c8c <HAL_GetTick>
 80041d4:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041d8:	f7fe fd58 	bl	8002c8c <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	6a3b      	ldr	r3, [r7, #32]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e135      	b.n	8004456 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ea:	4b1e      	ldr	r3, [pc, #120]	; (8004264 <HAL_RCC_OscConfig+0x298>)
 80041ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f0      	bne.n	80041d8 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 8087 	beq.w	8004312 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004204:	2300      	movs	r3, #0
 8004206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800420a:	4b16      	ldr	r3, [pc, #88]	; (8004264 <HAL_RCC_OscConfig+0x298>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d110      	bne.n	8004238 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004216:	2300      	movs	r3, #0
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	4b12      	ldr	r3, [pc, #72]	; (8004264 <HAL_RCC_OscConfig+0x298>)
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	4a11      	ldr	r2, [pc, #68]	; (8004264 <HAL_RCC_OscConfig+0x298>)
 8004220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004224:	6413      	str	r3, [r2, #64]	; 0x40
 8004226:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <HAL_RCC_OscConfig+0x298>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422e:	60bb      	str	r3, [r7, #8]
 8004230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004232:	2301      	movs	r3, #1
 8004234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004238:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <HAL_RCC_OscConfig+0x2a8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a0d      	ldr	r2, [pc, #52]	; (8004274 <HAL_RCC_OscConfig+0x2a8>)
 800423e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004242:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_RCC_OscConfig+0x2a8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d122      	bne.n	8004296 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004250:	4b08      	ldr	r3, [pc, #32]	; (8004274 <HAL_RCC_OscConfig+0x2a8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a07      	ldr	r2, [pc, #28]	; (8004274 <HAL_RCC_OscConfig+0x2a8>)
 8004256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800425c:	f7fe fd16 	bl	8002c8c <HAL_GetTick>
 8004260:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004262:	e012      	b.n	800428a <HAL_RCC_OscConfig+0x2be>
 8004264:	40023800 	.word	0x40023800
 8004268:	40023802 	.word	0x40023802
 800426c:	42470000 	.word	0x42470000
 8004270:	42470e80 	.word	0x42470e80
 8004274:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004278:	f7fe fd08 	bl	8002c8c <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e0e5      	b.n	8004456 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428a:	4b75      	ldr	r3, [pc, #468]	; (8004460 <HAL_RCC_OscConfig+0x494>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0f0      	beq.n	8004278 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689a      	ldr	r2, [r3, #8]
 800429a:	4b72      	ldr	r3, [pc, #456]	; (8004464 <HAL_RCC_OscConfig+0x498>)
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d015      	beq.n	80042d4 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a8:	f7fe fcf0 	bl	8002c8c <HAL_GetTick>
 80042ac:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b0:	f7fe fcec 	bl	8002c8c <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e0c7      	b.n	8004456 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c6:	4b68      	ldr	r3, [pc, #416]	; (8004468 <HAL_RCC_OscConfig+0x49c>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0ee      	beq.n	80042b0 <HAL_RCC_OscConfig+0x2e4>
 80042d2:	e014      	b.n	80042fe <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d4:	f7fe fcda 	bl	8002c8c <HAL_GetTick>
 80042d8:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042da:	e00a      	b.n	80042f2 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042dc:	f7fe fcd6 	bl	8002c8c <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e0b1      	b.n	8004456 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f2:	4b5d      	ldr	r3, [pc, #372]	; (8004468 <HAL_RCC_OscConfig+0x49c>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1ee      	bne.n	80042dc <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004302:	2b01      	cmp	r3, #1
 8004304:	d105      	bne.n	8004312 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004306:	4b58      	ldr	r3, [pc, #352]	; (8004468 <HAL_RCC_OscConfig+0x49c>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	4a57      	ldr	r2, [pc, #348]	; (8004468 <HAL_RCC_OscConfig+0x49c>)
 800430c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004310:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 809c 	beq.w	8004454 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800431c:	4b52      	ldr	r3, [pc, #328]	; (8004468 <HAL_RCC_OscConfig+0x49c>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 030c 	and.w	r3, r3, #12
 8004324:	2b08      	cmp	r3, #8
 8004326:	d061      	beq.n	80043ec <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	2b02      	cmp	r3, #2
 800432e:	d146      	bne.n	80043be <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004330:	4b4e      	ldr	r3, [pc, #312]	; (800446c <HAL_RCC_OscConfig+0x4a0>)
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004336:	f7fe fca9 	bl	8002c8c <HAL_GetTick>
 800433a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800433e:	f7fe fca5 	bl	8002c8c <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b64      	cmp	r3, #100	; 0x64
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e082      	b.n	8004456 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004350:	4b45      	ldr	r3, [pc, #276]	; (8004468 <HAL_RCC_OscConfig+0x49c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1f0      	bne.n	800433e <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800435c:	4b42      	ldr	r3, [pc, #264]	; (8004468 <HAL_RCC_OscConfig+0x49c>)
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	4b43      	ldr	r3, [pc, #268]	; (8004470 <HAL_RCC_OscConfig+0x4a4>)
 8004362:	4013      	ands	r3, r2
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	69d1      	ldr	r1, [r2, #28]
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6a12      	ldr	r2, [r2, #32]
 800436c:	4311      	orrs	r1, r2
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004372:	0192      	lsls	r2, r2, #6
 8004374:	4311      	orrs	r1, r2
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800437a:	0612      	lsls	r2, r2, #24
 800437c:	4311      	orrs	r1, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004382:	0852      	lsrs	r2, r2, #1
 8004384:	3a01      	subs	r2, #1
 8004386:	0412      	lsls	r2, r2, #16
 8004388:	430a      	orrs	r2, r1
 800438a:	4937      	ldr	r1, [pc, #220]	; (8004468 <HAL_RCC_OscConfig+0x49c>)
 800438c:	4313      	orrs	r3, r2
 800438e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004390:	4b36      	ldr	r3, [pc, #216]	; (800446c <HAL_RCC_OscConfig+0x4a0>)
 8004392:	2201      	movs	r2, #1
 8004394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004396:	f7fe fc79 	bl	8002c8c <HAL_GetTick>
 800439a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800439c:	e008      	b.n	80043b0 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800439e:	f7fe fc75 	bl	8002c8c <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b64      	cmp	r3, #100	; 0x64
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e052      	b.n	8004456 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b0:	4b2d      	ldr	r3, [pc, #180]	; (8004468 <HAL_RCC_OscConfig+0x49c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0f0      	beq.n	800439e <HAL_RCC_OscConfig+0x3d2>
 80043bc:	e04a      	b.n	8004454 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043be:	4b2b      	ldr	r3, [pc, #172]	; (800446c <HAL_RCC_OscConfig+0x4a0>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c4:	f7fe fc62 	bl	8002c8c <HAL_GetTick>
 80043c8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043cc:	f7fe fc5e 	bl	8002c8c <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b64      	cmp	r3, #100	; 0x64
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e03b      	b.n	8004456 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043de:	4b22      	ldr	r3, [pc, #136]	; (8004468 <HAL_RCC_OscConfig+0x49c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f0      	bne.n	80043cc <HAL_RCC_OscConfig+0x400>
 80043ea:	e033      	b.n	8004454 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d101      	bne.n	80043f8 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e02e      	b.n	8004456 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80043f8:	4b1b      	ldr	r3, [pc, #108]	; (8004468 <HAL_RCC_OscConfig+0x49c>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	429a      	cmp	r2, r3
 800440a:	d121      	bne.n	8004450 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004416:	429a      	cmp	r2, r3
 8004418:	d11a      	bne.n	8004450 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800441a:	69fa      	ldr	r2, [r7, #28]
 800441c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004420:	4013      	ands	r3, r2
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004426:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004428:	4293      	cmp	r3, r2
 800442a:	d111      	bne.n	8004450 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	085b      	lsrs	r3, r3, #1
 8004438:	3b01      	subs	r3, #1
 800443a:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800443c:	429a      	cmp	r2, r3
 800443e:	d107      	bne.n	8004450 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800444c:	429a      	cmp	r2, r3
 800444e:	d001      	beq.n	8004454 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e000      	b.n	8004456 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3728      	adds	r7, #40	; 0x28
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	40007000 	.word	0x40007000
 8004464:	40023870 	.word	0x40023870
 8004468:	40023800 	.word	0x40023800
 800446c:	42470060 	.word	0x42470060
 8004470:	f0bc8000 	.word	0xf0bc8000

08004474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d101      	bne.n	8004488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0d2      	b.n	800462e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004488:	4b6b      	ldr	r3, [pc, #428]	; (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 030f 	and.w	r3, r3, #15
 8004490:	683a      	ldr	r2, [r7, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d90c      	bls.n	80044b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004496:	4b68      	ldr	r3, [pc, #416]	; (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800449e:	4b66      	ldr	r3, [pc, #408]	; (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d001      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e0be      	b.n	800462e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d020      	beq.n	80044fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044c8:	4b5c      	ldr	r3, [pc, #368]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	4a5b      	ldr	r2, [pc, #364]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 80044ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80044e0:	4b56      	ldr	r3, [pc, #344]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	4a55      	ldr	r2, [pc, #340]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 80044e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ec:	4b53      	ldr	r3, [pc, #332]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	4950      	ldr	r1, [pc, #320]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d040      	beq.n	800458c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d107      	bne.n	8004522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004512:	4b4a      	ldr	r3, [pc, #296]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d115      	bne.n	800454a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e085      	b.n	800462e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b02      	cmp	r3, #2
 8004528:	d107      	bne.n	800453a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800452a:	4b44      	ldr	r3, [pc, #272]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d109      	bne.n	800454a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e079      	b.n	800462e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800453a:	4b40      	ldr	r3, [pc, #256]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e071      	b.n	800462e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800454a:	4b3c      	ldr	r3, [pc, #240]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f023 0203 	bic.w	r2, r3, #3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	4939      	ldr	r1, [pc, #228]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 8004558:	4313      	orrs	r3, r2
 800455a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800455c:	f7fe fb96 	bl	8002c8c <HAL_GetTick>
 8004560:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004562:	e00a      	b.n	800457a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004564:	f7fe fb92 	bl	8002c8c <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004572:	4293      	cmp	r3, r2
 8004574:	d901      	bls.n	800457a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e059      	b.n	800462e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457a:	4b30      	ldr	r3, [pc, #192]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 020c 	and.w	r2, r3, #12
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	429a      	cmp	r2, r3
 800458a:	d1eb      	bne.n	8004564 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800458c:	4b2a      	ldr	r3, [pc, #168]	; (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 030f 	and.w	r3, r3, #15
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	429a      	cmp	r2, r3
 8004598:	d20c      	bcs.n	80045b4 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800459a:	4b27      	ldr	r3, [pc, #156]	; (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	b2d2      	uxtb	r2, r2
 80045a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a2:	4b25      	ldr	r3, [pc, #148]	; (8004638 <HAL_RCC_ClockConfig+0x1c4>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d001      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e03c      	b.n	800462e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0304 	and.w	r3, r3, #4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045c0:	4b1e      	ldr	r3, [pc, #120]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	491b      	ldr	r1, [pc, #108]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0308 	and.w	r3, r3, #8
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d009      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045de:	4b17      	ldr	r3, [pc, #92]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4913      	ldr	r1, [pc, #76]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80045f2:	f000 f82b 	bl	800464c <HAL_RCC_GetSysClockFreq>
 80045f6:	4601      	mov	r1, r0
 80045f8:	4b10      	ldr	r3, [pc, #64]	; (800463c <HAL_RCC_ClockConfig+0x1c8>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004600:	22f0      	movs	r2, #240	; 0xf0
 8004602:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	fa92 f2a2 	rbit	r2, r2
 800460a:	60fa      	str	r2, [r7, #12]
  return result;
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	fab2 f282 	clz	r2, r2
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	40d3      	lsrs	r3, r2
 8004616:	4a0a      	ldr	r2, [pc, #40]	; (8004640 <HAL_RCC_ClockConfig+0x1cc>)
 8004618:	5cd3      	ldrb	r3, [r2, r3]
 800461a:	fa21 f303 	lsr.w	r3, r1, r3
 800461e:	4a09      	ldr	r2, [pc, #36]	; (8004644 <HAL_RCC_ClockConfig+0x1d0>)
 8004620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004622:	4b09      	ldr	r3, [pc, #36]	; (8004648 <HAL_RCC_ClockConfig+0x1d4>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe faee 	bl	8002c08 <HAL_InitTick>

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	40023c00 	.word	0x40023c00
 800463c:	40023800 	.word	0x40023800
 8004640:	080092c4 	.word	0x080092c4
 8004644:	20000064 	.word	0x20000064
 8004648:	20000068 	.word	0x20000068

0800464c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800464c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004650:	b090      	sub	sp, #64	; 0x40
 8004652:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	637b      	str	r3, [r7, #52]	; 0x34
 8004658:	2300      	movs	r3, #0
 800465a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800465c:	2300      	movs	r3, #0
 800465e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004664:	4b59      	ldr	r3, [pc, #356]	; (80047cc <HAL_RCC_GetSysClockFreq+0x180>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f003 030c 	and.w	r3, r3, #12
 800466c:	2b08      	cmp	r3, #8
 800466e:	d00d      	beq.n	800468c <HAL_RCC_GetSysClockFreq+0x40>
 8004670:	2b08      	cmp	r3, #8
 8004672:	f200 80a2 	bhi.w	80047ba <HAL_RCC_GetSysClockFreq+0x16e>
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <HAL_RCC_GetSysClockFreq+0x34>
 800467a:	2b04      	cmp	r3, #4
 800467c:	d003      	beq.n	8004686 <HAL_RCC_GetSysClockFreq+0x3a>
 800467e:	e09c      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004680:	4b53      	ldr	r3, [pc, #332]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004682:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004684:	e09c      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004686:	4b53      	ldr	r3, [pc, #332]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004688:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800468a:	e099      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800468c:	4b4f      	ldr	r3, [pc, #316]	; (80047cc <HAL_RCC_GetSysClockFreq+0x180>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004694:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004696:	4b4d      	ldr	r3, [pc, #308]	; (80047cc <HAL_RCC_GetSysClockFreq+0x180>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d027      	beq.n	80046f2 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046a2:	4b4a      	ldr	r3, [pc, #296]	; (80047cc <HAL_RCC_GetSysClockFreq+0x180>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	099b      	lsrs	r3, r3, #6
 80046a8:	2200      	movs	r2, #0
 80046aa:	623b      	str	r3, [r7, #32]
 80046ac:	627a      	str	r2, [r7, #36]	; 0x24
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046b4:	2100      	movs	r1, #0
 80046b6:	4b47      	ldr	r3, [pc, #284]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80046b8:	fb03 f201 	mul.w	r2, r3, r1
 80046bc:	2300      	movs	r3, #0
 80046be:	fb00 f303 	mul.w	r3, r0, r3
 80046c2:	4413      	add	r3, r2
 80046c4:	4a43      	ldr	r2, [pc, #268]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80046c6:	fba0 2102 	umull	r2, r1, r0, r2
 80046ca:	62f9      	str	r1, [r7, #44]	; 0x2c
 80046cc:	62ba      	str	r2, [r7, #40]	; 0x28
 80046ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046d0:	4413      	add	r3, r2
 80046d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d6:	2200      	movs	r2, #0
 80046d8:	61bb      	str	r3, [r7, #24]
 80046da:	61fa      	str	r2, [r7, #28]
 80046dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046e4:	f7fc fa2c 	bl	8000b40 <__aeabi_uldivmod>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4613      	mov	r3, r2
 80046ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046f0:	e055      	b.n	800479e <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046f2:	4b36      	ldr	r3, [pc, #216]	; (80047cc <HAL_RCC_GetSysClockFreq+0x180>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	099b      	lsrs	r3, r3, #6
 80046f8:	2200      	movs	r2, #0
 80046fa:	613b      	str	r3, [r7, #16]
 80046fc:	617a      	str	r2, [r7, #20]
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004704:	f04f 0b00 	mov.w	fp, #0
 8004708:	4652      	mov	r2, sl
 800470a:	465b      	mov	r3, fp
 800470c:	f04f 0000 	mov.w	r0, #0
 8004710:	f04f 0100 	mov.w	r1, #0
 8004714:	0159      	lsls	r1, r3, #5
 8004716:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800471a:	0150      	lsls	r0, r2, #5
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	ebb2 080a 	subs.w	r8, r2, sl
 8004724:	eb63 090b 	sbc.w	r9, r3, fp
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	f04f 0300 	mov.w	r3, #0
 8004730:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004734:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004738:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800473c:	ebb2 0408 	subs.w	r4, r2, r8
 8004740:	eb63 0509 	sbc.w	r5, r3, r9
 8004744:	f04f 0200 	mov.w	r2, #0
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	00eb      	lsls	r3, r5, #3
 800474e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004752:	00e2      	lsls	r2, r4, #3
 8004754:	4614      	mov	r4, r2
 8004756:	461d      	mov	r5, r3
 8004758:	eb14 030a 	adds.w	r3, r4, sl
 800475c:	603b      	str	r3, [r7, #0]
 800475e:	eb45 030b 	adc.w	r3, r5, fp
 8004762:	607b      	str	r3, [r7, #4]
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004770:	4629      	mov	r1, r5
 8004772:	028b      	lsls	r3, r1, #10
 8004774:	4620      	mov	r0, r4
 8004776:	4629      	mov	r1, r5
 8004778:	4604      	mov	r4, r0
 800477a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800477e:	4601      	mov	r1, r0
 8004780:	028a      	lsls	r2, r1, #10
 8004782:	4610      	mov	r0, r2
 8004784:	4619      	mov	r1, r3
 8004786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004788:	2200      	movs	r2, #0
 800478a:	60bb      	str	r3, [r7, #8]
 800478c:	60fa      	str	r2, [r7, #12]
 800478e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004792:	f7fc f9d5 	bl	8000b40 <__aeabi_uldivmod>
 8004796:	4602      	mov	r2, r0
 8004798:	460b      	mov	r3, r1
 800479a:	4613      	mov	r3, r2
 800479c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800479e:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <HAL_RCC_GetSysClockFreq+0x180>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	0c1b      	lsrs	r3, r3, #16
 80047a4:	f003 0303 	and.w	r3, r3, #3
 80047a8:	3301      	adds	r3, #1
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80047ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047b8:	e002      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047ba:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80047bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3740      	adds	r7, #64	; 0x40
 80047c6:	46bd      	mov	sp, r7
 80047c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047cc:	40023800 	.word	0x40023800
 80047d0:	00f42400 	.word	0x00f42400
 80047d4:	017d7840 	.word	0x017d7840

080047d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e07b      	b.n	80048e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d108      	bne.n	8004804 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047fa:	d009      	beq.n	8004810 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	61da      	str	r2, [r3, #28]
 8004802:	e005      	b.n	8004810 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7fd ff26 	bl	800267c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004846:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004858:	431a      	orrs	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	431a      	orrs	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004880:	431a      	orrs	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004894:	ea42 0103 	orr.w	r1, r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	0c1b      	lsrs	r3, r3, #16
 80048ae:	f003 0104 	and.w	r1, r3, #4
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	f003 0210 	and.w	r2, r3, #16
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	69da      	ldr	r2, [r3, #28]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3708      	adds	r7, #8
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b088      	sub	sp, #32
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	60f8      	str	r0, [r7, #12]
 80048f2:	60b9      	str	r1, [r7, #8]
 80048f4:	603b      	str	r3, [r7, #0]
 80048f6:	4613      	mov	r3, r2
 80048f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048fa:	2300      	movs	r3, #0
 80048fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_SPI_Transmit+0x22>
 8004908:	2302      	movs	r3, #2
 800490a:	e12d      	b.n	8004b68 <HAL_SPI_Transmit+0x27e>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004914:	f7fe f9ba 	bl	8002c8c <HAL_GetTick>
 8004918:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800491a:	88fb      	ldrh	r3, [r7, #6]
 800491c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b01      	cmp	r3, #1
 8004928:	d002      	beq.n	8004930 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800492a:	2302      	movs	r3, #2
 800492c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800492e:	e116      	b.n	8004b5e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d002      	beq.n	800493c <HAL_SPI_Transmit+0x52>
 8004936:	88fb      	ldrh	r3, [r7, #6]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d102      	bne.n	8004942 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004940:	e10d      	b.n	8004b5e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2203      	movs	r2, #3
 8004946:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	88fa      	ldrh	r2, [r7, #6]
 800495a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	88fa      	ldrh	r2, [r7, #6]
 8004960:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004988:	d10f      	bne.n	80049aa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004998:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b4:	2b40      	cmp	r3, #64	; 0x40
 80049b6:	d007      	beq.n	80049c8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d0:	d14f      	bne.n	8004a72 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d002      	beq.n	80049e0 <HAL_SPI_Transmit+0xf6>
 80049da:	8afb      	ldrh	r3, [r7, #22]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d142      	bne.n	8004a66 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e4:	881a      	ldrh	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	1c9a      	adds	r2, r3, #2
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a04:	e02f      	b.n	8004a66 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d112      	bne.n	8004a3a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	881a      	ldrh	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a24:	1c9a      	adds	r2, r3, #2
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a38:	e015      	b.n	8004a66 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a3a:	f7fe f927 	bl	8002c8c <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d803      	bhi.n	8004a52 <HAL_SPI_Transmit+0x168>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a50:	d102      	bne.n	8004a58 <HAL_SPI_Transmit+0x16e>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d106      	bne.n	8004a66 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004a64:	e07b      	b.n	8004b5e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1ca      	bne.n	8004a06 <HAL_SPI_Transmit+0x11c>
 8004a70:	e050      	b.n	8004b14 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <HAL_SPI_Transmit+0x196>
 8004a7a:	8afb      	ldrh	r3, [r7, #22]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d144      	bne.n	8004b0a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	330c      	adds	r3, #12
 8004a8a:	7812      	ldrb	r2, [r2, #0]
 8004a8c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004aa6:	e030      	b.n	8004b0a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d113      	bne.n	8004ade <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	330c      	adds	r3, #12
 8004ac0:	7812      	ldrb	r2, [r2, #0]
 8004ac2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	86da      	strh	r2, [r3, #54]	; 0x36
 8004adc:	e015      	b.n	8004b0a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ade:	f7fe f8d5 	bl	8002c8c <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d803      	bhi.n	8004af6 <HAL_SPI_Transmit+0x20c>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af4:	d102      	bne.n	8004afc <HAL_SPI_Transmit+0x212>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d106      	bne.n	8004b0a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004b08:	e029      	b.n	8004b5e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1c9      	bne.n	8004aa8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	6839      	ldr	r1, [r7, #0]
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 fbae 	bl	800527a <SPI_EndRxTxTransaction>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2220      	movs	r2, #32
 8004b28:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10a      	bne.n	8004b48 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b32:	2300      	movs	r3, #0
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	613b      	str	r3, [r7, #16]
 8004b46:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	77fb      	strb	r3, [r7, #31]
 8004b54:	e003      	b.n	8004b5e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b66:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3720      	adds	r7, #32
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af02      	add	r7, sp, #8
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	603b      	str	r3, [r7, #0]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d002      	beq.n	8004b96 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004b90:	2302      	movs	r3, #2
 8004b92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b94:	e0fb      	b.n	8004d8e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b9e:	d112      	bne.n	8004bc6 <HAL_SPI_Receive+0x56>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10e      	bne.n	8004bc6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2204      	movs	r2, #4
 8004bac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004bb0:	88fa      	ldrh	r2, [r7, #6]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	68b9      	ldr	r1, [r7, #8]
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 f8ef 	bl	8004da0 <HAL_SPI_TransmitReceive>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	e0e8      	b.n	8004d98 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_SPI_Receive+0x64>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e0e1      	b.n	8004d98 <HAL_SPI_Receive+0x228>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bdc:	f7fe f856 	bl	8002c8c <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <HAL_SPI_Receive+0x7e>
 8004be8:	88fb      	ldrh	r3, [r7, #6]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d102      	bne.n	8004bf4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bf2:	e0cc      	b.n	8004d8e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2204      	movs	r2, #4
 8004bf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	88fa      	ldrh	r2, [r7, #6]
 8004c0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	88fa      	ldrh	r2, [r7, #6]
 8004c12:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c3a:	d10f      	bne.n	8004c5c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c4a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c5a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c66:	2b40      	cmp	r3, #64	; 0x40
 8004c68:	d007      	beq.n	8004c7a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c78:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d16a      	bne.n	8004d58 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c82:	e032      	b.n	8004cea <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d115      	bne.n	8004cbe <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f103 020c 	add.w	r2, r3, #12
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9e:	7812      	ldrb	r2, [r2, #0]
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cbc:	e015      	b.n	8004cea <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cbe:	f7fd ffe5 	bl	8002c8c <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d803      	bhi.n	8004cd6 <HAL_SPI_Receive+0x166>
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd4:	d102      	bne.n	8004cdc <HAL_SPI_Receive+0x16c>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d106      	bne.n	8004cea <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004ce8:	e051      	b.n	8004d8e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1c7      	bne.n	8004c84 <HAL_SPI_Receive+0x114>
 8004cf4:	e035      	b.n	8004d62 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d113      	bne.n	8004d2c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	b292      	uxth	r2, r2
 8004d10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d16:	1c9a      	adds	r2, r3, #2
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d2a:	e015      	b.n	8004d58 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d2c:	f7fd ffae 	bl	8002c8c <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d803      	bhi.n	8004d44 <HAL_SPI_Receive+0x1d4>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d42:	d102      	bne.n	8004d4a <HAL_SPI_Receive+0x1da>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d106      	bne.n	8004d58 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004d56:	e01a      	b.n	8004d8e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1c9      	bne.n	8004cf6 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	6839      	ldr	r1, [r7, #0]
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 fa52 	bl	8005210 <SPI_EndRxTransaction>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2220      	movs	r2, #32
 8004d76:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d002      	beq.n	8004d86 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	75fb      	strb	r3, [r7, #23]
 8004d84:	e003      	b.n	8004d8e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b08c      	sub	sp, #48	; 0x30
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]
 8004dac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004dae:	2301      	movs	r3, #1
 8004db0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d101      	bne.n	8004dc6 <HAL_SPI_TransmitReceive+0x26>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	e198      	b.n	80050f8 <HAL_SPI_TransmitReceive+0x358>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004dce:	f7fd ff5d 	bl	8002c8c <HAL_GetTick>
 8004dd2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004de4:	887b      	ldrh	r3, [r7, #2]
 8004de6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004de8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d00f      	beq.n	8004e10 <HAL_SPI_TransmitReceive+0x70>
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004df6:	d107      	bne.n	8004e08 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d103      	bne.n	8004e08 <HAL_SPI_TransmitReceive+0x68>
 8004e00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e04:	2b04      	cmp	r3, #4
 8004e06:	d003      	beq.n	8004e10 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004e08:	2302      	movs	r3, #2
 8004e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e0e:	e16d      	b.n	80050ec <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <HAL_SPI_TransmitReceive+0x82>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <HAL_SPI_TransmitReceive+0x82>
 8004e1c:	887b      	ldrh	r3, [r7, #2]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d103      	bne.n	8004e2a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e28:	e160      	b.n	80050ec <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d003      	beq.n	8004e3e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2205      	movs	r2, #5
 8004e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	887a      	ldrh	r2, [r7, #2]
 8004e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	887a      	ldrh	r2, [r7, #2]
 8004e54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	887a      	ldrh	r2, [r7, #2]
 8004e60:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	887a      	ldrh	r2, [r7, #2]
 8004e66:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7e:	2b40      	cmp	r3, #64	; 0x40
 8004e80:	d007      	beq.n	8004e92 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e90:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e9a:	d17c      	bne.n	8004f96 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <HAL_SPI_TransmitReceive+0x10a>
 8004ea4:	8b7b      	ldrh	r3, [r7, #26]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d16a      	bne.n	8004f80 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	881a      	ldrh	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	1c9a      	adds	r2, r3, #2
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ece:	e057      	b.n	8004f80 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d11b      	bne.n	8004f16 <HAL_SPI_TransmitReceive+0x176>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d016      	beq.n	8004f16 <HAL_SPI_TransmitReceive+0x176>
 8004ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d113      	bne.n	8004f16 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	881a      	ldrh	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	1c9a      	adds	r2, r3, #2
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	b29a      	uxth	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f12:	2300      	movs	r3, #0
 8004f14:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d119      	bne.n	8004f58 <HAL_SPI_TransmitReceive+0x1b8>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d014      	beq.n	8004f58 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68da      	ldr	r2, [r3, #12]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f38:	b292      	uxth	r2, r2
 8004f3a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f40:	1c9a      	adds	r2, r3, #2
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f54:	2301      	movs	r3, #1
 8004f56:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f58:	f7fd fe98 	bl	8002c8c <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d80b      	bhi.n	8004f80 <HAL_SPI_TransmitReceive+0x1e0>
 8004f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6e:	d007      	beq.n	8004f80 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004f7e:	e0b5      	b.n	80050ec <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1a2      	bne.n	8004ed0 <HAL_SPI_TransmitReceive+0x130>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d19d      	bne.n	8004ed0 <HAL_SPI_TransmitReceive+0x130>
 8004f94:	e080      	b.n	8005098 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <HAL_SPI_TransmitReceive+0x204>
 8004f9e:	8b7b      	ldrh	r3, [r7, #26]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d16f      	bne.n	8005084 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	330c      	adds	r3, #12
 8004fae:	7812      	ldrb	r2, [r2, #0]
 8004fb0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	1c5a      	adds	r2, r3, #1
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fca:	e05b      	b.n	8005084 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d11c      	bne.n	8005014 <HAL_SPI_TransmitReceive+0x274>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d017      	beq.n	8005014 <HAL_SPI_TransmitReceive+0x274>
 8004fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d114      	bne.n	8005014 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	330c      	adds	r3, #12
 8004ff4:	7812      	ldrb	r2, [r2, #0]
 8004ff6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005006:	b29b      	uxth	r3, r3
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005010:	2300      	movs	r3, #0
 8005012:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	2b01      	cmp	r3, #1
 8005020:	d119      	bne.n	8005056 <HAL_SPI_TransmitReceive+0x2b6>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d014      	beq.n	8005056 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005048:	b29b      	uxth	r3, r3
 800504a:	3b01      	subs	r3, #1
 800504c:	b29a      	uxth	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005052:	2301      	movs	r3, #1
 8005054:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005056:	f7fd fe19 	bl	8002c8c <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005062:	429a      	cmp	r2, r3
 8005064:	d803      	bhi.n	800506e <HAL_SPI_TransmitReceive+0x2ce>
 8005066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506c:	d102      	bne.n	8005074 <HAL_SPI_TransmitReceive+0x2d4>
 800506e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005070:	2b00      	cmp	r3, #0
 8005072:	d107      	bne.n	8005084 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005082:	e033      	b.n	80050ec <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005088:	b29b      	uxth	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d19e      	bne.n	8004fcc <HAL_SPI_TransmitReceive+0x22c>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005092:	b29b      	uxth	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d199      	bne.n	8004fcc <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 f8ec 	bl	800527a <SPI_EndRxTxTransaction>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d006      	beq.n	80050b6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2220      	movs	r2, #32
 80050b2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80050b4:	e01a      	b.n	80050ec <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10a      	bne.n	80050d4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050be:	2300      	movs	r3, #0
 80050c0:	617b      	str	r3, [r7, #20]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050e2:	e003      	b.n	80050ec <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3730      	adds	r7, #48	; 0x30
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	4613      	mov	r3, r2
 800510e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005110:	f7fd fdbc 	bl	8002c8c <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005118:	1a9b      	subs	r3, r3, r2
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	4413      	add	r3, r2
 800511e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005120:	f7fd fdb4 	bl	8002c8c <HAL_GetTick>
 8005124:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005126:	4b39      	ldr	r3, [pc, #228]	; (800520c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	015b      	lsls	r3, r3, #5
 800512c:	0d1b      	lsrs	r3, r3, #20
 800512e:	69fa      	ldr	r2, [r7, #28]
 8005130:	fb02 f303 	mul.w	r3, r2, r3
 8005134:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005136:	e054      	b.n	80051e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513e:	d050      	beq.n	80051e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005140:	f7fd fda4 	bl	8002c8c <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	69fa      	ldr	r2, [r7, #28]
 800514c:	429a      	cmp	r2, r3
 800514e:	d902      	bls.n	8005156 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d13d      	bne.n	80051d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005164:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800516e:	d111      	bne.n	8005194 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005178:	d004      	beq.n	8005184 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005182:	d107      	bne.n	8005194 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005192:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800519c:	d10f      	bne.n	80051be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e017      	b.n	8005202 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	3b01      	subs	r3, #1
 80051e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	4013      	ands	r3, r2
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	bf0c      	ite	eq
 80051f2:	2301      	moveq	r3, #1
 80051f4:	2300      	movne	r3, #0
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	461a      	mov	r2, r3
 80051fa:	79fb      	ldrb	r3, [r7, #7]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d19b      	bne.n	8005138 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3720      	adds	r7, #32
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	20000064 	.word	0x20000064

08005210 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b086      	sub	sp, #24
 8005214:	af02      	add	r7, sp, #8
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005224:	d111      	bne.n	800524a <SPI_EndRxTransaction+0x3a>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800522e:	d004      	beq.n	800523a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005238:	d107      	bne.n	800524a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005248:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2200      	movs	r2, #0
 8005252:	2180      	movs	r1, #128	; 0x80
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f7ff ff53 	bl	8005100 <SPI_WaitFlagStateUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d007      	beq.n	8005270 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005264:	f043 0220 	orr.w	r2, r3, #32
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e000      	b.n	8005272 <SPI_EndRxTransaction+0x62>
  }
  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b086      	sub	sp, #24
 800527e:	af02      	add	r7, sp, #8
 8005280:	60f8      	str	r0, [r7, #12]
 8005282:	60b9      	str	r1, [r7, #8]
 8005284:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	2200      	movs	r2, #0
 800528e:	2180      	movs	r1, #128	; 0x80
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f7ff ff35 	bl	8005100 <SPI_WaitFlagStateUntilTimeout>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d007      	beq.n	80052ac <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a0:	f043 0220 	orr.w	r2, r3, #32
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e000      	b.n	80052ae <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b082      	sub	sp, #8
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d101      	bne.n	80052c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e041      	b.n	800534c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d106      	bne.n	80052e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7fd fb9d 	bl	8002a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2202      	movs	r2, #2
 80052e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3304      	adds	r3, #4
 80052f2:	4619      	mov	r1, r3
 80052f4:	4610      	mov	r0, r2
 80052f6:	f000 fa8f 	bl	8005818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b01      	cmp	r3, #1
 8005366:	d001      	beq.n	800536c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e04e      	b.n	800540a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f042 0201 	orr.w	r2, r2, #1
 8005382:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a22      	ldr	r2, [pc, #136]	; (8005414 <HAL_TIM_Base_Start_IT+0xc0>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d022      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0x80>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005396:	d01d      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0x80>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a1e      	ldr	r2, [pc, #120]	; (8005418 <HAL_TIM_Base_Start_IT+0xc4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d018      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0x80>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1d      	ldr	r2, [pc, #116]	; (800541c <HAL_TIM_Base_Start_IT+0xc8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d013      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0x80>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a1b      	ldr	r2, [pc, #108]	; (8005420 <HAL_TIM_Base_Start_IT+0xcc>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00e      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0x80>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a1a      	ldr	r2, [pc, #104]	; (8005424 <HAL_TIM_Base_Start_IT+0xd0>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d009      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0x80>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a18      	ldr	r2, [pc, #96]	; (8005428 <HAL_TIM_Base_Start_IT+0xd4>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d004      	beq.n	80053d4 <HAL_TIM_Base_Start_IT+0x80>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a17      	ldr	r2, [pc, #92]	; (800542c <HAL_TIM_Base_Start_IT+0xd8>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d111      	bne.n	80053f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 0307 	and.w	r3, r3, #7
 80053de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2b06      	cmp	r3, #6
 80053e4:	d010      	beq.n	8005408 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f042 0201 	orr.w	r2, r2, #1
 80053f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f6:	e007      	b.n	8005408 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0201 	orr.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	bc80      	pop	{r7}
 8005412:	4770      	bx	lr
 8005414:	40010000 	.word	0x40010000
 8005418:	40000400 	.word	0x40000400
 800541c:	40000800 	.word	0x40000800
 8005420:	40000c00 	.word	0x40000c00
 8005424:	40010400 	.word	0x40010400
 8005428:	40014000 	.word	0x40014000
 800542c:	40001800 	.word	0x40001800

08005430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b02      	cmp	r3, #2
 8005444:	d122      	bne.n	800548c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b02      	cmp	r3, #2
 8005452:	d11b      	bne.n	800548c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0202 	mvn.w	r2, #2
 800545c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f9b4 	bl	80057e0 <HAL_TIM_IC_CaptureCallback>
 8005478:	e005      	b.n	8005486 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f9a7 	bl	80057ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f9b6 	bl	80057f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	2b04      	cmp	r3, #4
 8005498:	d122      	bne.n	80054e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	d11b      	bne.n	80054e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0204 	mvn.w	r2, #4
 80054b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2202      	movs	r2, #2
 80054b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f98a 	bl	80057e0 <HAL_TIM_IC_CaptureCallback>
 80054cc:	e005      	b.n	80054da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f97d 	bl	80057ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f98c 	bl	80057f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b08      	cmp	r3, #8
 80054ec:	d122      	bne.n	8005534 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d11b      	bne.n	8005534 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f06f 0208 	mvn.w	r2, #8
 8005504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2204      	movs	r2, #4
 800550a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	69db      	ldr	r3, [r3, #28]
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 f960 	bl	80057e0 <HAL_TIM_IC_CaptureCallback>
 8005520:	e005      	b.n	800552e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f953 	bl	80057ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f962 	bl	80057f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	f003 0310 	and.w	r3, r3, #16
 800553e:	2b10      	cmp	r3, #16
 8005540:	d122      	bne.n	8005588 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f003 0310 	and.w	r3, r3, #16
 800554c:	2b10      	cmp	r3, #16
 800554e:	d11b      	bne.n	8005588 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f06f 0210 	mvn.w	r2, #16
 8005558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2208      	movs	r2, #8
 800555e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f936 	bl	80057e0 <HAL_TIM_IC_CaptureCallback>
 8005574:	e005      	b.n	8005582 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f929 	bl	80057ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f938 	bl	80057f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b01      	cmp	r3, #1
 8005594:	d10e      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d107      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0201 	mvn.w	r2, #1
 80055ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fc f976 	bl	80018a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055be:	2b80      	cmp	r3, #128	; 0x80
 80055c0:	d10e      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055cc:	2b80      	cmp	r3, #128	; 0x80
 80055ce:	d107      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fad3 	bl	8005b86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ea:	2b40      	cmp	r3, #64	; 0x40
 80055ec:	d10e      	bne.n	800560c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f8:	2b40      	cmp	r3, #64	; 0x40
 80055fa:	d107      	bne.n	800560c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f8fc 	bl	8005804 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	f003 0320 	and.w	r3, r3, #32
 8005616:	2b20      	cmp	r3, #32
 8005618:	d10e      	bne.n	8005638 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b20      	cmp	r3, #32
 8005626:	d107      	bne.n	8005638 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f06f 0220 	mvn.w	r2, #32
 8005630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 fa9e 	bl	8005b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005638:	bf00      	nop
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_TIM_ConfigClockSource+0x1c>
 8005658:	2302      	movs	r3, #2
 800565a:	e0b4      	b.n	80057c6 <HAL_TIM_ConfigClockSource+0x186>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800567a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005682:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005694:	d03e      	beq.n	8005714 <HAL_TIM_ConfigClockSource+0xd4>
 8005696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800569a:	f200 8087 	bhi.w	80057ac <HAL_TIM_ConfigClockSource+0x16c>
 800569e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a2:	f000 8086 	beq.w	80057b2 <HAL_TIM_ConfigClockSource+0x172>
 80056a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056aa:	d87f      	bhi.n	80057ac <HAL_TIM_ConfigClockSource+0x16c>
 80056ac:	2b70      	cmp	r3, #112	; 0x70
 80056ae:	d01a      	beq.n	80056e6 <HAL_TIM_ConfigClockSource+0xa6>
 80056b0:	2b70      	cmp	r3, #112	; 0x70
 80056b2:	d87b      	bhi.n	80057ac <HAL_TIM_ConfigClockSource+0x16c>
 80056b4:	2b60      	cmp	r3, #96	; 0x60
 80056b6:	d050      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x11a>
 80056b8:	2b60      	cmp	r3, #96	; 0x60
 80056ba:	d877      	bhi.n	80057ac <HAL_TIM_ConfigClockSource+0x16c>
 80056bc:	2b50      	cmp	r3, #80	; 0x50
 80056be:	d03c      	beq.n	800573a <HAL_TIM_ConfigClockSource+0xfa>
 80056c0:	2b50      	cmp	r3, #80	; 0x50
 80056c2:	d873      	bhi.n	80057ac <HAL_TIM_ConfigClockSource+0x16c>
 80056c4:	2b40      	cmp	r3, #64	; 0x40
 80056c6:	d058      	beq.n	800577a <HAL_TIM_ConfigClockSource+0x13a>
 80056c8:	2b40      	cmp	r3, #64	; 0x40
 80056ca:	d86f      	bhi.n	80057ac <HAL_TIM_ConfigClockSource+0x16c>
 80056cc:	2b30      	cmp	r3, #48	; 0x30
 80056ce:	d064      	beq.n	800579a <HAL_TIM_ConfigClockSource+0x15a>
 80056d0:	2b30      	cmp	r3, #48	; 0x30
 80056d2:	d86b      	bhi.n	80057ac <HAL_TIM_ConfigClockSource+0x16c>
 80056d4:	2b20      	cmp	r3, #32
 80056d6:	d060      	beq.n	800579a <HAL_TIM_ConfigClockSource+0x15a>
 80056d8:	2b20      	cmp	r3, #32
 80056da:	d867      	bhi.n	80057ac <HAL_TIM_ConfigClockSource+0x16c>
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d05c      	beq.n	800579a <HAL_TIM_ConfigClockSource+0x15a>
 80056e0:	2b10      	cmp	r3, #16
 80056e2:	d05a      	beq.n	800579a <HAL_TIM_ConfigClockSource+0x15a>
 80056e4:	e062      	b.n	80057ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056f6:	f000 f9a4 	bl	8005a42 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005708:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68ba      	ldr	r2, [r7, #8]
 8005710:	609a      	str	r2, [r3, #8]
      break;
 8005712:	e04f      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005724:	f000 f98d 	bl	8005a42 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005736:	609a      	str	r2, [r3, #8]
      break;
 8005738:	e03c      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005746:	461a      	mov	r2, r3
 8005748:	f000 f904 	bl	8005954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2150      	movs	r1, #80	; 0x50
 8005752:	4618      	mov	r0, r3
 8005754:	f000 f95b 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 8005758:	e02c      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005766:	461a      	mov	r2, r3
 8005768:	f000 f922 	bl	80059b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2160      	movs	r1, #96	; 0x60
 8005772:	4618      	mov	r0, r3
 8005774:	f000 f94b 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 8005778:	e01c      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005786:	461a      	mov	r2, r3
 8005788:	f000 f8e4 	bl	8005954 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2140      	movs	r1, #64	; 0x40
 8005792:	4618      	mov	r0, r3
 8005794:	f000 f93b 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 8005798:	e00c      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4619      	mov	r1, r3
 80057a4:	4610      	mov	r0, r2
 80057a6:	f000 f932 	bl	8005a0e <TIM_ITRx_SetConfig>
      break;
 80057aa:	e003      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	73fb      	strb	r3, [r7, #15]
      break;
 80057b0:	e000      	b.n	80057b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80057b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr

080057e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bc80      	pop	{r7}
 80057f0:	4770      	bx	lr

080057f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057fa:	bf00      	nop
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	bc80      	pop	{r7}
 8005802:	4770      	bx	lr

08005804 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	bc80      	pop	{r7}
 8005814:	4770      	bx	lr
	...

08005818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a3f      	ldr	r2, [pc, #252]	; (8005928 <TIM_Base_SetConfig+0x110>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d013      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005836:	d00f      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a3c      	ldr	r2, [pc, #240]	; (800592c <TIM_Base_SetConfig+0x114>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00b      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a3b      	ldr	r2, [pc, #236]	; (8005930 <TIM_Base_SetConfig+0x118>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d007      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a3a      	ldr	r2, [pc, #232]	; (8005934 <TIM_Base_SetConfig+0x11c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d003      	beq.n	8005858 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a39      	ldr	r2, [pc, #228]	; (8005938 <TIM_Base_SetConfig+0x120>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d108      	bne.n	800586a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a2e      	ldr	r2, [pc, #184]	; (8005928 <TIM_Base_SetConfig+0x110>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d02b      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005878:	d027      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a2b      	ldr	r2, [pc, #172]	; (800592c <TIM_Base_SetConfig+0x114>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d023      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a2a      	ldr	r2, [pc, #168]	; (8005930 <TIM_Base_SetConfig+0x118>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d01f      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a29      	ldr	r2, [pc, #164]	; (8005934 <TIM_Base_SetConfig+0x11c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d01b      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a28      	ldr	r2, [pc, #160]	; (8005938 <TIM_Base_SetConfig+0x120>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d017      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a27      	ldr	r2, [pc, #156]	; (800593c <TIM_Base_SetConfig+0x124>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d013      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a26      	ldr	r2, [pc, #152]	; (8005940 <TIM_Base_SetConfig+0x128>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00f      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a25      	ldr	r2, [pc, #148]	; (8005944 <TIM_Base_SetConfig+0x12c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00b      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a24      	ldr	r2, [pc, #144]	; (8005948 <TIM_Base_SetConfig+0x130>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d007      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a23      	ldr	r2, [pc, #140]	; (800594c <TIM_Base_SetConfig+0x134>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d003      	beq.n	80058ca <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a22      	ldr	r2, [pc, #136]	; (8005950 <TIM_Base_SetConfig+0x138>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d108      	bne.n	80058dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a09      	ldr	r2, [pc, #36]	; (8005928 <TIM_Base_SetConfig+0x110>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d003      	beq.n	8005910 <TIM_Base_SetConfig+0xf8>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a0b      	ldr	r2, [pc, #44]	; (8005938 <TIM_Base_SetConfig+0x120>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d103      	bne.n	8005918 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	691a      	ldr	r2, [r3, #16]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	615a      	str	r2, [r3, #20]
}
 800591e:	bf00      	nop
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	bc80      	pop	{r7}
 8005926:	4770      	bx	lr
 8005928:	40010000 	.word	0x40010000
 800592c:	40000400 	.word	0x40000400
 8005930:	40000800 	.word	0x40000800
 8005934:	40000c00 	.word	0x40000c00
 8005938:	40010400 	.word	0x40010400
 800593c:	40014000 	.word	0x40014000
 8005940:	40014400 	.word	0x40014400
 8005944:	40014800 	.word	0x40014800
 8005948:	40001800 	.word	0x40001800
 800594c:	40001c00 	.word	0x40001c00
 8005950:	40002000 	.word	0x40002000

08005954 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005954:	b480      	push	{r7}
 8005956:	b087      	sub	sp, #28
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	f023 0201 	bic.w	r2, r3, #1
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800597e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f023 030a 	bic.w	r3, r3, #10
 8005990:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	4313      	orrs	r3, r2
 8005998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	621a      	str	r2, [r3, #32]
}
 80059a6:	bf00      	nop
 80059a8:	371c      	adds	r7, #28
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bc80      	pop	{r7}
 80059ae:	4770      	bx	lr

080059b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	f023 0210 	bic.w	r2, r3, #16
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	031b      	lsls	r3, r3, #12
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	011b      	lsls	r3, r3, #4
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	621a      	str	r2, [r3, #32]
}
 8005a04:	bf00      	nop
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bc80      	pop	{r7}
 8005a0c:	4770      	bx	lr

08005a0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b085      	sub	sp, #20
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f043 0307 	orr.w	r3, r3, #7
 8005a30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	609a      	str	r2, [r3, #8]
}
 8005a38:	bf00      	nop
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bc80      	pop	{r7}
 8005a40:	4770      	bx	lr

08005a42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b087      	sub	sp, #28
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	60f8      	str	r0, [r7, #12]
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	607a      	str	r2, [r7, #4]
 8005a4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	021a      	lsls	r2, r3, #8
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	431a      	orrs	r2, r3
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	697a      	ldr	r2, [r7, #20]
 8005a74:	609a      	str	r2, [r3, #8]
}
 8005a76:	bf00      	nop
 8005a78:	371c      	adds	r7, #28
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bc80      	pop	{r7}
 8005a7e:	4770      	bx	lr

08005a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e05a      	b.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a20      	ldr	r2, [pc, #128]	; (8005b58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d022      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ae4:	d01d      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a1c      	ldr	r2, [pc, #112]	; (8005b5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d018      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a1a      	ldr	r2, [pc, #104]	; (8005b60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d013      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a19      	ldr	r2, [pc, #100]	; (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00e      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a17      	ldr	r2, [pc, #92]	; (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d009      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a16      	ldr	r2, [pc, #88]	; (8005b6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d004      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a14      	ldr	r2, [pc, #80]	; (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d10c      	bne.n	8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr
 8005b58:	40010000 	.word	0x40010000
 8005b5c:	40000400 	.word	0x40000400
 8005b60:	40000800 	.word	0x40000800
 8005b64:	40000c00 	.word	0x40000c00
 8005b68:	40010400 	.word	0x40010400
 8005b6c:	40014000 	.word	0x40014000
 8005b70:	40001800 	.word	0x40001800

08005b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bc80      	pop	{r7}
 8005b84:	4770      	bx	lr

08005b86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bc80      	pop	{r7}
 8005b96:	4770      	bx	lr

08005b98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b98:	b084      	sub	sp, #16
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b084      	sub	sp, #16
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	f107 001c 	add.w	r0, r7, #28
 8005ba6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d122      	bne.n	8005bf6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005bc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d105      	bne.n	8005bea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fa8c 	bl	8006108 <USB_CoreReset>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	73fb      	strb	r3, [r7, #15]
 8005bf4:	e010      	b.n	8005c18 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 fa80 	bl	8006108 <USB_CoreReset>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c10:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d10b      	bne.n	8005c36 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f043 0206 	orr.w	r2, r3, #6
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f043 0220 	orr.w	r2, r3, #32
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c42:	b004      	add	sp, #16
 8005c44:	4770      	bx	lr

08005c46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f023 0201 	bic.w	r2, r3, #1
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	370c      	adds	r7, #12
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bc80      	pop	{r7}
 8005c64:	4770      	bx	lr

08005c66 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b084      	sub	sp, #16
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d115      	bne.n	8005cb4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c94:	2001      	movs	r0, #1
 8005c96:	f7fd f803 	bl	8002ca0 <HAL_Delay>
      ms++;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fa23 	bl	80060ec <USB_GetMode>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d01e      	beq.n	8005cea <USB_SetCurrentMode+0x84>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2b31      	cmp	r3, #49	; 0x31
 8005cb0:	d9f0      	bls.n	8005c94 <USB_SetCurrentMode+0x2e>
 8005cb2:	e01a      	b.n	8005cea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005cb4:	78fb      	ldrb	r3, [r7, #3]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d115      	bne.n	8005ce6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005cc6:	2001      	movs	r0, #1
 8005cc8:	f7fc ffea 	bl	8002ca0 <HAL_Delay>
      ms++;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 fa0a 	bl	80060ec <USB_GetMode>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d005      	beq.n	8005cea <USB_SetCurrentMode+0x84>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b31      	cmp	r3, #49	; 0x31
 8005ce2:	d9f0      	bls.n	8005cc6 <USB_SetCurrentMode+0x60>
 8005ce4:	e001      	b.n	8005cea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e005      	b.n	8005cf6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2b32      	cmp	r3, #50	; 0x32
 8005cee:	d101      	bne.n	8005cf4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e000      	b.n	8005cf6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
	...

08005d00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d00:	b084      	sub	sp, #16
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b086      	sub	sp, #24
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	e009      	b.n	8005d34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	3340      	adds	r3, #64	; 0x40
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	3301      	adds	r3, #1
 8005d32:	613b      	str	r3, [r7, #16]
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	2b0e      	cmp	r3, #14
 8005d38:	d9f2      	bls.n	8005d20 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d11c      	bne.n	8005d7a <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d4e:	f043 0302 	orr.w	r3, r3, #2
 8005d52:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d64:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d70:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	639a      	str	r2, [r3, #56]	; 0x38
 8005d78:	e00b      	b.n	8005d92 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d98:	461a      	mov	r2, r3
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d10c      	bne.n	8005dbe <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d104      	bne.n	8005db4 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005daa:	2100      	movs	r1, #0
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 f965 	bl	800607c <USB_SetDevSpeed>
 8005db2:	e008      	b.n	8005dc6 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005db4:	2101      	movs	r1, #1
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f960 	bl	800607c <USB_SetDevSpeed>
 8005dbc:	e003      	b.n	8005dc6 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005dbe:	2103      	movs	r1, #3
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f95b 	bl	800607c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005dc6:	2110      	movs	r1, #16
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f8f3 	bl	8005fb4 <USB_FlushTxFifo>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f91f 	bl	800601c <USB_FlushRxFifo>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dee:	461a      	mov	r2, r3
 8005df0:	2300      	movs	r3, #0
 8005df2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e06:	461a      	mov	r2, r3
 8005e08:	2300      	movs	r3, #0
 8005e0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	613b      	str	r3, [r7, #16]
 8005e10:	e043      	b.n	8005e9a <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	015a      	lsls	r2, r3, #5
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e28:	d118      	bne.n	8005e5c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10a      	bne.n	8005e46 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	015a      	lsls	r2, r3, #5
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e42:	6013      	str	r3, [r2, #0]
 8005e44:	e013      	b.n	8005e6e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e52:	461a      	mov	r2, r3
 8005e54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	e008      	b.n	8005e6e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e68:	461a      	mov	r2, r3
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	3301      	adds	r3, #1
 8005e98:	613b      	str	r3, [r7, #16]
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d3b7      	bcc.n	8005e12 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	613b      	str	r3, [r7, #16]
 8005ea6:	e043      	b.n	8005f30 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ebe:	d118      	bne.n	8005ef2 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10a      	bne.n	8005edc <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ed8:	6013      	str	r3, [r2, #0]
 8005eda:	e013      	b.n	8005f04 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee8:	461a      	mov	r2, r3
 8005eea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005eee:	6013      	str	r3, [r2, #0]
 8005ef0:	e008      	b.n	8005f04 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efe:	461a      	mov	r2, r3
 8005f00:	2300      	movs	r3, #0
 8005f02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f10:	461a      	mov	r2, r3
 8005f12:	2300      	movs	r3, #0
 8005f14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	015a      	lsls	r2, r3, #5
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f22:	461a      	mov	r2, r3
 8005f24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	613b      	str	r3, [r7, #16]
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d3b7      	bcc.n	8005ea8 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005f58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d105      	bne.n	8005f6c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	f043 0210 	orr.w	r2, r3, #16
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	699a      	ldr	r2, [r3, #24]
 8005f70:	4b0f      	ldr	r3, [pc, #60]	; (8005fb0 <USB_DevInit+0x2b0>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d005      	beq.n	8005f8a <USB_DevInit+0x28a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	f043 0208 	orr.w	r2, r3, #8
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d107      	bne.n	8005fa0 <USB_DevInit+0x2a0>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f98:	f043 0304 	orr.w	r3, r3, #4
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fac:	b004      	add	sp, #16
 8005fae:	4770      	bx	lr
 8005fb0:	803c3800 	.word	0x803c3800

08005fb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4a13      	ldr	r2, [pc, #76]	; (8006018 <USB_FlushTxFifo+0x64>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d901      	bls.n	8005fd4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e01b      	b.n	800600c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	daf2      	bge.n	8005fc2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	019b      	lsls	r3, r3, #6
 8005fe4:	f043 0220 	orr.w	r2, r3, #32
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	4a08      	ldr	r2, [pc, #32]	; (8006018 <USB_FlushTxFifo+0x64>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d901      	bls.n	8005ffe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e006      	b.n	800600c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f003 0320 	and.w	r3, r3, #32
 8006006:	2b20      	cmp	r3, #32
 8006008:	d0f0      	beq.n	8005fec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3714      	adds	r7, #20
 8006010:	46bd      	mov	sp, r7
 8006012:	bc80      	pop	{r7}
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	00030d40 	.word	0x00030d40

0800601c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006024:	2300      	movs	r3, #0
 8006026:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	3301      	adds	r3, #1
 800602c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	4a11      	ldr	r2, [pc, #68]	; (8006078 <USB_FlushRxFifo+0x5c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d901      	bls.n	800603a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e018      	b.n	800606c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	2b00      	cmp	r3, #0
 8006040:	daf2      	bge.n	8006028 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2210      	movs	r2, #16
 800604a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	3301      	adds	r3, #1
 8006050:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	4a08      	ldr	r2, [pc, #32]	; (8006078 <USB_FlushRxFifo+0x5c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d901      	bls.n	800605e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800605a:	2303      	movs	r3, #3
 800605c:	e006      	b.n	800606c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	691b      	ldr	r3, [r3, #16]
 8006062:	f003 0310 	and.w	r3, r3, #16
 8006066:	2b10      	cmp	r3, #16
 8006068:	d0f0      	beq.n	800604c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800606a:	2300      	movs	r3, #0
}
 800606c:	4618      	mov	r0, r3
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	bc80      	pop	{r7}
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	00030d40 	.word	0x00030d40

0800607c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	460b      	mov	r3, r1
 8006086:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	78fb      	ldrb	r3, [r7, #3]
 8006096:	68f9      	ldr	r1, [r7, #12]
 8006098:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800609c:	4313      	orrs	r3, r2
 800609e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bc80      	pop	{r7}
 80060aa:	4770      	bx	lr

080060ac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060c6:	f023 0303 	bic.w	r3, r3, #3
 80060ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060da:	f043 0302 	orr.w	r3, r3, #2
 80060de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bc80      	pop	{r7}
 80060ea:	4770      	bx	lr

080060ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	f003 0301 	and.w	r3, r3, #1
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	bc80      	pop	{r7}
 8006104:	4770      	bx	lr
	...

08006108 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	3301      	adds	r3, #1
 8006118:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4a12      	ldr	r2, [pc, #72]	; (8006168 <USB_CoreReset+0x60>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d901      	bls.n	8006126 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e01b      	b.n	800615e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	daf2      	bge.n	8006114 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	f043 0201 	orr.w	r2, r3, #1
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3301      	adds	r3, #1
 8006142:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4a08      	ldr	r2, [pc, #32]	; (8006168 <USB_CoreReset+0x60>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d901      	bls.n	8006150 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800614c:	2303      	movs	r3, #3
 800614e:	e006      	b.n	800615e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	691b      	ldr	r3, [r3, #16]
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b01      	cmp	r3, #1
 800615a:	d0f0      	beq.n	800613e <USB_CoreReset+0x36>

  return HAL_OK;
 800615c:	2300      	movs	r3, #0
}
 800615e:	4618      	mov	r0, r3
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	bc80      	pop	{r7}
 8006166:	4770      	bx	lr
 8006168:	00030d40 	.word	0x00030d40

0800616c <malloc>:
 800616c:	4b02      	ldr	r3, [pc, #8]	; (8006178 <malloc+0xc>)
 800616e:	4601      	mov	r1, r0
 8006170:	6818      	ldr	r0, [r3, #0]
 8006172:	f000 b82b 	b.w	80061cc <_malloc_r>
 8006176:	bf00      	nop
 8006178:	200000c8 	.word	0x200000c8

0800617c <free>:
 800617c:	4b02      	ldr	r3, [pc, #8]	; (8006188 <free+0xc>)
 800617e:	4601      	mov	r1, r0
 8006180:	6818      	ldr	r0, [r3, #0]
 8006182:	f001 bd1d 	b.w	8007bc0 <_free_r>
 8006186:	bf00      	nop
 8006188:	200000c8 	.word	0x200000c8

0800618c <sbrk_aligned>:
 800618c:	b570      	push	{r4, r5, r6, lr}
 800618e:	4e0e      	ldr	r6, [pc, #56]	; (80061c8 <sbrk_aligned+0x3c>)
 8006190:	460c      	mov	r4, r1
 8006192:	6831      	ldr	r1, [r6, #0]
 8006194:	4605      	mov	r5, r0
 8006196:	b911      	cbnz	r1, 800619e <sbrk_aligned+0x12>
 8006198:	f000 fe48 	bl	8006e2c <_sbrk_r>
 800619c:	6030      	str	r0, [r6, #0]
 800619e:	4621      	mov	r1, r4
 80061a0:	4628      	mov	r0, r5
 80061a2:	f000 fe43 	bl	8006e2c <_sbrk_r>
 80061a6:	1c43      	adds	r3, r0, #1
 80061a8:	d00a      	beq.n	80061c0 <sbrk_aligned+0x34>
 80061aa:	1cc4      	adds	r4, r0, #3
 80061ac:	f024 0403 	bic.w	r4, r4, #3
 80061b0:	42a0      	cmp	r0, r4
 80061b2:	d007      	beq.n	80061c4 <sbrk_aligned+0x38>
 80061b4:	1a21      	subs	r1, r4, r0
 80061b6:	4628      	mov	r0, r5
 80061b8:	f000 fe38 	bl	8006e2c <_sbrk_r>
 80061bc:	3001      	adds	r0, #1
 80061be:	d101      	bne.n	80061c4 <sbrk_aligned+0x38>
 80061c0:	f04f 34ff 	mov.w	r4, #4294967295
 80061c4:	4620      	mov	r0, r4
 80061c6:	bd70      	pop	{r4, r5, r6, pc}
 80061c8:	20000910 	.word	0x20000910

080061cc <_malloc_r>:
 80061cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061d0:	1ccd      	adds	r5, r1, #3
 80061d2:	f025 0503 	bic.w	r5, r5, #3
 80061d6:	3508      	adds	r5, #8
 80061d8:	2d0c      	cmp	r5, #12
 80061da:	bf38      	it	cc
 80061dc:	250c      	movcc	r5, #12
 80061de:	2d00      	cmp	r5, #0
 80061e0:	4607      	mov	r7, r0
 80061e2:	db01      	blt.n	80061e8 <_malloc_r+0x1c>
 80061e4:	42a9      	cmp	r1, r5
 80061e6:	d905      	bls.n	80061f4 <_malloc_r+0x28>
 80061e8:	230c      	movs	r3, #12
 80061ea:	2600      	movs	r6, #0
 80061ec:	603b      	str	r3, [r7, #0]
 80061ee:	4630      	mov	r0, r6
 80061f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80062c8 <_malloc_r+0xfc>
 80061f8:	f000 f868 	bl	80062cc <__malloc_lock>
 80061fc:	f8d8 3000 	ldr.w	r3, [r8]
 8006200:	461c      	mov	r4, r3
 8006202:	bb5c      	cbnz	r4, 800625c <_malloc_r+0x90>
 8006204:	4629      	mov	r1, r5
 8006206:	4638      	mov	r0, r7
 8006208:	f7ff ffc0 	bl	800618c <sbrk_aligned>
 800620c:	1c43      	adds	r3, r0, #1
 800620e:	4604      	mov	r4, r0
 8006210:	d155      	bne.n	80062be <_malloc_r+0xf2>
 8006212:	f8d8 4000 	ldr.w	r4, [r8]
 8006216:	4626      	mov	r6, r4
 8006218:	2e00      	cmp	r6, #0
 800621a:	d145      	bne.n	80062a8 <_malloc_r+0xdc>
 800621c:	2c00      	cmp	r4, #0
 800621e:	d048      	beq.n	80062b2 <_malloc_r+0xe6>
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	4631      	mov	r1, r6
 8006224:	4638      	mov	r0, r7
 8006226:	eb04 0903 	add.w	r9, r4, r3
 800622a:	f000 fdff 	bl	8006e2c <_sbrk_r>
 800622e:	4581      	cmp	r9, r0
 8006230:	d13f      	bne.n	80062b2 <_malloc_r+0xe6>
 8006232:	6821      	ldr	r1, [r4, #0]
 8006234:	4638      	mov	r0, r7
 8006236:	1a6d      	subs	r5, r5, r1
 8006238:	4629      	mov	r1, r5
 800623a:	f7ff ffa7 	bl	800618c <sbrk_aligned>
 800623e:	3001      	adds	r0, #1
 8006240:	d037      	beq.n	80062b2 <_malloc_r+0xe6>
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	442b      	add	r3, r5
 8006246:	6023      	str	r3, [r4, #0]
 8006248:	f8d8 3000 	ldr.w	r3, [r8]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d038      	beq.n	80062c2 <_malloc_r+0xf6>
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	42a2      	cmp	r2, r4
 8006254:	d12b      	bne.n	80062ae <_malloc_r+0xe2>
 8006256:	2200      	movs	r2, #0
 8006258:	605a      	str	r2, [r3, #4]
 800625a:	e00f      	b.n	800627c <_malloc_r+0xb0>
 800625c:	6822      	ldr	r2, [r4, #0]
 800625e:	1b52      	subs	r2, r2, r5
 8006260:	d41f      	bmi.n	80062a2 <_malloc_r+0xd6>
 8006262:	2a0b      	cmp	r2, #11
 8006264:	d917      	bls.n	8006296 <_malloc_r+0xca>
 8006266:	1961      	adds	r1, r4, r5
 8006268:	42a3      	cmp	r3, r4
 800626a:	6025      	str	r5, [r4, #0]
 800626c:	bf18      	it	ne
 800626e:	6059      	strne	r1, [r3, #4]
 8006270:	6863      	ldr	r3, [r4, #4]
 8006272:	bf08      	it	eq
 8006274:	f8c8 1000 	streq.w	r1, [r8]
 8006278:	5162      	str	r2, [r4, r5]
 800627a:	604b      	str	r3, [r1, #4]
 800627c:	4638      	mov	r0, r7
 800627e:	f104 060b 	add.w	r6, r4, #11
 8006282:	f000 f829 	bl	80062d8 <__malloc_unlock>
 8006286:	f026 0607 	bic.w	r6, r6, #7
 800628a:	1d23      	adds	r3, r4, #4
 800628c:	1af2      	subs	r2, r6, r3
 800628e:	d0ae      	beq.n	80061ee <_malloc_r+0x22>
 8006290:	1b9b      	subs	r3, r3, r6
 8006292:	50a3      	str	r3, [r4, r2]
 8006294:	e7ab      	b.n	80061ee <_malloc_r+0x22>
 8006296:	42a3      	cmp	r3, r4
 8006298:	6862      	ldr	r2, [r4, #4]
 800629a:	d1dd      	bne.n	8006258 <_malloc_r+0x8c>
 800629c:	f8c8 2000 	str.w	r2, [r8]
 80062a0:	e7ec      	b.n	800627c <_malloc_r+0xb0>
 80062a2:	4623      	mov	r3, r4
 80062a4:	6864      	ldr	r4, [r4, #4]
 80062a6:	e7ac      	b.n	8006202 <_malloc_r+0x36>
 80062a8:	4634      	mov	r4, r6
 80062aa:	6876      	ldr	r6, [r6, #4]
 80062ac:	e7b4      	b.n	8006218 <_malloc_r+0x4c>
 80062ae:	4613      	mov	r3, r2
 80062b0:	e7cc      	b.n	800624c <_malloc_r+0x80>
 80062b2:	230c      	movs	r3, #12
 80062b4:	4638      	mov	r0, r7
 80062b6:	603b      	str	r3, [r7, #0]
 80062b8:	f000 f80e 	bl	80062d8 <__malloc_unlock>
 80062bc:	e797      	b.n	80061ee <_malloc_r+0x22>
 80062be:	6025      	str	r5, [r4, #0]
 80062c0:	e7dc      	b.n	800627c <_malloc_r+0xb0>
 80062c2:	605b      	str	r3, [r3, #4]
 80062c4:	deff      	udf	#255	; 0xff
 80062c6:	bf00      	nop
 80062c8:	2000090c 	.word	0x2000090c

080062cc <__malloc_lock>:
 80062cc:	4801      	ldr	r0, [pc, #4]	; (80062d4 <__malloc_lock+0x8>)
 80062ce:	f000 bdfa 	b.w	8006ec6 <__retarget_lock_acquire_recursive>
 80062d2:	bf00      	nop
 80062d4:	20000a54 	.word	0x20000a54

080062d8 <__malloc_unlock>:
 80062d8:	4801      	ldr	r0, [pc, #4]	; (80062e0 <__malloc_unlock+0x8>)
 80062da:	f000 bdf5 	b.w	8006ec8 <__retarget_lock_release_recursive>
 80062de:	bf00      	nop
 80062e0:	20000a54 	.word	0x20000a54

080062e4 <__cvt>:
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062ea:	461f      	mov	r7, r3
 80062ec:	bfbb      	ittet	lt
 80062ee:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80062f2:	461f      	movlt	r7, r3
 80062f4:	2300      	movge	r3, #0
 80062f6:	232d      	movlt	r3, #45	; 0x2d
 80062f8:	b088      	sub	sp, #32
 80062fa:	4614      	mov	r4, r2
 80062fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80062fe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006300:	7013      	strb	r3, [r2, #0]
 8006302:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006304:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006308:	f023 0820 	bic.w	r8, r3, #32
 800630c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006310:	d005      	beq.n	800631e <__cvt+0x3a>
 8006312:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006316:	d100      	bne.n	800631a <__cvt+0x36>
 8006318:	3501      	adds	r5, #1
 800631a:	2302      	movs	r3, #2
 800631c:	e000      	b.n	8006320 <__cvt+0x3c>
 800631e:	2303      	movs	r3, #3
 8006320:	aa07      	add	r2, sp, #28
 8006322:	9204      	str	r2, [sp, #16]
 8006324:	aa06      	add	r2, sp, #24
 8006326:	e9cd a202 	strd	sl, r2, [sp, #8]
 800632a:	e9cd 3500 	strd	r3, r5, [sp]
 800632e:	4622      	mov	r2, r4
 8006330:	463b      	mov	r3, r7
 8006332:	f000 fe61 	bl	8006ff8 <_dtoa_r>
 8006336:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800633a:	4606      	mov	r6, r0
 800633c:	d102      	bne.n	8006344 <__cvt+0x60>
 800633e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006340:	07db      	lsls	r3, r3, #31
 8006342:	d522      	bpl.n	800638a <__cvt+0xa6>
 8006344:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006348:	eb06 0905 	add.w	r9, r6, r5
 800634c:	d110      	bne.n	8006370 <__cvt+0x8c>
 800634e:	7833      	ldrb	r3, [r6, #0]
 8006350:	2b30      	cmp	r3, #48	; 0x30
 8006352:	d10a      	bne.n	800636a <__cvt+0x86>
 8006354:	2200      	movs	r2, #0
 8006356:	2300      	movs	r3, #0
 8006358:	4620      	mov	r0, r4
 800635a:	4639      	mov	r1, r7
 800635c:	f7fa fb60 	bl	8000a20 <__aeabi_dcmpeq>
 8006360:	b918      	cbnz	r0, 800636a <__cvt+0x86>
 8006362:	f1c5 0501 	rsb	r5, r5, #1
 8006366:	f8ca 5000 	str.w	r5, [sl]
 800636a:	f8da 3000 	ldr.w	r3, [sl]
 800636e:	4499      	add	r9, r3
 8006370:	2200      	movs	r2, #0
 8006372:	2300      	movs	r3, #0
 8006374:	4620      	mov	r0, r4
 8006376:	4639      	mov	r1, r7
 8006378:	f7fa fb52 	bl	8000a20 <__aeabi_dcmpeq>
 800637c:	b108      	cbz	r0, 8006382 <__cvt+0x9e>
 800637e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006382:	2230      	movs	r2, #48	; 0x30
 8006384:	9b07      	ldr	r3, [sp, #28]
 8006386:	454b      	cmp	r3, r9
 8006388:	d307      	bcc.n	800639a <__cvt+0xb6>
 800638a:	4630      	mov	r0, r6
 800638c:	9b07      	ldr	r3, [sp, #28]
 800638e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006390:	1b9b      	subs	r3, r3, r6
 8006392:	6013      	str	r3, [r2, #0]
 8006394:	b008      	add	sp, #32
 8006396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800639a:	1c59      	adds	r1, r3, #1
 800639c:	9107      	str	r1, [sp, #28]
 800639e:	701a      	strb	r2, [r3, #0]
 80063a0:	e7f0      	b.n	8006384 <__cvt+0xa0>

080063a2 <__exponent>:
 80063a2:	4603      	mov	r3, r0
 80063a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063a6:	2900      	cmp	r1, #0
 80063a8:	f803 2b02 	strb.w	r2, [r3], #2
 80063ac:	bfb6      	itet	lt
 80063ae:	222d      	movlt	r2, #45	; 0x2d
 80063b0:	222b      	movge	r2, #43	; 0x2b
 80063b2:	4249      	neglt	r1, r1
 80063b4:	2909      	cmp	r1, #9
 80063b6:	7042      	strb	r2, [r0, #1]
 80063b8:	dd2a      	ble.n	8006410 <__exponent+0x6e>
 80063ba:	f10d 0207 	add.w	r2, sp, #7
 80063be:	4617      	mov	r7, r2
 80063c0:	260a      	movs	r6, #10
 80063c2:	fb91 f5f6 	sdiv	r5, r1, r6
 80063c6:	4694      	mov	ip, r2
 80063c8:	fb06 1415 	mls	r4, r6, r5, r1
 80063cc:	3430      	adds	r4, #48	; 0x30
 80063ce:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80063d2:	460c      	mov	r4, r1
 80063d4:	2c63      	cmp	r4, #99	; 0x63
 80063d6:	4629      	mov	r1, r5
 80063d8:	f102 32ff 	add.w	r2, r2, #4294967295
 80063dc:	dcf1      	bgt.n	80063c2 <__exponent+0x20>
 80063de:	3130      	adds	r1, #48	; 0x30
 80063e0:	f1ac 0402 	sub.w	r4, ip, #2
 80063e4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80063e8:	4622      	mov	r2, r4
 80063ea:	1c41      	adds	r1, r0, #1
 80063ec:	42ba      	cmp	r2, r7
 80063ee:	d30a      	bcc.n	8006406 <__exponent+0x64>
 80063f0:	f10d 0209 	add.w	r2, sp, #9
 80063f4:	eba2 020c 	sub.w	r2, r2, ip
 80063f8:	42bc      	cmp	r4, r7
 80063fa:	bf88      	it	hi
 80063fc:	2200      	movhi	r2, #0
 80063fe:	4413      	add	r3, r2
 8006400:	1a18      	subs	r0, r3, r0
 8006402:	b003      	add	sp, #12
 8006404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006406:	f812 5b01 	ldrb.w	r5, [r2], #1
 800640a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800640e:	e7ed      	b.n	80063ec <__exponent+0x4a>
 8006410:	2330      	movs	r3, #48	; 0x30
 8006412:	3130      	adds	r1, #48	; 0x30
 8006414:	7083      	strb	r3, [r0, #2]
 8006416:	70c1      	strb	r1, [r0, #3]
 8006418:	1d03      	adds	r3, r0, #4
 800641a:	e7f1      	b.n	8006400 <__exponent+0x5e>

0800641c <_printf_float>:
 800641c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006420:	b091      	sub	sp, #68	; 0x44
 8006422:	460c      	mov	r4, r1
 8006424:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006428:	4616      	mov	r6, r2
 800642a:	461f      	mov	r7, r3
 800642c:	4605      	mov	r5, r0
 800642e:	f000 fcc5 	bl	8006dbc <_localeconv_r>
 8006432:	6803      	ldr	r3, [r0, #0]
 8006434:	4618      	mov	r0, r3
 8006436:	9309      	str	r3, [sp, #36]	; 0x24
 8006438:	f7f9 fec6 	bl	80001c8 <strlen>
 800643c:	2300      	movs	r3, #0
 800643e:	930e      	str	r3, [sp, #56]	; 0x38
 8006440:	f8d8 3000 	ldr.w	r3, [r8]
 8006444:	900a      	str	r0, [sp, #40]	; 0x28
 8006446:	3307      	adds	r3, #7
 8006448:	f023 0307 	bic.w	r3, r3, #7
 800644c:	f103 0208 	add.w	r2, r3, #8
 8006450:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006454:	f8d4 b000 	ldr.w	fp, [r4]
 8006458:	f8c8 2000 	str.w	r2, [r8]
 800645c:	e9d3 a800 	ldrd	sl, r8, [r3]
 8006460:	4652      	mov	r2, sl
 8006462:	4643      	mov	r3, r8
 8006464:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006468:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800646c:	930b      	str	r3, [sp, #44]	; 0x2c
 800646e:	f04f 32ff 	mov.w	r2, #4294967295
 8006472:	4650      	mov	r0, sl
 8006474:	4b9c      	ldr	r3, [pc, #624]	; (80066e8 <_printf_float+0x2cc>)
 8006476:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006478:	f7fa fb04 	bl	8000a84 <__aeabi_dcmpun>
 800647c:	bb70      	cbnz	r0, 80064dc <_printf_float+0xc0>
 800647e:	f04f 32ff 	mov.w	r2, #4294967295
 8006482:	4650      	mov	r0, sl
 8006484:	4b98      	ldr	r3, [pc, #608]	; (80066e8 <_printf_float+0x2cc>)
 8006486:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006488:	f7fa fade 	bl	8000a48 <__aeabi_dcmple>
 800648c:	bb30      	cbnz	r0, 80064dc <_printf_float+0xc0>
 800648e:	2200      	movs	r2, #0
 8006490:	2300      	movs	r3, #0
 8006492:	4650      	mov	r0, sl
 8006494:	4641      	mov	r1, r8
 8006496:	f7fa facd 	bl	8000a34 <__aeabi_dcmplt>
 800649a:	b110      	cbz	r0, 80064a2 <_printf_float+0x86>
 800649c:	232d      	movs	r3, #45	; 0x2d
 800649e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064a2:	4a92      	ldr	r2, [pc, #584]	; (80066ec <_printf_float+0x2d0>)
 80064a4:	4b92      	ldr	r3, [pc, #584]	; (80066f0 <_printf_float+0x2d4>)
 80064a6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80064aa:	bf94      	ite	ls
 80064ac:	4690      	movls	r8, r2
 80064ae:	4698      	movhi	r8, r3
 80064b0:	2303      	movs	r3, #3
 80064b2:	f04f 0a00 	mov.w	sl, #0
 80064b6:	6123      	str	r3, [r4, #16]
 80064b8:	f02b 0304 	bic.w	r3, fp, #4
 80064bc:	6023      	str	r3, [r4, #0]
 80064be:	4633      	mov	r3, r6
 80064c0:	4621      	mov	r1, r4
 80064c2:	4628      	mov	r0, r5
 80064c4:	9700      	str	r7, [sp, #0]
 80064c6:	aa0f      	add	r2, sp, #60	; 0x3c
 80064c8:	f000 f9d6 	bl	8006878 <_printf_common>
 80064cc:	3001      	adds	r0, #1
 80064ce:	f040 8090 	bne.w	80065f2 <_printf_float+0x1d6>
 80064d2:	f04f 30ff 	mov.w	r0, #4294967295
 80064d6:	b011      	add	sp, #68	; 0x44
 80064d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064dc:	4652      	mov	r2, sl
 80064de:	4643      	mov	r3, r8
 80064e0:	4650      	mov	r0, sl
 80064e2:	4641      	mov	r1, r8
 80064e4:	f7fa face 	bl	8000a84 <__aeabi_dcmpun>
 80064e8:	b148      	cbz	r0, 80064fe <_printf_float+0xe2>
 80064ea:	f1b8 0f00 	cmp.w	r8, #0
 80064ee:	bfb8      	it	lt
 80064f0:	232d      	movlt	r3, #45	; 0x2d
 80064f2:	4a80      	ldr	r2, [pc, #512]	; (80066f4 <_printf_float+0x2d8>)
 80064f4:	bfb8      	it	lt
 80064f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80064fa:	4b7f      	ldr	r3, [pc, #508]	; (80066f8 <_printf_float+0x2dc>)
 80064fc:	e7d3      	b.n	80064a6 <_printf_float+0x8a>
 80064fe:	6863      	ldr	r3, [r4, #4]
 8006500:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	d142      	bne.n	800658e <_printf_float+0x172>
 8006508:	2306      	movs	r3, #6
 800650a:	6063      	str	r3, [r4, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	9206      	str	r2, [sp, #24]
 8006510:	aa0e      	add	r2, sp, #56	; 0x38
 8006512:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006516:	aa0d      	add	r2, sp, #52	; 0x34
 8006518:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800651c:	9203      	str	r2, [sp, #12]
 800651e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006522:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006526:	6023      	str	r3, [r4, #0]
 8006528:	6863      	ldr	r3, [r4, #4]
 800652a:	4652      	mov	r2, sl
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	4628      	mov	r0, r5
 8006530:	4643      	mov	r3, r8
 8006532:	910b      	str	r1, [sp, #44]	; 0x2c
 8006534:	f7ff fed6 	bl	80062e4 <__cvt>
 8006538:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800653a:	4680      	mov	r8, r0
 800653c:	2947      	cmp	r1, #71	; 0x47
 800653e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006540:	d108      	bne.n	8006554 <_printf_float+0x138>
 8006542:	1cc8      	adds	r0, r1, #3
 8006544:	db02      	blt.n	800654c <_printf_float+0x130>
 8006546:	6863      	ldr	r3, [r4, #4]
 8006548:	4299      	cmp	r1, r3
 800654a:	dd40      	ble.n	80065ce <_printf_float+0x1b2>
 800654c:	f1a9 0902 	sub.w	r9, r9, #2
 8006550:	fa5f f989 	uxtb.w	r9, r9
 8006554:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006558:	d81f      	bhi.n	800659a <_printf_float+0x17e>
 800655a:	464a      	mov	r2, r9
 800655c:	3901      	subs	r1, #1
 800655e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006562:	910d      	str	r1, [sp, #52]	; 0x34
 8006564:	f7ff ff1d 	bl	80063a2 <__exponent>
 8006568:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800656a:	4682      	mov	sl, r0
 800656c:	1813      	adds	r3, r2, r0
 800656e:	2a01      	cmp	r2, #1
 8006570:	6123      	str	r3, [r4, #16]
 8006572:	dc02      	bgt.n	800657a <_printf_float+0x15e>
 8006574:	6822      	ldr	r2, [r4, #0]
 8006576:	07d2      	lsls	r2, r2, #31
 8006578:	d501      	bpl.n	800657e <_printf_float+0x162>
 800657a:	3301      	adds	r3, #1
 800657c:	6123      	str	r3, [r4, #16]
 800657e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006582:	2b00      	cmp	r3, #0
 8006584:	d09b      	beq.n	80064be <_printf_float+0xa2>
 8006586:	232d      	movs	r3, #45	; 0x2d
 8006588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800658c:	e797      	b.n	80064be <_printf_float+0xa2>
 800658e:	2947      	cmp	r1, #71	; 0x47
 8006590:	d1bc      	bne.n	800650c <_printf_float+0xf0>
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1ba      	bne.n	800650c <_printf_float+0xf0>
 8006596:	2301      	movs	r3, #1
 8006598:	e7b7      	b.n	800650a <_printf_float+0xee>
 800659a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800659e:	d118      	bne.n	80065d2 <_printf_float+0x1b6>
 80065a0:	2900      	cmp	r1, #0
 80065a2:	6863      	ldr	r3, [r4, #4]
 80065a4:	dd0b      	ble.n	80065be <_printf_float+0x1a2>
 80065a6:	6121      	str	r1, [r4, #16]
 80065a8:	b913      	cbnz	r3, 80065b0 <_printf_float+0x194>
 80065aa:	6822      	ldr	r2, [r4, #0]
 80065ac:	07d0      	lsls	r0, r2, #31
 80065ae:	d502      	bpl.n	80065b6 <_printf_float+0x19a>
 80065b0:	3301      	adds	r3, #1
 80065b2:	440b      	add	r3, r1
 80065b4:	6123      	str	r3, [r4, #16]
 80065b6:	f04f 0a00 	mov.w	sl, #0
 80065ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80065bc:	e7df      	b.n	800657e <_printf_float+0x162>
 80065be:	b913      	cbnz	r3, 80065c6 <_printf_float+0x1aa>
 80065c0:	6822      	ldr	r2, [r4, #0]
 80065c2:	07d2      	lsls	r2, r2, #31
 80065c4:	d501      	bpl.n	80065ca <_printf_float+0x1ae>
 80065c6:	3302      	adds	r3, #2
 80065c8:	e7f4      	b.n	80065b4 <_printf_float+0x198>
 80065ca:	2301      	movs	r3, #1
 80065cc:	e7f2      	b.n	80065b4 <_printf_float+0x198>
 80065ce:	f04f 0967 	mov.w	r9, #103	; 0x67
 80065d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065d4:	4299      	cmp	r1, r3
 80065d6:	db05      	blt.n	80065e4 <_printf_float+0x1c8>
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	6121      	str	r1, [r4, #16]
 80065dc:	07d8      	lsls	r0, r3, #31
 80065de:	d5ea      	bpl.n	80065b6 <_printf_float+0x19a>
 80065e0:	1c4b      	adds	r3, r1, #1
 80065e2:	e7e7      	b.n	80065b4 <_printf_float+0x198>
 80065e4:	2900      	cmp	r1, #0
 80065e6:	bfcc      	ite	gt
 80065e8:	2201      	movgt	r2, #1
 80065ea:	f1c1 0202 	rsble	r2, r1, #2
 80065ee:	4413      	add	r3, r2
 80065f0:	e7e0      	b.n	80065b4 <_printf_float+0x198>
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	055a      	lsls	r2, r3, #21
 80065f6:	d407      	bmi.n	8006608 <_printf_float+0x1ec>
 80065f8:	6923      	ldr	r3, [r4, #16]
 80065fa:	4642      	mov	r2, r8
 80065fc:	4631      	mov	r1, r6
 80065fe:	4628      	mov	r0, r5
 8006600:	47b8      	blx	r7
 8006602:	3001      	adds	r0, #1
 8006604:	d12b      	bne.n	800665e <_printf_float+0x242>
 8006606:	e764      	b.n	80064d2 <_printf_float+0xb6>
 8006608:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800660c:	f240 80dd 	bls.w	80067ca <_printf_float+0x3ae>
 8006610:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006614:	2200      	movs	r2, #0
 8006616:	2300      	movs	r3, #0
 8006618:	f7fa fa02 	bl	8000a20 <__aeabi_dcmpeq>
 800661c:	2800      	cmp	r0, #0
 800661e:	d033      	beq.n	8006688 <_printf_float+0x26c>
 8006620:	2301      	movs	r3, #1
 8006622:	4631      	mov	r1, r6
 8006624:	4628      	mov	r0, r5
 8006626:	4a35      	ldr	r2, [pc, #212]	; (80066fc <_printf_float+0x2e0>)
 8006628:	47b8      	blx	r7
 800662a:	3001      	adds	r0, #1
 800662c:	f43f af51 	beq.w	80064d2 <_printf_float+0xb6>
 8006630:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006634:	429a      	cmp	r2, r3
 8006636:	db02      	blt.n	800663e <_printf_float+0x222>
 8006638:	6823      	ldr	r3, [r4, #0]
 800663a:	07d8      	lsls	r0, r3, #31
 800663c:	d50f      	bpl.n	800665e <_printf_float+0x242>
 800663e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006642:	4631      	mov	r1, r6
 8006644:	4628      	mov	r0, r5
 8006646:	47b8      	blx	r7
 8006648:	3001      	adds	r0, #1
 800664a:	f43f af42 	beq.w	80064d2 <_printf_float+0xb6>
 800664e:	f04f 0800 	mov.w	r8, #0
 8006652:	f104 091a 	add.w	r9, r4, #26
 8006656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006658:	3b01      	subs	r3, #1
 800665a:	4543      	cmp	r3, r8
 800665c:	dc09      	bgt.n	8006672 <_printf_float+0x256>
 800665e:	6823      	ldr	r3, [r4, #0]
 8006660:	079b      	lsls	r3, r3, #30
 8006662:	f100 8104 	bmi.w	800686e <_printf_float+0x452>
 8006666:	68e0      	ldr	r0, [r4, #12]
 8006668:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800666a:	4298      	cmp	r0, r3
 800666c:	bfb8      	it	lt
 800666e:	4618      	movlt	r0, r3
 8006670:	e731      	b.n	80064d6 <_printf_float+0xba>
 8006672:	2301      	movs	r3, #1
 8006674:	464a      	mov	r2, r9
 8006676:	4631      	mov	r1, r6
 8006678:	4628      	mov	r0, r5
 800667a:	47b8      	blx	r7
 800667c:	3001      	adds	r0, #1
 800667e:	f43f af28 	beq.w	80064d2 <_printf_float+0xb6>
 8006682:	f108 0801 	add.w	r8, r8, #1
 8006686:	e7e6      	b.n	8006656 <_printf_float+0x23a>
 8006688:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800668a:	2b00      	cmp	r3, #0
 800668c:	dc38      	bgt.n	8006700 <_printf_float+0x2e4>
 800668e:	2301      	movs	r3, #1
 8006690:	4631      	mov	r1, r6
 8006692:	4628      	mov	r0, r5
 8006694:	4a19      	ldr	r2, [pc, #100]	; (80066fc <_printf_float+0x2e0>)
 8006696:	47b8      	blx	r7
 8006698:	3001      	adds	r0, #1
 800669a:	f43f af1a 	beq.w	80064d2 <_printf_float+0xb6>
 800669e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80066a2:	4313      	orrs	r3, r2
 80066a4:	d102      	bne.n	80066ac <_printf_float+0x290>
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	07d9      	lsls	r1, r3, #31
 80066aa:	d5d8      	bpl.n	800665e <_printf_float+0x242>
 80066ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066b0:	4631      	mov	r1, r6
 80066b2:	4628      	mov	r0, r5
 80066b4:	47b8      	blx	r7
 80066b6:	3001      	adds	r0, #1
 80066b8:	f43f af0b 	beq.w	80064d2 <_printf_float+0xb6>
 80066bc:	f04f 0900 	mov.w	r9, #0
 80066c0:	f104 0a1a 	add.w	sl, r4, #26
 80066c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066c6:	425b      	negs	r3, r3
 80066c8:	454b      	cmp	r3, r9
 80066ca:	dc01      	bgt.n	80066d0 <_printf_float+0x2b4>
 80066cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066ce:	e794      	b.n	80065fa <_printf_float+0x1de>
 80066d0:	2301      	movs	r3, #1
 80066d2:	4652      	mov	r2, sl
 80066d4:	4631      	mov	r1, r6
 80066d6:	4628      	mov	r0, r5
 80066d8:	47b8      	blx	r7
 80066da:	3001      	adds	r0, #1
 80066dc:	f43f aef9 	beq.w	80064d2 <_printf_float+0xb6>
 80066e0:	f109 0901 	add.w	r9, r9, #1
 80066e4:	e7ee      	b.n	80066c4 <_printf_float+0x2a8>
 80066e6:	bf00      	nop
 80066e8:	7fefffff 	.word	0x7fefffff
 80066ec:	080092d4 	.word	0x080092d4
 80066f0:	080092d8 	.word	0x080092d8
 80066f4:	080092dc 	.word	0x080092dc
 80066f8:	080092e0 	.word	0x080092e0
 80066fc:	080092e4 	.word	0x080092e4
 8006700:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006702:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006704:	429a      	cmp	r2, r3
 8006706:	bfa8      	it	ge
 8006708:	461a      	movge	r2, r3
 800670a:	2a00      	cmp	r2, #0
 800670c:	4691      	mov	r9, r2
 800670e:	dc37      	bgt.n	8006780 <_printf_float+0x364>
 8006710:	f04f 0b00 	mov.w	fp, #0
 8006714:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006718:	f104 021a 	add.w	r2, r4, #26
 800671c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006720:	ebaa 0309 	sub.w	r3, sl, r9
 8006724:	455b      	cmp	r3, fp
 8006726:	dc33      	bgt.n	8006790 <_printf_float+0x374>
 8006728:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800672c:	429a      	cmp	r2, r3
 800672e:	db3b      	blt.n	80067a8 <_printf_float+0x38c>
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	07da      	lsls	r2, r3, #31
 8006734:	d438      	bmi.n	80067a8 <_printf_float+0x38c>
 8006736:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800673a:	eba2 0903 	sub.w	r9, r2, r3
 800673e:	eba2 020a 	sub.w	r2, r2, sl
 8006742:	4591      	cmp	r9, r2
 8006744:	bfa8      	it	ge
 8006746:	4691      	movge	r9, r2
 8006748:	f1b9 0f00 	cmp.w	r9, #0
 800674c:	dc34      	bgt.n	80067b8 <_printf_float+0x39c>
 800674e:	f04f 0800 	mov.w	r8, #0
 8006752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006756:	f104 0a1a 	add.w	sl, r4, #26
 800675a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800675e:	1a9b      	subs	r3, r3, r2
 8006760:	eba3 0309 	sub.w	r3, r3, r9
 8006764:	4543      	cmp	r3, r8
 8006766:	f77f af7a 	ble.w	800665e <_printf_float+0x242>
 800676a:	2301      	movs	r3, #1
 800676c:	4652      	mov	r2, sl
 800676e:	4631      	mov	r1, r6
 8006770:	4628      	mov	r0, r5
 8006772:	47b8      	blx	r7
 8006774:	3001      	adds	r0, #1
 8006776:	f43f aeac 	beq.w	80064d2 <_printf_float+0xb6>
 800677a:	f108 0801 	add.w	r8, r8, #1
 800677e:	e7ec      	b.n	800675a <_printf_float+0x33e>
 8006780:	4613      	mov	r3, r2
 8006782:	4631      	mov	r1, r6
 8006784:	4642      	mov	r2, r8
 8006786:	4628      	mov	r0, r5
 8006788:	47b8      	blx	r7
 800678a:	3001      	adds	r0, #1
 800678c:	d1c0      	bne.n	8006710 <_printf_float+0x2f4>
 800678e:	e6a0      	b.n	80064d2 <_printf_float+0xb6>
 8006790:	2301      	movs	r3, #1
 8006792:	4631      	mov	r1, r6
 8006794:	4628      	mov	r0, r5
 8006796:	920b      	str	r2, [sp, #44]	; 0x2c
 8006798:	47b8      	blx	r7
 800679a:	3001      	adds	r0, #1
 800679c:	f43f ae99 	beq.w	80064d2 <_printf_float+0xb6>
 80067a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067a2:	f10b 0b01 	add.w	fp, fp, #1
 80067a6:	e7b9      	b.n	800671c <_printf_float+0x300>
 80067a8:	4631      	mov	r1, r6
 80067aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067ae:	4628      	mov	r0, r5
 80067b0:	47b8      	blx	r7
 80067b2:	3001      	adds	r0, #1
 80067b4:	d1bf      	bne.n	8006736 <_printf_float+0x31a>
 80067b6:	e68c      	b.n	80064d2 <_printf_float+0xb6>
 80067b8:	464b      	mov	r3, r9
 80067ba:	4631      	mov	r1, r6
 80067bc:	4628      	mov	r0, r5
 80067be:	eb08 020a 	add.w	r2, r8, sl
 80067c2:	47b8      	blx	r7
 80067c4:	3001      	adds	r0, #1
 80067c6:	d1c2      	bne.n	800674e <_printf_float+0x332>
 80067c8:	e683      	b.n	80064d2 <_printf_float+0xb6>
 80067ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067cc:	2a01      	cmp	r2, #1
 80067ce:	dc01      	bgt.n	80067d4 <_printf_float+0x3b8>
 80067d0:	07db      	lsls	r3, r3, #31
 80067d2:	d539      	bpl.n	8006848 <_printf_float+0x42c>
 80067d4:	2301      	movs	r3, #1
 80067d6:	4642      	mov	r2, r8
 80067d8:	4631      	mov	r1, r6
 80067da:	4628      	mov	r0, r5
 80067dc:	47b8      	blx	r7
 80067de:	3001      	adds	r0, #1
 80067e0:	f43f ae77 	beq.w	80064d2 <_printf_float+0xb6>
 80067e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067e8:	4631      	mov	r1, r6
 80067ea:	4628      	mov	r0, r5
 80067ec:	47b8      	blx	r7
 80067ee:	3001      	adds	r0, #1
 80067f0:	f43f ae6f 	beq.w	80064d2 <_printf_float+0xb6>
 80067f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067f8:	2200      	movs	r2, #0
 80067fa:	2300      	movs	r3, #0
 80067fc:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8006800:	f7fa f90e 	bl	8000a20 <__aeabi_dcmpeq>
 8006804:	b9d8      	cbnz	r0, 800683e <_printf_float+0x422>
 8006806:	f109 33ff 	add.w	r3, r9, #4294967295
 800680a:	f108 0201 	add.w	r2, r8, #1
 800680e:	4631      	mov	r1, r6
 8006810:	4628      	mov	r0, r5
 8006812:	47b8      	blx	r7
 8006814:	3001      	adds	r0, #1
 8006816:	d10e      	bne.n	8006836 <_printf_float+0x41a>
 8006818:	e65b      	b.n	80064d2 <_printf_float+0xb6>
 800681a:	2301      	movs	r3, #1
 800681c:	464a      	mov	r2, r9
 800681e:	4631      	mov	r1, r6
 8006820:	4628      	mov	r0, r5
 8006822:	47b8      	blx	r7
 8006824:	3001      	adds	r0, #1
 8006826:	f43f ae54 	beq.w	80064d2 <_printf_float+0xb6>
 800682a:	f108 0801 	add.w	r8, r8, #1
 800682e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006830:	3b01      	subs	r3, #1
 8006832:	4543      	cmp	r3, r8
 8006834:	dcf1      	bgt.n	800681a <_printf_float+0x3fe>
 8006836:	4653      	mov	r3, sl
 8006838:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800683c:	e6de      	b.n	80065fc <_printf_float+0x1e0>
 800683e:	f04f 0800 	mov.w	r8, #0
 8006842:	f104 091a 	add.w	r9, r4, #26
 8006846:	e7f2      	b.n	800682e <_printf_float+0x412>
 8006848:	2301      	movs	r3, #1
 800684a:	4642      	mov	r2, r8
 800684c:	e7df      	b.n	800680e <_printf_float+0x3f2>
 800684e:	2301      	movs	r3, #1
 8006850:	464a      	mov	r2, r9
 8006852:	4631      	mov	r1, r6
 8006854:	4628      	mov	r0, r5
 8006856:	47b8      	blx	r7
 8006858:	3001      	adds	r0, #1
 800685a:	f43f ae3a 	beq.w	80064d2 <_printf_float+0xb6>
 800685e:	f108 0801 	add.w	r8, r8, #1
 8006862:	68e3      	ldr	r3, [r4, #12]
 8006864:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006866:	1a5b      	subs	r3, r3, r1
 8006868:	4543      	cmp	r3, r8
 800686a:	dcf0      	bgt.n	800684e <_printf_float+0x432>
 800686c:	e6fb      	b.n	8006666 <_printf_float+0x24a>
 800686e:	f04f 0800 	mov.w	r8, #0
 8006872:	f104 0919 	add.w	r9, r4, #25
 8006876:	e7f4      	b.n	8006862 <_printf_float+0x446>

08006878 <_printf_common>:
 8006878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800687c:	4616      	mov	r6, r2
 800687e:	4699      	mov	r9, r3
 8006880:	688a      	ldr	r2, [r1, #8]
 8006882:	690b      	ldr	r3, [r1, #16]
 8006884:	4607      	mov	r7, r0
 8006886:	4293      	cmp	r3, r2
 8006888:	bfb8      	it	lt
 800688a:	4613      	movlt	r3, r2
 800688c:	6033      	str	r3, [r6, #0]
 800688e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006892:	460c      	mov	r4, r1
 8006894:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006898:	b10a      	cbz	r2, 800689e <_printf_common+0x26>
 800689a:	3301      	adds	r3, #1
 800689c:	6033      	str	r3, [r6, #0]
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	0699      	lsls	r1, r3, #26
 80068a2:	bf42      	ittt	mi
 80068a4:	6833      	ldrmi	r3, [r6, #0]
 80068a6:	3302      	addmi	r3, #2
 80068a8:	6033      	strmi	r3, [r6, #0]
 80068aa:	6825      	ldr	r5, [r4, #0]
 80068ac:	f015 0506 	ands.w	r5, r5, #6
 80068b0:	d106      	bne.n	80068c0 <_printf_common+0x48>
 80068b2:	f104 0a19 	add.w	sl, r4, #25
 80068b6:	68e3      	ldr	r3, [r4, #12]
 80068b8:	6832      	ldr	r2, [r6, #0]
 80068ba:	1a9b      	subs	r3, r3, r2
 80068bc:	42ab      	cmp	r3, r5
 80068be:	dc2b      	bgt.n	8006918 <_printf_common+0xa0>
 80068c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068c4:	1e13      	subs	r3, r2, #0
 80068c6:	6822      	ldr	r2, [r4, #0]
 80068c8:	bf18      	it	ne
 80068ca:	2301      	movne	r3, #1
 80068cc:	0692      	lsls	r2, r2, #26
 80068ce:	d430      	bmi.n	8006932 <_printf_common+0xba>
 80068d0:	4649      	mov	r1, r9
 80068d2:	4638      	mov	r0, r7
 80068d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068d8:	47c0      	blx	r8
 80068da:	3001      	adds	r0, #1
 80068dc:	d023      	beq.n	8006926 <_printf_common+0xae>
 80068de:	6823      	ldr	r3, [r4, #0]
 80068e0:	6922      	ldr	r2, [r4, #16]
 80068e2:	f003 0306 	and.w	r3, r3, #6
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	bf14      	ite	ne
 80068ea:	2500      	movne	r5, #0
 80068ec:	6833      	ldreq	r3, [r6, #0]
 80068ee:	f04f 0600 	mov.w	r6, #0
 80068f2:	bf08      	it	eq
 80068f4:	68e5      	ldreq	r5, [r4, #12]
 80068f6:	f104 041a 	add.w	r4, r4, #26
 80068fa:	bf08      	it	eq
 80068fc:	1aed      	subeq	r5, r5, r3
 80068fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006902:	bf08      	it	eq
 8006904:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006908:	4293      	cmp	r3, r2
 800690a:	bfc4      	itt	gt
 800690c:	1a9b      	subgt	r3, r3, r2
 800690e:	18ed      	addgt	r5, r5, r3
 8006910:	42b5      	cmp	r5, r6
 8006912:	d11a      	bne.n	800694a <_printf_common+0xd2>
 8006914:	2000      	movs	r0, #0
 8006916:	e008      	b.n	800692a <_printf_common+0xb2>
 8006918:	2301      	movs	r3, #1
 800691a:	4652      	mov	r2, sl
 800691c:	4649      	mov	r1, r9
 800691e:	4638      	mov	r0, r7
 8006920:	47c0      	blx	r8
 8006922:	3001      	adds	r0, #1
 8006924:	d103      	bne.n	800692e <_printf_common+0xb6>
 8006926:	f04f 30ff 	mov.w	r0, #4294967295
 800692a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800692e:	3501      	adds	r5, #1
 8006930:	e7c1      	b.n	80068b6 <_printf_common+0x3e>
 8006932:	2030      	movs	r0, #48	; 0x30
 8006934:	18e1      	adds	r1, r4, r3
 8006936:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006940:	4422      	add	r2, r4
 8006942:	3302      	adds	r3, #2
 8006944:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006948:	e7c2      	b.n	80068d0 <_printf_common+0x58>
 800694a:	2301      	movs	r3, #1
 800694c:	4622      	mov	r2, r4
 800694e:	4649      	mov	r1, r9
 8006950:	4638      	mov	r0, r7
 8006952:	47c0      	blx	r8
 8006954:	3001      	adds	r0, #1
 8006956:	d0e6      	beq.n	8006926 <_printf_common+0xae>
 8006958:	3601      	adds	r6, #1
 800695a:	e7d9      	b.n	8006910 <_printf_common+0x98>

0800695c <_printf_i>:
 800695c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006960:	7e0f      	ldrb	r7, [r1, #24]
 8006962:	4691      	mov	r9, r2
 8006964:	2f78      	cmp	r7, #120	; 0x78
 8006966:	4680      	mov	r8, r0
 8006968:	460c      	mov	r4, r1
 800696a:	469a      	mov	sl, r3
 800696c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800696e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006972:	d807      	bhi.n	8006984 <_printf_i+0x28>
 8006974:	2f62      	cmp	r7, #98	; 0x62
 8006976:	d80a      	bhi.n	800698e <_printf_i+0x32>
 8006978:	2f00      	cmp	r7, #0
 800697a:	f000 80d5 	beq.w	8006b28 <_printf_i+0x1cc>
 800697e:	2f58      	cmp	r7, #88	; 0x58
 8006980:	f000 80c1 	beq.w	8006b06 <_printf_i+0x1aa>
 8006984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006988:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800698c:	e03a      	b.n	8006a04 <_printf_i+0xa8>
 800698e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006992:	2b15      	cmp	r3, #21
 8006994:	d8f6      	bhi.n	8006984 <_printf_i+0x28>
 8006996:	a101      	add	r1, pc, #4	; (adr r1, 800699c <_printf_i+0x40>)
 8006998:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800699c:	080069f5 	.word	0x080069f5
 80069a0:	08006a09 	.word	0x08006a09
 80069a4:	08006985 	.word	0x08006985
 80069a8:	08006985 	.word	0x08006985
 80069ac:	08006985 	.word	0x08006985
 80069b0:	08006985 	.word	0x08006985
 80069b4:	08006a09 	.word	0x08006a09
 80069b8:	08006985 	.word	0x08006985
 80069bc:	08006985 	.word	0x08006985
 80069c0:	08006985 	.word	0x08006985
 80069c4:	08006985 	.word	0x08006985
 80069c8:	08006b0f 	.word	0x08006b0f
 80069cc:	08006a35 	.word	0x08006a35
 80069d0:	08006ac9 	.word	0x08006ac9
 80069d4:	08006985 	.word	0x08006985
 80069d8:	08006985 	.word	0x08006985
 80069dc:	08006b31 	.word	0x08006b31
 80069e0:	08006985 	.word	0x08006985
 80069e4:	08006a35 	.word	0x08006a35
 80069e8:	08006985 	.word	0x08006985
 80069ec:	08006985 	.word	0x08006985
 80069f0:	08006ad1 	.word	0x08006ad1
 80069f4:	682b      	ldr	r3, [r5, #0]
 80069f6:	1d1a      	adds	r2, r3, #4
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	602a      	str	r2, [r5, #0]
 80069fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a04:	2301      	movs	r3, #1
 8006a06:	e0a0      	b.n	8006b4a <_printf_i+0x1ee>
 8006a08:	6820      	ldr	r0, [r4, #0]
 8006a0a:	682b      	ldr	r3, [r5, #0]
 8006a0c:	0607      	lsls	r7, r0, #24
 8006a0e:	f103 0104 	add.w	r1, r3, #4
 8006a12:	6029      	str	r1, [r5, #0]
 8006a14:	d501      	bpl.n	8006a1a <_printf_i+0xbe>
 8006a16:	681e      	ldr	r6, [r3, #0]
 8006a18:	e003      	b.n	8006a22 <_printf_i+0xc6>
 8006a1a:	0646      	lsls	r6, r0, #25
 8006a1c:	d5fb      	bpl.n	8006a16 <_printf_i+0xba>
 8006a1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006a22:	2e00      	cmp	r6, #0
 8006a24:	da03      	bge.n	8006a2e <_printf_i+0xd2>
 8006a26:	232d      	movs	r3, #45	; 0x2d
 8006a28:	4276      	negs	r6, r6
 8006a2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a2e:	230a      	movs	r3, #10
 8006a30:	4859      	ldr	r0, [pc, #356]	; (8006b98 <_printf_i+0x23c>)
 8006a32:	e012      	b.n	8006a5a <_printf_i+0xfe>
 8006a34:	682b      	ldr	r3, [r5, #0]
 8006a36:	6820      	ldr	r0, [r4, #0]
 8006a38:	1d19      	adds	r1, r3, #4
 8006a3a:	6029      	str	r1, [r5, #0]
 8006a3c:	0605      	lsls	r5, r0, #24
 8006a3e:	d501      	bpl.n	8006a44 <_printf_i+0xe8>
 8006a40:	681e      	ldr	r6, [r3, #0]
 8006a42:	e002      	b.n	8006a4a <_printf_i+0xee>
 8006a44:	0641      	lsls	r1, r0, #25
 8006a46:	d5fb      	bpl.n	8006a40 <_printf_i+0xe4>
 8006a48:	881e      	ldrh	r6, [r3, #0]
 8006a4a:	2f6f      	cmp	r7, #111	; 0x6f
 8006a4c:	bf0c      	ite	eq
 8006a4e:	2308      	moveq	r3, #8
 8006a50:	230a      	movne	r3, #10
 8006a52:	4851      	ldr	r0, [pc, #324]	; (8006b98 <_printf_i+0x23c>)
 8006a54:	2100      	movs	r1, #0
 8006a56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a5a:	6865      	ldr	r5, [r4, #4]
 8006a5c:	2d00      	cmp	r5, #0
 8006a5e:	bfa8      	it	ge
 8006a60:	6821      	ldrge	r1, [r4, #0]
 8006a62:	60a5      	str	r5, [r4, #8]
 8006a64:	bfa4      	itt	ge
 8006a66:	f021 0104 	bicge.w	r1, r1, #4
 8006a6a:	6021      	strge	r1, [r4, #0]
 8006a6c:	b90e      	cbnz	r6, 8006a72 <_printf_i+0x116>
 8006a6e:	2d00      	cmp	r5, #0
 8006a70:	d04b      	beq.n	8006b0a <_printf_i+0x1ae>
 8006a72:	4615      	mov	r5, r2
 8006a74:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a78:	fb03 6711 	mls	r7, r3, r1, r6
 8006a7c:	5dc7      	ldrb	r7, [r0, r7]
 8006a7e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a82:	4637      	mov	r7, r6
 8006a84:	42bb      	cmp	r3, r7
 8006a86:	460e      	mov	r6, r1
 8006a88:	d9f4      	bls.n	8006a74 <_printf_i+0x118>
 8006a8a:	2b08      	cmp	r3, #8
 8006a8c:	d10b      	bne.n	8006aa6 <_printf_i+0x14a>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	07de      	lsls	r6, r3, #31
 8006a92:	d508      	bpl.n	8006aa6 <_printf_i+0x14a>
 8006a94:	6923      	ldr	r3, [r4, #16]
 8006a96:	6861      	ldr	r1, [r4, #4]
 8006a98:	4299      	cmp	r1, r3
 8006a9a:	bfde      	ittt	le
 8006a9c:	2330      	movle	r3, #48	; 0x30
 8006a9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006aa2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006aa6:	1b52      	subs	r2, r2, r5
 8006aa8:	6122      	str	r2, [r4, #16]
 8006aaa:	464b      	mov	r3, r9
 8006aac:	4621      	mov	r1, r4
 8006aae:	4640      	mov	r0, r8
 8006ab0:	f8cd a000 	str.w	sl, [sp]
 8006ab4:	aa03      	add	r2, sp, #12
 8006ab6:	f7ff fedf 	bl	8006878 <_printf_common>
 8006aba:	3001      	adds	r0, #1
 8006abc:	d14a      	bne.n	8006b54 <_printf_i+0x1f8>
 8006abe:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac2:	b004      	add	sp, #16
 8006ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac8:	6823      	ldr	r3, [r4, #0]
 8006aca:	f043 0320 	orr.w	r3, r3, #32
 8006ace:	6023      	str	r3, [r4, #0]
 8006ad0:	2778      	movs	r7, #120	; 0x78
 8006ad2:	4832      	ldr	r0, [pc, #200]	; (8006b9c <_printf_i+0x240>)
 8006ad4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	6829      	ldr	r1, [r5, #0]
 8006adc:	061f      	lsls	r7, r3, #24
 8006ade:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ae2:	d402      	bmi.n	8006aea <_printf_i+0x18e>
 8006ae4:	065f      	lsls	r7, r3, #25
 8006ae6:	bf48      	it	mi
 8006ae8:	b2b6      	uxthmi	r6, r6
 8006aea:	07df      	lsls	r7, r3, #31
 8006aec:	bf48      	it	mi
 8006aee:	f043 0320 	orrmi.w	r3, r3, #32
 8006af2:	6029      	str	r1, [r5, #0]
 8006af4:	bf48      	it	mi
 8006af6:	6023      	strmi	r3, [r4, #0]
 8006af8:	b91e      	cbnz	r6, 8006b02 <_printf_i+0x1a6>
 8006afa:	6823      	ldr	r3, [r4, #0]
 8006afc:	f023 0320 	bic.w	r3, r3, #32
 8006b00:	6023      	str	r3, [r4, #0]
 8006b02:	2310      	movs	r3, #16
 8006b04:	e7a6      	b.n	8006a54 <_printf_i+0xf8>
 8006b06:	4824      	ldr	r0, [pc, #144]	; (8006b98 <_printf_i+0x23c>)
 8006b08:	e7e4      	b.n	8006ad4 <_printf_i+0x178>
 8006b0a:	4615      	mov	r5, r2
 8006b0c:	e7bd      	b.n	8006a8a <_printf_i+0x12e>
 8006b0e:	682b      	ldr	r3, [r5, #0]
 8006b10:	6826      	ldr	r6, [r4, #0]
 8006b12:	1d18      	adds	r0, r3, #4
 8006b14:	6961      	ldr	r1, [r4, #20]
 8006b16:	6028      	str	r0, [r5, #0]
 8006b18:	0635      	lsls	r5, r6, #24
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	d501      	bpl.n	8006b22 <_printf_i+0x1c6>
 8006b1e:	6019      	str	r1, [r3, #0]
 8006b20:	e002      	b.n	8006b28 <_printf_i+0x1cc>
 8006b22:	0670      	lsls	r0, r6, #25
 8006b24:	d5fb      	bpl.n	8006b1e <_printf_i+0x1c2>
 8006b26:	8019      	strh	r1, [r3, #0]
 8006b28:	2300      	movs	r3, #0
 8006b2a:	4615      	mov	r5, r2
 8006b2c:	6123      	str	r3, [r4, #16]
 8006b2e:	e7bc      	b.n	8006aaa <_printf_i+0x14e>
 8006b30:	682b      	ldr	r3, [r5, #0]
 8006b32:	2100      	movs	r1, #0
 8006b34:	1d1a      	adds	r2, r3, #4
 8006b36:	602a      	str	r2, [r5, #0]
 8006b38:	681d      	ldr	r5, [r3, #0]
 8006b3a:	6862      	ldr	r2, [r4, #4]
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	f000 f9c4 	bl	8006eca <memchr>
 8006b42:	b108      	cbz	r0, 8006b48 <_printf_i+0x1ec>
 8006b44:	1b40      	subs	r0, r0, r5
 8006b46:	6060      	str	r0, [r4, #4]
 8006b48:	6863      	ldr	r3, [r4, #4]
 8006b4a:	6123      	str	r3, [r4, #16]
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b52:	e7aa      	b.n	8006aaa <_printf_i+0x14e>
 8006b54:	462a      	mov	r2, r5
 8006b56:	4649      	mov	r1, r9
 8006b58:	4640      	mov	r0, r8
 8006b5a:	6923      	ldr	r3, [r4, #16]
 8006b5c:	47d0      	blx	sl
 8006b5e:	3001      	adds	r0, #1
 8006b60:	d0ad      	beq.n	8006abe <_printf_i+0x162>
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	079b      	lsls	r3, r3, #30
 8006b66:	d413      	bmi.n	8006b90 <_printf_i+0x234>
 8006b68:	68e0      	ldr	r0, [r4, #12]
 8006b6a:	9b03      	ldr	r3, [sp, #12]
 8006b6c:	4298      	cmp	r0, r3
 8006b6e:	bfb8      	it	lt
 8006b70:	4618      	movlt	r0, r3
 8006b72:	e7a6      	b.n	8006ac2 <_printf_i+0x166>
 8006b74:	2301      	movs	r3, #1
 8006b76:	4632      	mov	r2, r6
 8006b78:	4649      	mov	r1, r9
 8006b7a:	4640      	mov	r0, r8
 8006b7c:	47d0      	blx	sl
 8006b7e:	3001      	adds	r0, #1
 8006b80:	d09d      	beq.n	8006abe <_printf_i+0x162>
 8006b82:	3501      	adds	r5, #1
 8006b84:	68e3      	ldr	r3, [r4, #12]
 8006b86:	9903      	ldr	r1, [sp, #12]
 8006b88:	1a5b      	subs	r3, r3, r1
 8006b8a:	42ab      	cmp	r3, r5
 8006b8c:	dcf2      	bgt.n	8006b74 <_printf_i+0x218>
 8006b8e:	e7eb      	b.n	8006b68 <_printf_i+0x20c>
 8006b90:	2500      	movs	r5, #0
 8006b92:	f104 0619 	add.w	r6, r4, #25
 8006b96:	e7f5      	b.n	8006b84 <_printf_i+0x228>
 8006b98:	080092e6 	.word	0x080092e6
 8006b9c:	080092f7 	.word	0x080092f7

08006ba0 <std>:
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	b510      	push	{r4, lr}
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	e9c0 3300 	strd	r3, r3, [r0]
 8006baa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bae:	6083      	str	r3, [r0, #8]
 8006bb0:	8181      	strh	r1, [r0, #12]
 8006bb2:	6643      	str	r3, [r0, #100]	; 0x64
 8006bb4:	81c2      	strh	r2, [r0, #14]
 8006bb6:	6183      	str	r3, [r0, #24]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	2208      	movs	r2, #8
 8006bbc:	305c      	adds	r0, #92	; 0x5c
 8006bbe:	f000 f8f4 	bl	8006daa <memset>
 8006bc2:	4b0d      	ldr	r3, [pc, #52]	; (8006bf8 <std+0x58>)
 8006bc4:	6224      	str	r4, [r4, #32]
 8006bc6:	6263      	str	r3, [r4, #36]	; 0x24
 8006bc8:	4b0c      	ldr	r3, [pc, #48]	; (8006bfc <std+0x5c>)
 8006bca:	62a3      	str	r3, [r4, #40]	; 0x28
 8006bcc:	4b0c      	ldr	r3, [pc, #48]	; (8006c00 <std+0x60>)
 8006bce:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006bd0:	4b0c      	ldr	r3, [pc, #48]	; (8006c04 <std+0x64>)
 8006bd2:	6323      	str	r3, [r4, #48]	; 0x30
 8006bd4:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <std+0x68>)
 8006bd6:	429c      	cmp	r4, r3
 8006bd8:	d006      	beq.n	8006be8 <std+0x48>
 8006bda:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006bde:	4294      	cmp	r4, r2
 8006be0:	d002      	beq.n	8006be8 <std+0x48>
 8006be2:	33d0      	adds	r3, #208	; 0xd0
 8006be4:	429c      	cmp	r4, r3
 8006be6:	d105      	bne.n	8006bf4 <std+0x54>
 8006be8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bf0:	f000 b968 	b.w	8006ec4 <__retarget_lock_init_recursive>
 8006bf4:	bd10      	pop	{r4, pc}
 8006bf6:	bf00      	nop
 8006bf8:	08006d25 	.word	0x08006d25
 8006bfc:	08006d47 	.word	0x08006d47
 8006c00:	08006d7f 	.word	0x08006d7f
 8006c04:	08006da3 	.word	0x08006da3
 8006c08:	20000914 	.word	0x20000914

08006c0c <stdio_exit_handler>:
 8006c0c:	4a02      	ldr	r2, [pc, #8]	; (8006c18 <stdio_exit_handler+0xc>)
 8006c0e:	4903      	ldr	r1, [pc, #12]	; (8006c1c <stdio_exit_handler+0x10>)
 8006c10:	4803      	ldr	r0, [pc, #12]	; (8006c20 <stdio_exit_handler+0x14>)
 8006c12:	f000 b869 	b.w	8006ce8 <_fwalk_sglue>
 8006c16:	bf00      	nop
 8006c18:	20000070 	.word	0x20000070
 8006c1c:	08008445 	.word	0x08008445
 8006c20:	2000007c 	.word	0x2000007c

08006c24 <cleanup_stdio>:
 8006c24:	6841      	ldr	r1, [r0, #4]
 8006c26:	4b0c      	ldr	r3, [pc, #48]	; (8006c58 <cleanup_stdio+0x34>)
 8006c28:	b510      	push	{r4, lr}
 8006c2a:	4299      	cmp	r1, r3
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	d001      	beq.n	8006c34 <cleanup_stdio+0x10>
 8006c30:	f001 fc08 	bl	8008444 <_fflush_r>
 8006c34:	68a1      	ldr	r1, [r4, #8]
 8006c36:	4b09      	ldr	r3, [pc, #36]	; (8006c5c <cleanup_stdio+0x38>)
 8006c38:	4299      	cmp	r1, r3
 8006c3a:	d002      	beq.n	8006c42 <cleanup_stdio+0x1e>
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f001 fc01 	bl	8008444 <_fflush_r>
 8006c42:	68e1      	ldr	r1, [r4, #12]
 8006c44:	4b06      	ldr	r3, [pc, #24]	; (8006c60 <cleanup_stdio+0x3c>)
 8006c46:	4299      	cmp	r1, r3
 8006c48:	d004      	beq.n	8006c54 <cleanup_stdio+0x30>
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c50:	f001 bbf8 	b.w	8008444 <_fflush_r>
 8006c54:	bd10      	pop	{r4, pc}
 8006c56:	bf00      	nop
 8006c58:	20000914 	.word	0x20000914
 8006c5c:	2000097c 	.word	0x2000097c
 8006c60:	200009e4 	.word	0x200009e4

08006c64 <global_stdio_init.part.0>:
 8006c64:	b510      	push	{r4, lr}
 8006c66:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <global_stdio_init.part.0+0x30>)
 8006c68:	4c0b      	ldr	r4, [pc, #44]	; (8006c98 <global_stdio_init.part.0+0x34>)
 8006c6a:	4a0c      	ldr	r2, [pc, #48]	; (8006c9c <global_stdio_init.part.0+0x38>)
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	2104      	movs	r1, #4
 8006c72:	2200      	movs	r2, #0
 8006c74:	f7ff ff94 	bl	8006ba0 <std>
 8006c78:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	2109      	movs	r1, #9
 8006c80:	f7ff ff8e 	bl	8006ba0 <std>
 8006c84:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006c88:	2202      	movs	r2, #2
 8006c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c8e:	2112      	movs	r1, #18
 8006c90:	f7ff bf86 	b.w	8006ba0 <std>
 8006c94:	20000a4c 	.word	0x20000a4c
 8006c98:	20000914 	.word	0x20000914
 8006c9c:	08006c0d 	.word	0x08006c0d

08006ca0 <__sfp_lock_acquire>:
 8006ca0:	4801      	ldr	r0, [pc, #4]	; (8006ca8 <__sfp_lock_acquire+0x8>)
 8006ca2:	f000 b910 	b.w	8006ec6 <__retarget_lock_acquire_recursive>
 8006ca6:	bf00      	nop
 8006ca8:	20000a55 	.word	0x20000a55

08006cac <__sfp_lock_release>:
 8006cac:	4801      	ldr	r0, [pc, #4]	; (8006cb4 <__sfp_lock_release+0x8>)
 8006cae:	f000 b90b 	b.w	8006ec8 <__retarget_lock_release_recursive>
 8006cb2:	bf00      	nop
 8006cb4:	20000a55 	.word	0x20000a55

08006cb8 <__sinit>:
 8006cb8:	b510      	push	{r4, lr}
 8006cba:	4604      	mov	r4, r0
 8006cbc:	f7ff fff0 	bl	8006ca0 <__sfp_lock_acquire>
 8006cc0:	6a23      	ldr	r3, [r4, #32]
 8006cc2:	b11b      	cbz	r3, 8006ccc <__sinit+0x14>
 8006cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc8:	f7ff bff0 	b.w	8006cac <__sfp_lock_release>
 8006ccc:	4b04      	ldr	r3, [pc, #16]	; (8006ce0 <__sinit+0x28>)
 8006cce:	6223      	str	r3, [r4, #32]
 8006cd0:	4b04      	ldr	r3, [pc, #16]	; (8006ce4 <__sinit+0x2c>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1f5      	bne.n	8006cc4 <__sinit+0xc>
 8006cd8:	f7ff ffc4 	bl	8006c64 <global_stdio_init.part.0>
 8006cdc:	e7f2      	b.n	8006cc4 <__sinit+0xc>
 8006cde:	bf00      	nop
 8006ce0:	08006c25 	.word	0x08006c25
 8006ce4:	20000a4c 	.word	0x20000a4c

08006ce8 <_fwalk_sglue>:
 8006ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cec:	4607      	mov	r7, r0
 8006cee:	4688      	mov	r8, r1
 8006cf0:	4614      	mov	r4, r2
 8006cf2:	2600      	movs	r6, #0
 8006cf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cf8:	f1b9 0901 	subs.w	r9, r9, #1
 8006cfc:	d505      	bpl.n	8006d0a <_fwalk_sglue+0x22>
 8006cfe:	6824      	ldr	r4, [r4, #0]
 8006d00:	2c00      	cmp	r4, #0
 8006d02:	d1f7      	bne.n	8006cf4 <_fwalk_sglue+0xc>
 8006d04:	4630      	mov	r0, r6
 8006d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d0a:	89ab      	ldrh	r3, [r5, #12]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d907      	bls.n	8006d20 <_fwalk_sglue+0x38>
 8006d10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d14:	3301      	adds	r3, #1
 8006d16:	d003      	beq.n	8006d20 <_fwalk_sglue+0x38>
 8006d18:	4629      	mov	r1, r5
 8006d1a:	4638      	mov	r0, r7
 8006d1c:	47c0      	blx	r8
 8006d1e:	4306      	orrs	r6, r0
 8006d20:	3568      	adds	r5, #104	; 0x68
 8006d22:	e7e9      	b.n	8006cf8 <_fwalk_sglue+0x10>

08006d24 <__sread>:
 8006d24:	b510      	push	{r4, lr}
 8006d26:	460c      	mov	r4, r1
 8006d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d2c:	f000 f86c 	bl	8006e08 <_read_r>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	bfab      	itete	ge
 8006d34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d36:	89a3      	ldrhlt	r3, [r4, #12]
 8006d38:	181b      	addge	r3, r3, r0
 8006d3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d3e:	bfac      	ite	ge
 8006d40:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d42:	81a3      	strhlt	r3, [r4, #12]
 8006d44:	bd10      	pop	{r4, pc}

08006d46 <__swrite>:
 8006d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d4a:	461f      	mov	r7, r3
 8006d4c:	898b      	ldrh	r3, [r1, #12]
 8006d4e:	4605      	mov	r5, r0
 8006d50:	05db      	lsls	r3, r3, #23
 8006d52:	460c      	mov	r4, r1
 8006d54:	4616      	mov	r6, r2
 8006d56:	d505      	bpl.n	8006d64 <__swrite+0x1e>
 8006d58:	2302      	movs	r3, #2
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d60:	f000 f840 	bl	8006de4 <_lseek_r>
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	4632      	mov	r2, r6
 8006d68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d6c:	81a3      	strh	r3, [r4, #12]
 8006d6e:	4628      	mov	r0, r5
 8006d70:	463b      	mov	r3, r7
 8006d72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d7a:	f000 b867 	b.w	8006e4c <_write_r>

08006d7e <__sseek>:
 8006d7e:	b510      	push	{r4, lr}
 8006d80:	460c      	mov	r4, r1
 8006d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d86:	f000 f82d 	bl	8006de4 <_lseek_r>
 8006d8a:	1c43      	adds	r3, r0, #1
 8006d8c:	89a3      	ldrh	r3, [r4, #12]
 8006d8e:	bf15      	itete	ne
 8006d90:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d9a:	81a3      	strheq	r3, [r4, #12]
 8006d9c:	bf18      	it	ne
 8006d9e:	81a3      	strhne	r3, [r4, #12]
 8006da0:	bd10      	pop	{r4, pc}

08006da2 <__sclose>:
 8006da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da6:	f000 b80d 	b.w	8006dc4 <_close_r>

08006daa <memset>:
 8006daa:	4603      	mov	r3, r0
 8006dac:	4402      	add	r2, r0
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d100      	bne.n	8006db4 <memset+0xa>
 8006db2:	4770      	bx	lr
 8006db4:	f803 1b01 	strb.w	r1, [r3], #1
 8006db8:	e7f9      	b.n	8006dae <memset+0x4>
	...

08006dbc <_localeconv_r>:
 8006dbc:	4800      	ldr	r0, [pc, #0]	; (8006dc0 <_localeconv_r+0x4>)
 8006dbe:	4770      	bx	lr
 8006dc0:	200001bc 	.word	0x200001bc

08006dc4 <_close_r>:
 8006dc4:	b538      	push	{r3, r4, r5, lr}
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	4d05      	ldr	r5, [pc, #20]	; (8006de0 <_close_r+0x1c>)
 8006dca:	4604      	mov	r4, r0
 8006dcc:	4608      	mov	r0, r1
 8006dce:	602b      	str	r3, [r5, #0]
 8006dd0:	f7fb fd6c 	bl	80028ac <_close>
 8006dd4:	1c43      	adds	r3, r0, #1
 8006dd6:	d102      	bne.n	8006dde <_close_r+0x1a>
 8006dd8:	682b      	ldr	r3, [r5, #0]
 8006dda:	b103      	cbz	r3, 8006dde <_close_r+0x1a>
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	bd38      	pop	{r3, r4, r5, pc}
 8006de0:	20000a50 	.word	0x20000a50

08006de4 <_lseek_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	4604      	mov	r4, r0
 8006de8:	4608      	mov	r0, r1
 8006dea:	4611      	mov	r1, r2
 8006dec:	2200      	movs	r2, #0
 8006dee:	4d05      	ldr	r5, [pc, #20]	; (8006e04 <_lseek_r+0x20>)
 8006df0:	602a      	str	r2, [r5, #0]
 8006df2:	461a      	mov	r2, r3
 8006df4:	f7fb fd7e 	bl	80028f4 <_lseek>
 8006df8:	1c43      	adds	r3, r0, #1
 8006dfa:	d102      	bne.n	8006e02 <_lseek_r+0x1e>
 8006dfc:	682b      	ldr	r3, [r5, #0]
 8006dfe:	b103      	cbz	r3, 8006e02 <_lseek_r+0x1e>
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	bd38      	pop	{r3, r4, r5, pc}
 8006e04:	20000a50 	.word	0x20000a50

08006e08 <_read_r>:
 8006e08:	b538      	push	{r3, r4, r5, lr}
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	4611      	mov	r1, r2
 8006e10:	2200      	movs	r2, #0
 8006e12:	4d05      	ldr	r5, [pc, #20]	; (8006e28 <_read_r+0x20>)
 8006e14:	602a      	str	r2, [r5, #0]
 8006e16:	461a      	mov	r2, r3
 8006e18:	f7fb fd0f 	bl	800283a <_read>
 8006e1c:	1c43      	adds	r3, r0, #1
 8006e1e:	d102      	bne.n	8006e26 <_read_r+0x1e>
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	b103      	cbz	r3, 8006e26 <_read_r+0x1e>
 8006e24:	6023      	str	r3, [r4, #0]
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
 8006e28:	20000a50 	.word	0x20000a50

08006e2c <_sbrk_r>:
 8006e2c:	b538      	push	{r3, r4, r5, lr}
 8006e2e:	2300      	movs	r3, #0
 8006e30:	4d05      	ldr	r5, [pc, #20]	; (8006e48 <_sbrk_r+0x1c>)
 8006e32:	4604      	mov	r4, r0
 8006e34:	4608      	mov	r0, r1
 8006e36:	602b      	str	r3, [r5, #0]
 8006e38:	f7fb fd68 	bl	800290c <_sbrk>
 8006e3c:	1c43      	adds	r3, r0, #1
 8006e3e:	d102      	bne.n	8006e46 <_sbrk_r+0x1a>
 8006e40:	682b      	ldr	r3, [r5, #0]
 8006e42:	b103      	cbz	r3, 8006e46 <_sbrk_r+0x1a>
 8006e44:	6023      	str	r3, [r4, #0]
 8006e46:	bd38      	pop	{r3, r4, r5, pc}
 8006e48:	20000a50 	.word	0x20000a50

08006e4c <_write_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	4604      	mov	r4, r0
 8006e50:	4608      	mov	r0, r1
 8006e52:	4611      	mov	r1, r2
 8006e54:	2200      	movs	r2, #0
 8006e56:	4d05      	ldr	r5, [pc, #20]	; (8006e6c <_write_r+0x20>)
 8006e58:	602a      	str	r2, [r5, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f7fb fd0a 	bl	8002874 <_write>
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	d102      	bne.n	8006e6a <_write_r+0x1e>
 8006e64:	682b      	ldr	r3, [r5, #0]
 8006e66:	b103      	cbz	r3, 8006e6a <_write_r+0x1e>
 8006e68:	6023      	str	r3, [r4, #0]
 8006e6a:	bd38      	pop	{r3, r4, r5, pc}
 8006e6c:	20000a50 	.word	0x20000a50

08006e70 <__errno>:
 8006e70:	4b01      	ldr	r3, [pc, #4]	; (8006e78 <__errno+0x8>)
 8006e72:	6818      	ldr	r0, [r3, #0]
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	200000c8 	.word	0x200000c8

08006e7c <__libc_init_array>:
 8006e7c:	b570      	push	{r4, r5, r6, lr}
 8006e7e:	2600      	movs	r6, #0
 8006e80:	4d0c      	ldr	r5, [pc, #48]	; (8006eb4 <__libc_init_array+0x38>)
 8006e82:	4c0d      	ldr	r4, [pc, #52]	; (8006eb8 <__libc_init_array+0x3c>)
 8006e84:	1b64      	subs	r4, r4, r5
 8006e86:	10a4      	asrs	r4, r4, #2
 8006e88:	42a6      	cmp	r6, r4
 8006e8a:	d109      	bne.n	8006ea0 <__libc_init_array+0x24>
 8006e8c:	f002 f806 	bl	8008e9c <_init>
 8006e90:	2600      	movs	r6, #0
 8006e92:	4d0a      	ldr	r5, [pc, #40]	; (8006ebc <__libc_init_array+0x40>)
 8006e94:	4c0a      	ldr	r4, [pc, #40]	; (8006ec0 <__libc_init_array+0x44>)
 8006e96:	1b64      	subs	r4, r4, r5
 8006e98:	10a4      	asrs	r4, r4, #2
 8006e9a:	42a6      	cmp	r6, r4
 8006e9c:	d105      	bne.n	8006eaa <__libc_init_array+0x2e>
 8006e9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea4:	4798      	blx	r3
 8006ea6:	3601      	adds	r6, #1
 8006ea8:	e7ee      	b.n	8006e88 <__libc_init_array+0xc>
 8006eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eae:	4798      	blx	r3
 8006eb0:	3601      	adds	r6, #1
 8006eb2:	e7f2      	b.n	8006e9a <__libc_init_array+0x1e>
 8006eb4:	0800964c 	.word	0x0800964c
 8006eb8:	0800964c 	.word	0x0800964c
 8006ebc:	0800964c 	.word	0x0800964c
 8006ec0:	08009650 	.word	0x08009650

08006ec4 <__retarget_lock_init_recursive>:
 8006ec4:	4770      	bx	lr

08006ec6 <__retarget_lock_acquire_recursive>:
 8006ec6:	4770      	bx	lr

08006ec8 <__retarget_lock_release_recursive>:
 8006ec8:	4770      	bx	lr

08006eca <memchr>:
 8006eca:	4603      	mov	r3, r0
 8006ecc:	b510      	push	{r4, lr}
 8006ece:	b2c9      	uxtb	r1, r1
 8006ed0:	4402      	add	r2, r0
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	d101      	bne.n	8006edc <memchr+0x12>
 8006ed8:	2000      	movs	r0, #0
 8006eda:	e003      	b.n	8006ee4 <memchr+0x1a>
 8006edc:	7804      	ldrb	r4, [r0, #0]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	428c      	cmp	r4, r1
 8006ee2:	d1f6      	bne.n	8006ed2 <memchr+0x8>
 8006ee4:	bd10      	pop	{r4, pc}

08006ee6 <quorem>:
 8006ee6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eea:	6903      	ldr	r3, [r0, #16]
 8006eec:	690c      	ldr	r4, [r1, #16]
 8006eee:	4607      	mov	r7, r0
 8006ef0:	42a3      	cmp	r3, r4
 8006ef2:	db7f      	blt.n	8006ff4 <quorem+0x10e>
 8006ef4:	3c01      	subs	r4, #1
 8006ef6:	f100 0514 	add.w	r5, r0, #20
 8006efa:	f101 0814 	add.w	r8, r1, #20
 8006efe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f02:	9301      	str	r3, [sp, #4]
 8006f04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006f18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f1c:	d331      	bcc.n	8006f82 <quorem+0x9c>
 8006f1e:	f04f 0e00 	mov.w	lr, #0
 8006f22:	4640      	mov	r0, r8
 8006f24:	46ac      	mov	ip, r5
 8006f26:	46f2      	mov	sl, lr
 8006f28:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f2c:	b293      	uxth	r3, r2
 8006f2e:	fb06 e303 	mla	r3, r6, r3, lr
 8006f32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f36:	0c1a      	lsrs	r2, r3, #16
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	fb06 220e 	mla	r2, r6, lr, r2
 8006f3e:	ebaa 0303 	sub.w	r3, sl, r3
 8006f42:	f8dc a000 	ldr.w	sl, [ip]
 8006f46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f4a:	fa1f fa8a 	uxth.w	sl, sl
 8006f4e:	4453      	add	r3, sl
 8006f50:	f8dc a000 	ldr.w	sl, [ip]
 8006f54:	b292      	uxth	r2, r2
 8006f56:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006f5a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f64:	4581      	cmp	r9, r0
 8006f66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f6a:	f84c 3b04 	str.w	r3, [ip], #4
 8006f6e:	d2db      	bcs.n	8006f28 <quorem+0x42>
 8006f70:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f74:	b92b      	cbnz	r3, 8006f82 <quorem+0x9c>
 8006f76:	9b01      	ldr	r3, [sp, #4]
 8006f78:	3b04      	subs	r3, #4
 8006f7a:	429d      	cmp	r5, r3
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	d32d      	bcc.n	8006fdc <quorem+0xf6>
 8006f80:	613c      	str	r4, [r7, #16]
 8006f82:	4638      	mov	r0, r7
 8006f84:	f001 f8de 	bl	8008144 <__mcmp>
 8006f88:	2800      	cmp	r0, #0
 8006f8a:	db23      	blt.n	8006fd4 <quorem+0xee>
 8006f8c:	4629      	mov	r1, r5
 8006f8e:	2000      	movs	r0, #0
 8006f90:	3601      	adds	r6, #1
 8006f92:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f96:	f8d1 c000 	ldr.w	ip, [r1]
 8006f9a:	b293      	uxth	r3, r2
 8006f9c:	1ac3      	subs	r3, r0, r3
 8006f9e:	0c12      	lsrs	r2, r2, #16
 8006fa0:	fa1f f08c 	uxth.w	r0, ip
 8006fa4:	4403      	add	r3, r0
 8006fa6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006faa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fae:	b29b      	uxth	r3, r3
 8006fb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fb4:	45c1      	cmp	r9, r8
 8006fb6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006fba:	f841 3b04 	str.w	r3, [r1], #4
 8006fbe:	d2e8      	bcs.n	8006f92 <quorem+0xac>
 8006fc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fc8:	b922      	cbnz	r2, 8006fd4 <quorem+0xee>
 8006fca:	3b04      	subs	r3, #4
 8006fcc:	429d      	cmp	r5, r3
 8006fce:	461a      	mov	r2, r3
 8006fd0:	d30a      	bcc.n	8006fe8 <quorem+0x102>
 8006fd2:	613c      	str	r4, [r7, #16]
 8006fd4:	4630      	mov	r0, r6
 8006fd6:	b003      	add	sp, #12
 8006fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fdc:	6812      	ldr	r2, [r2, #0]
 8006fde:	3b04      	subs	r3, #4
 8006fe0:	2a00      	cmp	r2, #0
 8006fe2:	d1cd      	bne.n	8006f80 <quorem+0x9a>
 8006fe4:	3c01      	subs	r4, #1
 8006fe6:	e7c8      	b.n	8006f7a <quorem+0x94>
 8006fe8:	6812      	ldr	r2, [r2, #0]
 8006fea:	3b04      	subs	r3, #4
 8006fec:	2a00      	cmp	r2, #0
 8006fee:	d1f0      	bne.n	8006fd2 <quorem+0xec>
 8006ff0:	3c01      	subs	r4, #1
 8006ff2:	e7eb      	b.n	8006fcc <quorem+0xe6>
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	e7ee      	b.n	8006fd6 <quorem+0xf0>

08006ff8 <_dtoa_r>:
 8006ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	4616      	mov	r6, r2
 8006ffe:	461f      	mov	r7, r3
 8007000:	69c4      	ldr	r4, [r0, #28]
 8007002:	b099      	sub	sp, #100	; 0x64
 8007004:	4605      	mov	r5, r0
 8007006:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800700a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800700e:	b974      	cbnz	r4, 800702e <_dtoa_r+0x36>
 8007010:	2010      	movs	r0, #16
 8007012:	f7ff f8ab 	bl	800616c <malloc>
 8007016:	4602      	mov	r2, r0
 8007018:	61e8      	str	r0, [r5, #28]
 800701a:	b920      	cbnz	r0, 8007026 <_dtoa_r+0x2e>
 800701c:	21ef      	movs	r1, #239	; 0xef
 800701e:	4bac      	ldr	r3, [pc, #688]	; (80072d0 <_dtoa_r+0x2d8>)
 8007020:	48ac      	ldr	r0, [pc, #688]	; (80072d4 <_dtoa_r+0x2dc>)
 8007022:	f001 fa45 	bl	80084b0 <__assert_func>
 8007026:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800702a:	6004      	str	r4, [r0, #0]
 800702c:	60c4      	str	r4, [r0, #12]
 800702e:	69eb      	ldr	r3, [r5, #28]
 8007030:	6819      	ldr	r1, [r3, #0]
 8007032:	b151      	cbz	r1, 800704a <_dtoa_r+0x52>
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	2301      	movs	r3, #1
 8007038:	4093      	lsls	r3, r2
 800703a:	604a      	str	r2, [r1, #4]
 800703c:	608b      	str	r3, [r1, #8]
 800703e:	4628      	mov	r0, r5
 8007040:	f000 fe46 	bl	8007cd0 <_Bfree>
 8007044:	2200      	movs	r2, #0
 8007046:	69eb      	ldr	r3, [r5, #28]
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	1e3b      	subs	r3, r7, #0
 800704c:	bfaf      	iteee	ge
 800704e:	2300      	movge	r3, #0
 8007050:	2201      	movlt	r2, #1
 8007052:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007056:	9305      	strlt	r3, [sp, #20]
 8007058:	bfa8      	it	ge
 800705a:	f8c8 3000 	strge.w	r3, [r8]
 800705e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007062:	4b9d      	ldr	r3, [pc, #628]	; (80072d8 <_dtoa_r+0x2e0>)
 8007064:	bfb8      	it	lt
 8007066:	f8c8 2000 	strlt.w	r2, [r8]
 800706a:	ea33 0309 	bics.w	r3, r3, r9
 800706e:	d119      	bne.n	80070a4 <_dtoa_r+0xac>
 8007070:	f242 730f 	movw	r3, #9999	; 0x270f
 8007074:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800707c:	4333      	orrs	r3, r6
 800707e:	f000 8589 	beq.w	8007b94 <_dtoa_r+0xb9c>
 8007082:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007084:	b953      	cbnz	r3, 800709c <_dtoa_r+0xa4>
 8007086:	4b95      	ldr	r3, [pc, #596]	; (80072dc <_dtoa_r+0x2e4>)
 8007088:	e023      	b.n	80070d2 <_dtoa_r+0xda>
 800708a:	4b95      	ldr	r3, [pc, #596]	; (80072e0 <_dtoa_r+0x2e8>)
 800708c:	9303      	str	r3, [sp, #12]
 800708e:	3308      	adds	r3, #8
 8007090:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007092:	6013      	str	r3, [r2, #0]
 8007094:	9803      	ldr	r0, [sp, #12]
 8007096:	b019      	add	sp, #100	; 0x64
 8007098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800709c:	4b8f      	ldr	r3, [pc, #572]	; (80072dc <_dtoa_r+0x2e4>)
 800709e:	9303      	str	r3, [sp, #12]
 80070a0:	3303      	adds	r3, #3
 80070a2:	e7f5      	b.n	8007090 <_dtoa_r+0x98>
 80070a4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80070a8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80070ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070b0:	2200      	movs	r2, #0
 80070b2:	2300      	movs	r3, #0
 80070b4:	f7f9 fcb4 	bl	8000a20 <__aeabi_dcmpeq>
 80070b8:	4680      	mov	r8, r0
 80070ba:	b160      	cbz	r0, 80070d6 <_dtoa_r+0xde>
 80070bc:	2301      	movs	r3, #1
 80070be:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 8562 	beq.w	8007b8e <_dtoa_r+0xb96>
 80070ca:	4b86      	ldr	r3, [pc, #536]	; (80072e4 <_dtoa_r+0x2ec>)
 80070cc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80070ce:	6013      	str	r3, [r2, #0]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	9303      	str	r3, [sp, #12]
 80070d4:	e7de      	b.n	8007094 <_dtoa_r+0x9c>
 80070d6:	ab16      	add	r3, sp, #88	; 0x58
 80070d8:	9301      	str	r3, [sp, #4]
 80070da:	ab17      	add	r3, sp, #92	; 0x5c
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	4628      	mov	r0, r5
 80070e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80070e4:	f001 f8d6 	bl	8008294 <__d2b>
 80070e8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80070ec:	4682      	mov	sl, r0
 80070ee:	2c00      	cmp	r4, #0
 80070f0:	d07e      	beq.n	80071f0 <_dtoa_r+0x1f8>
 80070f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80070f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070f8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80070fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007100:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007104:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007108:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800710c:	4619      	mov	r1, r3
 800710e:	2200      	movs	r2, #0
 8007110:	4b75      	ldr	r3, [pc, #468]	; (80072e8 <_dtoa_r+0x2f0>)
 8007112:	f7f9 f865 	bl	80001e0 <__aeabi_dsub>
 8007116:	a368      	add	r3, pc, #416	; (adr r3, 80072b8 <_dtoa_r+0x2c0>)
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	f7f9 fa18 	bl	8000550 <__aeabi_dmul>
 8007120:	a367      	add	r3, pc, #412	; (adr r3, 80072c0 <_dtoa_r+0x2c8>)
 8007122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007126:	f7f9 f85d 	bl	80001e4 <__adddf3>
 800712a:	4606      	mov	r6, r0
 800712c:	4620      	mov	r0, r4
 800712e:	460f      	mov	r7, r1
 8007130:	f7f9 f9a4 	bl	800047c <__aeabi_i2d>
 8007134:	a364      	add	r3, pc, #400	; (adr r3, 80072c8 <_dtoa_r+0x2d0>)
 8007136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713a:	f7f9 fa09 	bl	8000550 <__aeabi_dmul>
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
 8007142:	4630      	mov	r0, r6
 8007144:	4639      	mov	r1, r7
 8007146:	f7f9 f84d 	bl	80001e4 <__adddf3>
 800714a:	4606      	mov	r6, r0
 800714c:	460f      	mov	r7, r1
 800714e:	f7f9 fcaf 	bl	8000ab0 <__aeabi_d2iz>
 8007152:	2200      	movs	r2, #0
 8007154:	4683      	mov	fp, r0
 8007156:	2300      	movs	r3, #0
 8007158:	4630      	mov	r0, r6
 800715a:	4639      	mov	r1, r7
 800715c:	f7f9 fc6a 	bl	8000a34 <__aeabi_dcmplt>
 8007160:	b148      	cbz	r0, 8007176 <_dtoa_r+0x17e>
 8007162:	4658      	mov	r0, fp
 8007164:	f7f9 f98a 	bl	800047c <__aeabi_i2d>
 8007168:	4632      	mov	r2, r6
 800716a:	463b      	mov	r3, r7
 800716c:	f7f9 fc58 	bl	8000a20 <__aeabi_dcmpeq>
 8007170:	b908      	cbnz	r0, 8007176 <_dtoa_r+0x17e>
 8007172:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007176:	f1bb 0f16 	cmp.w	fp, #22
 800717a:	d857      	bhi.n	800722c <_dtoa_r+0x234>
 800717c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007180:	4b5a      	ldr	r3, [pc, #360]	; (80072ec <_dtoa_r+0x2f4>)
 8007182:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718a:	f7f9 fc53 	bl	8000a34 <__aeabi_dcmplt>
 800718e:	2800      	cmp	r0, #0
 8007190:	d04e      	beq.n	8007230 <_dtoa_r+0x238>
 8007192:	2300      	movs	r3, #0
 8007194:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007198:	930f      	str	r3, [sp, #60]	; 0x3c
 800719a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800719c:	1b1b      	subs	r3, r3, r4
 800719e:	1e5a      	subs	r2, r3, #1
 80071a0:	bf46      	itte	mi
 80071a2:	f1c3 0901 	rsbmi	r9, r3, #1
 80071a6:	2300      	movmi	r3, #0
 80071a8:	f04f 0900 	movpl.w	r9, #0
 80071ac:	9209      	str	r2, [sp, #36]	; 0x24
 80071ae:	bf48      	it	mi
 80071b0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80071b2:	f1bb 0f00 	cmp.w	fp, #0
 80071b6:	db3d      	blt.n	8007234 <_dtoa_r+0x23c>
 80071b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ba:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80071be:	445b      	add	r3, fp
 80071c0:	9309      	str	r3, [sp, #36]	; 0x24
 80071c2:	2300      	movs	r3, #0
 80071c4:	930a      	str	r3, [sp, #40]	; 0x28
 80071c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071c8:	2b09      	cmp	r3, #9
 80071ca:	d867      	bhi.n	800729c <_dtoa_r+0x2a4>
 80071cc:	2b05      	cmp	r3, #5
 80071ce:	bfc4      	itt	gt
 80071d0:	3b04      	subgt	r3, #4
 80071d2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80071d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071d6:	bfc8      	it	gt
 80071d8:	2400      	movgt	r4, #0
 80071da:	f1a3 0302 	sub.w	r3, r3, #2
 80071de:	bfd8      	it	le
 80071e0:	2401      	movle	r4, #1
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	f200 8086 	bhi.w	80072f4 <_dtoa_r+0x2fc>
 80071e8:	e8df f003 	tbb	[pc, r3]
 80071ec:	5637392c 	.word	0x5637392c
 80071f0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80071f4:	441c      	add	r4, r3
 80071f6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80071fa:	2b20      	cmp	r3, #32
 80071fc:	bfc1      	itttt	gt
 80071fe:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007202:	fa09 f903 	lslgt.w	r9, r9, r3
 8007206:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800720a:	fa26 f303 	lsrgt.w	r3, r6, r3
 800720e:	bfd6      	itet	le
 8007210:	f1c3 0320 	rsble	r3, r3, #32
 8007214:	ea49 0003 	orrgt.w	r0, r9, r3
 8007218:	fa06 f003 	lslle.w	r0, r6, r3
 800721c:	f7f9 f91e 	bl	800045c <__aeabi_ui2d>
 8007220:	2201      	movs	r2, #1
 8007222:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007226:	3c01      	subs	r4, #1
 8007228:	9213      	str	r2, [sp, #76]	; 0x4c
 800722a:	e76f      	b.n	800710c <_dtoa_r+0x114>
 800722c:	2301      	movs	r3, #1
 800722e:	e7b3      	b.n	8007198 <_dtoa_r+0x1a0>
 8007230:	900f      	str	r0, [sp, #60]	; 0x3c
 8007232:	e7b2      	b.n	800719a <_dtoa_r+0x1a2>
 8007234:	f1cb 0300 	rsb	r3, fp, #0
 8007238:	930a      	str	r3, [sp, #40]	; 0x28
 800723a:	2300      	movs	r3, #0
 800723c:	eba9 090b 	sub.w	r9, r9, fp
 8007240:	930e      	str	r3, [sp, #56]	; 0x38
 8007242:	e7c0      	b.n	80071c6 <_dtoa_r+0x1ce>
 8007244:	2300      	movs	r3, #0
 8007246:	930b      	str	r3, [sp, #44]	; 0x2c
 8007248:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800724a:	2b00      	cmp	r3, #0
 800724c:	dc55      	bgt.n	80072fa <_dtoa_r+0x302>
 800724e:	2301      	movs	r3, #1
 8007250:	461a      	mov	r2, r3
 8007252:	9306      	str	r3, [sp, #24]
 8007254:	9308      	str	r3, [sp, #32]
 8007256:	9223      	str	r2, [sp, #140]	; 0x8c
 8007258:	e00b      	b.n	8007272 <_dtoa_r+0x27a>
 800725a:	2301      	movs	r3, #1
 800725c:	e7f3      	b.n	8007246 <_dtoa_r+0x24e>
 800725e:	2300      	movs	r3, #0
 8007260:	930b      	str	r3, [sp, #44]	; 0x2c
 8007262:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007264:	445b      	add	r3, fp
 8007266:	9306      	str	r3, [sp, #24]
 8007268:	3301      	adds	r3, #1
 800726a:	2b01      	cmp	r3, #1
 800726c:	9308      	str	r3, [sp, #32]
 800726e:	bfb8      	it	lt
 8007270:	2301      	movlt	r3, #1
 8007272:	2100      	movs	r1, #0
 8007274:	2204      	movs	r2, #4
 8007276:	69e8      	ldr	r0, [r5, #28]
 8007278:	f102 0614 	add.w	r6, r2, #20
 800727c:	429e      	cmp	r6, r3
 800727e:	d940      	bls.n	8007302 <_dtoa_r+0x30a>
 8007280:	6041      	str	r1, [r0, #4]
 8007282:	4628      	mov	r0, r5
 8007284:	f000 fce4 	bl	8007c50 <_Balloc>
 8007288:	9003      	str	r0, [sp, #12]
 800728a:	2800      	cmp	r0, #0
 800728c:	d13c      	bne.n	8007308 <_dtoa_r+0x310>
 800728e:	4602      	mov	r2, r0
 8007290:	f240 11af 	movw	r1, #431	; 0x1af
 8007294:	4b16      	ldr	r3, [pc, #88]	; (80072f0 <_dtoa_r+0x2f8>)
 8007296:	e6c3      	b.n	8007020 <_dtoa_r+0x28>
 8007298:	2301      	movs	r3, #1
 800729a:	e7e1      	b.n	8007260 <_dtoa_r+0x268>
 800729c:	2401      	movs	r4, #1
 800729e:	2300      	movs	r3, #0
 80072a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80072a2:	9322      	str	r3, [sp, #136]	; 0x88
 80072a4:	f04f 33ff 	mov.w	r3, #4294967295
 80072a8:	2200      	movs	r2, #0
 80072aa:	9306      	str	r3, [sp, #24]
 80072ac:	9308      	str	r3, [sp, #32]
 80072ae:	2312      	movs	r3, #18
 80072b0:	e7d1      	b.n	8007256 <_dtoa_r+0x25e>
 80072b2:	bf00      	nop
 80072b4:	f3af 8000 	nop.w
 80072b8:	636f4361 	.word	0x636f4361
 80072bc:	3fd287a7 	.word	0x3fd287a7
 80072c0:	8b60c8b3 	.word	0x8b60c8b3
 80072c4:	3fc68a28 	.word	0x3fc68a28
 80072c8:	509f79fb 	.word	0x509f79fb
 80072cc:	3fd34413 	.word	0x3fd34413
 80072d0:	08009315 	.word	0x08009315
 80072d4:	0800932c 	.word	0x0800932c
 80072d8:	7ff00000 	.word	0x7ff00000
 80072dc:	08009311 	.word	0x08009311
 80072e0:	08009308 	.word	0x08009308
 80072e4:	080092e5 	.word	0x080092e5
 80072e8:	3ff80000 	.word	0x3ff80000
 80072ec:	08009418 	.word	0x08009418
 80072f0:	08009384 	.word	0x08009384
 80072f4:	2301      	movs	r3, #1
 80072f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80072f8:	e7d4      	b.n	80072a4 <_dtoa_r+0x2ac>
 80072fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80072fc:	9306      	str	r3, [sp, #24]
 80072fe:	9308      	str	r3, [sp, #32]
 8007300:	e7b7      	b.n	8007272 <_dtoa_r+0x27a>
 8007302:	3101      	adds	r1, #1
 8007304:	0052      	lsls	r2, r2, #1
 8007306:	e7b7      	b.n	8007278 <_dtoa_r+0x280>
 8007308:	69eb      	ldr	r3, [r5, #28]
 800730a:	9a03      	ldr	r2, [sp, #12]
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	9b08      	ldr	r3, [sp, #32]
 8007310:	2b0e      	cmp	r3, #14
 8007312:	f200 80a8 	bhi.w	8007466 <_dtoa_r+0x46e>
 8007316:	2c00      	cmp	r4, #0
 8007318:	f000 80a5 	beq.w	8007466 <_dtoa_r+0x46e>
 800731c:	f1bb 0f00 	cmp.w	fp, #0
 8007320:	dd34      	ble.n	800738c <_dtoa_r+0x394>
 8007322:	4b9a      	ldr	r3, [pc, #616]	; (800758c <_dtoa_r+0x594>)
 8007324:	f00b 020f 	and.w	r2, fp, #15
 8007328:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800732c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007330:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007334:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007338:	ea4f 142b 	mov.w	r4, fp, asr #4
 800733c:	d016      	beq.n	800736c <_dtoa_r+0x374>
 800733e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007342:	4b93      	ldr	r3, [pc, #588]	; (8007590 <_dtoa_r+0x598>)
 8007344:	2703      	movs	r7, #3
 8007346:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800734a:	f7f9 fa2b 	bl	80007a4 <__aeabi_ddiv>
 800734e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007352:	f004 040f 	and.w	r4, r4, #15
 8007356:	4e8e      	ldr	r6, [pc, #568]	; (8007590 <_dtoa_r+0x598>)
 8007358:	b954      	cbnz	r4, 8007370 <_dtoa_r+0x378>
 800735a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800735e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007362:	f7f9 fa1f 	bl	80007a4 <__aeabi_ddiv>
 8007366:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800736a:	e029      	b.n	80073c0 <_dtoa_r+0x3c8>
 800736c:	2702      	movs	r7, #2
 800736e:	e7f2      	b.n	8007356 <_dtoa_r+0x35e>
 8007370:	07e1      	lsls	r1, r4, #31
 8007372:	d508      	bpl.n	8007386 <_dtoa_r+0x38e>
 8007374:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007378:	e9d6 2300 	ldrd	r2, r3, [r6]
 800737c:	f7f9 f8e8 	bl	8000550 <__aeabi_dmul>
 8007380:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007384:	3701      	adds	r7, #1
 8007386:	1064      	asrs	r4, r4, #1
 8007388:	3608      	adds	r6, #8
 800738a:	e7e5      	b.n	8007358 <_dtoa_r+0x360>
 800738c:	f000 80a5 	beq.w	80074da <_dtoa_r+0x4e2>
 8007390:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007394:	f1cb 0400 	rsb	r4, fp, #0
 8007398:	4b7c      	ldr	r3, [pc, #496]	; (800758c <_dtoa_r+0x594>)
 800739a:	f004 020f 	and.w	r2, r4, #15
 800739e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a6:	f7f9 f8d3 	bl	8000550 <__aeabi_dmul>
 80073aa:	2702      	movs	r7, #2
 80073ac:	2300      	movs	r3, #0
 80073ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073b2:	4e77      	ldr	r6, [pc, #476]	; (8007590 <_dtoa_r+0x598>)
 80073b4:	1124      	asrs	r4, r4, #4
 80073b6:	2c00      	cmp	r4, #0
 80073b8:	f040 8084 	bne.w	80074c4 <_dtoa_r+0x4cc>
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1d2      	bne.n	8007366 <_dtoa_r+0x36e>
 80073c0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80073c4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80073c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 8087 	beq.w	80074de <_dtoa_r+0x4e6>
 80073d0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073d4:	2200      	movs	r2, #0
 80073d6:	4b6f      	ldr	r3, [pc, #444]	; (8007594 <_dtoa_r+0x59c>)
 80073d8:	f7f9 fb2c 	bl	8000a34 <__aeabi_dcmplt>
 80073dc:	2800      	cmp	r0, #0
 80073de:	d07e      	beq.n	80074de <_dtoa_r+0x4e6>
 80073e0:	9b08      	ldr	r3, [sp, #32]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d07b      	beq.n	80074de <_dtoa_r+0x4e6>
 80073e6:	9b06      	ldr	r3, [sp, #24]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	dd38      	ble.n	800745e <_dtoa_r+0x466>
 80073ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073f0:	2200      	movs	r2, #0
 80073f2:	4b69      	ldr	r3, [pc, #420]	; (8007598 <_dtoa_r+0x5a0>)
 80073f4:	f7f9 f8ac 	bl	8000550 <__aeabi_dmul>
 80073f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073fc:	9c06      	ldr	r4, [sp, #24]
 80073fe:	f10b 38ff 	add.w	r8, fp, #4294967295
 8007402:	3701      	adds	r7, #1
 8007404:	4638      	mov	r0, r7
 8007406:	f7f9 f839 	bl	800047c <__aeabi_i2d>
 800740a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800740e:	f7f9 f89f 	bl	8000550 <__aeabi_dmul>
 8007412:	2200      	movs	r2, #0
 8007414:	4b61      	ldr	r3, [pc, #388]	; (800759c <_dtoa_r+0x5a4>)
 8007416:	f7f8 fee5 	bl	80001e4 <__adddf3>
 800741a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800741e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007422:	9611      	str	r6, [sp, #68]	; 0x44
 8007424:	2c00      	cmp	r4, #0
 8007426:	d15d      	bne.n	80074e4 <_dtoa_r+0x4ec>
 8007428:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800742c:	2200      	movs	r2, #0
 800742e:	4b5c      	ldr	r3, [pc, #368]	; (80075a0 <_dtoa_r+0x5a8>)
 8007430:	f7f8 fed6 	bl	80001e0 <__aeabi_dsub>
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800743c:	4633      	mov	r3, r6
 800743e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007440:	f7f9 fb16 	bl	8000a70 <__aeabi_dcmpgt>
 8007444:	2800      	cmp	r0, #0
 8007446:	f040 8295 	bne.w	8007974 <_dtoa_r+0x97c>
 800744a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800744e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007450:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007454:	f7f9 faee 	bl	8000a34 <__aeabi_dcmplt>
 8007458:	2800      	cmp	r0, #0
 800745a:	f040 8289 	bne.w	8007970 <_dtoa_r+0x978>
 800745e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007462:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007466:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007468:	2b00      	cmp	r3, #0
 800746a:	f2c0 8151 	blt.w	8007710 <_dtoa_r+0x718>
 800746e:	f1bb 0f0e 	cmp.w	fp, #14
 8007472:	f300 814d 	bgt.w	8007710 <_dtoa_r+0x718>
 8007476:	4b45      	ldr	r3, [pc, #276]	; (800758c <_dtoa_r+0x594>)
 8007478:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800747c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007480:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007484:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007486:	2b00      	cmp	r3, #0
 8007488:	f280 80da 	bge.w	8007640 <_dtoa_r+0x648>
 800748c:	9b08      	ldr	r3, [sp, #32]
 800748e:	2b00      	cmp	r3, #0
 8007490:	f300 80d6 	bgt.w	8007640 <_dtoa_r+0x648>
 8007494:	f040 826b 	bne.w	800796e <_dtoa_r+0x976>
 8007498:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800749c:	2200      	movs	r2, #0
 800749e:	4b40      	ldr	r3, [pc, #256]	; (80075a0 <_dtoa_r+0x5a8>)
 80074a0:	f7f9 f856 	bl	8000550 <__aeabi_dmul>
 80074a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074a8:	f7f9 fad8 	bl	8000a5c <__aeabi_dcmpge>
 80074ac:	9c08      	ldr	r4, [sp, #32]
 80074ae:	4626      	mov	r6, r4
 80074b0:	2800      	cmp	r0, #0
 80074b2:	f040 8241 	bne.w	8007938 <_dtoa_r+0x940>
 80074b6:	2331      	movs	r3, #49	; 0x31
 80074b8:	9f03      	ldr	r7, [sp, #12]
 80074ba:	f10b 0b01 	add.w	fp, fp, #1
 80074be:	f807 3b01 	strb.w	r3, [r7], #1
 80074c2:	e23d      	b.n	8007940 <_dtoa_r+0x948>
 80074c4:	07e2      	lsls	r2, r4, #31
 80074c6:	d505      	bpl.n	80074d4 <_dtoa_r+0x4dc>
 80074c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80074cc:	f7f9 f840 	bl	8000550 <__aeabi_dmul>
 80074d0:	2301      	movs	r3, #1
 80074d2:	3701      	adds	r7, #1
 80074d4:	1064      	asrs	r4, r4, #1
 80074d6:	3608      	adds	r6, #8
 80074d8:	e76d      	b.n	80073b6 <_dtoa_r+0x3be>
 80074da:	2702      	movs	r7, #2
 80074dc:	e770      	b.n	80073c0 <_dtoa_r+0x3c8>
 80074de:	46d8      	mov	r8, fp
 80074e0:	9c08      	ldr	r4, [sp, #32]
 80074e2:	e78f      	b.n	8007404 <_dtoa_r+0x40c>
 80074e4:	9903      	ldr	r1, [sp, #12]
 80074e6:	4b29      	ldr	r3, [pc, #164]	; (800758c <_dtoa_r+0x594>)
 80074e8:	4421      	add	r1, r4
 80074ea:	9112      	str	r1, [sp, #72]	; 0x48
 80074ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80074f2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80074f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074fa:	2900      	cmp	r1, #0
 80074fc:	d054      	beq.n	80075a8 <_dtoa_r+0x5b0>
 80074fe:	2000      	movs	r0, #0
 8007500:	4928      	ldr	r1, [pc, #160]	; (80075a4 <_dtoa_r+0x5ac>)
 8007502:	f7f9 f94f 	bl	80007a4 <__aeabi_ddiv>
 8007506:	463b      	mov	r3, r7
 8007508:	4632      	mov	r2, r6
 800750a:	f7f8 fe69 	bl	80001e0 <__aeabi_dsub>
 800750e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007512:	9f03      	ldr	r7, [sp, #12]
 8007514:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007518:	f7f9 faca 	bl	8000ab0 <__aeabi_d2iz>
 800751c:	4604      	mov	r4, r0
 800751e:	f7f8 ffad 	bl	800047c <__aeabi_i2d>
 8007522:	4602      	mov	r2, r0
 8007524:	460b      	mov	r3, r1
 8007526:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800752a:	f7f8 fe59 	bl	80001e0 <__aeabi_dsub>
 800752e:	4602      	mov	r2, r0
 8007530:	460b      	mov	r3, r1
 8007532:	3430      	adds	r4, #48	; 0x30
 8007534:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007538:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800753c:	f807 4b01 	strb.w	r4, [r7], #1
 8007540:	f7f9 fa78 	bl	8000a34 <__aeabi_dcmplt>
 8007544:	2800      	cmp	r0, #0
 8007546:	d173      	bne.n	8007630 <_dtoa_r+0x638>
 8007548:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800754c:	2000      	movs	r0, #0
 800754e:	4911      	ldr	r1, [pc, #68]	; (8007594 <_dtoa_r+0x59c>)
 8007550:	f7f8 fe46 	bl	80001e0 <__aeabi_dsub>
 8007554:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007558:	f7f9 fa6c 	bl	8000a34 <__aeabi_dcmplt>
 800755c:	2800      	cmp	r0, #0
 800755e:	f040 80b6 	bne.w	80076ce <_dtoa_r+0x6d6>
 8007562:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007564:	429f      	cmp	r7, r3
 8007566:	f43f af7a 	beq.w	800745e <_dtoa_r+0x466>
 800756a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800756e:	2200      	movs	r2, #0
 8007570:	4b09      	ldr	r3, [pc, #36]	; (8007598 <_dtoa_r+0x5a0>)
 8007572:	f7f8 ffed 	bl	8000550 <__aeabi_dmul>
 8007576:	2200      	movs	r2, #0
 8007578:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800757c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007580:	4b05      	ldr	r3, [pc, #20]	; (8007598 <_dtoa_r+0x5a0>)
 8007582:	f7f8 ffe5 	bl	8000550 <__aeabi_dmul>
 8007586:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800758a:	e7c3      	b.n	8007514 <_dtoa_r+0x51c>
 800758c:	08009418 	.word	0x08009418
 8007590:	080093f0 	.word	0x080093f0
 8007594:	3ff00000 	.word	0x3ff00000
 8007598:	40240000 	.word	0x40240000
 800759c:	401c0000 	.word	0x401c0000
 80075a0:	40140000 	.word	0x40140000
 80075a4:	3fe00000 	.word	0x3fe00000
 80075a8:	4630      	mov	r0, r6
 80075aa:	4639      	mov	r1, r7
 80075ac:	f7f8 ffd0 	bl	8000550 <__aeabi_dmul>
 80075b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80075b6:	9c03      	ldr	r4, [sp, #12]
 80075b8:	9314      	str	r3, [sp, #80]	; 0x50
 80075ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075be:	f7f9 fa77 	bl	8000ab0 <__aeabi_d2iz>
 80075c2:	9015      	str	r0, [sp, #84]	; 0x54
 80075c4:	f7f8 ff5a 	bl	800047c <__aeabi_i2d>
 80075c8:	4602      	mov	r2, r0
 80075ca:	460b      	mov	r3, r1
 80075cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075d0:	f7f8 fe06 	bl	80001e0 <__aeabi_dsub>
 80075d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075d6:	4606      	mov	r6, r0
 80075d8:	3330      	adds	r3, #48	; 0x30
 80075da:	f804 3b01 	strb.w	r3, [r4], #1
 80075de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075e0:	460f      	mov	r7, r1
 80075e2:	429c      	cmp	r4, r3
 80075e4:	f04f 0200 	mov.w	r2, #0
 80075e8:	d124      	bne.n	8007634 <_dtoa_r+0x63c>
 80075ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075ee:	4baf      	ldr	r3, [pc, #700]	; (80078ac <_dtoa_r+0x8b4>)
 80075f0:	f7f8 fdf8 	bl	80001e4 <__adddf3>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	4630      	mov	r0, r6
 80075fa:	4639      	mov	r1, r7
 80075fc:	f7f9 fa38 	bl	8000a70 <__aeabi_dcmpgt>
 8007600:	2800      	cmp	r0, #0
 8007602:	d163      	bne.n	80076cc <_dtoa_r+0x6d4>
 8007604:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007608:	2000      	movs	r0, #0
 800760a:	49a8      	ldr	r1, [pc, #672]	; (80078ac <_dtoa_r+0x8b4>)
 800760c:	f7f8 fde8 	bl	80001e0 <__aeabi_dsub>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	4630      	mov	r0, r6
 8007616:	4639      	mov	r1, r7
 8007618:	f7f9 fa0c 	bl	8000a34 <__aeabi_dcmplt>
 800761c:	2800      	cmp	r0, #0
 800761e:	f43f af1e 	beq.w	800745e <_dtoa_r+0x466>
 8007622:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8007624:	1e7b      	subs	r3, r7, #1
 8007626:	9314      	str	r3, [sp, #80]	; 0x50
 8007628:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800762c:	2b30      	cmp	r3, #48	; 0x30
 800762e:	d0f8      	beq.n	8007622 <_dtoa_r+0x62a>
 8007630:	46c3      	mov	fp, r8
 8007632:	e03b      	b.n	80076ac <_dtoa_r+0x6b4>
 8007634:	4b9e      	ldr	r3, [pc, #632]	; (80078b0 <_dtoa_r+0x8b8>)
 8007636:	f7f8 ff8b 	bl	8000550 <__aeabi_dmul>
 800763a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800763e:	e7bc      	b.n	80075ba <_dtoa_r+0x5c2>
 8007640:	9f03      	ldr	r7, [sp, #12]
 8007642:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007646:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800764a:	4640      	mov	r0, r8
 800764c:	4649      	mov	r1, r9
 800764e:	f7f9 f8a9 	bl	80007a4 <__aeabi_ddiv>
 8007652:	f7f9 fa2d 	bl	8000ab0 <__aeabi_d2iz>
 8007656:	4604      	mov	r4, r0
 8007658:	f7f8 ff10 	bl	800047c <__aeabi_i2d>
 800765c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007660:	f7f8 ff76 	bl	8000550 <__aeabi_dmul>
 8007664:	4602      	mov	r2, r0
 8007666:	460b      	mov	r3, r1
 8007668:	4640      	mov	r0, r8
 800766a:	4649      	mov	r1, r9
 800766c:	f7f8 fdb8 	bl	80001e0 <__aeabi_dsub>
 8007670:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8007674:	f807 6b01 	strb.w	r6, [r7], #1
 8007678:	9e03      	ldr	r6, [sp, #12]
 800767a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800767e:	1bbe      	subs	r6, r7, r6
 8007680:	45b4      	cmp	ip, r6
 8007682:	4602      	mov	r2, r0
 8007684:	460b      	mov	r3, r1
 8007686:	d136      	bne.n	80076f6 <_dtoa_r+0x6fe>
 8007688:	f7f8 fdac 	bl	80001e4 <__adddf3>
 800768c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007690:	4680      	mov	r8, r0
 8007692:	4689      	mov	r9, r1
 8007694:	f7f9 f9ec 	bl	8000a70 <__aeabi_dcmpgt>
 8007698:	bb58      	cbnz	r0, 80076f2 <_dtoa_r+0x6fa>
 800769a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800769e:	4640      	mov	r0, r8
 80076a0:	4649      	mov	r1, r9
 80076a2:	f7f9 f9bd 	bl	8000a20 <__aeabi_dcmpeq>
 80076a6:	b108      	cbz	r0, 80076ac <_dtoa_r+0x6b4>
 80076a8:	07e3      	lsls	r3, r4, #31
 80076aa:	d422      	bmi.n	80076f2 <_dtoa_r+0x6fa>
 80076ac:	4651      	mov	r1, sl
 80076ae:	4628      	mov	r0, r5
 80076b0:	f000 fb0e 	bl	8007cd0 <_Bfree>
 80076b4:	2300      	movs	r3, #0
 80076b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80076b8:	703b      	strb	r3, [r7, #0]
 80076ba:	f10b 0301 	add.w	r3, fp, #1
 80076be:	6013      	str	r3, [r2, #0]
 80076c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f43f ace6 	beq.w	8007094 <_dtoa_r+0x9c>
 80076c8:	601f      	str	r7, [r3, #0]
 80076ca:	e4e3      	b.n	8007094 <_dtoa_r+0x9c>
 80076cc:	4627      	mov	r7, r4
 80076ce:	463b      	mov	r3, r7
 80076d0:	461f      	mov	r7, r3
 80076d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076d6:	2a39      	cmp	r2, #57	; 0x39
 80076d8:	d107      	bne.n	80076ea <_dtoa_r+0x6f2>
 80076da:	9a03      	ldr	r2, [sp, #12]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d1f7      	bne.n	80076d0 <_dtoa_r+0x6d8>
 80076e0:	2230      	movs	r2, #48	; 0x30
 80076e2:	9903      	ldr	r1, [sp, #12]
 80076e4:	f108 0801 	add.w	r8, r8, #1
 80076e8:	700a      	strb	r2, [r1, #0]
 80076ea:	781a      	ldrb	r2, [r3, #0]
 80076ec:	3201      	adds	r2, #1
 80076ee:	701a      	strb	r2, [r3, #0]
 80076f0:	e79e      	b.n	8007630 <_dtoa_r+0x638>
 80076f2:	46d8      	mov	r8, fp
 80076f4:	e7eb      	b.n	80076ce <_dtoa_r+0x6d6>
 80076f6:	2200      	movs	r2, #0
 80076f8:	4b6d      	ldr	r3, [pc, #436]	; (80078b0 <_dtoa_r+0x8b8>)
 80076fa:	f7f8 ff29 	bl	8000550 <__aeabi_dmul>
 80076fe:	2200      	movs	r2, #0
 8007700:	2300      	movs	r3, #0
 8007702:	4680      	mov	r8, r0
 8007704:	4689      	mov	r9, r1
 8007706:	f7f9 f98b 	bl	8000a20 <__aeabi_dcmpeq>
 800770a:	2800      	cmp	r0, #0
 800770c:	d09b      	beq.n	8007646 <_dtoa_r+0x64e>
 800770e:	e7cd      	b.n	80076ac <_dtoa_r+0x6b4>
 8007710:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007712:	2a00      	cmp	r2, #0
 8007714:	f000 80c4 	beq.w	80078a0 <_dtoa_r+0x8a8>
 8007718:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800771a:	2a01      	cmp	r2, #1
 800771c:	f300 80a8 	bgt.w	8007870 <_dtoa_r+0x878>
 8007720:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007722:	2a00      	cmp	r2, #0
 8007724:	f000 80a0 	beq.w	8007868 <_dtoa_r+0x870>
 8007728:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800772c:	464f      	mov	r7, r9
 800772e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007730:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007732:	2101      	movs	r1, #1
 8007734:	441a      	add	r2, r3
 8007736:	4628      	mov	r0, r5
 8007738:	4499      	add	r9, r3
 800773a:	9209      	str	r2, [sp, #36]	; 0x24
 800773c:	f000 fb7e 	bl	8007e3c <__i2b>
 8007740:	4606      	mov	r6, r0
 8007742:	b15f      	cbz	r7, 800775c <_dtoa_r+0x764>
 8007744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007746:	2b00      	cmp	r3, #0
 8007748:	dd08      	ble.n	800775c <_dtoa_r+0x764>
 800774a:	42bb      	cmp	r3, r7
 800774c:	bfa8      	it	ge
 800774e:	463b      	movge	r3, r7
 8007750:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007752:	eba9 0903 	sub.w	r9, r9, r3
 8007756:	1aff      	subs	r7, r7, r3
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	9309      	str	r3, [sp, #36]	; 0x24
 800775c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800775e:	b1f3      	cbz	r3, 800779e <_dtoa_r+0x7a6>
 8007760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007762:	2b00      	cmp	r3, #0
 8007764:	f000 80a0 	beq.w	80078a8 <_dtoa_r+0x8b0>
 8007768:	2c00      	cmp	r4, #0
 800776a:	dd10      	ble.n	800778e <_dtoa_r+0x796>
 800776c:	4631      	mov	r1, r6
 800776e:	4622      	mov	r2, r4
 8007770:	4628      	mov	r0, r5
 8007772:	f000 fc21 	bl	8007fb8 <__pow5mult>
 8007776:	4652      	mov	r2, sl
 8007778:	4601      	mov	r1, r0
 800777a:	4606      	mov	r6, r0
 800777c:	4628      	mov	r0, r5
 800777e:	f000 fb73 	bl	8007e68 <__multiply>
 8007782:	4680      	mov	r8, r0
 8007784:	4651      	mov	r1, sl
 8007786:	4628      	mov	r0, r5
 8007788:	f000 faa2 	bl	8007cd0 <_Bfree>
 800778c:	46c2      	mov	sl, r8
 800778e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007790:	1b1a      	subs	r2, r3, r4
 8007792:	d004      	beq.n	800779e <_dtoa_r+0x7a6>
 8007794:	4651      	mov	r1, sl
 8007796:	4628      	mov	r0, r5
 8007798:	f000 fc0e 	bl	8007fb8 <__pow5mult>
 800779c:	4682      	mov	sl, r0
 800779e:	2101      	movs	r1, #1
 80077a0:	4628      	mov	r0, r5
 80077a2:	f000 fb4b 	bl	8007e3c <__i2b>
 80077a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077a8:	4604      	mov	r4, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f340 8082 	ble.w	80078b4 <_dtoa_r+0x8bc>
 80077b0:	461a      	mov	r2, r3
 80077b2:	4601      	mov	r1, r0
 80077b4:	4628      	mov	r0, r5
 80077b6:	f000 fbff 	bl	8007fb8 <__pow5mult>
 80077ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077bc:	4604      	mov	r4, r0
 80077be:	2b01      	cmp	r3, #1
 80077c0:	dd7b      	ble.n	80078ba <_dtoa_r+0x8c2>
 80077c2:	f04f 0800 	mov.w	r8, #0
 80077c6:	6923      	ldr	r3, [r4, #16]
 80077c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80077cc:	6918      	ldr	r0, [r3, #16]
 80077ce:	f000 fae7 	bl	8007da0 <__hi0bits>
 80077d2:	f1c0 0020 	rsb	r0, r0, #32
 80077d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d8:	4418      	add	r0, r3
 80077da:	f010 001f 	ands.w	r0, r0, #31
 80077de:	f000 8092 	beq.w	8007906 <_dtoa_r+0x90e>
 80077e2:	f1c0 0320 	rsb	r3, r0, #32
 80077e6:	2b04      	cmp	r3, #4
 80077e8:	f340 8085 	ble.w	80078f6 <_dtoa_r+0x8fe>
 80077ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ee:	f1c0 001c 	rsb	r0, r0, #28
 80077f2:	4403      	add	r3, r0
 80077f4:	4481      	add	r9, r0
 80077f6:	4407      	add	r7, r0
 80077f8:	9309      	str	r3, [sp, #36]	; 0x24
 80077fa:	f1b9 0f00 	cmp.w	r9, #0
 80077fe:	dd05      	ble.n	800780c <_dtoa_r+0x814>
 8007800:	4651      	mov	r1, sl
 8007802:	464a      	mov	r2, r9
 8007804:	4628      	mov	r0, r5
 8007806:	f000 fc31 	bl	800806c <__lshift>
 800780a:	4682      	mov	sl, r0
 800780c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800780e:	2b00      	cmp	r3, #0
 8007810:	dd05      	ble.n	800781e <_dtoa_r+0x826>
 8007812:	4621      	mov	r1, r4
 8007814:	461a      	mov	r2, r3
 8007816:	4628      	mov	r0, r5
 8007818:	f000 fc28 	bl	800806c <__lshift>
 800781c:	4604      	mov	r4, r0
 800781e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007820:	2b00      	cmp	r3, #0
 8007822:	d072      	beq.n	800790a <_dtoa_r+0x912>
 8007824:	4621      	mov	r1, r4
 8007826:	4650      	mov	r0, sl
 8007828:	f000 fc8c 	bl	8008144 <__mcmp>
 800782c:	2800      	cmp	r0, #0
 800782e:	da6c      	bge.n	800790a <_dtoa_r+0x912>
 8007830:	2300      	movs	r3, #0
 8007832:	4651      	mov	r1, sl
 8007834:	220a      	movs	r2, #10
 8007836:	4628      	mov	r0, r5
 8007838:	f000 fa6c 	bl	8007d14 <__multadd>
 800783c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800783e:	4682      	mov	sl, r0
 8007840:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 81ac 	beq.w	8007ba2 <_dtoa_r+0xbaa>
 800784a:	2300      	movs	r3, #0
 800784c:	4631      	mov	r1, r6
 800784e:	220a      	movs	r2, #10
 8007850:	4628      	mov	r0, r5
 8007852:	f000 fa5f 	bl	8007d14 <__multadd>
 8007856:	9b06      	ldr	r3, [sp, #24]
 8007858:	4606      	mov	r6, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	f300 8093 	bgt.w	8007986 <_dtoa_r+0x98e>
 8007860:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007862:	2b02      	cmp	r3, #2
 8007864:	dc59      	bgt.n	800791a <_dtoa_r+0x922>
 8007866:	e08e      	b.n	8007986 <_dtoa_r+0x98e>
 8007868:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800786a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800786e:	e75d      	b.n	800772c <_dtoa_r+0x734>
 8007870:	9b08      	ldr	r3, [sp, #32]
 8007872:	1e5c      	subs	r4, r3, #1
 8007874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007876:	42a3      	cmp	r3, r4
 8007878:	bfbf      	itttt	lt
 800787a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800787c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800787e:	1ae3      	sublt	r3, r4, r3
 8007880:	18d2      	addlt	r2, r2, r3
 8007882:	bfa8      	it	ge
 8007884:	1b1c      	subge	r4, r3, r4
 8007886:	9b08      	ldr	r3, [sp, #32]
 8007888:	bfbe      	ittt	lt
 800788a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800788c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800788e:	2400      	movlt	r4, #0
 8007890:	2b00      	cmp	r3, #0
 8007892:	bfb5      	itete	lt
 8007894:	eba9 0703 	sublt.w	r7, r9, r3
 8007898:	464f      	movge	r7, r9
 800789a:	2300      	movlt	r3, #0
 800789c:	9b08      	ldrge	r3, [sp, #32]
 800789e:	e747      	b.n	8007730 <_dtoa_r+0x738>
 80078a0:	464f      	mov	r7, r9
 80078a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80078a4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80078a6:	e74c      	b.n	8007742 <_dtoa_r+0x74a>
 80078a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078aa:	e773      	b.n	8007794 <_dtoa_r+0x79c>
 80078ac:	3fe00000 	.word	0x3fe00000
 80078b0:	40240000 	.word	0x40240000
 80078b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	dc18      	bgt.n	80078ec <_dtoa_r+0x8f4>
 80078ba:	9b04      	ldr	r3, [sp, #16]
 80078bc:	b9b3      	cbnz	r3, 80078ec <_dtoa_r+0x8f4>
 80078be:	9b05      	ldr	r3, [sp, #20]
 80078c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078c4:	b993      	cbnz	r3, 80078ec <_dtoa_r+0x8f4>
 80078c6:	9b05      	ldr	r3, [sp, #20]
 80078c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078cc:	0d1b      	lsrs	r3, r3, #20
 80078ce:	051b      	lsls	r3, r3, #20
 80078d0:	b17b      	cbz	r3, 80078f2 <_dtoa_r+0x8fa>
 80078d2:	f04f 0801 	mov.w	r8, #1
 80078d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078d8:	f109 0901 	add.w	r9, r9, #1
 80078dc:	3301      	adds	r3, #1
 80078de:	9309      	str	r3, [sp, #36]	; 0x24
 80078e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f47f af6f 	bne.w	80077c6 <_dtoa_r+0x7ce>
 80078e8:	2001      	movs	r0, #1
 80078ea:	e774      	b.n	80077d6 <_dtoa_r+0x7de>
 80078ec:	f04f 0800 	mov.w	r8, #0
 80078f0:	e7f6      	b.n	80078e0 <_dtoa_r+0x8e8>
 80078f2:	4698      	mov	r8, r3
 80078f4:	e7f4      	b.n	80078e0 <_dtoa_r+0x8e8>
 80078f6:	d080      	beq.n	80077fa <_dtoa_r+0x802>
 80078f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078fa:	331c      	adds	r3, #28
 80078fc:	441a      	add	r2, r3
 80078fe:	4499      	add	r9, r3
 8007900:	441f      	add	r7, r3
 8007902:	9209      	str	r2, [sp, #36]	; 0x24
 8007904:	e779      	b.n	80077fa <_dtoa_r+0x802>
 8007906:	4603      	mov	r3, r0
 8007908:	e7f6      	b.n	80078f8 <_dtoa_r+0x900>
 800790a:	9b08      	ldr	r3, [sp, #32]
 800790c:	2b00      	cmp	r3, #0
 800790e:	dc34      	bgt.n	800797a <_dtoa_r+0x982>
 8007910:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007912:	2b02      	cmp	r3, #2
 8007914:	dd31      	ble.n	800797a <_dtoa_r+0x982>
 8007916:	9b08      	ldr	r3, [sp, #32]
 8007918:	9306      	str	r3, [sp, #24]
 800791a:	9b06      	ldr	r3, [sp, #24]
 800791c:	b963      	cbnz	r3, 8007938 <_dtoa_r+0x940>
 800791e:	4621      	mov	r1, r4
 8007920:	2205      	movs	r2, #5
 8007922:	4628      	mov	r0, r5
 8007924:	f000 f9f6 	bl	8007d14 <__multadd>
 8007928:	4601      	mov	r1, r0
 800792a:	4604      	mov	r4, r0
 800792c:	4650      	mov	r0, sl
 800792e:	f000 fc09 	bl	8008144 <__mcmp>
 8007932:	2800      	cmp	r0, #0
 8007934:	f73f adbf 	bgt.w	80074b6 <_dtoa_r+0x4be>
 8007938:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800793a:	9f03      	ldr	r7, [sp, #12]
 800793c:	ea6f 0b03 	mvn.w	fp, r3
 8007940:	f04f 0800 	mov.w	r8, #0
 8007944:	4621      	mov	r1, r4
 8007946:	4628      	mov	r0, r5
 8007948:	f000 f9c2 	bl	8007cd0 <_Bfree>
 800794c:	2e00      	cmp	r6, #0
 800794e:	f43f aead 	beq.w	80076ac <_dtoa_r+0x6b4>
 8007952:	f1b8 0f00 	cmp.w	r8, #0
 8007956:	d005      	beq.n	8007964 <_dtoa_r+0x96c>
 8007958:	45b0      	cmp	r8, r6
 800795a:	d003      	beq.n	8007964 <_dtoa_r+0x96c>
 800795c:	4641      	mov	r1, r8
 800795e:	4628      	mov	r0, r5
 8007960:	f000 f9b6 	bl	8007cd0 <_Bfree>
 8007964:	4631      	mov	r1, r6
 8007966:	4628      	mov	r0, r5
 8007968:	f000 f9b2 	bl	8007cd0 <_Bfree>
 800796c:	e69e      	b.n	80076ac <_dtoa_r+0x6b4>
 800796e:	2400      	movs	r4, #0
 8007970:	4626      	mov	r6, r4
 8007972:	e7e1      	b.n	8007938 <_dtoa_r+0x940>
 8007974:	46c3      	mov	fp, r8
 8007976:	4626      	mov	r6, r4
 8007978:	e59d      	b.n	80074b6 <_dtoa_r+0x4be>
 800797a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 80c8 	beq.w	8007b12 <_dtoa_r+0xb1a>
 8007982:	9b08      	ldr	r3, [sp, #32]
 8007984:	9306      	str	r3, [sp, #24]
 8007986:	2f00      	cmp	r7, #0
 8007988:	dd05      	ble.n	8007996 <_dtoa_r+0x99e>
 800798a:	4631      	mov	r1, r6
 800798c:	463a      	mov	r2, r7
 800798e:	4628      	mov	r0, r5
 8007990:	f000 fb6c 	bl	800806c <__lshift>
 8007994:	4606      	mov	r6, r0
 8007996:	f1b8 0f00 	cmp.w	r8, #0
 800799a:	d05b      	beq.n	8007a54 <_dtoa_r+0xa5c>
 800799c:	4628      	mov	r0, r5
 800799e:	6871      	ldr	r1, [r6, #4]
 80079a0:	f000 f956 	bl	8007c50 <_Balloc>
 80079a4:	4607      	mov	r7, r0
 80079a6:	b928      	cbnz	r0, 80079b4 <_dtoa_r+0x9bc>
 80079a8:	4602      	mov	r2, r0
 80079aa:	f240 21ef 	movw	r1, #751	; 0x2ef
 80079ae:	4b81      	ldr	r3, [pc, #516]	; (8007bb4 <_dtoa_r+0xbbc>)
 80079b0:	f7ff bb36 	b.w	8007020 <_dtoa_r+0x28>
 80079b4:	6932      	ldr	r2, [r6, #16]
 80079b6:	f106 010c 	add.w	r1, r6, #12
 80079ba:	3202      	adds	r2, #2
 80079bc:	0092      	lsls	r2, r2, #2
 80079be:	300c      	adds	r0, #12
 80079c0:	f000 fd68 	bl	8008494 <memcpy>
 80079c4:	2201      	movs	r2, #1
 80079c6:	4639      	mov	r1, r7
 80079c8:	4628      	mov	r0, r5
 80079ca:	f000 fb4f 	bl	800806c <__lshift>
 80079ce:	46b0      	mov	r8, r6
 80079d0:	4606      	mov	r6, r0
 80079d2:	9b03      	ldr	r3, [sp, #12]
 80079d4:	9a03      	ldr	r2, [sp, #12]
 80079d6:	3301      	adds	r3, #1
 80079d8:	9308      	str	r3, [sp, #32]
 80079da:	9b06      	ldr	r3, [sp, #24]
 80079dc:	4413      	add	r3, r2
 80079de:	930b      	str	r3, [sp, #44]	; 0x2c
 80079e0:	9b04      	ldr	r3, [sp, #16]
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	930a      	str	r3, [sp, #40]	; 0x28
 80079e8:	9b08      	ldr	r3, [sp, #32]
 80079ea:	4621      	mov	r1, r4
 80079ec:	3b01      	subs	r3, #1
 80079ee:	4650      	mov	r0, sl
 80079f0:	9304      	str	r3, [sp, #16]
 80079f2:	f7ff fa78 	bl	8006ee6 <quorem>
 80079f6:	4641      	mov	r1, r8
 80079f8:	9006      	str	r0, [sp, #24]
 80079fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80079fe:	4650      	mov	r0, sl
 8007a00:	f000 fba0 	bl	8008144 <__mcmp>
 8007a04:	4632      	mov	r2, r6
 8007a06:	9009      	str	r0, [sp, #36]	; 0x24
 8007a08:	4621      	mov	r1, r4
 8007a0a:	4628      	mov	r0, r5
 8007a0c:	f000 fbb6 	bl	800817c <__mdiff>
 8007a10:	68c2      	ldr	r2, [r0, #12]
 8007a12:	4607      	mov	r7, r0
 8007a14:	bb02      	cbnz	r2, 8007a58 <_dtoa_r+0xa60>
 8007a16:	4601      	mov	r1, r0
 8007a18:	4650      	mov	r0, sl
 8007a1a:	f000 fb93 	bl	8008144 <__mcmp>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	4639      	mov	r1, r7
 8007a22:	4628      	mov	r0, r5
 8007a24:	920c      	str	r2, [sp, #48]	; 0x30
 8007a26:	f000 f953 	bl	8007cd0 <_Bfree>
 8007a2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a2e:	9f08      	ldr	r7, [sp, #32]
 8007a30:	ea43 0102 	orr.w	r1, r3, r2
 8007a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a36:	4319      	orrs	r1, r3
 8007a38:	d110      	bne.n	8007a5c <_dtoa_r+0xa64>
 8007a3a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007a3e:	d029      	beq.n	8007a94 <_dtoa_r+0xa9c>
 8007a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	dd02      	ble.n	8007a4c <_dtoa_r+0xa54>
 8007a46:	9b06      	ldr	r3, [sp, #24]
 8007a48:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007a4c:	9b04      	ldr	r3, [sp, #16]
 8007a4e:	f883 9000 	strb.w	r9, [r3]
 8007a52:	e777      	b.n	8007944 <_dtoa_r+0x94c>
 8007a54:	4630      	mov	r0, r6
 8007a56:	e7ba      	b.n	80079ce <_dtoa_r+0x9d6>
 8007a58:	2201      	movs	r2, #1
 8007a5a:	e7e1      	b.n	8007a20 <_dtoa_r+0xa28>
 8007a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	db04      	blt.n	8007a6c <_dtoa_r+0xa74>
 8007a62:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007a64:	430b      	orrs	r3, r1
 8007a66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007a68:	430b      	orrs	r3, r1
 8007a6a:	d120      	bne.n	8007aae <_dtoa_r+0xab6>
 8007a6c:	2a00      	cmp	r2, #0
 8007a6e:	dded      	ble.n	8007a4c <_dtoa_r+0xa54>
 8007a70:	4651      	mov	r1, sl
 8007a72:	2201      	movs	r2, #1
 8007a74:	4628      	mov	r0, r5
 8007a76:	f000 faf9 	bl	800806c <__lshift>
 8007a7a:	4621      	mov	r1, r4
 8007a7c:	4682      	mov	sl, r0
 8007a7e:	f000 fb61 	bl	8008144 <__mcmp>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	dc03      	bgt.n	8007a8e <_dtoa_r+0xa96>
 8007a86:	d1e1      	bne.n	8007a4c <_dtoa_r+0xa54>
 8007a88:	f019 0f01 	tst.w	r9, #1
 8007a8c:	d0de      	beq.n	8007a4c <_dtoa_r+0xa54>
 8007a8e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007a92:	d1d8      	bne.n	8007a46 <_dtoa_r+0xa4e>
 8007a94:	2339      	movs	r3, #57	; 0x39
 8007a96:	9a04      	ldr	r2, [sp, #16]
 8007a98:	7013      	strb	r3, [r2, #0]
 8007a9a:	463b      	mov	r3, r7
 8007a9c:	461f      	mov	r7, r3
 8007a9e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	2a39      	cmp	r2, #57	; 0x39
 8007aa6:	d06b      	beq.n	8007b80 <_dtoa_r+0xb88>
 8007aa8:	3201      	adds	r2, #1
 8007aaa:	701a      	strb	r2, [r3, #0]
 8007aac:	e74a      	b.n	8007944 <_dtoa_r+0x94c>
 8007aae:	2a00      	cmp	r2, #0
 8007ab0:	dd07      	ble.n	8007ac2 <_dtoa_r+0xaca>
 8007ab2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007ab6:	d0ed      	beq.n	8007a94 <_dtoa_r+0xa9c>
 8007ab8:	9a04      	ldr	r2, [sp, #16]
 8007aba:	f109 0301 	add.w	r3, r9, #1
 8007abe:	7013      	strb	r3, [r2, #0]
 8007ac0:	e740      	b.n	8007944 <_dtoa_r+0x94c>
 8007ac2:	9b08      	ldr	r3, [sp, #32]
 8007ac4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ac6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d042      	beq.n	8007b54 <_dtoa_r+0xb5c>
 8007ace:	4651      	mov	r1, sl
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	220a      	movs	r2, #10
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	f000 f91d 	bl	8007d14 <__multadd>
 8007ada:	45b0      	cmp	r8, r6
 8007adc:	4682      	mov	sl, r0
 8007ade:	f04f 0300 	mov.w	r3, #0
 8007ae2:	f04f 020a 	mov.w	r2, #10
 8007ae6:	4641      	mov	r1, r8
 8007ae8:	4628      	mov	r0, r5
 8007aea:	d107      	bne.n	8007afc <_dtoa_r+0xb04>
 8007aec:	f000 f912 	bl	8007d14 <__multadd>
 8007af0:	4680      	mov	r8, r0
 8007af2:	4606      	mov	r6, r0
 8007af4:	9b08      	ldr	r3, [sp, #32]
 8007af6:	3301      	adds	r3, #1
 8007af8:	9308      	str	r3, [sp, #32]
 8007afa:	e775      	b.n	80079e8 <_dtoa_r+0x9f0>
 8007afc:	f000 f90a 	bl	8007d14 <__multadd>
 8007b00:	4631      	mov	r1, r6
 8007b02:	4680      	mov	r8, r0
 8007b04:	2300      	movs	r3, #0
 8007b06:	220a      	movs	r2, #10
 8007b08:	4628      	mov	r0, r5
 8007b0a:	f000 f903 	bl	8007d14 <__multadd>
 8007b0e:	4606      	mov	r6, r0
 8007b10:	e7f0      	b.n	8007af4 <_dtoa_r+0xafc>
 8007b12:	9b08      	ldr	r3, [sp, #32]
 8007b14:	9306      	str	r3, [sp, #24]
 8007b16:	9f03      	ldr	r7, [sp, #12]
 8007b18:	4621      	mov	r1, r4
 8007b1a:	4650      	mov	r0, sl
 8007b1c:	f7ff f9e3 	bl	8006ee6 <quorem>
 8007b20:	9b03      	ldr	r3, [sp, #12]
 8007b22:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007b26:	f807 9b01 	strb.w	r9, [r7], #1
 8007b2a:	1afa      	subs	r2, r7, r3
 8007b2c:	9b06      	ldr	r3, [sp, #24]
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	dd07      	ble.n	8007b42 <_dtoa_r+0xb4a>
 8007b32:	4651      	mov	r1, sl
 8007b34:	2300      	movs	r3, #0
 8007b36:	220a      	movs	r2, #10
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f000 f8eb 	bl	8007d14 <__multadd>
 8007b3e:	4682      	mov	sl, r0
 8007b40:	e7ea      	b.n	8007b18 <_dtoa_r+0xb20>
 8007b42:	9b06      	ldr	r3, [sp, #24]
 8007b44:	f04f 0800 	mov.w	r8, #0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	bfcc      	ite	gt
 8007b4c:	461f      	movgt	r7, r3
 8007b4e:	2701      	movle	r7, #1
 8007b50:	9b03      	ldr	r3, [sp, #12]
 8007b52:	441f      	add	r7, r3
 8007b54:	4651      	mov	r1, sl
 8007b56:	2201      	movs	r2, #1
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f000 fa87 	bl	800806c <__lshift>
 8007b5e:	4621      	mov	r1, r4
 8007b60:	4682      	mov	sl, r0
 8007b62:	f000 faef 	bl	8008144 <__mcmp>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	dc97      	bgt.n	8007a9a <_dtoa_r+0xaa2>
 8007b6a:	d102      	bne.n	8007b72 <_dtoa_r+0xb7a>
 8007b6c:	f019 0f01 	tst.w	r9, #1
 8007b70:	d193      	bne.n	8007a9a <_dtoa_r+0xaa2>
 8007b72:	463b      	mov	r3, r7
 8007b74:	461f      	mov	r7, r3
 8007b76:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b7a:	2a30      	cmp	r2, #48	; 0x30
 8007b7c:	d0fa      	beq.n	8007b74 <_dtoa_r+0xb7c>
 8007b7e:	e6e1      	b.n	8007944 <_dtoa_r+0x94c>
 8007b80:	9a03      	ldr	r2, [sp, #12]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d18a      	bne.n	8007a9c <_dtoa_r+0xaa4>
 8007b86:	2331      	movs	r3, #49	; 0x31
 8007b88:	f10b 0b01 	add.w	fp, fp, #1
 8007b8c:	e797      	b.n	8007abe <_dtoa_r+0xac6>
 8007b8e:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <_dtoa_r+0xbc0>)
 8007b90:	f7ff ba9f 	b.w	80070d2 <_dtoa_r+0xda>
 8007b94:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f47f aa77 	bne.w	800708a <_dtoa_r+0x92>
 8007b9c:	4b07      	ldr	r3, [pc, #28]	; (8007bbc <_dtoa_r+0xbc4>)
 8007b9e:	f7ff ba98 	b.w	80070d2 <_dtoa_r+0xda>
 8007ba2:	9b06      	ldr	r3, [sp, #24]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	dcb6      	bgt.n	8007b16 <_dtoa_r+0xb1e>
 8007ba8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	f73f aeb5 	bgt.w	800791a <_dtoa_r+0x922>
 8007bb0:	e7b1      	b.n	8007b16 <_dtoa_r+0xb1e>
 8007bb2:	bf00      	nop
 8007bb4:	08009384 	.word	0x08009384
 8007bb8:	080092e4 	.word	0x080092e4
 8007bbc:	08009308 	.word	0x08009308

08007bc0 <_free_r>:
 8007bc0:	b538      	push	{r3, r4, r5, lr}
 8007bc2:	4605      	mov	r5, r0
 8007bc4:	2900      	cmp	r1, #0
 8007bc6:	d040      	beq.n	8007c4a <_free_r+0x8a>
 8007bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bcc:	1f0c      	subs	r4, r1, #4
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	bfb8      	it	lt
 8007bd2:	18e4      	addlt	r4, r4, r3
 8007bd4:	f7fe fb7a 	bl	80062cc <__malloc_lock>
 8007bd8:	4a1c      	ldr	r2, [pc, #112]	; (8007c4c <_free_r+0x8c>)
 8007bda:	6813      	ldr	r3, [r2, #0]
 8007bdc:	b933      	cbnz	r3, 8007bec <_free_r+0x2c>
 8007bde:	6063      	str	r3, [r4, #4]
 8007be0:	6014      	str	r4, [r2, #0]
 8007be2:	4628      	mov	r0, r5
 8007be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007be8:	f7fe bb76 	b.w	80062d8 <__malloc_unlock>
 8007bec:	42a3      	cmp	r3, r4
 8007bee:	d908      	bls.n	8007c02 <_free_r+0x42>
 8007bf0:	6820      	ldr	r0, [r4, #0]
 8007bf2:	1821      	adds	r1, r4, r0
 8007bf4:	428b      	cmp	r3, r1
 8007bf6:	bf01      	itttt	eq
 8007bf8:	6819      	ldreq	r1, [r3, #0]
 8007bfa:	685b      	ldreq	r3, [r3, #4]
 8007bfc:	1809      	addeq	r1, r1, r0
 8007bfe:	6021      	streq	r1, [r4, #0]
 8007c00:	e7ed      	b.n	8007bde <_free_r+0x1e>
 8007c02:	461a      	mov	r2, r3
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	b10b      	cbz	r3, 8007c0c <_free_r+0x4c>
 8007c08:	42a3      	cmp	r3, r4
 8007c0a:	d9fa      	bls.n	8007c02 <_free_r+0x42>
 8007c0c:	6811      	ldr	r1, [r2, #0]
 8007c0e:	1850      	adds	r0, r2, r1
 8007c10:	42a0      	cmp	r0, r4
 8007c12:	d10b      	bne.n	8007c2c <_free_r+0x6c>
 8007c14:	6820      	ldr	r0, [r4, #0]
 8007c16:	4401      	add	r1, r0
 8007c18:	1850      	adds	r0, r2, r1
 8007c1a:	4283      	cmp	r3, r0
 8007c1c:	6011      	str	r1, [r2, #0]
 8007c1e:	d1e0      	bne.n	8007be2 <_free_r+0x22>
 8007c20:	6818      	ldr	r0, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	4408      	add	r0, r1
 8007c26:	6010      	str	r0, [r2, #0]
 8007c28:	6053      	str	r3, [r2, #4]
 8007c2a:	e7da      	b.n	8007be2 <_free_r+0x22>
 8007c2c:	d902      	bls.n	8007c34 <_free_r+0x74>
 8007c2e:	230c      	movs	r3, #12
 8007c30:	602b      	str	r3, [r5, #0]
 8007c32:	e7d6      	b.n	8007be2 <_free_r+0x22>
 8007c34:	6820      	ldr	r0, [r4, #0]
 8007c36:	1821      	adds	r1, r4, r0
 8007c38:	428b      	cmp	r3, r1
 8007c3a:	bf01      	itttt	eq
 8007c3c:	6819      	ldreq	r1, [r3, #0]
 8007c3e:	685b      	ldreq	r3, [r3, #4]
 8007c40:	1809      	addeq	r1, r1, r0
 8007c42:	6021      	streq	r1, [r4, #0]
 8007c44:	6063      	str	r3, [r4, #4]
 8007c46:	6054      	str	r4, [r2, #4]
 8007c48:	e7cb      	b.n	8007be2 <_free_r+0x22>
 8007c4a:	bd38      	pop	{r3, r4, r5, pc}
 8007c4c:	2000090c 	.word	0x2000090c

08007c50 <_Balloc>:
 8007c50:	b570      	push	{r4, r5, r6, lr}
 8007c52:	69c6      	ldr	r6, [r0, #28]
 8007c54:	4604      	mov	r4, r0
 8007c56:	460d      	mov	r5, r1
 8007c58:	b976      	cbnz	r6, 8007c78 <_Balloc+0x28>
 8007c5a:	2010      	movs	r0, #16
 8007c5c:	f7fe fa86 	bl	800616c <malloc>
 8007c60:	4602      	mov	r2, r0
 8007c62:	61e0      	str	r0, [r4, #28]
 8007c64:	b920      	cbnz	r0, 8007c70 <_Balloc+0x20>
 8007c66:	216b      	movs	r1, #107	; 0x6b
 8007c68:	4b17      	ldr	r3, [pc, #92]	; (8007cc8 <_Balloc+0x78>)
 8007c6a:	4818      	ldr	r0, [pc, #96]	; (8007ccc <_Balloc+0x7c>)
 8007c6c:	f000 fc20 	bl	80084b0 <__assert_func>
 8007c70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c74:	6006      	str	r6, [r0, #0]
 8007c76:	60c6      	str	r6, [r0, #12]
 8007c78:	69e6      	ldr	r6, [r4, #28]
 8007c7a:	68f3      	ldr	r3, [r6, #12]
 8007c7c:	b183      	cbz	r3, 8007ca0 <_Balloc+0x50>
 8007c7e:	69e3      	ldr	r3, [r4, #28]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c86:	b9b8      	cbnz	r0, 8007cb8 <_Balloc+0x68>
 8007c88:	2101      	movs	r1, #1
 8007c8a:	fa01 f605 	lsl.w	r6, r1, r5
 8007c8e:	1d72      	adds	r2, r6, #5
 8007c90:	4620      	mov	r0, r4
 8007c92:	0092      	lsls	r2, r2, #2
 8007c94:	f000 fc2a 	bl	80084ec <_calloc_r>
 8007c98:	b160      	cbz	r0, 8007cb4 <_Balloc+0x64>
 8007c9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c9e:	e00e      	b.n	8007cbe <_Balloc+0x6e>
 8007ca0:	2221      	movs	r2, #33	; 0x21
 8007ca2:	2104      	movs	r1, #4
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	f000 fc21 	bl	80084ec <_calloc_r>
 8007caa:	69e3      	ldr	r3, [r4, #28]
 8007cac:	60f0      	str	r0, [r6, #12]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1e4      	bne.n	8007c7e <_Balloc+0x2e>
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	bd70      	pop	{r4, r5, r6, pc}
 8007cb8:	6802      	ldr	r2, [r0, #0]
 8007cba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007cc4:	e7f7      	b.n	8007cb6 <_Balloc+0x66>
 8007cc6:	bf00      	nop
 8007cc8:	08009315 	.word	0x08009315
 8007ccc:	08009395 	.word	0x08009395

08007cd0 <_Bfree>:
 8007cd0:	b570      	push	{r4, r5, r6, lr}
 8007cd2:	69c6      	ldr	r6, [r0, #28]
 8007cd4:	4605      	mov	r5, r0
 8007cd6:	460c      	mov	r4, r1
 8007cd8:	b976      	cbnz	r6, 8007cf8 <_Bfree+0x28>
 8007cda:	2010      	movs	r0, #16
 8007cdc:	f7fe fa46 	bl	800616c <malloc>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	61e8      	str	r0, [r5, #28]
 8007ce4:	b920      	cbnz	r0, 8007cf0 <_Bfree+0x20>
 8007ce6:	218f      	movs	r1, #143	; 0x8f
 8007ce8:	4b08      	ldr	r3, [pc, #32]	; (8007d0c <_Bfree+0x3c>)
 8007cea:	4809      	ldr	r0, [pc, #36]	; (8007d10 <_Bfree+0x40>)
 8007cec:	f000 fbe0 	bl	80084b0 <__assert_func>
 8007cf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cf4:	6006      	str	r6, [r0, #0]
 8007cf6:	60c6      	str	r6, [r0, #12]
 8007cf8:	b13c      	cbz	r4, 8007d0a <_Bfree+0x3a>
 8007cfa:	69eb      	ldr	r3, [r5, #28]
 8007cfc:	6862      	ldr	r2, [r4, #4]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d04:	6021      	str	r1, [r4, #0]
 8007d06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d0a:	bd70      	pop	{r4, r5, r6, pc}
 8007d0c:	08009315 	.word	0x08009315
 8007d10:	08009395 	.word	0x08009395

08007d14 <__multadd>:
 8007d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d18:	4607      	mov	r7, r0
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	461e      	mov	r6, r3
 8007d1e:	2000      	movs	r0, #0
 8007d20:	690d      	ldr	r5, [r1, #16]
 8007d22:	f101 0c14 	add.w	ip, r1, #20
 8007d26:	f8dc 3000 	ldr.w	r3, [ip]
 8007d2a:	3001      	adds	r0, #1
 8007d2c:	b299      	uxth	r1, r3
 8007d2e:	fb02 6101 	mla	r1, r2, r1, r6
 8007d32:	0c1e      	lsrs	r6, r3, #16
 8007d34:	0c0b      	lsrs	r3, r1, #16
 8007d36:	fb02 3306 	mla	r3, r2, r6, r3
 8007d3a:	b289      	uxth	r1, r1
 8007d3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d40:	4285      	cmp	r5, r0
 8007d42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d46:	f84c 1b04 	str.w	r1, [ip], #4
 8007d4a:	dcec      	bgt.n	8007d26 <__multadd+0x12>
 8007d4c:	b30e      	cbz	r6, 8007d92 <__multadd+0x7e>
 8007d4e:	68a3      	ldr	r3, [r4, #8]
 8007d50:	42ab      	cmp	r3, r5
 8007d52:	dc19      	bgt.n	8007d88 <__multadd+0x74>
 8007d54:	6861      	ldr	r1, [r4, #4]
 8007d56:	4638      	mov	r0, r7
 8007d58:	3101      	adds	r1, #1
 8007d5a:	f7ff ff79 	bl	8007c50 <_Balloc>
 8007d5e:	4680      	mov	r8, r0
 8007d60:	b928      	cbnz	r0, 8007d6e <__multadd+0x5a>
 8007d62:	4602      	mov	r2, r0
 8007d64:	21ba      	movs	r1, #186	; 0xba
 8007d66:	4b0c      	ldr	r3, [pc, #48]	; (8007d98 <__multadd+0x84>)
 8007d68:	480c      	ldr	r0, [pc, #48]	; (8007d9c <__multadd+0x88>)
 8007d6a:	f000 fba1 	bl	80084b0 <__assert_func>
 8007d6e:	6922      	ldr	r2, [r4, #16]
 8007d70:	f104 010c 	add.w	r1, r4, #12
 8007d74:	3202      	adds	r2, #2
 8007d76:	0092      	lsls	r2, r2, #2
 8007d78:	300c      	adds	r0, #12
 8007d7a:	f000 fb8b 	bl	8008494 <memcpy>
 8007d7e:	4621      	mov	r1, r4
 8007d80:	4638      	mov	r0, r7
 8007d82:	f7ff ffa5 	bl	8007cd0 <_Bfree>
 8007d86:	4644      	mov	r4, r8
 8007d88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d8c:	3501      	adds	r5, #1
 8007d8e:	615e      	str	r6, [r3, #20]
 8007d90:	6125      	str	r5, [r4, #16]
 8007d92:	4620      	mov	r0, r4
 8007d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d98:	08009384 	.word	0x08009384
 8007d9c:	08009395 	.word	0x08009395

08007da0 <__hi0bits>:
 8007da0:	0c02      	lsrs	r2, r0, #16
 8007da2:	0412      	lsls	r2, r2, #16
 8007da4:	4603      	mov	r3, r0
 8007da6:	b9ca      	cbnz	r2, 8007ddc <__hi0bits+0x3c>
 8007da8:	0403      	lsls	r3, r0, #16
 8007daa:	2010      	movs	r0, #16
 8007dac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007db0:	bf04      	itt	eq
 8007db2:	021b      	lsleq	r3, r3, #8
 8007db4:	3008      	addeq	r0, #8
 8007db6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007dba:	bf04      	itt	eq
 8007dbc:	011b      	lsleq	r3, r3, #4
 8007dbe:	3004      	addeq	r0, #4
 8007dc0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007dc4:	bf04      	itt	eq
 8007dc6:	009b      	lsleq	r3, r3, #2
 8007dc8:	3002      	addeq	r0, #2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	db05      	blt.n	8007dda <__hi0bits+0x3a>
 8007dce:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007dd2:	f100 0001 	add.w	r0, r0, #1
 8007dd6:	bf08      	it	eq
 8007dd8:	2020      	moveq	r0, #32
 8007dda:	4770      	bx	lr
 8007ddc:	2000      	movs	r0, #0
 8007dde:	e7e5      	b.n	8007dac <__hi0bits+0xc>

08007de0 <__lo0bits>:
 8007de0:	6803      	ldr	r3, [r0, #0]
 8007de2:	4602      	mov	r2, r0
 8007de4:	f013 0007 	ands.w	r0, r3, #7
 8007de8:	d00b      	beq.n	8007e02 <__lo0bits+0x22>
 8007dea:	07d9      	lsls	r1, r3, #31
 8007dec:	d421      	bmi.n	8007e32 <__lo0bits+0x52>
 8007dee:	0798      	lsls	r0, r3, #30
 8007df0:	bf49      	itett	mi
 8007df2:	085b      	lsrmi	r3, r3, #1
 8007df4:	089b      	lsrpl	r3, r3, #2
 8007df6:	2001      	movmi	r0, #1
 8007df8:	6013      	strmi	r3, [r2, #0]
 8007dfa:	bf5c      	itt	pl
 8007dfc:	2002      	movpl	r0, #2
 8007dfe:	6013      	strpl	r3, [r2, #0]
 8007e00:	4770      	bx	lr
 8007e02:	b299      	uxth	r1, r3
 8007e04:	b909      	cbnz	r1, 8007e0a <__lo0bits+0x2a>
 8007e06:	2010      	movs	r0, #16
 8007e08:	0c1b      	lsrs	r3, r3, #16
 8007e0a:	b2d9      	uxtb	r1, r3
 8007e0c:	b909      	cbnz	r1, 8007e12 <__lo0bits+0x32>
 8007e0e:	3008      	adds	r0, #8
 8007e10:	0a1b      	lsrs	r3, r3, #8
 8007e12:	0719      	lsls	r1, r3, #28
 8007e14:	bf04      	itt	eq
 8007e16:	091b      	lsreq	r3, r3, #4
 8007e18:	3004      	addeq	r0, #4
 8007e1a:	0799      	lsls	r1, r3, #30
 8007e1c:	bf04      	itt	eq
 8007e1e:	089b      	lsreq	r3, r3, #2
 8007e20:	3002      	addeq	r0, #2
 8007e22:	07d9      	lsls	r1, r3, #31
 8007e24:	d403      	bmi.n	8007e2e <__lo0bits+0x4e>
 8007e26:	085b      	lsrs	r3, r3, #1
 8007e28:	f100 0001 	add.w	r0, r0, #1
 8007e2c:	d003      	beq.n	8007e36 <__lo0bits+0x56>
 8007e2e:	6013      	str	r3, [r2, #0]
 8007e30:	4770      	bx	lr
 8007e32:	2000      	movs	r0, #0
 8007e34:	4770      	bx	lr
 8007e36:	2020      	movs	r0, #32
 8007e38:	4770      	bx	lr
	...

08007e3c <__i2b>:
 8007e3c:	b510      	push	{r4, lr}
 8007e3e:	460c      	mov	r4, r1
 8007e40:	2101      	movs	r1, #1
 8007e42:	f7ff ff05 	bl	8007c50 <_Balloc>
 8007e46:	4602      	mov	r2, r0
 8007e48:	b928      	cbnz	r0, 8007e56 <__i2b+0x1a>
 8007e4a:	f240 1145 	movw	r1, #325	; 0x145
 8007e4e:	4b04      	ldr	r3, [pc, #16]	; (8007e60 <__i2b+0x24>)
 8007e50:	4804      	ldr	r0, [pc, #16]	; (8007e64 <__i2b+0x28>)
 8007e52:	f000 fb2d 	bl	80084b0 <__assert_func>
 8007e56:	2301      	movs	r3, #1
 8007e58:	6144      	str	r4, [r0, #20]
 8007e5a:	6103      	str	r3, [r0, #16]
 8007e5c:	bd10      	pop	{r4, pc}
 8007e5e:	bf00      	nop
 8007e60:	08009384 	.word	0x08009384
 8007e64:	08009395 	.word	0x08009395

08007e68 <__multiply>:
 8007e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6c:	4691      	mov	r9, r2
 8007e6e:	690a      	ldr	r2, [r1, #16]
 8007e70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007e74:	460c      	mov	r4, r1
 8007e76:	429a      	cmp	r2, r3
 8007e78:	bfbe      	ittt	lt
 8007e7a:	460b      	movlt	r3, r1
 8007e7c:	464c      	movlt	r4, r9
 8007e7e:	4699      	movlt	r9, r3
 8007e80:	6927      	ldr	r7, [r4, #16]
 8007e82:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e86:	68a3      	ldr	r3, [r4, #8]
 8007e88:	6861      	ldr	r1, [r4, #4]
 8007e8a:	eb07 060a 	add.w	r6, r7, sl
 8007e8e:	42b3      	cmp	r3, r6
 8007e90:	b085      	sub	sp, #20
 8007e92:	bfb8      	it	lt
 8007e94:	3101      	addlt	r1, #1
 8007e96:	f7ff fedb 	bl	8007c50 <_Balloc>
 8007e9a:	b930      	cbnz	r0, 8007eaa <__multiply+0x42>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007ea2:	4b43      	ldr	r3, [pc, #268]	; (8007fb0 <__multiply+0x148>)
 8007ea4:	4843      	ldr	r0, [pc, #268]	; (8007fb4 <__multiply+0x14c>)
 8007ea6:	f000 fb03 	bl	80084b0 <__assert_func>
 8007eaa:	f100 0514 	add.w	r5, r0, #20
 8007eae:	462b      	mov	r3, r5
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007eb6:	4543      	cmp	r3, r8
 8007eb8:	d321      	bcc.n	8007efe <__multiply+0x96>
 8007eba:	f104 0314 	add.w	r3, r4, #20
 8007ebe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ec2:	f109 0314 	add.w	r3, r9, #20
 8007ec6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007eca:	9202      	str	r2, [sp, #8]
 8007ecc:	1b3a      	subs	r2, r7, r4
 8007ece:	3a15      	subs	r2, #21
 8007ed0:	f022 0203 	bic.w	r2, r2, #3
 8007ed4:	3204      	adds	r2, #4
 8007ed6:	f104 0115 	add.w	r1, r4, #21
 8007eda:	428f      	cmp	r7, r1
 8007edc:	bf38      	it	cc
 8007ede:	2204      	movcc	r2, #4
 8007ee0:	9201      	str	r2, [sp, #4]
 8007ee2:	9a02      	ldr	r2, [sp, #8]
 8007ee4:	9303      	str	r3, [sp, #12]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d80c      	bhi.n	8007f04 <__multiply+0x9c>
 8007eea:	2e00      	cmp	r6, #0
 8007eec:	dd03      	ble.n	8007ef6 <__multiply+0x8e>
 8007eee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d05a      	beq.n	8007fac <__multiply+0x144>
 8007ef6:	6106      	str	r6, [r0, #16]
 8007ef8:	b005      	add	sp, #20
 8007efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007efe:	f843 2b04 	str.w	r2, [r3], #4
 8007f02:	e7d8      	b.n	8007eb6 <__multiply+0x4e>
 8007f04:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f08:	f1ba 0f00 	cmp.w	sl, #0
 8007f0c:	d023      	beq.n	8007f56 <__multiply+0xee>
 8007f0e:	46a9      	mov	r9, r5
 8007f10:	f04f 0c00 	mov.w	ip, #0
 8007f14:	f104 0e14 	add.w	lr, r4, #20
 8007f18:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007f1c:	f8d9 1000 	ldr.w	r1, [r9]
 8007f20:	fa1f fb82 	uxth.w	fp, r2
 8007f24:	b289      	uxth	r1, r1
 8007f26:	fb0a 110b 	mla	r1, sl, fp, r1
 8007f2a:	4461      	add	r1, ip
 8007f2c:	f8d9 c000 	ldr.w	ip, [r9]
 8007f30:	0c12      	lsrs	r2, r2, #16
 8007f32:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007f36:	fb0a c202 	mla	r2, sl, r2, ip
 8007f3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f3e:	b289      	uxth	r1, r1
 8007f40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f44:	4577      	cmp	r7, lr
 8007f46:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f4a:	f849 1b04 	str.w	r1, [r9], #4
 8007f4e:	d8e3      	bhi.n	8007f18 <__multiply+0xb0>
 8007f50:	9a01      	ldr	r2, [sp, #4]
 8007f52:	f845 c002 	str.w	ip, [r5, r2]
 8007f56:	9a03      	ldr	r2, [sp, #12]
 8007f58:	3304      	adds	r3, #4
 8007f5a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007f5e:	f1b9 0f00 	cmp.w	r9, #0
 8007f62:	d021      	beq.n	8007fa8 <__multiply+0x140>
 8007f64:	46ae      	mov	lr, r5
 8007f66:	f04f 0a00 	mov.w	sl, #0
 8007f6a:	6829      	ldr	r1, [r5, #0]
 8007f6c:	f104 0c14 	add.w	ip, r4, #20
 8007f70:	f8bc b000 	ldrh.w	fp, [ip]
 8007f74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007f78:	b289      	uxth	r1, r1
 8007f7a:	fb09 220b 	mla	r2, r9, fp, r2
 8007f7e:	4452      	add	r2, sl
 8007f80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f84:	f84e 1b04 	str.w	r1, [lr], #4
 8007f88:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007f8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007f90:	f8be 1000 	ldrh.w	r1, [lr]
 8007f94:	4567      	cmp	r7, ip
 8007f96:	fb09 110a 	mla	r1, r9, sl, r1
 8007f9a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007f9e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007fa2:	d8e5      	bhi.n	8007f70 <__multiply+0x108>
 8007fa4:	9a01      	ldr	r2, [sp, #4]
 8007fa6:	50a9      	str	r1, [r5, r2]
 8007fa8:	3504      	adds	r5, #4
 8007faa:	e79a      	b.n	8007ee2 <__multiply+0x7a>
 8007fac:	3e01      	subs	r6, #1
 8007fae:	e79c      	b.n	8007eea <__multiply+0x82>
 8007fb0:	08009384 	.word	0x08009384
 8007fb4:	08009395 	.word	0x08009395

08007fb8 <__pow5mult>:
 8007fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fbc:	4615      	mov	r5, r2
 8007fbe:	f012 0203 	ands.w	r2, r2, #3
 8007fc2:	4606      	mov	r6, r0
 8007fc4:	460f      	mov	r7, r1
 8007fc6:	d007      	beq.n	8007fd8 <__pow5mult+0x20>
 8007fc8:	4c25      	ldr	r4, [pc, #148]	; (8008060 <__pow5mult+0xa8>)
 8007fca:	3a01      	subs	r2, #1
 8007fcc:	2300      	movs	r3, #0
 8007fce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fd2:	f7ff fe9f 	bl	8007d14 <__multadd>
 8007fd6:	4607      	mov	r7, r0
 8007fd8:	10ad      	asrs	r5, r5, #2
 8007fda:	d03d      	beq.n	8008058 <__pow5mult+0xa0>
 8007fdc:	69f4      	ldr	r4, [r6, #28]
 8007fde:	b97c      	cbnz	r4, 8008000 <__pow5mult+0x48>
 8007fe0:	2010      	movs	r0, #16
 8007fe2:	f7fe f8c3 	bl	800616c <malloc>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	61f0      	str	r0, [r6, #28]
 8007fea:	b928      	cbnz	r0, 8007ff8 <__pow5mult+0x40>
 8007fec:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007ff0:	4b1c      	ldr	r3, [pc, #112]	; (8008064 <__pow5mult+0xac>)
 8007ff2:	481d      	ldr	r0, [pc, #116]	; (8008068 <__pow5mult+0xb0>)
 8007ff4:	f000 fa5c 	bl	80084b0 <__assert_func>
 8007ff8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ffc:	6004      	str	r4, [r0, #0]
 8007ffe:	60c4      	str	r4, [r0, #12]
 8008000:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008004:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008008:	b94c      	cbnz	r4, 800801e <__pow5mult+0x66>
 800800a:	f240 2171 	movw	r1, #625	; 0x271
 800800e:	4630      	mov	r0, r6
 8008010:	f7ff ff14 	bl	8007e3c <__i2b>
 8008014:	2300      	movs	r3, #0
 8008016:	4604      	mov	r4, r0
 8008018:	f8c8 0008 	str.w	r0, [r8, #8]
 800801c:	6003      	str	r3, [r0, #0]
 800801e:	f04f 0900 	mov.w	r9, #0
 8008022:	07eb      	lsls	r3, r5, #31
 8008024:	d50a      	bpl.n	800803c <__pow5mult+0x84>
 8008026:	4639      	mov	r1, r7
 8008028:	4622      	mov	r2, r4
 800802a:	4630      	mov	r0, r6
 800802c:	f7ff ff1c 	bl	8007e68 <__multiply>
 8008030:	4680      	mov	r8, r0
 8008032:	4639      	mov	r1, r7
 8008034:	4630      	mov	r0, r6
 8008036:	f7ff fe4b 	bl	8007cd0 <_Bfree>
 800803a:	4647      	mov	r7, r8
 800803c:	106d      	asrs	r5, r5, #1
 800803e:	d00b      	beq.n	8008058 <__pow5mult+0xa0>
 8008040:	6820      	ldr	r0, [r4, #0]
 8008042:	b938      	cbnz	r0, 8008054 <__pow5mult+0x9c>
 8008044:	4622      	mov	r2, r4
 8008046:	4621      	mov	r1, r4
 8008048:	4630      	mov	r0, r6
 800804a:	f7ff ff0d 	bl	8007e68 <__multiply>
 800804e:	6020      	str	r0, [r4, #0]
 8008050:	f8c0 9000 	str.w	r9, [r0]
 8008054:	4604      	mov	r4, r0
 8008056:	e7e4      	b.n	8008022 <__pow5mult+0x6a>
 8008058:	4638      	mov	r0, r7
 800805a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800805e:	bf00      	nop
 8008060:	080094e0 	.word	0x080094e0
 8008064:	08009315 	.word	0x08009315
 8008068:	08009395 	.word	0x08009395

0800806c <__lshift>:
 800806c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008070:	460c      	mov	r4, r1
 8008072:	4607      	mov	r7, r0
 8008074:	4691      	mov	r9, r2
 8008076:	6923      	ldr	r3, [r4, #16]
 8008078:	6849      	ldr	r1, [r1, #4]
 800807a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800807e:	68a3      	ldr	r3, [r4, #8]
 8008080:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008084:	f108 0601 	add.w	r6, r8, #1
 8008088:	42b3      	cmp	r3, r6
 800808a:	db0b      	blt.n	80080a4 <__lshift+0x38>
 800808c:	4638      	mov	r0, r7
 800808e:	f7ff fddf 	bl	8007c50 <_Balloc>
 8008092:	4605      	mov	r5, r0
 8008094:	b948      	cbnz	r0, 80080aa <__lshift+0x3e>
 8008096:	4602      	mov	r2, r0
 8008098:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800809c:	4b27      	ldr	r3, [pc, #156]	; (800813c <__lshift+0xd0>)
 800809e:	4828      	ldr	r0, [pc, #160]	; (8008140 <__lshift+0xd4>)
 80080a0:	f000 fa06 	bl	80084b0 <__assert_func>
 80080a4:	3101      	adds	r1, #1
 80080a6:	005b      	lsls	r3, r3, #1
 80080a8:	e7ee      	b.n	8008088 <__lshift+0x1c>
 80080aa:	2300      	movs	r3, #0
 80080ac:	f100 0114 	add.w	r1, r0, #20
 80080b0:	f100 0210 	add.w	r2, r0, #16
 80080b4:	4618      	mov	r0, r3
 80080b6:	4553      	cmp	r3, sl
 80080b8:	db33      	blt.n	8008122 <__lshift+0xb6>
 80080ba:	6920      	ldr	r0, [r4, #16]
 80080bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080c0:	f104 0314 	add.w	r3, r4, #20
 80080c4:	f019 091f 	ands.w	r9, r9, #31
 80080c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80080d0:	d02b      	beq.n	800812a <__lshift+0xbe>
 80080d2:	468a      	mov	sl, r1
 80080d4:	2200      	movs	r2, #0
 80080d6:	f1c9 0e20 	rsb	lr, r9, #32
 80080da:	6818      	ldr	r0, [r3, #0]
 80080dc:	fa00 f009 	lsl.w	r0, r0, r9
 80080e0:	4310      	orrs	r0, r2
 80080e2:	f84a 0b04 	str.w	r0, [sl], #4
 80080e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ea:	459c      	cmp	ip, r3
 80080ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80080f0:	d8f3      	bhi.n	80080da <__lshift+0x6e>
 80080f2:	ebac 0304 	sub.w	r3, ip, r4
 80080f6:	3b15      	subs	r3, #21
 80080f8:	f023 0303 	bic.w	r3, r3, #3
 80080fc:	3304      	adds	r3, #4
 80080fe:	f104 0015 	add.w	r0, r4, #21
 8008102:	4584      	cmp	ip, r0
 8008104:	bf38      	it	cc
 8008106:	2304      	movcc	r3, #4
 8008108:	50ca      	str	r2, [r1, r3]
 800810a:	b10a      	cbz	r2, 8008110 <__lshift+0xa4>
 800810c:	f108 0602 	add.w	r6, r8, #2
 8008110:	3e01      	subs	r6, #1
 8008112:	4638      	mov	r0, r7
 8008114:	4621      	mov	r1, r4
 8008116:	612e      	str	r6, [r5, #16]
 8008118:	f7ff fdda 	bl	8007cd0 <_Bfree>
 800811c:	4628      	mov	r0, r5
 800811e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008122:	f842 0f04 	str.w	r0, [r2, #4]!
 8008126:	3301      	adds	r3, #1
 8008128:	e7c5      	b.n	80080b6 <__lshift+0x4a>
 800812a:	3904      	subs	r1, #4
 800812c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008130:	459c      	cmp	ip, r3
 8008132:	f841 2f04 	str.w	r2, [r1, #4]!
 8008136:	d8f9      	bhi.n	800812c <__lshift+0xc0>
 8008138:	e7ea      	b.n	8008110 <__lshift+0xa4>
 800813a:	bf00      	nop
 800813c:	08009384 	.word	0x08009384
 8008140:	08009395 	.word	0x08009395

08008144 <__mcmp>:
 8008144:	4603      	mov	r3, r0
 8008146:	690a      	ldr	r2, [r1, #16]
 8008148:	6900      	ldr	r0, [r0, #16]
 800814a:	b530      	push	{r4, r5, lr}
 800814c:	1a80      	subs	r0, r0, r2
 800814e:	d10d      	bne.n	800816c <__mcmp+0x28>
 8008150:	3314      	adds	r3, #20
 8008152:	3114      	adds	r1, #20
 8008154:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008158:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800815c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008160:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008164:	4295      	cmp	r5, r2
 8008166:	d002      	beq.n	800816e <__mcmp+0x2a>
 8008168:	d304      	bcc.n	8008174 <__mcmp+0x30>
 800816a:	2001      	movs	r0, #1
 800816c:	bd30      	pop	{r4, r5, pc}
 800816e:	42a3      	cmp	r3, r4
 8008170:	d3f4      	bcc.n	800815c <__mcmp+0x18>
 8008172:	e7fb      	b.n	800816c <__mcmp+0x28>
 8008174:	f04f 30ff 	mov.w	r0, #4294967295
 8008178:	e7f8      	b.n	800816c <__mcmp+0x28>
	...

0800817c <__mdiff>:
 800817c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008180:	460d      	mov	r5, r1
 8008182:	4607      	mov	r7, r0
 8008184:	4611      	mov	r1, r2
 8008186:	4628      	mov	r0, r5
 8008188:	4614      	mov	r4, r2
 800818a:	f7ff ffdb 	bl	8008144 <__mcmp>
 800818e:	1e06      	subs	r6, r0, #0
 8008190:	d111      	bne.n	80081b6 <__mdiff+0x3a>
 8008192:	4631      	mov	r1, r6
 8008194:	4638      	mov	r0, r7
 8008196:	f7ff fd5b 	bl	8007c50 <_Balloc>
 800819a:	4602      	mov	r2, r0
 800819c:	b928      	cbnz	r0, 80081aa <__mdiff+0x2e>
 800819e:	f240 2137 	movw	r1, #567	; 0x237
 80081a2:	4b3a      	ldr	r3, [pc, #232]	; (800828c <__mdiff+0x110>)
 80081a4:	483a      	ldr	r0, [pc, #232]	; (8008290 <__mdiff+0x114>)
 80081a6:	f000 f983 	bl	80084b0 <__assert_func>
 80081aa:	2301      	movs	r3, #1
 80081ac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80081b0:	4610      	mov	r0, r2
 80081b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b6:	bfa4      	itt	ge
 80081b8:	4623      	movge	r3, r4
 80081ba:	462c      	movge	r4, r5
 80081bc:	4638      	mov	r0, r7
 80081be:	6861      	ldr	r1, [r4, #4]
 80081c0:	bfa6      	itte	ge
 80081c2:	461d      	movge	r5, r3
 80081c4:	2600      	movge	r6, #0
 80081c6:	2601      	movlt	r6, #1
 80081c8:	f7ff fd42 	bl	8007c50 <_Balloc>
 80081cc:	4602      	mov	r2, r0
 80081ce:	b918      	cbnz	r0, 80081d8 <__mdiff+0x5c>
 80081d0:	f240 2145 	movw	r1, #581	; 0x245
 80081d4:	4b2d      	ldr	r3, [pc, #180]	; (800828c <__mdiff+0x110>)
 80081d6:	e7e5      	b.n	80081a4 <__mdiff+0x28>
 80081d8:	f102 0814 	add.w	r8, r2, #20
 80081dc:	46c2      	mov	sl, r8
 80081de:	f04f 0c00 	mov.w	ip, #0
 80081e2:	6927      	ldr	r7, [r4, #16]
 80081e4:	60c6      	str	r6, [r0, #12]
 80081e6:	692e      	ldr	r6, [r5, #16]
 80081e8:	f104 0014 	add.w	r0, r4, #20
 80081ec:	f105 0914 	add.w	r9, r5, #20
 80081f0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80081f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80081f8:	3410      	adds	r4, #16
 80081fa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80081fe:	f859 3b04 	ldr.w	r3, [r9], #4
 8008202:	fa1f f18b 	uxth.w	r1, fp
 8008206:	4461      	add	r1, ip
 8008208:	fa1f fc83 	uxth.w	ip, r3
 800820c:	0c1b      	lsrs	r3, r3, #16
 800820e:	eba1 010c 	sub.w	r1, r1, ip
 8008212:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008216:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800821a:	b289      	uxth	r1, r1
 800821c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008220:	454e      	cmp	r6, r9
 8008222:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008226:	f84a 1b04 	str.w	r1, [sl], #4
 800822a:	d8e6      	bhi.n	80081fa <__mdiff+0x7e>
 800822c:	1b73      	subs	r3, r6, r5
 800822e:	3b15      	subs	r3, #21
 8008230:	f023 0303 	bic.w	r3, r3, #3
 8008234:	3515      	adds	r5, #21
 8008236:	3304      	adds	r3, #4
 8008238:	42ae      	cmp	r6, r5
 800823a:	bf38      	it	cc
 800823c:	2304      	movcc	r3, #4
 800823e:	4418      	add	r0, r3
 8008240:	4443      	add	r3, r8
 8008242:	461e      	mov	r6, r3
 8008244:	4605      	mov	r5, r0
 8008246:	4575      	cmp	r5, lr
 8008248:	d30e      	bcc.n	8008268 <__mdiff+0xec>
 800824a:	f10e 0103 	add.w	r1, lr, #3
 800824e:	1a09      	subs	r1, r1, r0
 8008250:	f021 0103 	bic.w	r1, r1, #3
 8008254:	3803      	subs	r0, #3
 8008256:	4586      	cmp	lr, r0
 8008258:	bf38      	it	cc
 800825a:	2100      	movcc	r1, #0
 800825c:	440b      	add	r3, r1
 800825e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008262:	b189      	cbz	r1, 8008288 <__mdiff+0x10c>
 8008264:	6117      	str	r7, [r2, #16]
 8008266:	e7a3      	b.n	80081b0 <__mdiff+0x34>
 8008268:	f855 8b04 	ldr.w	r8, [r5], #4
 800826c:	fa1f f188 	uxth.w	r1, r8
 8008270:	4461      	add	r1, ip
 8008272:	140c      	asrs	r4, r1, #16
 8008274:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008278:	b289      	uxth	r1, r1
 800827a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800827e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8008282:	f846 1b04 	str.w	r1, [r6], #4
 8008286:	e7de      	b.n	8008246 <__mdiff+0xca>
 8008288:	3f01      	subs	r7, #1
 800828a:	e7e8      	b.n	800825e <__mdiff+0xe2>
 800828c:	08009384 	.word	0x08009384
 8008290:	08009395 	.word	0x08009395

08008294 <__d2b>:
 8008294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008296:	2101      	movs	r1, #1
 8008298:	4617      	mov	r7, r2
 800829a:	461c      	mov	r4, r3
 800829c:	9e08      	ldr	r6, [sp, #32]
 800829e:	f7ff fcd7 	bl	8007c50 <_Balloc>
 80082a2:	4605      	mov	r5, r0
 80082a4:	b930      	cbnz	r0, 80082b4 <__d2b+0x20>
 80082a6:	4602      	mov	r2, r0
 80082a8:	f240 310f 	movw	r1, #783	; 0x30f
 80082ac:	4b22      	ldr	r3, [pc, #136]	; (8008338 <__d2b+0xa4>)
 80082ae:	4823      	ldr	r0, [pc, #140]	; (800833c <__d2b+0xa8>)
 80082b0:	f000 f8fe 	bl	80084b0 <__assert_func>
 80082b4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80082b8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80082bc:	bb24      	cbnz	r4, 8008308 <__d2b+0x74>
 80082be:	2f00      	cmp	r7, #0
 80082c0:	9301      	str	r3, [sp, #4]
 80082c2:	d026      	beq.n	8008312 <__d2b+0x7e>
 80082c4:	4668      	mov	r0, sp
 80082c6:	9700      	str	r7, [sp, #0]
 80082c8:	f7ff fd8a 	bl	8007de0 <__lo0bits>
 80082cc:	e9dd 1200 	ldrd	r1, r2, [sp]
 80082d0:	b1e8      	cbz	r0, 800830e <__d2b+0x7a>
 80082d2:	f1c0 0320 	rsb	r3, r0, #32
 80082d6:	fa02 f303 	lsl.w	r3, r2, r3
 80082da:	430b      	orrs	r3, r1
 80082dc:	40c2      	lsrs	r2, r0
 80082de:	616b      	str	r3, [r5, #20]
 80082e0:	9201      	str	r2, [sp, #4]
 80082e2:	9b01      	ldr	r3, [sp, #4]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	bf14      	ite	ne
 80082e8:	2102      	movne	r1, #2
 80082ea:	2101      	moveq	r1, #1
 80082ec:	61ab      	str	r3, [r5, #24]
 80082ee:	6129      	str	r1, [r5, #16]
 80082f0:	b1bc      	cbz	r4, 8008322 <__d2b+0x8e>
 80082f2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80082f6:	4404      	add	r4, r0
 80082f8:	6034      	str	r4, [r6, #0]
 80082fa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80082fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008300:	6018      	str	r0, [r3, #0]
 8008302:	4628      	mov	r0, r5
 8008304:	b003      	add	sp, #12
 8008306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008308:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800830c:	e7d7      	b.n	80082be <__d2b+0x2a>
 800830e:	6169      	str	r1, [r5, #20]
 8008310:	e7e7      	b.n	80082e2 <__d2b+0x4e>
 8008312:	a801      	add	r0, sp, #4
 8008314:	f7ff fd64 	bl	8007de0 <__lo0bits>
 8008318:	9b01      	ldr	r3, [sp, #4]
 800831a:	2101      	movs	r1, #1
 800831c:	616b      	str	r3, [r5, #20]
 800831e:	3020      	adds	r0, #32
 8008320:	e7e5      	b.n	80082ee <__d2b+0x5a>
 8008322:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008326:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800832a:	6030      	str	r0, [r6, #0]
 800832c:	6918      	ldr	r0, [r3, #16]
 800832e:	f7ff fd37 	bl	8007da0 <__hi0bits>
 8008332:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008336:	e7e2      	b.n	80082fe <__d2b+0x6a>
 8008338:	08009384 	.word	0x08009384
 800833c:	08009395 	.word	0x08009395

08008340 <__sflush_r>:
 8008340:	898a      	ldrh	r2, [r1, #12]
 8008342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008344:	4605      	mov	r5, r0
 8008346:	0710      	lsls	r0, r2, #28
 8008348:	460c      	mov	r4, r1
 800834a:	d457      	bmi.n	80083fc <__sflush_r+0xbc>
 800834c:	684b      	ldr	r3, [r1, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	dc04      	bgt.n	800835c <__sflush_r+0x1c>
 8008352:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008354:	2b00      	cmp	r3, #0
 8008356:	dc01      	bgt.n	800835c <__sflush_r+0x1c>
 8008358:	2000      	movs	r0, #0
 800835a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800835c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800835e:	2e00      	cmp	r6, #0
 8008360:	d0fa      	beq.n	8008358 <__sflush_r+0x18>
 8008362:	2300      	movs	r3, #0
 8008364:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008368:	682f      	ldr	r7, [r5, #0]
 800836a:	6a21      	ldr	r1, [r4, #32]
 800836c:	602b      	str	r3, [r5, #0]
 800836e:	d032      	beq.n	80083d6 <__sflush_r+0x96>
 8008370:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008372:	89a3      	ldrh	r3, [r4, #12]
 8008374:	075a      	lsls	r2, r3, #29
 8008376:	d505      	bpl.n	8008384 <__sflush_r+0x44>
 8008378:	6863      	ldr	r3, [r4, #4]
 800837a:	1ac0      	subs	r0, r0, r3
 800837c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800837e:	b10b      	cbz	r3, 8008384 <__sflush_r+0x44>
 8008380:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008382:	1ac0      	subs	r0, r0, r3
 8008384:	2300      	movs	r3, #0
 8008386:	4602      	mov	r2, r0
 8008388:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800838a:	4628      	mov	r0, r5
 800838c:	6a21      	ldr	r1, [r4, #32]
 800838e:	47b0      	blx	r6
 8008390:	1c43      	adds	r3, r0, #1
 8008392:	89a3      	ldrh	r3, [r4, #12]
 8008394:	d106      	bne.n	80083a4 <__sflush_r+0x64>
 8008396:	6829      	ldr	r1, [r5, #0]
 8008398:	291d      	cmp	r1, #29
 800839a:	d82b      	bhi.n	80083f4 <__sflush_r+0xb4>
 800839c:	4a28      	ldr	r2, [pc, #160]	; (8008440 <__sflush_r+0x100>)
 800839e:	410a      	asrs	r2, r1
 80083a0:	07d6      	lsls	r6, r2, #31
 80083a2:	d427      	bmi.n	80083f4 <__sflush_r+0xb4>
 80083a4:	2200      	movs	r2, #0
 80083a6:	6062      	str	r2, [r4, #4]
 80083a8:	6922      	ldr	r2, [r4, #16]
 80083aa:	04d9      	lsls	r1, r3, #19
 80083ac:	6022      	str	r2, [r4, #0]
 80083ae:	d504      	bpl.n	80083ba <__sflush_r+0x7a>
 80083b0:	1c42      	adds	r2, r0, #1
 80083b2:	d101      	bne.n	80083b8 <__sflush_r+0x78>
 80083b4:	682b      	ldr	r3, [r5, #0]
 80083b6:	b903      	cbnz	r3, 80083ba <__sflush_r+0x7a>
 80083b8:	6560      	str	r0, [r4, #84]	; 0x54
 80083ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083bc:	602f      	str	r7, [r5, #0]
 80083be:	2900      	cmp	r1, #0
 80083c0:	d0ca      	beq.n	8008358 <__sflush_r+0x18>
 80083c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083c6:	4299      	cmp	r1, r3
 80083c8:	d002      	beq.n	80083d0 <__sflush_r+0x90>
 80083ca:	4628      	mov	r0, r5
 80083cc:	f7ff fbf8 	bl	8007bc0 <_free_r>
 80083d0:	2000      	movs	r0, #0
 80083d2:	6360      	str	r0, [r4, #52]	; 0x34
 80083d4:	e7c1      	b.n	800835a <__sflush_r+0x1a>
 80083d6:	2301      	movs	r3, #1
 80083d8:	4628      	mov	r0, r5
 80083da:	47b0      	blx	r6
 80083dc:	1c41      	adds	r1, r0, #1
 80083de:	d1c8      	bne.n	8008372 <__sflush_r+0x32>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d0c5      	beq.n	8008372 <__sflush_r+0x32>
 80083e6:	2b1d      	cmp	r3, #29
 80083e8:	d001      	beq.n	80083ee <__sflush_r+0xae>
 80083ea:	2b16      	cmp	r3, #22
 80083ec:	d101      	bne.n	80083f2 <__sflush_r+0xb2>
 80083ee:	602f      	str	r7, [r5, #0]
 80083f0:	e7b2      	b.n	8008358 <__sflush_r+0x18>
 80083f2:	89a3      	ldrh	r3, [r4, #12]
 80083f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f8:	81a3      	strh	r3, [r4, #12]
 80083fa:	e7ae      	b.n	800835a <__sflush_r+0x1a>
 80083fc:	690f      	ldr	r7, [r1, #16]
 80083fe:	2f00      	cmp	r7, #0
 8008400:	d0aa      	beq.n	8008358 <__sflush_r+0x18>
 8008402:	0793      	lsls	r3, r2, #30
 8008404:	bf18      	it	ne
 8008406:	2300      	movne	r3, #0
 8008408:	680e      	ldr	r6, [r1, #0]
 800840a:	bf08      	it	eq
 800840c:	694b      	ldreq	r3, [r1, #20]
 800840e:	1bf6      	subs	r6, r6, r7
 8008410:	600f      	str	r7, [r1, #0]
 8008412:	608b      	str	r3, [r1, #8]
 8008414:	2e00      	cmp	r6, #0
 8008416:	dd9f      	ble.n	8008358 <__sflush_r+0x18>
 8008418:	4633      	mov	r3, r6
 800841a:	463a      	mov	r2, r7
 800841c:	4628      	mov	r0, r5
 800841e:	6a21      	ldr	r1, [r4, #32]
 8008420:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008424:	47e0      	blx	ip
 8008426:	2800      	cmp	r0, #0
 8008428:	dc06      	bgt.n	8008438 <__sflush_r+0xf8>
 800842a:	89a3      	ldrh	r3, [r4, #12]
 800842c:	f04f 30ff 	mov.w	r0, #4294967295
 8008430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008434:	81a3      	strh	r3, [r4, #12]
 8008436:	e790      	b.n	800835a <__sflush_r+0x1a>
 8008438:	4407      	add	r7, r0
 800843a:	1a36      	subs	r6, r6, r0
 800843c:	e7ea      	b.n	8008414 <__sflush_r+0xd4>
 800843e:	bf00      	nop
 8008440:	dfbffffe 	.word	0xdfbffffe

08008444 <_fflush_r>:
 8008444:	b538      	push	{r3, r4, r5, lr}
 8008446:	690b      	ldr	r3, [r1, #16]
 8008448:	4605      	mov	r5, r0
 800844a:	460c      	mov	r4, r1
 800844c:	b913      	cbnz	r3, 8008454 <_fflush_r+0x10>
 800844e:	2500      	movs	r5, #0
 8008450:	4628      	mov	r0, r5
 8008452:	bd38      	pop	{r3, r4, r5, pc}
 8008454:	b118      	cbz	r0, 800845e <_fflush_r+0x1a>
 8008456:	6a03      	ldr	r3, [r0, #32]
 8008458:	b90b      	cbnz	r3, 800845e <_fflush_r+0x1a>
 800845a:	f7fe fc2d 	bl	8006cb8 <__sinit>
 800845e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d0f3      	beq.n	800844e <_fflush_r+0xa>
 8008466:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008468:	07d0      	lsls	r0, r2, #31
 800846a:	d404      	bmi.n	8008476 <_fflush_r+0x32>
 800846c:	0599      	lsls	r1, r3, #22
 800846e:	d402      	bmi.n	8008476 <_fflush_r+0x32>
 8008470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008472:	f7fe fd28 	bl	8006ec6 <__retarget_lock_acquire_recursive>
 8008476:	4628      	mov	r0, r5
 8008478:	4621      	mov	r1, r4
 800847a:	f7ff ff61 	bl	8008340 <__sflush_r>
 800847e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008480:	4605      	mov	r5, r0
 8008482:	07da      	lsls	r2, r3, #31
 8008484:	d4e4      	bmi.n	8008450 <_fflush_r+0xc>
 8008486:	89a3      	ldrh	r3, [r4, #12]
 8008488:	059b      	lsls	r3, r3, #22
 800848a:	d4e1      	bmi.n	8008450 <_fflush_r+0xc>
 800848c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800848e:	f7fe fd1b 	bl	8006ec8 <__retarget_lock_release_recursive>
 8008492:	e7dd      	b.n	8008450 <_fflush_r+0xc>

08008494 <memcpy>:
 8008494:	440a      	add	r2, r1
 8008496:	4291      	cmp	r1, r2
 8008498:	f100 33ff 	add.w	r3, r0, #4294967295
 800849c:	d100      	bne.n	80084a0 <memcpy+0xc>
 800849e:	4770      	bx	lr
 80084a0:	b510      	push	{r4, lr}
 80084a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084a6:	4291      	cmp	r1, r2
 80084a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084ac:	d1f9      	bne.n	80084a2 <memcpy+0xe>
 80084ae:	bd10      	pop	{r4, pc}

080084b0 <__assert_func>:
 80084b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084b2:	4614      	mov	r4, r2
 80084b4:	461a      	mov	r2, r3
 80084b6:	4b09      	ldr	r3, [pc, #36]	; (80084dc <__assert_func+0x2c>)
 80084b8:	4605      	mov	r5, r0
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68d8      	ldr	r0, [r3, #12]
 80084be:	b14c      	cbz	r4, 80084d4 <__assert_func+0x24>
 80084c0:	4b07      	ldr	r3, [pc, #28]	; (80084e0 <__assert_func+0x30>)
 80084c2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084c6:	9100      	str	r1, [sp, #0]
 80084c8:	462b      	mov	r3, r5
 80084ca:	4906      	ldr	r1, [pc, #24]	; (80084e4 <__assert_func+0x34>)
 80084cc:	f000 f842 	bl	8008554 <fiprintf>
 80084d0:	f000 f852 	bl	8008578 <abort>
 80084d4:	4b04      	ldr	r3, [pc, #16]	; (80084e8 <__assert_func+0x38>)
 80084d6:	461c      	mov	r4, r3
 80084d8:	e7f3      	b.n	80084c2 <__assert_func+0x12>
 80084da:	bf00      	nop
 80084dc:	200000c8 	.word	0x200000c8
 80084e0:	080094f6 	.word	0x080094f6
 80084e4:	08009503 	.word	0x08009503
 80084e8:	08009531 	.word	0x08009531

080084ec <_calloc_r>:
 80084ec:	b570      	push	{r4, r5, r6, lr}
 80084ee:	fba1 5402 	umull	r5, r4, r1, r2
 80084f2:	b934      	cbnz	r4, 8008502 <_calloc_r+0x16>
 80084f4:	4629      	mov	r1, r5
 80084f6:	f7fd fe69 	bl	80061cc <_malloc_r>
 80084fa:	4606      	mov	r6, r0
 80084fc:	b928      	cbnz	r0, 800850a <_calloc_r+0x1e>
 80084fe:	4630      	mov	r0, r6
 8008500:	bd70      	pop	{r4, r5, r6, pc}
 8008502:	220c      	movs	r2, #12
 8008504:	2600      	movs	r6, #0
 8008506:	6002      	str	r2, [r0, #0]
 8008508:	e7f9      	b.n	80084fe <_calloc_r+0x12>
 800850a:	462a      	mov	r2, r5
 800850c:	4621      	mov	r1, r4
 800850e:	f7fe fc4c 	bl	8006daa <memset>
 8008512:	e7f4      	b.n	80084fe <_calloc_r+0x12>

08008514 <__ascii_mbtowc>:
 8008514:	b082      	sub	sp, #8
 8008516:	b901      	cbnz	r1, 800851a <__ascii_mbtowc+0x6>
 8008518:	a901      	add	r1, sp, #4
 800851a:	b142      	cbz	r2, 800852e <__ascii_mbtowc+0x1a>
 800851c:	b14b      	cbz	r3, 8008532 <__ascii_mbtowc+0x1e>
 800851e:	7813      	ldrb	r3, [r2, #0]
 8008520:	600b      	str	r3, [r1, #0]
 8008522:	7812      	ldrb	r2, [r2, #0]
 8008524:	1e10      	subs	r0, r2, #0
 8008526:	bf18      	it	ne
 8008528:	2001      	movne	r0, #1
 800852a:	b002      	add	sp, #8
 800852c:	4770      	bx	lr
 800852e:	4610      	mov	r0, r2
 8008530:	e7fb      	b.n	800852a <__ascii_mbtowc+0x16>
 8008532:	f06f 0001 	mvn.w	r0, #1
 8008536:	e7f8      	b.n	800852a <__ascii_mbtowc+0x16>

08008538 <__ascii_wctomb>:
 8008538:	4603      	mov	r3, r0
 800853a:	4608      	mov	r0, r1
 800853c:	b141      	cbz	r1, 8008550 <__ascii_wctomb+0x18>
 800853e:	2aff      	cmp	r2, #255	; 0xff
 8008540:	d904      	bls.n	800854c <__ascii_wctomb+0x14>
 8008542:	228a      	movs	r2, #138	; 0x8a
 8008544:	f04f 30ff 	mov.w	r0, #4294967295
 8008548:	601a      	str	r2, [r3, #0]
 800854a:	4770      	bx	lr
 800854c:	2001      	movs	r0, #1
 800854e:	700a      	strb	r2, [r1, #0]
 8008550:	4770      	bx	lr
	...

08008554 <fiprintf>:
 8008554:	b40e      	push	{r1, r2, r3}
 8008556:	b503      	push	{r0, r1, lr}
 8008558:	4601      	mov	r1, r0
 800855a:	ab03      	add	r3, sp, #12
 800855c:	4805      	ldr	r0, [pc, #20]	; (8008574 <fiprintf+0x20>)
 800855e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008562:	6800      	ldr	r0, [r0, #0]
 8008564:	9301      	str	r3, [sp, #4]
 8008566:	f000 f835 	bl	80085d4 <_vfiprintf_r>
 800856a:	b002      	add	sp, #8
 800856c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008570:	b003      	add	sp, #12
 8008572:	4770      	bx	lr
 8008574:	200000c8 	.word	0x200000c8

08008578 <abort>:
 8008578:	2006      	movs	r0, #6
 800857a:	b508      	push	{r3, lr}
 800857c:	f000 fa02 	bl	8008984 <raise>
 8008580:	2001      	movs	r0, #1
 8008582:	f7fa f950 	bl	8002826 <_exit>

08008586 <__sfputc_r>:
 8008586:	6893      	ldr	r3, [r2, #8]
 8008588:	b410      	push	{r4}
 800858a:	3b01      	subs	r3, #1
 800858c:	2b00      	cmp	r3, #0
 800858e:	6093      	str	r3, [r2, #8]
 8008590:	da07      	bge.n	80085a2 <__sfputc_r+0x1c>
 8008592:	6994      	ldr	r4, [r2, #24]
 8008594:	42a3      	cmp	r3, r4
 8008596:	db01      	blt.n	800859c <__sfputc_r+0x16>
 8008598:	290a      	cmp	r1, #10
 800859a:	d102      	bne.n	80085a2 <__sfputc_r+0x1c>
 800859c:	bc10      	pop	{r4}
 800859e:	f000 b933 	b.w	8008808 <__swbuf_r>
 80085a2:	6813      	ldr	r3, [r2, #0]
 80085a4:	1c58      	adds	r0, r3, #1
 80085a6:	6010      	str	r0, [r2, #0]
 80085a8:	7019      	strb	r1, [r3, #0]
 80085aa:	4608      	mov	r0, r1
 80085ac:	bc10      	pop	{r4}
 80085ae:	4770      	bx	lr

080085b0 <__sfputs_r>:
 80085b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b2:	4606      	mov	r6, r0
 80085b4:	460f      	mov	r7, r1
 80085b6:	4614      	mov	r4, r2
 80085b8:	18d5      	adds	r5, r2, r3
 80085ba:	42ac      	cmp	r4, r5
 80085bc:	d101      	bne.n	80085c2 <__sfputs_r+0x12>
 80085be:	2000      	movs	r0, #0
 80085c0:	e007      	b.n	80085d2 <__sfputs_r+0x22>
 80085c2:	463a      	mov	r2, r7
 80085c4:	4630      	mov	r0, r6
 80085c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ca:	f7ff ffdc 	bl	8008586 <__sfputc_r>
 80085ce:	1c43      	adds	r3, r0, #1
 80085d0:	d1f3      	bne.n	80085ba <__sfputs_r+0xa>
 80085d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080085d4 <_vfiprintf_r>:
 80085d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d8:	460d      	mov	r5, r1
 80085da:	4614      	mov	r4, r2
 80085dc:	4698      	mov	r8, r3
 80085de:	4606      	mov	r6, r0
 80085e0:	b09d      	sub	sp, #116	; 0x74
 80085e2:	b118      	cbz	r0, 80085ec <_vfiprintf_r+0x18>
 80085e4:	6a03      	ldr	r3, [r0, #32]
 80085e6:	b90b      	cbnz	r3, 80085ec <_vfiprintf_r+0x18>
 80085e8:	f7fe fb66 	bl	8006cb8 <__sinit>
 80085ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085ee:	07d9      	lsls	r1, r3, #31
 80085f0:	d405      	bmi.n	80085fe <_vfiprintf_r+0x2a>
 80085f2:	89ab      	ldrh	r3, [r5, #12]
 80085f4:	059a      	lsls	r2, r3, #22
 80085f6:	d402      	bmi.n	80085fe <_vfiprintf_r+0x2a>
 80085f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085fa:	f7fe fc64 	bl	8006ec6 <__retarget_lock_acquire_recursive>
 80085fe:	89ab      	ldrh	r3, [r5, #12]
 8008600:	071b      	lsls	r3, r3, #28
 8008602:	d501      	bpl.n	8008608 <_vfiprintf_r+0x34>
 8008604:	692b      	ldr	r3, [r5, #16]
 8008606:	b99b      	cbnz	r3, 8008630 <_vfiprintf_r+0x5c>
 8008608:	4629      	mov	r1, r5
 800860a:	4630      	mov	r0, r6
 800860c:	f000 f93a 	bl	8008884 <__swsetup_r>
 8008610:	b170      	cbz	r0, 8008630 <_vfiprintf_r+0x5c>
 8008612:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008614:	07dc      	lsls	r4, r3, #31
 8008616:	d504      	bpl.n	8008622 <_vfiprintf_r+0x4e>
 8008618:	f04f 30ff 	mov.w	r0, #4294967295
 800861c:	b01d      	add	sp, #116	; 0x74
 800861e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008622:	89ab      	ldrh	r3, [r5, #12]
 8008624:	0598      	lsls	r0, r3, #22
 8008626:	d4f7      	bmi.n	8008618 <_vfiprintf_r+0x44>
 8008628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800862a:	f7fe fc4d 	bl	8006ec8 <__retarget_lock_release_recursive>
 800862e:	e7f3      	b.n	8008618 <_vfiprintf_r+0x44>
 8008630:	2300      	movs	r3, #0
 8008632:	9309      	str	r3, [sp, #36]	; 0x24
 8008634:	2320      	movs	r3, #32
 8008636:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800863a:	2330      	movs	r3, #48	; 0x30
 800863c:	f04f 0901 	mov.w	r9, #1
 8008640:	f8cd 800c 	str.w	r8, [sp, #12]
 8008644:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80087f4 <_vfiprintf_r+0x220>
 8008648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800864c:	4623      	mov	r3, r4
 800864e:	469a      	mov	sl, r3
 8008650:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008654:	b10a      	cbz	r2, 800865a <_vfiprintf_r+0x86>
 8008656:	2a25      	cmp	r2, #37	; 0x25
 8008658:	d1f9      	bne.n	800864e <_vfiprintf_r+0x7a>
 800865a:	ebba 0b04 	subs.w	fp, sl, r4
 800865e:	d00b      	beq.n	8008678 <_vfiprintf_r+0xa4>
 8008660:	465b      	mov	r3, fp
 8008662:	4622      	mov	r2, r4
 8008664:	4629      	mov	r1, r5
 8008666:	4630      	mov	r0, r6
 8008668:	f7ff ffa2 	bl	80085b0 <__sfputs_r>
 800866c:	3001      	adds	r0, #1
 800866e:	f000 80a9 	beq.w	80087c4 <_vfiprintf_r+0x1f0>
 8008672:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008674:	445a      	add	r2, fp
 8008676:	9209      	str	r2, [sp, #36]	; 0x24
 8008678:	f89a 3000 	ldrb.w	r3, [sl]
 800867c:	2b00      	cmp	r3, #0
 800867e:	f000 80a1 	beq.w	80087c4 <_vfiprintf_r+0x1f0>
 8008682:	2300      	movs	r3, #0
 8008684:	f04f 32ff 	mov.w	r2, #4294967295
 8008688:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800868c:	f10a 0a01 	add.w	sl, sl, #1
 8008690:	9304      	str	r3, [sp, #16]
 8008692:	9307      	str	r3, [sp, #28]
 8008694:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008698:	931a      	str	r3, [sp, #104]	; 0x68
 800869a:	4654      	mov	r4, sl
 800869c:	2205      	movs	r2, #5
 800869e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086a2:	4854      	ldr	r0, [pc, #336]	; (80087f4 <_vfiprintf_r+0x220>)
 80086a4:	f7fe fc11 	bl	8006eca <memchr>
 80086a8:	9a04      	ldr	r2, [sp, #16]
 80086aa:	b9d8      	cbnz	r0, 80086e4 <_vfiprintf_r+0x110>
 80086ac:	06d1      	lsls	r1, r2, #27
 80086ae:	bf44      	itt	mi
 80086b0:	2320      	movmi	r3, #32
 80086b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086b6:	0713      	lsls	r3, r2, #28
 80086b8:	bf44      	itt	mi
 80086ba:	232b      	movmi	r3, #43	; 0x2b
 80086bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086c0:	f89a 3000 	ldrb.w	r3, [sl]
 80086c4:	2b2a      	cmp	r3, #42	; 0x2a
 80086c6:	d015      	beq.n	80086f4 <_vfiprintf_r+0x120>
 80086c8:	4654      	mov	r4, sl
 80086ca:	2000      	movs	r0, #0
 80086cc:	f04f 0c0a 	mov.w	ip, #10
 80086d0:	9a07      	ldr	r2, [sp, #28]
 80086d2:	4621      	mov	r1, r4
 80086d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086d8:	3b30      	subs	r3, #48	; 0x30
 80086da:	2b09      	cmp	r3, #9
 80086dc:	d94d      	bls.n	800877a <_vfiprintf_r+0x1a6>
 80086de:	b1b0      	cbz	r0, 800870e <_vfiprintf_r+0x13a>
 80086e0:	9207      	str	r2, [sp, #28]
 80086e2:	e014      	b.n	800870e <_vfiprintf_r+0x13a>
 80086e4:	eba0 0308 	sub.w	r3, r0, r8
 80086e8:	fa09 f303 	lsl.w	r3, r9, r3
 80086ec:	4313      	orrs	r3, r2
 80086ee:	46a2      	mov	sl, r4
 80086f0:	9304      	str	r3, [sp, #16]
 80086f2:	e7d2      	b.n	800869a <_vfiprintf_r+0xc6>
 80086f4:	9b03      	ldr	r3, [sp, #12]
 80086f6:	1d19      	adds	r1, r3, #4
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	9103      	str	r1, [sp, #12]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	bfbb      	ittet	lt
 8008700:	425b      	neglt	r3, r3
 8008702:	f042 0202 	orrlt.w	r2, r2, #2
 8008706:	9307      	strge	r3, [sp, #28]
 8008708:	9307      	strlt	r3, [sp, #28]
 800870a:	bfb8      	it	lt
 800870c:	9204      	strlt	r2, [sp, #16]
 800870e:	7823      	ldrb	r3, [r4, #0]
 8008710:	2b2e      	cmp	r3, #46	; 0x2e
 8008712:	d10c      	bne.n	800872e <_vfiprintf_r+0x15a>
 8008714:	7863      	ldrb	r3, [r4, #1]
 8008716:	2b2a      	cmp	r3, #42	; 0x2a
 8008718:	d134      	bne.n	8008784 <_vfiprintf_r+0x1b0>
 800871a:	9b03      	ldr	r3, [sp, #12]
 800871c:	3402      	adds	r4, #2
 800871e:	1d1a      	adds	r2, r3, #4
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	9203      	str	r2, [sp, #12]
 8008724:	2b00      	cmp	r3, #0
 8008726:	bfb8      	it	lt
 8008728:	f04f 33ff 	movlt.w	r3, #4294967295
 800872c:	9305      	str	r3, [sp, #20]
 800872e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80087f8 <_vfiprintf_r+0x224>
 8008732:	2203      	movs	r2, #3
 8008734:	4650      	mov	r0, sl
 8008736:	7821      	ldrb	r1, [r4, #0]
 8008738:	f7fe fbc7 	bl	8006eca <memchr>
 800873c:	b138      	cbz	r0, 800874e <_vfiprintf_r+0x17a>
 800873e:	2240      	movs	r2, #64	; 0x40
 8008740:	9b04      	ldr	r3, [sp, #16]
 8008742:	eba0 000a 	sub.w	r0, r0, sl
 8008746:	4082      	lsls	r2, r0
 8008748:	4313      	orrs	r3, r2
 800874a:	3401      	adds	r4, #1
 800874c:	9304      	str	r3, [sp, #16]
 800874e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008752:	2206      	movs	r2, #6
 8008754:	4829      	ldr	r0, [pc, #164]	; (80087fc <_vfiprintf_r+0x228>)
 8008756:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800875a:	f7fe fbb6 	bl	8006eca <memchr>
 800875e:	2800      	cmp	r0, #0
 8008760:	d03f      	beq.n	80087e2 <_vfiprintf_r+0x20e>
 8008762:	4b27      	ldr	r3, [pc, #156]	; (8008800 <_vfiprintf_r+0x22c>)
 8008764:	bb1b      	cbnz	r3, 80087ae <_vfiprintf_r+0x1da>
 8008766:	9b03      	ldr	r3, [sp, #12]
 8008768:	3307      	adds	r3, #7
 800876a:	f023 0307 	bic.w	r3, r3, #7
 800876e:	3308      	adds	r3, #8
 8008770:	9303      	str	r3, [sp, #12]
 8008772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008774:	443b      	add	r3, r7
 8008776:	9309      	str	r3, [sp, #36]	; 0x24
 8008778:	e768      	b.n	800864c <_vfiprintf_r+0x78>
 800877a:	460c      	mov	r4, r1
 800877c:	2001      	movs	r0, #1
 800877e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008782:	e7a6      	b.n	80086d2 <_vfiprintf_r+0xfe>
 8008784:	2300      	movs	r3, #0
 8008786:	f04f 0c0a 	mov.w	ip, #10
 800878a:	4619      	mov	r1, r3
 800878c:	3401      	adds	r4, #1
 800878e:	9305      	str	r3, [sp, #20]
 8008790:	4620      	mov	r0, r4
 8008792:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008796:	3a30      	subs	r2, #48	; 0x30
 8008798:	2a09      	cmp	r2, #9
 800879a:	d903      	bls.n	80087a4 <_vfiprintf_r+0x1d0>
 800879c:	2b00      	cmp	r3, #0
 800879e:	d0c6      	beq.n	800872e <_vfiprintf_r+0x15a>
 80087a0:	9105      	str	r1, [sp, #20]
 80087a2:	e7c4      	b.n	800872e <_vfiprintf_r+0x15a>
 80087a4:	4604      	mov	r4, r0
 80087a6:	2301      	movs	r3, #1
 80087a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80087ac:	e7f0      	b.n	8008790 <_vfiprintf_r+0x1bc>
 80087ae:	ab03      	add	r3, sp, #12
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	462a      	mov	r2, r5
 80087b4:	4630      	mov	r0, r6
 80087b6:	4b13      	ldr	r3, [pc, #76]	; (8008804 <_vfiprintf_r+0x230>)
 80087b8:	a904      	add	r1, sp, #16
 80087ba:	f7fd fe2f 	bl	800641c <_printf_float>
 80087be:	4607      	mov	r7, r0
 80087c0:	1c78      	adds	r0, r7, #1
 80087c2:	d1d6      	bne.n	8008772 <_vfiprintf_r+0x19e>
 80087c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087c6:	07d9      	lsls	r1, r3, #31
 80087c8:	d405      	bmi.n	80087d6 <_vfiprintf_r+0x202>
 80087ca:	89ab      	ldrh	r3, [r5, #12]
 80087cc:	059a      	lsls	r2, r3, #22
 80087ce:	d402      	bmi.n	80087d6 <_vfiprintf_r+0x202>
 80087d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087d2:	f7fe fb79 	bl	8006ec8 <__retarget_lock_release_recursive>
 80087d6:	89ab      	ldrh	r3, [r5, #12]
 80087d8:	065b      	lsls	r3, r3, #25
 80087da:	f53f af1d 	bmi.w	8008618 <_vfiprintf_r+0x44>
 80087de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087e0:	e71c      	b.n	800861c <_vfiprintf_r+0x48>
 80087e2:	ab03      	add	r3, sp, #12
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	462a      	mov	r2, r5
 80087e8:	4630      	mov	r0, r6
 80087ea:	4b06      	ldr	r3, [pc, #24]	; (8008804 <_vfiprintf_r+0x230>)
 80087ec:	a904      	add	r1, sp, #16
 80087ee:	f7fe f8b5 	bl	800695c <_printf_i>
 80087f2:	e7e4      	b.n	80087be <_vfiprintf_r+0x1ea>
 80087f4:	08009633 	.word	0x08009633
 80087f8:	08009639 	.word	0x08009639
 80087fc:	0800963d 	.word	0x0800963d
 8008800:	0800641d 	.word	0x0800641d
 8008804:	080085b1 	.word	0x080085b1

08008808 <__swbuf_r>:
 8008808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880a:	460e      	mov	r6, r1
 800880c:	4614      	mov	r4, r2
 800880e:	4605      	mov	r5, r0
 8008810:	b118      	cbz	r0, 800881a <__swbuf_r+0x12>
 8008812:	6a03      	ldr	r3, [r0, #32]
 8008814:	b90b      	cbnz	r3, 800881a <__swbuf_r+0x12>
 8008816:	f7fe fa4f 	bl	8006cb8 <__sinit>
 800881a:	69a3      	ldr	r3, [r4, #24]
 800881c:	60a3      	str	r3, [r4, #8]
 800881e:	89a3      	ldrh	r3, [r4, #12]
 8008820:	071a      	lsls	r2, r3, #28
 8008822:	d525      	bpl.n	8008870 <__swbuf_r+0x68>
 8008824:	6923      	ldr	r3, [r4, #16]
 8008826:	b31b      	cbz	r3, 8008870 <__swbuf_r+0x68>
 8008828:	6823      	ldr	r3, [r4, #0]
 800882a:	6922      	ldr	r2, [r4, #16]
 800882c:	b2f6      	uxtb	r6, r6
 800882e:	1a98      	subs	r0, r3, r2
 8008830:	6963      	ldr	r3, [r4, #20]
 8008832:	4637      	mov	r7, r6
 8008834:	4283      	cmp	r3, r0
 8008836:	dc04      	bgt.n	8008842 <__swbuf_r+0x3a>
 8008838:	4621      	mov	r1, r4
 800883a:	4628      	mov	r0, r5
 800883c:	f7ff fe02 	bl	8008444 <_fflush_r>
 8008840:	b9e0      	cbnz	r0, 800887c <__swbuf_r+0x74>
 8008842:	68a3      	ldr	r3, [r4, #8]
 8008844:	3b01      	subs	r3, #1
 8008846:	60a3      	str	r3, [r4, #8]
 8008848:	6823      	ldr	r3, [r4, #0]
 800884a:	1c5a      	adds	r2, r3, #1
 800884c:	6022      	str	r2, [r4, #0]
 800884e:	701e      	strb	r6, [r3, #0]
 8008850:	6962      	ldr	r2, [r4, #20]
 8008852:	1c43      	adds	r3, r0, #1
 8008854:	429a      	cmp	r2, r3
 8008856:	d004      	beq.n	8008862 <__swbuf_r+0x5a>
 8008858:	89a3      	ldrh	r3, [r4, #12]
 800885a:	07db      	lsls	r3, r3, #31
 800885c:	d506      	bpl.n	800886c <__swbuf_r+0x64>
 800885e:	2e0a      	cmp	r6, #10
 8008860:	d104      	bne.n	800886c <__swbuf_r+0x64>
 8008862:	4621      	mov	r1, r4
 8008864:	4628      	mov	r0, r5
 8008866:	f7ff fded 	bl	8008444 <_fflush_r>
 800886a:	b938      	cbnz	r0, 800887c <__swbuf_r+0x74>
 800886c:	4638      	mov	r0, r7
 800886e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008870:	4621      	mov	r1, r4
 8008872:	4628      	mov	r0, r5
 8008874:	f000 f806 	bl	8008884 <__swsetup_r>
 8008878:	2800      	cmp	r0, #0
 800887a:	d0d5      	beq.n	8008828 <__swbuf_r+0x20>
 800887c:	f04f 37ff 	mov.w	r7, #4294967295
 8008880:	e7f4      	b.n	800886c <__swbuf_r+0x64>
	...

08008884 <__swsetup_r>:
 8008884:	b538      	push	{r3, r4, r5, lr}
 8008886:	4b2a      	ldr	r3, [pc, #168]	; (8008930 <__swsetup_r+0xac>)
 8008888:	4605      	mov	r5, r0
 800888a:	6818      	ldr	r0, [r3, #0]
 800888c:	460c      	mov	r4, r1
 800888e:	b118      	cbz	r0, 8008898 <__swsetup_r+0x14>
 8008890:	6a03      	ldr	r3, [r0, #32]
 8008892:	b90b      	cbnz	r3, 8008898 <__swsetup_r+0x14>
 8008894:	f7fe fa10 	bl	8006cb8 <__sinit>
 8008898:	89a3      	ldrh	r3, [r4, #12]
 800889a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800889e:	0718      	lsls	r0, r3, #28
 80088a0:	d422      	bmi.n	80088e8 <__swsetup_r+0x64>
 80088a2:	06d9      	lsls	r1, r3, #27
 80088a4:	d407      	bmi.n	80088b6 <__swsetup_r+0x32>
 80088a6:	2309      	movs	r3, #9
 80088a8:	602b      	str	r3, [r5, #0]
 80088aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088ae:	f04f 30ff 	mov.w	r0, #4294967295
 80088b2:	81a3      	strh	r3, [r4, #12]
 80088b4:	e034      	b.n	8008920 <__swsetup_r+0x9c>
 80088b6:	0758      	lsls	r0, r3, #29
 80088b8:	d512      	bpl.n	80088e0 <__swsetup_r+0x5c>
 80088ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088bc:	b141      	cbz	r1, 80088d0 <__swsetup_r+0x4c>
 80088be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088c2:	4299      	cmp	r1, r3
 80088c4:	d002      	beq.n	80088cc <__swsetup_r+0x48>
 80088c6:	4628      	mov	r0, r5
 80088c8:	f7ff f97a 	bl	8007bc0 <_free_r>
 80088cc:	2300      	movs	r3, #0
 80088ce:	6363      	str	r3, [r4, #52]	; 0x34
 80088d0:	89a3      	ldrh	r3, [r4, #12]
 80088d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088d6:	81a3      	strh	r3, [r4, #12]
 80088d8:	2300      	movs	r3, #0
 80088da:	6063      	str	r3, [r4, #4]
 80088dc:	6923      	ldr	r3, [r4, #16]
 80088de:	6023      	str	r3, [r4, #0]
 80088e0:	89a3      	ldrh	r3, [r4, #12]
 80088e2:	f043 0308 	orr.w	r3, r3, #8
 80088e6:	81a3      	strh	r3, [r4, #12]
 80088e8:	6923      	ldr	r3, [r4, #16]
 80088ea:	b94b      	cbnz	r3, 8008900 <__swsetup_r+0x7c>
 80088ec:	89a3      	ldrh	r3, [r4, #12]
 80088ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088f6:	d003      	beq.n	8008900 <__swsetup_r+0x7c>
 80088f8:	4621      	mov	r1, r4
 80088fa:	4628      	mov	r0, r5
 80088fc:	f000 f883 	bl	8008a06 <__smakebuf_r>
 8008900:	89a0      	ldrh	r0, [r4, #12]
 8008902:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008906:	f010 0301 	ands.w	r3, r0, #1
 800890a:	d00a      	beq.n	8008922 <__swsetup_r+0x9e>
 800890c:	2300      	movs	r3, #0
 800890e:	60a3      	str	r3, [r4, #8]
 8008910:	6963      	ldr	r3, [r4, #20]
 8008912:	425b      	negs	r3, r3
 8008914:	61a3      	str	r3, [r4, #24]
 8008916:	6923      	ldr	r3, [r4, #16]
 8008918:	b943      	cbnz	r3, 800892c <__swsetup_r+0xa8>
 800891a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800891e:	d1c4      	bne.n	80088aa <__swsetup_r+0x26>
 8008920:	bd38      	pop	{r3, r4, r5, pc}
 8008922:	0781      	lsls	r1, r0, #30
 8008924:	bf58      	it	pl
 8008926:	6963      	ldrpl	r3, [r4, #20]
 8008928:	60a3      	str	r3, [r4, #8]
 800892a:	e7f4      	b.n	8008916 <__swsetup_r+0x92>
 800892c:	2000      	movs	r0, #0
 800892e:	e7f7      	b.n	8008920 <__swsetup_r+0x9c>
 8008930:	200000c8 	.word	0x200000c8

08008934 <_raise_r>:
 8008934:	291f      	cmp	r1, #31
 8008936:	b538      	push	{r3, r4, r5, lr}
 8008938:	4604      	mov	r4, r0
 800893a:	460d      	mov	r5, r1
 800893c:	d904      	bls.n	8008948 <_raise_r+0x14>
 800893e:	2316      	movs	r3, #22
 8008940:	6003      	str	r3, [r0, #0]
 8008942:	f04f 30ff 	mov.w	r0, #4294967295
 8008946:	bd38      	pop	{r3, r4, r5, pc}
 8008948:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800894a:	b112      	cbz	r2, 8008952 <_raise_r+0x1e>
 800894c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008950:	b94b      	cbnz	r3, 8008966 <_raise_r+0x32>
 8008952:	4620      	mov	r0, r4
 8008954:	f000 f830 	bl	80089b8 <_getpid_r>
 8008958:	462a      	mov	r2, r5
 800895a:	4601      	mov	r1, r0
 800895c:	4620      	mov	r0, r4
 800895e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008962:	f000 b817 	b.w	8008994 <_kill_r>
 8008966:	2b01      	cmp	r3, #1
 8008968:	d00a      	beq.n	8008980 <_raise_r+0x4c>
 800896a:	1c59      	adds	r1, r3, #1
 800896c:	d103      	bne.n	8008976 <_raise_r+0x42>
 800896e:	2316      	movs	r3, #22
 8008970:	6003      	str	r3, [r0, #0]
 8008972:	2001      	movs	r0, #1
 8008974:	e7e7      	b.n	8008946 <_raise_r+0x12>
 8008976:	2400      	movs	r4, #0
 8008978:	4628      	mov	r0, r5
 800897a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800897e:	4798      	blx	r3
 8008980:	2000      	movs	r0, #0
 8008982:	e7e0      	b.n	8008946 <_raise_r+0x12>

08008984 <raise>:
 8008984:	4b02      	ldr	r3, [pc, #8]	; (8008990 <raise+0xc>)
 8008986:	4601      	mov	r1, r0
 8008988:	6818      	ldr	r0, [r3, #0]
 800898a:	f7ff bfd3 	b.w	8008934 <_raise_r>
 800898e:	bf00      	nop
 8008990:	200000c8 	.word	0x200000c8

08008994 <_kill_r>:
 8008994:	b538      	push	{r3, r4, r5, lr}
 8008996:	2300      	movs	r3, #0
 8008998:	4d06      	ldr	r5, [pc, #24]	; (80089b4 <_kill_r+0x20>)
 800899a:	4604      	mov	r4, r0
 800899c:	4608      	mov	r0, r1
 800899e:	4611      	mov	r1, r2
 80089a0:	602b      	str	r3, [r5, #0]
 80089a2:	f7f9 ff30 	bl	8002806 <_kill>
 80089a6:	1c43      	adds	r3, r0, #1
 80089a8:	d102      	bne.n	80089b0 <_kill_r+0x1c>
 80089aa:	682b      	ldr	r3, [r5, #0]
 80089ac:	b103      	cbz	r3, 80089b0 <_kill_r+0x1c>
 80089ae:	6023      	str	r3, [r4, #0]
 80089b0:	bd38      	pop	{r3, r4, r5, pc}
 80089b2:	bf00      	nop
 80089b4:	20000a50 	.word	0x20000a50

080089b8 <_getpid_r>:
 80089b8:	f7f9 bf1e 	b.w	80027f8 <_getpid>

080089bc <__swhatbuf_r>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	460c      	mov	r4, r1
 80089c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089c4:	4615      	mov	r5, r2
 80089c6:	2900      	cmp	r1, #0
 80089c8:	461e      	mov	r6, r3
 80089ca:	b096      	sub	sp, #88	; 0x58
 80089cc:	da0c      	bge.n	80089e8 <__swhatbuf_r+0x2c>
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	2100      	movs	r1, #0
 80089d2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80089d6:	bf0c      	ite	eq
 80089d8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80089dc:	2340      	movne	r3, #64	; 0x40
 80089de:	2000      	movs	r0, #0
 80089e0:	6031      	str	r1, [r6, #0]
 80089e2:	602b      	str	r3, [r5, #0]
 80089e4:	b016      	add	sp, #88	; 0x58
 80089e6:	bd70      	pop	{r4, r5, r6, pc}
 80089e8:	466a      	mov	r2, sp
 80089ea:	f000 f849 	bl	8008a80 <_fstat_r>
 80089ee:	2800      	cmp	r0, #0
 80089f0:	dbed      	blt.n	80089ce <__swhatbuf_r+0x12>
 80089f2:	9901      	ldr	r1, [sp, #4]
 80089f4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80089f8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80089fc:	4259      	negs	r1, r3
 80089fe:	4159      	adcs	r1, r3
 8008a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a04:	e7eb      	b.n	80089de <__swhatbuf_r+0x22>

08008a06 <__smakebuf_r>:
 8008a06:	898b      	ldrh	r3, [r1, #12]
 8008a08:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a0a:	079d      	lsls	r5, r3, #30
 8008a0c:	4606      	mov	r6, r0
 8008a0e:	460c      	mov	r4, r1
 8008a10:	d507      	bpl.n	8008a22 <__smakebuf_r+0x1c>
 8008a12:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a16:	6023      	str	r3, [r4, #0]
 8008a18:	6123      	str	r3, [r4, #16]
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	6163      	str	r3, [r4, #20]
 8008a1e:	b002      	add	sp, #8
 8008a20:	bd70      	pop	{r4, r5, r6, pc}
 8008a22:	466a      	mov	r2, sp
 8008a24:	ab01      	add	r3, sp, #4
 8008a26:	f7ff ffc9 	bl	80089bc <__swhatbuf_r>
 8008a2a:	9900      	ldr	r1, [sp, #0]
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	4630      	mov	r0, r6
 8008a30:	f7fd fbcc 	bl	80061cc <_malloc_r>
 8008a34:	b948      	cbnz	r0, 8008a4a <__smakebuf_r+0x44>
 8008a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a3a:	059a      	lsls	r2, r3, #22
 8008a3c:	d4ef      	bmi.n	8008a1e <__smakebuf_r+0x18>
 8008a3e:	f023 0303 	bic.w	r3, r3, #3
 8008a42:	f043 0302 	orr.w	r3, r3, #2
 8008a46:	81a3      	strh	r3, [r4, #12]
 8008a48:	e7e3      	b.n	8008a12 <__smakebuf_r+0xc>
 8008a4a:	89a3      	ldrh	r3, [r4, #12]
 8008a4c:	6020      	str	r0, [r4, #0]
 8008a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a52:	81a3      	strh	r3, [r4, #12]
 8008a54:	9b00      	ldr	r3, [sp, #0]
 8008a56:	6120      	str	r0, [r4, #16]
 8008a58:	6163      	str	r3, [r4, #20]
 8008a5a:	9b01      	ldr	r3, [sp, #4]
 8008a5c:	b15b      	cbz	r3, 8008a76 <__smakebuf_r+0x70>
 8008a5e:	4630      	mov	r0, r6
 8008a60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a64:	f000 f81e 	bl	8008aa4 <_isatty_r>
 8008a68:	b128      	cbz	r0, 8008a76 <__smakebuf_r+0x70>
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	f023 0303 	bic.w	r3, r3, #3
 8008a70:	f043 0301 	orr.w	r3, r3, #1
 8008a74:	81a3      	strh	r3, [r4, #12]
 8008a76:	89a3      	ldrh	r3, [r4, #12]
 8008a78:	431d      	orrs	r5, r3
 8008a7a:	81a5      	strh	r5, [r4, #12]
 8008a7c:	e7cf      	b.n	8008a1e <__smakebuf_r+0x18>
	...

08008a80 <_fstat_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	2300      	movs	r3, #0
 8008a84:	4d06      	ldr	r5, [pc, #24]	; (8008aa0 <_fstat_r+0x20>)
 8008a86:	4604      	mov	r4, r0
 8008a88:	4608      	mov	r0, r1
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	602b      	str	r3, [r5, #0]
 8008a8e:	f7f9 ff18 	bl	80028c2 <_fstat>
 8008a92:	1c43      	adds	r3, r0, #1
 8008a94:	d102      	bne.n	8008a9c <_fstat_r+0x1c>
 8008a96:	682b      	ldr	r3, [r5, #0]
 8008a98:	b103      	cbz	r3, 8008a9c <_fstat_r+0x1c>
 8008a9a:	6023      	str	r3, [r4, #0]
 8008a9c:	bd38      	pop	{r3, r4, r5, pc}
 8008a9e:	bf00      	nop
 8008aa0:	20000a50 	.word	0x20000a50

08008aa4 <_isatty_r>:
 8008aa4:	b538      	push	{r3, r4, r5, lr}
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	4d05      	ldr	r5, [pc, #20]	; (8008ac0 <_isatty_r+0x1c>)
 8008aaa:	4604      	mov	r4, r0
 8008aac:	4608      	mov	r0, r1
 8008aae:	602b      	str	r3, [r5, #0]
 8008ab0:	f7f9 ff16 	bl	80028e0 <_isatty>
 8008ab4:	1c43      	adds	r3, r0, #1
 8008ab6:	d102      	bne.n	8008abe <_isatty_r+0x1a>
 8008ab8:	682b      	ldr	r3, [r5, #0]
 8008aba:	b103      	cbz	r3, 8008abe <_isatty_r+0x1a>
 8008abc:	6023      	str	r3, [r4, #0]
 8008abe:	bd38      	pop	{r3, r4, r5, pc}
 8008ac0:	20000a50 	.word	0x20000a50

08008ac4 <log>:
 8008ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	460d      	mov	r5, r1
 8008aca:	f000 f835 	bl	8008b38 <__ieee754_log>
 8008ace:	4622      	mov	r2, r4
 8008ad0:	4606      	mov	r6, r0
 8008ad2:	460f      	mov	r7, r1
 8008ad4:	462b      	mov	r3, r5
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	4629      	mov	r1, r5
 8008ada:	f7f7 ffd3 	bl	8000a84 <__aeabi_dcmpun>
 8008ade:	b998      	cbnz	r0, 8008b08 <log+0x44>
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	4629      	mov	r1, r5
 8008ae8:	f7f7 ffc2 	bl	8000a70 <__aeabi_dcmpgt>
 8008aec:	b960      	cbnz	r0, 8008b08 <log+0x44>
 8008aee:	2200      	movs	r2, #0
 8008af0:	2300      	movs	r3, #0
 8008af2:	4620      	mov	r0, r4
 8008af4:	4629      	mov	r1, r5
 8008af6:	f7f7 ff93 	bl	8000a20 <__aeabi_dcmpeq>
 8008afa:	b140      	cbz	r0, 8008b0e <log+0x4a>
 8008afc:	f7fe f9b8 	bl	8006e70 <__errno>
 8008b00:	2322      	movs	r3, #34	; 0x22
 8008b02:	2600      	movs	r6, #0
 8008b04:	4f06      	ldr	r7, [pc, #24]	; (8008b20 <log+0x5c>)
 8008b06:	6003      	str	r3, [r0, #0]
 8008b08:	4630      	mov	r0, r6
 8008b0a:	4639      	mov	r1, r7
 8008b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b0e:	f7fe f9af 	bl	8006e70 <__errno>
 8008b12:	2321      	movs	r3, #33	; 0x21
 8008b14:	6003      	str	r3, [r0, #0]
 8008b16:	4803      	ldr	r0, [pc, #12]	; (8008b24 <log+0x60>)
 8008b18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008b1c:	f000 b804 	b.w	8008b28 <nan>
 8008b20:	fff00000 	.word	0xfff00000
 8008b24:	08009531 	.word	0x08009531

08008b28 <nan>:
 8008b28:	2000      	movs	r0, #0
 8008b2a:	4901      	ldr	r1, [pc, #4]	; (8008b30 <nan+0x8>)
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	7ff80000 	.word	0x7ff80000
 8008b34:	00000000 	.word	0x00000000

08008b38 <__ieee754_log>:
 8008b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	460d      	mov	r5, r1
 8008b46:	b087      	sub	sp, #28
 8008b48:	da24      	bge.n	8008b94 <__ieee754_log+0x5c>
 8008b4a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8008b4e:	4304      	orrs	r4, r0
 8008b50:	d108      	bne.n	8008b64 <__ieee754_log+0x2c>
 8008b52:	2200      	movs	r2, #0
 8008b54:	2300      	movs	r3, #0
 8008b56:	2000      	movs	r0, #0
 8008b58:	49cb      	ldr	r1, [pc, #812]	; (8008e88 <__ieee754_log+0x350>)
 8008b5a:	f7f7 fe23 	bl	80007a4 <__aeabi_ddiv>
 8008b5e:	b007      	add	sp, #28
 8008b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b64:	2900      	cmp	r1, #0
 8008b66:	da04      	bge.n	8008b72 <__ieee754_log+0x3a>
 8008b68:	f7f7 fb3a 	bl	80001e0 <__aeabi_dsub>
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	2300      	movs	r3, #0
 8008b70:	e7f3      	b.n	8008b5a <__ieee754_log+0x22>
 8008b72:	2200      	movs	r2, #0
 8008b74:	4bc5      	ldr	r3, [pc, #788]	; (8008e8c <__ieee754_log+0x354>)
 8008b76:	f7f7 fceb 	bl	8000550 <__aeabi_dmul>
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	460d      	mov	r5, r1
 8008b7e:	4602      	mov	r2, r0
 8008b80:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8008b84:	48c2      	ldr	r0, [pc, #776]	; (8008e90 <__ieee754_log+0x358>)
 8008b86:	4285      	cmp	r5, r0
 8008b88:	dd06      	ble.n	8008b98 <__ieee754_log+0x60>
 8008b8a:	4610      	mov	r0, r2
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	f7f7 fb29 	bl	80001e4 <__adddf3>
 8008b92:	e7e4      	b.n	8008b5e <__ieee754_log+0x26>
 8008b94:	2100      	movs	r1, #0
 8008b96:	e7f5      	b.n	8008b84 <__ieee754_log+0x4c>
 8008b98:	152c      	asrs	r4, r5, #20
 8008b9a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008b9e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008ba2:	440c      	add	r4, r1
 8008ba4:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 8008ba8:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 8008bac:	f401 1680 	and.w	r6, r1, #1048576	; 0x100000
 8008bb0:	f086 517f 	eor.w	r1, r6, #1069547520	; 0x3fc00000
 8008bb4:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8008bb8:	ea41 0305 	orr.w	r3, r1, r5
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	4bb4      	ldr	r3, [pc, #720]	; (8008e94 <__ieee754_log+0x35c>)
 8008bc4:	f7f7 fb0c 	bl	80001e0 <__aeabi_dsub>
 8008bc8:	1cab      	adds	r3, r5, #2
 8008bca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	4682      	mov	sl, r0
 8008bd2:	468b      	mov	fp, r1
 8008bd4:	f04f 0200 	mov.w	r2, #0
 8008bd8:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 8008bdc:	dc53      	bgt.n	8008c86 <__ieee754_log+0x14e>
 8008bde:	2300      	movs	r3, #0
 8008be0:	f7f7 ff1e 	bl	8000a20 <__aeabi_dcmpeq>
 8008be4:	b1d0      	cbz	r0, 8008c1c <__ieee754_log+0xe4>
 8008be6:	2c00      	cmp	r4, #0
 8008be8:	f000 8122 	beq.w	8008e30 <__ieee754_log+0x2f8>
 8008bec:	4620      	mov	r0, r4
 8008bee:	f7f7 fc45 	bl	800047c <__aeabi_i2d>
 8008bf2:	a391      	add	r3, pc, #580	; (adr r3, 8008e38 <__ieee754_log+0x300>)
 8008bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf8:	4606      	mov	r6, r0
 8008bfa:	460f      	mov	r7, r1
 8008bfc:	f7f7 fca8 	bl	8000550 <__aeabi_dmul>
 8008c00:	a38f      	add	r3, pc, #572	; (adr r3, 8008e40 <__ieee754_log+0x308>)
 8008c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c06:	4604      	mov	r4, r0
 8008c08:	460d      	mov	r5, r1
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	4639      	mov	r1, r7
 8008c0e:	f7f7 fc9f 	bl	8000550 <__aeabi_dmul>
 8008c12:	4602      	mov	r2, r0
 8008c14:	460b      	mov	r3, r1
 8008c16:	4620      	mov	r0, r4
 8008c18:	4629      	mov	r1, r5
 8008c1a:	e7b8      	b.n	8008b8e <__ieee754_log+0x56>
 8008c1c:	a38a      	add	r3, pc, #552	; (adr r3, 8008e48 <__ieee754_log+0x310>)
 8008c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c22:	4650      	mov	r0, sl
 8008c24:	4659      	mov	r1, fp
 8008c26:	f7f7 fc93 	bl	8000550 <__aeabi_dmul>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	2000      	movs	r0, #0
 8008c30:	4999      	ldr	r1, [pc, #612]	; (8008e98 <__ieee754_log+0x360>)
 8008c32:	f7f7 fad5 	bl	80001e0 <__aeabi_dsub>
 8008c36:	4652      	mov	r2, sl
 8008c38:	4606      	mov	r6, r0
 8008c3a:	460f      	mov	r7, r1
 8008c3c:	465b      	mov	r3, fp
 8008c3e:	4650      	mov	r0, sl
 8008c40:	4659      	mov	r1, fp
 8008c42:	f7f7 fc85 	bl	8000550 <__aeabi_dmul>
 8008c46:	4602      	mov	r2, r0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	4639      	mov	r1, r7
 8008c4e:	f7f7 fc7f 	bl	8000550 <__aeabi_dmul>
 8008c52:	4606      	mov	r6, r0
 8008c54:	460f      	mov	r7, r1
 8008c56:	b914      	cbnz	r4, 8008c5e <__ieee754_log+0x126>
 8008c58:	4632      	mov	r2, r6
 8008c5a:	463b      	mov	r3, r7
 8008c5c:	e0a2      	b.n	8008da4 <__ieee754_log+0x26c>
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f7f7 fc0c 	bl	800047c <__aeabi_i2d>
 8008c64:	a374      	add	r3, pc, #464	; (adr r3, 8008e38 <__ieee754_log+0x300>)
 8008c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6a:	4680      	mov	r8, r0
 8008c6c:	4689      	mov	r9, r1
 8008c6e:	f7f7 fc6f 	bl	8000550 <__aeabi_dmul>
 8008c72:	a373      	add	r3, pc, #460	; (adr r3, 8008e40 <__ieee754_log+0x308>)
 8008c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c78:	4604      	mov	r4, r0
 8008c7a:	460d      	mov	r5, r1
 8008c7c:	4640      	mov	r0, r8
 8008c7e:	4649      	mov	r1, r9
 8008c80:	f7f7 fc66 	bl	8000550 <__aeabi_dmul>
 8008c84:	e0a7      	b.n	8008dd6 <__ieee754_log+0x29e>
 8008c86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008c8a:	f7f7 faab 	bl	80001e4 <__adddf3>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	460b      	mov	r3, r1
 8008c92:	4650      	mov	r0, sl
 8008c94:	4659      	mov	r1, fp
 8008c96:	f7f7 fd85 	bl	80007a4 <__aeabi_ddiv>
 8008c9a:	e9cd 0100 	strd	r0, r1, [sp]
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f7f7 fbec 	bl	800047c <__aeabi_i2d>
 8008ca4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ca8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cac:	4610      	mov	r0, r2
 8008cae:	4619      	mov	r1, r3
 8008cb0:	f7f7 fc4e 	bl	8000550 <__aeabi_dmul>
 8008cb4:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8008cb8:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	9305      	str	r3, [sp, #20]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	4606      	mov	r6, r0
 8008cc4:	460f      	mov	r7, r1
 8008cc6:	f7f7 fc43 	bl	8000550 <__aeabi_dmul>
 8008cca:	a361      	add	r3, pc, #388	; (adr r3, 8008e50 <__ieee754_log+0x318>)
 8008ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd0:	4680      	mov	r8, r0
 8008cd2:	4689      	mov	r9, r1
 8008cd4:	f7f7 fc3c 	bl	8000550 <__aeabi_dmul>
 8008cd8:	a35f      	add	r3, pc, #380	; (adr r3, 8008e58 <__ieee754_log+0x320>)
 8008cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cde:	f7f7 fa81 	bl	80001e4 <__adddf3>
 8008ce2:	4642      	mov	r2, r8
 8008ce4:	464b      	mov	r3, r9
 8008ce6:	f7f7 fc33 	bl	8000550 <__aeabi_dmul>
 8008cea:	a35d      	add	r3, pc, #372	; (adr r3, 8008e60 <__ieee754_log+0x328>)
 8008cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf0:	f7f7 fa78 	bl	80001e4 <__adddf3>
 8008cf4:	4642      	mov	r2, r8
 8008cf6:	464b      	mov	r3, r9
 8008cf8:	f7f7 fc2a 	bl	8000550 <__aeabi_dmul>
 8008cfc:	a35a      	add	r3, pc, #360	; (adr r3, 8008e68 <__ieee754_log+0x330>)
 8008cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d02:	f7f7 fa6f 	bl	80001e4 <__adddf3>
 8008d06:	4632      	mov	r2, r6
 8008d08:	463b      	mov	r3, r7
 8008d0a:	f7f7 fc21 	bl	8000550 <__aeabi_dmul>
 8008d0e:	a358      	add	r3, pc, #352	; (adr r3, 8008e70 <__ieee754_log+0x338>)
 8008d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d14:	4606      	mov	r6, r0
 8008d16:	460f      	mov	r7, r1
 8008d18:	4640      	mov	r0, r8
 8008d1a:	4649      	mov	r1, r9
 8008d1c:	f7f7 fc18 	bl	8000550 <__aeabi_dmul>
 8008d20:	a355      	add	r3, pc, #340	; (adr r3, 8008e78 <__ieee754_log+0x340>)
 8008d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d26:	f7f7 fa5d 	bl	80001e4 <__adddf3>
 8008d2a:	4642      	mov	r2, r8
 8008d2c:	464b      	mov	r3, r9
 8008d2e:	f7f7 fc0f 	bl	8000550 <__aeabi_dmul>
 8008d32:	a353      	add	r3, pc, #332	; (adr r3, 8008e80 <__ieee754_log+0x348>)
 8008d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d38:	f7f7 fa54 	bl	80001e4 <__adddf3>
 8008d3c:	4642      	mov	r2, r8
 8008d3e:	464b      	mov	r3, r9
 8008d40:	f7f7 fc06 	bl	8000550 <__aeabi_dmul>
 8008d44:	460b      	mov	r3, r1
 8008d46:	4602      	mov	r2, r0
 8008d48:	4639      	mov	r1, r7
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	f7f7 fa4a 	bl	80001e4 <__adddf3>
 8008d50:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8008d54:	9b05      	ldr	r3, [sp, #20]
 8008d56:	3551      	adds	r5, #81	; 0x51
 8008d58:	431d      	orrs	r5, r3
 8008d5a:	2d00      	cmp	r5, #0
 8008d5c:	4680      	mov	r8, r0
 8008d5e:	4689      	mov	r9, r1
 8008d60:	dd48      	ble.n	8008df4 <__ieee754_log+0x2bc>
 8008d62:	2200      	movs	r2, #0
 8008d64:	4b4c      	ldr	r3, [pc, #304]	; (8008e98 <__ieee754_log+0x360>)
 8008d66:	4650      	mov	r0, sl
 8008d68:	4659      	mov	r1, fp
 8008d6a:	f7f7 fbf1 	bl	8000550 <__aeabi_dmul>
 8008d6e:	4652      	mov	r2, sl
 8008d70:	465b      	mov	r3, fp
 8008d72:	f7f7 fbed 	bl	8000550 <__aeabi_dmul>
 8008d76:	4602      	mov	r2, r0
 8008d78:	460b      	mov	r3, r1
 8008d7a:	4606      	mov	r6, r0
 8008d7c:	460f      	mov	r7, r1
 8008d7e:	4640      	mov	r0, r8
 8008d80:	4649      	mov	r1, r9
 8008d82:	f7f7 fa2f 	bl	80001e4 <__adddf3>
 8008d86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d8a:	f7f7 fbe1 	bl	8000550 <__aeabi_dmul>
 8008d8e:	4680      	mov	r8, r0
 8008d90:	4689      	mov	r9, r1
 8008d92:	b964      	cbnz	r4, 8008dae <__ieee754_log+0x276>
 8008d94:	4602      	mov	r2, r0
 8008d96:	460b      	mov	r3, r1
 8008d98:	4630      	mov	r0, r6
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	f7f7 fa20 	bl	80001e0 <__aeabi_dsub>
 8008da0:	4602      	mov	r2, r0
 8008da2:	460b      	mov	r3, r1
 8008da4:	4650      	mov	r0, sl
 8008da6:	4659      	mov	r1, fp
 8008da8:	f7f7 fa1a 	bl	80001e0 <__aeabi_dsub>
 8008dac:	e6d7      	b.n	8008b5e <__ieee754_log+0x26>
 8008dae:	a322      	add	r3, pc, #136	; (adr r3, 8008e38 <__ieee754_log+0x300>)
 8008db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008db8:	f7f7 fbca 	bl	8000550 <__aeabi_dmul>
 8008dbc:	a320      	add	r3, pc, #128	; (adr r3, 8008e40 <__ieee754_log+0x308>)
 8008dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc2:	4604      	mov	r4, r0
 8008dc4:	460d      	mov	r5, r1
 8008dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dca:	f7f7 fbc1 	bl	8000550 <__aeabi_dmul>
 8008dce:	4642      	mov	r2, r8
 8008dd0:	464b      	mov	r3, r9
 8008dd2:	f7f7 fa07 	bl	80001e4 <__adddf3>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	460b      	mov	r3, r1
 8008dda:	4630      	mov	r0, r6
 8008ddc:	4639      	mov	r1, r7
 8008dde:	f7f7 f9ff 	bl	80001e0 <__aeabi_dsub>
 8008de2:	4652      	mov	r2, sl
 8008de4:	465b      	mov	r3, fp
 8008de6:	f7f7 f9fb 	bl	80001e0 <__aeabi_dsub>
 8008dea:	4602      	mov	r2, r0
 8008dec:	460b      	mov	r3, r1
 8008dee:	4620      	mov	r0, r4
 8008df0:	4629      	mov	r1, r5
 8008df2:	e7d9      	b.n	8008da8 <__ieee754_log+0x270>
 8008df4:	4602      	mov	r2, r0
 8008df6:	460b      	mov	r3, r1
 8008df8:	4650      	mov	r0, sl
 8008dfa:	4659      	mov	r1, fp
 8008dfc:	f7f7 f9f0 	bl	80001e0 <__aeabi_dsub>
 8008e00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e04:	f7f7 fba4 	bl	8000550 <__aeabi_dmul>
 8008e08:	4606      	mov	r6, r0
 8008e0a:	460f      	mov	r7, r1
 8008e0c:	2c00      	cmp	r4, #0
 8008e0e:	f43f af23 	beq.w	8008c58 <__ieee754_log+0x120>
 8008e12:	a309      	add	r3, pc, #36	; (adr r3, 8008e38 <__ieee754_log+0x300>)
 8008e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e1c:	f7f7 fb98 	bl	8000550 <__aeabi_dmul>
 8008e20:	a307      	add	r3, pc, #28	; (adr r3, 8008e40 <__ieee754_log+0x308>)
 8008e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e26:	4604      	mov	r4, r0
 8008e28:	460d      	mov	r5, r1
 8008e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e2e:	e727      	b.n	8008c80 <__ieee754_log+0x148>
 8008e30:	2000      	movs	r0, #0
 8008e32:	2100      	movs	r1, #0
 8008e34:	e693      	b.n	8008b5e <__ieee754_log+0x26>
 8008e36:	bf00      	nop
 8008e38:	fee00000 	.word	0xfee00000
 8008e3c:	3fe62e42 	.word	0x3fe62e42
 8008e40:	35793c76 	.word	0x35793c76
 8008e44:	3dea39ef 	.word	0x3dea39ef
 8008e48:	55555555 	.word	0x55555555
 8008e4c:	3fd55555 	.word	0x3fd55555
 8008e50:	df3e5244 	.word	0xdf3e5244
 8008e54:	3fc2f112 	.word	0x3fc2f112
 8008e58:	96cb03de 	.word	0x96cb03de
 8008e5c:	3fc74664 	.word	0x3fc74664
 8008e60:	94229359 	.word	0x94229359
 8008e64:	3fd24924 	.word	0x3fd24924
 8008e68:	55555593 	.word	0x55555593
 8008e6c:	3fe55555 	.word	0x3fe55555
 8008e70:	d078c69f 	.word	0xd078c69f
 8008e74:	3fc39a09 	.word	0x3fc39a09
 8008e78:	1d8e78af 	.word	0x1d8e78af
 8008e7c:	3fcc71c5 	.word	0x3fcc71c5
 8008e80:	9997fa04 	.word	0x9997fa04
 8008e84:	3fd99999 	.word	0x3fd99999
 8008e88:	c3500000 	.word	0xc3500000
 8008e8c:	43500000 	.word	0x43500000
 8008e90:	7fefffff 	.word	0x7fefffff
 8008e94:	3ff00000 	.word	0x3ff00000
 8008e98:	3fe00000 	.word	0x3fe00000

08008e9c <_init>:
 8008e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e9e:	bf00      	nop
 8008ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ea2:	bc08      	pop	{r3}
 8008ea4:	469e      	mov	lr, r3
 8008ea6:	4770      	bx	lr

08008ea8 <_fini>:
 8008ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eaa:	bf00      	nop
 8008eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eae:	bc08      	pop	{r3}
 8008eb0:	469e      	mov	lr, r3
 8008eb2:	4770      	bx	lr
